
H08R6x.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00019980  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003790  08019a40  08019a40  00029a40  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801d1d0  0801d1d0  0003053c  2**0
                  CONTENTS
  4 .ARM          00000000  0801d1d0  0801d1d0  0003053c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0801d1d0  0801d1d0  0003053c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801d1d0  0801d1d0  0002d1d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801d1d4  0801d1d4  0002d1d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000053c  20000000  0801d1d8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006448  20000540  0801d714  00030540  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20006988  0801d714  00036988  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0003053c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00073bfa  00000000  00000000  00030564  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000a821  00000000  00000000  000a415e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0002e791  00000000  00000000  000ae97f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002378  00000000  00000000  000dd110  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002b80  00000000  00000000  000df488  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000353e5  00000000  00000000  000e2008  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000df7d  00000000  00000000  001173ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0012536a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007ed8  00000000  00000000  001253c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         000000cc  00000000  00000000  0012d298  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      000001b9  00000000  00000000  0012d364  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000540 	.word	0x20000540
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08019a24 	.word	0x08019a24

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000544 	.word	0x20000544
 8000100:	08019a24 	.word	0x08019a24

08000104 <strcmp>:
 8000104:	7802      	ldrb	r2, [r0, #0]
 8000106:	780b      	ldrb	r3, [r1, #0]
 8000108:	2a00      	cmp	r2, #0
 800010a:	d003      	beq.n	8000114 <strcmp+0x10>
 800010c:	3001      	adds	r0, #1
 800010e:	3101      	adds	r1, #1
 8000110:	429a      	cmp	r2, r3
 8000112:	d0f7      	beq.n	8000104 <strcmp>
 8000114:	1ad0      	subs	r0, r2, r3
 8000116:	4770      	bx	lr

08000118 <strlen>:
 8000118:	2300      	movs	r3, #0
 800011a:	5cc2      	ldrb	r2, [r0, r3]
 800011c:	3301      	adds	r3, #1
 800011e:	2a00      	cmp	r2, #0
 8000120:	d1fb      	bne.n	800011a <strlen+0x2>
 8000122:	1e58      	subs	r0, r3, #1
 8000124:	4770      	bx	lr
	...

08000128 <__gnu_thumb1_case_uqi>:
 8000128:	b402      	push	{r1}
 800012a:	4671      	mov	r1, lr
 800012c:	0849      	lsrs	r1, r1, #1
 800012e:	0049      	lsls	r1, r1, #1
 8000130:	5c09      	ldrb	r1, [r1, r0]
 8000132:	0049      	lsls	r1, r1, #1
 8000134:	448e      	add	lr, r1
 8000136:	bc02      	pop	{r1}
 8000138:	4770      	bx	lr
 800013a:	46c0      	nop			; (mov r8, r8)

0800013c <__gnu_thumb1_case_shi>:
 800013c:	b403      	push	{r0, r1}
 800013e:	4671      	mov	r1, lr
 8000140:	0849      	lsrs	r1, r1, #1
 8000142:	0040      	lsls	r0, r0, #1
 8000144:	0049      	lsls	r1, r1, #1
 8000146:	5e09      	ldrsh	r1, [r1, r0]
 8000148:	0049      	lsls	r1, r1, #1
 800014a:	448e      	add	lr, r1
 800014c:	bc03      	pop	{r0, r1}
 800014e:	4770      	bx	lr

08000150 <__udivsi3>:
 8000150:	2200      	movs	r2, #0
 8000152:	0843      	lsrs	r3, r0, #1
 8000154:	428b      	cmp	r3, r1
 8000156:	d374      	bcc.n	8000242 <__udivsi3+0xf2>
 8000158:	0903      	lsrs	r3, r0, #4
 800015a:	428b      	cmp	r3, r1
 800015c:	d35f      	bcc.n	800021e <__udivsi3+0xce>
 800015e:	0a03      	lsrs	r3, r0, #8
 8000160:	428b      	cmp	r3, r1
 8000162:	d344      	bcc.n	80001ee <__udivsi3+0x9e>
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d328      	bcc.n	80001bc <__udivsi3+0x6c>
 800016a:	0c03      	lsrs	r3, r0, #16
 800016c:	428b      	cmp	r3, r1
 800016e:	d30d      	bcc.n	800018c <__udivsi3+0x3c>
 8000170:	22ff      	movs	r2, #255	; 0xff
 8000172:	0209      	lsls	r1, r1, #8
 8000174:	ba12      	rev	r2, r2
 8000176:	0c03      	lsrs	r3, r0, #16
 8000178:	428b      	cmp	r3, r1
 800017a:	d302      	bcc.n	8000182 <__udivsi3+0x32>
 800017c:	1212      	asrs	r2, r2, #8
 800017e:	0209      	lsls	r1, r1, #8
 8000180:	d065      	beq.n	800024e <__udivsi3+0xfe>
 8000182:	0b03      	lsrs	r3, r0, #12
 8000184:	428b      	cmp	r3, r1
 8000186:	d319      	bcc.n	80001bc <__udivsi3+0x6c>
 8000188:	e000      	b.n	800018c <__udivsi3+0x3c>
 800018a:	0a09      	lsrs	r1, r1, #8
 800018c:	0bc3      	lsrs	r3, r0, #15
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x46>
 8000192:	03cb      	lsls	r3, r1, #15
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0b83      	lsrs	r3, r0, #14
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x52>
 800019e:	038b      	lsls	r3, r1, #14
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0b43      	lsrs	r3, r0, #13
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x5e>
 80001aa:	034b      	lsls	r3, r1, #13
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0b03      	lsrs	r3, r0, #12
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x6a>
 80001b6:	030b      	lsls	r3, r1, #12
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0ac3      	lsrs	r3, r0, #11
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x76>
 80001c2:	02cb      	lsls	r3, r1, #11
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	0a83      	lsrs	r3, r0, #10
 80001ca:	428b      	cmp	r3, r1
 80001cc:	d301      	bcc.n	80001d2 <__udivsi3+0x82>
 80001ce:	028b      	lsls	r3, r1, #10
 80001d0:	1ac0      	subs	r0, r0, r3
 80001d2:	4152      	adcs	r2, r2
 80001d4:	0a43      	lsrs	r3, r0, #9
 80001d6:	428b      	cmp	r3, r1
 80001d8:	d301      	bcc.n	80001de <__udivsi3+0x8e>
 80001da:	024b      	lsls	r3, r1, #9
 80001dc:	1ac0      	subs	r0, r0, r3
 80001de:	4152      	adcs	r2, r2
 80001e0:	0a03      	lsrs	r3, r0, #8
 80001e2:	428b      	cmp	r3, r1
 80001e4:	d301      	bcc.n	80001ea <__udivsi3+0x9a>
 80001e6:	020b      	lsls	r3, r1, #8
 80001e8:	1ac0      	subs	r0, r0, r3
 80001ea:	4152      	adcs	r2, r2
 80001ec:	d2cd      	bcs.n	800018a <__udivsi3+0x3a>
 80001ee:	09c3      	lsrs	r3, r0, #7
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xa8>
 80001f4:	01cb      	lsls	r3, r1, #7
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0983      	lsrs	r3, r0, #6
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xb4>
 8000200:	018b      	lsls	r3, r1, #6
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0943      	lsrs	r3, r0, #5
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xc0>
 800020c:	014b      	lsls	r3, r1, #5
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0903      	lsrs	r3, r0, #4
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xcc>
 8000218:	010b      	lsls	r3, r1, #4
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	08c3      	lsrs	r3, r0, #3
 8000220:	428b      	cmp	r3, r1
 8000222:	d301      	bcc.n	8000228 <__udivsi3+0xd8>
 8000224:	00cb      	lsls	r3, r1, #3
 8000226:	1ac0      	subs	r0, r0, r3
 8000228:	4152      	adcs	r2, r2
 800022a:	0883      	lsrs	r3, r0, #2
 800022c:	428b      	cmp	r3, r1
 800022e:	d301      	bcc.n	8000234 <__udivsi3+0xe4>
 8000230:	008b      	lsls	r3, r1, #2
 8000232:	1ac0      	subs	r0, r0, r3
 8000234:	4152      	adcs	r2, r2
 8000236:	0843      	lsrs	r3, r0, #1
 8000238:	428b      	cmp	r3, r1
 800023a:	d301      	bcc.n	8000240 <__udivsi3+0xf0>
 800023c:	004b      	lsls	r3, r1, #1
 800023e:	1ac0      	subs	r0, r0, r3
 8000240:	4152      	adcs	r2, r2
 8000242:	1a41      	subs	r1, r0, r1
 8000244:	d200      	bcs.n	8000248 <__udivsi3+0xf8>
 8000246:	4601      	mov	r1, r0
 8000248:	4152      	adcs	r2, r2
 800024a:	4610      	mov	r0, r2
 800024c:	4770      	bx	lr
 800024e:	e7ff      	b.n	8000250 <__udivsi3+0x100>
 8000250:	b501      	push	{r0, lr}
 8000252:	2000      	movs	r0, #0
 8000254:	f000 f8f0 	bl	8000438 <__aeabi_idiv0>
 8000258:	bd02      	pop	{r1, pc}
 800025a:	46c0      	nop			; (mov r8, r8)

0800025c <__aeabi_uidivmod>:
 800025c:	2900      	cmp	r1, #0
 800025e:	d0f7      	beq.n	8000250 <__udivsi3+0x100>
 8000260:	e776      	b.n	8000150 <__udivsi3>
 8000262:	4770      	bx	lr

08000264 <__divsi3>:
 8000264:	4603      	mov	r3, r0
 8000266:	430b      	orrs	r3, r1
 8000268:	d47f      	bmi.n	800036a <__divsi3+0x106>
 800026a:	2200      	movs	r2, #0
 800026c:	0843      	lsrs	r3, r0, #1
 800026e:	428b      	cmp	r3, r1
 8000270:	d374      	bcc.n	800035c <__divsi3+0xf8>
 8000272:	0903      	lsrs	r3, r0, #4
 8000274:	428b      	cmp	r3, r1
 8000276:	d35f      	bcc.n	8000338 <__divsi3+0xd4>
 8000278:	0a03      	lsrs	r3, r0, #8
 800027a:	428b      	cmp	r3, r1
 800027c:	d344      	bcc.n	8000308 <__divsi3+0xa4>
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d328      	bcc.n	80002d6 <__divsi3+0x72>
 8000284:	0c03      	lsrs	r3, r0, #16
 8000286:	428b      	cmp	r3, r1
 8000288:	d30d      	bcc.n	80002a6 <__divsi3+0x42>
 800028a:	22ff      	movs	r2, #255	; 0xff
 800028c:	0209      	lsls	r1, r1, #8
 800028e:	ba12      	rev	r2, r2
 8000290:	0c03      	lsrs	r3, r0, #16
 8000292:	428b      	cmp	r3, r1
 8000294:	d302      	bcc.n	800029c <__divsi3+0x38>
 8000296:	1212      	asrs	r2, r2, #8
 8000298:	0209      	lsls	r1, r1, #8
 800029a:	d065      	beq.n	8000368 <__divsi3+0x104>
 800029c:	0b03      	lsrs	r3, r0, #12
 800029e:	428b      	cmp	r3, r1
 80002a0:	d319      	bcc.n	80002d6 <__divsi3+0x72>
 80002a2:	e000      	b.n	80002a6 <__divsi3+0x42>
 80002a4:	0a09      	lsrs	r1, r1, #8
 80002a6:	0bc3      	lsrs	r3, r0, #15
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x4c>
 80002ac:	03cb      	lsls	r3, r1, #15
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0b83      	lsrs	r3, r0, #14
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x58>
 80002b8:	038b      	lsls	r3, r1, #14
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0b43      	lsrs	r3, r0, #13
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x64>
 80002c4:	034b      	lsls	r3, r1, #13
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0b03      	lsrs	r3, r0, #12
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x70>
 80002d0:	030b      	lsls	r3, r1, #12
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0ac3      	lsrs	r3, r0, #11
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0x7c>
 80002dc:	02cb      	lsls	r3, r1, #11
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	0a83      	lsrs	r3, r0, #10
 80002e4:	428b      	cmp	r3, r1
 80002e6:	d301      	bcc.n	80002ec <__divsi3+0x88>
 80002e8:	028b      	lsls	r3, r1, #10
 80002ea:	1ac0      	subs	r0, r0, r3
 80002ec:	4152      	adcs	r2, r2
 80002ee:	0a43      	lsrs	r3, r0, #9
 80002f0:	428b      	cmp	r3, r1
 80002f2:	d301      	bcc.n	80002f8 <__divsi3+0x94>
 80002f4:	024b      	lsls	r3, r1, #9
 80002f6:	1ac0      	subs	r0, r0, r3
 80002f8:	4152      	adcs	r2, r2
 80002fa:	0a03      	lsrs	r3, r0, #8
 80002fc:	428b      	cmp	r3, r1
 80002fe:	d301      	bcc.n	8000304 <__divsi3+0xa0>
 8000300:	020b      	lsls	r3, r1, #8
 8000302:	1ac0      	subs	r0, r0, r3
 8000304:	4152      	adcs	r2, r2
 8000306:	d2cd      	bcs.n	80002a4 <__divsi3+0x40>
 8000308:	09c3      	lsrs	r3, r0, #7
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xae>
 800030e:	01cb      	lsls	r3, r1, #7
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	0983      	lsrs	r3, r0, #6
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xba>
 800031a:	018b      	lsls	r3, r1, #6
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0943      	lsrs	r3, r0, #5
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xc6>
 8000326:	014b      	lsls	r3, r1, #5
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0903      	lsrs	r3, r0, #4
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xd2>
 8000332:	010b      	lsls	r3, r1, #4
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	08c3      	lsrs	r3, r0, #3
 800033a:	428b      	cmp	r3, r1
 800033c:	d301      	bcc.n	8000342 <__divsi3+0xde>
 800033e:	00cb      	lsls	r3, r1, #3
 8000340:	1ac0      	subs	r0, r0, r3
 8000342:	4152      	adcs	r2, r2
 8000344:	0883      	lsrs	r3, r0, #2
 8000346:	428b      	cmp	r3, r1
 8000348:	d301      	bcc.n	800034e <__divsi3+0xea>
 800034a:	008b      	lsls	r3, r1, #2
 800034c:	1ac0      	subs	r0, r0, r3
 800034e:	4152      	adcs	r2, r2
 8000350:	0843      	lsrs	r3, r0, #1
 8000352:	428b      	cmp	r3, r1
 8000354:	d301      	bcc.n	800035a <__divsi3+0xf6>
 8000356:	004b      	lsls	r3, r1, #1
 8000358:	1ac0      	subs	r0, r0, r3
 800035a:	4152      	adcs	r2, r2
 800035c:	1a41      	subs	r1, r0, r1
 800035e:	d200      	bcs.n	8000362 <__divsi3+0xfe>
 8000360:	4601      	mov	r1, r0
 8000362:	4152      	adcs	r2, r2
 8000364:	4610      	mov	r0, r2
 8000366:	4770      	bx	lr
 8000368:	e05d      	b.n	8000426 <__divsi3+0x1c2>
 800036a:	0fca      	lsrs	r2, r1, #31
 800036c:	d000      	beq.n	8000370 <__divsi3+0x10c>
 800036e:	4249      	negs	r1, r1
 8000370:	1003      	asrs	r3, r0, #32
 8000372:	d300      	bcc.n	8000376 <__divsi3+0x112>
 8000374:	4240      	negs	r0, r0
 8000376:	4053      	eors	r3, r2
 8000378:	2200      	movs	r2, #0
 800037a:	469c      	mov	ip, r3
 800037c:	0903      	lsrs	r3, r0, #4
 800037e:	428b      	cmp	r3, r1
 8000380:	d32d      	bcc.n	80003de <__divsi3+0x17a>
 8000382:	0a03      	lsrs	r3, r0, #8
 8000384:	428b      	cmp	r3, r1
 8000386:	d312      	bcc.n	80003ae <__divsi3+0x14a>
 8000388:	22fc      	movs	r2, #252	; 0xfc
 800038a:	0189      	lsls	r1, r1, #6
 800038c:	ba12      	rev	r2, r2
 800038e:	0a03      	lsrs	r3, r0, #8
 8000390:	428b      	cmp	r3, r1
 8000392:	d30c      	bcc.n	80003ae <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	1192      	asrs	r2, r2, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d308      	bcc.n	80003ae <__divsi3+0x14a>
 800039c:	0189      	lsls	r1, r1, #6
 800039e:	1192      	asrs	r2, r2, #6
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d304      	bcc.n	80003ae <__divsi3+0x14a>
 80003a4:	0189      	lsls	r1, r1, #6
 80003a6:	d03a      	beq.n	800041e <__divsi3+0x1ba>
 80003a8:	1192      	asrs	r2, r2, #6
 80003aa:	e000      	b.n	80003ae <__divsi3+0x14a>
 80003ac:	0989      	lsrs	r1, r1, #6
 80003ae:	09c3      	lsrs	r3, r0, #7
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x154>
 80003b4:	01cb      	lsls	r3, r1, #7
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	0983      	lsrs	r3, r0, #6
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x160>
 80003c0:	018b      	lsls	r3, r1, #6
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0943      	lsrs	r3, r0, #5
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x16c>
 80003cc:	014b      	lsls	r3, r1, #5
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	0903      	lsrs	r3, r0, #4
 80003d4:	428b      	cmp	r3, r1
 80003d6:	d301      	bcc.n	80003dc <__divsi3+0x178>
 80003d8:	010b      	lsls	r3, r1, #4
 80003da:	1ac0      	subs	r0, r0, r3
 80003dc:	4152      	adcs	r2, r2
 80003de:	08c3      	lsrs	r3, r0, #3
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d301      	bcc.n	80003e8 <__divsi3+0x184>
 80003e4:	00cb      	lsls	r3, r1, #3
 80003e6:	1ac0      	subs	r0, r0, r3
 80003e8:	4152      	adcs	r2, r2
 80003ea:	0883      	lsrs	r3, r0, #2
 80003ec:	428b      	cmp	r3, r1
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x190>
 80003f0:	008b      	lsls	r3, r1, #2
 80003f2:	1ac0      	subs	r0, r0, r3
 80003f4:	4152      	adcs	r2, r2
 80003f6:	d2d9      	bcs.n	80003ac <__divsi3+0x148>
 80003f8:	0843      	lsrs	r3, r0, #1
 80003fa:	428b      	cmp	r3, r1
 80003fc:	d301      	bcc.n	8000402 <__divsi3+0x19e>
 80003fe:	004b      	lsls	r3, r1, #1
 8000400:	1ac0      	subs	r0, r0, r3
 8000402:	4152      	adcs	r2, r2
 8000404:	1a41      	subs	r1, r0, r1
 8000406:	d200      	bcs.n	800040a <__divsi3+0x1a6>
 8000408:	4601      	mov	r1, r0
 800040a:	4663      	mov	r3, ip
 800040c:	4152      	adcs	r2, r2
 800040e:	105b      	asrs	r3, r3, #1
 8000410:	4610      	mov	r0, r2
 8000412:	d301      	bcc.n	8000418 <__divsi3+0x1b4>
 8000414:	4240      	negs	r0, r0
 8000416:	2b00      	cmp	r3, #0
 8000418:	d500      	bpl.n	800041c <__divsi3+0x1b8>
 800041a:	4249      	negs	r1, r1
 800041c:	4770      	bx	lr
 800041e:	4663      	mov	r3, ip
 8000420:	105b      	asrs	r3, r3, #1
 8000422:	d300      	bcc.n	8000426 <__divsi3+0x1c2>
 8000424:	4240      	negs	r0, r0
 8000426:	b501      	push	{r0, lr}
 8000428:	2000      	movs	r0, #0
 800042a:	f000 f805 	bl	8000438 <__aeabi_idiv0>
 800042e:	bd02      	pop	{r1, pc}

08000430 <__aeabi_idivmod>:
 8000430:	2900      	cmp	r1, #0
 8000432:	d0f8      	beq.n	8000426 <__divsi3+0x1c2>
 8000434:	e716      	b.n	8000264 <__divsi3>
 8000436:	4770      	bx	lr

08000438 <__aeabi_idiv0>:
 8000438:	4770      	bx	lr
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdrcmple>:
 800043c:	4684      	mov	ip, r0
 800043e:	1c10      	adds	r0, r2, #0
 8000440:	4662      	mov	r2, ip
 8000442:	468c      	mov	ip, r1
 8000444:	1c19      	adds	r1, r3, #0
 8000446:	4663      	mov	r3, ip
 8000448:	e000      	b.n	800044c <__aeabi_cdcmpeq>
 800044a:	46c0      	nop			; (mov r8, r8)

0800044c <__aeabi_cdcmpeq>:
 800044c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800044e:	f001 fba7 	bl	8001ba0 <__ledf2>
 8000452:	2800      	cmp	r0, #0
 8000454:	d401      	bmi.n	800045a <__aeabi_cdcmpeq+0xe>
 8000456:	2100      	movs	r1, #0
 8000458:	42c8      	cmn	r0, r1
 800045a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800045c <__aeabi_dcmpeq>:
 800045c:	b510      	push	{r4, lr}
 800045e:	f001 faf1 	bl	8001a44 <__eqdf2>
 8000462:	4240      	negs	r0, r0
 8000464:	3001      	adds	r0, #1
 8000466:	bd10      	pop	{r4, pc}

08000468 <__aeabi_dcmplt>:
 8000468:	b510      	push	{r4, lr}
 800046a:	f001 fb99 	bl	8001ba0 <__ledf2>
 800046e:	2800      	cmp	r0, #0
 8000470:	db01      	blt.n	8000476 <__aeabi_dcmplt+0xe>
 8000472:	2000      	movs	r0, #0
 8000474:	bd10      	pop	{r4, pc}
 8000476:	2001      	movs	r0, #1
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			; (mov r8, r8)

0800047c <__aeabi_dcmple>:
 800047c:	b510      	push	{r4, lr}
 800047e:	f001 fb8f 	bl	8001ba0 <__ledf2>
 8000482:	2800      	cmp	r0, #0
 8000484:	dd01      	ble.n	800048a <__aeabi_dcmple+0xe>
 8000486:	2000      	movs	r0, #0
 8000488:	bd10      	pop	{r4, pc}
 800048a:	2001      	movs	r0, #1
 800048c:	bd10      	pop	{r4, pc}
 800048e:	46c0      	nop			; (mov r8, r8)

08000490 <__aeabi_dcmpgt>:
 8000490:	b510      	push	{r4, lr}
 8000492:	f001 fb13 	bl	8001abc <__gedf2>
 8000496:	2800      	cmp	r0, #0
 8000498:	dc01      	bgt.n	800049e <__aeabi_dcmpgt+0xe>
 800049a:	2000      	movs	r0, #0
 800049c:	bd10      	pop	{r4, pc}
 800049e:	2001      	movs	r0, #1
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	46c0      	nop			; (mov r8, r8)

080004a4 <__aeabi_dcmpge>:
 80004a4:	b510      	push	{r4, lr}
 80004a6:	f001 fb09 	bl	8001abc <__gedf2>
 80004aa:	2800      	cmp	r0, #0
 80004ac:	da01      	bge.n	80004b2 <__aeabi_dcmpge+0xe>
 80004ae:	2000      	movs	r0, #0
 80004b0:	bd10      	pop	{r4, pc}
 80004b2:	2001      	movs	r0, #1
 80004b4:	bd10      	pop	{r4, pc}
 80004b6:	46c0      	nop			; (mov r8, r8)

080004b8 <__aeabi_cfrcmple>:
 80004b8:	4684      	mov	ip, r0
 80004ba:	1c08      	adds	r0, r1, #0
 80004bc:	4661      	mov	r1, ip
 80004be:	e7ff      	b.n	80004c0 <__aeabi_cfcmpeq>

080004c0 <__aeabi_cfcmpeq>:
 80004c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004c2:	f000 fbe7 	bl	8000c94 <__lesf2>
 80004c6:	2800      	cmp	r0, #0
 80004c8:	d401      	bmi.n	80004ce <__aeabi_cfcmpeq+0xe>
 80004ca:	2100      	movs	r1, #0
 80004cc:	42c8      	cmn	r0, r1
 80004ce:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004d0 <__aeabi_fcmpeq>:
 80004d0:	b510      	push	{r4, lr}
 80004d2:	f000 fb6b 	bl	8000bac <__eqsf2>
 80004d6:	4240      	negs	r0, r0
 80004d8:	3001      	adds	r0, #1
 80004da:	bd10      	pop	{r4, pc}

080004dc <__aeabi_fcmplt>:
 80004dc:	b510      	push	{r4, lr}
 80004de:	f000 fbd9 	bl	8000c94 <__lesf2>
 80004e2:	2800      	cmp	r0, #0
 80004e4:	db01      	blt.n	80004ea <__aeabi_fcmplt+0xe>
 80004e6:	2000      	movs	r0, #0
 80004e8:	bd10      	pop	{r4, pc}
 80004ea:	2001      	movs	r0, #1
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	46c0      	nop			; (mov r8, r8)

080004f0 <__aeabi_fcmple>:
 80004f0:	b510      	push	{r4, lr}
 80004f2:	f000 fbcf 	bl	8000c94 <__lesf2>
 80004f6:	2800      	cmp	r0, #0
 80004f8:	dd01      	ble.n	80004fe <__aeabi_fcmple+0xe>
 80004fa:	2000      	movs	r0, #0
 80004fc:	bd10      	pop	{r4, pc}
 80004fe:	2001      	movs	r0, #1
 8000500:	bd10      	pop	{r4, pc}
 8000502:	46c0      	nop			; (mov r8, r8)

08000504 <__aeabi_fcmpgt>:
 8000504:	b510      	push	{r4, lr}
 8000506:	f000 fb79 	bl	8000bfc <__gesf2>
 800050a:	2800      	cmp	r0, #0
 800050c:	dc01      	bgt.n	8000512 <__aeabi_fcmpgt+0xe>
 800050e:	2000      	movs	r0, #0
 8000510:	bd10      	pop	{r4, pc}
 8000512:	2001      	movs	r0, #1
 8000514:	bd10      	pop	{r4, pc}
 8000516:	46c0      	nop			; (mov r8, r8)

08000518 <__aeabi_fcmpge>:
 8000518:	b510      	push	{r4, lr}
 800051a:	f000 fb6f 	bl	8000bfc <__gesf2>
 800051e:	2800      	cmp	r0, #0
 8000520:	da01      	bge.n	8000526 <__aeabi_fcmpge+0xe>
 8000522:	2000      	movs	r0, #0
 8000524:	bd10      	pop	{r4, pc}
 8000526:	2001      	movs	r0, #1
 8000528:	bd10      	pop	{r4, pc}
 800052a:	46c0      	nop			; (mov r8, r8)

0800052c <__aeabi_lmul>:
 800052c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800052e:	0415      	lsls	r5, r2, #16
 8000530:	0c2d      	lsrs	r5, r5, #16
 8000532:	000f      	movs	r7, r1
 8000534:	0001      	movs	r1, r0
 8000536:	002e      	movs	r6, r5
 8000538:	46c6      	mov	lr, r8
 800053a:	4684      	mov	ip, r0
 800053c:	0400      	lsls	r0, r0, #16
 800053e:	0c14      	lsrs	r4, r2, #16
 8000540:	0c00      	lsrs	r0, r0, #16
 8000542:	0c09      	lsrs	r1, r1, #16
 8000544:	4346      	muls	r6, r0
 8000546:	434d      	muls	r5, r1
 8000548:	4360      	muls	r0, r4
 800054a:	4361      	muls	r1, r4
 800054c:	1940      	adds	r0, r0, r5
 800054e:	0c34      	lsrs	r4, r6, #16
 8000550:	1824      	adds	r4, r4, r0
 8000552:	b500      	push	{lr}
 8000554:	42a5      	cmp	r5, r4
 8000556:	d903      	bls.n	8000560 <__aeabi_lmul+0x34>
 8000558:	2080      	movs	r0, #128	; 0x80
 800055a:	0240      	lsls	r0, r0, #9
 800055c:	4680      	mov	r8, r0
 800055e:	4441      	add	r1, r8
 8000560:	0c25      	lsrs	r5, r4, #16
 8000562:	186d      	adds	r5, r5, r1
 8000564:	4661      	mov	r1, ip
 8000566:	4359      	muls	r1, r3
 8000568:	437a      	muls	r2, r7
 800056a:	0430      	lsls	r0, r6, #16
 800056c:	1949      	adds	r1, r1, r5
 800056e:	0424      	lsls	r4, r4, #16
 8000570:	0c00      	lsrs	r0, r0, #16
 8000572:	1820      	adds	r0, r4, r0
 8000574:	1889      	adds	r1, r1, r2
 8000576:	bc80      	pop	{r7}
 8000578:	46b8      	mov	r8, r7
 800057a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800057c <__aeabi_d2uiz>:
 800057c:	b570      	push	{r4, r5, r6, lr}
 800057e:	2200      	movs	r2, #0
 8000580:	4b0c      	ldr	r3, [pc, #48]	; (80005b4 <__aeabi_d2uiz+0x38>)
 8000582:	0004      	movs	r4, r0
 8000584:	000d      	movs	r5, r1
 8000586:	f7ff ff8d 	bl	80004a4 <__aeabi_dcmpge>
 800058a:	2800      	cmp	r0, #0
 800058c:	d104      	bne.n	8000598 <__aeabi_d2uiz+0x1c>
 800058e:	0020      	movs	r0, r4
 8000590:	0029      	movs	r1, r5
 8000592:	f002 f973 	bl	800287c <__aeabi_d2iz>
 8000596:	bd70      	pop	{r4, r5, r6, pc}
 8000598:	4b06      	ldr	r3, [pc, #24]	; (80005b4 <__aeabi_d2uiz+0x38>)
 800059a:	2200      	movs	r2, #0
 800059c:	0020      	movs	r0, r4
 800059e:	0029      	movs	r1, r5
 80005a0:	f001 fdda 	bl	8002158 <__aeabi_dsub>
 80005a4:	f002 f96a 	bl	800287c <__aeabi_d2iz>
 80005a8:	2380      	movs	r3, #128	; 0x80
 80005aa:	061b      	lsls	r3, r3, #24
 80005ac:	469c      	mov	ip, r3
 80005ae:	4460      	add	r0, ip
 80005b0:	e7f1      	b.n	8000596 <__aeabi_d2uiz+0x1a>
 80005b2:	46c0      	nop			; (mov r8, r8)
 80005b4:	41e00000 	.word	0x41e00000

080005b8 <__aeabi_d2lz>:
 80005b8:	b570      	push	{r4, r5, r6, lr}
 80005ba:	0005      	movs	r5, r0
 80005bc:	000c      	movs	r4, r1
 80005be:	2200      	movs	r2, #0
 80005c0:	2300      	movs	r3, #0
 80005c2:	0028      	movs	r0, r5
 80005c4:	0021      	movs	r1, r4
 80005c6:	f7ff ff4f 	bl	8000468 <__aeabi_dcmplt>
 80005ca:	2800      	cmp	r0, #0
 80005cc:	d108      	bne.n	80005e0 <__aeabi_d2lz+0x28>
 80005ce:	0028      	movs	r0, r5
 80005d0:	0021      	movs	r1, r4
 80005d2:	f000 f80f 	bl	80005f4 <__aeabi_d2ulz>
 80005d6:	0002      	movs	r2, r0
 80005d8:	000b      	movs	r3, r1
 80005da:	0010      	movs	r0, r2
 80005dc:	0019      	movs	r1, r3
 80005de:	bd70      	pop	{r4, r5, r6, pc}
 80005e0:	2380      	movs	r3, #128	; 0x80
 80005e2:	061b      	lsls	r3, r3, #24
 80005e4:	18e1      	adds	r1, r4, r3
 80005e6:	0028      	movs	r0, r5
 80005e8:	f000 f804 	bl	80005f4 <__aeabi_d2ulz>
 80005ec:	2300      	movs	r3, #0
 80005ee:	4242      	negs	r2, r0
 80005f0:	418b      	sbcs	r3, r1
 80005f2:	e7f2      	b.n	80005da <__aeabi_d2lz+0x22>

080005f4 <__aeabi_d2ulz>:
 80005f4:	b570      	push	{r4, r5, r6, lr}
 80005f6:	2200      	movs	r2, #0
 80005f8:	4b0b      	ldr	r3, [pc, #44]	; (8000628 <__aeabi_d2ulz+0x34>)
 80005fa:	000d      	movs	r5, r1
 80005fc:	0004      	movs	r4, r0
 80005fe:	f001 fb3f 	bl	8001c80 <__aeabi_dmul>
 8000602:	f7ff ffbb 	bl	800057c <__aeabi_d2uiz>
 8000606:	0006      	movs	r6, r0
 8000608:	f002 f99e 	bl	8002948 <__aeabi_ui2d>
 800060c:	2200      	movs	r2, #0
 800060e:	4b07      	ldr	r3, [pc, #28]	; (800062c <__aeabi_d2ulz+0x38>)
 8000610:	f001 fb36 	bl	8001c80 <__aeabi_dmul>
 8000614:	0002      	movs	r2, r0
 8000616:	000b      	movs	r3, r1
 8000618:	0020      	movs	r0, r4
 800061a:	0029      	movs	r1, r5
 800061c:	f001 fd9c 	bl	8002158 <__aeabi_dsub>
 8000620:	f7ff ffac 	bl	800057c <__aeabi_d2uiz>
 8000624:	0031      	movs	r1, r6
 8000626:	bd70      	pop	{r4, r5, r6, pc}
 8000628:	3df00000 	.word	0x3df00000
 800062c:	41f00000 	.word	0x41f00000

08000630 <__aeabi_l2d>:
 8000630:	b570      	push	{r4, r5, r6, lr}
 8000632:	0006      	movs	r6, r0
 8000634:	0008      	movs	r0, r1
 8000636:	f002 f957 	bl	80028e8 <__aeabi_i2d>
 800063a:	2200      	movs	r2, #0
 800063c:	4b06      	ldr	r3, [pc, #24]	; (8000658 <__aeabi_l2d+0x28>)
 800063e:	f001 fb1f 	bl	8001c80 <__aeabi_dmul>
 8000642:	000d      	movs	r5, r1
 8000644:	0004      	movs	r4, r0
 8000646:	0030      	movs	r0, r6
 8000648:	f002 f97e 	bl	8002948 <__aeabi_ui2d>
 800064c:	002b      	movs	r3, r5
 800064e:	0022      	movs	r2, r4
 8000650:	f000 fba6 	bl	8000da0 <__aeabi_dadd>
 8000654:	bd70      	pop	{r4, r5, r6, pc}
 8000656:	46c0      	nop			; (mov r8, r8)
 8000658:	41f00000 	.word	0x41f00000

0800065c <__aeabi_fadd>:
 800065c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800065e:	4646      	mov	r6, r8
 8000660:	46d6      	mov	lr, sl
 8000662:	464f      	mov	r7, r9
 8000664:	024d      	lsls	r5, r1, #9
 8000666:	0242      	lsls	r2, r0, #9
 8000668:	b5c0      	push	{r6, r7, lr}
 800066a:	0a52      	lsrs	r2, r2, #9
 800066c:	0a6e      	lsrs	r6, r5, #9
 800066e:	0047      	lsls	r7, r0, #1
 8000670:	46b0      	mov	r8, r6
 8000672:	0e3f      	lsrs	r7, r7, #24
 8000674:	004e      	lsls	r6, r1, #1
 8000676:	0fc4      	lsrs	r4, r0, #31
 8000678:	00d0      	lsls	r0, r2, #3
 800067a:	4694      	mov	ip, r2
 800067c:	003b      	movs	r3, r7
 800067e:	4682      	mov	sl, r0
 8000680:	0e36      	lsrs	r6, r6, #24
 8000682:	0fc9      	lsrs	r1, r1, #31
 8000684:	09ad      	lsrs	r5, r5, #6
 8000686:	428c      	cmp	r4, r1
 8000688:	d06d      	beq.n	8000766 <__aeabi_fadd+0x10a>
 800068a:	1bb8      	subs	r0, r7, r6
 800068c:	4681      	mov	r9, r0
 800068e:	2800      	cmp	r0, #0
 8000690:	dd4d      	ble.n	800072e <__aeabi_fadd+0xd2>
 8000692:	2e00      	cmp	r6, #0
 8000694:	d100      	bne.n	8000698 <__aeabi_fadd+0x3c>
 8000696:	e088      	b.n	80007aa <__aeabi_fadd+0x14e>
 8000698:	2fff      	cmp	r7, #255	; 0xff
 800069a:	d05a      	beq.n	8000752 <__aeabi_fadd+0xf6>
 800069c:	2380      	movs	r3, #128	; 0x80
 800069e:	04db      	lsls	r3, r3, #19
 80006a0:	431d      	orrs	r5, r3
 80006a2:	464b      	mov	r3, r9
 80006a4:	2201      	movs	r2, #1
 80006a6:	2b1b      	cmp	r3, #27
 80006a8:	dc0a      	bgt.n	80006c0 <__aeabi_fadd+0x64>
 80006aa:	002b      	movs	r3, r5
 80006ac:	464a      	mov	r2, r9
 80006ae:	4649      	mov	r1, r9
 80006b0:	40d3      	lsrs	r3, r2
 80006b2:	2220      	movs	r2, #32
 80006b4:	1a52      	subs	r2, r2, r1
 80006b6:	4095      	lsls	r5, r2
 80006b8:	002a      	movs	r2, r5
 80006ba:	1e55      	subs	r5, r2, #1
 80006bc:	41aa      	sbcs	r2, r5
 80006be:	431a      	orrs	r2, r3
 80006c0:	4653      	mov	r3, sl
 80006c2:	1a9a      	subs	r2, r3, r2
 80006c4:	0153      	lsls	r3, r2, #5
 80006c6:	d400      	bmi.n	80006ca <__aeabi_fadd+0x6e>
 80006c8:	e0b9      	b.n	800083e <__aeabi_fadd+0x1e2>
 80006ca:	0192      	lsls	r2, r2, #6
 80006cc:	0996      	lsrs	r6, r2, #6
 80006ce:	0030      	movs	r0, r6
 80006d0:	f002 fa30 	bl	8002b34 <__clzsi2>
 80006d4:	3805      	subs	r0, #5
 80006d6:	4086      	lsls	r6, r0
 80006d8:	4287      	cmp	r7, r0
 80006da:	dd00      	ble.n	80006de <__aeabi_fadd+0x82>
 80006dc:	e0d4      	b.n	8000888 <__aeabi_fadd+0x22c>
 80006de:	0033      	movs	r3, r6
 80006e0:	1bc7      	subs	r7, r0, r7
 80006e2:	2020      	movs	r0, #32
 80006e4:	3701      	adds	r7, #1
 80006e6:	40fb      	lsrs	r3, r7
 80006e8:	1bc7      	subs	r7, r0, r7
 80006ea:	40be      	lsls	r6, r7
 80006ec:	0032      	movs	r2, r6
 80006ee:	1e56      	subs	r6, r2, #1
 80006f0:	41b2      	sbcs	r2, r6
 80006f2:	2700      	movs	r7, #0
 80006f4:	431a      	orrs	r2, r3
 80006f6:	0753      	lsls	r3, r2, #29
 80006f8:	d004      	beq.n	8000704 <__aeabi_fadd+0xa8>
 80006fa:	230f      	movs	r3, #15
 80006fc:	4013      	ands	r3, r2
 80006fe:	2b04      	cmp	r3, #4
 8000700:	d000      	beq.n	8000704 <__aeabi_fadd+0xa8>
 8000702:	3204      	adds	r2, #4
 8000704:	0153      	lsls	r3, r2, #5
 8000706:	d400      	bmi.n	800070a <__aeabi_fadd+0xae>
 8000708:	e09c      	b.n	8000844 <__aeabi_fadd+0x1e8>
 800070a:	1c7b      	adds	r3, r7, #1
 800070c:	2ffe      	cmp	r7, #254	; 0xfe
 800070e:	d100      	bne.n	8000712 <__aeabi_fadd+0xb6>
 8000710:	e09a      	b.n	8000848 <__aeabi_fadd+0x1ec>
 8000712:	0192      	lsls	r2, r2, #6
 8000714:	0a52      	lsrs	r2, r2, #9
 8000716:	4694      	mov	ip, r2
 8000718:	b2db      	uxtb	r3, r3
 800071a:	05d8      	lsls	r0, r3, #23
 800071c:	4663      	mov	r3, ip
 800071e:	07e4      	lsls	r4, r4, #31
 8000720:	4318      	orrs	r0, r3
 8000722:	4320      	orrs	r0, r4
 8000724:	bce0      	pop	{r5, r6, r7}
 8000726:	46ba      	mov	sl, r7
 8000728:	46b1      	mov	r9, r6
 800072a:	46a8      	mov	r8, r5
 800072c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800072e:	2800      	cmp	r0, #0
 8000730:	d049      	beq.n	80007c6 <__aeabi_fadd+0x16a>
 8000732:	1bf3      	subs	r3, r6, r7
 8000734:	2f00      	cmp	r7, #0
 8000736:	d000      	beq.n	800073a <__aeabi_fadd+0xde>
 8000738:	e0b6      	b.n	80008a8 <__aeabi_fadd+0x24c>
 800073a:	4652      	mov	r2, sl
 800073c:	2a00      	cmp	r2, #0
 800073e:	d060      	beq.n	8000802 <__aeabi_fadd+0x1a6>
 8000740:	3b01      	subs	r3, #1
 8000742:	2b00      	cmp	r3, #0
 8000744:	d100      	bne.n	8000748 <__aeabi_fadd+0xec>
 8000746:	e0fc      	b.n	8000942 <__aeabi_fadd+0x2e6>
 8000748:	2eff      	cmp	r6, #255	; 0xff
 800074a:	d000      	beq.n	800074e <__aeabi_fadd+0xf2>
 800074c:	e0b4      	b.n	80008b8 <__aeabi_fadd+0x25c>
 800074e:	000c      	movs	r4, r1
 8000750:	4642      	mov	r2, r8
 8000752:	2a00      	cmp	r2, #0
 8000754:	d078      	beq.n	8000848 <__aeabi_fadd+0x1ec>
 8000756:	2080      	movs	r0, #128	; 0x80
 8000758:	03c0      	lsls	r0, r0, #15
 800075a:	4310      	orrs	r0, r2
 800075c:	0242      	lsls	r2, r0, #9
 800075e:	0a53      	lsrs	r3, r2, #9
 8000760:	469c      	mov	ip, r3
 8000762:	23ff      	movs	r3, #255	; 0xff
 8000764:	e7d9      	b.n	800071a <__aeabi_fadd+0xbe>
 8000766:	1bb9      	subs	r1, r7, r6
 8000768:	2900      	cmp	r1, #0
 800076a:	dd71      	ble.n	8000850 <__aeabi_fadd+0x1f4>
 800076c:	2e00      	cmp	r6, #0
 800076e:	d03f      	beq.n	80007f0 <__aeabi_fadd+0x194>
 8000770:	2fff      	cmp	r7, #255	; 0xff
 8000772:	d0ee      	beq.n	8000752 <__aeabi_fadd+0xf6>
 8000774:	2380      	movs	r3, #128	; 0x80
 8000776:	04db      	lsls	r3, r3, #19
 8000778:	431d      	orrs	r5, r3
 800077a:	2201      	movs	r2, #1
 800077c:	291b      	cmp	r1, #27
 800077e:	dc07      	bgt.n	8000790 <__aeabi_fadd+0x134>
 8000780:	002a      	movs	r2, r5
 8000782:	2320      	movs	r3, #32
 8000784:	40ca      	lsrs	r2, r1
 8000786:	1a59      	subs	r1, r3, r1
 8000788:	408d      	lsls	r5, r1
 800078a:	1e6b      	subs	r3, r5, #1
 800078c:	419d      	sbcs	r5, r3
 800078e:	432a      	orrs	r2, r5
 8000790:	4452      	add	r2, sl
 8000792:	0153      	lsls	r3, r2, #5
 8000794:	d553      	bpl.n	800083e <__aeabi_fadd+0x1e2>
 8000796:	3701      	adds	r7, #1
 8000798:	2fff      	cmp	r7, #255	; 0xff
 800079a:	d055      	beq.n	8000848 <__aeabi_fadd+0x1ec>
 800079c:	2301      	movs	r3, #1
 800079e:	497b      	ldr	r1, [pc, #492]	; (800098c <__aeabi_fadd+0x330>)
 80007a0:	4013      	ands	r3, r2
 80007a2:	0852      	lsrs	r2, r2, #1
 80007a4:	400a      	ands	r2, r1
 80007a6:	431a      	orrs	r2, r3
 80007a8:	e7a5      	b.n	80006f6 <__aeabi_fadd+0x9a>
 80007aa:	2d00      	cmp	r5, #0
 80007ac:	d02c      	beq.n	8000808 <__aeabi_fadd+0x1ac>
 80007ae:	2301      	movs	r3, #1
 80007b0:	425b      	negs	r3, r3
 80007b2:	469c      	mov	ip, r3
 80007b4:	44e1      	add	r9, ip
 80007b6:	464b      	mov	r3, r9
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d100      	bne.n	80007be <__aeabi_fadd+0x162>
 80007bc:	e0ad      	b.n	800091a <__aeabi_fadd+0x2be>
 80007be:	2fff      	cmp	r7, #255	; 0xff
 80007c0:	d000      	beq.n	80007c4 <__aeabi_fadd+0x168>
 80007c2:	e76e      	b.n	80006a2 <__aeabi_fadd+0x46>
 80007c4:	e7c5      	b.n	8000752 <__aeabi_fadd+0xf6>
 80007c6:	20fe      	movs	r0, #254	; 0xfe
 80007c8:	1c7e      	adds	r6, r7, #1
 80007ca:	4230      	tst	r0, r6
 80007cc:	d160      	bne.n	8000890 <__aeabi_fadd+0x234>
 80007ce:	2f00      	cmp	r7, #0
 80007d0:	d000      	beq.n	80007d4 <__aeabi_fadd+0x178>
 80007d2:	e093      	b.n	80008fc <__aeabi_fadd+0x2a0>
 80007d4:	4652      	mov	r2, sl
 80007d6:	2a00      	cmp	r2, #0
 80007d8:	d100      	bne.n	80007dc <__aeabi_fadd+0x180>
 80007da:	e0b6      	b.n	800094a <__aeabi_fadd+0x2ee>
 80007dc:	2d00      	cmp	r5, #0
 80007de:	d09c      	beq.n	800071a <__aeabi_fadd+0xbe>
 80007e0:	1b52      	subs	r2, r2, r5
 80007e2:	0150      	lsls	r0, r2, #5
 80007e4:	d400      	bmi.n	80007e8 <__aeabi_fadd+0x18c>
 80007e6:	e0c3      	b.n	8000970 <__aeabi_fadd+0x314>
 80007e8:	4653      	mov	r3, sl
 80007ea:	000c      	movs	r4, r1
 80007ec:	1aea      	subs	r2, r5, r3
 80007ee:	e782      	b.n	80006f6 <__aeabi_fadd+0x9a>
 80007f0:	2d00      	cmp	r5, #0
 80007f2:	d009      	beq.n	8000808 <__aeabi_fadd+0x1ac>
 80007f4:	3901      	subs	r1, #1
 80007f6:	2900      	cmp	r1, #0
 80007f8:	d100      	bne.n	80007fc <__aeabi_fadd+0x1a0>
 80007fa:	e08b      	b.n	8000914 <__aeabi_fadd+0x2b8>
 80007fc:	2fff      	cmp	r7, #255	; 0xff
 80007fe:	d1bc      	bne.n	800077a <__aeabi_fadd+0x11e>
 8000800:	e7a7      	b.n	8000752 <__aeabi_fadd+0xf6>
 8000802:	000c      	movs	r4, r1
 8000804:	4642      	mov	r2, r8
 8000806:	0037      	movs	r7, r6
 8000808:	2fff      	cmp	r7, #255	; 0xff
 800080a:	d0a2      	beq.n	8000752 <__aeabi_fadd+0xf6>
 800080c:	0252      	lsls	r2, r2, #9
 800080e:	0a53      	lsrs	r3, r2, #9
 8000810:	469c      	mov	ip, r3
 8000812:	b2fb      	uxtb	r3, r7
 8000814:	e781      	b.n	800071a <__aeabi_fadd+0xbe>
 8000816:	21fe      	movs	r1, #254	; 0xfe
 8000818:	3701      	adds	r7, #1
 800081a:	4239      	tst	r1, r7
 800081c:	d165      	bne.n	80008ea <__aeabi_fadd+0x28e>
 800081e:	2b00      	cmp	r3, #0
 8000820:	d17e      	bne.n	8000920 <__aeabi_fadd+0x2c4>
 8000822:	2800      	cmp	r0, #0
 8000824:	d100      	bne.n	8000828 <__aeabi_fadd+0x1cc>
 8000826:	e0aa      	b.n	800097e <__aeabi_fadd+0x322>
 8000828:	2d00      	cmp	r5, #0
 800082a:	d100      	bne.n	800082e <__aeabi_fadd+0x1d2>
 800082c:	e775      	b.n	800071a <__aeabi_fadd+0xbe>
 800082e:	002a      	movs	r2, r5
 8000830:	4452      	add	r2, sl
 8000832:	2700      	movs	r7, #0
 8000834:	0153      	lsls	r3, r2, #5
 8000836:	d502      	bpl.n	800083e <__aeabi_fadd+0x1e2>
 8000838:	4b55      	ldr	r3, [pc, #340]	; (8000990 <__aeabi_fadd+0x334>)
 800083a:	3701      	adds	r7, #1
 800083c:	401a      	ands	r2, r3
 800083e:	0753      	lsls	r3, r2, #29
 8000840:	d000      	beq.n	8000844 <__aeabi_fadd+0x1e8>
 8000842:	e75a      	b.n	80006fa <__aeabi_fadd+0x9e>
 8000844:	08d2      	lsrs	r2, r2, #3
 8000846:	e7df      	b.n	8000808 <__aeabi_fadd+0x1ac>
 8000848:	2200      	movs	r2, #0
 800084a:	23ff      	movs	r3, #255	; 0xff
 800084c:	4694      	mov	ip, r2
 800084e:	e764      	b.n	800071a <__aeabi_fadd+0xbe>
 8000850:	2900      	cmp	r1, #0
 8000852:	d0e0      	beq.n	8000816 <__aeabi_fadd+0x1ba>
 8000854:	1bf3      	subs	r3, r6, r7
 8000856:	2f00      	cmp	r7, #0
 8000858:	d03e      	beq.n	80008d8 <__aeabi_fadd+0x27c>
 800085a:	2eff      	cmp	r6, #255	; 0xff
 800085c:	d100      	bne.n	8000860 <__aeabi_fadd+0x204>
 800085e:	e777      	b.n	8000750 <__aeabi_fadd+0xf4>
 8000860:	2280      	movs	r2, #128	; 0x80
 8000862:	0001      	movs	r1, r0
 8000864:	04d2      	lsls	r2, r2, #19
 8000866:	4311      	orrs	r1, r2
 8000868:	468a      	mov	sl, r1
 800086a:	2201      	movs	r2, #1
 800086c:	2b1b      	cmp	r3, #27
 800086e:	dc08      	bgt.n	8000882 <__aeabi_fadd+0x226>
 8000870:	4652      	mov	r2, sl
 8000872:	2120      	movs	r1, #32
 8000874:	4650      	mov	r0, sl
 8000876:	40da      	lsrs	r2, r3
 8000878:	1acb      	subs	r3, r1, r3
 800087a:	4098      	lsls	r0, r3
 800087c:	1e43      	subs	r3, r0, #1
 800087e:	4198      	sbcs	r0, r3
 8000880:	4302      	orrs	r2, r0
 8000882:	0037      	movs	r7, r6
 8000884:	1952      	adds	r2, r2, r5
 8000886:	e784      	b.n	8000792 <__aeabi_fadd+0x136>
 8000888:	4a41      	ldr	r2, [pc, #260]	; (8000990 <__aeabi_fadd+0x334>)
 800088a:	1a3f      	subs	r7, r7, r0
 800088c:	4032      	ands	r2, r6
 800088e:	e732      	b.n	80006f6 <__aeabi_fadd+0x9a>
 8000890:	4653      	mov	r3, sl
 8000892:	1b5e      	subs	r6, r3, r5
 8000894:	0173      	lsls	r3, r6, #5
 8000896:	d42d      	bmi.n	80008f4 <__aeabi_fadd+0x298>
 8000898:	2e00      	cmp	r6, #0
 800089a:	d000      	beq.n	800089e <__aeabi_fadd+0x242>
 800089c:	e717      	b.n	80006ce <__aeabi_fadd+0x72>
 800089e:	2200      	movs	r2, #0
 80008a0:	2400      	movs	r4, #0
 80008a2:	2300      	movs	r3, #0
 80008a4:	4694      	mov	ip, r2
 80008a6:	e738      	b.n	800071a <__aeabi_fadd+0xbe>
 80008a8:	2eff      	cmp	r6, #255	; 0xff
 80008aa:	d100      	bne.n	80008ae <__aeabi_fadd+0x252>
 80008ac:	e74f      	b.n	800074e <__aeabi_fadd+0xf2>
 80008ae:	2280      	movs	r2, #128	; 0x80
 80008b0:	4650      	mov	r0, sl
 80008b2:	04d2      	lsls	r2, r2, #19
 80008b4:	4310      	orrs	r0, r2
 80008b6:	4682      	mov	sl, r0
 80008b8:	2201      	movs	r2, #1
 80008ba:	2b1b      	cmp	r3, #27
 80008bc:	dc08      	bgt.n	80008d0 <__aeabi_fadd+0x274>
 80008be:	4652      	mov	r2, sl
 80008c0:	2420      	movs	r4, #32
 80008c2:	4650      	mov	r0, sl
 80008c4:	40da      	lsrs	r2, r3
 80008c6:	1ae3      	subs	r3, r4, r3
 80008c8:	4098      	lsls	r0, r3
 80008ca:	1e43      	subs	r3, r0, #1
 80008cc:	4198      	sbcs	r0, r3
 80008ce:	4302      	orrs	r2, r0
 80008d0:	000c      	movs	r4, r1
 80008d2:	0037      	movs	r7, r6
 80008d4:	1aaa      	subs	r2, r5, r2
 80008d6:	e6f5      	b.n	80006c4 <__aeabi_fadd+0x68>
 80008d8:	2800      	cmp	r0, #0
 80008da:	d093      	beq.n	8000804 <__aeabi_fadd+0x1a8>
 80008dc:	3b01      	subs	r3, #1
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d04f      	beq.n	8000982 <__aeabi_fadd+0x326>
 80008e2:	2eff      	cmp	r6, #255	; 0xff
 80008e4:	d1c1      	bne.n	800086a <__aeabi_fadd+0x20e>
 80008e6:	4642      	mov	r2, r8
 80008e8:	e733      	b.n	8000752 <__aeabi_fadd+0xf6>
 80008ea:	2fff      	cmp	r7, #255	; 0xff
 80008ec:	d0ac      	beq.n	8000848 <__aeabi_fadd+0x1ec>
 80008ee:	4455      	add	r5, sl
 80008f0:	086a      	lsrs	r2, r5, #1
 80008f2:	e7a4      	b.n	800083e <__aeabi_fadd+0x1e2>
 80008f4:	4653      	mov	r3, sl
 80008f6:	000c      	movs	r4, r1
 80008f8:	1aee      	subs	r6, r5, r3
 80008fa:	e6e8      	b.n	80006ce <__aeabi_fadd+0x72>
 80008fc:	4653      	mov	r3, sl
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d128      	bne.n	8000954 <__aeabi_fadd+0x2f8>
 8000902:	2d00      	cmp	r5, #0
 8000904:	d000      	beq.n	8000908 <__aeabi_fadd+0x2ac>
 8000906:	e722      	b.n	800074e <__aeabi_fadd+0xf2>
 8000908:	2380      	movs	r3, #128	; 0x80
 800090a:	03db      	lsls	r3, r3, #15
 800090c:	469c      	mov	ip, r3
 800090e:	2400      	movs	r4, #0
 8000910:	23ff      	movs	r3, #255	; 0xff
 8000912:	e702      	b.n	800071a <__aeabi_fadd+0xbe>
 8000914:	002a      	movs	r2, r5
 8000916:	4452      	add	r2, sl
 8000918:	e73b      	b.n	8000792 <__aeabi_fadd+0x136>
 800091a:	4653      	mov	r3, sl
 800091c:	1b5a      	subs	r2, r3, r5
 800091e:	e6d1      	b.n	80006c4 <__aeabi_fadd+0x68>
 8000920:	2800      	cmp	r0, #0
 8000922:	d100      	bne.n	8000926 <__aeabi_fadd+0x2ca>
 8000924:	e714      	b.n	8000750 <__aeabi_fadd+0xf4>
 8000926:	2d00      	cmp	r5, #0
 8000928:	d100      	bne.n	800092c <__aeabi_fadd+0x2d0>
 800092a:	e712      	b.n	8000752 <__aeabi_fadd+0xf6>
 800092c:	2380      	movs	r3, #128	; 0x80
 800092e:	03db      	lsls	r3, r3, #15
 8000930:	421a      	tst	r2, r3
 8000932:	d100      	bne.n	8000936 <__aeabi_fadd+0x2da>
 8000934:	e70d      	b.n	8000752 <__aeabi_fadd+0xf6>
 8000936:	4641      	mov	r1, r8
 8000938:	4219      	tst	r1, r3
 800093a:	d000      	beq.n	800093e <__aeabi_fadd+0x2e2>
 800093c:	e709      	b.n	8000752 <__aeabi_fadd+0xf6>
 800093e:	4642      	mov	r2, r8
 8000940:	e707      	b.n	8000752 <__aeabi_fadd+0xf6>
 8000942:	000c      	movs	r4, r1
 8000944:	0037      	movs	r7, r6
 8000946:	1aaa      	subs	r2, r5, r2
 8000948:	e6bc      	b.n	80006c4 <__aeabi_fadd+0x68>
 800094a:	2d00      	cmp	r5, #0
 800094c:	d013      	beq.n	8000976 <__aeabi_fadd+0x31a>
 800094e:	000c      	movs	r4, r1
 8000950:	46c4      	mov	ip, r8
 8000952:	e6e2      	b.n	800071a <__aeabi_fadd+0xbe>
 8000954:	2d00      	cmp	r5, #0
 8000956:	d100      	bne.n	800095a <__aeabi_fadd+0x2fe>
 8000958:	e6fb      	b.n	8000752 <__aeabi_fadd+0xf6>
 800095a:	2380      	movs	r3, #128	; 0x80
 800095c:	03db      	lsls	r3, r3, #15
 800095e:	421a      	tst	r2, r3
 8000960:	d100      	bne.n	8000964 <__aeabi_fadd+0x308>
 8000962:	e6f6      	b.n	8000752 <__aeabi_fadd+0xf6>
 8000964:	4640      	mov	r0, r8
 8000966:	4218      	tst	r0, r3
 8000968:	d000      	beq.n	800096c <__aeabi_fadd+0x310>
 800096a:	e6f2      	b.n	8000752 <__aeabi_fadd+0xf6>
 800096c:	000c      	movs	r4, r1
 800096e:	e6ef      	b.n	8000750 <__aeabi_fadd+0xf4>
 8000970:	2a00      	cmp	r2, #0
 8000972:	d000      	beq.n	8000976 <__aeabi_fadd+0x31a>
 8000974:	e763      	b.n	800083e <__aeabi_fadd+0x1e2>
 8000976:	2200      	movs	r2, #0
 8000978:	2400      	movs	r4, #0
 800097a:	4694      	mov	ip, r2
 800097c:	e6cd      	b.n	800071a <__aeabi_fadd+0xbe>
 800097e:	46c4      	mov	ip, r8
 8000980:	e6cb      	b.n	800071a <__aeabi_fadd+0xbe>
 8000982:	002a      	movs	r2, r5
 8000984:	0037      	movs	r7, r6
 8000986:	4452      	add	r2, sl
 8000988:	e703      	b.n	8000792 <__aeabi_fadd+0x136>
 800098a:	46c0      	nop			; (mov r8, r8)
 800098c:	7dffffff 	.word	0x7dffffff
 8000990:	fbffffff 	.word	0xfbffffff

08000994 <__aeabi_fdiv>:
 8000994:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000996:	464f      	mov	r7, r9
 8000998:	4646      	mov	r6, r8
 800099a:	46d6      	mov	lr, sl
 800099c:	0245      	lsls	r5, r0, #9
 800099e:	b5c0      	push	{r6, r7, lr}
 80009a0:	0047      	lsls	r7, r0, #1
 80009a2:	1c0c      	adds	r4, r1, #0
 80009a4:	0a6d      	lsrs	r5, r5, #9
 80009a6:	0e3f      	lsrs	r7, r7, #24
 80009a8:	0fc6      	lsrs	r6, r0, #31
 80009aa:	2f00      	cmp	r7, #0
 80009ac:	d066      	beq.n	8000a7c <__aeabi_fdiv+0xe8>
 80009ae:	2fff      	cmp	r7, #255	; 0xff
 80009b0:	d06c      	beq.n	8000a8c <__aeabi_fdiv+0xf8>
 80009b2:	2300      	movs	r3, #0
 80009b4:	00ea      	lsls	r2, r5, #3
 80009b6:	2580      	movs	r5, #128	; 0x80
 80009b8:	4699      	mov	r9, r3
 80009ba:	469a      	mov	sl, r3
 80009bc:	04ed      	lsls	r5, r5, #19
 80009be:	4315      	orrs	r5, r2
 80009c0:	3f7f      	subs	r7, #127	; 0x7f
 80009c2:	0260      	lsls	r0, r4, #9
 80009c4:	0061      	lsls	r1, r4, #1
 80009c6:	0a43      	lsrs	r3, r0, #9
 80009c8:	4698      	mov	r8, r3
 80009ca:	0e09      	lsrs	r1, r1, #24
 80009cc:	0fe4      	lsrs	r4, r4, #31
 80009ce:	2900      	cmp	r1, #0
 80009d0:	d048      	beq.n	8000a64 <__aeabi_fdiv+0xd0>
 80009d2:	29ff      	cmp	r1, #255	; 0xff
 80009d4:	d010      	beq.n	80009f8 <__aeabi_fdiv+0x64>
 80009d6:	2280      	movs	r2, #128	; 0x80
 80009d8:	00d8      	lsls	r0, r3, #3
 80009da:	04d2      	lsls	r2, r2, #19
 80009dc:	4302      	orrs	r2, r0
 80009de:	4690      	mov	r8, r2
 80009e0:	2000      	movs	r0, #0
 80009e2:	397f      	subs	r1, #127	; 0x7f
 80009e4:	464a      	mov	r2, r9
 80009e6:	0033      	movs	r3, r6
 80009e8:	1a7f      	subs	r7, r7, r1
 80009ea:	4302      	orrs	r2, r0
 80009ec:	496c      	ldr	r1, [pc, #432]	; (8000ba0 <__aeabi_fdiv+0x20c>)
 80009ee:	0092      	lsls	r2, r2, #2
 80009f0:	588a      	ldr	r2, [r1, r2]
 80009f2:	4063      	eors	r3, r4
 80009f4:	b2db      	uxtb	r3, r3
 80009f6:	4697      	mov	pc, r2
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d16d      	bne.n	8000ad8 <__aeabi_fdiv+0x144>
 80009fc:	2002      	movs	r0, #2
 80009fe:	3fff      	subs	r7, #255	; 0xff
 8000a00:	e033      	b.n	8000a6a <__aeabi_fdiv+0xd6>
 8000a02:	2300      	movs	r3, #0
 8000a04:	4698      	mov	r8, r3
 8000a06:	0026      	movs	r6, r4
 8000a08:	4645      	mov	r5, r8
 8000a0a:	4682      	mov	sl, r0
 8000a0c:	4653      	mov	r3, sl
 8000a0e:	2b02      	cmp	r3, #2
 8000a10:	d100      	bne.n	8000a14 <__aeabi_fdiv+0x80>
 8000a12:	e07f      	b.n	8000b14 <__aeabi_fdiv+0x180>
 8000a14:	2b03      	cmp	r3, #3
 8000a16:	d100      	bne.n	8000a1a <__aeabi_fdiv+0x86>
 8000a18:	e094      	b.n	8000b44 <__aeabi_fdiv+0x1b0>
 8000a1a:	2b01      	cmp	r3, #1
 8000a1c:	d017      	beq.n	8000a4e <__aeabi_fdiv+0xba>
 8000a1e:	0038      	movs	r0, r7
 8000a20:	307f      	adds	r0, #127	; 0x7f
 8000a22:	2800      	cmp	r0, #0
 8000a24:	dd5f      	ble.n	8000ae6 <__aeabi_fdiv+0x152>
 8000a26:	076b      	lsls	r3, r5, #29
 8000a28:	d004      	beq.n	8000a34 <__aeabi_fdiv+0xa0>
 8000a2a:	230f      	movs	r3, #15
 8000a2c:	402b      	ands	r3, r5
 8000a2e:	2b04      	cmp	r3, #4
 8000a30:	d000      	beq.n	8000a34 <__aeabi_fdiv+0xa0>
 8000a32:	3504      	adds	r5, #4
 8000a34:	012b      	lsls	r3, r5, #4
 8000a36:	d503      	bpl.n	8000a40 <__aeabi_fdiv+0xac>
 8000a38:	0038      	movs	r0, r7
 8000a3a:	4b5a      	ldr	r3, [pc, #360]	; (8000ba4 <__aeabi_fdiv+0x210>)
 8000a3c:	3080      	adds	r0, #128	; 0x80
 8000a3e:	401d      	ands	r5, r3
 8000a40:	28fe      	cmp	r0, #254	; 0xfe
 8000a42:	dc67      	bgt.n	8000b14 <__aeabi_fdiv+0x180>
 8000a44:	01ad      	lsls	r5, r5, #6
 8000a46:	0a6d      	lsrs	r5, r5, #9
 8000a48:	b2c0      	uxtb	r0, r0
 8000a4a:	e002      	b.n	8000a52 <__aeabi_fdiv+0xbe>
 8000a4c:	001e      	movs	r6, r3
 8000a4e:	2000      	movs	r0, #0
 8000a50:	2500      	movs	r5, #0
 8000a52:	05c0      	lsls	r0, r0, #23
 8000a54:	4328      	orrs	r0, r5
 8000a56:	07f6      	lsls	r6, r6, #31
 8000a58:	4330      	orrs	r0, r6
 8000a5a:	bce0      	pop	{r5, r6, r7}
 8000a5c:	46ba      	mov	sl, r7
 8000a5e:	46b1      	mov	r9, r6
 8000a60:	46a8      	mov	r8, r5
 8000a62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d12b      	bne.n	8000ac0 <__aeabi_fdiv+0x12c>
 8000a68:	2001      	movs	r0, #1
 8000a6a:	464a      	mov	r2, r9
 8000a6c:	0033      	movs	r3, r6
 8000a6e:	494e      	ldr	r1, [pc, #312]	; (8000ba8 <__aeabi_fdiv+0x214>)
 8000a70:	4302      	orrs	r2, r0
 8000a72:	0092      	lsls	r2, r2, #2
 8000a74:	588a      	ldr	r2, [r1, r2]
 8000a76:	4063      	eors	r3, r4
 8000a78:	b2db      	uxtb	r3, r3
 8000a7a:	4697      	mov	pc, r2
 8000a7c:	2d00      	cmp	r5, #0
 8000a7e:	d113      	bne.n	8000aa8 <__aeabi_fdiv+0x114>
 8000a80:	2304      	movs	r3, #4
 8000a82:	4699      	mov	r9, r3
 8000a84:	3b03      	subs	r3, #3
 8000a86:	2700      	movs	r7, #0
 8000a88:	469a      	mov	sl, r3
 8000a8a:	e79a      	b.n	80009c2 <__aeabi_fdiv+0x2e>
 8000a8c:	2d00      	cmp	r5, #0
 8000a8e:	d105      	bne.n	8000a9c <__aeabi_fdiv+0x108>
 8000a90:	2308      	movs	r3, #8
 8000a92:	4699      	mov	r9, r3
 8000a94:	3b06      	subs	r3, #6
 8000a96:	27ff      	movs	r7, #255	; 0xff
 8000a98:	469a      	mov	sl, r3
 8000a9a:	e792      	b.n	80009c2 <__aeabi_fdiv+0x2e>
 8000a9c:	230c      	movs	r3, #12
 8000a9e:	4699      	mov	r9, r3
 8000aa0:	3b09      	subs	r3, #9
 8000aa2:	27ff      	movs	r7, #255	; 0xff
 8000aa4:	469a      	mov	sl, r3
 8000aa6:	e78c      	b.n	80009c2 <__aeabi_fdiv+0x2e>
 8000aa8:	0028      	movs	r0, r5
 8000aaa:	f002 f843 	bl	8002b34 <__clzsi2>
 8000aae:	2776      	movs	r7, #118	; 0x76
 8000ab0:	1f43      	subs	r3, r0, #5
 8000ab2:	409d      	lsls	r5, r3
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	427f      	negs	r7, r7
 8000ab8:	4699      	mov	r9, r3
 8000aba:	469a      	mov	sl, r3
 8000abc:	1a3f      	subs	r7, r7, r0
 8000abe:	e780      	b.n	80009c2 <__aeabi_fdiv+0x2e>
 8000ac0:	0018      	movs	r0, r3
 8000ac2:	f002 f837 	bl	8002b34 <__clzsi2>
 8000ac6:	4642      	mov	r2, r8
 8000ac8:	1f43      	subs	r3, r0, #5
 8000aca:	2176      	movs	r1, #118	; 0x76
 8000acc:	409a      	lsls	r2, r3
 8000ace:	4249      	negs	r1, r1
 8000ad0:	1a09      	subs	r1, r1, r0
 8000ad2:	4690      	mov	r8, r2
 8000ad4:	2000      	movs	r0, #0
 8000ad6:	e785      	b.n	80009e4 <__aeabi_fdiv+0x50>
 8000ad8:	21ff      	movs	r1, #255	; 0xff
 8000ada:	2003      	movs	r0, #3
 8000adc:	e782      	b.n	80009e4 <__aeabi_fdiv+0x50>
 8000ade:	001e      	movs	r6, r3
 8000ae0:	20ff      	movs	r0, #255	; 0xff
 8000ae2:	2500      	movs	r5, #0
 8000ae4:	e7b5      	b.n	8000a52 <__aeabi_fdiv+0xbe>
 8000ae6:	2301      	movs	r3, #1
 8000ae8:	1a1b      	subs	r3, r3, r0
 8000aea:	2b1b      	cmp	r3, #27
 8000aec:	dcaf      	bgt.n	8000a4e <__aeabi_fdiv+0xba>
 8000aee:	379e      	adds	r7, #158	; 0x9e
 8000af0:	0029      	movs	r1, r5
 8000af2:	40bd      	lsls	r5, r7
 8000af4:	40d9      	lsrs	r1, r3
 8000af6:	1e6a      	subs	r2, r5, #1
 8000af8:	4195      	sbcs	r5, r2
 8000afa:	430d      	orrs	r5, r1
 8000afc:	076b      	lsls	r3, r5, #29
 8000afe:	d004      	beq.n	8000b0a <__aeabi_fdiv+0x176>
 8000b00:	230f      	movs	r3, #15
 8000b02:	402b      	ands	r3, r5
 8000b04:	2b04      	cmp	r3, #4
 8000b06:	d000      	beq.n	8000b0a <__aeabi_fdiv+0x176>
 8000b08:	3504      	adds	r5, #4
 8000b0a:	016b      	lsls	r3, r5, #5
 8000b0c:	d544      	bpl.n	8000b98 <__aeabi_fdiv+0x204>
 8000b0e:	2001      	movs	r0, #1
 8000b10:	2500      	movs	r5, #0
 8000b12:	e79e      	b.n	8000a52 <__aeabi_fdiv+0xbe>
 8000b14:	20ff      	movs	r0, #255	; 0xff
 8000b16:	2500      	movs	r5, #0
 8000b18:	e79b      	b.n	8000a52 <__aeabi_fdiv+0xbe>
 8000b1a:	2580      	movs	r5, #128	; 0x80
 8000b1c:	2600      	movs	r6, #0
 8000b1e:	20ff      	movs	r0, #255	; 0xff
 8000b20:	03ed      	lsls	r5, r5, #15
 8000b22:	e796      	b.n	8000a52 <__aeabi_fdiv+0xbe>
 8000b24:	2300      	movs	r3, #0
 8000b26:	4698      	mov	r8, r3
 8000b28:	2080      	movs	r0, #128	; 0x80
 8000b2a:	03c0      	lsls	r0, r0, #15
 8000b2c:	4205      	tst	r5, r0
 8000b2e:	d009      	beq.n	8000b44 <__aeabi_fdiv+0x1b0>
 8000b30:	4643      	mov	r3, r8
 8000b32:	4203      	tst	r3, r0
 8000b34:	d106      	bne.n	8000b44 <__aeabi_fdiv+0x1b0>
 8000b36:	4645      	mov	r5, r8
 8000b38:	4305      	orrs	r5, r0
 8000b3a:	026d      	lsls	r5, r5, #9
 8000b3c:	0026      	movs	r6, r4
 8000b3e:	20ff      	movs	r0, #255	; 0xff
 8000b40:	0a6d      	lsrs	r5, r5, #9
 8000b42:	e786      	b.n	8000a52 <__aeabi_fdiv+0xbe>
 8000b44:	2080      	movs	r0, #128	; 0x80
 8000b46:	03c0      	lsls	r0, r0, #15
 8000b48:	4305      	orrs	r5, r0
 8000b4a:	026d      	lsls	r5, r5, #9
 8000b4c:	20ff      	movs	r0, #255	; 0xff
 8000b4e:	0a6d      	lsrs	r5, r5, #9
 8000b50:	e77f      	b.n	8000a52 <__aeabi_fdiv+0xbe>
 8000b52:	4641      	mov	r1, r8
 8000b54:	016a      	lsls	r2, r5, #5
 8000b56:	0148      	lsls	r0, r1, #5
 8000b58:	4282      	cmp	r2, r0
 8000b5a:	d219      	bcs.n	8000b90 <__aeabi_fdiv+0x1fc>
 8000b5c:	211b      	movs	r1, #27
 8000b5e:	2500      	movs	r5, #0
 8000b60:	3f01      	subs	r7, #1
 8000b62:	2601      	movs	r6, #1
 8000b64:	0014      	movs	r4, r2
 8000b66:	006d      	lsls	r5, r5, #1
 8000b68:	0052      	lsls	r2, r2, #1
 8000b6a:	2c00      	cmp	r4, #0
 8000b6c:	db01      	blt.n	8000b72 <__aeabi_fdiv+0x1de>
 8000b6e:	4290      	cmp	r0, r2
 8000b70:	d801      	bhi.n	8000b76 <__aeabi_fdiv+0x1e2>
 8000b72:	1a12      	subs	r2, r2, r0
 8000b74:	4335      	orrs	r5, r6
 8000b76:	3901      	subs	r1, #1
 8000b78:	2900      	cmp	r1, #0
 8000b7a:	d1f3      	bne.n	8000b64 <__aeabi_fdiv+0x1d0>
 8000b7c:	1e50      	subs	r0, r2, #1
 8000b7e:	4182      	sbcs	r2, r0
 8000b80:	0038      	movs	r0, r7
 8000b82:	307f      	adds	r0, #127	; 0x7f
 8000b84:	001e      	movs	r6, r3
 8000b86:	4315      	orrs	r5, r2
 8000b88:	2800      	cmp	r0, #0
 8000b8a:	dd00      	ble.n	8000b8e <__aeabi_fdiv+0x1fa>
 8000b8c:	e74b      	b.n	8000a26 <__aeabi_fdiv+0x92>
 8000b8e:	e7aa      	b.n	8000ae6 <__aeabi_fdiv+0x152>
 8000b90:	211a      	movs	r1, #26
 8000b92:	2501      	movs	r5, #1
 8000b94:	1a12      	subs	r2, r2, r0
 8000b96:	e7e4      	b.n	8000b62 <__aeabi_fdiv+0x1ce>
 8000b98:	01ad      	lsls	r5, r5, #6
 8000b9a:	2000      	movs	r0, #0
 8000b9c:	0a6d      	lsrs	r5, r5, #9
 8000b9e:	e758      	b.n	8000a52 <__aeabi_fdiv+0xbe>
 8000ba0:	08019a50 	.word	0x08019a50
 8000ba4:	f7ffffff 	.word	0xf7ffffff
 8000ba8:	08019a90 	.word	0x08019a90

08000bac <__eqsf2>:
 8000bac:	b570      	push	{r4, r5, r6, lr}
 8000bae:	0042      	lsls	r2, r0, #1
 8000bb0:	024e      	lsls	r6, r1, #9
 8000bb2:	004c      	lsls	r4, r1, #1
 8000bb4:	0245      	lsls	r5, r0, #9
 8000bb6:	0a6d      	lsrs	r5, r5, #9
 8000bb8:	0e12      	lsrs	r2, r2, #24
 8000bba:	0fc3      	lsrs	r3, r0, #31
 8000bbc:	0a76      	lsrs	r6, r6, #9
 8000bbe:	0e24      	lsrs	r4, r4, #24
 8000bc0:	0fc9      	lsrs	r1, r1, #31
 8000bc2:	2aff      	cmp	r2, #255	; 0xff
 8000bc4:	d00f      	beq.n	8000be6 <__eqsf2+0x3a>
 8000bc6:	2cff      	cmp	r4, #255	; 0xff
 8000bc8:	d011      	beq.n	8000bee <__eqsf2+0x42>
 8000bca:	2001      	movs	r0, #1
 8000bcc:	42a2      	cmp	r2, r4
 8000bce:	d000      	beq.n	8000bd2 <__eqsf2+0x26>
 8000bd0:	bd70      	pop	{r4, r5, r6, pc}
 8000bd2:	42b5      	cmp	r5, r6
 8000bd4:	d1fc      	bne.n	8000bd0 <__eqsf2+0x24>
 8000bd6:	428b      	cmp	r3, r1
 8000bd8:	d00d      	beq.n	8000bf6 <__eqsf2+0x4a>
 8000bda:	2a00      	cmp	r2, #0
 8000bdc:	d1f8      	bne.n	8000bd0 <__eqsf2+0x24>
 8000bde:	0028      	movs	r0, r5
 8000be0:	1e45      	subs	r5, r0, #1
 8000be2:	41a8      	sbcs	r0, r5
 8000be4:	e7f4      	b.n	8000bd0 <__eqsf2+0x24>
 8000be6:	2001      	movs	r0, #1
 8000be8:	2d00      	cmp	r5, #0
 8000bea:	d1f1      	bne.n	8000bd0 <__eqsf2+0x24>
 8000bec:	e7eb      	b.n	8000bc6 <__eqsf2+0x1a>
 8000bee:	2001      	movs	r0, #1
 8000bf0:	2e00      	cmp	r6, #0
 8000bf2:	d1ed      	bne.n	8000bd0 <__eqsf2+0x24>
 8000bf4:	e7e9      	b.n	8000bca <__eqsf2+0x1e>
 8000bf6:	2000      	movs	r0, #0
 8000bf8:	e7ea      	b.n	8000bd0 <__eqsf2+0x24>
 8000bfa:	46c0      	nop			; (mov r8, r8)

08000bfc <__gesf2>:
 8000bfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bfe:	0042      	lsls	r2, r0, #1
 8000c00:	0246      	lsls	r6, r0, #9
 8000c02:	024d      	lsls	r5, r1, #9
 8000c04:	004c      	lsls	r4, r1, #1
 8000c06:	0fc3      	lsrs	r3, r0, #31
 8000c08:	0a76      	lsrs	r6, r6, #9
 8000c0a:	0e12      	lsrs	r2, r2, #24
 8000c0c:	0a6d      	lsrs	r5, r5, #9
 8000c0e:	0e24      	lsrs	r4, r4, #24
 8000c10:	0fc8      	lsrs	r0, r1, #31
 8000c12:	2aff      	cmp	r2, #255	; 0xff
 8000c14:	d01f      	beq.n	8000c56 <__gesf2+0x5a>
 8000c16:	2cff      	cmp	r4, #255	; 0xff
 8000c18:	d010      	beq.n	8000c3c <__gesf2+0x40>
 8000c1a:	2a00      	cmp	r2, #0
 8000c1c:	d11f      	bne.n	8000c5e <__gesf2+0x62>
 8000c1e:	4271      	negs	r1, r6
 8000c20:	4171      	adcs	r1, r6
 8000c22:	2c00      	cmp	r4, #0
 8000c24:	d101      	bne.n	8000c2a <__gesf2+0x2e>
 8000c26:	2d00      	cmp	r5, #0
 8000c28:	d01e      	beq.n	8000c68 <__gesf2+0x6c>
 8000c2a:	2900      	cmp	r1, #0
 8000c2c:	d10e      	bne.n	8000c4c <__gesf2+0x50>
 8000c2e:	4283      	cmp	r3, r0
 8000c30:	d01e      	beq.n	8000c70 <__gesf2+0x74>
 8000c32:	2102      	movs	r1, #2
 8000c34:	1e58      	subs	r0, r3, #1
 8000c36:	4008      	ands	r0, r1
 8000c38:	3801      	subs	r0, #1
 8000c3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c3c:	2d00      	cmp	r5, #0
 8000c3e:	d126      	bne.n	8000c8e <__gesf2+0x92>
 8000c40:	2a00      	cmp	r2, #0
 8000c42:	d1f4      	bne.n	8000c2e <__gesf2+0x32>
 8000c44:	4271      	negs	r1, r6
 8000c46:	4171      	adcs	r1, r6
 8000c48:	2900      	cmp	r1, #0
 8000c4a:	d0f0      	beq.n	8000c2e <__gesf2+0x32>
 8000c4c:	2800      	cmp	r0, #0
 8000c4e:	d1f4      	bne.n	8000c3a <__gesf2+0x3e>
 8000c50:	2001      	movs	r0, #1
 8000c52:	4240      	negs	r0, r0
 8000c54:	e7f1      	b.n	8000c3a <__gesf2+0x3e>
 8000c56:	2e00      	cmp	r6, #0
 8000c58:	d119      	bne.n	8000c8e <__gesf2+0x92>
 8000c5a:	2cff      	cmp	r4, #255	; 0xff
 8000c5c:	d0ee      	beq.n	8000c3c <__gesf2+0x40>
 8000c5e:	2c00      	cmp	r4, #0
 8000c60:	d1e5      	bne.n	8000c2e <__gesf2+0x32>
 8000c62:	2d00      	cmp	r5, #0
 8000c64:	d1e3      	bne.n	8000c2e <__gesf2+0x32>
 8000c66:	e7e4      	b.n	8000c32 <__gesf2+0x36>
 8000c68:	2000      	movs	r0, #0
 8000c6a:	2e00      	cmp	r6, #0
 8000c6c:	d0e5      	beq.n	8000c3a <__gesf2+0x3e>
 8000c6e:	e7e0      	b.n	8000c32 <__gesf2+0x36>
 8000c70:	42a2      	cmp	r2, r4
 8000c72:	dc05      	bgt.n	8000c80 <__gesf2+0x84>
 8000c74:	dbea      	blt.n	8000c4c <__gesf2+0x50>
 8000c76:	42ae      	cmp	r6, r5
 8000c78:	d802      	bhi.n	8000c80 <__gesf2+0x84>
 8000c7a:	d3e7      	bcc.n	8000c4c <__gesf2+0x50>
 8000c7c:	2000      	movs	r0, #0
 8000c7e:	e7dc      	b.n	8000c3a <__gesf2+0x3e>
 8000c80:	4241      	negs	r1, r0
 8000c82:	4141      	adcs	r1, r0
 8000c84:	4248      	negs	r0, r1
 8000c86:	2102      	movs	r1, #2
 8000c88:	4008      	ands	r0, r1
 8000c8a:	3801      	subs	r0, #1
 8000c8c:	e7d5      	b.n	8000c3a <__gesf2+0x3e>
 8000c8e:	2002      	movs	r0, #2
 8000c90:	4240      	negs	r0, r0
 8000c92:	e7d2      	b.n	8000c3a <__gesf2+0x3e>

08000c94 <__lesf2>:
 8000c94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c96:	0042      	lsls	r2, r0, #1
 8000c98:	0246      	lsls	r6, r0, #9
 8000c9a:	024d      	lsls	r5, r1, #9
 8000c9c:	004c      	lsls	r4, r1, #1
 8000c9e:	0fc3      	lsrs	r3, r0, #31
 8000ca0:	0a76      	lsrs	r6, r6, #9
 8000ca2:	0e12      	lsrs	r2, r2, #24
 8000ca4:	0a6d      	lsrs	r5, r5, #9
 8000ca6:	0e24      	lsrs	r4, r4, #24
 8000ca8:	0fc8      	lsrs	r0, r1, #31
 8000caa:	2aff      	cmp	r2, #255	; 0xff
 8000cac:	d00d      	beq.n	8000cca <__lesf2+0x36>
 8000cae:	2cff      	cmp	r4, #255	; 0xff
 8000cb0:	d00f      	beq.n	8000cd2 <__lesf2+0x3e>
 8000cb2:	2a00      	cmp	r2, #0
 8000cb4:	d123      	bne.n	8000cfe <__lesf2+0x6a>
 8000cb6:	4271      	negs	r1, r6
 8000cb8:	4171      	adcs	r1, r6
 8000cba:	2c00      	cmp	r4, #0
 8000cbc:	d10f      	bne.n	8000cde <__lesf2+0x4a>
 8000cbe:	2d00      	cmp	r5, #0
 8000cc0:	d10d      	bne.n	8000cde <__lesf2+0x4a>
 8000cc2:	2000      	movs	r0, #0
 8000cc4:	2e00      	cmp	r6, #0
 8000cc6:	d014      	beq.n	8000cf2 <__lesf2+0x5e>
 8000cc8:	e00d      	b.n	8000ce6 <__lesf2+0x52>
 8000cca:	2e00      	cmp	r6, #0
 8000ccc:	d110      	bne.n	8000cf0 <__lesf2+0x5c>
 8000cce:	2cff      	cmp	r4, #255	; 0xff
 8000cd0:	d115      	bne.n	8000cfe <__lesf2+0x6a>
 8000cd2:	2d00      	cmp	r5, #0
 8000cd4:	d10c      	bne.n	8000cf0 <__lesf2+0x5c>
 8000cd6:	2a00      	cmp	r2, #0
 8000cd8:	d103      	bne.n	8000ce2 <__lesf2+0x4e>
 8000cda:	4271      	negs	r1, r6
 8000cdc:	4171      	adcs	r1, r6
 8000cde:	2900      	cmp	r1, #0
 8000ce0:	d108      	bne.n	8000cf4 <__lesf2+0x60>
 8000ce2:	4283      	cmp	r3, r0
 8000ce4:	d010      	beq.n	8000d08 <__lesf2+0x74>
 8000ce6:	2102      	movs	r1, #2
 8000ce8:	1e58      	subs	r0, r3, #1
 8000cea:	4008      	ands	r0, r1
 8000cec:	3801      	subs	r0, #1
 8000cee:	e000      	b.n	8000cf2 <__lesf2+0x5e>
 8000cf0:	2002      	movs	r0, #2
 8000cf2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000cf4:	2800      	cmp	r0, #0
 8000cf6:	d1fc      	bne.n	8000cf2 <__lesf2+0x5e>
 8000cf8:	2001      	movs	r0, #1
 8000cfa:	4240      	negs	r0, r0
 8000cfc:	e7f9      	b.n	8000cf2 <__lesf2+0x5e>
 8000cfe:	2c00      	cmp	r4, #0
 8000d00:	d1ef      	bne.n	8000ce2 <__lesf2+0x4e>
 8000d02:	2d00      	cmp	r5, #0
 8000d04:	d1ed      	bne.n	8000ce2 <__lesf2+0x4e>
 8000d06:	e7ee      	b.n	8000ce6 <__lesf2+0x52>
 8000d08:	42a2      	cmp	r2, r4
 8000d0a:	dc05      	bgt.n	8000d18 <__lesf2+0x84>
 8000d0c:	dbf2      	blt.n	8000cf4 <__lesf2+0x60>
 8000d0e:	42ae      	cmp	r6, r5
 8000d10:	d802      	bhi.n	8000d18 <__lesf2+0x84>
 8000d12:	d3ef      	bcc.n	8000cf4 <__lesf2+0x60>
 8000d14:	2000      	movs	r0, #0
 8000d16:	e7ec      	b.n	8000cf2 <__lesf2+0x5e>
 8000d18:	4241      	negs	r1, r0
 8000d1a:	4141      	adcs	r1, r0
 8000d1c:	4248      	negs	r0, r1
 8000d1e:	2102      	movs	r1, #2
 8000d20:	4008      	ands	r0, r1
 8000d22:	3801      	subs	r0, #1
 8000d24:	e7e5      	b.n	8000cf2 <__lesf2+0x5e>
 8000d26:	46c0      	nop			; (mov r8, r8)

08000d28 <__aeabi_ui2f>:
 8000d28:	b570      	push	{r4, r5, r6, lr}
 8000d2a:	1e05      	subs	r5, r0, #0
 8000d2c:	d00e      	beq.n	8000d4c <__aeabi_ui2f+0x24>
 8000d2e:	f001 ff01 	bl	8002b34 <__clzsi2>
 8000d32:	239e      	movs	r3, #158	; 0x9e
 8000d34:	0004      	movs	r4, r0
 8000d36:	1a1b      	subs	r3, r3, r0
 8000d38:	2b96      	cmp	r3, #150	; 0x96
 8000d3a:	dc0c      	bgt.n	8000d56 <__aeabi_ui2f+0x2e>
 8000d3c:	2808      	cmp	r0, #8
 8000d3e:	dd01      	ble.n	8000d44 <__aeabi_ui2f+0x1c>
 8000d40:	3c08      	subs	r4, #8
 8000d42:	40a5      	lsls	r5, r4
 8000d44:	026d      	lsls	r5, r5, #9
 8000d46:	0a6d      	lsrs	r5, r5, #9
 8000d48:	b2d8      	uxtb	r0, r3
 8000d4a:	e001      	b.n	8000d50 <__aeabi_ui2f+0x28>
 8000d4c:	2000      	movs	r0, #0
 8000d4e:	2500      	movs	r5, #0
 8000d50:	05c0      	lsls	r0, r0, #23
 8000d52:	4328      	orrs	r0, r5
 8000d54:	bd70      	pop	{r4, r5, r6, pc}
 8000d56:	2b99      	cmp	r3, #153	; 0x99
 8000d58:	dd09      	ble.n	8000d6e <__aeabi_ui2f+0x46>
 8000d5a:	0002      	movs	r2, r0
 8000d5c:	0029      	movs	r1, r5
 8000d5e:	321b      	adds	r2, #27
 8000d60:	4091      	lsls	r1, r2
 8000d62:	1e4a      	subs	r2, r1, #1
 8000d64:	4191      	sbcs	r1, r2
 8000d66:	2205      	movs	r2, #5
 8000d68:	1a12      	subs	r2, r2, r0
 8000d6a:	40d5      	lsrs	r5, r2
 8000d6c:	430d      	orrs	r5, r1
 8000d6e:	2c05      	cmp	r4, #5
 8000d70:	dd01      	ble.n	8000d76 <__aeabi_ui2f+0x4e>
 8000d72:	1f62      	subs	r2, r4, #5
 8000d74:	4095      	lsls	r5, r2
 8000d76:	0029      	movs	r1, r5
 8000d78:	4e08      	ldr	r6, [pc, #32]	; (8000d9c <__aeabi_ui2f+0x74>)
 8000d7a:	4031      	ands	r1, r6
 8000d7c:	076a      	lsls	r2, r5, #29
 8000d7e:	d009      	beq.n	8000d94 <__aeabi_ui2f+0x6c>
 8000d80:	200f      	movs	r0, #15
 8000d82:	4028      	ands	r0, r5
 8000d84:	2804      	cmp	r0, #4
 8000d86:	d005      	beq.n	8000d94 <__aeabi_ui2f+0x6c>
 8000d88:	3104      	adds	r1, #4
 8000d8a:	014a      	lsls	r2, r1, #5
 8000d8c:	d502      	bpl.n	8000d94 <__aeabi_ui2f+0x6c>
 8000d8e:	239f      	movs	r3, #159	; 0x9f
 8000d90:	4031      	ands	r1, r6
 8000d92:	1b1b      	subs	r3, r3, r4
 8000d94:	0189      	lsls	r1, r1, #6
 8000d96:	0a4d      	lsrs	r5, r1, #9
 8000d98:	b2d8      	uxtb	r0, r3
 8000d9a:	e7d9      	b.n	8000d50 <__aeabi_ui2f+0x28>
 8000d9c:	fbffffff 	.word	0xfbffffff

08000da0 <__aeabi_dadd>:
 8000da0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000da2:	464f      	mov	r7, r9
 8000da4:	46d6      	mov	lr, sl
 8000da6:	4646      	mov	r6, r8
 8000da8:	000d      	movs	r5, r1
 8000daa:	0001      	movs	r1, r0
 8000dac:	0018      	movs	r0, r3
 8000dae:	b5c0      	push	{r6, r7, lr}
 8000db0:	0017      	movs	r7, r2
 8000db2:	032b      	lsls	r3, r5, #12
 8000db4:	0a5a      	lsrs	r2, r3, #9
 8000db6:	0f4b      	lsrs	r3, r1, #29
 8000db8:	4313      	orrs	r3, r2
 8000dba:	00ca      	lsls	r2, r1, #3
 8000dbc:	4691      	mov	r9, r2
 8000dbe:	0302      	lsls	r2, r0, #12
 8000dc0:	006e      	lsls	r6, r5, #1
 8000dc2:	0041      	lsls	r1, r0, #1
 8000dc4:	0a52      	lsrs	r2, r2, #9
 8000dc6:	0fec      	lsrs	r4, r5, #31
 8000dc8:	0f7d      	lsrs	r5, r7, #29
 8000dca:	4315      	orrs	r5, r2
 8000dcc:	0d76      	lsrs	r6, r6, #21
 8000dce:	0d49      	lsrs	r1, r1, #21
 8000dd0:	0fc0      	lsrs	r0, r0, #31
 8000dd2:	4682      	mov	sl, r0
 8000dd4:	46ac      	mov	ip, r5
 8000dd6:	00ff      	lsls	r7, r7, #3
 8000dd8:	1a72      	subs	r2, r6, r1
 8000dda:	4284      	cmp	r4, r0
 8000ddc:	d100      	bne.n	8000de0 <__aeabi_dadd+0x40>
 8000dde:	e098      	b.n	8000f12 <__aeabi_dadd+0x172>
 8000de0:	2a00      	cmp	r2, #0
 8000de2:	dc00      	bgt.n	8000de6 <__aeabi_dadd+0x46>
 8000de4:	e081      	b.n	8000eea <__aeabi_dadd+0x14a>
 8000de6:	2900      	cmp	r1, #0
 8000de8:	d100      	bne.n	8000dec <__aeabi_dadd+0x4c>
 8000dea:	e0b6      	b.n	8000f5a <__aeabi_dadd+0x1ba>
 8000dec:	49c9      	ldr	r1, [pc, #804]	; (8001114 <__aeabi_dadd+0x374>)
 8000dee:	428e      	cmp	r6, r1
 8000df0:	d100      	bne.n	8000df4 <__aeabi_dadd+0x54>
 8000df2:	e172      	b.n	80010da <__aeabi_dadd+0x33a>
 8000df4:	2180      	movs	r1, #128	; 0x80
 8000df6:	0028      	movs	r0, r5
 8000df8:	0409      	lsls	r1, r1, #16
 8000dfa:	4308      	orrs	r0, r1
 8000dfc:	4684      	mov	ip, r0
 8000dfe:	2a38      	cmp	r2, #56	; 0x38
 8000e00:	dd00      	ble.n	8000e04 <__aeabi_dadd+0x64>
 8000e02:	e15e      	b.n	80010c2 <__aeabi_dadd+0x322>
 8000e04:	2a1f      	cmp	r2, #31
 8000e06:	dd00      	ble.n	8000e0a <__aeabi_dadd+0x6a>
 8000e08:	e1ee      	b.n	80011e8 <__aeabi_dadd+0x448>
 8000e0a:	2020      	movs	r0, #32
 8000e0c:	0039      	movs	r1, r7
 8000e0e:	4665      	mov	r5, ip
 8000e10:	1a80      	subs	r0, r0, r2
 8000e12:	4087      	lsls	r7, r0
 8000e14:	40d1      	lsrs	r1, r2
 8000e16:	4085      	lsls	r5, r0
 8000e18:	430d      	orrs	r5, r1
 8000e1a:	0039      	movs	r1, r7
 8000e1c:	1e4f      	subs	r7, r1, #1
 8000e1e:	41b9      	sbcs	r1, r7
 8000e20:	4667      	mov	r7, ip
 8000e22:	40d7      	lsrs	r7, r2
 8000e24:	4329      	orrs	r1, r5
 8000e26:	1bdb      	subs	r3, r3, r7
 8000e28:	464a      	mov	r2, r9
 8000e2a:	1a55      	subs	r5, r2, r1
 8000e2c:	45a9      	cmp	r9, r5
 8000e2e:	4189      	sbcs	r1, r1
 8000e30:	4249      	negs	r1, r1
 8000e32:	1a5b      	subs	r3, r3, r1
 8000e34:	4698      	mov	r8, r3
 8000e36:	4643      	mov	r3, r8
 8000e38:	021b      	lsls	r3, r3, #8
 8000e3a:	d400      	bmi.n	8000e3e <__aeabi_dadd+0x9e>
 8000e3c:	e0cc      	b.n	8000fd8 <__aeabi_dadd+0x238>
 8000e3e:	4643      	mov	r3, r8
 8000e40:	025b      	lsls	r3, r3, #9
 8000e42:	0a5b      	lsrs	r3, r3, #9
 8000e44:	4698      	mov	r8, r3
 8000e46:	4643      	mov	r3, r8
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d100      	bne.n	8000e4e <__aeabi_dadd+0xae>
 8000e4c:	e12c      	b.n	80010a8 <__aeabi_dadd+0x308>
 8000e4e:	4640      	mov	r0, r8
 8000e50:	f001 fe70 	bl	8002b34 <__clzsi2>
 8000e54:	0001      	movs	r1, r0
 8000e56:	3908      	subs	r1, #8
 8000e58:	2220      	movs	r2, #32
 8000e5a:	0028      	movs	r0, r5
 8000e5c:	4643      	mov	r3, r8
 8000e5e:	1a52      	subs	r2, r2, r1
 8000e60:	408b      	lsls	r3, r1
 8000e62:	40d0      	lsrs	r0, r2
 8000e64:	408d      	lsls	r5, r1
 8000e66:	4303      	orrs	r3, r0
 8000e68:	428e      	cmp	r6, r1
 8000e6a:	dd00      	ble.n	8000e6e <__aeabi_dadd+0xce>
 8000e6c:	e117      	b.n	800109e <__aeabi_dadd+0x2fe>
 8000e6e:	1b8e      	subs	r6, r1, r6
 8000e70:	1c72      	adds	r2, r6, #1
 8000e72:	2a1f      	cmp	r2, #31
 8000e74:	dd00      	ble.n	8000e78 <__aeabi_dadd+0xd8>
 8000e76:	e1a7      	b.n	80011c8 <__aeabi_dadd+0x428>
 8000e78:	2120      	movs	r1, #32
 8000e7a:	0018      	movs	r0, r3
 8000e7c:	002e      	movs	r6, r5
 8000e7e:	1a89      	subs	r1, r1, r2
 8000e80:	408d      	lsls	r5, r1
 8000e82:	4088      	lsls	r0, r1
 8000e84:	40d6      	lsrs	r6, r2
 8000e86:	40d3      	lsrs	r3, r2
 8000e88:	1e69      	subs	r1, r5, #1
 8000e8a:	418d      	sbcs	r5, r1
 8000e8c:	4330      	orrs	r0, r6
 8000e8e:	4698      	mov	r8, r3
 8000e90:	2600      	movs	r6, #0
 8000e92:	4305      	orrs	r5, r0
 8000e94:	076b      	lsls	r3, r5, #29
 8000e96:	d009      	beq.n	8000eac <__aeabi_dadd+0x10c>
 8000e98:	230f      	movs	r3, #15
 8000e9a:	402b      	ands	r3, r5
 8000e9c:	2b04      	cmp	r3, #4
 8000e9e:	d005      	beq.n	8000eac <__aeabi_dadd+0x10c>
 8000ea0:	1d2b      	adds	r3, r5, #4
 8000ea2:	42ab      	cmp	r3, r5
 8000ea4:	41ad      	sbcs	r5, r5
 8000ea6:	426d      	negs	r5, r5
 8000ea8:	44a8      	add	r8, r5
 8000eaa:	001d      	movs	r5, r3
 8000eac:	4643      	mov	r3, r8
 8000eae:	021b      	lsls	r3, r3, #8
 8000eb0:	d400      	bmi.n	8000eb4 <__aeabi_dadd+0x114>
 8000eb2:	e094      	b.n	8000fde <__aeabi_dadd+0x23e>
 8000eb4:	4b97      	ldr	r3, [pc, #604]	; (8001114 <__aeabi_dadd+0x374>)
 8000eb6:	1c72      	adds	r2, r6, #1
 8000eb8:	429a      	cmp	r2, r3
 8000eba:	d100      	bne.n	8000ebe <__aeabi_dadd+0x11e>
 8000ebc:	e09d      	b.n	8000ffa <__aeabi_dadd+0x25a>
 8000ebe:	4641      	mov	r1, r8
 8000ec0:	4b95      	ldr	r3, [pc, #596]	; (8001118 <__aeabi_dadd+0x378>)
 8000ec2:	08ed      	lsrs	r5, r5, #3
 8000ec4:	4019      	ands	r1, r3
 8000ec6:	000b      	movs	r3, r1
 8000ec8:	0552      	lsls	r2, r2, #21
 8000eca:	0749      	lsls	r1, r1, #29
 8000ecc:	025b      	lsls	r3, r3, #9
 8000ece:	4329      	orrs	r1, r5
 8000ed0:	0b1b      	lsrs	r3, r3, #12
 8000ed2:	0d52      	lsrs	r2, r2, #21
 8000ed4:	0512      	lsls	r2, r2, #20
 8000ed6:	4313      	orrs	r3, r2
 8000ed8:	07e4      	lsls	r4, r4, #31
 8000eda:	4323      	orrs	r3, r4
 8000edc:	0008      	movs	r0, r1
 8000ede:	0019      	movs	r1, r3
 8000ee0:	bce0      	pop	{r5, r6, r7}
 8000ee2:	46ba      	mov	sl, r7
 8000ee4:	46b1      	mov	r9, r6
 8000ee6:	46a8      	mov	r8, r5
 8000ee8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000eea:	2a00      	cmp	r2, #0
 8000eec:	d043      	beq.n	8000f76 <__aeabi_dadd+0x1d6>
 8000eee:	1b8a      	subs	r2, r1, r6
 8000ef0:	2e00      	cmp	r6, #0
 8000ef2:	d000      	beq.n	8000ef6 <__aeabi_dadd+0x156>
 8000ef4:	e12a      	b.n	800114c <__aeabi_dadd+0x3ac>
 8000ef6:	464c      	mov	r4, r9
 8000ef8:	431c      	orrs	r4, r3
 8000efa:	d100      	bne.n	8000efe <__aeabi_dadd+0x15e>
 8000efc:	e1d1      	b.n	80012a2 <__aeabi_dadd+0x502>
 8000efe:	1e54      	subs	r4, r2, #1
 8000f00:	2a01      	cmp	r2, #1
 8000f02:	d100      	bne.n	8000f06 <__aeabi_dadd+0x166>
 8000f04:	e21f      	b.n	8001346 <__aeabi_dadd+0x5a6>
 8000f06:	4d83      	ldr	r5, [pc, #524]	; (8001114 <__aeabi_dadd+0x374>)
 8000f08:	42aa      	cmp	r2, r5
 8000f0a:	d100      	bne.n	8000f0e <__aeabi_dadd+0x16e>
 8000f0c:	e272      	b.n	80013f4 <__aeabi_dadd+0x654>
 8000f0e:	0022      	movs	r2, r4
 8000f10:	e123      	b.n	800115a <__aeabi_dadd+0x3ba>
 8000f12:	2a00      	cmp	r2, #0
 8000f14:	dc00      	bgt.n	8000f18 <__aeabi_dadd+0x178>
 8000f16:	e098      	b.n	800104a <__aeabi_dadd+0x2aa>
 8000f18:	2900      	cmp	r1, #0
 8000f1a:	d042      	beq.n	8000fa2 <__aeabi_dadd+0x202>
 8000f1c:	497d      	ldr	r1, [pc, #500]	; (8001114 <__aeabi_dadd+0x374>)
 8000f1e:	428e      	cmp	r6, r1
 8000f20:	d100      	bne.n	8000f24 <__aeabi_dadd+0x184>
 8000f22:	e0da      	b.n	80010da <__aeabi_dadd+0x33a>
 8000f24:	2180      	movs	r1, #128	; 0x80
 8000f26:	0028      	movs	r0, r5
 8000f28:	0409      	lsls	r1, r1, #16
 8000f2a:	4308      	orrs	r0, r1
 8000f2c:	4684      	mov	ip, r0
 8000f2e:	2a38      	cmp	r2, #56	; 0x38
 8000f30:	dd00      	ble.n	8000f34 <__aeabi_dadd+0x194>
 8000f32:	e129      	b.n	8001188 <__aeabi_dadd+0x3e8>
 8000f34:	2a1f      	cmp	r2, #31
 8000f36:	dc00      	bgt.n	8000f3a <__aeabi_dadd+0x19a>
 8000f38:	e187      	b.n	800124a <__aeabi_dadd+0x4aa>
 8000f3a:	0011      	movs	r1, r2
 8000f3c:	4665      	mov	r5, ip
 8000f3e:	3920      	subs	r1, #32
 8000f40:	40cd      	lsrs	r5, r1
 8000f42:	2a20      	cmp	r2, #32
 8000f44:	d004      	beq.n	8000f50 <__aeabi_dadd+0x1b0>
 8000f46:	2040      	movs	r0, #64	; 0x40
 8000f48:	4661      	mov	r1, ip
 8000f4a:	1a82      	subs	r2, r0, r2
 8000f4c:	4091      	lsls	r1, r2
 8000f4e:	430f      	orrs	r7, r1
 8000f50:	0039      	movs	r1, r7
 8000f52:	1e4f      	subs	r7, r1, #1
 8000f54:	41b9      	sbcs	r1, r7
 8000f56:	430d      	orrs	r5, r1
 8000f58:	e11b      	b.n	8001192 <__aeabi_dadd+0x3f2>
 8000f5a:	0029      	movs	r1, r5
 8000f5c:	4339      	orrs	r1, r7
 8000f5e:	d100      	bne.n	8000f62 <__aeabi_dadd+0x1c2>
 8000f60:	e0b5      	b.n	80010ce <__aeabi_dadd+0x32e>
 8000f62:	1e51      	subs	r1, r2, #1
 8000f64:	2a01      	cmp	r2, #1
 8000f66:	d100      	bne.n	8000f6a <__aeabi_dadd+0x1ca>
 8000f68:	e1ab      	b.n	80012c2 <__aeabi_dadd+0x522>
 8000f6a:	486a      	ldr	r0, [pc, #424]	; (8001114 <__aeabi_dadd+0x374>)
 8000f6c:	4282      	cmp	r2, r0
 8000f6e:	d100      	bne.n	8000f72 <__aeabi_dadd+0x1d2>
 8000f70:	e1b2      	b.n	80012d8 <__aeabi_dadd+0x538>
 8000f72:	000a      	movs	r2, r1
 8000f74:	e743      	b.n	8000dfe <__aeabi_dadd+0x5e>
 8000f76:	4969      	ldr	r1, [pc, #420]	; (800111c <__aeabi_dadd+0x37c>)
 8000f78:	1c75      	adds	r5, r6, #1
 8000f7a:	420d      	tst	r5, r1
 8000f7c:	d000      	beq.n	8000f80 <__aeabi_dadd+0x1e0>
 8000f7e:	e0cf      	b.n	8001120 <__aeabi_dadd+0x380>
 8000f80:	2e00      	cmp	r6, #0
 8000f82:	d000      	beq.n	8000f86 <__aeabi_dadd+0x1e6>
 8000f84:	e193      	b.n	80012ae <__aeabi_dadd+0x50e>
 8000f86:	4649      	mov	r1, r9
 8000f88:	4319      	orrs	r1, r3
 8000f8a:	d100      	bne.n	8000f8e <__aeabi_dadd+0x1ee>
 8000f8c:	e1d1      	b.n	8001332 <__aeabi_dadd+0x592>
 8000f8e:	4661      	mov	r1, ip
 8000f90:	4339      	orrs	r1, r7
 8000f92:	d000      	beq.n	8000f96 <__aeabi_dadd+0x1f6>
 8000f94:	e1e3      	b.n	800135e <__aeabi_dadd+0x5be>
 8000f96:	4649      	mov	r1, r9
 8000f98:	0758      	lsls	r0, r3, #29
 8000f9a:	08c9      	lsrs	r1, r1, #3
 8000f9c:	4301      	orrs	r1, r0
 8000f9e:	08db      	lsrs	r3, r3, #3
 8000fa0:	e026      	b.n	8000ff0 <__aeabi_dadd+0x250>
 8000fa2:	0029      	movs	r1, r5
 8000fa4:	4339      	orrs	r1, r7
 8000fa6:	d100      	bne.n	8000faa <__aeabi_dadd+0x20a>
 8000fa8:	e091      	b.n	80010ce <__aeabi_dadd+0x32e>
 8000faa:	1e51      	subs	r1, r2, #1
 8000fac:	2a01      	cmp	r2, #1
 8000fae:	d005      	beq.n	8000fbc <__aeabi_dadd+0x21c>
 8000fb0:	4858      	ldr	r0, [pc, #352]	; (8001114 <__aeabi_dadd+0x374>)
 8000fb2:	4282      	cmp	r2, r0
 8000fb4:	d100      	bne.n	8000fb8 <__aeabi_dadd+0x218>
 8000fb6:	e18f      	b.n	80012d8 <__aeabi_dadd+0x538>
 8000fb8:	000a      	movs	r2, r1
 8000fba:	e7b8      	b.n	8000f2e <__aeabi_dadd+0x18e>
 8000fbc:	003d      	movs	r5, r7
 8000fbe:	444d      	add	r5, r9
 8000fc0:	454d      	cmp	r5, r9
 8000fc2:	4189      	sbcs	r1, r1
 8000fc4:	4463      	add	r3, ip
 8000fc6:	4698      	mov	r8, r3
 8000fc8:	4249      	negs	r1, r1
 8000fca:	4488      	add	r8, r1
 8000fcc:	4643      	mov	r3, r8
 8000fce:	2602      	movs	r6, #2
 8000fd0:	021b      	lsls	r3, r3, #8
 8000fd2:	d500      	bpl.n	8000fd6 <__aeabi_dadd+0x236>
 8000fd4:	e0eb      	b.n	80011ae <__aeabi_dadd+0x40e>
 8000fd6:	3e01      	subs	r6, #1
 8000fd8:	076b      	lsls	r3, r5, #29
 8000fda:	d000      	beq.n	8000fde <__aeabi_dadd+0x23e>
 8000fdc:	e75c      	b.n	8000e98 <__aeabi_dadd+0xf8>
 8000fde:	4643      	mov	r3, r8
 8000fe0:	08e9      	lsrs	r1, r5, #3
 8000fe2:	075a      	lsls	r2, r3, #29
 8000fe4:	4311      	orrs	r1, r2
 8000fe6:	0032      	movs	r2, r6
 8000fe8:	08db      	lsrs	r3, r3, #3
 8000fea:	484a      	ldr	r0, [pc, #296]	; (8001114 <__aeabi_dadd+0x374>)
 8000fec:	4282      	cmp	r2, r0
 8000fee:	d021      	beq.n	8001034 <__aeabi_dadd+0x294>
 8000ff0:	031b      	lsls	r3, r3, #12
 8000ff2:	0552      	lsls	r2, r2, #21
 8000ff4:	0b1b      	lsrs	r3, r3, #12
 8000ff6:	0d52      	lsrs	r2, r2, #21
 8000ff8:	e76c      	b.n	8000ed4 <__aeabi_dadd+0x134>
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	2100      	movs	r1, #0
 8000ffe:	e769      	b.n	8000ed4 <__aeabi_dadd+0x134>
 8001000:	002a      	movs	r2, r5
 8001002:	433a      	orrs	r2, r7
 8001004:	d069      	beq.n	80010da <__aeabi_dadd+0x33a>
 8001006:	464a      	mov	r2, r9
 8001008:	0758      	lsls	r0, r3, #29
 800100a:	08d1      	lsrs	r1, r2, #3
 800100c:	08da      	lsrs	r2, r3, #3
 800100e:	2380      	movs	r3, #128	; 0x80
 8001010:	031b      	lsls	r3, r3, #12
 8001012:	4308      	orrs	r0, r1
 8001014:	421a      	tst	r2, r3
 8001016:	d007      	beq.n	8001028 <__aeabi_dadd+0x288>
 8001018:	0029      	movs	r1, r5
 800101a:	08ed      	lsrs	r5, r5, #3
 800101c:	421d      	tst	r5, r3
 800101e:	d103      	bne.n	8001028 <__aeabi_dadd+0x288>
 8001020:	002a      	movs	r2, r5
 8001022:	08ff      	lsrs	r7, r7, #3
 8001024:	0748      	lsls	r0, r1, #29
 8001026:	4338      	orrs	r0, r7
 8001028:	0f43      	lsrs	r3, r0, #29
 800102a:	00c1      	lsls	r1, r0, #3
 800102c:	075b      	lsls	r3, r3, #29
 800102e:	08c9      	lsrs	r1, r1, #3
 8001030:	4319      	orrs	r1, r3
 8001032:	0013      	movs	r3, r2
 8001034:	000a      	movs	r2, r1
 8001036:	431a      	orrs	r2, r3
 8001038:	d100      	bne.n	800103c <__aeabi_dadd+0x29c>
 800103a:	e213      	b.n	8001464 <__aeabi_dadd+0x6c4>
 800103c:	2280      	movs	r2, #128	; 0x80
 800103e:	0312      	lsls	r2, r2, #12
 8001040:	4313      	orrs	r3, r2
 8001042:	031b      	lsls	r3, r3, #12
 8001044:	4a33      	ldr	r2, [pc, #204]	; (8001114 <__aeabi_dadd+0x374>)
 8001046:	0b1b      	lsrs	r3, r3, #12
 8001048:	e744      	b.n	8000ed4 <__aeabi_dadd+0x134>
 800104a:	2a00      	cmp	r2, #0
 800104c:	d04b      	beq.n	80010e6 <__aeabi_dadd+0x346>
 800104e:	1b8a      	subs	r2, r1, r6
 8001050:	2e00      	cmp	r6, #0
 8001052:	d100      	bne.n	8001056 <__aeabi_dadd+0x2b6>
 8001054:	e0e7      	b.n	8001226 <__aeabi_dadd+0x486>
 8001056:	482f      	ldr	r0, [pc, #188]	; (8001114 <__aeabi_dadd+0x374>)
 8001058:	4281      	cmp	r1, r0
 800105a:	d100      	bne.n	800105e <__aeabi_dadd+0x2be>
 800105c:	e195      	b.n	800138a <__aeabi_dadd+0x5ea>
 800105e:	2080      	movs	r0, #128	; 0x80
 8001060:	0400      	lsls	r0, r0, #16
 8001062:	4303      	orrs	r3, r0
 8001064:	2a38      	cmp	r2, #56	; 0x38
 8001066:	dd00      	ble.n	800106a <__aeabi_dadd+0x2ca>
 8001068:	e143      	b.n	80012f2 <__aeabi_dadd+0x552>
 800106a:	2a1f      	cmp	r2, #31
 800106c:	dd00      	ble.n	8001070 <__aeabi_dadd+0x2d0>
 800106e:	e1db      	b.n	8001428 <__aeabi_dadd+0x688>
 8001070:	2020      	movs	r0, #32
 8001072:	001d      	movs	r5, r3
 8001074:	464e      	mov	r6, r9
 8001076:	1a80      	subs	r0, r0, r2
 8001078:	4085      	lsls	r5, r0
 800107a:	40d6      	lsrs	r6, r2
 800107c:	4335      	orrs	r5, r6
 800107e:	464e      	mov	r6, r9
 8001080:	4086      	lsls	r6, r0
 8001082:	0030      	movs	r0, r6
 8001084:	40d3      	lsrs	r3, r2
 8001086:	1e46      	subs	r6, r0, #1
 8001088:	41b0      	sbcs	r0, r6
 800108a:	449c      	add	ip, r3
 800108c:	4305      	orrs	r5, r0
 800108e:	19ed      	adds	r5, r5, r7
 8001090:	42bd      	cmp	r5, r7
 8001092:	419b      	sbcs	r3, r3
 8001094:	425b      	negs	r3, r3
 8001096:	4463      	add	r3, ip
 8001098:	4698      	mov	r8, r3
 800109a:	000e      	movs	r6, r1
 800109c:	e07f      	b.n	800119e <__aeabi_dadd+0x3fe>
 800109e:	4a1e      	ldr	r2, [pc, #120]	; (8001118 <__aeabi_dadd+0x378>)
 80010a0:	1a76      	subs	r6, r6, r1
 80010a2:	4013      	ands	r3, r2
 80010a4:	4698      	mov	r8, r3
 80010a6:	e6f5      	b.n	8000e94 <__aeabi_dadd+0xf4>
 80010a8:	0028      	movs	r0, r5
 80010aa:	f001 fd43 	bl	8002b34 <__clzsi2>
 80010ae:	0001      	movs	r1, r0
 80010b0:	3118      	adds	r1, #24
 80010b2:	291f      	cmp	r1, #31
 80010b4:	dc00      	bgt.n	80010b8 <__aeabi_dadd+0x318>
 80010b6:	e6cf      	b.n	8000e58 <__aeabi_dadd+0xb8>
 80010b8:	002b      	movs	r3, r5
 80010ba:	3808      	subs	r0, #8
 80010bc:	4083      	lsls	r3, r0
 80010be:	2500      	movs	r5, #0
 80010c0:	e6d2      	b.n	8000e68 <__aeabi_dadd+0xc8>
 80010c2:	4662      	mov	r2, ip
 80010c4:	433a      	orrs	r2, r7
 80010c6:	0011      	movs	r1, r2
 80010c8:	1e4f      	subs	r7, r1, #1
 80010ca:	41b9      	sbcs	r1, r7
 80010cc:	e6ac      	b.n	8000e28 <__aeabi_dadd+0x88>
 80010ce:	4649      	mov	r1, r9
 80010d0:	0758      	lsls	r0, r3, #29
 80010d2:	08c9      	lsrs	r1, r1, #3
 80010d4:	4301      	orrs	r1, r0
 80010d6:	08db      	lsrs	r3, r3, #3
 80010d8:	e787      	b.n	8000fea <__aeabi_dadd+0x24a>
 80010da:	4649      	mov	r1, r9
 80010dc:	075a      	lsls	r2, r3, #29
 80010de:	08c9      	lsrs	r1, r1, #3
 80010e0:	4311      	orrs	r1, r2
 80010e2:	08db      	lsrs	r3, r3, #3
 80010e4:	e7a6      	b.n	8001034 <__aeabi_dadd+0x294>
 80010e6:	490d      	ldr	r1, [pc, #52]	; (800111c <__aeabi_dadd+0x37c>)
 80010e8:	1c70      	adds	r0, r6, #1
 80010ea:	4208      	tst	r0, r1
 80010ec:	d000      	beq.n	80010f0 <__aeabi_dadd+0x350>
 80010ee:	e0bb      	b.n	8001268 <__aeabi_dadd+0x4c8>
 80010f0:	2e00      	cmp	r6, #0
 80010f2:	d000      	beq.n	80010f6 <__aeabi_dadd+0x356>
 80010f4:	e114      	b.n	8001320 <__aeabi_dadd+0x580>
 80010f6:	4649      	mov	r1, r9
 80010f8:	4319      	orrs	r1, r3
 80010fa:	d100      	bne.n	80010fe <__aeabi_dadd+0x35e>
 80010fc:	e175      	b.n	80013ea <__aeabi_dadd+0x64a>
 80010fe:	0029      	movs	r1, r5
 8001100:	4339      	orrs	r1, r7
 8001102:	d000      	beq.n	8001106 <__aeabi_dadd+0x366>
 8001104:	e17e      	b.n	8001404 <__aeabi_dadd+0x664>
 8001106:	4649      	mov	r1, r9
 8001108:	0758      	lsls	r0, r3, #29
 800110a:	08c9      	lsrs	r1, r1, #3
 800110c:	4301      	orrs	r1, r0
 800110e:	08db      	lsrs	r3, r3, #3
 8001110:	e76e      	b.n	8000ff0 <__aeabi_dadd+0x250>
 8001112:	46c0      	nop			; (mov r8, r8)
 8001114:	000007ff 	.word	0x000007ff
 8001118:	ff7fffff 	.word	0xff7fffff
 800111c:	000007fe 	.word	0x000007fe
 8001120:	4649      	mov	r1, r9
 8001122:	1bcd      	subs	r5, r1, r7
 8001124:	4661      	mov	r1, ip
 8001126:	1a58      	subs	r0, r3, r1
 8001128:	45a9      	cmp	r9, r5
 800112a:	4189      	sbcs	r1, r1
 800112c:	4249      	negs	r1, r1
 800112e:	4688      	mov	r8, r1
 8001130:	0001      	movs	r1, r0
 8001132:	4640      	mov	r0, r8
 8001134:	1a09      	subs	r1, r1, r0
 8001136:	4688      	mov	r8, r1
 8001138:	0209      	lsls	r1, r1, #8
 800113a:	d500      	bpl.n	800113e <__aeabi_dadd+0x39e>
 800113c:	e0a6      	b.n	800128c <__aeabi_dadd+0x4ec>
 800113e:	4641      	mov	r1, r8
 8001140:	4329      	orrs	r1, r5
 8001142:	d000      	beq.n	8001146 <__aeabi_dadd+0x3a6>
 8001144:	e67f      	b.n	8000e46 <__aeabi_dadd+0xa6>
 8001146:	2300      	movs	r3, #0
 8001148:	2400      	movs	r4, #0
 800114a:	e751      	b.n	8000ff0 <__aeabi_dadd+0x250>
 800114c:	4cc7      	ldr	r4, [pc, #796]	; (800146c <__aeabi_dadd+0x6cc>)
 800114e:	42a1      	cmp	r1, r4
 8001150:	d100      	bne.n	8001154 <__aeabi_dadd+0x3b4>
 8001152:	e0c7      	b.n	80012e4 <__aeabi_dadd+0x544>
 8001154:	2480      	movs	r4, #128	; 0x80
 8001156:	0424      	lsls	r4, r4, #16
 8001158:	4323      	orrs	r3, r4
 800115a:	2a38      	cmp	r2, #56	; 0x38
 800115c:	dc54      	bgt.n	8001208 <__aeabi_dadd+0x468>
 800115e:	2a1f      	cmp	r2, #31
 8001160:	dd00      	ble.n	8001164 <__aeabi_dadd+0x3c4>
 8001162:	e0cc      	b.n	80012fe <__aeabi_dadd+0x55e>
 8001164:	2420      	movs	r4, #32
 8001166:	4648      	mov	r0, r9
 8001168:	1aa4      	subs	r4, r4, r2
 800116a:	001d      	movs	r5, r3
 800116c:	464e      	mov	r6, r9
 800116e:	40a0      	lsls	r0, r4
 8001170:	40d6      	lsrs	r6, r2
 8001172:	40a5      	lsls	r5, r4
 8001174:	0004      	movs	r4, r0
 8001176:	40d3      	lsrs	r3, r2
 8001178:	4662      	mov	r2, ip
 800117a:	4335      	orrs	r5, r6
 800117c:	1e66      	subs	r6, r4, #1
 800117e:	41b4      	sbcs	r4, r6
 8001180:	1ad3      	subs	r3, r2, r3
 8001182:	469c      	mov	ip, r3
 8001184:	4325      	orrs	r5, r4
 8001186:	e044      	b.n	8001212 <__aeabi_dadd+0x472>
 8001188:	4662      	mov	r2, ip
 800118a:	433a      	orrs	r2, r7
 800118c:	0015      	movs	r5, r2
 800118e:	1e6f      	subs	r7, r5, #1
 8001190:	41bd      	sbcs	r5, r7
 8001192:	444d      	add	r5, r9
 8001194:	454d      	cmp	r5, r9
 8001196:	4189      	sbcs	r1, r1
 8001198:	4249      	negs	r1, r1
 800119a:	4688      	mov	r8, r1
 800119c:	4498      	add	r8, r3
 800119e:	4643      	mov	r3, r8
 80011a0:	021b      	lsls	r3, r3, #8
 80011a2:	d400      	bmi.n	80011a6 <__aeabi_dadd+0x406>
 80011a4:	e718      	b.n	8000fd8 <__aeabi_dadd+0x238>
 80011a6:	4bb1      	ldr	r3, [pc, #708]	; (800146c <__aeabi_dadd+0x6cc>)
 80011a8:	3601      	adds	r6, #1
 80011aa:	429e      	cmp	r6, r3
 80011ac:	d049      	beq.n	8001242 <__aeabi_dadd+0x4a2>
 80011ae:	4642      	mov	r2, r8
 80011b0:	4baf      	ldr	r3, [pc, #700]	; (8001470 <__aeabi_dadd+0x6d0>)
 80011b2:	2101      	movs	r1, #1
 80011b4:	401a      	ands	r2, r3
 80011b6:	0013      	movs	r3, r2
 80011b8:	086a      	lsrs	r2, r5, #1
 80011ba:	400d      	ands	r5, r1
 80011bc:	4315      	orrs	r5, r2
 80011be:	07d9      	lsls	r1, r3, #31
 80011c0:	085b      	lsrs	r3, r3, #1
 80011c2:	4698      	mov	r8, r3
 80011c4:	430d      	orrs	r5, r1
 80011c6:	e665      	b.n	8000e94 <__aeabi_dadd+0xf4>
 80011c8:	0018      	movs	r0, r3
 80011ca:	3e1f      	subs	r6, #31
 80011cc:	40f0      	lsrs	r0, r6
 80011ce:	2a20      	cmp	r2, #32
 80011d0:	d003      	beq.n	80011da <__aeabi_dadd+0x43a>
 80011d2:	2140      	movs	r1, #64	; 0x40
 80011d4:	1a8a      	subs	r2, r1, r2
 80011d6:	4093      	lsls	r3, r2
 80011d8:	431d      	orrs	r5, r3
 80011da:	1e69      	subs	r1, r5, #1
 80011dc:	418d      	sbcs	r5, r1
 80011de:	2300      	movs	r3, #0
 80011e0:	2600      	movs	r6, #0
 80011e2:	4698      	mov	r8, r3
 80011e4:	4305      	orrs	r5, r0
 80011e6:	e6f7      	b.n	8000fd8 <__aeabi_dadd+0x238>
 80011e8:	0011      	movs	r1, r2
 80011ea:	4665      	mov	r5, ip
 80011ec:	3920      	subs	r1, #32
 80011ee:	40cd      	lsrs	r5, r1
 80011f0:	2a20      	cmp	r2, #32
 80011f2:	d004      	beq.n	80011fe <__aeabi_dadd+0x45e>
 80011f4:	2040      	movs	r0, #64	; 0x40
 80011f6:	4661      	mov	r1, ip
 80011f8:	1a82      	subs	r2, r0, r2
 80011fa:	4091      	lsls	r1, r2
 80011fc:	430f      	orrs	r7, r1
 80011fe:	0039      	movs	r1, r7
 8001200:	1e4f      	subs	r7, r1, #1
 8001202:	41b9      	sbcs	r1, r7
 8001204:	4329      	orrs	r1, r5
 8001206:	e60f      	b.n	8000e28 <__aeabi_dadd+0x88>
 8001208:	464a      	mov	r2, r9
 800120a:	4313      	orrs	r3, r2
 800120c:	001d      	movs	r5, r3
 800120e:	1e6b      	subs	r3, r5, #1
 8001210:	419d      	sbcs	r5, r3
 8001212:	1b7d      	subs	r5, r7, r5
 8001214:	42af      	cmp	r7, r5
 8001216:	419b      	sbcs	r3, r3
 8001218:	4662      	mov	r2, ip
 800121a:	425b      	negs	r3, r3
 800121c:	1ad3      	subs	r3, r2, r3
 800121e:	4698      	mov	r8, r3
 8001220:	4654      	mov	r4, sl
 8001222:	000e      	movs	r6, r1
 8001224:	e607      	b.n	8000e36 <__aeabi_dadd+0x96>
 8001226:	4648      	mov	r0, r9
 8001228:	4318      	orrs	r0, r3
 800122a:	d100      	bne.n	800122e <__aeabi_dadd+0x48e>
 800122c:	e0b3      	b.n	8001396 <__aeabi_dadd+0x5f6>
 800122e:	1e50      	subs	r0, r2, #1
 8001230:	2a01      	cmp	r2, #1
 8001232:	d100      	bne.n	8001236 <__aeabi_dadd+0x496>
 8001234:	e10d      	b.n	8001452 <__aeabi_dadd+0x6b2>
 8001236:	4d8d      	ldr	r5, [pc, #564]	; (800146c <__aeabi_dadd+0x6cc>)
 8001238:	42aa      	cmp	r2, r5
 800123a:	d100      	bne.n	800123e <__aeabi_dadd+0x49e>
 800123c:	e0a5      	b.n	800138a <__aeabi_dadd+0x5ea>
 800123e:	0002      	movs	r2, r0
 8001240:	e710      	b.n	8001064 <__aeabi_dadd+0x2c4>
 8001242:	0032      	movs	r2, r6
 8001244:	2300      	movs	r3, #0
 8001246:	2100      	movs	r1, #0
 8001248:	e644      	b.n	8000ed4 <__aeabi_dadd+0x134>
 800124a:	2120      	movs	r1, #32
 800124c:	0038      	movs	r0, r7
 800124e:	1a89      	subs	r1, r1, r2
 8001250:	4665      	mov	r5, ip
 8001252:	408f      	lsls	r7, r1
 8001254:	408d      	lsls	r5, r1
 8001256:	40d0      	lsrs	r0, r2
 8001258:	1e79      	subs	r1, r7, #1
 800125a:	418f      	sbcs	r7, r1
 800125c:	4305      	orrs	r5, r0
 800125e:	433d      	orrs	r5, r7
 8001260:	4667      	mov	r7, ip
 8001262:	40d7      	lsrs	r7, r2
 8001264:	19db      	adds	r3, r3, r7
 8001266:	e794      	b.n	8001192 <__aeabi_dadd+0x3f2>
 8001268:	4a80      	ldr	r2, [pc, #512]	; (800146c <__aeabi_dadd+0x6cc>)
 800126a:	4290      	cmp	r0, r2
 800126c:	d100      	bne.n	8001270 <__aeabi_dadd+0x4d0>
 800126e:	e0ec      	b.n	800144a <__aeabi_dadd+0x6aa>
 8001270:	0039      	movs	r1, r7
 8001272:	4449      	add	r1, r9
 8001274:	4549      	cmp	r1, r9
 8001276:	4192      	sbcs	r2, r2
 8001278:	4463      	add	r3, ip
 800127a:	4252      	negs	r2, r2
 800127c:	189b      	adds	r3, r3, r2
 800127e:	07dd      	lsls	r5, r3, #31
 8001280:	0849      	lsrs	r1, r1, #1
 8001282:	085b      	lsrs	r3, r3, #1
 8001284:	4698      	mov	r8, r3
 8001286:	0006      	movs	r6, r0
 8001288:	430d      	orrs	r5, r1
 800128a:	e6a5      	b.n	8000fd8 <__aeabi_dadd+0x238>
 800128c:	464a      	mov	r2, r9
 800128e:	1abd      	subs	r5, r7, r2
 8001290:	42af      	cmp	r7, r5
 8001292:	4189      	sbcs	r1, r1
 8001294:	4662      	mov	r2, ip
 8001296:	4249      	negs	r1, r1
 8001298:	1ad3      	subs	r3, r2, r3
 800129a:	1a5b      	subs	r3, r3, r1
 800129c:	4698      	mov	r8, r3
 800129e:	4654      	mov	r4, sl
 80012a0:	e5d1      	b.n	8000e46 <__aeabi_dadd+0xa6>
 80012a2:	076c      	lsls	r4, r5, #29
 80012a4:	08f9      	lsrs	r1, r7, #3
 80012a6:	4321      	orrs	r1, r4
 80012a8:	08eb      	lsrs	r3, r5, #3
 80012aa:	0004      	movs	r4, r0
 80012ac:	e69d      	b.n	8000fea <__aeabi_dadd+0x24a>
 80012ae:	464a      	mov	r2, r9
 80012b0:	431a      	orrs	r2, r3
 80012b2:	d175      	bne.n	80013a0 <__aeabi_dadd+0x600>
 80012b4:	4661      	mov	r1, ip
 80012b6:	4339      	orrs	r1, r7
 80012b8:	d114      	bne.n	80012e4 <__aeabi_dadd+0x544>
 80012ba:	2380      	movs	r3, #128	; 0x80
 80012bc:	2400      	movs	r4, #0
 80012be:	031b      	lsls	r3, r3, #12
 80012c0:	e6bc      	b.n	800103c <__aeabi_dadd+0x29c>
 80012c2:	464a      	mov	r2, r9
 80012c4:	1bd5      	subs	r5, r2, r7
 80012c6:	45a9      	cmp	r9, r5
 80012c8:	4189      	sbcs	r1, r1
 80012ca:	4662      	mov	r2, ip
 80012cc:	4249      	negs	r1, r1
 80012ce:	1a9b      	subs	r3, r3, r2
 80012d0:	1a5b      	subs	r3, r3, r1
 80012d2:	4698      	mov	r8, r3
 80012d4:	2601      	movs	r6, #1
 80012d6:	e5ae      	b.n	8000e36 <__aeabi_dadd+0x96>
 80012d8:	464a      	mov	r2, r9
 80012da:	08d1      	lsrs	r1, r2, #3
 80012dc:	075a      	lsls	r2, r3, #29
 80012de:	4311      	orrs	r1, r2
 80012e0:	08db      	lsrs	r3, r3, #3
 80012e2:	e6a7      	b.n	8001034 <__aeabi_dadd+0x294>
 80012e4:	4663      	mov	r3, ip
 80012e6:	08f9      	lsrs	r1, r7, #3
 80012e8:	075a      	lsls	r2, r3, #29
 80012ea:	4654      	mov	r4, sl
 80012ec:	4311      	orrs	r1, r2
 80012ee:	08db      	lsrs	r3, r3, #3
 80012f0:	e6a0      	b.n	8001034 <__aeabi_dadd+0x294>
 80012f2:	464a      	mov	r2, r9
 80012f4:	4313      	orrs	r3, r2
 80012f6:	001d      	movs	r5, r3
 80012f8:	1e6b      	subs	r3, r5, #1
 80012fa:	419d      	sbcs	r5, r3
 80012fc:	e6c7      	b.n	800108e <__aeabi_dadd+0x2ee>
 80012fe:	0014      	movs	r4, r2
 8001300:	001e      	movs	r6, r3
 8001302:	3c20      	subs	r4, #32
 8001304:	40e6      	lsrs	r6, r4
 8001306:	2a20      	cmp	r2, #32
 8001308:	d005      	beq.n	8001316 <__aeabi_dadd+0x576>
 800130a:	2440      	movs	r4, #64	; 0x40
 800130c:	1aa2      	subs	r2, r4, r2
 800130e:	4093      	lsls	r3, r2
 8001310:	464a      	mov	r2, r9
 8001312:	431a      	orrs	r2, r3
 8001314:	4691      	mov	r9, r2
 8001316:	464d      	mov	r5, r9
 8001318:	1e6b      	subs	r3, r5, #1
 800131a:	419d      	sbcs	r5, r3
 800131c:	4335      	orrs	r5, r6
 800131e:	e778      	b.n	8001212 <__aeabi_dadd+0x472>
 8001320:	464a      	mov	r2, r9
 8001322:	431a      	orrs	r2, r3
 8001324:	d000      	beq.n	8001328 <__aeabi_dadd+0x588>
 8001326:	e66b      	b.n	8001000 <__aeabi_dadd+0x260>
 8001328:	076b      	lsls	r3, r5, #29
 800132a:	08f9      	lsrs	r1, r7, #3
 800132c:	4319      	orrs	r1, r3
 800132e:	08eb      	lsrs	r3, r5, #3
 8001330:	e680      	b.n	8001034 <__aeabi_dadd+0x294>
 8001332:	4661      	mov	r1, ip
 8001334:	4339      	orrs	r1, r7
 8001336:	d054      	beq.n	80013e2 <__aeabi_dadd+0x642>
 8001338:	4663      	mov	r3, ip
 800133a:	08f9      	lsrs	r1, r7, #3
 800133c:	075c      	lsls	r4, r3, #29
 800133e:	4321      	orrs	r1, r4
 8001340:	08db      	lsrs	r3, r3, #3
 8001342:	0004      	movs	r4, r0
 8001344:	e654      	b.n	8000ff0 <__aeabi_dadd+0x250>
 8001346:	464a      	mov	r2, r9
 8001348:	1abd      	subs	r5, r7, r2
 800134a:	42af      	cmp	r7, r5
 800134c:	4189      	sbcs	r1, r1
 800134e:	4662      	mov	r2, ip
 8001350:	4249      	negs	r1, r1
 8001352:	1ad3      	subs	r3, r2, r3
 8001354:	1a5b      	subs	r3, r3, r1
 8001356:	4698      	mov	r8, r3
 8001358:	0004      	movs	r4, r0
 800135a:	2601      	movs	r6, #1
 800135c:	e56b      	b.n	8000e36 <__aeabi_dadd+0x96>
 800135e:	464a      	mov	r2, r9
 8001360:	1bd5      	subs	r5, r2, r7
 8001362:	45a9      	cmp	r9, r5
 8001364:	4189      	sbcs	r1, r1
 8001366:	4662      	mov	r2, ip
 8001368:	4249      	negs	r1, r1
 800136a:	1a9a      	subs	r2, r3, r2
 800136c:	1a52      	subs	r2, r2, r1
 800136e:	4690      	mov	r8, r2
 8001370:	0212      	lsls	r2, r2, #8
 8001372:	d532      	bpl.n	80013da <__aeabi_dadd+0x63a>
 8001374:	464a      	mov	r2, r9
 8001376:	1abd      	subs	r5, r7, r2
 8001378:	42af      	cmp	r7, r5
 800137a:	4189      	sbcs	r1, r1
 800137c:	4662      	mov	r2, ip
 800137e:	4249      	negs	r1, r1
 8001380:	1ad3      	subs	r3, r2, r3
 8001382:	1a5b      	subs	r3, r3, r1
 8001384:	4698      	mov	r8, r3
 8001386:	0004      	movs	r4, r0
 8001388:	e584      	b.n	8000e94 <__aeabi_dadd+0xf4>
 800138a:	4663      	mov	r3, ip
 800138c:	08f9      	lsrs	r1, r7, #3
 800138e:	075a      	lsls	r2, r3, #29
 8001390:	4311      	orrs	r1, r2
 8001392:	08db      	lsrs	r3, r3, #3
 8001394:	e64e      	b.n	8001034 <__aeabi_dadd+0x294>
 8001396:	08f9      	lsrs	r1, r7, #3
 8001398:	0768      	lsls	r0, r5, #29
 800139a:	4301      	orrs	r1, r0
 800139c:	08eb      	lsrs	r3, r5, #3
 800139e:	e624      	b.n	8000fea <__aeabi_dadd+0x24a>
 80013a0:	4662      	mov	r2, ip
 80013a2:	433a      	orrs	r2, r7
 80013a4:	d100      	bne.n	80013a8 <__aeabi_dadd+0x608>
 80013a6:	e698      	b.n	80010da <__aeabi_dadd+0x33a>
 80013a8:	464a      	mov	r2, r9
 80013aa:	08d1      	lsrs	r1, r2, #3
 80013ac:	075a      	lsls	r2, r3, #29
 80013ae:	4311      	orrs	r1, r2
 80013b0:	08da      	lsrs	r2, r3, #3
 80013b2:	2380      	movs	r3, #128	; 0x80
 80013b4:	031b      	lsls	r3, r3, #12
 80013b6:	421a      	tst	r2, r3
 80013b8:	d008      	beq.n	80013cc <__aeabi_dadd+0x62c>
 80013ba:	4660      	mov	r0, ip
 80013bc:	08c5      	lsrs	r5, r0, #3
 80013be:	421d      	tst	r5, r3
 80013c0:	d104      	bne.n	80013cc <__aeabi_dadd+0x62c>
 80013c2:	4654      	mov	r4, sl
 80013c4:	002a      	movs	r2, r5
 80013c6:	08f9      	lsrs	r1, r7, #3
 80013c8:	0743      	lsls	r3, r0, #29
 80013ca:	4319      	orrs	r1, r3
 80013cc:	0f4b      	lsrs	r3, r1, #29
 80013ce:	00c9      	lsls	r1, r1, #3
 80013d0:	075b      	lsls	r3, r3, #29
 80013d2:	08c9      	lsrs	r1, r1, #3
 80013d4:	4319      	orrs	r1, r3
 80013d6:	0013      	movs	r3, r2
 80013d8:	e62c      	b.n	8001034 <__aeabi_dadd+0x294>
 80013da:	4641      	mov	r1, r8
 80013dc:	4329      	orrs	r1, r5
 80013de:	d000      	beq.n	80013e2 <__aeabi_dadd+0x642>
 80013e0:	e5fa      	b.n	8000fd8 <__aeabi_dadd+0x238>
 80013e2:	2300      	movs	r3, #0
 80013e4:	000a      	movs	r2, r1
 80013e6:	2400      	movs	r4, #0
 80013e8:	e602      	b.n	8000ff0 <__aeabi_dadd+0x250>
 80013ea:	076b      	lsls	r3, r5, #29
 80013ec:	08f9      	lsrs	r1, r7, #3
 80013ee:	4319      	orrs	r1, r3
 80013f0:	08eb      	lsrs	r3, r5, #3
 80013f2:	e5fd      	b.n	8000ff0 <__aeabi_dadd+0x250>
 80013f4:	4663      	mov	r3, ip
 80013f6:	08f9      	lsrs	r1, r7, #3
 80013f8:	075b      	lsls	r3, r3, #29
 80013fa:	4319      	orrs	r1, r3
 80013fc:	4663      	mov	r3, ip
 80013fe:	0004      	movs	r4, r0
 8001400:	08db      	lsrs	r3, r3, #3
 8001402:	e617      	b.n	8001034 <__aeabi_dadd+0x294>
 8001404:	003d      	movs	r5, r7
 8001406:	444d      	add	r5, r9
 8001408:	4463      	add	r3, ip
 800140a:	454d      	cmp	r5, r9
 800140c:	4189      	sbcs	r1, r1
 800140e:	4698      	mov	r8, r3
 8001410:	4249      	negs	r1, r1
 8001412:	4488      	add	r8, r1
 8001414:	4643      	mov	r3, r8
 8001416:	021b      	lsls	r3, r3, #8
 8001418:	d400      	bmi.n	800141c <__aeabi_dadd+0x67c>
 800141a:	e5dd      	b.n	8000fd8 <__aeabi_dadd+0x238>
 800141c:	4642      	mov	r2, r8
 800141e:	4b14      	ldr	r3, [pc, #80]	; (8001470 <__aeabi_dadd+0x6d0>)
 8001420:	2601      	movs	r6, #1
 8001422:	401a      	ands	r2, r3
 8001424:	4690      	mov	r8, r2
 8001426:	e5d7      	b.n	8000fd8 <__aeabi_dadd+0x238>
 8001428:	0010      	movs	r0, r2
 800142a:	001e      	movs	r6, r3
 800142c:	3820      	subs	r0, #32
 800142e:	40c6      	lsrs	r6, r0
 8001430:	2a20      	cmp	r2, #32
 8001432:	d005      	beq.n	8001440 <__aeabi_dadd+0x6a0>
 8001434:	2040      	movs	r0, #64	; 0x40
 8001436:	1a82      	subs	r2, r0, r2
 8001438:	4093      	lsls	r3, r2
 800143a:	464a      	mov	r2, r9
 800143c:	431a      	orrs	r2, r3
 800143e:	4691      	mov	r9, r2
 8001440:	464d      	mov	r5, r9
 8001442:	1e6b      	subs	r3, r5, #1
 8001444:	419d      	sbcs	r5, r3
 8001446:	4335      	orrs	r5, r6
 8001448:	e621      	b.n	800108e <__aeabi_dadd+0x2ee>
 800144a:	0002      	movs	r2, r0
 800144c:	2300      	movs	r3, #0
 800144e:	2100      	movs	r1, #0
 8001450:	e540      	b.n	8000ed4 <__aeabi_dadd+0x134>
 8001452:	464a      	mov	r2, r9
 8001454:	19d5      	adds	r5, r2, r7
 8001456:	42bd      	cmp	r5, r7
 8001458:	4189      	sbcs	r1, r1
 800145a:	4463      	add	r3, ip
 800145c:	4698      	mov	r8, r3
 800145e:	4249      	negs	r1, r1
 8001460:	4488      	add	r8, r1
 8001462:	e5b3      	b.n	8000fcc <__aeabi_dadd+0x22c>
 8001464:	2100      	movs	r1, #0
 8001466:	4a01      	ldr	r2, [pc, #4]	; (800146c <__aeabi_dadd+0x6cc>)
 8001468:	000b      	movs	r3, r1
 800146a:	e533      	b.n	8000ed4 <__aeabi_dadd+0x134>
 800146c:	000007ff 	.word	0x000007ff
 8001470:	ff7fffff 	.word	0xff7fffff

08001474 <__aeabi_ddiv>:
 8001474:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001476:	4657      	mov	r7, sl
 8001478:	464e      	mov	r6, r9
 800147a:	4645      	mov	r5, r8
 800147c:	46de      	mov	lr, fp
 800147e:	b5e0      	push	{r5, r6, r7, lr}
 8001480:	4681      	mov	r9, r0
 8001482:	0005      	movs	r5, r0
 8001484:	030c      	lsls	r4, r1, #12
 8001486:	0048      	lsls	r0, r1, #1
 8001488:	4692      	mov	sl, r2
 800148a:	001f      	movs	r7, r3
 800148c:	b085      	sub	sp, #20
 800148e:	0b24      	lsrs	r4, r4, #12
 8001490:	0d40      	lsrs	r0, r0, #21
 8001492:	0fce      	lsrs	r6, r1, #31
 8001494:	2800      	cmp	r0, #0
 8001496:	d059      	beq.n	800154c <__aeabi_ddiv+0xd8>
 8001498:	4b87      	ldr	r3, [pc, #540]	; (80016b8 <__aeabi_ddiv+0x244>)
 800149a:	4298      	cmp	r0, r3
 800149c:	d100      	bne.n	80014a0 <__aeabi_ddiv+0x2c>
 800149e:	e098      	b.n	80015d2 <__aeabi_ddiv+0x15e>
 80014a0:	0f6b      	lsrs	r3, r5, #29
 80014a2:	00e4      	lsls	r4, r4, #3
 80014a4:	431c      	orrs	r4, r3
 80014a6:	2380      	movs	r3, #128	; 0x80
 80014a8:	041b      	lsls	r3, r3, #16
 80014aa:	4323      	orrs	r3, r4
 80014ac:	4698      	mov	r8, r3
 80014ae:	4b83      	ldr	r3, [pc, #524]	; (80016bc <__aeabi_ddiv+0x248>)
 80014b0:	00ed      	lsls	r5, r5, #3
 80014b2:	469b      	mov	fp, r3
 80014b4:	2300      	movs	r3, #0
 80014b6:	4699      	mov	r9, r3
 80014b8:	4483      	add	fp, r0
 80014ba:	9300      	str	r3, [sp, #0]
 80014bc:	033c      	lsls	r4, r7, #12
 80014be:	007b      	lsls	r3, r7, #1
 80014c0:	4650      	mov	r0, sl
 80014c2:	0b24      	lsrs	r4, r4, #12
 80014c4:	0d5b      	lsrs	r3, r3, #21
 80014c6:	0fff      	lsrs	r7, r7, #31
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d067      	beq.n	800159c <__aeabi_ddiv+0x128>
 80014cc:	4a7a      	ldr	r2, [pc, #488]	; (80016b8 <__aeabi_ddiv+0x244>)
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d018      	beq.n	8001504 <__aeabi_ddiv+0x90>
 80014d2:	497a      	ldr	r1, [pc, #488]	; (80016bc <__aeabi_ddiv+0x248>)
 80014d4:	0f42      	lsrs	r2, r0, #29
 80014d6:	468c      	mov	ip, r1
 80014d8:	00e4      	lsls	r4, r4, #3
 80014da:	4659      	mov	r1, fp
 80014dc:	4314      	orrs	r4, r2
 80014de:	2280      	movs	r2, #128	; 0x80
 80014e0:	4463      	add	r3, ip
 80014e2:	0412      	lsls	r2, r2, #16
 80014e4:	1acb      	subs	r3, r1, r3
 80014e6:	4314      	orrs	r4, r2
 80014e8:	469b      	mov	fp, r3
 80014ea:	00c2      	lsls	r2, r0, #3
 80014ec:	2000      	movs	r0, #0
 80014ee:	0033      	movs	r3, r6
 80014f0:	407b      	eors	r3, r7
 80014f2:	469a      	mov	sl, r3
 80014f4:	464b      	mov	r3, r9
 80014f6:	2b0f      	cmp	r3, #15
 80014f8:	d900      	bls.n	80014fc <__aeabi_ddiv+0x88>
 80014fa:	e0ef      	b.n	80016dc <__aeabi_ddiv+0x268>
 80014fc:	4970      	ldr	r1, [pc, #448]	; (80016c0 <__aeabi_ddiv+0x24c>)
 80014fe:	009b      	lsls	r3, r3, #2
 8001500:	58cb      	ldr	r3, [r1, r3]
 8001502:	469f      	mov	pc, r3
 8001504:	4b6f      	ldr	r3, [pc, #444]	; (80016c4 <__aeabi_ddiv+0x250>)
 8001506:	4652      	mov	r2, sl
 8001508:	469c      	mov	ip, r3
 800150a:	4322      	orrs	r2, r4
 800150c:	44e3      	add	fp, ip
 800150e:	2a00      	cmp	r2, #0
 8001510:	d000      	beq.n	8001514 <__aeabi_ddiv+0xa0>
 8001512:	e095      	b.n	8001640 <__aeabi_ddiv+0x1cc>
 8001514:	4649      	mov	r1, r9
 8001516:	2302      	movs	r3, #2
 8001518:	4319      	orrs	r1, r3
 800151a:	4689      	mov	r9, r1
 800151c:	2400      	movs	r4, #0
 800151e:	2002      	movs	r0, #2
 8001520:	e7e5      	b.n	80014ee <__aeabi_ddiv+0x7a>
 8001522:	2300      	movs	r3, #0
 8001524:	2400      	movs	r4, #0
 8001526:	2500      	movs	r5, #0
 8001528:	4652      	mov	r2, sl
 800152a:	051b      	lsls	r3, r3, #20
 800152c:	4323      	orrs	r3, r4
 800152e:	07d2      	lsls	r2, r2, #31
 8001530:	4313      	orrs	r3, r2
 8001532:	0028      	movs	r0, r5
 8001534:	0019      	movs	r1, r3
 8001536:	b005      	add	sp, #20
 8001538:	bcf0      	pop	{r4, r5, r6, r7}
 800153a:	46bb      	mov	fp, r7
 800153c:	46b2      	mov	sl, r6
 800153e:	46a9      	mov	r9, r5
 8001540:	46a0      	mov	r8, r4
 8001542:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001544:	2400      	movs	r4, #0
 8001546:	2500      	movs	r5, #0
 8001548:	4b5b      	ldr	r3, [pc, #364]	; (80016b8 <__aeabi_ddiv+0x244>)
 800154a:	e7ed      	b.n	8001528 <__aeabi_ddiv+0xb4>
 800154c:	464b      	mov	r3, r9
 800154e:	4323      	orrs	r3, r4
 8001550:	4698      	mov	r8, r3
 8001552:	d100      	bne.n	8001556 <__aeabi_ddiv+0xe2>
 8001554:	e089      	b.n	800166a <__aeabi_ddiv+0x1f6>
 8001556:	2c00      	cmp	r4, #0
 8001558:	d100      	bne.n	800155c <__aeabi_ddiv+0xe8>
 800155a:	e1e0      	b.n	800191e <__aeabi_ddiv+0x4aa>
 800155c:	0020      	movs	r0, r4
 800155e:	f001 fae9 	bl	8002b34 <__clzsi2>
 8001562:	0001      	movs	r1, r0
 8001564:	0002      	movs	r2, r0
 8001566:	390b      	subs	r1, #11
 8001568:	231d      	movs	r3, #29
 800156a:	1a5b      	subs	r3, r3, r1
 800156c:	4649      	mov	r1, r9
 800156e:	0010      	movs	r0, r2
 8001570:	40d9      	lsrs	r1, r3
 8001572:	3808      	subs	r0, #8
 8001574:	4084      	lsls	r4, r0
 8001576:	000b      	movs	r3, r1
 8001578:	464d      	mov	r5, r9
 800157a:	4323      	orrs	r3, r4
 800157c:	4698      	mov	r8, r3
 800157e:	4085      	lsls	r5, r0
 8001580:	4851      	ldr	r0, [pc, #324]	; (80016c8 <__aeabi_ddiv+0x254>)
 8001582:	033c      	lsls	r4, r7, #12
 8001584:	1a83      	subs	r3, r0, r2
 8001586:	469b      	mov	fp, r3
 8001588:	2300      	movs	r3, #0
 800158a:	4699      	mov	r9, r3
 800158c:	9300      	str	r3, [sp, #0]
 800158e:	007b      	lsls	r3, r7, #1
 8001590:	4650      	mov	r0, sl
 8001592:	0b24      	lsrs	r4, r4, #12
 8001594:	0d5b      	lsrs	r3, r3, #21
 8001596:	0fff      	lsrs	r7, r7, #31
 8001598:	2b00      	cmp	r3, #0
 800159a:	d197      	bne.n	80014cc <__aeabi_ddiv+0x58>
 800159c:	4652      	mov	r2, sl
 800159e:	4322      	orrs	r2, r4
 80015a0:	d055      	beq.n	800164e <__aeabi_ddiv+0x1da>
 80015a2:	2c00      	cmp	r4, #0
 80015a4:	d100      	bne.n	80015a8 <__aeabi_ddiv+0x134>
 80015a6:	e1ca      	b.n	800193e <__aeabi_ddiv+0x4ca>
 80015a8:	0020      	movs	r0, r4
 80015aa:	f001 fac3 	bl	8002b34 <__clzsi2>
 80015ae:	0002      	movs	r2, r0
 80015b0:	3a0b      	subs	r2, #11
 80015b2:	231d      	movs	r3, #29
 80015b4:	0001      	movs	r1, r0
 80015b6:	1a9b      	subs	r3, r3, r2
 80015b8:	4652      	mov	r2, sl
 80015ba:	3908      	subs	r1, #8
 80015bc:	40da      	lsrs	r2, r3
 80015be:	408c      	lsls	r4, r1
 80015c0:	4314      	orrs	r4, r2
 80015c2:	4652      	mov	r2, sl
 80015c4:	408a      	lsls	r2, r1
 80015c6:	4b41      	ldr	r3, [pc, #260]	; (80016cc <__aeabi_ddiv+0x258>)
 80015c8:	4458      	add	r0, fp
 80015ca:	469b      	mov	fp, r3
 80015cc:	4483      	add	fp, r0
 80015ce:	2000      	movs	r0, #0
 80015d0:	e78d      	b.n	80014ee <__aeabi_ddiv+0x7a>
 80015d2:	464b      	mov	r3, r9
 80015d4:	4323      	orrs	r3, r4
 80015d6:	4698      	mov	r8, r3
 80015d8:	d140      	bne.n	800165c <__aeabi_ddiv+0x1e8>
 80015da:	2308      	movs	r3, #8
 80015dc:	4699      	mov	r9, r3
 80015de:	3b06      	subs	r3, #6
 80015e0:	2500      	movs	r5, #0
 80015e2:	4683      	mov	fp, r0
 80015e4:	9300      	str	r3, [sp, #0]
 80015e6:	e769      	b.n	80014bc <__aeabi_ddiv+0x48>
 80015e8:	46b2      	mov	sl, r6
 80015ea:	9b00      	ldr	r3, [sp, #0]
 80015ec:	2b02      	cmp	r3, #2
 80015ee:	d0a9      	beq.n	8001544 <__aeabi_ddiv+0xd0>
 80015f0:	2b03      	cmp	r3, #3
 80015f2:	d100      	bne.n	80015f6 <__aeabi_ddiv+0x182>
 80015f4:	e211      	b.n	8001a1a <__aeabi_ddiv+0x5a6>
 80015f6:	2b01      	cmp	r3, #1
 80015f8:	d093      	beq.n	8001522 <__aeabi_ddiv+0xae>
 80015fa:	4a35      	ldr	r2, [pc, #212]	; (80016d0 <__aeabi_ddiv+0x25c>)
 80015fc:	445a      	add	r2, fp
 80015fe:	2a00      	cmp	r2, #0
 8001600:	dc00      	bgt.n	8001604 <__aeabi_ddiv+0x190>
 8001602:	e13c      	b.n	800187e <__aeabi_ddiv+0x40a>
 8001604:	076b      	lsls	r3, r5, #29
 8001606:	d000      	beq.n	800160a <__aeabi_ddiv+0x196>
 8001608:	e1a7      	b.n	800195a <__aeabi_ddiv+0x4e6>
 800160a:	08ed      	lsrs	r5, r5, #3
 800160c:	4643      	mov	r3, r8
 800160e:	01db      	lsls	r3, r3, #7
 8001610:	d506      	bpl.n	8001620 <__aeabi_ddiv+0x1ac>
 8001612:	4642      	mov	r2, r8
 8001614:	4b2f      	ldr	r3, [pc, #188]	; (80016d4 <__aeabi_ddiv+0x260>)
 8001616:	401a      	ands	r2, r3
 8001618:	4690      	mov	r8, r2
 800161a:	2280      	movs	r2, #128	; 0x80
 800161c:	00d2      	lsls	r2, r2, #3
 800161e:	445a      	add	r2, fp
 8001620:	4b2d      	ldr	r3, [pc, #180]	; (80016d8 <__aeabi_ddiv+0x264>)
 8001622:	429a      	cmp	r2, r3
 8001624:	dc8e      	bgt.n	8001544 <__aeabi_ddiv+0xd0>
 8001626:	4643      	mov	r3, r8
 8001628:	0552      	lsls	r2, r2, #21
 800162a:	0758      	lsls	r0, r3, #29
 800162c:	025c      	lsls	r4, r3, #9
 800162e:	4305      	orrs	r5, r0
 8001630:	0b24      	lsrs	r4, r4, #12
 8001632:	0d53      	lsrs	r3, r2, #21
 8001634:	e778      	b.n	8001528 <__aeabi_ddiv+0xb4>
 8001636:	46ba      	mov	sl, r7
 8001638:	46a0      	mov	r8, r4
 800163a:	0015      	movs	r5, r2
 800163c:	9000      	str	r0, [sp, #0]
 800163e:	e7d4      	b.n	80015ea <__aeabi_ddiv+0x176>
 8001640:	464a      	mov	r2, r9
 8001642:	2303      	movs	r3, #3
 8001644:	431a      	orrs	r2, r3
 8001646:	4691      	mov	r9, r2
 8001648:	2003      	movs	r0, #3
 800164a:	4652      	mov	r2, sl
 800164c:	e74f      	b.n	80014ee <__aeabi_ddiv+0x7a>
 800164e:	4649      	mov	r1, r9
 8001650:	2301      	movs	r3, #1
 8001652:	4319      	orrs	r1, r3
 8001654:	4689      	mov	r9, r1
 8001656:	2400      	movs	r4, #0
 8001658:	2001      	movs	r0, #1
 800165a:	e748      	b.n	80014ee <__aeabi_ddiv+0x7a>
 800165c:	230c      	movs	r3, #12
 800165e:	4699      	mov	r9, r3
 8001660:	3b09      	subs	r3, #9
 8001662:	46a0      	mov	r8, r4
 8001664:	4683      	mov	fp, r0
 8001666:	9300      	str	r3, [sp, #0]
 8001668:	e728      	b.n	80014bc <__aeabi_ddiv+0x48>
 800166a:	2304      	movs	r3, #4
 800166c:	4699      	mov	r9, r3
 800166e:	2300      	movs	r3, #0
 8001670:	469b      	mov	fp, r3
 8001672:	3301      	adds	r3, #1
 8001674:	2500      	movs	r5, #0
 8001676:	9300      	str	r3, [sp, #0]
 8001678:	e720      	b.n	80014bc <__aeabi_ddiv+0x48>
 800167a:	2300      	movs	r3, #0
 800167c:	2480      	movs	r4, #128	; 0x80
 800167e:	469a      	mov	sl, r3
 8001680:	2500      	movs	r5, #0
 8001682:	4b0d      	ldr	r3, [pc, #52]	; (80016b8 <__aeabi_ddiv+0x244>)
 8001684:	0324      	lsls	r4, r4, #12
 8001686:	e74f      	b.n	8001528 <__aeabi_ddiv+0xb4>
 8001688:	2380      	movs	r3, #128	; 0x80
 800168a:	4641      	mov	r1, r8
 800168c:	031b      	lsls	r3, r3, #12
 800168e:	4219      	tst	r1, r3
 8001690:	d008      	beq.n	80016a4 <__aeabi_ddiv+0x230>
 8001692:	421c      	tst	r4, r3
 8001694:	d106      	bne.n	80016a4 <__aeabi_ddiv+0x230>
 8001696:	431c      	orrs	r4, r3
 8001698:	0324      	lsls	r4, r4, #12
 800169a:	46ba      	mov	sl, r7
 800169c:	0015      	movs	r5, r2
 800169e:	4b06      	ldr	r3, [pc, #24]	; (80016b8 <__aeabi_ddiv+0x244>)
 80016a0:	0b24      	lsrs	r4, r4, #12
 80016a2:	e741      	b.n	8001528 <__aeabi_ddiv+0xb4>
 80016a4:	2480      	movs	r4, #128	; 0x80
 80016a6:	4643      	mov	r3, r8
 80016a8:	0324      	lsls	r4, r4, #12
 80016aa:	431c      	orrs	r4, r3
 80016ac:	0324      	lsls	r4, r4, #12
 80016ae:	46b2      	mov	sl, r6
 80016b0:	4b01      	ldr	r3, [pc, #4]	; (80016b8 <__aeabi_ddiv+0x244>)
 80016b2:	0b24      	lsrs	r4, r4, #12
 80016b4:	e738      	b.n	8001528 <__aeabi_ddiv+0xb4>
 80016b6:	46c0      	nop			; (mov r8, r8)
 80016b8:	000007ff 	.word	0x000007ff
 80016bc:	fffffc01 	.word	0xfffffc01
 80016c0:	08019ad0 	.word	0x08019ad0
 80016c4:	fffff801 	.word	0xfffff801
 80016c8:	fffffc0d 	.word	0xfffffc0d
 80016cc:	000003f3 	.word	0x000003f3
 80016d0:	000003ff 	.word	0x000003ff
 80016d4:	feffffff 	.word	0xfeffffff
 80016d8:	000007fe 	.word	0x000007fe
 80016dc:	4544      	cmp	r4, r8
 80016de:	d200      	bcs.n	80016e2 <__aeabi_ddiv+0x26e>
 80016e0:	e116      	b.n	8001910 <__aeabi_ddiv+0x49c>
 80016e2:	d100      	bne.n	80016e6 <__aeabi_ddiv+0x272>
 80016e4:	e111      	b.n	800190a <__aeabi_ddiv+0x496>
 80016e6:	2301      	movs	r3, #1
 80016e8:	425b      	negs	r3, r3
 80016ea:	469c      	mov	ip, r3
 80016ec:	002e      	movs	r6, r5
 80016ee:	4640      	mov	r0, r8
 80016f0:	2500      	movs	r5, #0
 80016f2:	44e3      	add	fp, ip
 80016f4:	0223      	lsls	r3, r4, #8
 80016f6:	0e14      	lsrs	r4, r2, #24
 80016f8:	431c      	orrs	r4, r3
 80016fa:	0c1b      	lsrs	r3, r3, #16
 80016fc:	4699      	mov	r9, r3
 80016fe:	0423      	lsls	r3, r4, #16
 8001700:	0c1f      	lsrs	r7, r3, #16
 8001702:	0212      	lsls	r2, r2, #8
 8001704:	4649      	mov	r1, r9
 8001706:	9200      	str	r2, [sp, #0]
 8001708:	9701      	str	r7, [sp, #4]
 800170a:	f7fe fda7 	bl	800025c <__aeabi_uidivmod>
 800170e:	0002      	movs	r2, r0
 8001710:	437a      	muls	r2, r7
 8001712:	040b      	lsls	r3, r1, #16
 8001714:	0c31      	lsrs	r1, r6, #16
 8001716:	4680      	mov	r8, r0
 8001718:	4319      	orrs	r1, r3
 800171a:	428a      	cmp	r2, r1
 800171c:	d90b      	bls.n	8001736 <__aeabi_ddiv+0x2c2>
 800171e:	2301      	movs	r3, #1
 8001720:	425b      	negs	r3, r3
 8001722:	469c      	mov	ip, r3
 8001724:	1909      	adds	r1, r1, r4
 8001726:	44e0      	add	r8, ip
 8001728:	428c      	cmp	r4, r1
 800172a:	d804      	bhi.n	8001736 <__aeabi_ddiv+0x2c2>
 800172c:	428a      	cmp	r2, r1
 800172e:	d902      	bls.n	8001736 <__aeabi_ddiv+0x2c2>
 8001730:	1e83      	subs	r3, r0, #2
 8001732:	4698      	mov	r8, r3
 8001734:	1909      	adds	r1, r1, r4
 8001736:	1a88      	subs	r0, r1, r2
 8001738:	4649      	mov	r1, r9
 800173a:	f7fe fd8f 	bl	800025c <__aeabi_uidivmod>
 800173e:	0409      	lsls	r1, r1, #16
 8001740:	468c      	mov	ip, r1
 8001742:	0431      	lsls	r1, r6, #16
 8001744:	4666      	mov	r6, ip
 8001746:	9a01      	ldr	r2, [sp, #4]
 8001748:	0c09      	lsrs	r1, r1, #16
 800174a:	4342      	muls	r2, r0
 800174c:	0003      	movs	r3, r0
 800174e:	4331      	orrs	r1, r6
 8001750:	428a      	cmp	r2, r1
 8001752:	d904      	bls.n	800175e <__aeabi_ddiv+0x2ea>
 8001754:	1909      	adds	r1, r1, r4
 8001756:	3b01      	subs	r3, #1
 8001758:	428c      	cmp	r4, r1
 800175a:	d800      	bhi.n	800175e <__aeabi_ddiv+0x2ea>
 800175c:	e111      	b.n	8001982 <__aeabi_ddiv+0x50e>
 800175e:	1a89      	subs	r1, r1, r2
 8001760:	4642      	mov	r2, r8
 8001762:	9e00      	ldr	r6, [sp, #0]
 8001764:	0412      	lsls	r2, r2, #16
 8001766:	431a      	orrs	r2, r3
 8001768:	0c33      	lsrs	r3, r6, #16
 800176a:	001f      	movs	r7, r3
 800176c:	0c10      	lsrs	r0, r2, #16
 800176e:	4690      	mov	r8, r2
 8001770:	9302      	str	r3, [sp, #8]
 8001772:	0413      	lsls	r3, r2, #16
 8001774:	0432      	lsls	r2, r6, #16
 8001776:	0c16      	lsrs	r6, r2, #16
 8001778:	0032      	movs	r2, r6
 800177a:	0c1b      	lsrs	r3, r3, #16
 800177c:	435a      	muls	r2, r3
 800177e:	9603      	str	r6, [sp, #12]
 8001780:	437b      	muls	r3, r7
 8001782:	4346      	muls	r6, r0
 8001784:	4378      	muls	r0, r7
 8001786:	0c17      	lsrs	r7, r2, #16
 8001788:	46bc      	mov	ip, r7
 800178a:	199b      	adds	r3, r3, r6
 800178c:	4463      	add	r3, ip
 800178e:	429e      	cmp	r6, r3
 8001790:	d903      	bls.n	800179a <__aeabi_ddiv+0x326>
 8001792:	2680      	movs	r6, #128	; 0x80
 8001794:	0276      	lsls	r6, r6, #9
 8001796:	46b4      	mov	ip, r6
 8001798:	4460      	add	r0, ip
 800179a:	0c1e      	lsrs	r6, r3, #16
 800179c:	1830      	adds	r0, r6, r0
 800179e:	0416      	lsls	r6, r2, #16
 80017a0:	041b      	lsls	r3, r3, #16
 80017a2:	0c36      	lsrs	r6, r6, #16
 80017a4:	199e      	adds	r6, r3, r6
 80017a6:	4281      	cmp	r1, r0
 80017a8:	d200      	bcs.n	80017ac <__aeabi_ddiv+0x338>
 80017aa:	e09c      	b.n	80018e6 <__aeabi_ddiv+0x472>
 80017ac:	d100      	bne.n	80017b0 <__aeabi_ddiv+0x33c>
 80017ae:	e097      	b.n	80018e0 <__aeabi_ddiv+0x46c>
 80017b0:	1bae      	subs	r6, r5, r6
 80017b2:	1a09      	subs	r1, r1, r0
 80017b4:	42b5      	cmp	r5, r6
 80017b6:	4180      	sbcs	r0, r0
 80017b8:	4240      	negs	r0, r0
 80017ba:	1a08      	subs	r0, r1, r0
 80017bc:	4284      	cmp	r4, r0
 80017be:	d100      	bne.n	80017c2 <__aeabi_ddiv+0x34e>
 80017c0:	e111      	b.n	80019e6 <__aeabi_ddiv+0x572>
 80017c2:	4649      	mov	r1, r9
 80017c4:	f7fe fd4a 	bl	800025c <__aeabi_uidivmod>
 80017c8:	9a01      	ldr	r2, [sp, #4]
 80017ca:	040b      	lsls	r3, r1, #16
 80017cc:	4342      	muls	r2, r0
 80017ce:	0c31      	lsrs	r1, r6, #16
 80017d0:	0005      	movs	r5, r0
 80017d2:	4319      	orrs	r1, r3
 80017d4:	428a      	cmp	r2, r1
 80017d6:	d907      	bls.n	80017e8 <__aeabi_ddiv+0x374>
 80017d8:	1909      	adds	r1, r1, r4
 80017da:	3d01      	subs	r5, #1
 80017dc:	428c      	cmp	r4, r1
 80017de:	d803      	bhi.n	80017e8 <__aeabi_ddiv+0x374>
 80017e0:	428a      	cmp	r2, r1
 80017e2:	d901      	bls.n	80017e8 <__aeabi_ddiv+0x374>
 80017e4:	1e85      	subs	r5, r0, #2
 80017e6:	1909      	adds	r1, r1, r4
 80017e8:	1a88      	subs	r0, r1, r2
 80017ea:	4649      	mov	r1, r9
 80017ec:	f7fe fd36 	bl	800025c <__aeabi_uidivmod>
 80017f0:	0409      	lsls	r1, r1, #16
 80017f2:	468c      	mov	ip, r1
 80017f4:	0431      	lsls	r1, r6, #16
 80017f6:	4666      	mov	r6, ip
 80017f8:	9a01      	ldr	r2, [sp, #4]
 80017fa:	0c09      	lsrs	r1, r1, #16
 80017fc:	4342      	muls	r2, r0
 80017fe:	0003      	movs	r3, r0
 8001800:	4331      	orrs	r1, r6
 8001802:	428a      	cmp	r2, r1
 8001804:	d907      	bls.n	8001816 <__aeabi_ddiv+0x3a2>
 8001806:	1909      	adds	r1, r1, r4
 8001808:	3b01      	subs	r3, #1
 800180a:	428c      	cmp	r4, r1
 800180c:	d803      	bhi.n	8001816 <__aeabi_ddiv+0x3a2>
 800180e:	428a      	cmp	r2, r1
 8001810:	d901      	bls.n	8001816 <__aeabi_ddiv+0x3a2>
 8001812:	1e83      	subs	r3, r0, #2
 8001814:	1909      	adds	r1, r1, r4
 8001816:	9e03      	ldr	r6, [sp, #12]
 8001818:	1a89      	subs	r1, r1, r2
 800181a:	0032      	movs	r2, r6
 800181c:	042d      	lsls	r5, r5, #16
 800181e:	431d      	orrs	r5, r3
 8001820:	9f02      	ldr	r7, [sp, #8]
 8001822:	042b      	lsls	r3, r5, #16
 8001824:	0c1b      	lsrs	r3, r3, #16
 8001826:	435a      	muls	r2, r3
 8001828:	437b      	muls	r3, r7
 800182a:	469c      	mov	ip, r3
 800182c:	0c28      	lsrs	r0, r5, #16
 800182e:	4346      	muls	r6, r0
 8001830:	0c13      	lsrs	r3, r2, #16
 8001832:	44b4      	add	ip, r6
 8001834:	4463      	add	r3, ip
 8001836:	4378      	muls	r0, r7
 8001838:	429e      	cmp	r6, r3
 800183a:	d903      	bls.n	8001844 <__aeabi_ddiv+0x3d0>
 800183c:	2680      	movs	r6, #128	; 0x80
 800183e:	0276      	lsls	r6, r6, #9
 8001840:	46b4      	mov	ip, r6
 8001842:	4460      	add	r0, ip
 8001844:	0c1e      	lsrs	r6, r3, #16
 8001846:	0412      	lsls	r2, r2, #16
 8001848:	041b      	lsls	r3, r3, #16
 800184a:	0c12      	lsrs	r2, r2, #16
 800184c:	1830      	adds	r0, r6, r0
 800184e:	189b      	adds	r3, r3, r2
 8001850:	4281      	cmp	r1, r0
 8001852:	d306      	bcc.n	8001862 <__aeabi_ddiv+0x3ee>
 8001854:	d002      	beq.n	800185c <__aeabi_ddiv+0x3e8>
 8001856:	2301      	movs	r3, #1
 8001858:	431d      	orrs	r5, r3
 800185a:	e6ce      	b.n	80015fa <__aeabi_ddiv+0x186>
 800185c:	2b00      	cmp	r3, #0
 800185e:	d100      	bne.n	8001862 <__aeabi_ddiv+0x3ee>
 8001860:	e6cb      	b.n	80015fa <__aeabi_ddiv+0x186>
 8001862:	1861      	adds	r1, r4, r1
 8001864:	1e6e      	subs	r6, r5, #1
 8001866:	42a1      	cmp	r1, r4
 8001868:	d200      	bcs.n	800186c <__aeabi_ddiv+0x3f8>
 800186a:	e0a4      	b.n	80019b6 <__aeabi_ddiv+0x542>
 800186c:	4281      	cmp	r1, r0
 800186e:	d200      	bcs.n	8001872 <__aeabi_ddiv+0x3fe>
 8001870:	e0c9      	b.n	8001a06 <__aeabi_ddiv+0x592>
 8001872:	d100      	bne.n	8001876 <__aeabi_ddiv+0x402>
 8001874:	e0d9      	b.n	8001a2a <__aeabi_ddiv+0x5b6>
 8001876:	0035      	movs	r5, r6
 8001878:	e7ed      	b.n	8001856 <__aeabi_ddiv+0x3e2>
 800187a:	2501      	movs	r5, #1
 800187c:	426d      	negs	r5, r5
 800187e:	2101      	movs	r1, #1
 8001880:	1a89      	subs	r1, r1, r2
 8001882:	2938      	cmp	r1, #56	; 0x38
 8001884:	dd00      	ble.n	8001888 <__aeabi_ddiv+0x414>
 8001886:	e64c      	b.n	8001522 <__aeabi_ddiv+0xae>
 8001888:	291f      	cmp	r1, #31
 800188a:	dc00      	bgt.n	800188e <__aeabi_ddiv+0x41a>
 800188c:	e07f      	b.n	800198e <__aeabi_ddiv+0x51a>
 800188e:	231f      	movs	r3, #31
 8001890:	425b      	negs	r3, r3
 8001892:	1a9a      	subs	r2, r3, r2
 8001894:	4643      	mov	r3, r8
 8001896:	40d3      	lsrs	r3, r2
 8001898:	2920      	cmp	r1, #32
 800189a:	d004      	beq.n	80018a6 <__aeabi_ddiv+0x432>
 800189c:	4644      	mov	r4, r8
 800189e:	4a65      	ldr	r2, [pc, #404]	; (8001a34 <__aeabi_ddiv+0x5c0>)
 80018a0:	445a      	add	r2, fp
 80018a2:	4094      	lsls	r4, r2
 80018a4:	4325      	orrs	r5, r4
 80018a6:	1e6a      	subs	r2, r5, #1
 80018a8:	4195      	sbcs	r5, r2
 80018aa:	2207      	movs	r2, #7
 80018ac:	432b      	orrs	r3, r5
 80018ae:	0015      	movs	r5, r2
 80018b0:	2400      	movs	r4, #0
 80018b2:	401d      	ands	r5, r3
 80018b4:	421a      	tst	r2, r3
 80018b6:	d100      	bne.n	80018ba <__aeabi_ddiv+0x446>
 80018b8:	e0a1      	b.n	80019fe <__aeabi_ddiv+0x58a>
 80018ba:	220f      	movs	r2, #15
 80018bc:	2400      	movs	r4, #0
 80018be:	401a      	ands	r2, r3
 80018c0:	2a04      	cmp	r2, #4
 80018c2:	d100      	bne.n	80018c6 <__aeabi_ddiv+0x452>
 80018c4:	e098      	b.n	80019f8 <__aeabi_ddiv+0x584>
 80018c6:	1d1a      	adds	r2, r3, #4
 80018c8:	429a      	cmp	r2, r3
 80018ca:	419b      	sbcs	r3, r3
 80018cc:	425b      	negs	r3, r3
 80018ce:	18e4      	adds	r4, r4, r3
 80018d0:	0013      	movs	r3, r2
 80018d2:	0222      	lsls	r2, r4, #8
 80018d4:	d400      	bmi.n	80018d8 <__aeabi_ddiv+0x464>
 80018d6:	e08f      	b.n	80019f8 <__aeabi_ddiv+0x584>
 80018d8:	2301      	movs	r3, #1
 80018da:	2400      	movs	r4, #0
 80018dc:	2500      	movs	r5, #0
 80018de:	e623      	b.n	8001528 <__aeabi_ddiv+0xb4>
 80018e0:	42b5      	cmp	r5, r6
 80018e2:	d300      	bcc.n	80018e6 <__aeabi_ddiv+0x472>
 80018e4:	e764      	b.n	80017b0 <__aeabi_ddiv+0x33c>
 80018e6:	4643      	mov	r3, r8
 80018e8:	1e5a      	subs	r2, r3, #1
 80018ea:	9b00      	ldr	r3, [sp, #0]
 80018ec:	469c      	mov	ip, r3
 80018ee:	4465      	add	r5, ip
 80018f0:	001f      	movs	r7, r3
 80018f2:	429d      	cmp	r5, r3
 80018f4:	419b      	sbcs	r3, r3
 80018f6:	425b      	negs	r3, r3
 80018f8:	191b      	adds	r3, r3, r4
 80018fa:	18c9      	adds	r1, r1, r3
 80018fc:	428c      	cmp	r4, r1
 80018fe:	d23a      	bcs.n	8001976 <__aeabi_ddiv+0x502>
 8001900:	4288      	cmp	r0, r1
 8001902:	d863      	bhi.n	80019cc <__aeabi_ddiv+0x558>
 8001904:	d060      	beq.n	80019c8 <__aeabi_ddiv+0x554>
 8001906:	4690      	mov	r8, r2
 8001908:	e752      	b.n	80017b0 <__aeabi_ddiv+0x33c>
 800190a:	42aa      	cmp	r2, r5
 800190c:	d900      	bls.n	8001910 <__aeabi_ddiv+0x49c>
 800190e:	e6ea      	b.n	80016e6 <__aeabi_ddiv+0x272>
 8001910:	4643      	mov	r3, r8
 8001912:	07de      	lsls	r6, r3, #31
 8001914:	0858      	lsrs	r0, r3, #1
 8001916:	086b      	lsrs	r3, r5, #1
 8001918:	431e      	orrs	r6, r3
 800191a:	07ed      	lsls	r5, r5, #31
 800191c:	e6ea      	b.n	80016f4 <__aeabi_ddiv+0x280>
 800191e:	4648      	mov	r0, r9
 8001920:	f001 f908 	bl	8002b34 <__clzsi2>
 8001924:	0001      	movs	r1, r0
 8001926:	0002      	movs	r2, r0
 8001928:	3115      	adds	r1, #21
 800192a:	3220      	adds	r2, #32
 800192c:	291c      	cmp	r1, #28
 800192e:	dc00      	bgt.n	8001932 <__aeabi_ddiv+0x4be>
 8001930:	e61a      	b.n	8001568 <__aeabi_ddiv+0xf4>
 8001932:	464b      	mov	r3, r9
 8001934:	3808      	subs	r0, #8
 8001936:	4083      	lsls	r3, r0
 8001938:	2500      	movs	r5, #0
 800193a:	4698      	mov	r8, r3
 800193c:	e620      	b.n	8001580 <__aeabi_ddiv+0x10c>
 800193e:	f001 f8f9 	bl	8002b34 <__clzsi2>
 8001942:	0003      	movs	r3, r0
 8001944:	001a      	movs	r2, r3
 8001946:	3215      	adds	r2, #21
 8001948:	3020      	adds	r0, #32
 800194a:	2a1c      	cmp	r2, #28
 800194c:	dc00      	bgt.n	8001950 <__aeabi_ddiv+0x4dc>
 800194e:	e630      	b.n	80015b2 <__aeabi_ddiv+0x13e>
 8001950:	4654      	mov	r4, sl
 8001952:	3b08      	subs	r3, #8
 8001954:	2200      	movs	r2, #0
 8001956:	409c      	lsls	r4, r3
 8001958:	e635      	b.n	80015c6 <__aeabi_ddiv+0x152>
 800195a:	230f      	movs	r3, #15
 800195c:	402b      	ands	r3, r5
 800195e:	2b04      	cmp	r3, #4
 8001960:	d100      	bne.n	8001964 <__aeabi_ddiv+0x4f0>
 8001962:	e652      	b.n	800160a <__aeabi_ddiv+0x196>
 8001964:	2305      	movs	r3, #5
 8001966:	425b      	negs	r3, r3
 8001968:	42ab      	cmp	r3, r5
 800196a:	419b      	sbcs	r3, r3
 800196c:	3504      	adds	r5, #4
 800196e:	425b      	negs	r3, r3
 8001970:	08ed      	lsrs	r5, r5, #3
 8001972:	4498      	add	r8, r3
 8001974:	e64a      	b.n	800160c <__aeabi_ddiv+0x198>
 8001976:	428c      	cmp	r4, r1
 8001978:	d1c5      	bne.n	8001906 <__aeabi_ddiv+0x492>
 800197a:	42af      	cmp	r7, r5
 800197c:	d9c0      	bls.n	8001900 <__aeabi_ddiv+0x48c>
 800197e:	4690      	mov	r8, r2
 8001980:	e716      	b.n	80017b0 <__aeabi_ddiv+0x33c>
 8001982:	428a      	cmp	r2, r1
 8001984:	d800      	bhi.n	8001988 <__aeabi_ddiv+0x514>
 8001986:	e6ea      	b.n	800175e <__aeabi_ddiv+0x2ea>
 8001988:	1e83      	subs	r3, r0, #2
 800198a:	1909      	adds	r1, r1, r4
 800198c:	e6e7      	b.n	800175e <__aeabi_ddiv+0x2ea>
 800198e:	4a2a      	ldr	r2, [pc, #168]	; (8001a38 <__aeabi_ddiv+0x5c4>)
 8001990:	0028      	movs	r0, r5
 8001992:	445a      	add	r2, fp
 8001994:	4643      	mov	r3, r8
 8001996:	4095      	lsls	r5, r2
 8001998:	4093      	lsls	r3, r2
 800199a:	40c8      	lsrs	r0, r1
 800199c:	1e6a      	subs	r2, r5, #1
 800199e:	4195      	sbcs	r5, r2
 80019a0:	4644      	mov	r4, r8
 80019a2:	4303      	orrs	r3, r0
 80019a4:	432b      	orrs	r3, r5
 80019a6:	40cc      	lsrs	r4, r1
 80019a8:	075a      	lsls	r2, r3, #29
 80019aa:	d092      	beq.n	80018d2 <__aeabi_ddiv+0x45e>
 80019ac:	220f      	movs	r2, #15
 80019ae:	401a      	ands	r2, r3
 80019b0:	2a04      	cmp	r2, #4
 80019b2:	d188      	bne.n	80018c6 <__aeabi_ddiv+0x452>
 80019b4:	e78d      	b.n	80018d2 <__aeabi_ddiv+0x45e>
 80019b6:	0035      	movs	r5, r6
 80019b8:	4281      	cmp	r1, r0
 80019ba:	d000      	beq.n	80019be <__aeabi_ddiv+0x54a>
 80019bc:	e74b      	b.n	8001856 <__aeabi_ddiv+0x3e2>
 80019be:	9a00      	ldr	r2, [sp, #0]
 80019c0:	4293      	cmp	r3, r2
 80019c2:	d000      	beq.n	80019c6 <__aeabi_ddiv+0x552>
 80019c4:	e747      	b.n	8001856 <__aeabi_ddiv+0x3e2>
 80019c6:	e618      	b.n	80015fa <__aeabi_ddiv+0x186>
 80019c8:	42ae      	cmp	r6, r5
 80019ca:	d99c      	bls.n	8001906 <__aeabi_ddiv+0x492>
 80019cc:	2302      	movs	r3, #2
 80019ce:	425b      	negs	r3, r3
 80019d0:	469c      	mov	ip, r3
 80019d2:	9b00      	ldr	r3, [sp, #0]
 80019d4:	44e0      	add	r8, ip
 80019d6:	469c      	mov	ip, r3
 80019d8:	4465      	add	r5, ip
 80019da:	429d      	cmp	r5, r3
 80019dc:	419b      	sbcs	r3, r3
 80019de:	425b      	negs	r3, r3
 80019e0:	191b      	adds	r3, r3, r4
 80019e2:	18c9      	adds	r1, r1, r3
 80019e4:	e6e4      	b.n	80017b0 <__aeabi_ddiv+0x33c>
 80019e6:	4a15      	ldr	r2, [pc, #84]	; (8001a3c <__aeabi_ddiv+0x5c8>)
 80019e8:	445a      	add	r2, fp
 80019ea:	2a00      	cmp	r2, #0
 80019ec:	dc00      	bgt.n	80019f0 <__aeabi_ddiv+0x57c>
 80019ee:	e744      	b.n	800187a <__aeabi_ddiv+0x406>
 80019f0:	2301      	movs	r3, #1
 80019f2:	2500      	movs	r5, #0
 80019f4:	4498      	add	r8, r3
 80019f6:	e609      	b.n	800160c <__aeabi_ddiv+0x198>
 80019f8:	0765      	lsls	r5, r4, #29
 80019fa:	0264      	lsls	r4, r4, #9
 80019fc:	0b24      	lsrs	r4, r4, #12
 80019fe:	08db      	lsrs	r3, r3, #3
 8001a00:	431d      	orrs	r5, r3
 8001a02:	2300      	movs	r3, #0
 8001a04:	e590      	b.n	8001528 <__aeabi_ddiv+0xb4>
 8001a06:	9e00      	ldr	r6, [sp, #0]
 8001a08:	3d02      	subs	r5, #2
 8001a0a:	0072      	lsls	r2, r6, #1
 8001a0c:	42b2      	cmp	r2, r6
 8001a0e:	41bf      	sbcs	r7, r7
 8001a10:	427f      	negs	r7, r7
 8001a12:	193c      	adds	r4, r7, r4
 8001a14:	1909      	adds	r1, r1, r4
 8001a16:	9200      	str	r2, [sp, #0]
 8001a18:	e7ce      	b.n	80019b8 <__aeabi_ddiv+0x544>
 8001a1a:	2480      	movs	r4, #128	; 0x80
 8001a1c:	4643      	mov	r3, r8
 8001a1e:	0324      	lsls	r4, r4, #12
 8001a20:	431c      	orrs	r4, r3
 8001a22:	0324      	lsls	r4, r4, #12
 8001a24:	4b06      	ldr	r3, [pc, #24]	; (8001a40 <__aeabi_ddiv+0x5cc>)
 8001a26:	0b24      	lsrs	r4, r4, #12
 8001a28:	e57e      	b.n	8001528 <__aeabi_ddiv+0xb4>
 8001a2a:	9a00      	ldr	r2, [sp, #0]
 8001a2c:	429a      	cmp	r2, r3
 8001a2e:	d3ea      	bcc.n	8001a06 <__aeabi_ddiv+0x592>
 8001a30:	0035      	movs	r5, r6
 8001a32:	e7c4      	b.n	80019be <__aeabi_ddiv+0x54a>
 8001a34:	0000043e 	.word	0x0000043e
 8001a38:	0000041e 	.word	0x0000041e
 8001a3c:	000003ff 	.word	0x000003ff
 8001a40:	000007ff 	.word	0x000007ff

08001a44 <__eqdf2>:
 8001a44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a46:	464f      	mov	r7, r9
 8001a48:	4646      	mov	r6, r8
 8001a4a:	46d6      	mov	lr, sl
 8001a4c:	4694      	mov	ip, r2
 8001a4e:	4691      	mov	r9, r2
 8001a50:	031a      	lsls	r2, r3, #12
 8001a52:	0b12      	lsrs	r2, r2, #12
 8001a54:	4d18      	ldr	r5, [pc, #96]	; (8001ab8 <__eqdf2+0x74>)
 8001a56:	b5c0      	push	{r6, r7, lr}
 8001a58:	004c      	lsls	r4, r1, #1
 8001a5a:	030f      	lsls	r7, r1, #12
 8001a5c:	4692      	mov	sl, r2
 8001a5e:	005a      	lsls	r2, r3, #1
 8001a60:	0006      	movs	r6, r0
 8001a62:	4680      	mov	r8, r0
 8001a64:	0b3f      	lsrs	r7, r7, #12
 8001a66:	2001      	movs	r0, #1
 8001a68:	0d64      	lsrs	r4, r4, #21
 8001a6a:	0fc9      	lsrs	r1, r1, #31
 8001a6c:	0d52      	lsrs	r2, r2, #21
 8001a6e:	0fdb      	lsrs	r3, r3, #31
 8001a70:	42ac      	cmp	r4, r5
 8001a72:	d00a      	beq.n	8001a8a <__eqdf2+0x46>
 8001a74:	42aa      	cmp	r2, r5
 8001a76:	d003      	beq.n	8001a80 <__eqdf2+0x3c>
 8001a78:	4294      	cmp	r4, r2
 8001a7a:	d101      	bne.n	8001a80 <__eqdf2+0x3c>
 8001a7c:	4557      	cmp	r7, sl
 8001a7e:	d00d      	beq.n	8001a9c <__eqdf2+0x58>
 8001a80:	bce0      	pop	{r5, r6, r7}
 8001a82:	46ba      	mov	sl, r7
 8001a84:	46b1      	mov	r9, r6
 8001a86:	46a8      	mov	r8, r5
 8001a88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a8a:	003d      	movs	r5, r7
 8001a8c:	4335      	orrs	r5, r6
 8001a8e:	d1f7      	bne.n	8001a80 <__eqdf2+0x3c>
 8001a90:	42a2      	cmp	r2, r4
 8001a92:	d1f5      	bne.n	8001a80 <__eqdf2+0x3c>
 8001a94:	4652      	mov	r2, sl
 8001a96:	4665      	mov	r5, ip
 8001a98:	432a      	orrs	r2, r5
 8001a9a:	d1f1      	bne.n	8001a80 <__eqdf2+0x3c>
 8001a9c:	2001      	movs	r0, #1
 8001a9e:	45c8      	cmp	r8, r9
 8001aa0:	d1ee      	bne.n	8001a80 <__eqdf2+0x3c>
 8001aa2:	4299      	cmp	r1, r3
 8001aa4:	d006      	beq.n	8001ab4 <__eqdf2+0x70>
 8001aa6:	2c00      	cmp	r4, #0
 8001aa8:	d1ea      	bne.n	8001a80 <__eqdf2+0x3c>
 8001aaa:	433e      	orrs	r6, r7
 8001aac:	0030      	movs	r0, r6
 8001aae:	1e46      	subs	r6, r0, #1
 8001ab0:	41b0      	sbcs	r0, r6
 8001ab2:	e7e5      	b.n	8001a80 <__eqdf2+0x3c>
 8001ab4:	2000      	movs	r0, #0
 8001ab6:	e7e3      	b.n	8001a80 <__eqdf2+0x3c>
 8001ab8:	000007ff 	.word	0x000007ff

08001abc <__gedf2>:
 8001abc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001abe:	464e      	mov	r6, r9
 8001ac0:	4645      	mov	r5, r8
 8001ac2:	4657      	mov	r7, sl
 8001ac4:	46de      	mov	lr, fp
 8001ac6:	0004      	movs	r4, r0
 8001ac8:	0018      	movs	r0, r3
 8001aca:	b5e0      	push	{r5, r6, r7, lr}
 8001acc:	0016      	movs	r6, r2
 8001ace:	031b      	lsls	r3, r3, #12
 8001ad0:	0b1b      	lsrs	r3, r3, #12
 8001ad2:	4d32      	ldr	r5, [pc, #200]	; (8001b9c <__gedf2+0xe0>)
 8001ad4:	030f      	lsls	r7, r1, #12
 8001ad6:	004a      	lsls	r2, r1, #1
 8001ad8:	4699      	mov	r9, r3
 8001ada:	0043      	lsls	r3, r0, #1
 8001adc:	46a4      	mov	ip, r4
 8001ade:	46b0      	mov	r8, r6
 8001ae0:	0b3f      	lsrs	r7, r7, #12
 8001ae2:	0d52      	lsrs	r2, r2, #21
 8001ae4:	0fc9      	lsrs	r1, r1, #31
 8001ae6:	0d5b      	lsrs	r3, r3, #21
 8001ae8:	0fc0      	lsrs	r0, r0, #31
 8001aea:	42aa      	cmp	r2, r5
 8001aec:	d029      	beq.n	8001b42 <__gedf2+0x86>
 8001aee:	42ab      	cmp	r3, r5
 8001af0:	d018      	beq.n	8001b24 <__gedf2+0x68>
 8001af2:	2a00      	cmp	r2, #0
 8001af4:	d12a      	bne.n	8001b4c <__gedf2+0x90>
 8001af6:	433c      	orrs	r4, r7
 8001af8:	46a3      	mov	fp, r4
 8001afa:	4265      	negs	r5, r4
 8001afc:	4165      	adcs	r5, r4
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d102      	bne.n	8001b08 <__gedf2+0x4c>
 8001b02:	464c      	mov	r4, r9
 8001b04:	4326      	orrs	r6, r4
 8001b06:	d027      	beq.n	8001b58 <__gedf2+0x9c>
 8001b08:	2d00      	cmp	r5, #0
 8001b0a:	d115      	bne.n	8001b38 <__gedf2+0x7c>
 8001b0c:	4281      	cmp	r1, r0
 8001b0e:	d028      	beq.n	8001b62 <__gedf2+0xa6>
 8001b10:	2002      	movs	r0, #2
 8001b12:	3901      	subs	r1, #1
 8001b14:	4008      	ands	r0, r1
 8001b16:	3801      	subs	r0, #1
 8001b18:	bcf0      	pop	{r4, r5, r6, r7}
 8001b1a:	46bb      	mov	fp, r7
 8001b1c:	46b2      	mov	sl, r6
 8001b1e:	46a9      	mov	r9, r5
 8001b20:	46a0      	mov	r8, r4
 8001b22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b24:	464d      	mov	r5, r9
 8001b26:	432e      	orrs	r6, r5
 8001b28:	d12f      	bne.n	8001b8a <__gedf2+0xce>
 8001b2a:	2a00      	cmp	r2, #0
 8001b2c:	d1ee      	bne.n	8001b0c <__gedf2+0x50>
 8001b2e:	433c      	orrs	r4, r7
 8001b30:	4265      	negs	r5, r4
 8001b32:	4165      	adcs	r5, r4
 8001b34:	2d00      	cmp	r5, #0
 8001b36:	d0e9      	beq.n	8001b0c <__gedf2+0x50>
 8001b38:	2800      	cmp	r0, #0
 8001b3a:	d1ed      	bne.n	8001b18 <__gedf2+0x5c>
 8001b3c:	2001      	movs	r0, #1
 8001b3e:	4240      	negs	r0, r0
 8001b40:	e7ea      	b.n	8001b18 <__gedf2+0x5c>
 8001b42:	003d      	movs	r5, r7
 8001b44:	4325      	orrs	r5, r4
 8001b46:	d120      	bne.n	8001b8a <__gedf2+0xce>
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	d0eb      	beq.n	8001b24 <__gedf2+0x68>
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d1dd      	bne.n	8001b0c <__gedf2+0x50>
 8001b50:	464c      	mov	r4, r9
 8001b52:	4326      	orrs	r6, r4
 8001b54:	d1da      	bne.n	8001b0c <__gedf2+0x50>
 8001b56:	e7db      	b.n	8001b10 <__gedf2+0x54>
 8001b58:	465b      	mov	r3, fp
 8001b5a:	2000      	movs	r0, #0
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d0db      	beq.n	8001b18 <__gedf2+0x5c>
 8001b60:	e7d6      	b.n	8001b10 <__gedf2+0x54>
 8001b62:	429a      	cmp	r2, r3
 8001b64:	dc0a      	bgt.n	8001b7c <__gedf2+0xc0>
 8001b66:	dbe7      	blt.n	8001b38 <__gedf2+0x7c>
 8001b68:	454f      	cmp	r7, r9
 8001b6a:	d8d1      	bhi.n	8001b10 <__gedf2+0x54>
 8001b6c:	d010      	beq.n	8001b90 <__gedf2+0xd4>
 8001b6e:	2000      	movs	r0, #0
 8001b70:	454f      	cmp	r7, r9
 8001b72:	d2d1      	bcs.n	8001b18 <__gedf2+0x5c>
 8001b74:	2900      	cmp	r1, #0
 8001b76:	d0e1      	beq.n	8001b3c <__gedf2+0x80>
 8001b78:	0008      	movs	r0, r1
 8001b7a:	e7cd      	b.n	8001b18 <__gedf2+0x5c>
 8001b7c:	4243      	negs	r3, r0
 8001b7e:	4158      	adcs	r0, r3
 8001b80:	2302      	movs	r3, #2
 8001b82:	4240      	negs	r0, r0
 8001b84:	4018      	ands	r0, r3
 8001b86:	3801      	subs	r0, #1
 8001b88:	e7c6      	b.n	8001b18 <__gedf2+0x5c>
 8001b8a:	2002      	movs	r0, #2
 8001b8c:	4240      	negs	r0, r0
 8001b8e:	e7c3      	b.n	8001b18 <__gedf2+0x5c>
 8001b90:	45c4      	cmp	ip, r8
 8001b92:	d8bd      	bhi.n	8001b10 <__gedf2+0x54>
 8001b94:	2000      	movs	r0, #0
 8001b96:	45c4      	cmp	ip, r8
 8001b98:	d2be      	bcs.n	8001b18 <__gedf2+0x5c>
 8001b9a:	e7eb      	b.n	8001b74 <__gedf2+0xb8>
 8001b9c:	000007ff 	.word	0x000007ff

08001ba0 <__ledf2>:
 8001ba0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ba2:	464e      	mov	r6, r9
 8001ba4:	4645      	mov	r5, r8
 8001ba6:	4657      	mov	r7, sl
 8001ba8:	46de      	mov	lr, fp
 8001baa:	0004      	movs	r4, r0
 8001bac:	0018      	movs	r0, r3
 8001bae:	b5e0      	push	{r5, r6, r7, lr}
 8001bb0:	0016      	movs	r6, r2
 8001bb2:	031b      	lsls	r3, r3, #12
 8001bb4:	0b1b      	lsrs	r3, r3, #12
 8001bb6:	4d31      	ldr	r5, [pc, #196]	; (8001c7c <__ledf2+0xdc>)
 8001bb8:	030f      	lsls	r7, r1, #12
 8001bba:	004a      	lsls	r2, r1, #1
 8001bbc:	4699      	mov	r9, r3
 8001bbe:	0043      	lsls	r3, r0, #1
 8001bc0:	46a4      	mov	ip, r4
 8001bc2:	46b0      	mov	r8, r6
 8001bc4:	0b3f      	lsrs	r7, r7, #12
 8001bc6:	0d52      	lsrs	r2, r2, #21
 8001bc8:	0fc9      	lsrs	r1, r1, #31
 8001bca:	0d5b      	lsrs	r3, r3, #21
 8001bcc:	0fc0      	lsrs	r0, r0, #31
 8001bce:	42aa      	cmp	r2, r5
 8001bd0:	d011      	beq.n	8001bf6 <__ledf2+0x56>
 8001bd2:	42ab      	cmp	r3, r5
 8001bd4:	d014      	beq.n	8001c00 <__ledf2+0x60>
 8001bd6:	2a00      	cmp	r2, #0
 8001bd8:	d12f      	bne.n	8001c3a <__ledf2+0x9a>
 8001bda:	433c      	orrs	r4, r7
 8001bdc:	46a3      	mov	fp, r4
 8001bde:	4265      	negs	r5, r4
 8001be0:	4165      	adcs	r5, r4
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d114      	bne.n	8001c10 <__ledf2+0x70>
 8001be6:	464c      	mov	r4, r9
 8001be8:	4326      	orrs	r6, r4
 8001bea:	d111      	bne.n	8001c10 <__ledf2+0x70>
 8001bec:	465b      	mov	r3, fp
 8001bee:	2000      	movs	r0, #0
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d017      	beq.n	8001c24 <__ledf2+0x84>
 8001bf4:	e010      	b.n	8001c18 <__ledf2+0x78>
 8001bf6:	003d      	movs	r5, r7
 8001bf8:	4325      	orrs	r5, r4
 8001bfa:	d112      	bne.n	8001c22 <__ledf2+0x82>
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d11c      	bne.n	8001c3a <__ledf2+0x9a>
 8001c00:	464d      	mov	r5, r9
 8001c02:	432e      	orrs	r6, r5
 8001c04:	d10d      	bne.n	8001c22 <__ledf2+0x82>
 8001c06:	2a00      	cmp	r2, #0
 8001c08:	d104      	bne.n	8001c14 <__ledf2+0x74>
 8001c0a:	433c      	orrs	r4, r7
 8001c0c:	4265      	negs	r5, r4
 8001c0e:	4165      	adcs	r5, r4
 8001c10:	2d00      	cmp	r5, #0
 8001c12:	d10d      	bne.n	8001c30 <__ledf2+0x90>
 8001c14:	4281      	cmp	r1, r0
 8001c16:	d016      	beq.n	8001c46 <__ledf2+0xa6>
 8001c18:	2002      	movs	r0, #2
 8001c1a:	3901      	subs	r1, #1
 8001c1c:	4008      	ands	r0, r1
 8001c1e:	3801      	subs	r0, #1
 8001c20:	e000      	b.n	8001c24 <__ledf2+0x84>
 8001c22:	2002      	movs	r0, #2
 8001c24:	bcf0      	pop	{r4, r5, r6, r7}
 8001c26:	46bb      	mov	fp, r7
 8001c28:	46b2      	mov	sl, r6
 8001c2a:	46a9      	mov	r9, r5
 8001c2c:	46a0      	mov	r8, r4
 8001c2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c30:	2800      	cmp	r0, #0
 8001c32:	d1f7      	bne.n	8001c24 <__ledf2+0x84>
 8001c34:	2001      	movs	r0, #1
 8001c36:	4240      	negs	r0, r0
 8001c38:	e7f4      	b.n	8001c24 <__ledf2+0x84>
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d1ea      	bne.n	8001c14 <__ledf2+0x74>
 8001c3e:	464c      	mov	r4, r9
 8001c40:	4326      	orrs	r6, r4
 8001c42:	d1e7      	bne.n	8001c14 <__ledf2+0x74>
 8001c44:	e7e8      	b.n	8001c18 <__ledf2+0x78>
 8001c46:	429a      	cmp	r2, r3
 8001c48:	dd06      	ble.n	8001c58 <__ledf2+0xb8>
 8001c4a:	4243      	negs	r3, r0
 8001c4c:	4158      	adcs	r0, r3
 8001c4e:	2302      	movs	r3, #2
 8001c50:	4240      	negs	r0, r0
 8001c52:	4018      	ands	r0, r3
 8001c54:	3801      	subs	r0, #1
 8001c56:	e7e5      	b.n	8001c24 <__ledf2+0x84>
 8001c58:	429a      	cmp	r2, r3
 8001c5a:	dbe9      	blt.n	8001c30 <__ledf2+0x90>
 8001c5c:	454f      	cmp	r7, r9
 8001c5e:	d8db      	bhi.n	8001c18 <__ledf2+0x78>
 8001c60:	d006      	beq.n	8001c70 <__ledf2+0xd0>
 8001c62:	2000      	movs	r0, #0
 8001c64:	454f      	cmp	r7, r9
 8001c66:	d2dd      	bcs.n	8001c24 <__ledf2+0x84>
 8001c68:	2900      	cmp	r1, #0
 8001c6a:	d0e3      	beq.n	8001c34 <__ledf2+0x94>
 8001c6c:	0008      	movs	r0, r1
 8001c6e:	e7d9      	b.n	8001c24 <__ledf2+0x84>
 8001c70:	45c4      	cmp	ip, r8
 8001c72:	d8d1      	bhi.n	8001c18 <__ledf2+0x78>
 8001c74:	2000      	movs	r0, #0
 8001c76:	45c4      	cmp	ip, r8
 8001c78:	d2d4      	bcs.n	8001c24 <__ledf2+0x84>
 8001c7a:	e7f5      	b.n	8001c68 <__ledf2+0xc8>
 8001c7c:	000007ff 	.word	0x000007ff

08001c80 <__aeabi_dmul>:
 8001c80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c82:	4657      	mov	r7, sl
 8001c84:	464e      	mov	r6, r9
 8001c86:	4645      	mov	r5, r8
 8001c88:	46de      	mov	lr, fp
 8001c8a:	b5e0      	push	{r5, r6, r7, lr}
 8001c8c:	4698      	mov	r8, r3
 8001c8e:	030c      	lsls	r4, r1, #12
 8001c90:	004b      	lsls	r3, r1, #1
 8001c92:	0006      	movs	r6, r0
 8001c94:	4692      	mov	sl, r2
 8001c96:	b087      	sub	sp, #28
 8001c98:	0b24      	lsrs	r4, r4, #12
 8001c9a:	0d5b      	lsrs	r3, r3, #21
 8001c9c:	0fcf      	lsrs	r7, r1, #31
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d06c      	beq.n	8001d7c <__aeabi_dmul+0xfc>
 8001ca2:	4add      	ldr	r2, [pc, #884]	; (8002018 <__aeabi_dmul+0x398>)
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d100      	bne.n	8001caa <__aeabi_dmul+0x2a>
 8001ca8:	e086      	b.n	8001db8 <__aeabi_dmul+0x138>
 8001caa:	0f42      	lsrs	r2, r0, #29
 8001cac:	00e4      	lsls	r4, r4, #3
 8001cae:	4314      	orrs	r4, r2
 8001cb0:	2280      	movs	r2, #128	; 0x80
 8001cb2:	0412      	lsls	r2, r2, #16
 8001cb4:	4314      	orrs	r4, r2
 8001cb6:	4ad9      	ldr	r2, [pc, #868]	; (800201c <__aeabi_dmul+0x39c>)
 8001cb8:	00c5      	lsls	r5, r0, #3
 8001cba:	4694      	mov	ip, r2
 8001cbc:	4463      	add	r3, ip
 8001cbe:	9300      	str	r3, [sp, #0]
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	4699      	mov	r9, r3
 8001cc4:	469b      	mov	fp, r3
 8001cc6:	4643      	mov	r3, r8
 8001cc8:	4642      	mov	r2, r8
 8001cca:	031e      	lsls	r6, r3, #12
 8001ccc:	0fd2      	lsrs	r2, r2, #31
 8001cce:	005b      	lsls	r3, r3, #1
 8001cd0:	4650      	mov	r0, sl
 8001cd2:	4690      	mov	r8, r2
 8001cd4:	0b36      	lsrs	r6, r6, #12
 8001cd6:	0d5b      	lsrs	r3, r3, #21
 8001cd8:	d100      	bne.n	8001cdc <__aeabi_dmul+0x5c>
 8001cda:	e078      	b.n	8001dce <__aeabi_dmul+0x14e>
 8001cdc:	4ace      	ldr	r2, [pc, #824]	; (8002018 <__aeabi_dmul+0x398>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d01d      	beq.n	8001d1e <__aeabi_dmul+0x9e>
 8001ce2:	49ce      	ldr	r1, [pc, #824]	; (800201c <__aeabi_dmul+0x39c>)
 8001ce4:	0f42      	lsrs	r2, r0, #29
 8001ce6:	468c      	mov	ip, r1
 8001ce8:	9900      	ldr	r1, [sp, #0]
 8001cea:	4463      	add	r3, ip
 8001cec:	00f6      	lsls	r6, r6, #3
 8001cee:	468c      	mov	ip, r1
 8001cf0:	4316      	orrs	r6, r2
 8001cf2:	2280      	movs	r2, #128	; 0x80
 8001cf4:	449c      	add	ip, r3
 8001cf6:	0412      	lsls	r2, r2, #16
 8001cf8:	4663      	mov	r3, ip
 8001cfa:	4316      	orrs	r6, r2
 8001cfc:	00c2      	lsls	r2, r0, #3
 8001cfe:	2000      	movs	r0, #0
 8001d00:	9300      	str	r3, [sp, #0]
 8001d02:	9900      	ldr	r1, [sp, #0]
 8001d04:	4643      	mov	r3, r8
 8001d06:	3101      	adds	r1, #1
 8001d08:	468c      	mov	ip, r1
 8001d0a:	4649      	mov	r1, r9
 8001d0c:	407b      	eors	r3, r7
 8001d0e:	9301      	str	r3, [sp, #4]
 8001d10:	290f      	cmp	r1, #15
 8001d12:	d900      	bls.n	8001d16 <__aeabi_dmul+0x96>
 8001d14:	e07e      	b.n	8001e14 <__aeabi_dmul+0x194>
 8001d16:	4bc2      	ldr	r3, [pc, #776]	; (8002020 <__aeabi_dmul+0x3a0>)
 8001d18:	0089      	lsls	r1, r1, #2
 8001d1a:	5859      	ldr	r1, [r3, r1]
 8001d1c:	468f      	mov	pc, r1
 8001d1e:	4652      	mov	r2, sl
 8001d20:	9b00      	ldr	r3, [sp, #0]
 8001d22:	4332      	orrs	r2, r6
 8001d24:	d000      	beq.n	8001d28 <__aeabi_dmul+0xa8>
 8001d26:	e156      	b.n	8001fd6 <__aeabi_dmul+0x356>
 8001d28:	49bb      	ldr	r1, [pc, #748]	; (8002018 <__aeabi_dmul+0x398>)
 8001d2a:	2600      	movs	r6, #0
 8001d2c:	468c      	mov	ip, r1
 8001d2e:	4463      	add	r3, ip
 8001d30:	4649      	mov	r1, r9
 8001d32:	9300      	str	r3, [sp, #0]
 8001d34:	2302      	movs	r3, #2
 8001d36:	4319      	orrs	r1, r3
 8001d38:	4689      	mov	r9, r1
 8001d3a:	2002      	movs	r0, #2
 8001d3c:	e7e1      	b.n	8001d02 <__aeabi_dmul+0x82>
 8001d3e:	4643      	mov	r3, r8
 8001d40:	9301      	str	r3, [sp, #4]
 8001d42:	0034      	movs	r4, r6
 8001d44:	0015      	movs	r5, r2
 8001d46:	4683      	mov	fp, r0
 8001d48:	465b      	mov	r3, fp
 8001d4a:	2b02      	cmp	r3, #2
 8001d4c:	d05e      	beq.n	8001e0c <__aeabi_dmul+0x18c>
 8001d4e:	2b03      	cmp	r3, #3
 8001d50:	d100      	bne.n	8001d54 <__aeabi_dmul+0xd4>
 8001d52:	e1f3      	b.n	800213c <__aeabi_dmul+0x4bc>
 8001d54:	2b01      	cmp	r3, #1
 8001d56:	d000      	beq.n	8001d5a <__aeabi_dmul+0xda>
 8001d58:	e118      	b.n	8001f8c <__aeabi_dmul+0x30c>
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	2400      	movs	r4, #0
 8001d5e:	2500      	movs	r5, #0
 8001d60:	9b01      	ldr	r3, [sp, #4]
 8001d62:	0512      	lsls	r2, r2, #20
 8001d64:	4322      	orrs	r2, r4
 8001d66:	07db      	lsls	r3, r3, #31
 8001d68:	431a      	orrs	r2, r3
 8001d6a:	0028      	movs	r0, r5
 8001d6c:	0011      	movs	r1, r2
 8001d6e:	b007      	add	sp, #28
 8001d70:	bcf0      	pop	{r4, r5, r6, r7}
 8001d72:	46bb      	mov	fp, r7
 8001d74:	46b2      	mov	sl, r6
 8001d76:	46a9      	mov	r9, r5
 8001d78:	46a0      	mov	r8, r4
 8001d7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d7c:	0025      	movs	r5, r4
 8001d7e:	4305      	orrs	r5, r0
 8001d80:	d100      	bne.n	8001d84 <__aeabi_dmul+0x104>
 8001d82:	e141      	b.n	8002008 <__aeabi_dmul+0x388>
 8001d84:	2c00      	cmp	r4, #0
 8001d86:	d100      	bne.n	8001d8a <__aeabi_dmul+0x10a>
 8001d88:	e1ad      	b.n	80020e6 <__aeabi_dmul+0x466>
 8001d8a:	0020      	movs	r0, r4
 8001d8c:	f000 fed2 	bl	8002b34 <__clzsi2>
 8001d90:	0001      	movs	r1, r0
 8001d92:	0002      	movs	r2, r0
 8001d94:	390b      	subs	r1, #11
 8001d96:	231d      	movs	r3, #29
 8001d98:	0010      	movs	r0, r2
 8001d9a:	1a5b      	subs	r3, r3, r1
 8001d9c:	0031      	movs	r1, r6
 8001d9e:	0035      	movs	r5, r6
 8001da0:	3808      	subs	r0, #8
 8001da2:	4084      	lsls	r4, r0
 8001da4:	40d9      	lsrs	r1, r3
 8001da6:	4085      	lsls	r5, r0
 8001da8:	430c      	orrs	r4, r1
 8001daa:	489e      	ldr	r0, [pc, #632]	; (8002024 <__aeabi_dmul+0x3a4>)
 8001dac:	1a83      	subs	r3, r0, r2
 8001dae:	9300      	str	r3, [sp, #0]
 8001db0:	2300      	movs	r3, #0
 8001db2:	4699      	mov	r9, r3
 8001db4:	469b      	mov	fp, r3
 8001db6:	e786      	b.n	8001cc6 <__aeabi_dmul+0x46>
 8001db8:	0005      	movs	r5, r0
 8001dba:	4325      	orrs	r5, r4
 8001dbc:	d000      	beq.n	8001dc0 <__aeabi_dmul+0x140>
 8001dbe:	e11c      	b.n	8001ffa <__aeabi_dmul+0x37a>
 8001dc0:	2208      	movs	r2, #8
 8001dc2:	9300      	str	r3, [sp, #0]
 8001dc4:	2302      	movs	r3, #2
 8001dc6:	2400      	movs	r4, #0
 8001dc8:	4691      	mov	r9, r2
 8001dca:	469b      	mov	fp, r3
 8001dcc:	e77b      	b.n	8001cc6 <__aeabi_dmul+0x46>
 8001dce:	4652      	mov	r2, sl
 8001dd0:	4332      	orrs	r2, r6
 8001dd2:	d100      	bne.n	8001dd6 <__aeabi_dmul+0x156>
 8001dd4:	e10a      	b.n	8001fec <__aeabi_dmul+0x36c>
 8001dd6:	2e00      	cmp	r6, #0
 8001dd8:	d100      	bne.n	8001ddc <__aeabi_dmul+0x15c>
 8001dda:	e176      	b.n	80020ca <__aeabi_dmul+0x44a>
 8001ddc:	0030      	movs	r0, r6
 8001dde:	f000 fea9 	bl	8002b34 <__clzsi2>
 8001de2:	0002      	movs	r2, r0
 8001de4:	3a0b      	subs	r2, #11
 8001de6:	231d      	movs	r3, #29
 8001de8:	0001      	movs	r1, r0
 8001dea:	1a9b      	subs	r3, r3, r2
 8001dec:	4652      	mov	r2, sl
 8001dee:	3908      	subs	r1, #8
 8001df0:	40da      	lsrs	r2, r3
 8001df2:	408e      	lsls	r6, r1
 8001df4:	4316      	orrs	r6, r2
 8001df6:	4652      	mov	r2, sl
 8001df8:	408a      	lsls	r2, r1
 8001dfa:	9b00      	ldr	r3, [sp, #0]
 8001dfc:	4989      	ldr	r1, [pc, #548]	; (8002024 <__aeabi_dmul+0x3a4>)
 8001dfe:	1a18      	subs	r0, r3, r0
 8001e00:	0003      	movs	r3, r0
 8001e02:	468c      	mov	ip, r1
 8001e04:	4463      	add	r3, ip
 8001e06:	2000      	movs	r0, #0
 8001e08:	9300      	str	r3, [sp, #0]
 8001e0a:	e77a      	b.n	8001d02 <__aeabi_dmul+0x82>
 8001e0c:	2400      	movs	r4, #0
 8001e0e:	2500      	movs	r5, #0
 8001e10:	4a81      	ldr	r2, [pc, #516]	; (8002018 <__aeabi_dmul+0x398>)
 8001e12:	e7a5      	b.n	8001d60 <__aeabi_dmul+0xe0>
 8001e14:	0c2f      	lsrs	r7, r5, #16
 8001e16:	042d      	lsls	r5, r5, #16
 8001e18:	0c2d      	lsrs	r5, r5, #16
 8001e1a:	002b      	movs	r3, r5
 8001e1c:	0c11      	lsrs	r1, r2, #16
 8001e1e:	0412      	lsls	r2, r2, #16
 8001e20:	0c12      	lsrs	r2, r2, #16
 8001e22:	4353      	muls	r3, r2
 8001e24:	4698      	mov	r8, r3
 8001e26:	0013      	movs	r3, r2
 8001e28:	0028      	movs	r0, r5
 8001e2a:	437b      	muls	r3, r7
 8001e2c:	4699      	mov	r9, r3
 8001e2e:	4348      	muls	r0, r1
 8001e30:	4448      	add	r0, r9
 8001e32:	4683      	mov	fp, r0
 8001e34:	4640      	mov	r0, r8
 8001e36:	000b      	movs	r3, r1
 8001e38:	0c00      	lsrs	r0, r0, #16
 8001e3a:	4682      	mov	sl, r0
 8001e3c:	4658      	mov	r0, fp
 8001e3e:	437b      	muls	r3, r7
 8001e40:	4450      	add	r0, sl
 8001e42:	9302      	str	r3, [sp, #8]
 8001e44:	4581      	cmp	r9, r0
 8001e46:	d906      	bls.n	8001e56 <__aeabi_dmul+0x1d6>
 8001e48:	469a      	mov	sl, r3
 8001e4a:	2380      	movs	r3, #128	; 0x80
 8001e4c:	025b      	lsls	r3, r3, #9
 8001e4e:	4699      	mov	r9, r3
 8001e50:	44ca      	add	sl, r9
 8001e52:	4653      	mov	r3, sl
 8001e54:	9302      	str	r3, [sp, #8]
 8001e56:	0c03      	lsrs	r3, r0, #16
 8001e58:	469b      	mov	fp, r3
 8001e5a:	4643      	mov	r3, r8
 8001e5c:	041b      	lsls	r3, r3, #16
 8001e5e:	0400      	lsls	r0, r0, #16
 8001e60:	0c1b      	lsrs	r3, r3, #16
 8001e62:	4698      	mov	r8, r3
 8001e64:	0003      	movs	r3, r0
 8001e66:	4443      	add	r3, r8
 8001e68:	9304      	str	r3, [sp, #16]
 8001e6a:	0c33      	lsrs	r3, r6, #16
 8001e6c:	4699      	mov	r9, r3
 8001e6e:	002b      	movs	r3, r5
 8001e70:	0436      	lsls	r6, r6, #16
 8001e72:	0c36      	lsrs	r6, r6, #16
 8001e74:	4373      	muls	r3, r6
 8001e76:	4698      	mov	r8, r3
 8001e78:	0033      	movs	r3, r6
 8001e7a:	437b      	muls	r3, r7
 8001e7c:	469a      	mov	sl, r3
 8001e7e:	464b      	mov	r3, r9
 8001e80:	435d      	muls	r5, r3
 8001e82:	435f      	muls	r7, r3
 8001e84:	4643      	mov	r3, r8
 8001e86:	4455      	add	r5, sl
 8001e88:	0c18      	lsrs	r0, r3, #16
 8001e8a:	1940      	adds	r0, r0, r5
 8001e8c:	4582      	cmp	sl, r0
 8001e8e:	d903      	bls.n	8001e98 <__aeabi_dmul+0x218>
 8001e90:	2380      	movs	r3, #128	; 0x80
 8001e92:	025b      	lsls	r3, r3, #9
 8001e94:	469a      	mov	sl, r3
 8001e96:	4457      	add	r7, sl
 8001e98:	0c05      	lsrs	r5, r0, #16
 8001e9a:	19eb      	adds	r3, r5, r7
 8001e9c:	9305      	str	r3, [sp, #20]
 8001e9e:	4643      	mov	r3, r8
 8001ea0:	041d      	lsls	r5, r3, #16
 8001ea2:	0c2d      	lsrs	r5, r5, #16
 8001ea4:	0400      	lsls	r0, r0, #16
 8001ea6:	1940      	adds	r0, r0, r5
 8001ea8:	0c25      	lsrs	r5, r4, #16
 8001eaa:	0424      	lsls	r4, r4, #16
 8001eac:	0c24      	lsrs	r4, r4, #16
 8001eae:	0027      	movs	r7, r4
 8001eb0:	4357      	muls	r7, r2
 8001eb2:	436a      	muls	r2, r5
 8001eb4:	4690      	mov	r8, r2
 8001eb6:	002a      	movs	r2, r5
 8001eb8:	0c3b      	lsrs	r3, r7, #16
 8001eba:	469a      	mov	sl, r3
 8001ebc:	434a      	muls	r2, r1
 8001ebe:	4361      	muls	r1, r4
 8001ec0:	4441      	add	r1, r8
 8001ec2:	4451      	add	r1, sl
 8001ec4:	4483      	add	fp, r0
 8001ec6:	4588      	cmp	r8, r1
 8001ec8:	d903      	bls.n	8001ed2 <__aeabi_dmul+0x252>
 8001eca:	2380      	movs	r3, #128	; 0x80
 8001ecc:	025b      	lsls	r3, r3, #9
 8001ece:	4698      	mov	r8, r3
 8001ed0:	4442      	add	r2, r8
 8001ed2:	043f      	lsls	r7, r7, #16
 8001ed4:	0c0b      	lsrs	r3, r1, #16
 8001ed6:	0c3f      	lsrs	r7, r7, #16
 8001ed8:	0409      	lsls	r1, r1, #16
 8001eda:	19c9      	adds	r1, r1, r7
 8001edc:	0027      	movs	r7, r4
 8001ede:	4698      	mov	r8, r3
 8001ee0:	464b      	mov	r3, r9
 8001ee2:	4377      	muls	r7, r6
 8001ee4:	435c      	muls	r4, r3
 8001ee6:	436e      	muls	r6, r5
 8001ee8:	435d      	muls	r5, r3
 8001eea:	0c3b      	lsrs	r3, r7, #16
 8001eec:	4699      	mov	r9, r3
 8001eee:	19a4      	adds	r4, r4, r6
 8001ef0:	444c      	add	r4, r9
 8001ef2:	4442      	add	r2, r8
 8001ef4:	9503      	str	r5, [sp, #12]
 8001ef6:	42a6      	cmp	r6, r4
 8001ef8:	d904      	bls.n	8001f04 <__aeabi_dmul+0x284>
 8001efa:	2380      	movs	r3, #128	; 0x80
 8001efc:	025b      	lsls	r3, r3, #9
 8001efe:	4698      	mov	r8, r3
 8001f00:	4445      	add	r5, r8
 8001f02:	9503      	str	r5, [sp, #12]
 8001f04:	9b02      	ldr	r3, [sp, #8]
 8001f06:	043f      	lsls	r7, r7, #16
 8001f08:	445b      	add	r3, fp
 8001f0a:	001e      	movs	r6, r3
 8001f0c:	4283      	cmp	r3, r0
 8001f0e:	4180      	sbcs	r0, r0
 8001f10:	0423      	lsls	r3, r4, #16
 8001f12:	4698      	mov	r8, r3
 8001f14:	9b05      	ldr	r3, [sp, #20]
 8001f16:	0c3f      	lsrs	r7, r7, #16
 8001f18:	4447      	add	r7, r8
 8001f1a:	4698      	mov	r8, r3
 8001f1c:	1876      	adds	r6, r6, r1
 8001f1e:	428e      	cmp	r6, r1
 8001f20:	4189      	sbcs	r1, r1
 8001f22:	4447      	add	r7, r8
 8001f24:	4240      	negs	r0, r0
 8001f26:	183d      	adds	r5, r7, r0
 8001f28:	46a8      	mov	r8, r5
 8001f2a:	4693      	mov	fp, r2
 8001f2c:	4249      	negs	r1, r1
 8001f2e:	468a      	mov	sl, r1
 8001f30:	44c3      	add	fp, r8
 8001f32:	429f      	cmp	r7, r3
 8001f34:	41bf      	sbcs	r7, r7
 8001f36:	4580      	cmp	r8, r0
 8001f38:	4180      	sbcs	r0, r0
 8001f3a:	9b03      	ldr	r3, [sp, #12]
 8001f3c:	44da      	add	sl, fp
 8001f3e:	4698      	mov	r8, r3
 8001f40:	4653      	mov	r3, sl
 8001f42:	4240      	negs	r0, r0
 8001f44:	427f      	negs	r7, r7
 8001f46:	4307      	orrs	r7, r0
 8001f48:	0c24      	lsrs	r4, r4, #16
 8001f4a:	4593      	cmp	fp, r2
 8001f4c:	4192      	sbcs	r2, r2
 8001f4e:	458a      	cmp	sl, r1
 8001f50:	4189      	sbcs	r1, r1
 8001f52:	193f      	adds	r7, r7, r4
 8001f54:	0ddc      	lsrs	r4, r3, #23
 8001f56:	9b04      	ldr	r3, [sp, #16]
 8001f58:	0275      	lsls	r5, r6, #9
 8001f5a:	431d      	orrs	r5, r3
 8001f5c:	1e68      	subs	r0, r5, #1
 8001f5e:	4185      	sbcs	r5, r0
 8001f60:	4653      	mov	r3, sl
 8001f62:	4252      	negs	r2, r2
 8001f64:	4249      	negs	r1, r1
 8001f66:	430a      	orrs	r2, r1
 8001f68:	18bf      	adds	r7, r7, r2
 8001f6a:	4447      	add	r7, r8
 8001f6c:	0df6      	lsrs	r6, r6, #23
 8001f6e:	027f      	lsls	r7, r7, #9
 8001f70:	4335      	orrs	r5, r6
 8001f72:	025a      	lsls	r2, r3, #9
 8001f74:	433c      	orrs	r4, r7
 8001f76:	4315      	orrs	r5, r2
 8001f78:	01fb      	lsls	r3, r7, #7
 8001f7a:	d400      	bmi.n	8001f7e <__aeabi_dmul+0x2fe>
 8001f7c:	e0c1      	b.n	8002102 <__aeabi_dmul+0x482>
 8001f7e:	2101      	movs	r1, #1
 8001f80:	086a      	lsrs	r2, r5, #1
 8001f82:	400d      	ands	r5, r1
 8001f84:	4315      	orrs	r5, r2
 8001f86:	07e2      	lsls	r2, r4, #31
 8001f88:	4315      	orrs	r5, r2
 8001f8a:	0864      	lsrs	r4, r4, #1
 8001f8c:	4926      	ldr	r1, [pc, #152]	; (8002028 <__aeabi_dmul+0x3a8>)
 8001f8e:	4461      	add	r1, ip
 8001f90:	2900      	cmp	r1, #0
 8001f92:	dd56      	ble.n	8002042 <__aeabi_dmul+0x3c2>
 8001f94:	076b      	lsls	r3, r5, #29
 8001f96:	d009      	beq.n	8001fac <__aeabi_dmul+0x32c>
 8001f98:	220f      	movs	r2, #15
 8001f9a:	402a      	ands	r2, r5
 8001f9c:	2a04      	cmp	r2, #4
 8001f9e:	d005      	beq.n	8001fac <__aeabi_dmul+0x32c>
 8001fa0:	1d2a      	adds	r2, r5, #4
 8001fa2:	42aa      	cmp	r2, r5
 8001fa4:	41ad      	sbcs	r5, r5
 8001fa6:	426d      	negs	r5, r5
 8001fa8:	1964      	adds	r4, r4, r5
 8001faa:	0015      	movs	r5, r2
 8001fac:	01e3      	lsls	r3, r4, #7
 8001fae:	d504      	bpl.n	8001fba <__aeabi_dmul+0x33a>
 8001fb0:	2180      	movs	r1, #128	; 0x80
 8001fb2:	4a1e      	ldr	r2, [pc, #120]	; (800202c <__aeabi_dmul+0x3ac>)
 8001fb4:	00c9      	lsls	r1, r1, #3
 8001fb6:	4014      	ands	r4, r2
 8001fb8:	4461      	add	r1, ip
 8001fba:	4a1d      	ldr	r2, [pc, #116]	; (8002030 <__aeabi_dmul+0x3b0>)
 8001fbc:	4291      	cmp	r1, r2
 8001fbe:	dd00      	ble.n	8001fc2 <__aeabi_dmul+0x342>
 8001fc0:	e724      	b.n	8001e0c <__aeabi_dmul+0x18c>
 8001fc2:	0762      	lsls	r2, r4, #29
 8001fc4:	08ed      	lsrs	r5, r5, #3
 8001fc6:	0264      	lsls	r4, r4, #9
 8001fc8:	0549      	lsls	r1, r1, #21
 8001fca:	4315      	orrs	r5, r2
 8001fcc:	0b24      	lsrs	r4, r4, #12
 8001fce:	0d4a      	lsrs	r2, r1, #21
 8001fd0:	e6c6      	b.n	8001d60 <__aeabi_dmul+0xe0>
 8001fd2:	9701      	str	r7, [sp, #4]
 8001fd4:	e6b8      	b.n	8001d48 <__aeabi_dmul+0xc8>
 8001fd6:	4a10      	ldr	r2, [pc, #64]	; (8002018 <__aeabi_dmul+0x398>)
 8001fd8:	2003      	movs	r0, #3
 8001fda:	4694      	mov	ip, r2
 8001fdc:	4463      	add	r3, ip
 8001fde:	464a      	mov	r2, r9
 8001fe0:	9300      	str	r3, [sp, #0]
 8001fe2:	2303      	movs	r3, #3
 8001fe4:	431a      	orrs	r2, r3
 8001fe6:	4691      	mov	r9, r2
 8001fe8:	4652      	mov	r2, sl
 8001fea:	e68a      	b.n	8001d02 <__aeabi_dmul+0x82>
 8001fec:	4649      	mov	r1, r9
 8001fee:	2301      	movs	r3, #1
 8001ff0:	4319      	orrs	r1, r3
 8001ff2:	4689      	mov	r9, r1
 8001ff4:	2600      	movs	r6, #0
 8001ff6:	2001      	movs	r0, #1
 8001ff8:	e683      	b.n	8001d02 <__aeabi_dmul+0x82>
 8001ffa:	220c      	movs	r2, #12
 8001ffc:	9300      	str	r3, [sp, #0]
 8001ffe:	2303      	movs	r3, #3
 8002000:	0005      	movs	r5, r0
 8002002:	4691      	mov	r9, r2
 8002004:	469b      	mov	fp, r3
 8002006:	e65e      	b.n	8001cc6 <__aeabi_dmul+0x46>
 8002008:	2304      	movs	r3, #4
 800200a:	4699      	mov	r9, r3
 800200c:	2300      	movs	r3, #0
 800200e:	9300      	str	r3, [sp, #0]
 8002010:	3301      	adds	r3, #1
 8002012:	2400      	movs	r4, #0
 8002014:	469b      	mov	fp, r3
 8002016:	e656      	b.n	8001cc6 <__aeabi_dmul+0x46>
 8002018:	000007ff 	.word	0x000007ff
 800201c:	fffffc01 	.word	0xfffffc01
 8002020:	08019b10 	.word	0x08019b10
 8002024:	fffffc0d 	.word	0xfffffc0d
 8002028:	000003ff 	.word	0x000003ff
 800202c:	feffffff 	.word	0xfeffffff
 8002030:	000007fe 	.word	0x000007fe
 8002034:	2300      	movs	r3, #0
 8002036:	2480      	movs	r4, #128	; 0x80
 8002038:	2500      	movs	r5, #0
 800203a:	4a44      	ldr	r2, [pc, #272]	; (800214c <__aeabi_dmul+0x4cc>)
 800203c:	9301      	str	r3, [sp, #4]
 800203e:	0324      	lsls	r4, r4, #12
 8002040:	e68e      	b.n	8001d60 <__aeabi_dmul+0xe0>
 8002042:	2001      	movs	r0, #1
 8002044:	1a40      	subs	r0, r0, r1
 8002046:	2838      	cmp	r0, #56	; 0x38
 8002048:	dd00      	ble.n	800204c <__aeabi_dmul+0x3cc>
 800204a:	e686      	b.n	8001d5a <__aeabi_dmul+0xda>
 800204c:	281f      	cmp	r0, #31
 800204e:	dd5b      	ble.n	8002108 <__aeabi_dmul+0x488>
 8002050:	221f      	movs	r2, #31
 8002052:	0023      	movs	r3, r4
 8002054:	4252      	negs	r2, r2
 8002056:	1a51      	subs	r1, r2, r1
 8002058:	40cb      	lsrs	r3, r1
 800205a:	0019      	movs	r1, r3
 800205c:	2820      	cmp	r0, #32
 800205e:	d003      	beq.n	8002068 <__aeabi_dmul+0x3e8>
 8002060:	4a3b      	ldr	r2, [pc, #236]	; (8002150 <__aeabi_dmul+0x4d0>)
 8002062:	4462      	add	r2, ip
 8002064:	4094      	lsls	r4, r2
 8002066:	4325      	orrs	r5, r4
 8002068:	1e6a      	subs	r2, r5, #1
 800206a:	4195      	sbcs	r5, r2
 800206c:	002a      	movs	r2, r5
 800206e:	430a      	orrs	r2, r1
 8002070:	2107      	movs	r1, #7
 8002072:	000d      	movs	r5, r1
 8002074:	2400      	movs	r4, #0
 8002076:	4015      	ands	r5, r2
 8002078:	4211      	tst	r1, r2
 800207a:	d05b      	beq.n	8002134 <__aeabi_dmul+0x4b4>
 800207c:	210f      	movs	r1, #15
 800207e:	2400      	movs	r4, #0
 8002080:	4011      	ands	r1, r2
 8002082:	2904      	cmp	r1, #4
 8002084:	d053      	beq.n	800212e <__aeabi_dmul+0x4ae>
 8002086:	1d11      	adds	r1, r2, #4
 8002088:	4291      	cmp	r1, r2
 800208a:	4192      	sbcs	r2, r2
 800208c:	4252      	negs	r2, r2
 800208e:	18a4      	adds	r4, r4, r2
 8002090:	000a      	movs	r2, r1
 8002092:	0223      	lsls	r3, r4, #8
 8002094:	d54b      	bpl.n	800212e <__aeabi_dmul+0x4ae>
 8002096:	2201      	movs	r2, #1
 8002098:	2400      	movs	r4, #0
 800209a:	2500      	movs	r5, #0
 800209c:	e660      	b.n	8001d60 <__aeabi_dmul+0xe0>
 800209e:	2380      	movs	r3, #128	; 0x80
 80020a0:	031b      	lsls	r3, r3, #12
 80020a2:	421c      	tst	r4, r3
 80020a4:	d009      	beq.n	80020ba <__aeabi_dmul+0x43a>
 80020a6:	421e      	tst	r6, r3
 80020a8:	d107      	bne.n	80020ba <__aeabi_dmul+0x43a>
 80020aa:	4333      	orrs	r3, r6
 80020ac:	031c      	lsls	r4, r3, #12
 80020ae:	4643      	mov	r3, r8
 80020b0:	0015      	movs	r5, r2
 80020b2:	0b24      	lsrs	r4, r4, #12
 80020b4:	4a25      	ldr	r2, [pc, #148]	; (800214c <__aeabi_dmul+0x4cc>)
 80020b6:	9301      	str	r3, [sp, #4]
 80020b8:	e652      	b.n	8001d60 <__aeabi_dmul+0xe0>
 80020ba:	2280      	movs	r2, #128	; 0x80
 80020bc:	0312      	lsls	r2, r2, #12
 80020be:	4314      	orrs	r4, r2
 80020c0:	0324      	lsls	r4, r4, #12
 80020c2:	4a22      	ldr	r2, [pc, #136]	; (800214c <__aeabi_dmul+0x4cc>)
 80020c4:	0b24      	lsrs	r4, r4, #12
 80020c6:	9701      	str	r7, [sp, #4]
 80020c8:	e64a      	b.n	8001d60 <__aeabi_dmul+0xe0>
 80020ca:	f000 fd33 	bl	8002b34 <__clzsi2>
 80020ce:	0003      	movs	r3, r0
 80020d0:	001a      	movs	r2, r3
 80020d2:	3215      	adds	r2, #21
 80020d4:	3020      	adds	r0, #32
 80020d6:	2a1c      	cmp	r2, #28
 80020d8:	dc00      	bgt.n	80020dc <__aeabi_dmul+0x45c>
 80020da:	e684      	b.n	8001de6 <__aeabi_dmul+0x166>
 80020dc:	4656      	mov	r6, sl
 80020de:	3b08      	subs	r3, #8
 80020e0:	2200      	movs	r2, #0
 80020e2:	409e      	lsls	r6, r3
 80020e4:	e689      	b.n	8001dfa <__aeabi_dmul+0x17a>
 80020e6:	f000 fd25 	bl	8002b34 <__clzsi2>
 80020ea:	0001      	movs	r1, r0
 80020ec:	0002      	movs	r2, r0
 80020ee:	3115      	adds	r1, #21
 80020f0:	3220      	adds	r2, #32
 80020f2:	291c      	cmp	r1, #28
 80020f4:	dc00      	bgt.n	80020f8 <__aeabi_dmul+0x478>
 80020f6:	e64e      	b.n	8001d96 <__aeabi_dmul+0x116>
 80020f8:	0034      	movs	r4, r6
 80020fa:	3808      	subs	r0, #8
 80020fc:	2500      	movs	r5, #0
 80020fe:	4084      	lsls	r4, r0
 8002100:	e653      	b.n	8001daa <__aeabi_dmul+0x12a>
 8002102:	9b00      	ldr	r3, [sp, #0]
 8002104:	469c      	mov	ip, r3
 8002106:	e741      	b.n	8001f8c <__aeabi_dmul+0x30c>
 8002108:	4912      	ldr	r1, [pc, #72]	; (8002154 <__aeabi_dmul+0x4d4>)
 800210a:	0022      	movs	r2, r4
 800210c:	4461      	add	r1, ip
 800210e:	002e      	movs	r6, r5
 8002110:	408d      	lsls	r5, r1
 8002112:	408a      	lsls	r2, r1
 8002114:	40c6      	lsrs	r6, r0
 8002116:	1e69      	subs	r1, r5, #1
 8002118:	418d      	sbcs	r5, r1
 800211a:	4332      	orrs	r2, r6
 800211c:	432a      	orrs	r2, r5
 800211e:	40c4      	lsrs	r4, r0
 8002120:	0753      	lsls	r3, r2, #29
 8002122:	d0b6      	beq.n	8002092 <__aeabi_dmul+0x412>
 8002124:	210f      	movs	r1, #15
 8002126:	4011      	ands	r1, r2
 8002128:	2904      	cmp	r1, #4
 800212a:	d1ac      	bne.n	8002086 <__aeabi_dmul+0x406>
 800212c:	e7b1      	b.n	8002092 <__aeabi_dmul+0x412>
 800212e:	0765      	lsls	r5, r4, #29
 8002130:	0264      	lsls	r4, r4, #9
 8002132:	0b24      	lsrs	r4, r4, #12
 8002134:	08d2      	lsrs	r2, r2, #3
 8002136:	4315      	orrs	r5, r2
 8002138:	2200      	movs	r2, #0
 800213a:	e611      	b.n	8001d60 <__aeabi_dmul+0xe0>
 800213c:	2280      	movs	r2, #128	; 0x80
 800213e:	0312      	lsls	r2, r2, #12
 8002140:	4314      	orrs	r4, r2
 8002142:	0324      	lsls	r4, r4, #12
 8002144:	4a01      	ldr	r2, [pc, #4]	; (800214c <__aeabi_dmul+0x4cc>)
 8002146:	0b24      	lsrs	r4, r4, #12
 8002148:	e60a      	b.n	8001d60 <__aeabi_dmul+0xe0>
 800214a:	46c0      	nop			; (mov r8, r8)
 800214c:	000007ff 	.word	0x000007ff
 8002150:	0000043e 	.word	0x0000043e
 8002154:	0000041e 	.word	0x0000041e

08002158 <__aeabi_dsub>:
 8002158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800215a:	4657      	mov	r7, sl
 800215c:	464e      	mov	r6, r9
 800215e:	4645      	mov	r5, r8
 8002160:	46de      	mov	lr, fp
 8002162:	0004      	movs	r4, r0
 8002164:	b5e0      	push	{r5, r6, r7, lr}
 8002166:	001f      	movs	r7, r3
 8002168:	0010      	movs	r0, r2
 800216a:	030b      	lsls	r3, r1, #12
 800216c:	0f62      	lsrs	r2, r4, #29
 800216e:	004e      	lsls	r6, r1, #1
 8002170:	0fcd      	lsrs	r5, r1, #31
 8002172:	0a5b      	lsrs	r3, r3, #9
 8002174:	0339      	lsls	r1, r7, #12
 8002176:	4313      	orrs	r3, r2
 8002178:	0a49      	lsrs	r1, r1, #9
 800217a:	00e2      	lsls	r2, r4, #3
 800217c:	0f44      	lsrs	r4, r0, #29
 800217e:	4321      	orrs	r1, r4
 8002180:	4cc2      	ldr	r4, [pc, #776]	; (800248c <__aeabi_dsub+0x334>)
 8002182:	4691      	mov	r9, r2
 8002184:	4692      	mov	sl, r2
 8002186:	00c0      	lsls	r0, r0, #3
 8002188:	007a      	lsls	r2, r7, #1
 800218a:	4680      	mov	r8, r0
 800218c:	0d76      	lsrs	r6, r6, #21
 800218e:	0d52      	lsrs	r2, r2, #21
 8002190:	0fff      	lsrs	r7, r7, #31
 8002192:	42a2      	cmp	r2, r4
 8002194:	d100      	bne.n	8002198 <__aeabi_dsub+0x40>
 8002196:	e0b4      	b.n	8002302 <__aeabi_dsub+0x1aa>
 8002198:	2401      	movs	r4, #1
 800219a:	4067      	eors	r7, r4
 800219c:	46bb      	mov	fp, r7
 800219e:	42bd      	cmp	r5, r7
 80021a0:	d100      	bne.n	80021a4 <__aeabi_dsub+0x4c>
 80021a2:	e088      	b.n	80022b6 <__aeabi_dsub+0x15e>
 80021a4:	1ab4      	subs	r4, r6, r2
 80021a6:	46a4      	mov	ip, r4
 80021a8:	2c00      	cmp	r4, #0
 80021aa:	dc00      	bgt.n	80021ae <__aeabi_dsub+0x56>
 80021ac:	e0b2      	b.n	8002314 <__aeabi_dsub+0x1bc>
 80021ae:	2a00      	cmp	r2, #0
 80021b0:	d100      	bne.n	80021b4 <__aeabi_dsub+0x5c>
 80021b2:	e0c5      	b.n	8002340 <__aeabi_dsub+0x1e8>
 80021b4:	4ab5      	ldr	r2, [pc, #724]	; (800248c <__aeabi_dsub+0x334>)
 80021b6:	4296      	cmp	r6, r2
 80021b8:	d100      	bne.n	80021bc <__aeabi_dsub+0x64>
 80021ba:	e28b      	b.n	80026d4 <__aeabi_dsub+0x57c>
 80021bc:	2280      	movs	r2, #128	; 0x80
 80021be:	0412      	lsls	r2, r2, #16
 80021c0:	4311      	orrs	r1, r2
 80021c2:	4662      	mov	r2, ip
 80021c4:	2a38      	cmp	r2, #56	; 0x38
 80021c6:	dd00      	ble.n	80021ca <__aeabi_dsub+0x72>
 80021c8:	e1a1      	b.n	800250e <__aeabi_dsub+0x3b6>
 80021ca:	2a1f      	cmp	r2, #31
 80021cc:	dd00      	ble.n	80021d0 <__aeabi_dsub+0x78>
 80021ce:	e216      	b.n	80025fe <__aeabi_dsub+0x4a6>
 80021d0:	2720      	movs	r7, #32
 80021d2:	000c      	movs	r4, r1
 80021d4:	1abf      	subs	r7, r7, r2
 80021d6:	40bc      	lsls	r4, r7
 80021d8:	0002      	movs	r2, r0
 80021da:	46a0      	mov	r8, r4
 80021dc:	4664      	mov	r4, ip
 80021de:	40b8      	lsls	r0, r7
 80021e0:	40e2      	lsrs	r2, r4
 80021e2:	4644      	mov	r4, r8
 80021e4:	4314      	orrs	r4, r2
 80021e6:	0002      	movs	r2, r0
 80021e8:	1e50      	subs	r0, r2, #1
 80021ea:	4182      	sbcs	r2, r0
 80021ec:	4660      	mov	r0, ip
 80021ee:	40c1      	lsrs	r1, r0
 80021f0:	4322      	orrs	r2, r4
 80021f2:	1a5b      	subs	r3, r3, r1
 80021f4:	4649      	mov	r1, r9
 80021f6:	1a8c      	subs	r4, r1, r2
 80021f8:	45a1      	cmp	r9, r4
 80021fa:	4192      	sbcs	r2, r2
 80021fc:	4252      	negs	r2, r2
 80021fe:	1a9b      	subs	r3, r3, r2
 8002200:	4698      	mov	r8, r3
 8002202:	4643      	mov	r3, r8
 8002204:	021b      	lsls	r3, r3, #8
 8002206:	d400      	bmi.n	800220a <__aeabi_dsub+0xb2>
 8002208:	e117      	b.n	800243a <__aeabi_dsub+0x2e2>
 800220a:	4643      	mov	r3, r8
 800220c:	025b      	lsls	r3, r3, #9
 800220e:	0a5b      	lsrs	r3, r3, #9
 8002210:	4698      	mov	r8, r3
 8002212:	4643      	mov	r3, r8
 8002214:	2b00      	cmp	r3, #0
 8002216:	d100      	bne.n	800221a <__aeabi_dsub+0xc2>
 8002218:	e16c      	b.n	80024f4 <__aeabi_dsub+0x39c>
 800221a:	4640      	mov	r0, r8
 800221c:	f000 fc8a 	bl	8002b34 <__clzsi2>
 8002220:	0002      	movs	r2, r0
 8002222:	3a08      	subs	r2, #8
 8002224:	2120      	movs	r1, #32
 8002226:	0020      	movs	r0, r4
 8002228:	4643      	mov	r3, r8
 800222a:	1a89      	subs	r1, r1, r2
 800222c:	4093      	lsls	r3, r2
 800222e:	40c8      	lsrs	r0, r1
 8002230:	4094      	lsls	r4, r2
 8002232:	4303      	orrs	r3, r0
 8002234:	4296      	cmp	r6, r2
 8002236:	dd00      	ble.n	800223a <__aeabi_dsub+0xe2>
 8002238:	e157      	b.n	80024ea <__aeabi_dsub+0x392>
 800223a:	1b96      	subs	r6, r2, r6
 800223c:	1c71      	adds	r1, r6, #1
 800223e:	291f      	cmp	r1, #31
 8002240:	dd00      	ble.n	8002244 <__aeabi_dsub+0xec>
 8002242:	e1cb      	b.n	80025dc <__aeabi_dsub+0x484>
 8002244:	2220      	movs	r2, #32
 8002246:	0018      	movs	r0, r3
 8002248:	0026      	movs	r6, r4
 800224a:	1a52      	subs	r2, r2, r1
 800224c:	4094      	lsls	r4, r2
 800224e:	4090      	lsls	r0, r2
 8002250:	40ce      	lsrs	r6, r1
 8002252:	40cb      	lsrs	r3, r1
 8002254:	1e62      	subs	r2, r4, #1
 8002256:	4194      	sbcs	r4, r2
 8002258:	4330      	orrs	r0, r6
 800225a:	4698      	mov	r8, r3
 800225c:	2600      	movs	r6, #0
 800225e:	4304      	orrs	r4, r0
 8002260:	0763      	lsls	r3, r4, #29
 8002262:	d009      	beq.n	8002278 <__aeabi_dsub+0x120>
 8002264:	230f      	movs	r3, #15
 8002266:	4023      	ands	r3, r4
 8002268:	2b04      	cmp	r3, #4
 800226a:	d005      	beq.n	8002278 <__aeabi_dsub+0x120>
 800226c:	1d23      	adds	r3, r4, #4
 800226e:	42a3      	cmp	r3, r4
 8002270:	41a4      	sbcs	r4, r4
 8002272:	4264      	negs	r4, r4
 8002274:	44a0      	add	r8, r4
 8002276:	001c      	movs	r4, r3
 8002278:	4643      	mov	r3, r8
 800227a:	021b      	lsls	r3, r3, #8
 800227c:	d400      	bmi.n	8002280 <__aeabi_dsub+0x128>
 800227e:	e0df      	b.n	8002440 <__aeabi_dsub+0x2e8>
 8002280:	4b82      	ldr	r3, [pc, #520]	; (800248c <__aeabi_dsub+0x334>)
 8002282:	3601      	adds	r6, #1
 8002284:	429e      	cmp	r6, r3
 8002286:	d100      	bne.n	800228a <__aeabi_dsub+0x132>
 8002288:	e0fb      	b.n	8002482 <__aeabi_dsub+0x32a>
 800228a:	4642      	mov	r2, r8
 800228c:	4b80      	ldr	r3, [pc, #512]	; (8002490 <__aeabi_dsub+0x338>)
 800228e:	08e4      	lsrs	r4, r4, #3
 8002290:	401a      	ands	r2, r3
 8002292:	0013      	movs	r3, r2
 8002294:	0571      	lsls	r1, r6, #21
 8002296:	0752      	lsls	r2, r2, #29
 8002298:	025b      	lsls	r3, r3, #9
 800229a:	4322      	orrs	r2, r4
 800229c:	0b1b      	lsrs	r3, r3, #12
 800229e:	0d49      	lsrs	r1, r1, #21
 80022a0:	0509      	lsls	r1, r1, #20
 80022a2:	07ed      	lsls	r5, r5, #31
 80022a4:	4319      	orrs	r1, r3
 80022a6:	4329      	orrs	r1, r5
 80022a8:	0010      	movs	r0, r2
 80022aa:	bcf0      	pop	{r4, r5, r6, r7}
 80022ac:	46bb      	mov	fp, r7
 80022ae:	46b2      	mov	sl, r6
 80022b0:	46a9      	mov	r9, r5
 80022b2:	46a0      	mov	r8, r4
 80022b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80022b6:	1ab4      	subs	r4, r6, r2
 80022b8:	46a4      	mov	ip, r4
 80022ba:	2c00      	cmp	r4, #0
 80022bc:	dd58      	ble.n	8002370 <__aeabi_dsub+0x218>
 80022be:	2a00      	cmp	r2, #0
 80022c0:	d100      	bne.n	80022c4 <__aeabi_dsub+0x16c>
 80022c2:	e09e      	b.n	8002402 <__aeabi_dsub+0x2aa>
 80022c4:	4a71      	ldr	r2, [pc, #452]	; (800248c <__aeabi_dsub+0x334>)
 80022c6:	4296      	cmp	r6, r2
 80022c8:	d100      	bne.n	80022cc <__aeabi_dsub+0x174>
 80022ca:	e13b      	b.n	8002544 <__aeabi_dsub+0x3ec>
 80022cc:	2280      	movs	r2, #128	; 0x80
 80022ce:	0412      	lsls	r2, r2, #16
 80022d0:	4311      	orrs	r1, r2
 80022d2:	4662      	mov	r2, ip
 80022d4:	2a38      	cmp	r2, #56	; 0x38
 80022d6:	dd00      	ble.n	80022da <__aeabi_dsub+0x182>
 80022d8:	e0c1      	b.n	800245e <__aeabi_dsub+0x306>
 80022da:	2a1f      	cmp	r2, #31
 80022dc:	dc00      	bgt.n	80022e0 <__aeabi_dsub+0x188>
 80022de:	e1bb      	b.n	8002658 <__aeabi_dsub+0x500>
 80022e0:	000c      	movs	r4, r1
 80022e2:	3a20      	subs	r2, #32
 80022e4:	40d4      	lsrs	r4, r2
 80022e6:	0022      	movs	r2, r4
 80022e8:	4664      	mov	r4, ip
 80022ea:	2c20      	cmp	r4, #32
 80022ec:	d004      	beq.n	80022f8 <__aeabi_dsub+0x1a0>
 80022ee:	2740      	movs	r7, #64	; 0x40
 80022f0:	1b3f      	subs	r7, r7, r4
 80022f2:	40b9      	lsls	r1, r7
 80022f4:	4308      	orrs	r0, r1
 80022f6:	4680      	mov	r8, r0
 80022f8:	4644      	mov	r4, r8
 80022fa:	1e61      	subs	r1, r4, #1
 80022fc:	418c      	sbcs	r4, r1
 80022fe:	4314      	orrs	r4, r2
 8002300:	e0b1      	b.n	8002466 <__aeabi_dsub+0x30e>
 8002302:	000c      	movs	r4, r1
 8002304:	4304      	orrs	r4, r0
 8002306:	d02a      	beq.n	800235e <__aeabi_dsub+0x206>
 8002308:	46bb      	mov	fp, r7
 800230a:	42bd      	cmp	r5, r7
 800230c:	d02d      	beq.n	800236a <__aeabi_dsub+0x212>
 800230e:	4c61      	ldr	r4, [pc, #388]	; (8002494 <__aeabi_dsub+0x33c>)
 8002310:	46a4      	mov	ip, r4
 8002312:	44b4      	add	ip, r6
 8002314:	4664      	mov	r4, ip
 8002316:	2c00      	cmp	r4, #0
 8002318:	d05c      	beq.n	80023d4 <__aeabi_dsub+0x27c>
 800231a:	1b94      	subs	r4, r2, r6
 800231c:	46a4      	mov	ip, r4
 800231e:	2e00      	cmp	r6, #0
 8002320:	d000      	beq.n	8002324 <__aeabi_dsub+0x1cc>
 8002322:	e115      	b.n	8002550 <__aeabi_dsub+0x3f8>
 8002324:	464d      	mov	r5, r9
 8002326:	431d      	orrs	r5, r3
 8002328:	d100      	bne.n	800232c <__aeabi_dsub+0x1d4>
 800232a:	e1c3      	b.n	80026b4 <__aeabi_dsub+0x55c>
 800232c:	1e65      	subs	r5, r4, #1
 800232e:	2c01      	cmp	r4, #1
 8002330:	d100      	bne.n	8002334 <__aeabi_dsub+0x1dc>
 8002332:	e20c      	b.n	800274e <__aeabi_dsub+0x5f6>
 8002334:	4e55      	ldr	r6, [pc, #340]	; (800248c <__aeabi_dsub+0x334>)
 8002336:	42b4      	cmp	r4, r6
 8002338:	d100      	bne.n	800233c <__aeabi_dsub+0x1e4>
 800233a:	e1f8      	b.n	800272e <__aeabi_dsub+0x5d6>
 800233c:	46ac      	mov	ip, r5
 800233e:	e10e      	b.n	800255e <__aeabi_dsub+0x406>
 8002340:	000a      	movs	r2, r1
 8002342:	4302      	orrs	r2, r0
 8002344:	d100      	bne.n	8002348 <__aeabi_dsub+0x1f0>
 8002346:	e136      	b.n	80025b6 <__aeabi_dsub+0x45e>
 8002348:	0022      	movs	r2, r4
 800234a:	3a01      	subs	r2, #1
 800234c:	2c01      	cmp	r4, #1
 800234e:	d100      	bne.n	8002352 <__aeabi_dsub+0x1fa>
 8002350:	e1c6      	b.n	80026e0 <__aeabi_dsub+0x588>
 8002352:	4c4e      	ldr	r4, [pc, #312]	; (800248c <__aeabi_dsub+0x334>)
 8002354:	45a4      	cmp	ip, r4
 8002356:	d100      	bne.n	800235a <__aeabi_dsub+0x202>
 8002358:	e0f4      	b.n	8002544 <__aeabi_dsub+0x3ec>
 800235a:	4694      	mov	ip, r2
 800235c:	e731      	b.n	80021c2 <__aeabi_dsub+0x6a>
 800235e:	2401      	movs	r4, #1
 8002360:	4067      	eors	r7, r4
 8002362:	46bb      	mov	fp, r7
 8002364:	42bd      	cmp	r5, r7
 8002366:	d000      	beq.n	800236a <__aeabi_dsub+0x212>
 8002368:	e71c      	b.n	80021a4 <__aeabi_dsub+0x4c>
 800236a:	4c4a      	ldr	r4, [pc, #296]	; (8002494 <__aeabi_dsub+0x33c>)
 800236c:	46a4      	mov	ip, r4
 800236e:	44b4      	add	ip, r6
 8002370:	4664      	mov	r4, ip
 8002372:	2c00      	cmp	r4, #0
 8002374:	d100      	bne.n	8002378 <__aeabi_dsub+0x220>
 8002376:	e0cf      	b.n	8002518 <__aeabi_dsub+0x3c0>
 8002378:	1b94      	subs	r4, r2, r6
 800237a:	46a4      	mov	ip, r4
 800237c:	2e00      	cmp	r6, #0
 800237e:	d100      	bne.n	8002382 <__aeabi_dsub+0x22a>
 8002380:	e15c      	b.n	800263c <__aeabi_dsub+0x4e4>
 8002382:	4e42      	ldr	r6, [pc, #264]	; (800248c <__aeabi_dsub+0x334>)
 8002384:	42b2      	cmp	r2, r6
 8002386:	d100      	bne.n	800238a <__aeabi_dsub+0x232>
 8002388:	e1ec      	b.n	8002764 <__aeabi_dsub+0x60c>
 800238a:	2680      	movs	r6, #128	; 0x80
 800238c:	0436      	lsls	r6, r6, #16
 800238e:	4333      	orrs	r3, r6
 8002390:	4664      	mov	r4, ip
 8002392:	2c38      	cmp	r4, #56	; 0x38
 8002394:	dd00      	ble.n	8002398 <__aeabi_dsub+0x240>
 8002396:	e1b3      	b.n	8002700 <__aeabi_dsub+0x5a8>
 8002398:	2c1f      	cmp	r4, #31
 800239a:	dd00      	ble.n	800239e <__aeabi_dsub+0x246>
 800239c:	e238      	b.n	8002810 <__aeabi_dsub+0x6b8>
 800239e:	2620      	movs	r6, #32
 80023a0:	1b36      	subs	r6, r6, r4
 80023a2:	001c      	movs	r4, r3
 80023a4:	40b4      	lsls	r4, r6
 80023a6:	464f      	mov	r7, r9
 80023a8:	46a0      	mov	r8, r4
 80023aa:	4664      	mov	r4, ip
 80023ac:	40e7      	lsrs	r7, r4
 80023ae:	4644      	mov	r4, r8
 80023b0:	433c      	orrs	r4, r7
 80023b2:	464f      	mov	r7, r9
 80023b4:	40b7      	lsls	r7, r6
 80023b6:	003e      	movs	r6, r7
 80023b8:	1e77      	subs	r7, r6, #1
 80023ba:	41be      	sbcs	r6, r7
 80023bc:	4334      	orrs	r4, r6
 80023be:	4666      	mov	r6, ip
 80023c0:	40f3      	lsrs	r3, r6
 80023c2:	18c9      	adds	r1, r1, r3
 80023c4:	1824      	adds	r4, r4, r0
 80023c6:	4284      	cmp	r4, r0
 80023c8:	419b      	sbcs	r3, r3
 80023ca:	425b      	negs	r3, r3
 80023cc:	4698      	mov	r8, r3
 80023ce:	0016      	movs	r6, r2
 80023d0:	4488      	add	r8, r1
 80023d2:	e04e      	b.n	8002472 <__aeabi_dsub+0x31a>
 80023d4:	4a30      	ldr	r2, [pc, #192]	; (8002498 <__aeabi_dsub+0x340>)
 80023d6:	1c74      	adds	r4, r6, #1
 80023d8:	4214      	tst	r4, r2
 80023da:	d000      	beq.n	80023de <__aeabi_dsub+0x286>
 80023dc:	e0d6      	b.n	800258c <__aeabi_dsub+0x434>
 80023de:	464a      	mov	r2, r9
 80023e0:	431a      	orrs	r2, r3
 80023e2:	2e00      	cmp	r6, #0
 80023e4:	d000      	beq.n	80023e8 <__aeabi_dsub+0x290>
 80023e6:	e15b      	b.n	80026a0 <__aeabi_dsub+0x548>
 80023e8:	2a00      	cmp	r2, #0
 80023ea:	d100      	bne.n	80023ee <__aeabi_dsub+0x296>
 80023ec:	e1a5      	b.n	800273a <__aeabi_dsub+0x5e2>
 80023ee:	000a      	movs	r2, r1
 80023f0:	4302      	orrs	r2, r0
 80023f2:	d000      	beq.n	80023f6 <__aeabi_dsub+0x29e>
 80023f4:	e1bb      	b.n	800276e <__aeabi_dsub+0x616>
 80023f6:	464a      	mov	r2, r9
 80023f8:	0759      	lsls	r1, r3, #29
 80023fa:	08d2      	lsrs	r2, r2, #3
 80023fc:	430a      	orrs	r2, r1
 80023fe:	08db      	lsrs	r3, r3, #3
 8002400:	e027      	b.n	8002452 <__aeabi_dsub+0x2fa>
 8002402:	000a      	movs	r2, r1
 8002404:	4302      	orrs	r2, r0
 8002406:	d100      	bne.n	800240a <__aeabi_dsub+0x2b2>
 8002408:	e174      	b.n	80026f4 <__aeabi_dsub+0x59c>
 800240a:	0022      	movs	r2, r4
 800240c:	3a01      	subs	r2, #1
 800240e:	2c01      	cmp	r4, #1
 8002410:	d005      	beq.n	800241e <__aeabi_dsub+0x2c6>
 8002412:	4c1e      	ldr	r4, [pc, #120]	; (800248c <__aeabi_dsub+0x334>)
 8002414:	45a4      	cmp	ip, r4
 8002416:	d100      	bne.n	800241a <__aeabi_dsub+0x2c2>
 8002418:	e094      	b.n	8002544 <__aeabi_dsub+0x3ec>
 800241a:	4694      	mov	ip, r2
 800241c:	e759      	b.n	80022d2 <__aeabi_dsub+0x17a>
 800241e:	4448      	add	r0, r9
 8002420:	4548      	cmp	r0, r9
 8002422:	4192      	sbcs	r2, r2
 8002424:	185b      	adds	r3, r3, r1
 8002426:	4698      	mov	r8, r3
 8002428:	0004      	movs	r4, r0
 800242a:	4252      	negs	r2, r2
 800242c:	4490      	add	r8, r2
 800242e:	4643      	mov	r3, r8
 8002430:	2602      	movs	r6, #2
 8002432:	021b      	lsls	r3, r3, #8
 8002434:	d500      	bpl.n	8002438 <__aeabi_dsub+0x2e0>
 8002436:	e0c4      	b.n	80025c2 <__aeabi_dsub+0x46a>
 8002438:	3e01      	subs	r6, #1
 800243a:	0763      	lsls	r3, r4, #29
 800243c:	d000      	beq.n	8002440 <__aeabi_dsub+0x2e8>
 800243e:	e711      	b.n	8002264 <__aeabi_dsub+0x10c>
 8002440:	4643      	mov	r3, r8
 8002442:	46b4      	mov	ip, r6
 8002444:	0759      	lsls	r1, r3, #29
 8002446:	08e2      	lsrs	r2, r4, #3
 8002448:	430a      	orrs	r2, r1
 800244a:	08db      	lsrs	r3, r3, #3
 800244c:	490f      	ldr	r1, [pc, #60]	; (800248c <__aeabi_dsub+0x334>)
 800244e:	458c      	cmp	ip, r1
 8002450:	d040      	beq.n	80024d4 <__aeabi_dsub+0x37c>
 8002452:	4661      	mov	r1, ip
 8002454:	031b      	lsls	r3, r3, #12
 8002456:	0549      	lsls	r1, r1, #21
 8002458:	0b1b      	lsrs	r3, r3, #12
 800245a:	0d49      	lsrs	r1, r1, #21
 800245c:	e720      	b.n	80022a0 <__aeabi_dsub+0x148>
 800245e:	4301      	orrs	r1, r0
 8002460:	000c      	movs	r4, r1
 8002462:	1e61      	subs	r1, r4, #1
 8002464:	418c      	sbcs	r4, r1
 8002466:	444c      	add	r4, r9
 8002468:	454c      	cmp	r4, r9
 800246a:	4192      	sbcs	r2, r2
 800246c:	4252      	negs	r2, r2
 800246e:	4690      	mov	r8, r2
 8002470:	4498      	add	r8, r3
 8002472:	4643      	mov	r3, r8
 8002474:	021b      	lsls	r3, r3, #8
 8002476:	d5e0      	bpl.n	800243a <__aeabi_dsub+0x2e2>
 8002478:	4b04      	ldr	r3, [pc, #16]	; (800248c <__aeabi_dsub+0x334>)
 800247a:	3601      	adds	r6, #1
 800247c:	429e      	cmp	r6, r3
 800247e:	d000      	beq.n	8002482 <__aeabi_dsub+0x32a>
 8002480:	e09f      	b.n	80025c2 <__aeabi_dsub+0x46a>
 8002482:	0031      	movs	r1, r6
 8002484:	2300      	movs	r3, #0
 8002486:	2200      	movs	r2, #0
 8002488:	e70a      	b.n	80022a0 <__aeabi_dsub+0x148>
 800248a:	46c0      	nop			; (mov r8, r8)
 800248c:	000007ff 	.word	0x000007ff
 8002490:	ff7fffff 	.word	0xff7fffff
 8002494:	fffff801 	.word	0xfffff801
 8002498:	000007fe 	.word	0x000007fe
 800249c:	2a00      	cmp	r2, #0
 800249e:	d100      	bne.n	80024a2 <__aeabi_dsub+0x34a>
 80024a0:	e160      	b.n	8002764 <__aeabi_dsub+0x60c>
 80024a2:	000a      	movs	r2, r1
 80024a4:	4302      	orrs	r2, r0
 80024a6:	d04d      	beq.n	8002544 <__aeabi_dsub+0x3ec>
 80024a8:	464a      	mov	r2, r9
 80024aa:	075c      	lsls	r4, r3, #29
 80024ac:	08d2      	lsrs	r2, r2, #3
 80024ae:	4322      	orrs	r2, r4
 80024b0:	2480      	movs	r4, #128	; 0x80
 80024b2:	08db      	lsrs	r3, r3, #3
 80024b4:	0324      	lsls	r4, r4, #12
 80024b6:	4223      	tst	r3, r4
 80024b8:	d007      	beq.n	80024ca <__aeabi_dsub+0x372>
 80024ba:	08ce      	lsrs	r6, r1, #3
 80024bc:	4226      	tst	r6, r4
 80024be:	d104      	bne.n	80024ca <__aeabi_dsub+0x372>
 80024c0:	465d      	mov	r5, fp
 80024c2:	0033      	movs	r3, r6
 80024c4:	08c2      	lsrs	r2, r0, #3
 80024c6:	0749      	lsls	r1, r1, #29
 80024c8:	430a      	orrs	r2, r1
 80024ca:	0f51      	lsrs	r1, r2, #29
 80024cc:	00d2      	lsls	r2, r2, #3
 80024ce:	08d2      	lsrs	r2, r2, #3
 80024d0:	0749      	lsls	r1, r1, #29
 80024d2:	430a      	orrs	r2, r1
 80024d4:	0011      	movs	r1, r2
 80024d6:	4319      	orrs	r1, r3
 80024d8:	d100      	bne.n	80024dc <__aeabi_dsub+0x384>
 80024da:	e1c8      	b.n	800286e <__aeabi_dsub+0x716>
 80024dc:	2180      	movs	r1, #128	; 0x80
 80024de:	0309      	lsls	r1, r1, #12
 80024e0:	430b      	orrs	r3, r1
 80024e2:	031b      	lsls	r3, r3, #12
 80024e4:	49d5      	ldr	r1, [pc, #852]	; (800283c <__aeabi_dsub+0x6e4>)
 80024e6:	0b1b      	lsrs	r3, r3, #12
 80024e8:	e6da      	b.n	80022a0 <__aeabi_dsub+0x148>
 80024ea:	49d5      	ldr	r1, [pc, #852]	; (8002840 <__aeabi_dsub+0x6e8>)
 80024ec:	1ab6      	subs	r6, r6, r2
 80024ee:	400b      	ands	r3, r1
 80024f0:	4698      	mov	r8, r3
 80024f2:	e6b5      	b.n	8002260 <__aeabi_dsub+0x108>
 80024f4:	0020      	movs	r0, r4
 80024f6:	f000 fb1d 	bl	8002b34 <__clzsi2>
 80024fa:	0002      	movs	r2, r0
 80024fc:	3218      	adds	r2, #24
 80024fe:	2a1f      	cmp	r2, #31
 8002500:	dc00      	bgt.n	8002504 <__aeabi_dsub+0x3ac>
 8002502:	e68f      	b.n	8002224 <__aeabi_dsub+0xcc>
 8002504:	0023      	movs	r3, r4
 8002506:	3808      	subs	r0, #8
 8002508:	4083      	lsls	r3, r0
 800250a:	2400      	movs	r4, #0
 800250c:	e692      	b.n	8002234 <__aeabi_dsub+0xdc>
 800250e:	4308      	orrs	r0, r1
 8002510:	0002      	movs	r2, r0
 8002512:	1e50      	subs	r0, r2, #1
 8002514:	4182      	sbcs	r2, r0
 8002516:	e66d      	b.n	80021f4 <__aeabi_dsub+0x9c>
 8002518:	4cca      	ldr	r4, [pc, #808]	; (8002844 <__aeabi_dsub+0x6ec>)
 800251a:	1c72      	adds	r2, r6, #1
 800251c:	4222      	tst	r2, r4
 800251e:	d000      	beq.n	8002522 <__aeabi_dsub+0x3ca>
 8002520:	e0ad      	b.n	800267e <__aeabi_dsub+0x526>
 8002522:	464a      	mov	r2, r9
 8002524:	431a      	orrs	r2, r3
 8002526:	2e00      	cmp	r6, #0
 8002528:	d1b8      	bne.n	800249c <__aeabi_dsub+0x344>
 800252a:	2a00      	cmp	r2, #0
 800252c:	d100      	bne.n	8002530 <__aeabi_dsub+0x3d8>
 800252e:	e158      	b.n	80027e2 <__aeabi_dsub+0x68a>
 8002530:	000a      	movs	r2, r1
 8002532:	4302      	orrs	r2, r0
 8002534:	d000      	beq.n	8002538 <__aeabi_dsub+0x3e0>
 8002536:	e159      	b.n	80027ec <__aeabi_dsub+0x694>
 8002538:	464a      	mov	r2, r9
 800253a:	0759      	lsls	r1, r3, #29
 800253c:	08d2      	lsrs	r2, r2, #3
 800253e:	430a      	orrs	r2, r1
 8002540:	08db      	lsrs	r3, r3, #3
 8002542:	e786      	b.n	8002452 <__aeabi_dsub+0x2fa>
 8002544:	464a      	mov	r2, r9
 8002546:	0759      	lsls	r1, r3, #29
 8002548:	08d2      	lsrs	r2, r2, #3
 800254a:	430a      	orrs	r2, r1
 800254c:	08db      	lsrs	r3, r3, #3
 800254e:	e7c1      	b.n	80024d4 <__aeabi_dsub+0x37c>
 8002550:	4dba      	ldr	r5, [pc, #744]	; (800283c <__aeabi_dsub+0x6e4>)
 8002552:	42aa      	cmp	r2, r5
 8002554:	d100      	bne.n	8002558 <__aeabi_dsub+0x400>
 8002556:	e11e      	b.n	8002796 <__aeabi_dsub+0x63e>
 8002558:	2580      	movs	r5, #128	; 0x80
 800255a:	042d      	lsls	r5, r5, #16
 800255c:	432b      	orrs	r3, r5
 800255e:	4664      	mov	r4, ip
 8002560:	2c38      	cmp	r4, #56	; 0x38
 8002562:	dc5d      	bgt.n	8002620 <__aeabi_dsub+0x4c8>
 8002564:	2c1f      	cmp	r4, #31
 8002566:	dd00      	ble.n	800256a <__aeabi_dsub+0x412>
 8002568:	e0d0      	b.n	800270c <__aeabi_dsub+0x5b4>
 800256a:	2520      	movs	r5, #32
 800256c:	4667      	mov	r7, ip
 800256e:	1b2d      	subs	r5, r5, r4
 8002570:	464e      	mov	r6, r9
 8002572:	001c      	movs	r4, r3
 8002574:	40fe      	lsrs	r6, r7
 8002576:	40ac      	lsls	r4, r5
 8002578:	4334      	orrs	r4, r6
 800257a:	464e      	mov	r6, r9
 800257c:	40ae      	lsls	r6, r5
 800257e:	0035      	movs	r5, r6
 8002580:	40fb      	lsrs	r3, r7
 8002582:	1e6e      	subs	r6, r5, #1
 8002584:	41b5      	sbcs	r5, r6
 8002586:	1ac9      	subs	r1, r1, r3
 8002588:	432c      	orrs	r4, r5
 800258a:	e04e      	b.n	800262a <__aeabi_dsub+0x4d2>
 800258c:	464a      	mov	r2, r9
 800258e:	1a14      	subs	r4, r2, r0
 8002590:	45a1      	cmp	r9, r4
 8002592:	4192      	sbcs	r2, r2
 8002594:	4252      	negs	r2, r2
 8002596:	4690      	mov	r8, r2
 8002598:	1a5f      	subs	r7, r3, r1
 800259a:	003a      	movs	r2, r7
 800259c:	4647      	mov	r7, r8
 800259e:	1bd2      	subs	r2, r2, r7
 80025a0:	4690      	mov	r8, r2
 80025a2:	0212      	lsls	r2, r2, #8
 80025a4:	d500      	bpl.n	80025a8 <__aeabi_dsub+0x450>
 80025a6:	e08b      	b.n	80026c0 <__aeabi_dsub+0x568>
 80025a8:	4642      	mov	r2, r8
 80025aa:	4322      	orrs	r2, r4
 80025ac:	d000      	beq.n	80025b0 <__aeabi_dsub+0x458>
 80025ae:	e630      	b.n	8002212 <__aeabi_dsub+0xba>
 80025b0:	2300      	movs	r3, #0
 80025b2:	2500      	movs	r5, #0
 80025b4:	e74d      	b.n	8002452 <__aeabi_dsub+0x2fa>
 80025b6:	464a      	mov	r2, r9
 80025b8:	0759      	lsls	r1, r3, #29
 80025ba:	08d2      	lsrs	r2, r2, #3
 80025bc:	430a      	orrs	r2, r1
 80025be:	08db      	lsrs	r3, r3, #3
 80025c0:	e744      	b.n	800244c <__aeabi_dsub+0x2f4>
 80025c2:	4642      	mov	r2, r8
 80025c4:	4b9e      	ldr	r3, [pc, #632]	; (8002840 <__aeabi_dsub+0x6e8>)
 80025c6:	0861      	lsrs	r1, r4, #1
 80025c8:	401a      	ands	r2, r3
 80025ca:	0013      	movs	r3, r2
 80025cc:	2201      	movs	r2, #1
 80025ce:	4014      	ands	r4, r2
 80025d0:	430c      	orrs	r4, r1
 80025d2:	07da      	lsls	r2, r3, #31
 80025d4:	085b      	lsrs	r3, r3, #1
 80025d6:	4698      	mov	r8, r3
 80025d8:	4314      	orrs	r4, r2
 80025da:	e641      	b.n	8002260 <__aeabi_dsub+0x108>
 80025dc:	001a      	movs	r2, r3
 80025de:	3e1f      	subs	r6, #31
 80025e0:	40f2      	lsrs	r2, r6
 80025e2:	0016      	movs	r6, r2
 80025e4:	2920      	cmp	r1, #32
 80025e6:	d003      	beq.n	80025f0 <__aeabi_dsub+0x498>
 80025e8:	2240      	movs	r2, #64	; 0x40
 80025ea:	1a51      	subs	r1, r2, r1
 80025ec:	408b      	lsls	r3, r1
 80025ee:	431c      	orrs	r4, r3
 80025f0:	1e62      	subs	r2, r4, #1
 80025f2:	4194      	sbcs	r4, r2
 80025f4:	2300      	movs	r3, #0
 80025f6:	4334      	orrs	r4, r6
 80025f8:	4698      	mov	r8, r3
 80025fa:	2600      	movs	r6, #0
 80025fc:	e71d      	b.n	800243a <__aeabi_dsub+0x2e2>
 80025fe:	000c      	movs	r4, r1
 8002600:	3a20      	subs	r2, #32
 8002602:	40d4      	lsrs	r4, r2
 8002604:	0022      	movs	r2, r4
 8002606:	4664      	mov	r4, ip
 8002608:	2c20      	cmp	r4, #32
 800260a:	d004      	beq.n	8002616 <__aeabi_dsub+0x4be>
 800260c:	2740      	movs	r7, #64	; 0x40
 800260e:	1b3f      	subs	r7, r7, r4
 8002610:	40b9      	lsls	r1, r7
 8002612:	4308      	orrs	r0, r1
 8002614:	4680      	mov	r8, r0
 8002616:	4644      	mov	r4, r8
 8002618:	1e61      	subs	r1, r4, #1
 800261a:	418c      	sbcs	r4, r1
 800261c:	4322      	orrs	r2, r4
 800261e:	e5e9      	b.n	80021f4 <__aeabi_dsub+0x9c>
 8002620:	464c      	mov	r4, r9
 8002622:	4323      	orrs	r3, r4
 8002624:	001c      	movs	r4, r3
 8002626:	1e63      	subs	r3, r4, #1
 8002628:	419c      	sbcs	r4, r3
 800262a:	1b04      	subs	r4, r0, r4
 800262c:	42a0      	cmp	r0, r4
 800262e:	419b      	sbcs	r3, r3
 8002630:	425b      	negs	r3, r3
 8002632:	1acb      	subs	r3, r1, r3
 8002634:	4698      	mov	r8, r3
 8002636:	465d      	mov	r5, fp
 8002638:	0016      	movs	r6, r2
 800263a:	e5e2      	b.n	8002202 <__aeabi_dsub+0xaa>
 800263c:	464e      	mov	r6, r9
 800263e:	431e      	orrs	r6, r3
 8002640:	d100      	bne.n	8002644 <__aeabi_dsub+0x4ec>
 8002642:	e0ae      	b.n	80027a2 <__aeabi_dsub+0x64a>
 8002644:	1e66      	subs	r6, r4, #1
 8002646:	2c01      	cmp	r4, #1
 8002648:	d100      	bne.n	800264c <__aeabi_dsub+0x4f4>
 800264a:	e0fd      	b.n	8002848 <__aeabi_dsub+0x6f0>
 800264c:	4f7b      	ldr	r7, [pc, #492]	; (800283c <__aeabi_dsub+0x6e4>)
 800264e:	42bc      	cmp	r4, r7
 8002650:	d100      	bne.n	8002654 <__aeabi_dsub+0x4fc>
 8002652:	e107      	b.n	8002864 <__aeabi_dsub+0x70c>
 8002654:	46b4      	mov	ip, r6
 8002656:	e69b      	b.n	8002390 <__aeabi_dsub+0x238>
 8002658:	4664      	mov	r4, ip
 800265a:	2220      	movs	r2, #32
 800265c:	1b12      	subs	r2, r2, r4
 800265e:	000c      	movs	r4, r1
 8002660:	4094      	lsls	r4, r2
 8002662:	0007      	movs	r7, r0
 8002664:	4090      	lsls	r0, r2
 8002666:	46a0      	mov	r8, r4
 8002668:	4664      	mov	r4, ip
 800266a:	1e42      	subs	r2, r0, #1
 800266c:	4190      	sbcs	r0, r2
 800266e:	4662      	mov	r2, ip
 8002670:	40e7      	lsrs	r7, r4
 8002672:	4644      	mov	r4, r8
 8002674:	40d1      	lsrs	r1, r2
 8002676:	433c      	orrs	r4, r7
 8002678:	4304      	orrs	r4, r0
 800267a:	185b      	adds	r3, r3, r1
 800267c:	e6f3      	b.n	8002466 <__aeabi_dsub+0x30e>
 800267e:	4c6f      	ldr	r4, [pc, #444]	; (800283c <__aeabi_dsub+0x6e4>)
 8002680:	42a2      	cmp	r2, r4
 8002682:	d100      	bne.n	8002686 <__aeabi_dsub+0x52e>
 8002684:	e0d5      	b.n	8002832 <__aeabi_dsub+0x6da>
 8002686:	4448      	add	r0, r9
 8002688:	185b      	adds	r3, r3, r1
 800268a:	4548      	cmp	r0, r9
 800268c:	4189      	sbcs	r1, r1
 800268e:	4249      	negs	r1, r1
 8002690:	185b      	adds	r3, r3, r1
 8002692:	07dc      	lsls	r4, r3, #31
 8002694:	0840      	lsrs	r0, r0, #1
 8002696:	085b      	lsrs	r3, r3, #1
 8002698:	4698      	mov	r8, r3
 800269a:	0016      	movs	r6, r2
 800269c:	4304      	orrs	r4, r0
 800269e:	e6cc      	b.n	800243a <__aeabi_dsub+0x2e2>
 80026a0:	2a00      	cmp	r2, #0
 80026a2:	d000      	beq.n	80026a6 <__aeabi_dsub+0x54e>
 80026a4:	e082      	b.n	80027ac <__aeabi_dsub+0x654>
 80026a6:	000a      	movs	r2, r1
 80026a8:	4302      	orrs	r2, r0
 80026aa:	d140      	bne.n	800272e <__aeabi_dsub+0x5d6>
 80026ac:	2380      	movs	r3, #128	; 0x80
 80026ae:	2500      	movs	r5, #0
 80026b0:	031b      	lsls	r3, r3, #12
 80026b2:	e713      	b.n	80024dc <__aeabi_dsub+0x384>
 80026b4:	074b      	lsls	r3, r1, #29
 80026b6:	08c2      	lsrs	r2, r0, #3
 80026b8:	431a      	orrs	r2, r3
 80026ba:	465d      	mov	r5, fp
 80026bc:	08cb      	lsrs	r3, r1, #3
 80026be:	e6c5      	b.n	800244c <__aeabi_dsub+0x2f4>
 80026c0:	464a      	mov	r2, r9
 80026c2:	1a84      	subs	r4, r0, r2
 80026c4:	42a0      	cmp	r0, r4
 80026c6:	4192      	sbcs	r2, r2
 80026c8:	1acb      	subs	r3, r1, r3
 80026ca:	4252      	negs	r2, r2
 80026cc:	1a9b      	subs	r3, r3, r2
 80026ce:	4698      	mov	r8, r3
 80026d0:	465d      	mov	r5, fp
 80026d2:	e59e      	b.n	8002212 <__aeabi_dsub+0xba>
 80026d4:	464a      	mov	r2, r9
 80026d6:	0759      	lsls	r1, r3, #29
 80026d8:	08d2      	lsrs	r2, r2, #3
 80026da:	430a      	orrs	r2, r1
 80026dc:	08db      	lsrs	r3, r3, #3
 80026de:	e6f9      	b.n	80024d4 <__aeabi_dsub+0x37c>
 80026e0:	464a      	mov	r2, r9
 80026e2:	1a14      	subs	r4, r2, r0
 80026e4:	45a1      	cmp	r9, r4
 80026e6:	4192      	sbcs	r2, r2
 80026e8:	1a5b      	subs	r3, r3, r1
 80026ea:	4252      	negs	r2, r2
 80026ec:	1a9b      	subs	r3, r3, r2
 80026ee:	4698      	mov	r8, r3
 80026f0:	2601      	movs	r6, #1
 80026f2:	e586      	b.n	8002202 <__aeabi_dsub+0xaa>
 80026f4:	464a      	mov	r2, r9
 80026f6:	0759      	lsls	r1, r3, #29
 80026f8:	08d2      	lsrs	r2, r2, #3
 80026fa:	430a      	orrs	r2, r1
 80026fc:	08db      	lsrs	r3, r3, #3
 80026fe:	e6a5      	b.n	800244c <__aeabi_dsub+0x2f4>
 8002700:	464c      	mov	r4, r9
 8002702:	4323      	orrs	r3, r4
 8002704:	001c      	movs	r4, r3
 8002706:	1e63      	subs	r3, r4, #1
 8002708:	419c      	sbcs	r4, r3
 800270a:	e65b      	b.n	80023c4 <__aeabi_dsub+0x26c>
 800270c:	4665      	mov	r5, ip
 800270e:	001e      	movs	r6, r3
 8002710:	3d20      	subs	r5, #32
 8002712:	40ee      	lsrs	r6, r5
 8002714:	2c20      	cmp	r4, #32
 8002716:	d005      	beq.n	8002724 <__aeabi_dsub+0x5cc>
 8002718:	2540      	movs	r5, #64	; 0x40
 800271a:	1b2d      	subs	r5, r5, r4
 800271c:	40ab      	lsls	r3, r5
 800271e:	464c      	mov	r4, r9
 8002720:	431c      	orrs	r4, r3
 8002722:	46a2      	mov	sl, r4
 8002724:	4654      	mov	r4, sl
 8002726:	1e63      	subs	r3, r4, #1
 8002728:	419c      	sbcs	r4, r3
 800272a:	4334      	orrs	r4, r6
 800272c:	e77d      	b.n	800262a <__aeabi_dsub+0x4d2>
 800272e:	074b      	lsls	r3, r1, #29
 8002730:	08c2      	lsrs	r2, r0, #3
 8002732:	431a      	orrs	r2, r3
 8002734:	465d      	mov	r5, fp
 8002736:	08cb      	lsrs	r3, r1, #3
 8002738:	e6cc      	b.n	80024d4 <__aeabi_dsub+0x37c>
 800273a:	000a      	movs	r2, r1
 800273c:	4302      	orrs	r2, r0
 800273e:	d100      	bne.n	8002742 <__aeabi_dsub+0x5ea>
 8002740:	e736      	b.n	80025b0 <__aeabi_dsub+0x458>
 8002742:	074b      	lsls	r3, r1, #29
 8002744:	08c2      	lsrs	r2, r0, #3
 8002746:	431a      	orrs	r2, r3
 8002748:	465d      	mov	r5, fp
 800274a:	08cb      	lsrs	r3, r1, #3
 800274c:	e681      	b.n	8002452 <__aeabi_dsub+0x2fa>
 800274e:	464a      	mov	r2, r9
 8002750:	1a84      	subs	r4, r0, r2
 8002752:	42a0      	cmp	r0, r4
 8002754:	4192      	sbcs	r2, r2
 8002756:	1acb      	subs	r3, r1, r3
 8002758:	4252      	negs	r2, r2
 800275a:	1a9b      	subs	r3, r3, r2
 800275c:	4698      	mov	r8, r3
 800275e:	465d      	mov	r5, fp
 8002760:	2601      	movs	r6, #1
 8002762:	e54e      	b.n	8002202 <__aeabi_dsub+0xaa>
 8002764:	074b      	lsls	r3, r1, #29
 8002766:	08c2      	lsrs	r2, r0, #3
 8002768:	431a      	orrs	r2, r3
 800276a:	08cb      	lsrs	r3, r1, #3
 800276c:	e6b2      	b.n	80024d4 <__aeabi_dsub+0x37c>
 800276e:	464a      	mov	r2, r9
 8002770:	1a14      	subs	r4, r2, r0
 8002772:	45a1      	cmp	r9, r4
 8002774:	4192      	sbcs	r2, r2
 8002776:	1a5f      	subs	r7, r3, r1
 8002778:	4252      	negs	r2, r2
 800277a:	1aba      	subs	r2, r7, r2
 800277c:	4690      	mov	r8, r2
 800277e:	0212      	lsls	r2, r2, #8
 8002780:	d56b      	bpl.n	800285a <__aeabi_dsub+0x702>
 8002782:	464a      	mov	r2, r9
 8002784:	1a84      	subs	r4, r0, r2
 8002786:	42a0      	cmp	r0, r4
 8002788:	4192      	sbcs	r2, r2
 800278a:	1acb      	subs	r3, r1, r3
 800278c:	4252      	negs	r2, r2
 800278e:	1a9b      	subs	r3, r3, r2
 8002790:	4698      	mov	r8, r3
 8002792:	465d      	mov	r5, fp
 8002794:	e564      	b.n	8002260 <__aeabi_dsub+0x108>
 8002796:	074b      	lsls	r3, r1, #29
 8002798:	08c2      	lsrs	r2, r0, #3
 800279a:	431a      	orrs	r2, r3
 800279c:	465d      	mov	r5, fp
 800279e:	08cb      	lsrs	r3, r1, #3
 80027a0:	e698      	b.n	80024d4 <__aeabi_dsub+0x37c>
 80027a2:	074b      	lsls	r3, r1, #29
 80027a4:	08c2      	lsrs	r2, r0, #3
 80027a6:	431a      	orrs	r2, r3
 80027a8:	08cb      	lsrs	r3, r1, #3
 80027aa:	e64f      	b.n	800244c <__aeabi_dsub+0x2f4>
 80027ac:	000a      	movs	r2, r1
 80027ae:	4302      	orrs	r2, r0
 80027b0:	d090      	beq.n	80026d4 <__aeabi_dsub+0x57c>
 80027b2:	464a      	mov	r2, r9
 80027b4:	075c      	lsls	r4, r3, #29
 80027b6:	08d2      	lsrs	r2, r2, #3
 80027b8:	4314      	orrs	r4, r2
 80027ba:	2280      	movs	r2, #128	; 0x80
 80027bc:	08db      	lsrs	r3, r3, #3
 80027be:	0312      	lsls	r2, r2, #12
 80027c0:	4213      	tst	r3, r2
 80027c2:	d008      	beq.n	80027d6 <__aeabi_dsub+0x67e>
 80027c4:	08ce      	lsrs	r6, r1, #3
 80027c6:	4216      	tst	r6, r2
 80027c8:	d105      	bne.n	80027d6 <__aeabi_dsub+0x67e>
 80027ca:	08c0      	lsrs	r0, r0, #3
 80027cc:	0749      	lsls	r1, r1, #29
 80027ce:	4308      	orrs	r0, r1
 80027d0:	0004      	movs	r4, r0
 80027d2:	465d      	mov	r5, fp
 80027d4:	0033      	movs	r3, r6
 80027d6:	0f61      	lsrs	r1, r4, #29
 80027d8:	00e2      	lsls	r2, r4, #3
 80027da:	0749      	lsls	r1, r1, #29
 80027dc:	08d2      	lsrs	r2, r2, #3
 80027de:	430a      	orrs	r2, r1
 80027e0:	e678      	b.n	80024d4 <__aeabi_dsub+0x37c>
 80027e2:	074b      	lsls	r3, r1, #29
 80027e4:	08c2      	lsrs	r2, r0, #3
 80027e6:	431a      	orrs	r2, r3
 80027e8:	08cb      	lsrs	r3, r1, #3
 80027ea:	e632      	b.n	8002452 <__aeabi_dsub+0x2fa>
 80027ec:	4448      	add	r0, r9
 80027ee:	185b      	adds	r3, r3, r1
 80027f0:	4548      	cmp	r0, r9
 80027f2:	4192      	sbcs	r2, r2
 80027f4:	4698      	mov	r8, r3
 80027f6:	4252      	negs	r2, r2
 80027f8:	4490      	add	r8, r2
 80027fa:	4643      	mov	r3, r8
 80027fc:	0004      	movs	r4, r0
 80027fe:	021b      	lsls	r3, r3, #8
 8002800:	d400      	bmi.n	8002804 <__aeabi_dsub+0x6ac>
 8002802:	e61a      	b.n	800243a <__aeabi_dsub+0x2e2>
 8002804:	4642      	mov	r2, r8
 8002806:	4b0e      	ldr	r3, [pc, #56]	; (8002840 <__aeabi_dsub+0x6e8>)
 8002808:	2601      	movs	r6, #1
 800280a:	401a      	ands	r2, r3
 800280c:	4690      	mov	r8, r2
 800280e:	e614      	b.n	800243a <__aeabi_dsub+0x2e2>
 8002810:	4666      	mov	r6, ip
 8002812:	001f      	movs	r7, r3
 8002814:	3e20      	subs	r6, #32
 8002816:	40f7      	lsrs	r7, r6
 8002818:	2c20      	cmp	r4, #32
 800281a:	d005      	beq.n	8002828 <__aeabi_dsub+0x6d0>
 800281c:	2640      	movs	r6, #64	; 0x40
 800281e:	1b36      	subs	r6, r6, r4
 8002820:	40b3      	lsls	r3, r6
 8002822:	464c      	mov	r4, r9
 8002824:	431c      	orrs	r4, r3
 8002826:	46a2      	mov	sl, r4
 8002828:	4654      	mov	r4, sl
 800282a:	1e63      	subs	r3, r4, #1
 800282c:	419c      	sbcs	r4, r3
 800282e:	433c      	orrs	r4, r7
 8002830:	e5c8      	b.n	80023c4 <__aeabi_dsub+0x26c>
 8002832:	0011      	movs	r1, r2
 8002834:	2300      	movs	r3, #0
 8002836:	2200      	movs	r2, #0
 8002838:	e532      	b.n	80022a0 <__aeabi_dsub+0x148>
 800283a:	46c0      	nop			; (mov r8, r8)
 800283c:	000007ff 	.word	0x000007ff
 8002840:	ff7fffff 	.word	0xff7fffff
 8002844:	000007fe 	.word	0x000007fe
 8002848:	464a      	mov	r2, r9
 800284a:	1814      	adds	r4, r2, r0
 800284c:	4284      	cmp	r4, r0
 800284e:	4192      	sbcs	r2, r2
 8002850:	185b      	adds	r3, r3, r1
 8002852:	4698      	mov	r8, r3
 8002854:	4252      	negs	r2, r2
 8002856:	4490      	add	r8, r2
 8002858:	e5e9      	b.n	800242e <__aeabi_dsub+0x2d6>
 800285a:	4642      	mov	r2, r8
 800285c:	4322      	orrs	r2, r4
 800285e:	d100      	bne.n	8002862 <__aeabi_dsub+0x70a>
 8002860:	e6a6      	b.n	80025b0 <__aeabi_dsub+0x458>
 8002862:	e5ea      	b.n	800243a <__aeabi_dsub+0x2e2>
 8002864:	074b      	lsls	r3, r1, #29
 8002866:	08c2      	lsrs	r2, r0, #3
 8002868:	431a      	orrs	r2, r3
 800286a:	08cb      	lsrs	r3, r1, #3
 800286c:	e632      	b.n	80024d4 <__aeabi_dsub+0x37c>
 800286e:	2200      	movs	r2, #0
 8002870:	4901      	ldr	r1, [pc, #4]	; (8002878 <__aeabi_dsub+0x720>)
 8002872:	0013      	movs	r3, r2
 8002874:	e514      	b.n	80022a0 <__aeabi_dsub+0x148>
 8002876:	46c0      	nop			; (mov r8, r8)
 8002878:	000007ff 	.word	0x000007ff

0800287c <__aeabi_d2iz>:
 800287c:	000a      	movs	r2, r1
 800287e:	b530      	push	{r4, r5, lr}
 8002880:	4c13      	ldr	r4, [pc, #76]	; (80028d0 <__aeabi_d2iz+0x54>)
 8002882:	0053      	lsls	r3, r2, #1
 8002884:	0309      	lsls	r1, r1, #12
 8002886:	0005      	movs	r5, r0
 8002888:	0b09      	lsrs	r1, r1, #12
 800288a:	2000      	movs	r0, #0
 800288c:	0d5b      	lsrs	r3, r3, #21
 800288e:	0fd2      	lsrs	r2, r2, #31
 8002890:	42a3      	cmp	r3, r4
 8002892:	dd04      	ble.n	800289e <__aeabi_d2iz+0x22>
 8002894:	480f      	ldr	r0, [pc, #60]	; (80028d4 <__aeabi_d2iz+0x58>)
 8002896:	4283      	cmp	r3, r0
 8002898:	dd02      	ble.n	80028a0 <__aeabi_d2iz+0x24>
 800289a:	4b0f      	ldr	r3, [pc, #60]	; (80028d8 <__aeabi_d2iz+0x5c>)
 800289c:	18d0      	adds	r0, r2, r3
 800289e:	bd30      	pop	{r4, r5, pc}
 80028a0:	2080      	movs	r0, #128	; 0x80
 80028a2:	0340      	lsls	r0, r0, #13
 80028a4:	4301      	orrs	r1, r0
 80028a6:	480d      	ldr	r0, [pc, #52]	; (80028dc <__aeabi_d2iz+0x60>)
 80028a8:	1ac0      	subs	r0, r0, r3
 80028aa:	281f      	cmp	r0, #31
 80028ac:	dd08      	ble.n	80028c0 <__aeabi_d2iz+0x44>
 80028ae:	480c      	ldr	r0, [pc, #48]	; (80028e0 <__aeabi_d2iz+0x64>)
 80028b0:	1ac3      	subs	r3, r0, r3
 80028b2:	40d9      	lsrs	r1, r3
 80028b4:	000b      	movs	r3, r1
 80028b6:	4258      	negs	r0, r3
 80028b8:	2a00      	cmp	r2, #0
 80028ba:	d1f0      	bne.n	800289e <__aeabi_d2iz+0x22>
 80028bc:	0018      	movs	r0, r3
 80028be:	e7ee      	b.n	800289e <__aeabi_d2iz+0x22>
 80028c0:	4c08      	ldr	r4, [pc, #32]	; (80028e4 <__aeabi_d2iz+0x68>)
 80028c2:	40c5      	lsrs	r5, r0
 80028c4:	46a4      	mov	ip, r4
 80028c6:	4463      	add	r3, ip
 80028c8:	4099      	lsls	r1, r3
 80028ca:	000b      	movs	r3, r1
 80028cc:	432b      	orrs	r3, r5
 80028ce:	e7f2      	b.n	80028b6 <__aeabi_d2iz+0x3a>
 80028d0:	000003fe 	.word	0x000003fe
 80028d4:	0000041d 	.word	0x0000041d
 80028d8:	7fffffff 	.word	0x7fffffff
 80028dc:	00000433 	.word	0x00000433
 80028e0:	00000413 	.word	0x00000413
 80028e4:	fffffbed 	.word	0xfffffbed

080028e8 <__aeabi_i2d>:
 80028e8:	b570      	push	{r4, r5, r6, lr}
 80028ea:	2800      	cmp	r0, #0
 80028ec:	d016      	beq.n	800291c <__aeabi_i2d+0x34>
 80028ee:	17c3      	asrs	r3, r0, #31
 80028f0:	18c5      	adds	r5, r0, r3
 80028f2:	405d      	eors	r5, r3
 80028f4:	0fc4      	lsrs	r4, r0, #31
 80028f6:	0028      	movs	r0, r5
 80028f8:	f000 f91c 	bl	8002b34 <__clzsi2>
 80028fc:	4a11      	ldr	r2, [pc, #68]	; (8002944 <__aeabi_i2d+0x5c>)
 80028fe:	1a12      	subs	r2, r2, r0
 8002900:	280a      	cmp	r0, #10
 8002902:	dc16      	bgt.n	8002932 <__aeabi_i2d+0x4a>
 8002904:	0003      	movs	r3, r0
 8002906:	002e      	movs	r6, r5
 8002908:	3315      	adds	r3, #21
 800290a:	409e      	lsls	r6, r3
 800290c:	230b      	movs	r3, #11
 800290e:	1a18      	subs	r0, r3, r0
 8002910:	40c5      	lsrs	r5, r0
 8002912:	0553      	lsls	r3, r2, #21
 8002914:	032d      	lsls	r5, r5, #12
 8002916:	0b2d      	lsrs	r5, r5, #12
 8002918:	0d5b      	lsrs	r3, r3, #21
 800291a:	e003      	b.n	8002924 <__aeabi_i2d+0x3c>
 800291c:	2400      	movs	r4, #0
 800291e:	2300      	movs	r3, #0
 8002920:	2500      	movs	r5, #0
 8002922:	2600      	movs	r6, #0
 8002924:	051b      	lsls	r3, r3, #20
 8002926:	432b      	orrs	r3, r5
 8002928:	07e4      	lsls	r4, r4, #31
 800292a:	4323      	orrs	r3, r4
 800292c:	0030      	movs	r0, r6
 800292e:	0019      	movs	r1, r3
 8002930:	bd70      	pop	{r4, r5, r6, pc}
 8002932:	380b      	subs	r0, #11
 8002934:	4085      	lsls	r5, r0
 8002936:	0553      	lsls	r3, r2, #21
 8002938:	032d      	lsls	r5, r5, #12
 800293a:	2600      	movs	r6, #0
 800293c:	0b2d      	lsrs	r5, r5, #12
 800293e:	0d5b      	lsrs	r3, r3, #21
 8002940:	e7f0      	b.n	8002924 <__aeabi_i2d+0x3c>
 8002942:	46c0      	nop			; (mov r8, r8)
 8002944:	0000041e 	.word	0x0000041e

08002948 <__aeabi_ui2d>:
 8002948:	b510      	push	{r4, lr}
 800294a:	1e04      	subs	r4, r0, #0
 800294c:	d010      	beq.n	8002970 <__aeabi_ui2d+0x28>
 800294e:	f000 f8f1 	bl	8002b34 <__clzsi2>
 8002952:	4b0f      	ldr	r3, [pc, #60]	; (8002990 <__aeabi_ui2d+0x48>)
 8002954:	1a1b      	subs	r3, r3, r0
 8002956:	280a      	cmp	r0, #10
 8002958:	dc11      	bgt.n	800297e <__aeabi_ui2d+0x36>
 800295a:	220b      	movs	r2, #11
 800295c:	0021      	movs	r1, r4
 800295e:	1a12      	subs	r2, r2, r0
 8002960:	40d1      	lsrs	r1, r2
 8002962:	3015      	adds	r0, #21
 8002964:	030a      	lsls	r2, r1, #12
 8002966:	055b      	lsls	r3, r3, #21
 8002968:	4084      	lsls	r4, r0
 800296a:	0b12      	lsrs	r2, r2, #12
 800296c:	0d5b      	lsrs	r3, r3, #21
 800296e:	e001      	b.n	8002974 <__aeabi_ui2d+0x2c>
 8002970:	2300      	movs	r3, #0
 8002972:	2200      	movs	r2, #0
 8002974:	051b      	lsls	r3, r3, #20
 8002976:	4313      	orrs	r3, r2
 8002978:	0020      	movs	r0, r4
 800297a:	0019      	movs	r1, r3
 800297c:	bd10      	pop	{r4, pc}
 800297e:	0022      	movs	r2, r4
 8002980:	380b      	subs	r0, #11
 8002982:	4082      	lsls	r2, r0
 8002984:	055b      	lsls	r3, r3, #21
 8002986:	0312      	lsls	r2, r2, #12
 8002988:	2400      	movs	r4, #0
 800298a:	0b12      	lsrs	r2, r2, #12
 800298c:	0d5b      	lsrs	r3, r3, #21
 800298e:	e7f1      	b.n	8002974 <__aeabi_ui2d+0x2c>
 8002990:	0000041e 	.word	0x0000041e

08002994 <__aeabi_f2d>:
 8002994:	b570      	push	{r4, r5, r6, lr}
 8002996:	0043      	lsls	r3, r0, #1
 8002998:	0246      	lsls	r6, r0, #9
 800299a:	0fc4      	lsrs	r4, r0, #31
 800299c:	20fe      	movs	r0, #254	; 0xfe
 800299e:	0e1b      	lsrs	r3, r3, #24
 80029a0:	1c59      	adds	r1, r3, #1
 80029a2:	0a75      	lsrs	r5, r6, #9
 80029a4:	4208      	tst	r0, r1
 80029a6:	d00c      	beq.n	80029c2 <__aeabi_f2d+0x2e>
 80029a8:	22e0      	movs	r2, #224	; 0xe0
 80029aa:	0092      	lsls	r2, r2, #2
 80029ac:	4694      	mov	ip, r2
 80029ae:	076d      	lsls	r5, r5, #29
 80029b0:	0b36      	lsrs	r6, r6, #12
 80029b2:	4463      	add	r3, ip
 80029b4:	051b      	lsls	r3, r3, #20
 80029b6:	4333      	orrs	r3, r6
 80029b8:	07e4      	lsls	r4, r4, #31
 80029ba:	4323      	orrs	r3, r4
 80029bc:	0028      	movs	r0, r5
 80029be:	0019      	movs	r1, r3
 80029c0:	bd70      	pop	{r4, r5, r6, pc}
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d114      	bne.n	80029f0 <__aeabi_f2d+0x5c>
 80029c6:	2d00      	cmp	r5, #0
 80029c8:	d01b      	beq.n	8002a02 <__aeabi_f2d+0x6e>
 80029ca:	0028      	movs	r0, r5
 80029cc:	f000 f8b2 	bl	8002b34 <__clzsi2>
 80029d0:	280a      	cmp	r0, #10
 80029d2:	dc1c      	bgt.n	8002a0e <__aeabi_f2d+0x7a>
 80029d4:	230b      	movs	r3, #11
 80029d6:	002a      	movs	r2, r5
 80029d8:	1a1b      	subs	r3, r3, r0
 80029da:	40da      	lsrs	r2, r3
 80029dc:	0003      	movs	r3, r0
 80029de:	3315      	adds	r3, #21
 80029e0:	409d      	lsls	r5, r3
 80029e2:	4b0e      	ldr	r3, [pc, #56]	; (8002a1c <__aeabi_f2d+0x88>)
 80029e4:	0312      	lsls	r2, r2, #12
 80029e6:	1a1b      	subs	r3, r3, r0
 80029e8:	055b      	lsls	r3, r3, #21
 80029ea:	0b16      	lsrs	r6, r2, #12
 80029ec:	0d5b      	lsrs	r3, r3, #21
 80029ee:	e7e1      	b.n	80029b4 <__aeabi_f2d+0x20>
 80029f0:	2d00      	cmp	r5, #0
 80029f2:	d009      	beq.n	8002a08 <__aeabi_f2d+0x74>
 80029f4:	0b32      	lsrs	r2, r6, #12
 80029f6:	2680      	movs	r6, #128	; 0x80
 80029f8:	0336      	lsls	r6, r6, #12
 80029fa:	4b09      	ldr	r3, [pc, #36]	; (8002a20 <__aeabi_f2d+0x8c>)
 80029fc:	076d      	lsls	r5, r5, #29
 80029fe:	4316      	orrs	r6, r2
 8002a00:	e7d8      	b.n	80029b4 <__aeabi_f2d+0x20>
 8002a02:	2300      	movs	r3, #0
 8002a04:	2600      	movs	r6, #0
 8002a06:	e7d5      	b.n	80029b4 <__aeabi_f2d+0x20>
 8002a08:	2600      	movs	r6, #0
 8002a0a:	4b05      	ldr	r3, [pc, #20]	; (8002a20 <__aeabi_f2d+0x8c>)
 8002a0c:	e7d2      	b.n	80029b4 <__aeabi_f2d+0x20>
 8002a0e:	0003      	movs	r3, r0
 8002a10:	002a      	movs	r2, r5
 8002a12:	3b0b      	subs	r3, #11
 8002a14:	409a      	lsls	r2, r3
 8002a16:	2500      	movs	r5, #0
 8002a18:	e7e3      	b.n	80029e2 <__aeabi_f2d+0x4e>
 8002a1a:	46c0      	nop			; (mov r8, r8)
 8002a1c:	00000389 	.word	0x00000389
 8002a20:	000007ff 	.word	0x000007ff

08002a24 <__aeabi_d2f>:
 8002a24:	0002      	movs	r2, r0
 8002a26:	004b      	lsls	r3, r1, #1
 8002a28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a2a:	0308      	lsls	r0, r1, #12
 8002a2c:	0d5b      	lsrs	r3, r3, #21
 8002a2e:	4e3d      	ldr	r6, [pc, #244]	; (8002b24 <__aeabi_d2f+0x100>)
 8002a30:	0fcc      	lsrs	r4, r1, #31
 8002a32:	0a40      	lsrs	r0, r0, #9
 8002a34:	0f51      	lsrs	r1, r2, #29
 8002a36:	1c5f      	adds	r7, r3, #1
 8002a38:	4308      	orrs	r0, r1
 8002a3a:	00d5      	lsls	r5, r2, #3
 8002a3c:	4237      	tst	r7, r6
 8002a3e:	d00a      	beq.n	8002a56 <__aeabi_d2f+0x32>
 8002a40:	4939      	ldr	r1, [pc, #228]	; (8002b28 <__aeabi_d2f+0x104>)
 8002a42:	185e      	adds	r6, r3, r1
 8002a44:	2efe      	cmp	r6, #254	; 0xfe
 8002a46:	dd16      	ble.n	8002a76 <__aeabi_d2f+0x52>
 8002a48:	23ff      	movs	r3, #255	; 0xff
 8002a4a:	2100      	movs	r1, #0
 8002a4c:	05db      	lsls	r3, r3, #23
 8002a4e:	430b      	orrs	r3, r1
 8002a50:	07e0      	lsls	r0, r4, #31
 8002a52:	4318      	orrs	r0, r3
 8002a54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d106      	bne.n	8002a68 <__aeabi_d2f+0x44>
 8002a5a:	4328      	orrs	r0, r5
 8002a5c:	d027      	beq.n	8002aae <__aeabi_d2f+0x8a>
 8002a5e:	2105      	movs	r1, #5
 8002a60:	0189      	lsls	r1, r1, #6
 8002a62:	0a49      	lsrs	r1, r1, #9
 8002a64:	b2db      	uxtb	r3, r3
 8002a66:	e7f1      	b.n	8002a4c <__aeabi_d2f+0x28>
 8002a68:	4305      	orrs	r5, r0
 8002a6a:	d0ed      	beq.n	8002a48 <__aeabi_d2f+0x24>
 8002a6c:	2180      	movs	r1, #128	; 0x80
 8002a6e:	03c9      	lsls	r1, r1, #15
 8002a70:	23ff      	movs	r3, #255	; 0xff
 8002a72:	4301      	orrs	r1, r0
 8002a74:	e7ea      	b.n	8002a4c <__aeabi_d2f+0x28>
 8002a76:	2e00      	cmp	r6, #0
 8002a78:	dd1c      	ble.n	8002ab4 <__aeabi_d2f+0x90>
 8002a7a:	0192      	lsls	r2, r2, #6
 8002a7c:	0011      	movs	r1, r2
 8002a7e:	1e4a      	subs	r2, r1, #1
 8002a80:	4191      	sbcs	r1, r2
 8002a82:	00c0      	lsls	r0, r0, #3
 8002a84:	0f6d      	lsrs	r5, r5, #29
 8002a86:	4301      	orrs	r1, r0
 8002a88:	4329      	orrs	r1, r5
 8002a8a:	074b      	lsls	r3, r1, #29
 8002a8c:	d048      	beq.n	8002b20 <__aeabi_d2f+0xfc>
 8002a8e:	230f      	movs	r3, #15
 8002a90:	400b      	ands	r3, r1
 8002a92:	2b04      	cmp	r3, #4
 8002a94:	d000      	beq.n	8002a98 <__aeabi_d2f+0x74>
 8002a96:	3104      	adds	r1, #4
 8002a98:	2380      	movs	r3, #128	; 0x80
 8002a9a:	04db      	lsls	r3, r3, #19
 8002a9c:	400b      	ands	r3, r1
 8002a9e:	d03f      	beq.n	8002b20 <__aeabi_d2f+0xfc>
 8002aa0:	1c72      	adds	r2, r6, #1
 8002aa2:	2efe      	cmp	r6, #254	; 0xfe
 8002aa4:	d0d0      	beq.n	8002a48 <__aeabi_d2f+0x24>
 8002aa6:	0189      	lsls	r1, r1, #6
 8002aa8:	0a49      	lsrs	r1, r1, #9
 8002aaa:	b2d3      	uxtb	r3, r2
 8002aac:	e7ce      	b.n	8002a4c <__aeabi_d2f+0x28>
 8002aae:	2300      	movs	r3, #0
 8002ab0:	2100      	movs	r1, #0
 8002ab2:	e7cb      	b.n	8002a4c <__aeabi_d2f+0x28>
 8002ab4:	0032      	movs	r2, r6
 8002ab6:	3217      	adds	r2, #23
 8002ab8:	db22      	blt.n	8002b00 <__aeabi_d2f+0xdc>
 8002aba:	2180      	movs	r1, #128	; 0x80
 8002abc:	221e      	movs	r2, #30
 8002abe:	0409      	lsls	r1, r1, #16
 8002ac0:	4308      	orrs	r0, r1
 8002ac2:	1b92      	subs	r2, r2, r6
 8002ac4:	2a1f      	cmp	r2, #31
 8002ac6:	dd1d      	ble.n	8002b04 <__aeabi_d2f+0xe0>
 8002ac8:	2102      	movs	r1, #2
 8002aca:	4249      	negs	r1, r1
 8002acc:	1b8e      	subs	r6, r1, r6
 8002ace:	0001      	movs	r1, r0
 8002ad0:	40f1      	lsrs	r1, r6
 8002ad2:	000e      	movs	r6, r1
 8002ad4:	2a20      	cmp	r2, #32
 8002ad6:	d004      	beq.n	8002ae2 <__aeabi_d2f+0xbe>
 8002ad8:	4a14      	ldr	r2, [pc, #80]	; (8002b2c <__aeabi_d2f+0x108>)
 8002ada:	4694      	mov	ip, r2
 8002adc:	4463      	add	r3, ip
 8002ade:	4098      	lsls	r0, r3
 8002ae0:	4305      	orrs	r5, r0
 8002ae2:	0029      	movs	r1, r5
 8002ae4:	1e4d      	subs	r5, r1, #1
 8002ae6:	41a9      	sbcs	r1, r5
 8002ae8:	4331      	orrs	r1, r6
 8002aea:	2600      	movs	r6, #0
 8002aec:	074b      	lsls	r3, r1, #29
 8002aee:	d1ce      	bne.n	8002a8e <__aeabi_d2f+0x6a>
 8002af0:	2080      	movs	r0, #128	; 0x80
 8002af2:	000b      	movs	r3, r1
 8002af4:	04c0      	lsls	r0, r0, #19
 8002af6:	2201      	movs	r2, #1
 8002af8:	4003      	ands	r3, r0
 8002afa:	4201      	tst	r1, r0
 8002afc:	d1d3      	bne.n	8002aa6 <__aeabi_d2f+0x82>
 8002afe:	e7af      	b.n	8002a60 <__aeabi_d2f+0x3c>
 8002b00:	2300      	movs	r3, #0
 8002b02:	e7ac      	b.n	8002a5e <__aeabi_d2f+0x3a>
 8002b04:	490a      	ldr	r1, [pc, #40]	; (8002b30 <__aeabi_d2f+0x10c>)
 8002b06:	468c      	mov	ip, r1
 8002b08:	0029      	movs	r1, r5
 8002b0a:	4463      	add	r3, ip
 8002b0c:	40d1      	lsrs	r1, r2
 8002b0e:	409d      	lsls	r5, r3
 8002b10:	000a      	movs	r2, r1
 8002b12:	0029      	movs	r1, r5
 8002b14:	4098      	lsls	r0, r3
 8002b16:	1e4d      	subs	r5, r1, #1
 8002b18:	41a9      	sbcs	r1, r5
 8002b1a:	4301      	orrs	r1, r0
 8002b1c:	4311      	orrs	r1, r2
 8002b1e:	e7e4      	b.n	8002aea <__aeabi_d2f+0xc6>
 8002b20:	0033      	movs	r3, r6
 8002b22:	e79d      	b.n	8002a60 <__aeabi_d2f+0x3c>
 8002b24:	000007fe 	.word	0x000007fe
 8002b28:	fffffc80 	.word	0xfffffc80
 8002b2c:	fffffca2 	.word	0xfffffca2
 8002b30:	fffffc82 	.word	0xfffffc82

08002b34 <__clzsi2>:
 8002b34:	211c      	movs	r1, #28
 8002b36:	2301      	movs	r3, #1
 8002b38:	041b      	lsls	r3, r3, #16
 8002b3a:	4298      	cmp	r0, r3
 8002b3c:	d301      	bcc.n	8002b42 <__clzsi2+0xe>
 8002b3e:	0c00      	lsrs	r0, r0, #16
 8002b40:	3910      	subs	r1, #16
 8002b42:	0a1b      	lsrs	r3, r3, #8
 8002b44:	4298      	cmp	r0, r3
 8002b46:	d301      	bcc.n	8002b4c <__clzsi2+0x18>
 8002b48:	0a00      	lsrs	r0, r0, #8
 8002b4a:	3908      	subs	r1, #8
 8002b4c:	091b      	lsrs	r3, r3, #4
 8002b4e:	4298      	cmp	r0, r3
 8002b50:	d301      	bcc.n	8002b56 <__clzsi2+0x22>
 8002b52:	0900      	lsrs	r0, r0, #4
 8002b54:	3904      	subs	r1, #4
 8002b56:	a202      	add	r2, pc, #8	; (adr r2, 8002b60 <__clzsi2+0x2c>)
 8002b58:	5c10      	ldrb	r0, [r2, r0]
 8002b5a:	1840      	adds	r0, r0, r1
 8002b5c:	4770      	bx	lr
 8002b5e:	46c0      	nop			; (mov r8, r8)
 8002b60:	02020304 	.word	0x02020304
 8002b64:	01010101 	.word	0x01010101
	...

08002b70 <minArr>:
*/
																															 
/* --- Used by FoundRoute: Find the index of the minimum module in dist that is still unvisited 
*/
uint8_t minArr(uint8_t* arr, uint8_t* Q)
{
 8002b70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b72:	0005      	movs	r5, r0
	uint8_t smallest = 0xFF; uint8_t index = 0;

	/* Consider first element as smallest */
	if (!Q[0])						// Not visited yet
 8002b74:	780b      	ldrb	r3, [r1, #0]
	uint8_t smallest = 0xFF; uint8_t index = 0;
 8002b76:	24ff      	movs	r4, #255	; 0xff
	if (!Q[0])						// Not visited yet
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d100      	bne.n	8002b7e <minArr+0xe>
		smallest = arr[0];
 8002b7c:	7804      	ldrb	r4, [r0, #0]

	for (int i=0 ; i<N ; i++) {
 8002b7e:	4b0a      	ldr	r3, [pc, #40]	; (8002ba8 <minArr+0x38>)
 8002b80:	781e      	ldrb	r6, [r3, #0]
 8002b82:	2e00      	cmp	r6, #0
 8002b84:	dd0e      	ble.n	8002ba4 <minArr+0x34>
 8002b86:	2300      	movs	r3, #0
 8002b88:	2000      	movs	r0, #0
 8002b8a:	e002      	b.n	8002b92 <minArr+0x22>
 8002b8c:	3301      	adds	r3, #1
 8002b8e:	42b3      	cmp	r3, r6
 8002b90:	da09      	bge.n	8002ba6 <minArr+0x36>
		if ((arr[i] < smallest) && !Q[i]) {
 8002b92:	5cea      	ldrb	r2, [r5, r3]
 8002b94:	42a2      	cmp	r2, r4
 8002b96:	d2f9      	bcs.n	8002b8c <minArr+0x1c>
 8002b98:	5ccf      	ldrb	r7, [r1, r3]
 8002b9a:	2f00      	cmp	r7, #0
 8002b9c:	d1f6      	bne.n	8002b8c <minArr+0x1c>
			smallest = arr[i];
			index = i;
 8002b9e:	b2d8      	uxtb	r0, r3
			smallest = arr[i];
 8002ba0:	0014      	movs	r4, r2
 8002ba2:	e7f3      	b.n	8002b8c <minArr+0x1c>
	for (int i=0 ; i<N ; i++) {
 8002ba4:	2000      	movs	r0, #0
		}
	}
	
	return index;
}
 8002ba6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ba8:	2000001c 	.word	0x2000001c

08002bac <QnotEmpty>:
/*-----------------------------------------------------------*/

/* --- Used by FoundRoute: Check if Q is empty (all modules have been visited) 
*/
uint8_t QnotEmpty(uint8_t* Q)
{		
 8002bac:	b510      	push	{r4, lr}
 8002bae:	0001      	movs	r1, r0
	char temp = 1;

	for (int i=0 ; i<N ; i++) {
 8002bb0:	4b06      	ldr	r3, [pc, #24]	; (8002bcc <QnotEmpty+0x20>)
 8002bb2:	781c      	ldrb	r4, [r3, #0]
 8002bb4:	2c00      	cmp	r4, #0
 8002bb6:	dd07      	ble.n	8002bc8 <QnotEmpty+0x1c>
 8002bb8:	2300      	movs	r3, #0
	char temp = 1;
 8002bba:	2001      	movs	r0, #1
		temp &= Q[i];
 8002bbc:	5cca      	ldrb	r2, [r1, r3]
 8002bbe:	4010      	ands	r0, r2
	for (int i=0 ; i<N ; i++) {
 8002bc0:	3301      	adds	r3, #1
 8002bc2:	42a3      	cmp	r3, r4
 8002bc4:	dbfa      	blt.n	8002bbc <QnotEmpty+0x10>
	}	
	
	return temp;
}
 8002bc6:	bd10      	pop	{r4, pc}
	char temp = 1;
 8002bc8:	2001      	movs	r0, #1
 8002bca:	e7fc      	b.n	8002bc6 <QnotEmpty+0x1a>
 8002bcc:	2000001c 	.word	0x2000001c

08002bd0 <LoadROsnippets>:
/*-----------------------------------------------------------*/

/* --- Load Command Snippets stored in Flash RO --- 
*/
uint8_t LoadROsnippets(void)
{
 8002bd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bd2:	46de      	mov	lr, fp
 8002bd4:	4657      	mov	r7, sl
 8002bd6:	464e      	mov	r6, r9
 8002bd8:	4645      	mov	r5, r8
 8002bda:	b5e0      	push	{r5, r6, r7, lr}
	uint8_t i = 0;
	int currentAdd = RO_MID_ADDRESS;
	char *snipBuffer = (char *) malloc(cmdMAX_INPUT_SIZE);
 8002bdc:	2032      	movs	r0, #50	; 0x32
 8002bde:	f013 fc87 	bl	80164f0 <malloc>
 8002be2:	4680      	mov	r8, r0
	if (snipBuffer == NULL)	return BOS_MEM_FULL;
 8002be4:	2800      	cmp	r0, #0
 8002be6:	d06c      	beq.n	8002cc2 <LoadROsnippets+0xf2>
	
	// Exit if no recorded Snippets
	if (*(uint8_t *)currentAdd != 0xFE)	return BOS_ERROR;
 8002be8:	4b38      	ldr	r3, [pc, #224]	; (8002ccc <LoadROsnippets+0xfc>)
 8002bea:	781b      	ldrb	r3, [r3, #0]
 8002bec:	2bfe      	cmp	r3, #254	; 0xfe
 8002bee:	d16a      	bne.n	8002cc6 <LoadROsnippets+0xf6>
 8002bf0:	4b37      	ldr	r3, [pc, #220]	; (8002cd0 <LoadROsnippets+0x100>)
 8002bf2:	4699      	mov	r9, r3
	int currentAdd = RO_MID_ADDRESS;
 8002bf4:	4c35      	ldr	r4, [pc, #212]	; (8002ccc <LoadROsnippets+0xfc>)
	for(uint8_t s=0 ; s<MAX_SNIPPETS ; s++)
	{
		// Load conditions starting at RO_MID_ADDRESS
		for(i=0 ; i<sizeof(snippet_t) ; i++)
			snipBuffer[i] = (*(__IO uint8_t*)(currentAdd++)); 
		memcpy( (uint8_t *)&snippets[s], (uint8_t *)&snipBuffer[1], sizeof(snippet_t));
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	4443      	add	r3, r8
 8002bfa:	469a      	mov	sl, r3
 8002bfc:	e026      	b.n	8002c4c <LoadROsnippets+0x7c>
		memset(snipBuffer, 0, sizeof(snippet_t)); i = 0;
 8002bfe:	2500      	movs	r5, #0
		while (*(uint8_t *)currentAdd != 0xFE && *(uint8_t *)currentAdd != 0xFF && i<cmdMAX_INPUT_SIZE)
		{
			snipBuffer[i] = *(uint8_t *)currentAdd;
			++currentAdd; ++i;
		}
		if (snipBuffer[i-1] != 0)		++i;	// String termination char was not recorded, then add one
 8002c00:	4643      	mov	r3, r8
 8002c02:	195b      	adds	r3, r3, r5
 8002c04:	3b01      	subs	r3, #1
 8002c06:	781b      	ldrb	r3, [r3, #0]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d001      	beq.n	8002c10 <LoadROsnippets+0x40>
 8002c0c:	3501      	adds	r5, #1
 8002c0e:	b2ed      	uxtb	r5, r5
		// Allocate buffer for the Snippet commands
		snippets[s].cmd = (char *) malloc(i);
 8002c10:	0028      	movs	r0, r5
 8002c12:	f013 fc6d 	bl	80164f0 <malloc>
 8002c16:	465b      	mov	r3, fp
 8002c18:	60d8      	str	r0, [r3, #12]
		if (snippets[s].cmd == NULL) {
 8002c1a:	2800      	cmp	r0, #0
 8002c1c:	d03d      	beq.n	8002c9a <LoadROsnippets+0xca>
			memset(&snippets[s], 0, sizeof(snippet_t) );
			free(snipBuffer);			
			return BOS_ERR_SNIP_MEM_FULL;
		} else {	
			// Copy the command
			memcpy(snippets[s].cmd, snipBuffer, i);
 8002c1e:	002a      	movs	r2, r5
 8002c20:	4641      	mov	r1, r8
 8002c22:	f013 fc87 	bl	8016534 <memcpy>
			++numOfRecordedSnippets;		// Record a successful Snippet
 8002c26:	4b2b      	ldr	r3, [pc, #172]	; (8002cd4 <LoadROsnippets+0x104>)
 8002c28:	781b      	ldrb	r3, [r3, #0]
 8002c2a:	3301      	adds	r3, #1
 8002c2c:	4a29      	ldr	r2, [pc, #164]	; (8002cd4 <LoadROsnippets+0x104>)
 8002c2e:	7013      	strb	r3, [r2, #0]
			memset(snipBuffer, 0, i);		
 8002c30:	002a      	movs	r2, r5
 8002c32:	2100      	movs	r1, #0
 8002c34:	4640      	mov	r0, r8
 8002c36:	f013 fc86 	bl	8016546 <memset>
		}
		// Exit if no more Snippets
		if (*(uint8_t *)currentAdd != 0xFE)	break;
 8002c3a:	783b      	ldrb	r3, [r7, #0]
 8002c3c:	2bfe      	cmp	r3, #254	; 0xfe
 8002c3e:	d136      	bne.n	8002cae <LoadROsnippets+0xde>
	for(uint8_t s=0 ; s<MAX_SNIPPETS ; s++)
 8002c40:	3bea      	subs	r3, #234	; 0xea
 8002c42:	469c      	mov	ip, r3
 8002c44:	44e1      	add	r9, ip
 8002c46:	4b24      	ldr	r3, [pc, #144]	; (8002cd8 <LoadROsnippets+0x108>)
 8002c48:	4599      	cmp	r9, r3
 8002c4a:	d030      	beq.n	8002cae <LoadROsnippets+0xde>
		for(i=0 ; i<sizeof(snippet_t) ; i++)
 8002c4c:	0021      	movs	r1, r4
 8002c4e:	3114      	adds	r1, #20
{
 8002c50:	0023      	movs	r3, r4
 8002c52:	4642      	mov	r2, r8
 8002c54:	1b16      	subs	r6, r2, r4
			snipBuffer[i] = (*(__IO uint8_t*)(currentAdd++)); 
 8002c56:	781a      	ldrb	r2, [r3, #0]
 8002c58:	54f2      	strb	r2, [r6, r3]
		for(i=0 ; i<sizeof(snippet_t) ; i++)
 8002c5a:	3301      	adds	r3, #1
 8002c5c:	428b      	cmp	r3, r1
 8002c5e:	d1fa      	bne.n	8002c56 <LoadROsnippets+0x86>
 8002c60:	3414      	adds	r4, #20
		memcpy( (uint8_t *)&snippets[s], (uint8_t *)&snipBuffer[1], sizeof(snippet_t));
 8002c62:	46cb      	mov	fp, r9
 8002c64:	2214      	movs	r2, #20
 8002c66:	4651      	mov	r1, sl
 8002c68:	4648      	mov	r0, r9
 8002c6a:	f013 fc63 	bl	8016534 <memcpy>
		memset(snipBuffer, 0, sizeof(snippet_t)); i = 0;
 8002c6e:	2214      	movs	r2, #20
 8002c70:	2100      	movs	r1, #0
 8002c72:	4640      	mov	r0, r8
 8002c74:	f013 fc67 	bl	8016546 <memset>
		while (*(uint8_t *)currentAdd != 0xFE && *(uint8_t *)currentAdd != 0xFF && i<cmdMAX_INPUT_SIZE)
 8002c78:	0027      	movs	r7, r4
 8002c7a:	7823      	ldrb	r3, [r4, #0]
 8002c7c:	2bfd      	cmp	r3, #253	; 0xfd
 8002c7e:	d8be      	bhi.n	8002bfe <LoadROsnippets+0x2e>
		memset(snipBuffer, 0, sizeof(snippet_t)); i = 0;
 8002c80:	2500      	movs	r5, #0
			snipBuffer[i] = *(uint8_t *)currentAdd;
 8002c82:	3e14      	subs	r6, #20
 8002c84:	5533      	strb	r3, [r6, r4]
			++currentAdd; ++i;
 8002c86:	3401      	adds	r4, #1
 8002c88:	3501      	adds	r5, #1
 8002c8a:	b2ed      	uxtb	r5, r5
		while (*(uint8_t *)currentAdd != 0xFE && *(uint8_t *)currentAdd != 0xFF && i<cmdMAX_INPUT_SIZE)
 8002c8c:	0027      	movs	r7, r4
 8002c8e:	7823      	ldrb	r3, [r4, #0]
 8002c90:	2bfd      	cmp	r3, #253	; 0xfd
 8002c92:	d8b5      	bhi.n	8002c00 <LoadROsnippets+0x30>
 8002c94:	2d32      	cmp	r5, #50	; 0x32
 8002c96:	d1f5      	bne.n	8002c84 <LoadROsnippets+0xb4>
 8002c98:	e7b2      	b.n	8002c00 <LoadROsnippets+0x30>
			memset(&snippets[s], 0, sizeof(snippet_t) );
 8002c9a:	2214      	movs	r2, #20
 8002c9c:	2100      	movs	r1, #0
 8002c9e:	4658      	mov	r0, fp
 8002ca0:	f013 fc51 	bl	8016546 <memset>
			free(snipBuffer);			
 8002ca4:	4640      	mov	r0, r8
 8002ca6:	f013 fc2d 	bl	8016504 <free>
			return BOS_ERR_SNIP_MEM_FULL;
 8002caa:	200e      	movs	r0, #14
 8002cac:	e003      	b.n	8002cb6 <LoadROsnippets+0xe6>
	}	
	
	free(snipBuffer);
 8002cae:	4640      	mov	r0, r8
 8002cb0:	f013 fc28 	bl	8016504 <free>
	return BOS_OK;
 8002cb4:	2000      	movs	r0, #0
}
 8002cb6:	bcf0      	pop	{r4, r5, r6, r7}
 8002cb8:	46bb      	mov	fp, r7
 8002cba:	46b2      	mov	sl, r6
 8002cbc:	46a9      	mov	r9, r5
 8002cbe:	46a0      	mov	r8, r4
 8002cc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (snipBuffer == NULL)	return BOS_MEM_FULL;
 8002cc2:	20fb      	movs	r0, #251	; 0xfb
 8002cc4:	e7f7      	b.n	8002cb6 <LoadROsnippets+0xe6>
	if (*(uint8_t *)currentAdd != 0xFE)	return BOS_ERROR;
 8002cc6:	20ff      	movs	r0, #255	; 0xff
 8002cc8:	e7f5      	b.n	8002cb6 <LoadROsnippets+0xe6>
 8002cca:	46c0      	nop			; (mov r8, r8)
 8002ccc:	0801dc00 	.word	0x0801dc00
 8002cd0:	20006384 	.word	0x20006384
 8002cd4:	20000ca3 	.word	0x20000ca3
 8002cd8:	200063e8 	.word	0x200063e8

08002cdc <LoadROtopology>:


/* --- Load array topology stored in Flash RO --- 
*/
uint8_t LoadROtopology(void)
{
 8002cdc:	b5f0      	push	{r4, r5, r6, r7, lr}
	BOS_Status result = BOS_OK; 
	uint16_t add = 2, temp = 0;
	
	/* Load number of modules */
	temp = (*(__IO uint16_t*)(RO_START_ADDRESS));
 8002cde:	4b1c      	ldr	r3, [pc, #112]	; (8002d50 <LoadROtopology+0x74>)
 8002ce0:	881b      	ldrh	r3, [r3, #0]
 8002ce2:	b29b      	uxth	r3, r3
	
	if (temp == 0xFFFF)				// Memory has been erased
 8002ce4:	4a1b      	ldr	r2, [pc, #108]	; (8002d54 <LoadROtopology+0x78>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d025      	beq.n	8002d36 <LoadROtopology+0x5a>
		myID = 0;
		return BOS_MEM_ERASED;
	}
	else
	{		
		N = (uint8_t) (temp>>8);
 8002cea:	0a1a      	lsrs	r2, r3, #8
		if (N == 0)	N = 1;
 8002cec:	d02b      	beq.n	8002d46 <LoadROtopology+0x6a>
		N = (uint8_t) (temp>>8);
 8002cee:	491a      	ldr	r1, [pc, #104]	; (8002d58 <LoadROtopology+0x7c>)
 8002cf0:	700a      	strb	r2, [r1, #0]
		myID = (uint8_t) temp;
 8002cf2:	4a1a      	ldr	r2, [pc, #104]	; (8002d5c <LoadROtopology+0x80>)
 8002cf4:	7013      	strb	r3, [r2, #0]
		
		/* Load topology */
		for(uint8_t i=1 ; i<=N ; i++)
 8002cf6:	4b18      	ldr	r3, [pc, #96]	; (8002d58 <LoadROtopology+0x7c>)
 8002cf8:	7818      	ldrb	r0, [r3, #0]
 8002cfa:	2418      	movs	r4, #24
 8002cfc:	2501      	movs	r5, #1
 8002cfe:	2800      	cmp	r0, #0
 8002d00:	d018      	beq.n	8002d34 <LoadROtopology+0x58>
 8002d02:	2716      	movs	r7, #22
 8002d04:	4e16      	ldr	r6, [pc, #88]	; (8002d60 <LoadROtopology+0x84>)
 8002d06:	0023      	movs	r3, r4
 8002d08:	3b16      	subs	r3, #22
 8002d0a:	b29b      	uxth	r3, r3
		{
			for(uint8_t j=0 ; j<=MaxNumOfPorts ; j++)
 8002d0c:	003a      	movs	r2, r7
 8002d0e:	436a      	muls	r2, r5
 8002d10:	3a16      	subs	r2, #22
 8002d12:	1992      	adds	r2, r2, r6
			{
				array[i-1][j] = (*(__IO uint16_t*)(RO_START_ADDRESS+add));
 8002d14:	490e      	ldr	r1, [pc, #56]	; (8002d50 <LoadROtopology+0x74>)
 8002d16:	1859      	adds	r1, r3, r1
 8002d18:	8809      	ldrh	r1, [r1, #0]
 8002d1a:	8011      	strh	r1, [r2, #0]
				add += 2;			
 8002d1c:	3302      	adds	r3, #2
 8002d1e:	b29b      	uxth	r3, r3
			for(uint8_t j=0 ; j<=MaxNumOfPorts ; j++)
 8002d20:	3202      	adds	r2, #2
 8002d22:	42a3      	cmp	r3, r4
 8002d24:	d1f6      	bne.n	8002d14 <LoadROtopology+0x38>
		for(uint8_t i=1 ; i<=N ; i++)
 8002d26:	3501      	adds	r5, #1
 8002d28:	b2ed      	uxtb	r5, r5
 8002d2a:	3416      	adds	r4, #22
 8002d2c:	b2a4      	uxth	r4, r4
 8002d2e:	4285      	cmp	r5, r0
 8002d30:	d9e9      	bls.n	8002d06 <LoadROtopology+0x2a>
			}
		}	
	}
	
	return result;
 8002d32:	2000      	movs	r0, #0
}
 8002d34:	bdf0      	pop	{r4, r5, r6, r7, pc}
		N = 1;
 8002d36:	4b08      	ldr	r3, [pc, #32]	; (8002d58 <LoadROtopology+0x7c>)
 8002d38:	2201      	movs	r2, #1
 8002d3a:	701a      	strb	r2, [r3, #0]
		myID = 0;
 8002d3c:	4b07      	ldr	r3, [pc, #28]	; (8002d5c <LoadROtopology+0x80>)
 8002d3e:	2200      	movs	r2, #0
 8002d40:	701a      	strb	r2, [r3, #0]
		return BOS_MEM_ERASED;
 8002d42:	20fa      	movs	r0, #250	; 0xfa
 8002d44:	e7f6      	b.n	8002d34 <LoadROtopology+0x58>
		if (N == 0)	N = 1;
 8002d46:	4a04      	ldr	r2, [pc, #16]	; (8002d58 <LoadROtopology+0x7c>)
 8002d48:	2101      	movs	r1, #1
 8002d4a:	7011      	strb	r1, [r2, #0]
 8002d4c:	e7d1      	b.n	8002cf2 <LoadROtopology+0x16>
 8002d4e:	46c0      	nop			; (mov r8, r8)
 8002d50:	0801d800 	.word	0x0801d800
 8002d54:	0000ffff 	.word	0x0000ffff
 8002d58:	2000001c 	.word	0x2000001c
 8002d5c:	20000b04 	.word	0x20000b04
 8002d60:	20000560 	.word	0x20000560

08002d64 <SaveEEportsDir>:


/* --- Save array ports directions in EEPROM --- 
*/
BOS_Status SaveEEportsDir(void)
{
 8002d64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	BOS_Status result = BOS_OK; 
	
	for(uint8_t i=1 ; i<=N ; i++)
 8002d66:	4b0e      	ldr	r3, [pc, #56]	; (8002da0 <SaveEEportsDir+0x3c>)
 8002d68:	781d      	ldrb	r5, [r3, #0]
 8002d6a:	2d00      	cmp	r5, #0
 8002d6c:	d016      	beq.n	8002d9c <SaveEEportsDir+0x38>
 8002d6e:	2401      	movs	r4, #1
	BOS_Status result = BOS_OK; 
 8002d70:	2500      	movs	r5, #0
	{
		if (arrayPortsDir[i-1])
 8002d72:	4f0c      	ldr	r7, [pc, #48]	; (8002da4 <SaveEEportsDir+0x40>)
	for(uint8_t i=1 ; i<=N ; i++)
 8002d74:	001e      	movs	r6, r3
 8002d76:	e008      	b.n	8002d8a <SaveEEportsDir+0x26>
			EE_WriteVariable(_EE_PORT_DIR_BASE+i-1, arrayPortsDir[i-1]);		
 8002d78:	1c60      	adds	r0, r4, #1
 8002d7a:	f004 fbad 	bl	80074d8 <EE_WriteVariable>
 8002d7e:	e009      	b.n	8002d94 <SaveEEportsDir+0x30>
	for(uint8_t i=1 ; i<=N ; i++)
 8002d80:	3401      	adds	r4, #1
 8002d82:	b2e4      	uxtb	r4, r4
 8002d84:	7833      	ldrb	r3, [r6, #0]
 8002d86:	42a3      	cmp	r3, r4
 8002d88:	d308      	bcc.n	8002d9c <SaveEEportsDir+0x38>
		if (arrayPortsDir[i-1])
 8002d8a:	1e63      	subs	r3, r4, #1
 8002d8c:	005b      	lsls	r3, r3, #1
 8002d8e:	5bd9      	ldrh	r1, [r3, r7]
 8002d90:	2900      	cmp	r1, #0
 8002d92:	d1f1      	bne.n	8002d78 <SaveEEportsDir+0x14>
		
		if ((i+_EE_PORT_DIR_BASE) >= _EE_ALIAS_BASE)
 8002d94:	2c19      	cmp	r4, #25
 8002d96:	d9f3      	bls.n	8002d80 <SaveEEportsDir+0x1c>
			result = BOS_ERR_EEPROM;
 8002d98:	250a      	movs	r5, #10
 8002d9a:	e7f1      	b.n	8002d80 <SaveEEportsDir+0x1c>
	}
	
	return result;
}
 8002d9c:	0028      	movs	r0, r5
 8002d9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002da0:	2000001c 	.word	0x2000001c
 8002da4:	200068e4 	.word	0x200068e4

08002da8 <ClearEEportsDir>:
/*-----------------------------------------------------------*/

/* --- Clear array ports directions in EEPROM --- 
*/
BOS_Status ClearEEportsDir(void)
{
 8002da8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	BOS_Status result = BOS_OK; 
	
	memset(arrayPortsDir, 0, sizeof(arrayPortsDir));
 8002daa:	2232      	movs	r2, #50	; 0x32
 8002dac:	2100      	movs	r1, #0
 8002dae:	4810      	ldr	r0, [pc, #64]	; (8002df0 <ClearEEportsDir+0x48>)
 8002db0:	f013 fbc9 	bl	8016546 <memset>
	
	for(uint8_t i=1 ; i<=N ; i++)
 8002db4:	4b0f      	ldr	r3, [pc, #60]	; (8002df4 <ClearEEportsDir+0x4c>)
 8002db6:	781d      	ldrb	r5, [r3, #0]
 8002db8:	2d00      	cmp	r5, #0
 8002dba:	d016      	beq.n	8002dea <ClearEEportsDir+0x42>
 8002dbc:	2401      	movs	r4, #1
	BOS_Status result = BOS_OK; 
 8002dbe:	2500      	movs	r5, #0
	{
		if (arrayPortsDir[i-1])
 8002dc0:	4f0b      	ldr	r7, [pc, #44]	; (8002df0 <ClearEEportsDir+0x48>)
	for(uint8_t i=1 ; i<=N ; i++)
 8002dc2:	001e      	movs	r6, r3
 8002dc4:	e008      	b.n	8002dd8 <ClearEEportsDir+0x30>
			EE_WriteVariable(_EE_PORT_DIR_BASE+i-1, arrayPortsDir[i-1]);		
 8002dc6:	1c60      	adds	r0, r4, #1
 8002dc8:	f004 fb86 	bl	80074d8 <EE_WriteVariable>
 8002dcc:	e009      	b.n	8002de2 <ClearEEportsDir+0x3a>
	for(uint8_t i=1 ; i<=N ; i++)
 8002dce:	3401      	adds	r4, #1
 8002dd0:	b2e4      	uxtb	r4, r4
 8002dd2:	7833      	ldrb	r3, [r6, #0]
 8002dd4:	42a3      	cmp	r3, r4
 8002dd6:	d308      	bcc.n	8002dea <ClearEEportsDir+0x42>
		if (arrayPortsDir[i-1])
 8002dd8:	1e63      	subs	r3, r4, #1
 8002dda:	005b      	lsls	r3, r3, #1
 8002ddc:	5bd9      	ldrh	r1, [r3, r7]
 8002dde:	2900      	cmp	r1, #0
 8002de0:	d1f1      	bne.n	8002dc6 <ClearEEportsDir+0x1e>
		
		if ((i+_EE_PORT_DIR_BASE) >= _EE_ALIAS_BASE)
 8002de2:	2c19      	cmp	r4, #25
 8002de4:	d9f3      	bls.n	8002dce <ClearEEportsDir+0x26>
			result = BOS_ERR_EEPROM;
 8002de6:	250a      	movs	r5, #10
 8002de8:	e7f1      	b.n	8002dce <ClearEEportsDir+0x26>
	}
	
	return result;
}
 8002dea:	0028      	movs	r0, r5
 8002dec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002dee:	46c0      	nop			; (mov r8, r8)
 8002df0:	200068e4 	.word	0x200068e4
 8002df4:	2000001c 	.word	0x2000001c

08002df8 <LoadEEportsDir>:
/*-----------------------------------------------------------*/

/* --- Load array ports directions stored in EEPROM --- 
*/
BOS_Status LoadEEportsDir(void)
{
 8002df8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	BOS_Status result = BOS_OK; 
	
	for(uint8_t i=1 ; i<=N ; i++)
 8002dfa:	4b0e      	ldr	r3, [pc, #56]	; (8002e34 <LoadEEportsDir+0x3c>)
 8002dfc:	781d      	ldrb	r5, [r3, #0]
 8002dfe:	2d00      	cmp	r5, #0
 8002e00:	d016      	beq.n	8002e30 <LoadEEportsDir+0x38>
	{
		EE_ReadVariable(_EE_PORT_DIR_BASE+i-1, &arrayPortsDir[i-1]);		
 8002e02:	490d      	ldr	r1, [pc, #52]	; (8002e38 <LoadEEportsDir+0x40>)
 8002e04:	2002      	movs	r0, #2
 8002e06:	f004 fb3b 	bl	8007480 <EE_ReadVariable>
	for(uint8_t i=1 ; i<=N ; i++)
 8002e0a:	2401      	movs	r4, #1
	BOS_Status result = BOS_OK; 
 8002e0c:	2500      	movs	r5, #0
	for(uint8_t i=1 ; i<=N ; i++)
 8002e0e:	4e09      	ldr	r6, [pc, #36]	; (8002e34 <LoadEEportsDir+0x3c>)
		EE_ReadVariable(_EE_PORT_DIR_BASE+i-1, &arrayPortsDir[i-1]);		
 8002e10:	4f09      	ldr	r7, [pc, #36]	; (8002e38 <LoadEEportsDir+0x40>)
	for(uint8_t i=1 ; i<=N ; i++)
 8002e12:	3401      	adds	r4, #1
 8002e14:	b2e4      	uxtb	r4, r4
 8002e16:	7833      	ldrb	r3, [r6, #0]
 8002e18:	42a3      	cmp	r3, r4
 8002e1a:	d309      	bcc.n	8002e30 <LoadEEportsDir+0x38>
		EE_ReadVariable(_EE_PORT_DIR_BASE+i-1, &arrayPortsDir[i-1]);		
 8002e1c:	1e61      	subs	r1, r4, #1
 8002e1e:	0049      	lsls	r1, r1, #1
 8002e20:	19c9      	adds	r1, r1, r7
 8002e22:	1c60      	adds	r0, r4, #1
 8002e24:	f004 fb2c 	bl	8007480 <EE_ReadVariable>
		
		if ((i+_EE_PORT_DIR_BASE) >= _EE_ALIAS_BASE)
 8002e28:	2c19      	cmp	r4, #25
 8002e2a:	d9f2      	bls.n	8002e12 <LoadEEportsDir+0x1a>
			result = BOS_ERR_EEPROM;
 8002e2c:	250a      	movs	r5, #10
 8002e2e:	e7f0      	b.n	8002e12 <LoadEEportsDir+0x1a>
	}
	
	return result;
}
 8002e30:	0028      	movs	r0, r5
 8002e32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002e34:	2000001c 	.word	0x2000001c
 8002e38:	200068e4 	.word	0x200068e4

08002e3c <SaveEEalias>:
/*-----------------------------------------------------------*/

/* --- Save module alias in EEPROM --- 
*/
BOS_Status SaveEEalias(void)
{
 8002e3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e3e:	46de      	mov	lr, fp
 8002e40:	464f      	mov	r7, r9
 8002e42:	4646      	mov	r6, r8
 8002e44:	b5c0      	push	{r6, r7, lr}
	BOS_Status result = BOS_OK; 
	uint16_t add = 0, temp = 0;
	
	for(uint8_t i=0 ; i<=N ; i++)				// N+1 module aliases
 8002e46:	2500      	movs	r5, #0
	uint16_t add = 0, temp = 0;
 8002e48:	2300      	movs	r3, #0
 8002e4a:	4699      	mov	r9, r3
	{
		if (moduleAlias[i][0]) 				
 8002e4c:	4b1a      	ldr	r3, [pc, #104]	; (8002eb8 <SaveEEalias+0x7c>)
 8002e4e:	469b      	mov	fp, r3
	for(uint8_t i=0 ; i<=N ; i++)				// N+1 module aliases
 8002e50:	4f1a      	ldr	r7, [pc, #104]	; (8002ebc <SaveEEalias+0x80>)
 8002e52:	e004      	b.n	8002e5e <SaveEEalias+0x22>
 8002e54:	3501      	adds	r5, #1
 8002e56:	b2ed      	uxtb	r5, r5
 8002e58:	783b      	ldrb	r3, [r7, #0]
 8002e5a:	42ab      	cmp	r3, r5
 8002e5c:	d325      	bcc.n	8002eaa <SaveEEalias+0x6e>
		if (moduleAlias[i][0]) 				
 8002e5e:	00ab      	lsls	r3, r5, #2
 8002e60:	195b      	adds	r3, r3, r5
 8002e62:	005b      	lsls	r3, r3, #1
 8002e64:	465a      	mov	r2, fp
 8002e66:	5c9b      	ldrb	r3, [r3, r2]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d0f3      	beq.n	8002e54 <SaveEEalias+0x18>
 8002e6c:	00ae      	lsls	r6, r5, #2
 8002e6e:	1976      	adds	r6, r6, r5
 8002e70:	0076      	lsls	r6, r6, #1
 8002e72:	4b11      	ldr	r3, [pc, #68]	; (8002eb8 <SaveEEalias+0x7c>)
 8002e74:	469c      	mov	ip, r3
 8002e76:	4466      	add	r6, ip
 8002e78:	464c      	mov	r4, r9
 8002e7a:	341c      	adds	r4, #28
 8002e7c:	b2a4      	uxth	r4, r4
 8002e7e:	464b      	mov	r3, r9
 8002e80:	3321      	adds	r3, #33	; 0x21
 8002e82:	b29b      	uxth	r3, r3
 8002e84:	4698      	mov	r8, r3
		{
			for(uint8_t j=1 ; j<=MaxLengthOfAlias ; j+=2)
			{
				temp = (uint16_t) (moduleAlias[i][j-1]<<8) + moduleAlias[i][j];
 8002e86:	7833      	ldrb	r3, [r6, #0]
 8002e88:	021b      	lsls	r3, r3, #8
 8002e8a:	7871      	ldrb	r1, [r6, #1]
 8002e8c:	18c9      	adds	r1, r1, r3
				EE_WriteVariable(_EE_ALIAS_BASE+add, temp);
 8002e8e:	b289      	uxth	r1, r1
 8002e90:	0020      	movs	r0, r4
 8002e92:	f004 fb21 	bl	80074d8 <EE_WriteVariable>
			for(uint8_t j=1 ; j<=MaxLengthOfAlias ; j+=2)
 8002e96:	3602      	adds	r6, #2
 8002e98:	3401      	adds	r4, #1
 8002e9a:	b2a4      	uxth	r4, r4
 8002e9c:	45a0      	cmp	r8, r4
 8002e9e:	d1f2      	bne.n	8002e86 <SaveEEalias+0x4a>
 8002ea0:	464b      	mov	r3, r9
 8002ea2:	3305      	adds	r3, #5
 8002ea4:	b29b      	uxth	r3, r3
 8002ea6:	4699      	mov	r9, r3
 8002ea8:	e7d4      	b.n	8002e54 <SaveEEalias+0x18>
			}
		}			
	}
	
	return result;
}
 8002eaa:	2000      	movs	r0, #0
 8002eac:	bce0      	pop	{r5, r6, r7}
 8002eae:	46bb      	mov	fp, r7
 8002eb0:	46b1      	mov	r9, r6
 8002eb2:	46a8      	mov	r8, r5
 8002eb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002eb6:	46c0      	nop			; (mov r8, r8)
 8002eb8:	20000a00 	.word	0x20000a00
 8002ebc:	2000001c 	.word	0x2000001c

08002ec0 <LoadEEalias>:
/*-----------------------------------------------------------*/

/* --- Load module alias stored in EEPROM --- 
*/
BOS_Status LoadEEalias(void)
{
 8002ec0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ec2:	46de      	mov	lr, fp
 8002ec4:	4657      	mov	r7, sl
 8002ec6:	464e      	mov	r6, r9
 8002ec8:	4645      	mov	r5, r8
 8002eca:	b5e0      	push	{r5, r6, r7, lr}
 8002ecc:	b083      	sub	sp, #12
	BOS_Status result = BOS_OK; 
	uint16_t add = 0, temp = 0;
 8002ece:	466b      	mov	r3, sp
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	80da      	strh	r2, [r3, #6]
 8002ed4:	2721      	movs	r7, #33	; 0x21
	
	for(uint8_t i=0 ; i<=N ; i++)				// N+1 module aliases
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	4698      	mov	r8, r3
 8002eda:	4b1a      	ldr	r3, [pc, #104]	; (8002f44 <LoadEEalias+0x84>)
 8002edc:	469b      	mov	fp, r3
			EE_ReadVariable(_EE_ALIAS_BASE+add, &temp);
			moduleAlias[i][j] = (uint8_t) temp;
			moduleAlias[i][j-1] = (uint8_t) (temp>>8);
			add++;			
		}
		moduleAlias[i][MaxLengthOfAlias] = '\0';
 8002ede:	469a      	mov	sl, r3
 8002ee0:	e010      	b.n	8002f04 <LoadEEalias+0x44>
 8002ee2:	464b      	mov	r3, r9
 8002ee4:	009b      	lsls	r3, r3, #2
 8002ee6:	444b      	add	r3, r9
 8002ee8:	005b      	lsls	r3, r3, #1
 8002eea:	4453      	add	r3, sl
 8002eec:	2200      	movs	r2, #0
 8002eee:	725a      	strb	r2, [r3, #9]
	for(uint8_t i=0 ; i<=N ; i++)				// N+1 module aliases
 8002ef0:	4643      	mov	r3, r8
 8002ef2:	3301      	adds	r3, #1
 8002ef4:	b2db      	uxtb	r3, r3
 8002ef6:	4698      	mov	r8, r3
 8002ef8:	3705      	adds	r7, #5
 8002efa:	b2bf      	uxth	r7, r7
 8002efc:	4b12      	ldr	r3, [pc, #72]	; (8002f48 <LoadEEalias+0x88>)
 8002efe:	781b      	ldrb	r3, [r3, #0]
 8002f00:	4543      	cmp	r3, r8
 8002f02:	d317      	bcc.n	8002f34 <LoadEEalias+0x74>
		for(uint8_t j=1 ; j<=MaxLengthOfAlias ; j+=2)
 8002f04:	1f7c      	subs	r4, r7, #5
 8002f06:	b2a4      	uxth	r4, r4
 8002f08:	4643      	mov	r3, r8
 8002f0a:	009d      	lsls	r5, r3, #2
 8002f0c:	4445      	add	r5, r8
 8002f0e:	006d      	lsls	r5, r5, #1
 8002f10:	445d      	add	r5, fp
			EE_ReadVariable(_EE_ALIAS_BASE+add, &temp);
 8002f12:	466b      	mov	r3, sp
 8002f14:	1d9e      	adds	r6, r3, #6
			moduleAlias[i][j] = (uint8_t) temp;
 8002f16:	46c1      	mov	r9, r8
			EE_ReadVariable(_EE_ALIAS_BASE+add, &temp);
 8002f18:	0031      	movs	r1, r6
 8002f1a:	0020      	movs	r0, r4
 8002f1c:	f004 fab0 	bl	8007480 <EE_ReadVariable>
			moduleAlias[i][j] = (uint8_t) temp;
 8002f20:	8833      	ldrh	r3, [r6, #0]
 8002f22:	706b      	strb	r3, [r5, #1]
			moduleAlias[i][j-1] = (uint8_t) (temp>>8);
 8002f24:	0a1b      	lsrs	r3, r3, #8
 8002f26:	702b      	strb	r3, [r5, #0]
		for(uint8_t j=1 ; j<=MaxLengthOfAlias ; j+=2)
 8002f28:	3401      	adds	r4, #1
 8002f2a:	b2a4      	uxth	r4, r4
 8002f2c:	3502      	adds	r5, #2
 8002f2e:	42a7      	cmp	r7, r4
 8002f30:	d1f2      	bne.n	8002f18 <LoadEEalias+0x58>
 8002f32:	e7d6      	b.n	8002ee2 <LoadEEalias+0x22>
	}
	
	return result;
}
 8002f34:	2000      	movs	r0, #0
 8002f36:	b003      	add	sp, #12
 8002f38:	bcf0      	pop	{r4, r5, r6, r7}
 8002f3a:	46bb      	mov	fp, r7
 8002f3c:	46b2      	mov	sl, r6
 8002f3e:	46a9      	mov	r9, r5
 8002f40:	46a0      	mov	r8, r4
 8002f42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f44:	20000a00 	.word	0x20000a00
 8002f48:	2000001c 	.word	0x2000001c

08002f4c <LoadEEgroup>:
/*-----------------------------------------------------------*/

/* --- Load module groups stored in EEPROM --- 
*/
BOS_Status LoadEEgroup(void)
{
 8002f4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f4e:	46d6      	mov	lr, sl
 8002f50:	464f      	mov	r7, r9
 8002f52:	4646      	mov	r6, r8
 8002f54:	b5c0      	push	{r6, r7, lr}
 8002f56:	b082      	sub	sp, #8
	BOS_Status result = BOS_OK; 
	uint16_t add = 0, temp = 0; uint8_t i=0;
 8002f58:	466b      	mov	r3, sp
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	80da      	strh	r2, [r3, #6]
	
	/* Load group members */
	for(i=0 ; i<N ; i++)			// N modules
 8002f5e:	4b23      	ldr	r3, [pc, #140]	; (8002fec <LoadEEgroup+0xa0>)
 8002f60:	781b      	ldrb	r3, [r3, #0]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d01d      	beq.n	8002fa2 <LoadEEgroup+0x56>
	uint16_t add = 0, temp = 0; uint8_t i=0;
 8002f66:	2400      	movs	r4, #0
	{
		EE_ReadVariable(_EE_GROUP_MODULES_BASE+add, &groupModules[i]);
 8002f68:	4e21      	ldr	r6, [pc, #132]	; (8002ff0 <LoadEEgroup+0xa4>)
	for(i=0 ; i<N ; i++)			// N modules
 8002f6a:	4d20      	ldr	r5, [pc, #128]	; (8002fec <LoadEEgroup+0xa0>)
		EE_ReadVariable(_EE_GROUP_MODULES_BASE+add, &groupModules[i]);
 8002f6c:	b2e1      	uxtb	r1, r4
 8002f6e:	0049      	lsls	r1, r1, #1
 8002f70:	1871      	adds	r1, r6, r1
 8002f72:	0020      	movs	r0, r4
 8002f74:	30cb      	adds	r0, #203	; 0xcb
 8002f76:	b280      	uxth	r0, r0
 8002f78:	f004 fa82 	bl	8007480 <EE_ReadVariable>
		add++;
 8002f7c:	1c63      	adds	r3, r4, #1
 8002f7e:	b29c      	uxth	r4, r3
	for(i=0 ; i<N ; i++)			// N modules
 8002f80:	782a      	ldrb	r2, [r5, #0]
 8002f82:	b2db      	uxtb	r3, r3
 8002f84:	429a      	cmp	r2, r3
 8002f86:	d8f1      	bhi.n	8002f6c <LoadEEgroup+0x20>
	}

	/* Load group alias */
	for(i=0 ; i<MaxNumOfGroups ; i++)		// MaxNumOfGroups group aliases
 8002f88:	4b1a      	ldr	r3, [pc, #104]	; (8002ff4 <LoadEEgroup+0xa8>)
 8002f8a:	4699      	mov	r9, r3
 8002f8c:	0027      	movs	r7, r4
 8002f8e:	379e      	adds	r7, #158	; 0x9e
 8002f90:	b2bf      	uxth	r7, r7
 8002f92:	34d0      	adds	r4, #208	; 0xd0
 8002f94:	b2a3      	uxth	r3, r4
 8002f96:	4698      	mov	r8, r3
	{
		for(uint8_t j=1 ; j<=MaxLengthOfAlias ; j+=2)
		{
			EE_ReadVariable(_EE_GROUP_ALIAS_BASE+add, &temp);
 8002f98:	466b      	mov	r3, sp
 8002f9a:	1d9e      	adds	r6, r3, #6
			groupAlias[i][j] = (uint8_t) temp;
			groupAlias[i][j-1] = (uint8_t) (temp>>8);
			add++;			
		}
		groupAlias[i][MaxLengthOfAlias] = '\0';
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	469a      	mov	sl, r3
 8002fa0:	e00b      	b.n	8002fba <LoadEEgroup+0x6e>
	uint16_t add = 0, temp = 0; uint8_t i=0;
 8002fa2:	2400      	movs	r4, #0
 8002fa4:	e7f0      	b.n	8002f88 <LoadEEgroup+0x3c>
		groupAlias[i][MaxLengthOfAlias] = '\0';
 8002fa6:	464b      	mov	r3, r9
 8002fa8:	4652      	mov	r2, sl
 8002faa:	725a      	strb	r2, [r3, #9]
	for(i=0 ; i<MaxNumOfGroups ; i++)		// MaxNumOfGroups group aliases
 8002fac:	230a      	movs	r3, #10
 8002fae:	469c      	mov	ip, r3
 8002fb0:	44e1      	add	r9, ip
 8002fb2:	3705      	adds	r7, #5
 8002fb4:	b2bf      	uxth	r7, r7
 8002fb6:	4547      	cmp	r7, r8
 8002fb8:	d010      	beq.n	8002fdc <LoadEEgroup+0x90>
		for(uint8_t j=1 ; j<=MaxLengthOfAlias ; j+=2)
 8002fba:	1f7c      	subs	r4, r7, #5
 8002fbc:	b2a4      	uxth	r4, r4
	uint16_t add = 0, temp = 0; uint8_t i=0;
 8002fbe:	464d      	mov	r5, r9
			EE_ReadVariable(_EE_GROUP_ALIAS_BASE+add, &temp);
 8002fc0:	0031      	movs	r1, r6
 8002fc2:	0020      	movs	r0, r4
 8002fc4:	f004 fa5c 	bl	8007480 <EE_ReadVariable>
			groupAlias[i][j] = (uint8_t) temp;
 8002fc8:	8833      	ldrh	r3, [r6, #0]
 8002fca:	706b      	strb	r3, [r5, #1]
			groupAlias[i][j-1] = (uint8_t) (temp>>8);
 8002fcc:	0a1b      	lsrs	r3, r3, #8
 8002fce:	702b      	strb	r3, [r5, #0]
		for(uint8_t j=1 ; j<=MaxLengthOfAlias ; j+=2)
 8002fd0:	3401      	adds	r4, #1
 8002fd2:	b2a4      	uxth	r4, r4
 8002fd4:	3502      	adds	r5, #2
 8002fd6:	42bc      	cmp	r4, r7
 8002fd8:	d1f2      	bne.n	8002fc0 <LoadEEgroup+0x74>
 8002fda:	e7e4      	b.n	8002fa6 <LoadEEgroup+0x5a>
	}
	
	return result;
}
 8002fdc:	2000      	movs	r0, #0
 8002fde:	b002      	add	sp, #8
 8002fe0:	bce0      	pop	{r5, r6, r7}
 8002fe2:	46ba      	mov	sl, r7
 8002fe4:	46b1      	mov	r9, r6
 8002fe6:	46a8      	mov	r8, r5
 8002fe8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002fea:	46c0      	nop			; (mov r8, r8)
 8002fec:	2000001c 	.word	0x2000001c
 8002ff0:	20000958 	.word	0x20000958
 8002ff4:	200008f4 	.word	0x200008f4

08002ff8 <LoadEEstreams>:
/*-----------------------------------------------------------*/

/* --- Load module DMA streams --- 
*/
BOS_Status LoadEEstreams(void)
{
 8002ff8:	b570      	push	{r4, r5, r6, lr}
 8002ffa:	b084      	sub	sp, #16
	BOS_Status result = BOS_OK; 
	uint16_t temp1 = 0, temp2 = 0, status1 = 0, status2 = 0; 
 8002ffc:	210e      	movs	r1, #14
 8002ffe:	4469      	add	r1, sp
 8003000:	2300      	movs	r3, #0
 8003002:	800b      	strh	r3, [r1, #0]
 8003004:	aa03      	add	r2, sp, #12
 8003006:	8013      	strh	r3, [r2, #0]
	uint8_t direction = 0; uint32_t count = 0, timeout = 0;
	static uint8_t src1, dst1, src2, dst2, src3, dst3;
	
	/* Direction */
	status1 = EE_ReadVariable(_EE_DMA_STREAM_BASE, &temp1);
 8003008:	20e4      	movs	r0, #228	; 0xe4
 800300a:	f004 fa39 	bl	8007480 <EE_ReadVariable>
	uint8_t direction = 0; uint32_t count = 0, timeout = 0;
 800300e:	2500      	movs	r5, #0
	if (!status1) {
 8003010:	2800      	cmp	r0, #0
 8003012:	d102      	bne.n	800301a <LoadEEstreams+0x22>
		direction = (uint8_t) temp1;
 8003014:	230e      	movs	r3, #14
 8003016:	446b      	add	r3, sp
 8003018:	781d      	ldrb	r5, [r3, #0]
	}

	/* Count */
	status1 = EE_ReadVariable(_EE_DMA_STREAM_BASE+1, &temp1);
 800301a:	210e      	movs	r1, #14
 800301c:	4469      	add	r1, sp
 800301e:	20e5      	movs	r0, #229	; 0xe5
 8003020:	f004 fa2e 	bl	8007480 <EE_ReadVariable>
 8003024:	0004      	movs	r4, r0
	status2 = EE_ReadVariable(_EE_DMA_STREAM_BASE+2, &temp2);
 8003026:	a903      	add	r1, sp, #12
 8003028:	20e6      	movs	r0, #230	; 0xe6
 800302a:	f004 fa29 	bl	8007480 <EE_ReadVariable>
	if (!status1 && !status2) {
 800302e:	4304      	orrs	r4, r0
 8003030:	b2a4      	uxth	r4, r4
	uint8_t direction = 0; uint32_t count = 0, timeout = 0;
 8003032:	2600      	movs	r6, #0
	if (!status1 && !status2) {
 8003034:	2c00      	cmp	r4, #0
 8003036:	d106      	bne.n	8003046 <LoadEEstreams+0x4e>
		count = ( (uint32_t) temp1 << 16 ) + temp2;
 8003038:	230e      	movs	r3, #14
 800303a:	446b      	add	r3, sp
 800303c:	881e      	ldrh	r6, [r3, #0]
 800303e:	0436      	lsls	r6, r6, #16
 8003040:	ab03      	add	r3, sp, #12
 8003042:	881b      	ldrh	r3, [r3, #0]
 8003044:	18f6      	adds	r6, r6, r3
	}
	
	/* Timeout */
	status1 = EE_ReadVariable(_EE_DMA_STREAM_BASE+3, &temp1);
 8003046:	210e      	movs	r1, #14
 8003048:	4469      	add	r1, sp
 800304a:	20e7      	movs	r0, #231	; 0xe7
 800304c:	f004 fa18 	bl	8007480 <EE_ReadVariable>
 8003050:	0004      	movs	r4, r0
	status2 = EE_ReadVariable(_EE_DMA_STREAM_BASE+4, &temp2);
 8003052:	a903      	add	r1, sp, #12
 8003054:	20e8      	movs	r0, #232	; 0xe8
 8003056:	f004 fa13 	bl	8007480 <EE_ReadVariable>
	if (!status1 && !status2) {
 800305a:	4320      	orrs	r0, r4
 800305c:	b280      	uxth	r0, r0
	uint8_t direction = 0; uint32_t count = 0, timeout = 0;
 800305e:	2400      	movs	r4, #0
	if (!status1 && !status2) {
 8003060:	2800      	cmp	r0, #0
 8003062:	d106      	bne.n	8003072 <LoadEEstreams+0x7a>
		timeout = ( (uint32_t) temp1 << 16 ) + temp2;
 8003064:	230e      	movs	r3, #14
 8003066:	446b      	add	r3, sp
 8003068:	881c      	ldrh	r4, [r3, #0]
 800306a:	0424      	lsls	r4, r4, #16
 800306c:	ab03      	add	r3, sp, #12
 800306e:	881b      	ldrh	r3, [r3, #0]
 8003070:	18e4      	adds	r4, r4, r3
	}
	
	/* src1 | dst1 */
	status1 = EE_ReadVariable(_EE_DMA_STREAM_BASE+5, &temp1);
 8003072:	210e      	movs	r1, #14
 8003074:	4469      	add	r1, sp
 8003076:	20e9      	movs	r0, #233	; 0xe9
 8003078:	f004 fa02 	bl	8007480 <EE_ReadVariable>
	if (!status1) {
 800307c:	2800      	cmp	r0, #0
 800307e:	d107      	bne.n	8003090 <LoadEEstreams+0x98>
		src1 = (uint8_t) (temp1 >> 8);
 8003080:	230e      	movs	r3, #14
 8003082:	446b      	add	r3, sp
 8003084:	881b      	ldrh	r3, [r3, #0]
 8003086:	0a19      	lsrs	r1, r3, #8
 8003088:	4a28      	ldr	r2, [pc, #160]	; (800312c <LoadEEstreams+0x134>)
 800308a:	7011      	strb	r1, [r2, #0]
		dst1 = (uint8_t) temp1;
 800308c:	4a28      	ldr	r2, [pc, #160]	; (8003130 <LoadEEstreams+0x138>)
 800308e:	7013      	strb	r3, [r2, #0]
	}
	
	/* src2 | dst2 */
	status1 = EE_ReadVariable(_EE_DMA_STREAM_BASE+6, &temp1);
 8003090:	210e      	movs	r1, #14
 8003092:	4469      	add	r1, sp
 8003094:	20ea      	movs	r0, #234	; 0xea
 8003096:	f004 f9f3 	bl	8007480 <EE_ReadVariable>
	if (!status1) {
 800309a:	2800      	cmp	r0, #0
 800309c:	d107      	bne.n	80030ae <LoadEEstreams+0xb6>
		src2 = (uint8_t) (temp1 >> 8);
 800309e:	230e      	movs	r3, #14
 80030a0:	446b      	add	r3, sp
 80030a2:	881b      	ldrh	r3, [r3, #0]
 80030a4:	0a19      	lsrs	r1, r3, #8
 80030a6:	4a23      	ldr	r2, [pc, #140]	; (8003134 <LoadEEstreams+0x13c>)
 80030a8:	7011      	strb	r1, [r2, #0]
		dst2 = (uint8_t) temp1;	
 80030aa:	4a23      	ldr	r2, [pc, #140]	; (8003138 <LoadEEstreams+0x140>)
 80030ac:	7013      	strb	r3, [r2, #0]
	}

	/* src3 | dst3 */
	status1 = EE_ReadVariable(_EE_DMA_STREAM_BASE+7, &temp1);
 80030ae:	210e      	movs	r1, #14
 80030b0:	4469      	add	r1, sp
 80030b2:	20eb      	movs	r0, #235	; 0xeb
 80030b4:	f004 f9e4 	bl	8007480 <EE_ReadVariable>
	if (!status1) {
 80030b8:	2800      	cmp	r0, #0
 80030ba:	d107      	bne.n	80030cc <LoadEEstreams+0xd4>
		src3 = (uint8_t) (temp1 >> 8);
 80030bc:	230e      	movs	r3, #14
 80030be:	446b      	add	r3, sp
 80030c0:	881b      	ldrh	r3, [r3, #0]
 80030c2:	0a19      	lsrs	r1, r3, #8
 80030c4:	4a1d      	ldr	r2, [pc, #116]	; (800313c <LoadEEstreams+0x144>)
 80030c6:	7011      	strb	r1, [r2, #0]
		dst3 = (uint8_t) temp1;
 80030c8:	4a1d      	ldr	r2, [pc, #116]	; (8003140 <LoadEEstreams+0x148>)
 80030ca:	7013      	strb	r3, [r2, #0]
	}
	
	/* Activate the DMA streams */
	if (src1 && dst1)
 80030cc:	4b17      	ldr	r3, [pc, #92]	; (800312c <LoadEEstreams+0x134>)
 80030ce:	781b      	ldrb	r3, [r3, #0]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d003      	beq.n	80030dc <LoadEEstreams+0xe4>
 80030d4:	4a16      	ldr	r2, [pc, #88]	; (8003130 <LoadEEstreams+0x138>)
 80030d6:	7812      	ldrb	r2, [r2, #0]
 80030d8:	2a00      	cmp	r2, #0
 80030da:	d112      	bne.n	8003102 <LoadEEstreams+0x10a>
		SetupDMAStreams(direction, count, timeout, src1, dst1);
	if (src2 && dst2)
 80030dc:	4b15      	ldr	r3, [pc, #84]	; (8003134 <LoadEEstreams+0x13c>)
 80030de:	781b      	ldrb	r3, [r3, #0]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d003      	beq.n	80030ec <LoadEEstreams+0xf4>
 80030e4:	4a14      	ldr	r2, [pc, #80]	; (8003138 <LoadEEstreams+0x140>)
 80030e6:	7812      	ldrb	r2, [r2, #0]
 80030e8:	2a00      	cmp	r2, #0
 80030ea:	d111      	bne.n	8003110 <LoadEEstreams+0x118>
		SetupDMAStreams(direction, count, timeout, src2, dst2);
	if (src3 && dst3)
 80030ec:	4b13      	ldr	r3, [pc, #76]	; (800313c <LoadEEstreams+0x144>)
 80030ee:	781b      	ldrb	r3, [r3, #0]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d003      	beq.n	80030fc <LoadEEstreams+0x104>
 80030f4:	4a12      	ldr	r2, [pc, #72]	; (8003140 <LoadEEstreams+0x148>)
 80030f6:	7812      	ldrb	r2, [r2, #0]
 80030f8:	2a00      	cmp	r2, #0
 80030fa:	d110      	bne.n	800311e <LoadEEstreams+0x126>
		SetupDMAStreams(direction, count, timeout, src3, dst3);
	
	return result;
}
 80030fc:	2000      	movs	r0, #0
 80030fe:	b004      	add	sp, #16
 8003100:	bd70      	pop	{r4, r5, r6, pc}
		SetupDMAStreams(direction, count, timeout, src1, dst1);
 8003102:	9200      	str	r2, [sp, #0]
 8003104:	0022      	movs	r2, r4
 8003106:	0031      	movs	r1, r6
 8003108:	0028      	movs	r0, r5
 800310a:	f005 fbab 	bl	8008864 <SetupDMAStreams>
 800310e:	e7e5      	b.n	80030dc <LoadEEstreams+0xe4>
		SetupDMAStreams(direction, count, timeout, src2, dst2);
 8003110:	9200      	str	r2, [sp, #0]
 8003112:	0022      	movs	r2, r4
 8003114:	0031      	movs	r1, r6
 8003116:	0028      	movs	r0, r5
 8003118:	f005 fba4 	bl	8008864 <SetupDMAStreams>
 800311c:	e7e6      	b.n	80030ec <LoadEEstreams+0xf4>
		SetupDMAStreams(direction, count, timeout, src3, dst3);
 800311e:	9200      	str	r2, [sp, #0]
 8003120:	0022      	movs	r2, r4
 8003122:	0031      	movs	r1, r6
 8003124:	0028      	movs	r0, r5
 8003126:	f005 fb9d 	bl	8008864 <SetupDMAStreams>
 800312a:	e7e7      	b.n	80030fc <LoadEEstreams+0x104>
 800312c:	20000bd1 	.word	0x20000bd1
 8003130:	200008f1 	.word	0x200008f1
 8003134:	20000bd2 	.word	0x20000bd2
 8003138:	200008f2 	.word	0x200008f2
 800313c:	20000bd3 	.word	0x20000bd3
 8003140:	200008f3 	.word	0x200008f3

08003144 <SaveEEstreams>:

/* --- Save DMA streams to emulated EEPROM. --- 
*/
BOS_Status SaveEEstreams(uint8_t direction, uint32_t count, uint32_t timeout, uint8_t src1, uint8_t dst1, uint8_t src2, \
	uint8_t dst2, uint8_t src3, uint8_t dst3)
{
 8003144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003146:	46de      	mov	lr, fp
 8003148:	4657      	mov	r7, sl
 800314a:	464e      	mov	r6, r9
 800314c:	4645      	mov	r5, r8
 800314e:	b5e0      	push	{r5, r6, r7, lr}
 8003150:	000f      	movs	r7, r1
 8003152:	0016      	movs	r6, r2
 8003154:	001c      	movs	r4, r3
 8003156:	ab0a      	add	r3, sp, #40	; 0x28
 8003158:	781b      	ldrb	r3, [r3, #0]
 800315a:	469b      	mov	fp, r3
 800315c:	ab0b      	add	r3, sp, #44	; 0x2c
 800315e:	781b      	ldrb	r3, [r3, #0]
 8003160:	469a      	mov	sl, r3
 8003162:	ab0c      	add	r3, sp, #48	; 0x30
 8003164:	781b      	ldrb	r3, [r3, #0]
 8003166:	4699      	mov	r9, r3
 8003168:	ab0d      	add	r3, sp, #52	; 0x34
 800316a:	781d      	ldrb	r5, [r3, #0]
 800316c:	ab0e      	add	r3, sp, #56	; 0x38
 800316e:	781b      	ldrb	r3, [r3, #0]
 8003170:	4698      	mov	r8, r3
	BOS_Status result = BOS_OK; 
	
	EE_WriteVariable(_EE_DMA_STREAM_BASE, direction);			/* Direction */
 8003172:	0001      	movs	r1, r0
 8003174:	20e4      	movs	r0, #228	; 0xe4
 8003176:	f004 f9af 	bl	80074d8 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE+1, ( (uint16_t) (count >> 8)));				/* Count high half-word */
 800317a:	0a39      	lsrs	r1, r7, #8
 800317c:	b289      	uxth	r1, r1
 800317e:	20e5      	movs	r0, #229	; 0xe5
 8003180:	f004 f9aa 	bl	80074d8 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE+2, ( (uint16_t) count));								/* Count low half-word */
 8003184:	b2b9      	uxth	r1, r7
 8003186:	20e6      	movs	r0, #230	; 0xe6
 8003188:	f004 f9a6 	bl	80074d8 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE+3, ( (uint16_t) (timeout >> 8)));			/* Timeout high half-word */
 800318c:	0a31      	lsrs	r1, r6, #8
 800318e:	b289      	uxth	r1, r1
 8003190:	20e7      	movs	r0, #231	; 0xe7
 8003192:	f004 f9a1 	bl	80074d8 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE+4, ( (uint16_t) timeout));							/* Timeout low half-word */
 8003196:	b2b1      	uxth	r1, r6
 8003198:	20e8      	movs	r0, #232	; 0xe8
 800319a:	f004 f99d 	bl	80074d8 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE+5, ( (uint16_t) (src1 << 8) ) + (uint16_t) dst1);			/* src1 | dst1 */
 800319e:	0224      	lsls	r4, r4, #8
 80031a0:	445c      	add	r4, fp
 80031a2:	b2a1      	uxth	r1, r4
 80031a4:	20e9      	movs	r0, #233	; 0xe9
 80031a6:	f004 f997 	bl	80074d8 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE+6, ( (uint16_t) (src2 << 8) ) + (uint16_t) dst2);			/* src1 | dst1 */
 80031aa:	4653      	mov	r3, sl
 80031ac:	0219      	lsls	r1, r3, #8
 80031ae:	4449      	add	r1, r9
 80031b0:	b289      	uxth	r1, r1
 80031b2:	20ea      	movs	r0, #234	; 0xea
 80031b4:	f004 f990 	bl	80074d8 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE+7, ( (uint16_t) (src3 << 8) ) + (uint16_t) dst3);			/* src1 | dst1 */
 80031b8:	022d      	lsls	r5, r5, #8
 80031ba:	4445      	add	r5, r8
 80031bc:	b2a9      	uxth	r1, r5
 80031be:	20eb      	movs	r0, #235	; 0xeb
 80031c0:	f004 f98a 	bl	80074d8 <EE_WriteVariable>
	
	return result;
}
 80031c4:	2000      	movs	r0, #0
 80031c6:	bcf0      	pop	{r4, r5, r6, r7}
 80031c8:	46bb      	mov	fp, r7
 80031ca:	46b2      	mov	sl, r6
 80031cc:	46a9      	mov	r9, r5
 80031ce:	46a0      	mov	r8, r4
 80031d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080031d4 <LoadEEparams>:
/*-----------------------------------------------------------*/	

/* --- Load module parameters from emulated EEPROM. If erased, loade defualts --- 
*/
BOS_Status LoadEEparams(void)
{
 80031d4:	b510      	push	{r4, lr}
 80031d6:	b082      	sub	sp, #8
	BOS_Status result = BOS_OK; 
	uint16_t temp1, temp2, status1, status2; 
	
	/* Read params base - BOS response and BOS trace */
	status1 = EE_ReadVariable(_EE_PARAMS_BASE, &temp1);
 80031d8:	208a      	movs	r0, #138	; 0x8a
 80031da:	466b      	mov	r3, sp
 80031dc:	1d99      	adds	r1, r3, #6
 80031de:	0040      	lsls	r0, r0, #1
 80031e0:	f004 f94e 	bl	8007480 <EE_ReadVariable>
	/* Found the variable (EEPROM is not cleared) */
	if (!status1) {
 80031e4:	2800      	cmp	r0, #0
 80031e6:	d000      	beq.n	80031ea <LoadEEparams+0x16>
 80031e8:	e064      	b.n	80032b4 <LoadEEparams+0xe0>
		BOS.response = (uint8_t)temp1;
 80031ea:	466b      	mov	r3, sp
 80031ec:	3306      	adds	r3, #6
 80031ee:	881b      	ldrh	r3, [r3, #0]
 80031f0:	4a46      	ldr	r2, [pc, #280]	; (800330c <LoadEEparams+0x138>)
 80031f2:	7193      	strb	r3, [r2, #6]
		BOS.trace = (traceOptions_t)(temp1>>8);
 80031f4:	0a1b      	lsrs	r3, r3, #8
 80031f6:	71d3      	strb	r3, [r2, #7]
		BOS.response = BOS_default.response;
		BOS.trace = BOS_default.trace;
	}
		
	/* Read Button debounce */
	status1 = EE_ReadVariable(_EE_PARAMS_DEBOUNCE, &temp1);
 80031f8:	2016      	movs	r0, #22
 80031fa:	466b      	mov	r3, sp
 80031fc:	1d99      	adds	r1, r3, #6
 80031fe:	30ff      	adds	r0, #255	; 0xff
 8003200:	f004 f93e 	bl	8007480 <EE_ReadVariable>
	if (!status1) 
 8003204:	2800      	cmp	r0, #0
 8003206:	d15c      	bne.n	80032c2 <LoadEEparams+0xee>
		BOS.buttons.debounce = temp1;
 8003208:	466b      	mov	r3, sp
 800320a:	88da      	ldrh	r2, [r3, #6]
 800320c:	4b3f      	ldr	r3, [pc, #252]	; (800330c <LoadEEparams+0x138>)
 800320e:	801a      	strh	r2, [r3, #0]
	else
		BOS.buttons.debounce = BOS_default.buttons.debounce;

	/* Read Button single click time */
	status1 = EE_ReadVariable(_EE_PARAMS_SINGLE_CLICK, &temp1);
 8003210:	208b      	movs	r0, #139	; 0x8b
 8003212:	466b      	mov	r3, sp
 8003214:	1d99      	adds	r1, r3, #6
 8003216:	0040      	lsls	r0, r0, #1
 8003218:	f004 f932 	bl	8007480 <EE_ReadVariable>
	if (!status1) 
 800321c:	2800      	cmp	r0, #0
 800321e:	d153      	bne.n	80032c8 <LoadEEparams+0xf4>
		BOS.buttons.singleClickTime = temp1;
 8003220:	466b      	mov	r3, sp
 8003222:	88da      	ldrh	r2, [r3, #6]
 8003224:	4b39      	ldr	r3, [pc, #228]	; (800330c <LoadEEparams+0x138>)
 8003226:	805a      	strh	r2, [r3, #2]
	else
		BOS.buttons.singleClickTime = BOS_default.buttons.singleClickTime;	

	/* Read Button double click time (min and max inter-click) */
	status1 = EE_ReadVariable(_EE_PARAMS_DBL_CLICK, &temp1);
 8003228:	2018      	movs	r0, #24
 800322a:	466b      	mov	r3, sp
 800322c:	1d99      	adds	r1, r3, #6
 800322e:	30ff      	adds	r0, #255	; 0xff
 8003230:	f004 f926 	bl	8007480 <EE_ReadVariable>
	if (!status1) {
 8003234:	2800      	cmp	r0, #0
 8003236:	d14a      	bne.n	80032ce <LoadEEparams+0xfa>
		BOS.buttons.minInterClickTime = (uint8_t)temp1;
 8003238:	466b      	mov	r3, sp
 800323a:	3306      	adds	r3, #6
 800323c:	881b      	ldrh	r3, [r3, #0]
 800323e:	4a33      	ldr	r2, [pc, #204]	; (800330c <LoadEEparams+0x138>)
 8003240:	7113      	strb	r3, [r2, #4]
		BOS.buttons.maxInterClickTime = (uint8_t)(temp1>>8);
 8003242:	0a1b      	lsrs	r3, r3, #8
 8003244:	7153      	strb	r3, [r2, #5]
		BOS.buttons.minInterClickTime = BOS_default.buttons.minInterClickTime;	
		BOS.buttons.maxInterClickTime = BOS_default.buttons.maxInterClickTime;	
	}
	
	/* Read CLI baudrate */
	status1 = EE_ReadVariable(_EE_CLI_BAUD, &temp1);
 8003246:	208c      	movs	r0, #140	; 0x8c
 8003248:	466b      	mov	r3, sp
 800324a:	1d99      	adds	r1, r3, #6
 800324c:	0040      	lsls	r0, r0, #1
 800324e:	f004 f917 	bl	8007480 <EE_ReadVariable>
 8003252:	0004      	movs	r4, r0
	status2 = EE_ReadVariable(_EE_CLI_BAUD+1, &temp2);
 8003254:	201a      	movs	r0, #26
 8003256:	a901      	add	r1, sp, #4
 8003258:	30ff      	adds	r0, #255	; 0xff
 800325a:	f004 f911 	bl	8007480 <EE_ReadVariable>
	if (!status1 && !status2) 
 800325e:	4304      	orrs	r4, r0
 8003260:	b2a4      	uxth	r4, r4
 8003262:	2c00      	cmp	r4, #0
 8003264:	d13a      	bne.n	80032dc <LoadEEparams+0x108>
	{
		BOS.clibaudrate = (uint32_t)temp1 | (((uint32_t)temp2)<<16);
 8003266:	ab01      	add	r3, sp, #4
 8003268:	881b      	ldrh	r3, [r3, #0]
 800326a:	041b      	lsls	r3, r3, #16
 800326c:	466a      	mov	r2, sp
 800326e:	3206      	adds	r2, #6
 8003270:	8812      	ldrh	r2, [r2, #0]
 8003272:	4313      	orrs	r3, r2
 8003274:	4a25      	ldr	r2, [pc, #148]	; (800330c <LoadEEparams+0x138>)
 8003276:	6093      	str	r3, [r2, #8]
		BOS.clibaudrate = CLI_BAUDRATE_1;
	else
		BOS.clibaudrate = BOS_default.clibaudrate;
	
	/* Read RTC hourformat and daylightsaving */
	status1 = EE_ReadVariable(_EE_PARAMS_RTC, &temp1);
 8003278:	208d      	movs	r0, #141	; 0x8d
 800327a:	466b      	mov	r3, sp
 800327c:	1d99      	adds	r1, r3, #6
 800327e:	0040      	lsls	r0, r0, #1
 8003280:	f004 f8fe 	bl	8007480 <EE_ReadVariable>
	if (!status1) {
 8003284:	2800      	cmp	r0, #0
 8003286:	d137      	bne.n	80032f8 <LoadEEparams+0x124>
		BOS.daylightsaving = (int8_t)temp1;
 8003288:	466b      	mov	r3, sp
 800328a:	3306      	adds	r3, #6
 800328c:	881b      	ldrh	r3, [r3, #0]
 800328e:	4a1f      	ldr	r2, [pc, #124]	; (800330c <LoadEEparams+0x138>)
 8003290:	7313      	strb	r3, [r2, #12]
		BOS.hourformat = (uint8_t)(temp1>>8);
 8003292:	0a1b      	lsrs	r3, r3, #8
 8003294:	7353      	strb	r3, [r2, #13]
		BOS.hourformat = 24;
		BOS.daylightsaving = DAYLIGHT_NONE;
	}		
	
	/* Read disableCLI */
	status1 = EE_ReadVariable(_EE_PARAMS_DISABLE_CLI, &temp1);
 8003296:	201c      	movs	r0, #28
 8003298:	466b      	mov	r3, sp
 800329a:	1d99      	adds	r1, r3, #6
 800329c:	30ff      	adds	r0, #255	; 0xff
 800329e:	f004 f8ef 	bl	8007480 <EE_ReadVariable>
	/* Found the variable (EEPROM is not cleared) */
	if (!status1) {
 80032a2:	2800      	cmp	r0, #0
 80032a4:	d12e      	bne.n	8003304 <LoadEEparams+0x130>
		BOS.disableCLI = (uint8_t)temp1;
 80032a6:	466b      	mov	r3, sp
 80032a8:	799a      	ldrb	r2, [r3, #6]
 80032aa:	4b18      	ldr	r3, [pc, #96]	; (800330c <LoadEEparams+0x138>)
 80032ac:	76da      	strb	r2, [r3, #27]
	} else {
		BOS.disableCLI = BOS_default.disableCLI;
	}
	
	return result;
}
 80032ae:	2000      	movs	r0, #0
 80032b0:	b002      	add	sp, #8
 80032b2:	bd10      	pop	{r4, pc}
		BOS.response = BOS_default.response;
 80032b4:	4b15      	ldr	r3, [pc, #84]	; (800330c <LoadEEparams+0x138>)
 80032b6:	4a16      	ldr	r2, [pc, #88]	; (8003310 <LoadEEparams+0x13c>)
 80032b8:	7991      	ldrb	r1, [r2, #6]
 80032ba:	7199      	strb	r1, [r3, #6]
		BOS.trace = BOS_default.trace;
 80032bc:	79d2      	ldrb	r2, [r2, #7]
 80032be:	71da      	strb	r2, [r3, #7]
 80032c0:	e79a      	b.n	80031f8 <LoadEEparams+0x24>
		BOS.buttons.debounce = BOS_default.buttons.debounce;
 80032c2:	4b13      	ldr	r3, [pc, #76]	; (8003310 <LoadEEparams+0x13c>)
 80032c4:	881a      	ldrh	r2, [r3, #0]
 80032c6:	e7a1      	b.n	800320c <LoadEEparams+0x38>
		BOS.buttons.singleClickTime = BOS_default.buttons.singleClickTime;	
 80032c8:	4b11      	ldr	r3, [pc, #68]	; (8003310 <LoadEEparams+0x13c>)
 80032ca:	885a      	ldrh	r2, [r3, #2]
 80032cc:	e7aa      	b.n	8003224 <LoadEEparams+0x50>
		BOS.buttons.minInterClickTime = BOS_default.buttons.minInterClickTime;	
 80032ce:	4b0f      	ldr	r3, [pc, #60]	; (800330c <LoadEEparams+0x138>)
 80032d0:	4a0f      	ldr	r2, [pc, #60]	; (8003310 <LoadEEparams+0x13c>)
 80032d2:	7911      	ldrb	r1, [r2, #4]
 80032d4:	7119      	strb	r1, [r3, #4]
		BOS.buttons.maxInterClickTime = BOS_default.buttons.maxInterClickTime;	
 80032d6:	7952      	ldrb	r2, [r2, #5]
 80032d8:	715a      	strb	r2, [r3, #5]
 80032da:	e7b4      	b.n	8003246 <LoadEEparams+0x72>
	else if(CLI_LOW_Baudrate_Flag)
 80032dc:	4b0d      	ldr	r3, [pc, #52]	; (8003314 <LoadEEparams+0x140>)
 80032de:	781b      	ldrb	r3, [r3, #0]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d004      	beq.n	80032ee <LoadEEparams+0x11a>
		BOS.clibaudrate = CLI_BAUDRATE_1;
 80032e4:	4b09      	ldr	r3, [pc, #36]	; (800330c <LoadEEparams+0x138>)
 80032e6:	22e1      	movs	r2, #225	; 0xe1
 80032e8:	0252      	lsls	r2, r2, #9
 80032ea:	609a      	str	r2, [r3, #8]
 80032ec:	e7c4      	b.n	8003278 <LoadEEparams+0xa4>
		BOS.clibaudrate = BOS_default.clibaudrate;
 80032ee:	4b08      	ldr	r3, [pc, #32]	; (8003310 <LoadEEparams+0x13c>)
 80032f0:	689a      	ldr	r2, [r3, #8]
 80032f2:	4b06      	ldr	r3, [pc, #24]	; (800330c <LoadEEparams+0x138>)
 80032f4:	609a      	str	r2, [r3, #8]
 80032f6:	e7bf      	b.n	8003278 <LoadEEparams+0xa4>
		BOS.hourformat = 24;
 80032f8:	4b04      	ldr	r3, [pc, #16]	; (800330c <LoadEEparams+0x138>)
 80032fa:	2218      	movs	r2, #24
 80032fc:	735a      	strb	r2, [r3, #13]
		BOS.daylightsaving = DAYLIGHT_NONE;
 80032fe:	2200      	movs	r2, #0
 8003300:	731a      	strb	r2, [r3, #12]
 8003302:	e7c8      	b.n	8003296 <LoadEEparams+0xc2>
		BOS.disableCLI = BOS_default.disableCLI;
 8003304:	4b02      	ldr	r3, [pc, #8]	; (8003310 <LoadEEparams+0x13c>)
 8003306:	7eda      	ldrb	r2, [r3, #27]
 8003308:	e7cf      	b.n	80032aa <LoadEEparams+0xd6>
 800330a:	46c0      	nop			; (mov r8, r8)
 800330c:	20006368 	.word	0x20006368
 8003310:	20000000 	.word	0x20000000
 8003314:	2000055e 	.word	0x2000055e

08003318 <SaveEEparams>:
/*-----------------------------------------------------------*/	

/* --- Save module parameters to emulated EEPROM. --- 
*/
BOS_Status SaveEEparams(void)
{
 8003318:	b510      	push	{r4, lr}
	BOS_Status result = BOS_OK; 
	
	/* Save params base - BOS response & BOS trace */
	EE_WriteVariable(_EE_PARAMS_BASE, ((uint16_t)BOS.trace<<5) | (uint16_t)BOS.response);
 800331a:	4c1a      	ldr	r4, [pc, #104]	; (8003384 <SaveEEparams+0x6c>)
 800331c:	79e3      	ldrb	r3, [r4, #7]
 800331e:	015b      	lsls	r3, r3, #5
 8003320:	79a1      	ldrb	r1, [r4, #6]
 8003322:	4319      	orrs	r1, r3
 8003324:	208a      	movs	r0, #138	; 0x8a
 8003326:	0040      	lsls	r0, r0, #1
 8003328:	f004 f8d6 	bl	80074d8 <EE_WriteVariable>
		
	/* Save Button debounce */
	EE_WriteVariable(_EE_PARAMS_DEBOUNCE, BOS.buttons.debounce);
 800332c:	8821      	ldrh	r1, [r4, #0]
 800332e:	2016      	movs	r0, #22
 8003330:	30ff      	adds	r0, #255	; 0xff
 8003332:	f004 f8d1 	bl	80074d8 <EE_WriteVariable>

	/* Save Button single click time */
	EE_WriteVariable(_EE_PARAMS_SINGLE_CLICK, BOS.buttons.singleClickTime);
 8003336:	8861      	ldrh	r1, [r4, #2]
 8003338:	208b      	movs	r0, #139	; 0x8b
 800333a:	0040      	lsls	r0, r0, #1
 800333c:	f004 f8cc 	bl	80074d8 <EE_WriteVariable>

	/* Save Button double click time (min and max inter-click) */
	EE_WriteVariable(_EE_PARAMS_DBL_CLICK, ((uint16_t)BOS.buttons.maxInterClickTime<<8) | (uint16_t)BOS.daylightsaving);
 8003340:	7963      	ldrb	r3, [r4, #5]
 8003342:	021b      	lsls	r3, r3, #8
 8003344:	7b21      	ldrb	r1, [r4, #12]
 8003346:	4319      	orrs	r1, r3
 8003348:	2018      	movs	r0, #24
 800334a:	30ff      	adds	r0, #255	; 0xff
 800334c:	f004 f8c4 	bl	80074d8 <EE_WriteVariable>

	/* Save CLI baudrate */
	EE_WriteVariable(_EE_CLI_BAUD, (uint16_t)BOS.clibaudrate);
 8003350:	8921      	ldrh	r1, [r4, #8]
 8003352:	208c      	movs	r0, #140	; 0x8c
 8003354:	0040      	lsls	r0, r0, #1
 8003356:	f004 f8bf 	bl	80074d8 <EE_WriteVariable>
	EE_WriteVariable(_EE_CLI_BAUD+1, (uint16_t)(BOS.clibaudrate>>16));
 800335a:	8961      	ldrh	r1, [r4, #10]
 800335c:	201a      	movs	r0, #26
 800335e:	30ff      	adds	r0, #255	; 0xff
 8003360:	f004 f8ba 	bl	80074d8 <EE_WriteVariable>
	
	/* Save RTC hourformat and daylightsaving */
	EE_WriteVariable(_EE_PARAMS_RTC, ((uint16_t)BOS.hourformat<<8) | (uint16_t)BOS.buttons.minInterClickTime);
 8003364:	7b63      	ldrb	r3, [r4, #13]
 8003366:	021b      	lsls	r3, r3, #8
 8003368:	7921      	ldrb	r1, [r4, #4]
 800336a:	4319      	orrs	r1, r3
 800336c:	208d      	movs	r0, #141	; 0x8d
 800336e:	0040      	lsls	r0, r0, #1
 8003370:	f004 f8b2 	bl	80074d8 <EE_WriteVariable>

	/* Save disableCLI */
	EE_WriteVariable(_EE_PARAMS_DISABLE_CLI, (uint16_t)BOS.disableCLI);
 8003374:	7ee1      	ldrb	r1, [r4, #27]
 8003376:	201c      	movs	r0, #28
 8003378:	30ff      	adds	r0, #255	; 0xff
 800337a:	f004 f8ad 	bl	80074d8 <EE_WriteVariable>
	
	return result;
}
 800337e:	2000      	movs	r0, #0
 8003380:	bd10      	pop	{r4, pc}
 8003382:	46c0      	nop			; (mov r8, r8)
 8003384:	20006368 	.word	0x20006368

08003388 <LoadEEbuttons>:
/*-----------------------------------------------------------*/	

/* --- Load button definitions and events from EEPROM --- 
*/
BOS_Status LoadEEbuttons(void)
{
 8003388:	b5f0      	push	{r4, r5, r6, r7, lr}
 800338a:	46ce      	mov	lr, r9
 800338c:	4647      	mov	r7, r8
 800338e:	b580      	push	{r7, lr}
 8003390:	b089      	sub	sp, #36	; 0x24
	BOS_Status result = BOS_OK; 
	uint16_t temp16 = 0, status1 = 0; 
 8003392:	231e      	movs	r3, #30
 8003394:	446b      	add	r3, sp
 8003396:	2200      	movs	r2, #0
 8003398:	801a      	strh	r2, [r3, #0]
	uint8_t temp8 = 0;
	
	for(uint8_t i=0 ; i<=NumOfPorts ; i++)
 800339a:	4e36      	ldr	r6, [pc, #216]	; (8003474 <LoadEEbuttons+0xec>)
	uint16_t temp16 = 0, status1 = 0; 
 800339c:	24ec      	movs	r4, #236	; 0xec
 800339e:	2501      	movs	r5, #1
 80033a0:	270f      	movs	r7, #15
				EE_ReadVariable(_EE_BUTTON_BASE+4*(i)+3, &temp16);
				button[i+1].pressedX3Sec = (uint8_t)(temp16 >> 8);
				button[i+1].releasedY3Sec = (uint8_t)temp16;
				/* Setup the button and its events */
				AddPortButton(button[i+1].type, i+1);
				SetButtonEvents(i+1, (button[i+1].events & BUTTON_EVENT_CLICKED), ((button[i+1].events & BUTTON_EVENT_DBL_CLICKED)>>1), button[i+1].pressedX1Sec,\
 80033a2:	2301      	movs	r3, #1
 80033a4:	4698      	mov	r8, r3
 80033a6:	e005      	b.n	80033b4 <LoadEEbuttons+0x2c>
	for(uint8_t i=0 ; i<=NumOfPorts ; i++)
 80033a8:	3501      	adds	r5, #1
 80033aa:	3404      	adds	r4, #4
 80033ac:	b2a4      	uxth	r4, r4
 80033ae:	3609      	adds	r6, #9
 80033b0:	2d07      	cmp	r5, #7
 80033b2:	d059      	beq.n	8003468 <LoadEEbuttons+0xe0>
		status1 = EE_ReadVariable(_EE_BUTTON_BASE+4*(i), &temp16);
 80033b4:	231e      	movs	r3, #30
 80033b6:	446b      	add	r3, sp
 80033b8:	0019      	movs	r1, r3
 80033ba:	0020      	movs	r0, r4
 80033bc:	f004 f860 	bl	8007480 <EE_ReadVariable>
		if(!status1)																												// This variable exists
 80033c0:	2800      	cmp	r0, #0
 80033c2:	d1f1      	bne.n	80033a8 <LoadEEbuttons+0x20>
			temp8 = (uint8_t)(temp16 >> 8);
 80033c4:	466b      	mov	r3, sp
 80033c6:	8bdb      	ldrh	r3, [r3, #30]
 80033c8:	0a19      	lsrs	r1, r3, #8
			if ( ((temp8 >> 4) == i+1) && ((temp8 & 0x0F) != NONE) )					// This is same port and button type is not none
 80033ca:	0b1a      	lsrs	r2, r3, #12
 80033cc:	42aa      	cmp	r2, r5
 80033ce:	d1eb      	bne.n	80033a8 <LoadEEbuttons+0x20>
 80033d0:	003a      	movs	r2, r7
 80033d2:	400a      	ands	r2, r1
 80033d4:	420f      	tst	r7, r1
 80033d6:	d0e7      	beq.n	80033a8 <LoadEEbuttons+0x20>
				button[i+1].type = temp8 & 0x0F;
 80033d8:	7032      	strb	r2, [r6, #0]
				button[i+1].events = (uint8_t)temp16;
 80033da:	71f3      	strb	r3, [r6, #7]
				EE_ReadVariable(_EE_BUTTON_BASE+4*(i)+1, &temp16);
 80033dc:	00a8      	lsls	r0, r5, #2
 80033de:	b283      	uxth	r3, r0
 80033e0:	4699      	mov	r9, r3
 80033e2:	0018      	movs	r0, r3
 80033e4:	30e9      	adds	r0, #233	; 0xe9
 80033e6:	b280      	uxth	r0, r0
 80033e8:	231e      	movs	r3, #30
 80033ea:	446b      	add	r3, sp
 80033ec:	0019      	movs	r1, r3
 80033ee:	f004 f847 	bl	8007480 <EE_ReadVariable>
				button[i+1].pressedX1Sec = (uint8_t)(temp16 >> 8);
 80033f2:	466b      	mov	r3, sp
 80033f4:	8bdb      	ldrh	r3, [r3, #30]
 80033f6:	0a1a      	lsrs	r2, r3, #8
 80033f8:	7072      	strb	r2, [r6, #1]
				button[i+1].releasedY1Sec = (uint8_t)temp16;
 80033fa:	7133      	strb	r3, [r6, #4]
				EE_ReadVariable(_EE_BUTTON_BASE+4*(i)+2, &temp16);
 80033fc:	4648      	mov	r0, r9
 80033fe:	30ea      	adds	r0, #234	; 0xea
 8003400:	b280      	uxth	r0, r0
 8003402:	231e      	movs	r3, #30
 8003404:	446b      	add	r3, sp
 8003406:	0019      	movs	r1, r3
 8003408:	f004 f83a 	bl	8007480 <EE_ReadVariable>
				button[i+1].pressedX2Sec = (uint8_t)(temp16 >> 8);
 800340c:	466b      	mov	r3, sp
 800340e:	8bdb      	ldrh	r3, [r3, #30]
 8003410:	0a1a      	lsrs	r2, r3, #8
 8003412:	70b2      	strb	r2, [r6, #2]
				button[i+1].releasedY2Sec = (uint8_t)temp16;
 8003414:	7173      	strb	r3, [r6, #5]
				EE_ReadVariable(_EE_BUTTON_BASE+4*(i)+3, &temp16);
 8003416:	4648      	mov	r0, r9
 8003418:	30eb      	adds	r0, #235	; 0xeb
 800341a:	b280      	uxth	r0, r0
 800341c:	231e      	movs	r3, #30
 800341e:	446b      	add	r3, sp
 8003420:	0019      	movs	r1, r3
 8003422:	f004 f82d 	bl	8007480 <EE_ReadVariable>
				button[i+1].pressedX3Sec = (uint8_t)(temp16 >> 8);
 8003426:	466b      	mov	r3, sp
 8003428:	8bdb      	ldrh	r3, [r3, #30]
 800342a:	0a1a      	lsrs	r2, r3, #8
 800342c:	70f2      	strb	r2, [r6, #3]
				button[i+1].releasedY3Sec = (uint8_t)temp16;
 800342e:	71b3      	strb	r3, [r6, #6]
				AddPortButton(button[i+1].type, i+1);
 8003430:	b2eb      	uxtb	r3, r5
 8003432:	7830      	ldrb	r0, [r6, #0]
 8003434:	4699      	mov	r9, r3
 8003436:	0019      	movs	r1, r3
 8003438:	f004 ff38 	bl	80082ac <AddPortButton>
				SetButtonEvents(i+1, (button[i+1].events & BUTTON_EVENT_CLICKED), ((button[i+1].events & BUTTON_EVENT_DBL_CLICKED)>>1), button[i+1].pressedX1Sec,\
 800343c:	79f1      	ldrb	r1, [r6, #7]
 800343e:	7873      	ldrb	r3, [r6, #1]
 8003440:	104a      	asrs	r2, r1, #1
 8003442:	4640      	mov	r0, r8
 8003444:	4002      	ands	r2, r0
 8003446:	4001      	ands	r1, r0
 8003448:	2000      	movs	r0, #0
 800344a:	9005      	str	r0, [sp, #20]
 800344c:	79b0      	ldrb	r0, [r6, #6]
 800344e:	9004      	str	r0, [sp, #16]
 8003450:	7970      	ldrb	r0, [r6, #5]
 8003452:	9003      	str	r0, [sp, #12]
 8003454:	7930      	ldrb	r0, [r6, #4]
 8003456:	9002      	str	r0, [sp, #8]
 8003458:	78f0      	ldrb	r0, [r6, #3]
 800345a:	9001      	str	r0, [sp, #4]
 800345c:	78b0      	ldrb	r0, [r6, #2]
 800345e:	9000      	str	r0, [sp, #0]
 8003460:	4648      	mov	r0, r9
 8003462:	f005 f83b 	bl	80084dc <SetButtonEvents>
 8003466:	e79f      	b.n	80033a8 <LoadEEbuttons+0x20>
			}
		}
	}
	
	return result;
}
 8003468:	2000      	movs	r0, #0
 800346a:	b009      	add	sp, #36	; 0x24
 800346c:	bcc0      	pop	{r6, r7}
 800346e:	46b9      	mov	r9, r7
 8003470:	46b0      	mov	r8, r6
 8003472:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003474:	20000f46 	.word	0x20000f46

08003478 <LoadEEvars>:
{
 8003478:	b510      	push	{r4, lr}
	LoadROtopology();
 800347a:	f7ff fc2f 	bl	8002cdc <LoadROtopology>
	LoadEEportsDir();
 800347e:	f7ff fcbb 	bl	8002df8 <LoadEEportsDir>
	LoadEEalias();
 8003482:	f7ff fd1d 	bl	8002ec0 <LoadEEalias>
	LoadEEgroup();
 8003486:	f7ff fd61 	bl	8002f4c <LoadEEgroup>
	LoadEEstreams();
 800348a:	f7ff fdb5 	bl	8002ff8 <LoadEEstreams>
	LoadEEparams();	
 800348e:	f7ff fea1 	bl	80031d4 <LoadEEparams>
	LoadEEbuttons();	
 8003492:	f7ff ff79 	bl	8003388 <LoadEEbuttons>
	LoadROsnippets();
 8003496:	f7ff fb9b 	bl	8002bd0 <LoadROsnippets>
}
 800349a:	bd10      	pop	{r4, pc}

0800349c <IsLowerCLIbaud>:

/* --- Check if booting into lower CLI baudrate:
				- Connect P1 TXD and P2 RXD to boot CLI at 115200
*/
uint8_t IsLowerCLIbaud(void)
{
 800349c:	b530      	push	{r4, r5, lr}
 800349e:	b08f      	sub	sp, #60	; 0x3c
	uint16_t P1_TX_Pin, P1_RX_Pin, P2_TX_Pin, P2_RX_Pin;
	
	/* -- Setup GPIOs -- */
	
	/* Get GPIOs */
	GetPortGPIOs(P1, &P1_TX_Port, &P1_TX_Pin, &P1_RX_Port, &P1_RX_Pin);
 80034a0:	ab04      	add	r3, sp, #16
 80034a2:	9300      	str	r3, [sp, #0]
 80034a4:	ab07      	add	r3, sp, #28
 80034a6:	2212      	movs	r2, #18
 80034a8:	446a      	add	r2, sp
 80034aa:	a908      	add	r1, sp, #32
 80034ac:	2001      	movs	r0, #1
 80034ae:	f009 fd39 	bl	800cf24 <GetPortGPIOs>
	GetPortGPIOs(P2, &P2_TX_Port, &P2_TX_Pin, &P2_RX_Port, &P2_RX_Pin);
 80034b2:	ac03      	add	r4, sp, #12
 80034b4:	9400      	str	r4, [sp, #0]
 80034b6:	ab05      	add	r3, sp, #20
 80034b8:	220e      	movs	r2, #14
 80034ba:	446a      	add	r2, sp
 80034bc:	a906      	add	r1, sp, #24
 80034be:	2002      	movs	r0, #2
 80034c0:	f009 fd30 	bl	800cf24 <GetPortGPIOs>
	
	/* P1 TXD */
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80034c4:	2301      	movs	r3, #1
 80034c6:	930a      	str	r3, [sp, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034c8:	2500      	movs	r5, #0
 80034ca:	950b      	str	r5, [sp, #44]	; 0x2c
	GPIO_InitStruct.Pin = P1_TX_Pin;
 80034cc:	466b      	mov	r3, sp
 80034ce:	8a5b      	ldrh	r3, [r3, #18]
 80034d0:	9309      	str	r3, [sp, #36]	; 0x24
	HAL_GPIO_Init((GPIO_TypeDef *)P1_TX_Port, &GPIO_InitStruct);
 80034d2:	a909      	add	r1, sp, #36	; 0x24
 80034d4:	9808      	ldr	r0, [sp, #32]
 80034d6:	f00d fda3 	bl	8011020 <HAL_GPIO_Init>
	
	/* P2 RXD */
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80034da:	950a      	str	r5, [sp, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;	
 80034dc:	2302      	movs	r3, #2
 80034de:	930b      	str	r3, [sp, #44]	; 0x2c
	GPIO_InitStruct.Pin = P2_RX_Pin;
 80034e0:	8823      	ldrh	r3, [r4, #0]
 80034e2:	9309      	str	r3, [sp, #36]	; 0x24
	HAL_GPIO_Init((GPIO_TypeDef *)P2_RX_Port, &GPIO_InitStruct);	
 80034e4:	a909      	add	r1, sp, #36	; 0x24
 80034e6:	9805      	ldr	r0, [sp, #20]
 80034e8:	f00d fd9a 	bl	8011020 <HAL_GPIO_Init>
	
	/* Check for lower CLI baudrate conditions */
	HAL_GPIO_WritePin((GPIO_TypeDef *)P1_TX_Port,P1_TX_Pin,GPIO_PIN_RESET);
 80034ec:	466b      	mov	r3, sp
 80034ee:	8a59      	ldrh	r1, [r3, #18]
 80034f0:	2200      	movs	r2, #0
 80034f2:	9808      	ldr	r0, [sp, #32]
 80034f4:	f00d fe84 	bl	8011200 <HAL_GPIO_WritePin>
	Delay_ms_no_rtos(5);		
 80034f8:	2005      	movs	r0, #5
 80034fa:	f00a fa33 	bl	800d964 <StartMilliDelay>
	if (HAL_GPIO_ReadPin((GPIO_TypeDef *)P2_RX_Port,P2_RX_Pin) == RESET)
 80034fe:	8821      	ldrh	r1, [r4, #0]
 8003500:	9805      	ldr	r0, [sp, #20]
 8003502:	f00d fe77 	bl	80111f4 <HAL_GPIO_ReadPin>
 8003506:	0003      	movs	r3, r0
		{
			return 1;
		}
	}

	return 0;
 8003508:	2000      	movs	r0, #0
	if (HAL_GPIO_ReadPin((GPIO_TypeDef *)P2_RX_Port,P2_RX_Pin) == RESET)
 800350a:	2b00      	cmp	r3, #0
 800350c:	d001      	beq.n	8003512 <IsLowerCLIbaud+0x76>
}
 800350e:	b00f      	add	sp, #60	; 0x3c
 8003510:	bd30      	pop	{r4, r5, pc}
		HAL_GPIO_WritePin((GPIO_TypeDef *)P1_TX_Port,P1_TX_Pin,GPIO_PIN_SET);
 8003512:	3312      	adds	r3, #18
 8003514:	446b      	add	r3, sp
 8003516:	8819      	ldrh	r1, [r3, #0]
 8003518:	2201      	movs	r2, #1
 800351a:	9808      	ldr	r0, [sp, #32]
 800351c:	f00d fe70 	bl	8011200 <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(5);		
 8003520:	2005      	movs	r0, #5
 8003522:	f00a fa1f 	bl	800d964 <StartMilliDelay>
		if (HAL_GPIO_ReadPin((GPIO_TypeDef *)P2_RX_Port,P2_RX_Pin) == SET) 
 8003526:	ab03      	add	r3, sp, #12
 8003528:	8819      	ldrh	r1, [r3, #0]
 800352a:	9805      	ldr	r0, [sp, #20]
 800352c:	f00d fe62 	bl	80111f4 <HAL_GPIO_ReadPin>
 8003530:	3801      	subs	r0, #1
 8003532:	4243      	negs	r3, r0
 8003534:	4158      	adcs	r0, r3
			return 1;
 8003536:	b2c0      	uxtb	r0, r0
 8003538:	e7e9      	b.n	800350e <IsLowerCLIbaud+0x72>
	...

0800353c <EE_FormatForFactoryReset>:
/*-----------------------------------------------------------*/	

/* --- Format emulated EEPROM for a factory reset
*/
void EE_FormatForFactoryReset(void)
{
 800353c:	b510      	push	{r4, lr}
	/* Check if EEPROM was just formated? */
	/* Flag address (STM32F09x) - Last 4 words of SRAM */
	if (*((unsigned long *)0x20007FF0) == 0xBEEFDEAD)
 800353e:	4b07      	ldr	r3, [pc, #28]	; (800355c <EE_FormatForFactoryReset+0x20>)
 8003540:	4a07      	ldr	r2, [pc, #28]	; (8003560 <EE_FormatForFactoryReset+0x24>)
 8003542:	6812      	ldr	r2, [r2, #0]
 8003544:	429a      	cmp	r2, r3
 8003546:	d100      	bne.n	800354a <EE_FormatForFactoryReset+0xe>
			/* Set flag for formated EEPROM */
			*((unsigned long *)0x20007FF0) = 0xBEEFDEAD; 
		}
	}
	
}
 8003548:	bd10      	pop	{r4, pc}
		if (EE_Format() == HAL_OK) 
 800354a:	f004 f875 	bl	8007638 <EE_Format>
 800354e:	2800      	cmp	r0, #0
 8003550:	d1fa      	bne.n	8003548 <EE_FormatForFactoryReset+0xc>
			*((unsigned long *)0x20007FF0) = 0xBEEFDEAD; 
 8003552:	4b03      	ldr	r3, [pc, #12]	; (8003560 <EE_FormatForFactoryReset+0x24>)
 8003554:	4a01      	ldr	r2, [pc, #4]	; (800355c <EE_FormatForFactoryReset+0x20>)
 8003556:	601a      	str	r2, [r3, #0]
}
 8003558:	e7f6      	b.n	8003548 <EE_FormatForFactoryReset+0xc>
 800355a:	46c0      	nop			; (mov r8, r8)
 800355c:	beefdead 	.word	0xbeefdead
 8003560:	20007ff0 	.word	0x20007ff0

08003564 <SetupPortForRemoteBootloaderUpdate>:
				- Set baudrate to 57600
				- Enable even parity
				- Set datasize to 9 bits
*/
void SetupPortForRemoteBootloaderUpdate(uint8_t port)
{
 8003564:	b510      	push	{r4, lr}
	UART_HandleTypeDef *huart = GetUart(port);
 8003566:	f00a fb9d 	bl	800dca4 <GetUart>
 800356a:	0004      	movs	r4, r0

	huart->Init.BaudRate = 57600;
 800356c:	23e1      	movs	r3, #225	; 0xe1
 800356e:	021b      	lsls	r3, r3, #8
 8003570:	6043      	str	r3, [r0, #4]
	huart->Init.Parity = UART_PARITY_EVEN;
 8003572:	2380      	movs	r3, #128	; 0x80
 8003574:	00db      	lsls	r3, r3, #3
 8003576:	6103      	str	r3, [r0, #16]
	huart->Init.WordLength = UART_WORDLENGTH_9B;
 8003578:	2380      	movs	r3, #128	; 0x80
 800357a:	015b      	lsls	r3, r3, #5
 800357c:	6083      	str	r3, [r0, #8]
	HAL_UART_Init(huart);	
 800357e:	f010 f831 	bl	80135e4 <HAL_UART_Init>
	
	/* The CLI port RXNE interrupt might be disabled so enable here again to be sure */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003582:	6822      	ldr	r2, [r4, #0]
 8003584:	6813      	ldr	r3, [r2, #0]
 8003586:	2120      	movs	r1, #32
 8003588:	430b      	orrs	r3, r1
 800358a:	6013      	str	r3, [r2, #0]
}
 800358c:	bd10      	pop	{r4, pc}
	...

08003590 <IsModuleParameter>:
/*-----------------------------------------------------------*/

/* --- Check if this string is a local module parameter or event. Returns parameter index+1
*/
uint8_t IsModuleParameter(char* name)
{
 8003590:	b510      	push	{r4, lr}
	for(uint8_t i=0; i<NUM_MODULE_PARAMS ;i++)
  {
		if (!strcmp(name, (const char *)(modParam[i].paramName)))
 8003592:	4b04      	ldr	r3, [pc, #16]	; (80035a4 <IsModuleParameter+0x14>)
 8003594:	6899      	ldr	r1, [r3, #8]
 8003596:	f7fc fdb5 	bl	8000104 <strcmp>
 800359a:	4243      	negs	r3, r0
 800359c:	4158      	adcs	r0, r3
 800359e:	b2c0      	uxtb	r0, r0
			return i+1;
  }
	return 0;
}
 80035a0:	bd10      	pop	{r4, pc}
 80035a2:	46c0      	nop			; (mov r8, r8)
 80035a4:	20000088 	.word	0x20000088

080035a8 <IsMathOperator>:
/*-----------------------------------------------------------*/

/* --- Check if this string is a math operator and return its enum
*/
uint8_t IsMathOperator(char* string)
{
 80035a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035aa:	0005      	movs	r5, r0
	for(uint8_t i=0; i<NUM_MATH_OPERATORS ;i++)
  {
		if (!strcmp(string, "="))
 80035ac:	491b      	ldr	r1, [pc, #108]	; (800361c <IsMathOperator+0x74>)
 80035ae:	f7fc fda9 	bl	8000104 <strcmp>
 80035b2:	0006      	movs	r6, r0
 80035b4:	2706      	movs	r7, #6
			return MATH_EQUAL;
		else if (!strcmp(string, ">"))
 80035b6:	4c1a      	ldr	r4, [pc, #104]	; (8003620 <IsMathOperator+0x78>)
		if (!strcmp(string, "="))
 80035b8:	2e00      	cmp	r6, #0
 80035ba:	d023      	beq.n	8003604 <IsMathOperator+0x5c>
		else if (!strcmp(string, ">"))
 80035bc:	0021      	movs	r1, r4
 80035be:	0028      	movs	r0, r5
 80035c0:	f7fc fda0 	bl	8000104 <strcmp>
 80035c4:	2800      	cmp	r0, #0
 80035c6:	d01f      	beq.n	8003608 <IsMathOperator+0x60>
			return MATH_GREATER;
		else if (!strcmp(string, "<"))
 80035c8:	4916      	ldr	r1, [pc, #88]	; (8003624 <IsMathOperator+0x7c>)
 80035ca:	0028      	movs	r0, r5
 80035cc:	f7fc fd9a 	bl	8000104 <strcmp>
 80035d0:	2800      	cmp	r0, #0
 80035d2:	d01b      	beq.n	800360c <IsMathOperator+0x64>
			return MATH_SMALLER;
		else if (!strcmp(string, ">="))
 80035d4:	4914      	ldr	r1, [pc, #80]	; (8003628 <IsMathOperator+0x80>)
 80035d6:	0028      	movs	r0, r5
 80035d8:	f7fc fd94 	bl	8000104 <strcmp>
 80035dc:	2800      	cmp	r0, #0
 80035de:	d017      	beq.n	8003610 <IsMathOperator+0x68>
			return MATH_GREATER_EQUAL;
		else if (!strcmp(string, "<="))
 80035e0:	4912      	ldr	r1, [pc, #72]	; (800362c <IsMathOperator+0x84>)
 80035e2:	0028      	movs	r0, r5
 80035e4:	f7fc fd8e 	bl	8000104 <strcmp>
 80035e8:	2800      	cmp	r0, #0
 80035ea:	d013      	beq.n	8003614 <IsMathOperator+0x6c>
			return MATH_SMALLER_EQUAL;
		else if (!strcmp(string, "!="))
 80035ec:	4910      	ldr	r1, [pc, #64]	; (8003630 <IsMathOperator+0x88>)
 80035ee:	0028      	movs	r0, r5
 80035f0:	f7fc fd88 	bl	8000104 <strcmp>
 80035f4:	2800      	cmp	r0, #0
 80035f6:	d00f      	beq.n	8003618 <IsMathOperator+0x70>
	for(uint8_t i=0; i<NUM_MATH_OPERATORS ;i++)
 80035f8:	3f01      	subs	r7, #1
 80035fa:	b2ff      	uxtb	r7, r7
 80035fc:	2f00      	cmp	r7, #0
 80035fe:	d1db      	bne.n	80035b8 <IsMathOperator+0x10>
			return MATH_NOT_EQUAL;
  }
	return 0;
}
 8003600:	0038      	movs	r0, r7
 8003602:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return MATH_EQUAL;
 8003604:	2701      	movs	r7, #1
 8003606:	e7fb      	b.n	8003600 <IsMathOperator+0x58>
			return MATH_GREATER;
 8003608:	2702      	movs	r7, #2
 800360a:	e7f9      	b.n	8003600 <IsMathOperator+0x58>
			return MATH_SMALLER;
 800360c:	2703      	movs	r7, #3
 800360e:	e7f7      	b.n	8003600 <IsMathOperator+0x58>
			return MATH_GREATER_EQUAL;
 8003610:	2704      	movs	r7, #4
 8003612:	e7f5      	b.n	8003600 <IsMathOperator+0x58>
			return MATH_SMALLER_EQUAL;
 8003614:	2705      	movs	r7, #5
 8003616:	e7f3      	b.n	8003600 <IsMathOperator+0x58>
			return MATH_NOT_EQUAL;
 8003618:	2706      	movs	r7, #6
 800361a:	e7f1      	b.n	8003600 <IsMathOperator+0x58>
 800361c:	08019b50 	.word	0x08019b50
 8003620:	08019b54 	.word	0x08019b54
 8003624:	08019b58 	.word	0x08019b58
 8003628:	08019b5c 	.word	0x08019b5c
 800362c:	08019b60 	.word	0x08019b60
 8003630:	08019b64 	.word	0x08019b64

08003634 <ExploreNeighbors>:
/*-----------------------------------------------------------*/
#ifndef __N
/* --- Explore adjacent neighbors 
*/
BOS_Status ExploreNeighbors(uint8_t ignore)
{
 8003634:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003636:	b083      	sub	sp, #12
 8003638:	0007      	movs	r7, r0
	BOS_Status result = BOS_OK; 

	/* Send Hi messages to adjacent neighbors */
	for (uint8_t port=1 ; port<=NumOfPorts ; port++)  
 800363a:	2401      	movs	r4, #1
	{
		if (port != ignore) 
		{
			/* This module info */
			messageParams[0] = (uint8_t) (myPN >> 8);
 800363c:	4d0e      	ldr	r5, [pc, #56]	; (8003678 <ExploreNeighbors+0x44>)
			messageParams[1] = (uint8_t) myPN;
			messageParams[2] = port;
			/* Port, Source = 0 (myID), Destination = 0 (adjacent neighbor), message code, number of parameters */
			SendMessageFromPort(port, 0, 0, CODE_HI, 3);
 800363e:	2603      	movs	r6, #3
 8003640:	e003      	b.n	800364a <ExploreNeighbors+0x16>
	for (uint8_t port=1 ; port<=NumOfPorts ; port++)  
 8003642:	3401      	adds	r4, #1
 8003644:	b2e4      	uxtb	r4, r4
 8003646:	2c06      	cmp	r4, #6
 8003648:	d012      	beq.n	8003670 <ExploreNeighbors+0x3c>
		if (port != ignore) 
 800364a:	42a7      	cmp	r7, r4
 800364c:	d0f9      	beq.n	8003642 <ExploreNeighbors+0xe>
			messageParams[0] = (uint8_t) (myPN >> 8);
 800364e:	4b0b      	ldr	r3, [pc, #44]	; (800367c <ExploreNeighbors+0x48>)
 8003650:	881b      	ldrh	r3, [r3, #0]
 8003652:	0a1a      	lsrs	r2, r3, #8
 8003654:	702a      	strb	r2, [r5, #0]
			messageParams[1] = (uint8_t) myPN;
 8003656:	706b      	strb	r3, [r5, #1]
			messageParams[2] = port;
 8003658:	70ac      	strb	r4, [r5, #2]
			SendMessageFromPort(port, 0, 0, CODE_HI, 3);
 800365a:	9600      	str	r6, [sp, #0]
 800365c:	230a      	movs	r3, #10
 800365e:	2200      	movs	r2, #0
 8003660:	2100      	movs	r1, #0
 8003662:	0020      	movs	r0, r4
 8003664:	f005 fa12 	bl	8008a8c <SendMessageFromPort>
			/* Minimum delay between two consequetive SendMessage commands (with response) */
			osDelay(10);
 8003668:	200a      	movs	r0, #10
 800366a:	f00a fc68 	bl	800df3e <osDelay>
 800366e:	e7e8      	b.n	8003642 <ExploreNeighbors+0xe>
		}
	}
	
	return result;
}
 8003670:	2000      	movs	r0, #0
 8003672:	b003      	add	sp, #12
 8003674:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003676:	46c0      	nop			; (mov r8, r8)
 8003678:	200009d0 	.word	0x200009d0
 800367c:	20000050 	.word	0x20000050

08003680 <FindBroadcastRoutes>:

/* --- Find array broadcast routes starting from a given module 
				(Takes about 50 usec)
*/
BOS_Status FindBroadcastRoutes(uint8_t src)
{
 8003680:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003682:	46de      	mov	lr, fp
 8003684:	4657      	mov	r7, sl
 8003686:	464e      	mov	r6, r9
 8003688:	4645      	mov	r5, r8
 800368a:	b5e0      	push	{r5, r6, r7, lr}
 800368c:	b083      	sub	sp, #12
 800368e:	af00      	add	r7, sp, #0
	BOS_Status result = BOS_OK; 
	uint8_t p = 0, m = 0, level = 0, untaged = 0; 
	uint8_t  modules[N];			// Todo: Optimize to make bit-wise
 8003690:	4b45      	ldr	r3, [pc, #276]	; (80037a8 <FindBroadcastRoutes+0x128>)
 8003692:	781d      	ldrb	r5, [r3, #0]
 8003694:	1deb      	adds	r3, r5, #7
 8003696:	08db      	lsrs	r3, r3, #3
 8003698:	00db      	lsls	r3, r3, #3
 800369a:	466a      	mov	r2, sp
 800369c:	1ad3      	subs	r3, r2, r3
 800369e:	469d      	mov	sp, r3
 80036a0:	466c      	mov	r4, sp
	
	/* 1. Initialize modules list and broadcast routes */
	
	for(m=0 ; m<N ; m++)
 80036a2:	2d00      	cmp	r5, #0
 80036a4:	d009      	beq.n	80036ba <FindBroadcastRoutes+0x3a>
 80036a6:	4a41      	ldr	r2, [pc, #260]	; (80037ac <FindBroadcastRoutes+0x12c>)
 80036a8:	2300      	movs	r3, #0
	{	
		modules[m] = 0;
 80036aa:	2100      	movs	r1, #0
 80036ac:	54e1      	strb	r1, [r4, r3]
		bcastRoutes[m] = 0;
 80036ae:	8011      	strh	r1, [r2, #0]
	for(m=0 ; m<N ; m++)
 80036b0:	3301      	adds	r3, #1
 80036b2:	3202      	adds	r2, #2
 80036b4:	b2de      	uxtb	r6, r3
 80036b6:	42b5      	cmp	r5, r6
 80036b8:	d8f8      	bhi.n	80036ac <FindBroadcastRoutes+0x2c>
	}
	modules[src-1] = ++level;					// Tag the source
 80036ba:	3801      	subs	r0, #1
 80036bc:	2301      	movs	r3, #1
 80036be:	5423      	strb	r3, [r4, r0]
	
	/* 2. Source module should send to all neighbors */
	
	++level;													// Move one level
	
	for(p=1 ; p<=NumOfPorts ; p++)
 80036c0:	2216      	movs	r2, #22
 80036c2:	4342      	muls	r2, r0
 80036c4:	4b3a      	ldr	r3, [pc, #232]	; (80037b0 <FindBroadcastRoutes+0x130>)
 80036c6:	18d2      	adds	r2, r2, r3
	modules[src-1] = ++level;					// Tag the source
 80036c8:	2100      	movs	r1, #0
	{
		if (array[src-1][p]) 
		{
			bcastRoutes[src-1] |= (0x01 << (p-1));
 80036ca:	4e38      	ldr	r6, [pc, #224]	; (80037ac <FindBroadcastRoutes+0x12c>)
 80036cc:	0040      	lsls	r0, r0, #1
 80036ce:	2301      	movs	r3, #1
 80036d0:	4698      	mov	r8, r3
			modules[(array[src-1][p] >> 3)-1] = level;			// Tag this module as already broadcasted-to 
 80036d2:	3301      	adds	r3, #1
 80036d4:	469c      	mov	ip, r3
 80036d6:	607d      	str	r5, [r7, #4]
 80036d8:	46a3      	mov	fp, r4
 80036da:	e003      	b.n	80036e4 <FindBroadcastRoutes+0x64>
	for(p=1 ; p<=NumOfPorts ; p++)
 80036dc:	3101      	adds	r1, #1
 80036de:	3202      	adds	r2, #2
 80036e0:	2905      	cmp	r1, #5
 80036e2:	d011      	beq.n	8003708 <FindBroadcastRoutes+0x88>
		if (array[src-1][p]) 
 80036e4:	8853      	ldrh	r3, [r2, #2]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d0f8      	beq.n	80036dc <FindBroadcastRoutes+0x5c>
			bcastRoutes[src-1] |= (0x01 << (p-1));
 80036ea:	5b85      	ldrh	r5, [r0, r6]
 80036ec:	46a9      	mov	r9, r5
 80036ee:	4645      	mov	r5, r8
 80036f0:	408d      	lsls	r5, r1
 80036f2:	46aa      	mov	sl, r5
 80036f4:	464d      	mov	r5, r9
 80036f6:	4654      	mov	r4, sl
 80036f8:	4325      	orrs	r5, r4
 80036fa:	5385      	strh	r5, [r0, r6]
			modules[(array[src-1][p] >> 3)-1] = level;			// Tag this module as already broadcasted-to 
 80036fc:	08db      	lsrs	r3, r3, #3
 80036fe:	445b      	add	r3, fp
 8003700:	3b01      	subs	r3, #1
 8003702:	4664      	mov	r4, ip
 8003704:	701c      	strb	r4, [r3, #0]
 8003706:	e7e9      	b.n	80036dc <FindBroadcastRoutes+0x5c>
 8003708:	687d      	ldr	r5, [r7, #4]
 800370a:	465c      	mov	r4, fp
	++level;													// Move one level
 800370c:	2302      	movs	r3, #2
 800370e:	4699      	mov	r9, r3
 8003710:	4b27      	ldr	r3, [pc, #156]	; (80037b0 <FindBroadcastRoutes+0x130>)
 8003712:	3302      	adds	r3, #2
			{			
				for(p=1 ; p<=NumOfPorts ; p++)								// Check all neighbors if they're not already broadcasted-to
				{
					if (array[m][p] && (modules[(array[m][p] >> 3)-1] == 0)) 			// Found an untaged module
					{
						bcastRoutes[m] |= (0x01 << (p-1));
 8003714:	469a      	mov	sl, r3
		++level;																					// Move one level
 8003716:	464b      	mov	r3, r9
 8003718:	3301      	adds	r3, #1
 800371a:	b2db      	uxtb	r3, r3
 800371c:	4699      	mov	r9, r3
		for(m=0 ; m<N ; m++)															// Scan all modules in the list
 800371e:	2d00      	cmp	r5, #0
 8003720:	d038      	beq.n	8003794 <FindBroadcastRoutes+0x114>
 8003722:	2300      	movs	r3, #0
		untaged = 0;																			// Reset the untaged counter
 8003724:	2200      	movs	r2, #0
 8003726:	4694      	mov	ip, r2
			if (modules[m] == (level-1))										// This module is already broadcasted-to from the previous level 
 8003728:	464a      	mov	r2, r9
 800372a:	1e56      	subs	r6, r2, #1
 800372c:	e021      	b.n	8003772 <FindBroadcastRoutes+0xf2>
				for(p=1 ; p<=NumOfPorts ; p++)								// Check all neighbors if they're not already broadcasted-to
 800372e:	3001      	adds	r0, #1
 8003730:	3102      	adds	r1, #2
 8003732:	2805      	cmp	r0, #5
 8003734:	d015      	beq.n	8003762 <FindBroadcastRoutes+0xe2>
					if (array[m][p] && (modules[(array[m][p] >> 3)-1] == 0)) 			// Found an untaged module
 8003736:	880a      	ldrh	r2, [r1, #0]
 8003738:	2a00      	cmp	r2, #0
 800373a:	d0f8      	beq.n	800372e <FindBroadcastRoutes+0xae>
 800373c:	08d2      	lsrs	r2, r2, #3
 800373e:	3a01      	subs	r2, #1
 8003740:	5cab      	ldrb	r3, [r5, r2]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d1f3      	bne.n	800372e <FindBroadcastRoutes+0xae>
						bcastRoutes[m] |= (0x01 << (p-1));
 8003746:	4b19      	ldr	r3, [pc, #100]	; (80037ac <FindBroadcastRoutes+0x12c>)
 8003748:	5ae3      	ldrh	r3, [r4, r3]
 800374a:	2601      	movs	r6, #1
 800374c:	4086      	lsls	r6, r0
 800374e:	4333      	orrs	r3, r6
 8003750:	4e16      	ldr	r6, [pc, #88]	; (80037ac <FindBroadcastRoutes+0x12c>)
 8003752:	53a3      	strh	r3, [r4, r6]
						modules[(array[m][p] >> 3)-1] = level;		// Tag this module as already broadcasted-to 
 8003754:	464b      	mov	r3, r9
 8003756:	54ab      	strb	r3, [r5, r2]
						++untaged;
 8003758:	4663      	mov	r3, ip
 800375a:	3301      	adds	r3, #1
 800375c:	b2db      	uxtb	r3, r3
 800375e:	469c      	mov	ip, r3
 8003760:	e7e5      	b.n	800372e <FindBroadcastRoutes+0xae>
 8003762:	002c      	movs	r4, r5
 8003764:	4645      	mov	r5, r8
 8003766:	465b      	mov	r3, fp
 8003768:	687e      	ldr	r6, [r7, #4]
		for(m=0 ; m<N ; m++)															// Scan all modules in the list
 800376a:	3301      	adds	r3, #1
 800376c:	b2da      	uxtb	r2, r3
 800376e:	4295      	cmp	r5, r2
 8003770:	d90d      	bls.n	800378e <FindBroadcastRoutes+0x10e>
			if (modules[m] == (level-1))										// This module is already broadcasted-to from the previous level 
 8003772:	5ce2      	ldrb	r2, [r4, r3]
 8003774:	42b2      	cmp	r2, r6
 8003776:	d1f8      	bne.n	800376a <FindBroadcastRoutes+0xea>
 8003778:	2116      	movs	r1, #22
 800377a:	4359      	muls	r1, r3
 800377c:	4451      	add	r1, sl
 800377e:	005a      	lsls	r2, r3, #1
 8003780:	2000      	movs	r0, #0
 8003782:	46a8      	mov	r8, r5
 8003784:	0025      	movs	r5, r4
 8003786:	0014      	movs	r4, r2
 8003788:	469b      	mov	fp, r3
 800378a:	607e      	str	r6, [r7, #4]
 800378c:	e7d3      	b.n	8003736 <FindBroadcastRoutes+0xb6>
					}
				}			
			}
		}
	} 
	while (untaged);
 800378e:	4663      	mov	r3, ip
 8003790:	2b00      	cmp	r3, #0
 8003792:	d1c0      	bne.n	8003716 <FindBroadcastRoutes+0x96>

	
	return result;
}
 8003794:	2000      	movs	r0, #0
 8003796:	46bd      	mov	sp, r7
 8003798:	b003      	add	sp, #12
 800379a:	bcf0      	pop	{r4, r5, r6, r7}
 800379c:	46bb      	mov	fp, r7
 800379e:	46b2      	mov	sl, r6
 80037a0:	46a9      	mov	r9, r5
 80037a2:	46a0      	mov	r8, r4
 80037a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80037a6:	46c0      	nop			; (mov r8, r8)
 80037a8:	2000001c 	.word	0x2000001c
 80037ac:	20000788 	.word	0x20000788
 80037b0:	20000560 	.word	0x20000560

080037b4 <FindRoute>:
6- Otherwise, select the unvisited node that is marked with the smallest tentative distance, 
set it as the new "current node", and go back to step 3.

 */
uint8_t FindRoute(uint8_t sourceID, uint8_t desID)
{
 80037b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80037b6:	46de      	mov	lr, fp
 80037b8:	4657      	mov	r7, sl
 80037ba:	464e      	mov	r6, r9
 80037bc:	4645      	mov	r5, r8
 80037be:	b5e0      	push	{r5, r6, r7, lr}
 80037c0:	b091      	sub	sp, #68	; 0x44
 80037c2:	0006      	movs	r6, r0
 80037c4:	468a      	mov	sl, r1
#ifdef ___N
	uint8_t Q[__N] = {0};		// All nodes initially in Q (unvisited nodes)
#else
	uint8_t Q[50] = {0};		// All nodes initially in Q (unvisited nodes)
 80037c6:	2400      	movs	r4, #0
 80037c8:	9403      	str	r4, [sp, #12]
 80037ca:	222e      	movs	r2, #46	; 0x2e
 80037cc:	2100      	movs	r1, #0
 80037ce:	a804      	add	r0, sp, #16
 80037d0:	f012 feb9 	bl	8016546 <memset>
#endif
	
	uint8_t alt = 0; uint8_t u = 0; uint8_t v = 0; uint8_t j = 0;
	
	memset(route,0,sizeof(route));
 80037d4:	2219      	movs	r2, #25
 80037d6:	2100      	movs	r1, #0
 80037d8:	4858      	ldr	r0, [pc, #352]	; (800393c <FindRoute+0x188>)
 80037da:	f012 feb4 	bl	8016546 <memset>
	routeDist[sourceID-1] = 0;                  // Distance from source to source
 80037de:	0035      	movs	r5, r6
 80037e0:	1e70      	subs	r0, r6, #1
 80037e2:	4b57      	ldr	r3, [pc, #348]	; (8003940 <FindRoute+0x18c>)
 80037e4:	541c      	strb	r4, [r3, r0]
	routePrev[sourceID-1] = 0;               		// Previous node in optimal path initialization undefined
 80037e6:	4b57      	ldr	r3, [pc, #348]	; (8003944 <FindRoute+0x190>)
 80037e8:	541c      	strb	r4, [r3, r0]
		
	/* Check adjacent neighbors first! */
	for(int col=1 ; col<=6 ; col++)
 80037ea:	2616      	movs	r6, #22
 80037ec:	4370      	muls	r0, r6
 80037ee:	4e56      	ldr	r6, [pc, #344]	; (8003948 <FindRoute+0x194>)
 80037f0:	1981      	adds	r1, r0, r6
 80037f2:	9101      	str	r1, [sp, #4]
 80037f4:	2001      	movs	r0, #1
	{
		if (array[sourceID-1][col] && ((array[sourceID-1][col]>>3) == desID)) {
 80037f6:	4653      	mov	r3, sl
 80037f8:	b29a      	uxth	r2, r3
 80037fa:	e002      	b.n	8003802 <FindRoute+0x4e>
	for(int col=1 ; col<=6 ; col++)
 80037fc:	3001      	adds	r0, #1
 80037fe:	2807      	cmp	r0, #7
 8003800:	d010      	beq.n	8003824 <FindRoute+0x70>
		if (array[sourceID-1][col] && ((array[sourceID-1][col]>>3) == desID)) {
 8003802:	0043      	lsls	r3, r0, #1
 8003804:	5acb      	ldrh	r3, [r1, r3]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d0f8      	beq.n	80037fc <FindRoute+0x48>
 800380a:	08db      	lsrs	r3, r3, #3
 800380c:	4293      	cmp	r3, r2
 800380e:	d1f5      	bne.n	80037fc <FindRoute+0x48>
			routeDist[desID-1] = 1;
 8003810:	4b4b      	ldr	r3, [pc, #300]	; (8003940 <FindRoute+0x18c>)
 8003812:	4453      	add	r3, sl
 8003814:	3b01      	subs	r3, #1
 8003816:	2201      	movs	r2, #1
 8003818:	701a      	strb	r2, [r3, #0]
			route[0] = desID;
 800381a:	4b48      	ldr	r3, [pc, #288]	; (800393c <FindRoute+0x188>)
 800381c:	4652      	mov	r2, sl
 800381e:	701a      	strb	r2, [r3, #0]
			return col;	
 8003820:	b2c0      	uxtb	r0, r0
 8003822:	e083      	b.n	800392c <FindRoute+0x178>
		}
	}						
	
	/* Initialization */
	for (int i=1 ; i<=N ; i++)   					
 8003824:	4b49      	ldr	r3, [pc, #292]	; (800394c <FindRoute+0x198>)
 8003826:	7819      	ldrb	r1, [r3, #0]
 8003828:	2900      	cmp	r1, #0
 800382a:	dd14      	ble.n	8003856 <FindRoute+0xa2>
 800382c:	2301      	movs	r3, #1
	{
		if (i != sourceID)            				// Where i has not yet been removed from Q (unvisited nodes)
		{
			routeDist[i-1] = 0xFF;        			// Unknown distance function from source to i
 800382e:	4a44      	ldr	r2, [pc, #272]	; (8003940 <FindRoute+0x18c>)
 8003830:	1e54      	subs	r4, r2, #1
 8003832:	22ff      	movs	r2, #255	; 0xff
 8003834:	4690      	mov	r8, r2
			routePrev[i-1] = 0;            			// Previous node in optimal path from source
 8003836:	4a43      	ldr	r2, [pc, #268]	; (8003944 <FindRoute+0x190>)
 8003838:	1e50      	subs	r0, r2, #1
 800383a:	2200      	movs	r2, #0
 800383c:	4694      	mov	ip, r2
 800383e:	e002      	b.n	8003846 <FindRoute+0x92>
	for (int i=1 ; i<=N ; i++)   					
 8003840:	3301      	adds	r3, #1
 8003842:	428b      	cmp	r3, r1
 8003844:	dc07      	bgt.n	8003856 <FindRoute+0xa2>
		if (i != sourceID)            				// Where i has not yet been removed from Q (unvisited nodes)
 8003846:	429d      	cmp	r5, r3
 8003848:	d0fa      	beq.n	8003840 <FindRoute+0x8c>
			routeDist[i-1] = 0xFF;        			// Unknown distance function from source to i
 800384a:	4642      	mov	r2, r8
 800384c:	54e2      	strb	r2, [r4, r3]
			routePrev[i-1] = 0;            			// Previous node in optimal path from source
 800384e:	181a      	adds	r2, r3, r0
 8003850:	4666      	mov	r6, ip
 8003852:	7016      	strb	r6, [r2, #0]
 8003854:	e7f4      	b.n	8003840 <FindRoute+0x8c>
	uint8_t alt = 0; uint8_t u = 0; uint8_t v = 0; uint8_t j = 0;
 8003856:	2400      	movs	r4, #0
 8003858:	4b3b      	ldr	r3, [pc, #236]	; (8003948 <FindRoute+0x194>)
 800385a:	4698      	mov	r8, r3
 800385c:	230c      	movs	r3, #12
 800385e:	4443      	add	r3, r8
 8003860:	4699      	mov	r9, r3
			if (array[u-1][n])										// There's a neighbor v at this port n
			{	
				v = (array[u-1][n]>>3);
				if (!Q[v-1])												// v is still in Q
				{
					alt = routeDist[u-1] + 1;					// Add one hop
 8003862:	4d37      	ldr	r5, [pc, #220]	; (8003940 <FindRoute+0x18c>)
 8003864:	46d3      	mov	fp, sl
	while (!QnotEmpty(Q))
 8003866:	a803      	add	r0, sp, #12
 8003868:	f7ff f9a0 	bl	8002bac <QnotEmpty>
 800386c:	2800      	cmp	r0, #0
 800386e:	d12e      	bne.n	80038ce <FindRoute+0x11a>
		u = minArr(routeDist, Q)+1;						// Source node in first case
 8003870:	a903      	add	r1, sp, #12
 8003872:	4833      	ldr	r0, [pc, #204]	; (8003940 <FindRoute+0x18c>)
 8003874:	f7ff f97c 	bl	8002b70 <minArr>
 8003878:	3001      	adds	r0, #1
 800387a:	b2c4      	uxtb	r4, r0
		if (u == desID) 
 800387c:	455c      	cmp	r4, fp
 800387e:	d00b      	beq.n	8003898 <FindRoute+0xe4>
			Q[u-1] = 1;													// Remove u from Q 
 8003880:	1e67      	subs	r7, r4, #1
 8003882:	ab03      	add	r3, sp, #12
 8003884:	2201      	movs	r2, #1
 8003886:	55da      	strb	r2, [r3, r7]
		for (uint8_t n=1 ; n<=6 ; n++)      		// Check all module ports
 8003888:	2016      	movs	r0, #22
 800388a:	4378      	muls	r0, r7
 800388c:	4643      	mov	r3, r8
 800388e:	18c1      	adds	r1, r0, r3
 8003890:	4448      	add	r0, r9
				if (!Q[v-1])												// v is still in Q
 8003892:	aa03      	add	r2, sp, #12
 8003894:	46ba      	mov	sl, r7
 8003896:	e005      	b.n	80038a4 <FindRoute+0xf0>
 8003898:	46da      	mov	sl, fp
		u = minArr(routeDist, Q)+1;						// Source node in first case
 800389a:	465c      	mov	r4, fp
 800389c:	e018      	b.n	80038d0 <FindRoute+0x11c>
		for (uint8_t n=1 ; n<=6 ; n++)      		// Check all module ports
 800389e:	3102      	adds	r1, #2
 80038a0:	4281      	cmp	r1, r0
 80038a2:	d0e0      	beq.n	8003866 <FindRoute+0xb2>
			if (array[u-1][n])										// There's a neighbor v at this port n
 80038a4:	884b      	ldrh	r3, [r1, #2]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d0f9      	beq.n	800389e <FindRoute+0xea>
				v = (array[u-1][n]>>3);
 80038aa:	08db      	lsrs	r3, r3, #3
				if (!Q[v-1])												// v is still in Q
 80038ac:	b2db      	uxtb	r3, r3
 80038ae:	3b01      	subs	r3, #1
 80038b0:	5cd6      	ldrb	r6, [r2, r3]
 80038b2:	2e00      	cmp	r6, #0
 80038b4:	d1f3      	bne.n	800389e <FindRoute+0xea>
					alt = routeDist[u-1] + 1;					// Add one hop
 80038b6:	4656      	mov	r6, sl
 80038b8:	5dae      	ldrb	r6, [r5, r6]
 80038ba:	3601      	adds	r6, #1
 80038bc:	b2f6      	uxtb	r6, r6
					if (alt < routeDist[v-1])      		// A shorter path to v has been found
 80038be:	5cef      	ldrb	r7, [r5, r3]
 80038c0:	42b7      	cmp	r7, r6
 80038c2:	d9ec      	bls.n	800389e <FindRoute+0xea>
					{
						routeDist[v-1] = alt; 
 80038c4:	4f1e      	ldr	r7, [pc, #120]	; (8003940 <FindRoute+0x18c>)
 80038c6:	54fe      	strb	r6, [r7, r3]
						routePrev[v-1] = u; 
 80038c8:	4e1e      	ldr	r6, [pc, #120]	; (8003944 <FindRoute+0x190>)
 80038ca:	54f4      	strb	r4, [r6, r3]
 80038cc:	e7e7      	b.n	800389e <FindRoute+0xea>
 80038ce:	46da      	mov	sl, fp
	}	
		
finishedRoute:
		
	/* Build the virtual route */	
	while (routePrev[u-1])        		// Construct the shortest path with a stack route
 80038d0:	4b1c      	ldr	r3, [pc, #112]	; (8003944 <FindRoute+0x190>)
 80038d2:	191b      	adds	r3, r3, r4
 80038d4:	3b01      	subs	r3, #1
 80038d6:	7819      	ldrb	r1, [r3, #0]
 80038d8:	2300      	movs	r3, #0
 80038da:	2900      	cmp	r1, #0
 80038dc:	d00d      	beq.n	80038fa <FindRoute+0x146>
	{
		route[j++] = u;          				// Push the vertex onto the stack
 80038de:	4d17      	ldr	r5, [pc, #92]	; (800393c <FindRoute+0x188>)
	while (routePrev[u-1])        		// Construct the shortest path with a stack route
 80038e0:	4818      	ldr	r0, [pc, #96]	; (8003944 <FindRoute+0x190>)
 80038e2:	e000      	b.n	80038e6 <FindRoute+0x132>
 80038e4:	0011      	movs	r1, r2
		route[j++] = u;          				// Push the vertex onto the stack
 80038e6:	001a      	movs	r2, r3
 80038e8:	3301      	adds	r3, #1
 80038ea:	b2db      	uxtb	r3, r3
 80038ec:	54ac      	strb	r4, [r5, r2]
	while (routePrev[u-1])        		// Construct the shortest path with a stack route
 80038ee:	1842      	adds	r2, r0, r1
 80038f0:	3a01      	subs	r2, #1
 80038f2:	7812      	ldrb	r2, [r2, #0]
 80038f4:	000c      	movs	r4, r1
 80038f6:	2a00      	cmp	r2, #0
 80038f8:	d1f4      	bne.n	80038e4 <FindRoute+0x130>
		u = routePrev[u-1];           	// Traverse from target to source
	}
	
	/* Check which port leads to the correct module */
	for(int col=1 ; col<=6 ; col++)	
 80038fa:	2001      	movs	r0, #1
	{					
		if ( array[sourceID-1][col] && ((array[sourceID-1][col]>>3) == route[routeDist[desID-1]-1]) ) {
 80038fc:	4c0f      	ldr	r4, [pc, #60]	; (800393c <FindRoute+0x188>)
 80038fe:	4b10      	ldr	r3, [pc, #64]	; (8003940 <FindRoute+0x18c>)
 8003900:	4453      	add	r3, sl
 8003902:	001f      	movs	r7, r3
 8003904:	3f01      	subs	r7, #1
 8003906:	9901      	ldr	r1, [sp, #4]
 8003908:	e002      	b.n	8003910 <FindRoute+0x15c>
	for(int col=1 ; col<=6 ; col++)	
 800390a:	3001      	adds	r0, #1
 800390c:	2807      	cmp	r0, #7
 800390e:	d00c      	beq.n	800392a <FindRoute+0x176>
		if ( array[sourceID-1][col] && ((array[sourceID-1][col]>>3) == route[routeDist[desID-1]-1]) ) {
 8003910:	0043      	lsls	r3, r0, #1
 8003912:	5acb      	ldrh	r3, [r1, r3]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d0f8      	beq.n	800390a <FindRoute+0x156>
 8003918:	783a      	ldrb	r2, [r7, #0]
 800391a:	18a2      	adds	r2, r4, r2
 800391c:	3a01      	subs	r2, #1
 800391e:	7812      	ldrb	r2, [r2, #0]
 8003920:	08db      	lsrs	r3, r3, #3
 8003922:	429a      	cmp	r2, r3
 8003924:	d1f1      	bne.n	800390a <FindRoute+0x156>
			return col;	
 8003926:	b2c0      	uxtb	r0, r0
 8003928:	e000      	b.n	800392c <FindRoute+0x178>
		}
	}	

	return 0;			
 800392a:	2000      	movs	r0, #0
}
 800392c:	b011      	add	sp, #68	; 0x44
 800392e:	bcf0      	pop	{r4, r5, r6, r7}
 8003930:	46bb      	mov	fp, r7
 8003932:	46b2      	mov	sl, r6
 8003934:	46a9      	mov	r9, r5
 8003936:	46a0      	mov	r8, r4
 8003938:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800393a:	46c0      	nop			; (mov r8, r8)
 800393c:	20006420 	.word	0x20006420
 8003940:	20000b9c 	.word	0x20000b9c
 8003944:	20000bb8 	.word	0x20000bb8
 8003948:	20000560 	.word	0x20000560
 800394c:	2000001c 	.word	0x2000001c

08003950 <remoteBootloaderUpdate>:
{
 8003950:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003952:	46ce      	mov	lr, r9
 8003954:	4647      	mov	r7, r8
 8003956:	b580      	push	{r7, lr}
 8003958:	b085      	sub	sp, #20
 800395a:	4680      	mov	r8, r0
 800395c:	000d      	movs	r5, r1
 800395e:	0016      	movs	r6, r2
 8003960:	001f      	movs	r7, r3
	myOutport = FindRoute(myID, dst);
 8003962:	4b36      	ldr	r3, [pc, #216]	; (8003a3c <remoteBootloaderUpdate+0xec>)
 8003964:	7818      	ldrb	r0, [r3, #0]
 8003966:	f7ff ff25 	bl	80037b4 <FindRoute>
 800396a:	0004      	movs	r4, r0
	if (outport && dst == myID) {												/* This is a 'via port' update and I'm the last module */
 800396c:	2f00      	cmp	r7, #0
 800396e:	d024      	beq.n	80039ba <remoteBootloaderUpdate+0x6a>
 8003970:	4b32      	ldr	r3, [pc, #200]	; (8003a3c <remoteBootloaderUpdate+0xec>)
 8003972:	781b      	ldrb	r3, [r3, #0]
 8003974:	42ab      	cmp	r3, r5
 8003976:	d05e      	beq.n	8003a36 <remoteBootloaderUpdate+0xe6>
	uint8_t myOutport = 0, lastModule = 0; int8_t *pcOutputString;
 8003978:	2200      	movs	r2, #0
 800397a:	4691      	mov	r9, r2
	if (src == myID)
 800397c:	4543      	cmp	r3, r8
 800397e:	d050      	beq.n	8003a22 <remoteBootloaderUpdate+0xd2>
	SetupPortForRemoteBootloaderUpdate(inport);
 8003980:	0030      	movs	r0, r6
 8003982:	f7ff fdef 	bl	8003564 <SetupPortForRemoteBootloaderUpdate>
	SetupPortForRemoteBootloaderUpdate(myOutport);
 8003986:	0020      	movs	r0, r4
 8003988:	f7ff fdec 	bl	8003564 <SetupPortForRemoteBootloaderUpdate>
	if (lastModule == myID) {
 800398c:	4b2b      	ldr	r3, [pc, #172]	; (8003a3c <remoteBootloaderUpdate+0xec>)
 800398e:	781b      	ldrb	r3, [r3, #0]
 8003990:	454b      	cmp	r3, r9
 8003992:	d03f      	beq.n	8003a14 <remoteBootloaderUpdate+0xc4>
	StartScastDMAStream(inport, myID, myOutport, myID, BIDIRECTIONAL, 0xFFFFFFFF, 0xFFFFFFFF, false);	
 8003994:	4b29      	ldr	r3, [pc, #164]	; (8003a3c <remoteBootloaderUpdate+0xec>)
 8003996:	7819      	ldrb	r1, [r3, #0]
 8003998:	2300      	movs	r3, #0
 800399a:	9303      	str	r3, [sp, #12]
 800399c:	3b01      	subs	r3, #1
 800399e:	9302      	str	r3, [sp, #8]
 80039a0:	9301      	str	r3, [sp, #4]
 80039a2:	3303      	adds	r3, #3
 80039a4:	9300      	str	r3, [sp, #0]
 80039a6:	000b      	movs	r3, r1
 80039a8:	0022      	movs	r2, r4
 80039aa:	0030      	movs	r0, r6
 80039ac:	f005 fabe 	bl	8008f2c <StartScastDMAStream>
}
 80039b0:	b005      	add	sp, #20
 80039b2:	bcc0      	pop	{r6, r7}
 80039b4:	46b9      	mov	r9, r7
 80039b6:	46b0      	mov	r8, r6
 80039b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (NumberOfHops(dst) == 1)
 80039ba:	4b21      	ldr	r3, [pc, #132]	; (8003a40 <remoteBootloaderUpdate+0xf0>)
 80039bc:	195b      	adds	r3, r3, r5
 80039be:	3b01      	subs	r3, #1
 80039c0:	781a      	ldrb	r2, [r3, #0]
 80039c2:	2a01      	cmp	r2, #1
 80039c4:	d022      	beq.n	8003a0c <remoteBootloaderUpdate+0xbc>
			lastModule = route[NumberOfHops(dst)-1];				/* previous module = route[Number of hops - 1] */
 80039c6:	4b1f      	ldr	r3, [pc, #124]	; (8003a44 <remoteBootloaderUpdate+0xf4>)
 80039c8:	189b      	adds	r3, r3, r2
 80039ca:	3b01      	subs	r3, #1
 80039cc:	781b      	ldrb	r3, [r3, #0]
 80039ce:	4699      	mov	r9, r3
	if (src == myID)
 80039d0:	4b1a      	ldr	r3, [pc, #104]	; (8003a3c <remoteBootloaderUpdate+0xec>)
 80039d2:	781b      	ldrb	r3, [r3, #0]
 80039d4:	4543      	cmp	r3, r8
 80039d6:	d1d3      	bne.n	8003980 <remoteBootloaderUpdate+0x30>
		pcOutputString = FreeRTOS_CLIGetOutputBuffer();
 80039d8:	f00a fbd4 	bl	800e184 <FreeRTOS_CLIGetOutputBuffer>
 80039dc:	4680      	mov	r8, r0
			sprintf( ( char * ) pcOutputString, pcRemoteBootloaderUpdateMessage, dst);
 80039de:	4b1a      	ldr	r3, [pc, #104]	; (8003a48 <remoteBootloaderUpdate+0xf8>)
 80039e0:	6819      	ldr	r1, [r3, #0]
 80039e2:	002a      	movs	r2, r5
 80039e4:	f012 feba 	bl	801675c <siprintf>
		strcat(( char * ) pcOutputString, pcRemoteBootloaderUpdateWarningMessage);
 80039e8:	4b18      	ldr	r3, [pc, #96]	; (8003a4c <remoteBootloaderUpdate+0xfc>)
 80039ea:	6819      	ldr	r1, [r3, #0]
 80039ec:	4640      	mov	r0, r8
 80039ee:	f012 fed5 	bl	801679c <strcat>
		writePxITMutex(inport, ( char * ) pcOutputString, strlen(( char * )pcOutputString), cmd50ms);
 80039f2:	4640      	mov	r0, r8
 80039f4:	f7fc fb90 	bl	8000118 <strlen>
 80039f8:	b282      	uxth	r2, r0
 80039fa:	2332      	movs	r3, #50	; 0x32
 80039fc:	4641      	mov	r1, r8
 80039fe:	0030      	movs	r0, r6
 8003a00:	f00a f99a 	bl	800dd38 <writePxITMutex>
		Delay_ms(100);
 8003a04:	2064      	movs	r0, #100	; 0x64
 8003a06:	f00c fb19 	bl	801003c <HAL_Delay>
 8003a0a:	e7b9      	b.n	8003980 <remoteBootloaderUpdate+0x30>
			lastModule = myID;
 8003a0c:	4b0b      	ldr	r3, [pc, #44]	; (8003a3c <remoteBootloaderUpdate+0xec>)
 8003a0e:	781b      	ldrb	r3, [r3, #0]
 8003a10:	4699      	mov	r9, r3
 8003a12:	e7dd      	b.n	80039d0 <remoteBootloaderUpdate+0x80>
		SwapUartPins(GetUart(myOutport), REVERSED);
 8003a14:	0020      	movs	r0, r4
 8003a16:	f00a f945 	bl	800dca4 <GetUart>
 8003a1a:	2101      	movs	r1, #1
 8003a1c:	f00a f9da 	bl	800ddd4 <SwapUartPins>
 8003a20:	e7b8      	b.n	8003994 <remoteBootloaderUpdate+0x44>
		pcOutputString = FreeRTOS_CLIGetOutputBuffer();
 8003a22:	f00a fbaf 	bl	800e184 <FreeRTOS_CLIGetOutputBuffer>
 8003a26:	4680      	mov	r8, r0
			sprintf( ( char * ) pcOutputString, pcRemoteBootloaderUpdateViaPortMessage, dst, outport);
 8003a28:	4b09      	ldr	r3, [pc, #36]	; (8003a50 <remoteBootloaderUpdate+0x100>)
 8003a2a:	6819      	ldr	r1, [r3, #0]
 8003a2c:	003b      	movs	r3, r7
 8003a2e:	002a      	movs	r2, r5
 8003a30:	f012 fe94 	bl	801675c <siprintf>
 8003a34:	e7d8      	b.n	80039e8 <remoteBootloaderUpdate+0x98>
		lastModule = myID;
 8003a36:	46a9      	mov	r9, r5
		myOutport = outport;
 8003a38:	003c      	movs	r4, r7
 8003a3a:	e79f      	b.n	800397c <remoteBootloaderUpdate+0x2c>
 8003a3c:	20000b04 	.word	0x20000b04
 8003a40:	20000b9c 	.word	0x20000b9c
 8003a44:	20006420 	.word	0x20006420
 8003a48:	20000078 	.word	0x20000078
 8003a4c:	20000080 	.word	0x20000080
 8003a50:	2000007c 	.word	0x2000007c

08003a54 <DisplayTopology>:
/*-----------------------------------------------------------*/

/* --- Display array topology in human-readable format through module port --- 
*/
void DisplayTopology(uint8_t port)
{
 8003a54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a56:	46de      	mov	lr, fp
 8003a58:	4657      	mov	r7, sl
 8003a5a:	464e      	mov	r6, r9
 8003a5c:	4645      	mov	r5, r8
 8003a5e:	b5e0      	push	{r5, r6, r7, lr}
 8003a60:	b083      	sub	sp, #12
 8003a62:	0007      	movs	r7, r0
	/* Print table header */
	sprintf(pcUserMessage, "\n\r(Module:Port)\t\t");
 8003a64:	4c5b      	ldr	r4, [pc, #364]	; (8003bd4 <DisplayTopology+0x180>)
 8003a66:	4b5c      	ldr	r3, [pc, #368]	; (8003bd8 <DisplayTopology+0x184>)
 8003a68:	0022      	movs	r2, r4
 8003a6a:	cb23      	ldmia	r3!, {r0, r1, r5}
 8003a6c:	c223      	stmia	r2!, {r0, r1, r5}
 8003a6e:	6819      	ldr	r1, [r3, #0]
 8003a70:	6011      	str	r1, [r2, #0]
 8003a72:	889b      	ldrh	r3, [r3, #4]
 8003a74:	8093      	strh	r3, [r2, #4]
	writePxMutex(port, pcUserMessage, strlen(pcUserMessage), cmd50ms, HAL_MAX_DELAY);
 8003a76:	0020      	movs	r0, r4
 8003a78:	f7fc fb4e 	bl	8000118 <strlen>
 8003a7c:	b282      	uxth	r2, r0
 8003a7e:	2301      	movs	r3, #1
 8003a80:	425b      	negs	r3, r3
 8003a82:	9300      	str	r3, [sp, #0]
 8003a84:	3333      	adds	r3, #51	; 0x33
 8003a86:	0021      	movs	r1, r4
 8003a88:	0038      	movs	r0, r7
 8003a8a:	f00a f929 	bl	800dce0 <writePxMutex>
 8003a8e:	2401      	movs	r4, #1
	for (uint8_t i=1 ; i<=NumOfPorts ; i++) 
	{
		sprintf(pcUserMessage, "P%d\t", i);
 8003a90:	4b52      	ldr	r3, [pc, #328]	; (8003bdc <DisplayTopology+0x188>)
 8003a92:	4698      	mov	r8, r3
 8003a94:	4d4f      	ldr	r5, [pc, #316]	; (8003bd4 <DisplayTopology+0x180>)
		writePxMutex(port, pcUserMessage, strlen(pcUserMessage), cmd50ms, HAL_MAX_DELAY);
 8003a96:	2601      	movs	r6, #1
 8003a98:	4276      	negs	r6, r6
		sprintf(pcUserMessage, "P%d\t", i);
 8003a9a:	0022      	movs	r2, r4
 8003a9c:	4641      	mov	r1, r8
 8003a9e:	0028      	movs	r0, r5
 8003aa0:	f012 fe5c 	bl	801675c <siprintf>
		writePxMutex(port, pcUserMessage, strlen(pcUserMessage), cmd50ms, HAL_MAX_DELAY);
 8003aa4:	0028      	movs	r0, r5
 8003aa6:	f7fc fb37 	bl	8000118 <strlen>
 8003aaa:	b282      	uxth	r2, r0
 8003aac:	9600      	str	r6, [sp, #0]
 8003aae:	2332      	movs	r3, #50	; 0x32
 8003ab0:	0029      	movs	r1, r5
 8003ab2:	0038      	movs	r0, r7
 8003ab4:	f00a f914 	bl	800dce0 <writePxMutex>
	for (uint8_t i=1 ; i<=NumOfPorts ; i++) 
 8003ab8:	3401      	adds	r4, #1
 8003aba:	2c06      	cmp	r4, #6
 8003abc:	d1ed      	bne.n	8003a9a <DisplayTopology+0x46>
	}
	writePxMutex(port, "\n\n\r", 3, cmd50ms, HAL_MAX_DELAY);
 8003abe:	2301      	movs	r3, #1
 8003ac0:	425b      	negs	r3, r3
 8003ac2:	9300      	str	r3, [sp, #0]
 8003ac4:	3333      	adds	r3, #51	; 0x33
 8003ac6:	2203      	movs	r2, #3
 8003ac8:	4945      	ldr	r1, [pc, #276]	; (8003be0 <DisplayTopology+0x18c>)
 8003aca:	0038      	movs	r0, r7
 8003acc:	f00a f908 	bl	800dce0 <writePxMutex>
	
	/* Print each row */
	for(uint8_t row=0 ; row<N ; row++)
 8003ad0:	4b44      	ldr	r3, [pc, #272]	; (8003be4 <DisplayTopology+0x190>)
 8003ad2:	781b      	ldrb	r3, [r3, #0]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d06c      	beq.n	8003bb2 <DisplayTopology+0x15e>
 8003ad8:	2300      	movs	r3, #0
 8003ada:	4699      	mov	r9, r3
	{
		sprintf(pcUserMessage, "Module %d:\t",row+1);
		writePxMutex(port, pcUserMessage, strlen(pcUserMessage), cmd50ms, HAL_MAX_DELAY);
 8003adc:	3b01      	subs	r3, #1
 8003ade:	4698      	mov	r8, r3
		/* Module PN */
		strncpy(pcUserMessage, modulePNstring[(array[row][0])], 5);
 8003ae0:	4b41      	ldr	r3, [pc, #260]	; (8003be8 <DisplayTopology+0x194>)
 8003ae2:	469b      	mov	fp, r3
		for(uint8_t col=1 ; col<=NumOfPorts ; col++)
		{
			if (!array[row][col])
				sprintf(pcUserMessage, "%d\t",0);
			else
				sprintf(pcUserMessage, "%d:%d\t", (array[row][col]>>3), (array[row][col]&0x07) );
 8003ae4:	4b41      	ldr	r3, [pc, #260]	; (8003bec <DisplayTopology+0x198>)
 8003ae6:	469a      	mov	sl, r3
 8003ae8:	e02d      	b.n	8003b46 <DisplayTopology+0xf2>
 8003aea:	2307      	movs	r3, #7
 8003aec:	4013      	ands	r3, r2
 8003aee:	08d2      	lsrs	r2, r2, #3
 8003af0:	4651      	mov	r1, sl
 8003af2:	4838      	ldr	r0, [pc, #224]	; (8003bd4 <DisplayTopology+0x180>)
 8003af4:	f012 fe32 	bl	801675c <siprintf>
			writePxMutex(port, pcUserMessage, strlen(pcUserMessage), cmd50ms, HAL_MAX_DELAY);			
 8003af8:	4d36      	ldr	r5, [pc, #216]	; (8003bd4 <DisplayTopology+0x180>)
 8003afa:	0028      	movs	r0, r5
 8003afc:	f7fc fb0c 	bl	8000118 <strlen>
 8003b00:	b282      	uxth	r2, r0
 8003b02:	4643      	mov	r3, r8
 8003b04:	9300      	str	r3, [sp, #0]
 8003b06:	2332      	movs	r3, #50	; 0x32
 8003b08:	0029      	movs	r1, r5
 8003b0a:	0038      	movs	r0, r7
 8003b0c:	f00a f8e8 	bl	800dce0 <writePxMutex>
		for(uint8_t col=1 ; col<=NumOfPorts ; col++)
 8003b10:	3402      	adds	r4, #2
 8003b12:	42b4      	cmp	r4, r6
 8003b14:	d007      	beq.n	8003b26 <DisplayTopology+0xd2>
			if (!array[row][col])
 8003b16:	8862      	ldrh	r2, [r4, #2]
 8003b18:	2a00      	cmp	r2, #0
 8003b1a:	d1e6      	bne.n	8003aea <DisplayTopology+0x96>
				sprintf(pcUserMessage, "%d\t",0);
 8003b1c:	4934      	ldr	r1, [pc, #208]	; (8003bf0 <DisplayTopology+0x19c>)
 8003b1e:	482d      	ldr	r0, [pc, #180]	; (8003bd4 <DisplayTopology+0x180>)
 8003b20:	f012 fe1c 	bl	801675c <siprintf>
 8003b24:	e7e8      	b.n	8003af8 <DisplayTopology+0xa4>
		}
		writePxMutex(port, "\n\r", 2, cmd50ms, HAL_MAX_DELAY);
 8003b26:	4643      	mov	r3, r8
 8003b28:	9300      	str	r3, [sp, #0]
 8003b2a:	2332      	movs	r3, #50	; 0x32
 8003b2c:	2202      	movs	r2, #2
 8003b2e:	4931      	ldr	r1, [pc, #196]	; (8003bf4 <DisplayTopology+0x1a0>)
 8003b30:	0038      	movs	r0, r7
 8003b32:	f00a f8d5 	bl	800dce0 <writePxMutex>
	for(uint8_t row=0 ; row<N ; row++)
 8003b36:	464b      	mov	r3, r9
 8003b38:	3301      	adds	r3, #1
 8003b3a:	b2db      	uxtb	r3, r3
 8003b3c:	4699      	mov	r9, r3
 8003b3e:	4b29      	ldr	r3, [pc, #164]	; (8003be4 <DisplayTopology+0x190>)
 8003b40:	781b      	ldrb	r3, [r3, #0]
 8003b42:	454b      	cmp	r3, r9
 8003b44:	d935      	bls.n	8003bb2 <DisplayTopology+0x15e>
		sprintf(pcUserMessage, "Module %d:\t",row+1);
 8003b46:	464b      	mov	r3, r9
 8003b48:	1c5a      	adds	r2, r3, #1
 8003b4a:	4c22      	ldr	r4, [pc, #136]	; (8003bd4 <DisplayTopology+0x180>)
 8003b4c:	492a      	ldr	r1, [pc, #168]	; (8003bf8 <DisplayTopology+0x1a4>)
 8003b4e:	0020      	movs	r0, r4
 8003b50:	f012 fe04 	bl	801675c <siprintf>
		writePxMutex(port, pcUserMessage, strlen(pcUserMessage), cmd50ms, HAL_MAX_DELAY);
 8003b54:	0020      	movs	r0, r4
 8003b56:	f7fc fadf 	bl	8000118 <strlen>
 8003b5a:	b282      	uxth	r2, r0
 8003b5c:	4643      	mov	r3, r8
 8003b5e:	9300      	str	r3, [sp, #0]
 8003b60:	2332      	movs	r3, #50	; 0x32
 8003b62:	0021      	movs	r1, r4
 8003b64:	0038      	movs	r0, r7
 8003b66:	f00a f8bb 	bl	800dce0 <writePxMutex>
		strncpy(pcUserMessage, modulePNstring[(array[row][0])], 5);
 8003b6a:	2616      	movs	r6, #22
 8003b6c:	464b      	mov	r3, r9
 8003b6e:	435e      	muls	r6, r3
 8003b70:	465b      	mov	r3, fp
 8003b72:	5af3      	ldrh	r3, [r6, r3]
 8003b74:	0059      	lsls	r1, r3, #1
 8003b76:	18c9      	adds	r1, r1, r3
 8003b78:	0049      	lsls	r1, r1, #1
 8003b7a:	4b20      	ldr	r3, [pc, #128]	; (8003bfc <DisplayTopology+0x1a8>)
 8003b7c:	1859      	adds	r1, r3, r1
 8003b7e:	2205      	movs	r2, #5
 8003b80:	0020      	movs	r0, r4
 8003b82:	f012 fe3f 	bl	8016804 <strncpy>
		writePxMutex(port, pcUserMessage, 5, cmd50ms, HAL_MAX_DELAY);
 8003b86:	4643      	mov	r3, r8
 8003b88:	9300      	str	r3, [sp, #0]
 8003b8a:	2332      	movs	r3, #50	; 0x32
 8003b8c:	2205      	movs	r2, #5
 8003b8e:	0021      	movs	r1, r4
 8003b90:	0038      	movs	r0, r7
 8003b92:	f00a f8a5 	bl	800dce0 <writePxMutex>
		writePxMutex(port, "\t", 1, cmd50ms, HAL_MAX_DELAY);
 8003b96:	4643      	mov	r3, r8
 8003b98:	9300      	str	r3, [sp, #0]
 8003b9a:	2332      	movs	r3, #50	; 0x32
 8003b9c:	2201      	movs	r2, #1
 8003b9e:	4918      	ldr	r1, [pc, #96]	; (8003c00 <DisplayTopology+0x1ac>)
 8003ba0:	0038      	movs	r0, r7
 8003ba2:	f00a f89d 	bl	800dce0 <writePxMutex>
		for(uint8_t col=1 ; col<=NumOfPorts ; col++)
 8003ba6:	465b      	mov	r3, fp
 8003ba8:	18f4      	adds	r4, r6, r3
 8003baa:	4b16      	ldr	r3, [pc, #88]	; (8003c04 <DisplayTopology+0x1b0>)
 8003bac:	469c      	mov	ip, r3
 8003bae:	4466      	add	r6, ip
 8003bb0:	e7b1      	b.n	8003b16 <DisplayTopology+0xc2>
	}
	
	writePxMutex(port, "\n", 1, cmd50ms, HAL_MAX_DELAY);
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	425b      	negs	r3, r3
 8003bb6:	9300      	str	r3, [sp, #0]
 8003bb8:	3333      	adds	r3, #51	; 0x33
 8003bba:	2201      	movs	r2, #1
 8003bbc:	4912      	ldr	r1, [pc, #72]	; (8003c08 <DisplayTopology+0x1b4>)
 8003bbe:	0038      	movs	r0, r7
 8003bc0:	f00a f88e 	bl	800dce0 <writePxMutex>
}
 8003bc4:	b003      	add	sp, #12
 8003bc6:	bcf0      	pop	{r4, r5, r6, r7}
 8003bc8:	46bb      	mov	fp, r7
 8003bca:	46b2      	mov	sl, r6
 8003bcc:	46a9      	mov	r9, r5
 8003bce:	46a0      	mov	r8, r4
 8003bd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003bd2:	46c0      	nop			; (mov r8, r8)
 8003bd4:	20000b30 	.word	0x20000b30
 8003bd8:	08019b68 	.word	0x08019b68
 8003bdc:	08019b7c 	.word	0x08019b7c
 8003be0:	0801a56c 	.word	0x0801a56c
 8003be4:	2000001c 	.word	0x2000001c
 8003be8:	20000560 	.word	0x20000560
 8003bec:	08019b94 	.word	0x08019b94
 8003bf0:	08019b90 	.word	0x08019b90
 8003bf4:	08019ca0 	.word	0x08019ca0
 8003bf8:	08019b84 	.word	0x08019b84
 8003bfc:	0801a018 	.word	0x0801a018
 8003c00:	08019b78 	.word	0x08019b78
 8003c04:	2000056a 	.word	0x2000056a
 8003c08:	0801b8fc 	.word	0x0801b8fc

08003c0c <DisplayPortsDir>:
/*-----------------------------------------------------------*/

/* --- Display ports directions in human-readable format through module port --- 
*/
void DisplayPortsDir(uint8_t port)
{
 8003c0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c0e:	46d6      	mov	lr, sl
 8003c10:	464f      	mov	r7, r9
 8003c12:	4646      	mov	r6, r8
 8003c14:	b5c0      	push	{r6, r7, lr}
 8003c16:	b082      	sub	sp, #8
 8003c18:	4680      	mov	r8, r0
	sprintf(pcUserMessage, "\n\rThese ports are reversed:");
 8003c1a:	4c31      	ldr	r4, [pc, #196]	; (8003ce0 <DisplayPortsDir+0xd4>)
 8003c1c:	4b31      	ldr	r3, [pc, #196]	; (8003ce4 <DisplayPortsDir+0xd8>)
 8003c1e:	0022      	movs	r2, r4
 8003c20:	cb23      	ldmia	r3!, {r0, r1, r5}
 8003c22:	c223      	stmia	r2!, {r0, r1, r5}
 8003c24:	cb23      	ldmia	r3!, {r0, r1, r5}
 8003c26:	c223      	stmia	r2!, {r0, r1, r5}
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	6013      	str	r3, [r2, #0]
	writePxMutex(port, pcUserMessage, strlen(pcUserMessage), cmd50ms, HAL_MAX_DELAY);
 8003c2c:	0020      	movs	r0, r4
 8003c2e:	f7fc fa73 	bl	8000118 <strlen>
 8003c32:	b282      	uxth	r2, r0
 8003c34:	2301      	movs	r3, #1
 8003c36:	425b      	negs	r3, r3
 8003c38:	9300      	str	r3, [sp, #0]
 8003c3a:	3333      	adds	r3, #51	; 0x33
 8003c3c:	0021      	movs	r1, r4
 8003c3e:	4640      	mov	r0, r8
 8003c40:	f00a f84e 	bl	800dce0 <writePxMutex>
	
	for (uint8_t i=1 ; i<=N ; i++) 
 8003c44:	4b28      	ldr	r3, [pc, #160]	; (8003ce8 <DisplayPortsDir+0xdc>)
 8003c46:	781b      	ldrb	r3, [r3, #0]
 8003c48:	2701      	movs	r7, #1
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d02c      	beq.n	8003ca8 <DisplayPortsDir+0x9c>
	{
		for (uint8_t p=1 ; p<=MaxNumOfPorts ; p++) 
		{		
			if ( (arrayPortsDir[i-1] & (0x8000>>(p-1))) ) 			/* Port is reversed */
 8003c4e:	4e27      	ldr	r6, [pc, #156]	; (8003cec <DisplayPortsDir+0xe0>)
			{
				sprintf(pcUserMessage, "\n\rModule %d : P%d", i, p);
 8003c50:	4b27      	ldr	r3, [pc, #156]	; (8003cf0 <DisplayPortsDir+0xe4>)
 8003c52:	4699      	mov	r9, r3
 8003c54:	e024      	b.n	8003ca0 <DisplayPortsDir+0x94>
 8003c56:	4b22      	ldr	r3, [pc, #136]	; (8003ce0 <DisplayPortsDir+0xd4>)
 8003c58:	469a      	mov	sl, r3
 8003c5a:	0023      	movs	r3, r4
 8003c5c:	003a      	movs	r2, r7
 8003c5e:	4649      	mov	r1, r9
 8003c60:	4650      	mov	r0, sl
 8003c62:	f012 fd7b 	bl	801675c <siprintf>
				writePxMutex(port, pcUserMessage, strlen(pcUserMessage), cmd50ms, HAL_MAX_DELAY);
 8003c66:	4650      	mov	r0, sl
 8003c68:	f7fc fa56 	bl	8000118 <strlen>
 8003c6c:	b282      	uxth	r2, r0
 8003c6e:	2301      	movs	r3, #1
 8003c70:	425b      	negs	r3, r3
 8003c72:	9300      	str	r3, [sp, #0]
 8003c74:	3333      	adds	r3, #51	; 0x33
 8003c76:	4651      	mov	r1, sl
 8003c78:	4640      	mov	r0, r8
 8003c7a:	f00a f831 	bl	800dce0 <writePxMutex>
		for (uint8_t p=1 ; p<=MaxNumOfPorts ; p++) 
 8003c7e:	2c0a      	cmp	r4, #10
 8003c80:	d008      	beq.n	8003c94 <DisplayPortsDir+0x88>
			if ( (arrayPortsDir[i-1] & (0x8000>>(p-1))) ) 			/* Port is reversed */
 8003c82:	0021      	movs	r1, r4
 8003c84:	3401      	adds	r4, #1
 8003c86:	5baa      	ldrh	r2, [r5, r6]
 8003c88:	2380      	movs	r3, #128	; 0x80
 8003c8a:	021b      	lsls	r3, r3, #8
 8003c8c:	410b      	asrs	r3, r1
 8003c8e:	4213      	tst	r3, r2
 8003c90:	d0f5      	beq.n	8003c7e <DisplayPortsDir+0x72>
 8003c92:	e7e0      	b.n	8003c56 <DisplayPortsDir+0x4a>
	for (uint8_t i=1 ; i<=N ; i++) 
 8003c94:	3701      	adds	r7, #1
 8003c96:	b2ff      	uxtb	r7, r7
 8003c98:	4b13      	ldr	r3, [pc, #76]	; (8003ce8 <DisplayPortsDir+0xdc>)
 8003c9a:	781b      	ldrb	r3, [r3, #0]
 8003c9c:	42bb      	cmp	r3, r7
 8003c9e:	d303      	bcc.n	8003ca8 <DisplayPortsDir+0x9c>
{
 8003ca0:	2400      	movs	r4, #0
			if ( (arrayPortsDir[i-1] & (0x8000>>(p-1))) ) 			/* Port is reversed */
 8003ca2:	1e7d      	subs	r5, r7, #1
 8003ca4:	006d      	lsls	r5, r5, #1
 8003ca6:	e7ec      	b.n	8003c82 <DisplayPortsDir+0x76>
			}	
		}
	}
	
	sprintf(pcUserMessage, "\n\n\rAll other ports are normal\n\r");
 8003ca8:	4c0d      	ldr	r4, [pc, #52]	; (8003ce0 <DisplayPortsDir+0xd4>)
 8003caa:	4b12      	ldr	r3, [pc, #72]	; (8003cf4 <DisplayPortsDir+0xe8>)
 8003cac:	0022      	movs	r2, r4
 8003cae:	cb23      	ldmia	r3!, {r0, r1, r5}
 8003cb0:	c223      	stmia	r2!, {r0, r1, r5}
 8003cb2:	cb23      	ldmia	r3!, {r0, r1, r5}
 8003cb4:	c223      	stmia	r2!, {r0, r1, r5}
 8003cb6:	cb03      	ldmia	r3!, {r0, r1}
 8003cb8:	c203      	stmia	r2!, {r0, r1}
	writePxMutex(port, pcUserMessage, strlen(pcUserMessage), cmd50ms, HAL_MAX_DELAY);
 8003cba:	0020      	movs	r0, r4
 8003cbc:	f7fc fa2c 	bl	8000118 <strlen>
 8003cc0:	b282      	uxth	r2, r0
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	425b      	negs	r3, r3
 8003cc6:	9300      	str	r3, [sp, #0]
 8003cc8:	3333      	adds	r3, #51	; 0x33
 8003cca:	0021      	movs	r1, r4
 8003ccc:	4640      	mov	r0, r8
 8003cce:	f00a f807 	bl	800dce0 <writePxMutex>
}
 8003cd2:	b002      	add	sp, #8
 8003cd4:	bce0      	pop	{r5, r6, r7}
 8003cd6:	46ba      	mov	sl, r7
 8003cd8:	46b1      	mov	r9, r6
 8003cda:	46a8      	mov	r8, r5
 8003cdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003cde:	46c0      	nop			; (mov r8, r8)
 8003ce0:	20000b30 	.word	0x20000b30
 8003ce4:	08019b9c 	.word	0x08019b9c
 8003ce8:	2000001c 	.word	0x2000001c
 8003cec:	200068e4 	.word	0x200068e4
 8003cf0:	08019bb8 	.word	0x08019bb8
 8003cf4:	08019bcc 	.word	0x08019bcc

08003cf8 <DisplayModuleStatus>:
/*-----------------------------------------------------------*/

/* --- Display a description of current module status (Firmware, Ports, P2P DMAs) --- 
*/
void DisplayModuleStatus(uint8_t port)
{
 8003cf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003cfa:	46d6      	mov	lr, sl
 8003cfc:	464f      	mov	r7, r9
 8003cfe:	4646      	mov	r6, r8
 8003d00:	b5c0      	push	{r6, r7, lr}
 8003d02:	b082      	sub	sp, #8
 8003d04:	4680      	mov	r8, r0
	int8_t *pcOutputString;
	uint16_t temp = 0;
	
	/* Obtain the address of the output buffer. */
	pcOutputString = FreeRTOS_CLIGetOutputBuffer();
 8003d06:	f00a fa3d 	bl	800e184 <FreeRTOS_CLIGetOutputBuffer>
 8003d0a:	0004      	movs	r4, r0
	
	strcpy( (char *) pcOutputString, "");
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	7003      	strb	r3, [r0, #0]
	
	sprintf(pcUserMessage, "\n\r*** Module %d Status ***\n", myID);
 8003d10:	4b91      	ldr	r3, [pc, #580]	; (8003f58 <DisplayModuleStatus+0x260>)
 8003d12:	781a      	ldrb	r2, [r3, #0]
 8003d14:	4d91      	ldr	r5, [pc, #580]	; (8003f5c <DisplayModuleStatus+0x264>)
 8003d16:	4992      	ldr	r1, [pc, #584]	; (8003f60 <DisplayModuleStatus+0x268>)
 8003d18:	0028      	movs	r0, r5
 8003d1a:	f012 fd1f 	bl	801675c <siprintf>
	strcat( (char *) pcOutputString, pcUserMessage);
 8003d1e:	0029      	movs	r1, r5
 8003d20:	0020      	movs	r0, r4
 8003d22:	f012 fd3b 	bl	801679c <strcat>
	sprintf(pcUserMessage, "\n\rConnected via port: P%d\n\r", PcPort);
 8003d26:	4b8f      	ldr	r3, [pc, #572]	; (8003f64 <DisplayModuleStatus+0x26c>)
 8003d28:	781a      	ldrb	r2, [r3, #0]
 8003d2a:	498f      	ldr	r1, [pc, #572]	; (8003f68 <DisplayModuleStatus+0x270>)
 8003d2c:	0028      	movs	r0, r5
 8003d2e:	f012 fd15 	bl	801675c <siprintf>
	strcat( (char *) pcOutputString, pcUserMessage);
 8003d32:	0029      	movs	r1, r5
 8003d34:	0020      	movs	r0, r4
 8003d36:	f012 fd31 	bl	801679c <strcat>
	
	/* Firmware */
	sprintf(pcUserMessage, "\n\rFirmware version: %d.%d.%d", _firmMajor, _firmMinor, _firmPatch);
 8003d3a:	2304      	movs	r3, #4
 8003d3c:	9300      	str	r3, [sp, #0]
 8003d3e:	3b02      	subs	r3, #2
 8003d40:	2200      	movs	r2, #0
 8003d42:	498a      	ldr	r1, [pc, #552]	; (8003f6c <DisplayModuleStatus+0x274>)
 8003d44:	0028      	movs	r0, r5
 8003d46:	f012 fd09 	bl	801675c <siprintf>
	strcat( (char *) pcOutputString, pcUserMessage);
 8003d4a:	0029      	movs	r1, r5
 8003d4c:	0020      	movs	r0, r4
 8003d4e:	f012 fd25 	bl	801679c <strcat>
	sprintf(pcUserMessage, "\n\rFirmware date:    %s", _firmDate);
 8003d52:	4a87      	ldr	r2, [pc, #540]	; (8003f70 <DisplayModuleStatus+0x278>)
 8003d54:	4987      	ldr	r1, [pc, #540]	; (8003f74 <DisplayModuleStatus+0x27c>)
 8003d56:	0028      	movs	r0, r5
 8003d58:	f012 fd00 	bl	801675c <siprintf>
	strcat( (char *) pcOutputString, pcUserMessage);
 8003d5c:	0029      	movs	r1, r5
 8003d5e:	0020      	movs	r0, r4
 8003d60:	f012 fd1c 	bl	801679c <strcat>
	sprintf(pcUserMessage, "\n\rFirmware time:    %s\n\r", _firmTime);
 8003d64:	4a84      	ldr	r2, [pc, #528]	; (8003f78 <DisplayModuleStatus+0x280>)
 8003d66:	4985      	ldr	r1, [pc, #532]	; (8003f7c <DisplayModuleStatus+0x284>)
 8003d68:	0028      	movs	r0, r5
 8003d6a:	f012 fcf7 	bl	801675c <siprintf>
	strcat( (char *) pcOutputString, pcUserMessage);	
 8003d6e:	0029      	movs	r1, r5
 8003d70:	0020      	movs	r0, r4
 8003d72:	f012 fd13 	bl	801679c <strcat>
	
	/* Ports */
	sprintf(pcUserMessage, "\n\rPorts Status:\n\n\r");
 8003d76:	4b82      	ldr	r3, [pc, #520]	; (8003f80 <DisplayModuleStatus+0x288>)
 8003d78:	002a      	movs	r2, r5
 8003d7a:	cb43      	ldmia	r3!, {r0, r1, r6}
 8003d7c:	c243      	stmia	r2!, {r0, r1, r6}
 8003d7e:	6819      	ldr	r1, [r3, #0]
 8003d80:	6011      	str	r1, [r2, #0]
 8003d82:	8899      	ldrh	r1, [r3, #4]
 8003d84:	8091      	strh	r1, [r2, #4]
 8003d86:	799b      	ldrb	r3, [r3, #6]
 8003d88:	7193      	strb	r3, [r2, #6]
	strcat( (char *) pcOutputString, pcUserMessage);
 8003d8a:	0029      	movs	r1, r5
 8003d8c:	0020      	movs	r0, r4
 8003d8e:	f012 fd05 	bl	801679c <strcat>
 8003d92:	2501      	movs	r5, #1
	for(uint8_t i=1 ; i<=NumOfPorts ; i++)
	{
		sprintf(pcUserMessage, "P%d: ", i);
 8003d94:	4b7b      	ldr	r3, [pc, #492]	; (8003f84 <DisplayModuleStatus+0x28c>)
 8003d96:	4699      	mov	r9, r3
 8003d98:	4f70      	ldr	r7, [pc, #448]	; (8003f5c <DisplayModuleStatus+0x264>)
		strcat( (char *) pcOutputString, pcUserMessage);
		switch (portStatus[i])
 8003d9a:	4b7b      	ldr	r3, [pc, #492]	; (8003f88 <DisplayModuleStatus+0x290>)
 8003d9c:	469a      	mov	sl, r3
 8003d9e:	e00e      	b.n	8003dbe <DisplayModuleStatus+0xc6>
		{
				case FREE : 
						sprintf(pcUserMessage, "Free\n\r"); break;
 8003da0:	4b6e      	ldr	r3, [pc, #440]	; (8003f5c <DisplayModuleStatus+0x264>)
 8003da2:	4a7a      	ldr	r2, [pc, #488]	; (8003f8c <DisplayModuleStatus+0x294>)
 8003da4:	6811      	ldr	r1, [r2, #0]
 8003da6:	6019      	str	r1, [r3, #0]
 8003da8:	8891      	ldrh	r1, [r2, #4]
 8003daa:	8099      	strh	r1, [r3, #4]
 8003dac:	7992      	ldrb	r2, [r2, #6]
 8003dae:	719a      	strb	r2, [r3, #6]
				case PORTBUTTON :
						sprintf(pcUserMessage, "Connected to a button/switch\n\r"); break;
				default:
						break;
		}		
		strcat( (char *) pcOutputString, pcUserMessage);
 8003db0:	496a      	ldr	r1, [pc, #424]	; (8003f5c <DisplayModuleStatus+0x264>)
 8003db2:	0020      	movs	r0, r4
 8003db4:	f012 fcf2 	bl	801679c <strcat>
	for(uint8_t i=1 ; i<=NumOfPorts ; i++)
 8003db8:	3501      	adds	r5, #1
 8003dba:	2d06      	cmp	r5, #6
 8003dbc:	d039      	beq.n	8003e32 <DisplayModuleStatus+0x13a>
		sprintf(pcUserMessage, "P%d: ", i);
 8003dbe:	002a      	movs	r2, r5
 8003dc0:	4649      	mov	r1, r9
 8003dc2:	0038      	movs	r0, r7
 8003dc4:	f012 fcca 	bl	801675c <siprintf>
		strcat( (char *) pcOutputString, pcUserMessage);
 8003dc8:	0039      	movs	r1, r7
 8003dca:	0020      	movs	r0, r4
 8003dcc:	f012 fce6 	bl	801679c <strcat>
		switch (portStatus[i])
 8003dd0:	4653      	mov	r3, sl
 8003dd2:	5ceb      	ldrb	r3, [r5, r3]
 8003dd4:	2b04      	cmp	r3, #4
 8003dd6:	d8eb      	bhi.n	8003db0 <DisplayModuleStatus+0xb8>
 8003dd8:	4653      	mov	r3, sl
 8003dda:	5ceb      	ldrb	r3, [r5, r3]
 8003ddc:	009b      	lsls	r3, r3, #2
 8003dde:	4a6c      	ldr	r2, [pc, #432]	; (8003f90 <DisplayModuleStatus+0x298>)
 8003de0:	58d3      	ldr	r3, [r2, r3]
 8003de2:	469f      	mov	pc, r3
						sprintf(pcUserMessage, "Receiving messages\n\r"); break;
 8003de4:	495d      	ldr	r1, [pc, #372]	; (8003f5c <DisplayModuleStatus+0x264>)
 8003de6:	4b6b      	ldr	r3, [pc, #428]	; (8003f94 <DisplayModuleStatus+0x29c>)
 8003de8:	000a      	movs	r2, r1
 8003dea:	cb43      	ldmia	r3!, {r0, r1, r6}
 8003dec:	c243      	stmia	r2!, {r0, r1, r6}
 8003dee:	cb03      	ldmia	r3!, {r0, r1}
 8003df0:	c203      	stmia	r2!, {r0, r1}
 8003df2:	781b      	ldrb	r3, [r3, #0]
 8003df4:	7013      	strb	r3, [r2, #0]
 8003df6:	e7db      	b.n	8003db0 <DisplayModuleStatus+0xb8>
						sprintf(pcUserMessage, "Streaming\n\r"); break;
 8003df8:	4a58      	ldr	r2, [pc, #352]	; (8003f5c <DisplayModuleStatus+0x264>)
 8003dfa:	4b67      	ldr	r3, [pc, #412]	; (8003f98 <DisplayModuleStatus+0x2a0>)
 8003dfc:	cb43      	ldmia	r3!, {r0, r1, r6}
 8003dfe:	c243      	stmia	r2!, {r0, r1, r6}
 8003e00:	e7d6      	b.n	8003db0 <DisplayModuleStatus+0xb8>
						sprintf(pcUserMessage, "Receiving user commands\n\r"); break;
 8003e02:	4956      	ldr	r1, [pc, #344]	; (8003f5c <DisplayModuleStatus+0x264>)
 8003e04:	4b65      	ldr	r3, [pc, #404]	; (8003f9c <DisplayModuleStatus+0x2a4>)
 8003e06:	000a      	movs	r2, r1
 8003e08:	cb43      	ldmia	r3!, {r0, r1, r6}
 8003e0a:	c243      	stmia	r2!, {r0, r1, r6}
 8003e0c:	cb43      	ldmia	r3!, {r0, r1, r6}
 8003e0e:	c243      	stmia	r2!, {r0, r1, r6}
 8003e10:	881b      	ldrh	r3, [r3, #0]
 8003e12:	8013      	strh	r3, [r2, #0]
 8003e14:	e7cc      	b.n	8003db0 <DisplayModuleStatus+0xb8>
						sprintf(pcUserMessage, "Connected to a button/switch\n\r"); break;
 8003e16:	4951      	ldr	r1, [pc, #324]	; (8003f5c <DisplayModuleStatus+0x264>)
 8003e18:	4b61      	ldr	r3, [pc, #388]	; (8003fa0 <DisplayModuleStatus+0x2a8>)
 8003e1a:	000a      	movs	r2, r1
 8003e1c:	cb43      	ldmia	r3!, {r0, r1, r6}
 8003e1e:	c243      	stmia	r2!, {r0, r1, r6}
 8003e20:	cb43      	ldmia	r3!, {r0, r1, r6}
 8003e22:	c243      	stmia	r2!, {r0, r1, r6}
 8003e24:	6819      	ldr	r1, [r3, #0]
 8003e26:	6011      	str	r1, [r2, #0]
 8003e28:	8899      	ldrh	r1, [r3, #4]
 8003e2a:	8091      	strh	r1, [r2, #4]
 8003e2c:	799b      	ldrb	r3, [r3, #6]
 8003e2e:	7193      	strb	r3, [r2, #6]
 8003e30:	e7be      	b.n	8003db0 <DisplayModuleStatus+0xb8>
	}	

	/* P2P DMAs */
	sprintf(pcUserMessage, "\n\rDMA Streams Status:\n\r");
 8003e32:	494a      	ldr	r1, [pc, #296]	; (8003f5c <DisplayModuleStatus+0x264>)
 8003e34:	4b5b      	ldr	r3, [pc, #364]	; (8003fa4 <DisplayModuleStatus+0x2ac>)
 8003e36:	000a      	movs	r2, r1
 8003e38:	cb61      	ldmia	r3!, {r0, r5, r6}
 8003e3a:	c261      	stmia	r2!, {r0, r5, r6}
 8003e3c:	cb61      	ldmia	r3!, {r0, r5, r6}
 8003e3e:	c261      	stmia	r2!, {r0, r5, r6}
	strcat( (char *) pcOutputString, pcUserMessage);	
 8003e40:	0020      	movs	r0, r4
 8003e42:	f012 fcab 	bl	801679c <strcat>
	for (char i=1 ; i<=6 ; i++) {
 8003e46:	4e58      	ldr	r6, [pc, #352]	; (8003fa8 <DisplayModuleStatus+0x2b0>)
	strcat( (char *) pcOutputString, pcUserMessage);	
 8003e48:	2701      	movs	r7, #1
		if (streamDMA[i-1].Instance == 0) {
				sprintf(pcUserMessage, "\n\rStreaming DMA %d is free", i);
				strcat( (char *) pcOutputString, pcUserMessage);
		} else {
				sprintf(pcUserMessage, "\n\rStreaming DMA %d is streaming from P%d to P%d", i, GetPort(streamDMA[i-1].Parent), GetPort(dmaStreamDst[i-1]));
 8003e4a:	4d44      	ldr	r5, [pc, #272]	; (8003f5c <DisplayModuleStatus+0x264>)
 8003e4c:	e00e      	b.n	8003e6c <DisplayModuleStatus+0x174>
				sprintf(pcUserMessage, "\n\rStreaming DMA %d is free", i);
 8003e4e:	4b43      	ldr	r3, [pc, #268]	; (8003f5c <DisplayModuleStatus+0x264>)
 8003e50:	469a      	mov	sl, r3
 8003e52:	003a      	movs	r2, r7
 8003e54:	4955      	ldr	r1, [pc, #340]	; (8003fac <DisplayModuleStatus+0x2b4>)
 8003e56:	0018      	movs	r0, r3
 8003e58:	f012 fc80 	bl	801675c <siprintf>
				strcat( (char *) pcOutputString, pcUserMessage);
 8003e5c:	4651      	mov	r1, sl
 8003e5e:	0020      	movs	r0, r4
 8003e60:	f012 fc9c 	bl	801679c <strcat>
	for (char i=1 ; i<=6 ; i++) {
 8003e64:	3701      	adds	r7, #1
 8003e66:	3638      	adds	r6, #56	; 0x38
 8003e68:	2f07      	cmp	r7, #7
 8003e6a:	d017      	beq.n	8003e9c <DisplayModuleStatus+0x1a4>
		if (streamDMA[i-1].Instance == 0) {
 8003e6c:	6833      	ldr	r3, [r6, #0]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d0ed      	beq.n	8003e4e <DisplayModuleStatus+0x156>
				sprintf(pcUserMessage, "\n\rStreaming DMA %d is streaming from P%d to P%d", i, GetPort(streamDMA[i-1].Parent), GetPort(dmaStreamDst[i-1]));
 8003e72:	6a70      	ldr	r0, [r6, #36]	; 0x24
 8003e74:	f007 fbb8 	bl	800b5e8 <GetPort>
 8003e78:	4682      	mov	sl, r0
 8003e7a:	00bb      	lsls	r3, r7, #2
 8003e7c:	4a4c      	ldr	r2, [pc, #304]	; (8003fb0 <DisplayModuleStatus+0x2b8>)
 8003e7e:	58d0      	ldr	r0, [r2, r3]
 8003e80:	f007 fbb2 	bl	800b5e8 <GetPort>
 8003e84:	9000      	str	r0, [sp, #0]
 8003e86:	4653      	mov	r3, sl
 8003e88:	003a      	movs	r2, r7
 8003e8a:	494a      	ldr	r1, [pc, #296]	; (8003fb4 <DisplayModuleStatus+0x2bc>)
 8003e8c:	0028      	movs	r0, r5
 8003e8e:	f012 fc65 	bl	801675c <siprintf>
				strcat( (char *) pcOutputString, pcUserMessage);
 8003e92:	0029      	movs	r1, r5
 8003e94:	0020      	movs	r0, r4
 8003e96:	f012 fc81 	bl	801679c <strcat>
 8003e9a:	e7e3      	b.n	8003e64 <DisplayModuleStatus+0x16c>
		}
	}
	strcat( (char *) pcOutputString, "\n\r");
 8003e9c:	0020      	movs	r0, r4
 8003e9e:	f7fc f93b 	bl	8000118 <strlen>
 8003ea2:	1820      	adds	r0, r4, r0
 8003ea4:	2203      	movs	r2, #3
 8003ea6:	4944      	ldr	r1, [pc, #272]	; (8003fb8 <DisplayModuleStatus+0x2c0>)
 8003ea8:	f012 fb44 	bl	8016534 <memcpy>
	
	/* Ports direction */
	strcat( (char *) pcOutputString, "\n\rThese ports are reversed: ");
 8003eac:	0020      	movs	r0, r4
 8003eae:	f7fc f933 	bl	8000118 <strlen>
 8003eb2:	1820      	adds	r0, r4, r0
 8003eb4:	221d      	movs	r2, #29
 8003eb6:	4941      	ldr	r1, [pc, #260]	; (8003fbc <DisplayModuleStatus+0x2c4>)
 8003eb8:	f012 fb3c 	bl	8016534 <memcpy>
	temp = strlen( (char *) pcOutputString);
 8003ebc:	0020      	movs	r0, r4
 8003ebe:	f7fc f92b 	bl	8000118 <strlen>
 8003ec2:	4681      	mov	r9, r0
 8003ec4:	2500      	movs	r5, #0
	for (uint8_t p=1 ; p<=NumOfPorts ; p++) 
	{		
		if ( (arrayPortsDir[myID-1] & (0x8000>>(p-1))) ) 			/* Port is reversed */
 8003ec6:	4e3e      	ldr	r6, [pc, #248]	; (8003fc0 <DisplayModuleStatus+0x2c8>)
 8003ec8:	4f23      	ldr	r7, [pc, #140]	; (8003f58 <DisplayModuleStatus+0x260>)
 8003eca:	e00c      	b.n	8003ee6 <DisplayModuleStatus+0x1ee>
		{
			sprintf(pcUserMessage, "P%d ", p);
 8003ecc:	4b23      	ldr	r3, [pc, #140]	; (8003f5c <DisplayModuleStatus+0x264>)
 8003ece:	469a      	mov	sl, r3
 8003ed0:	002a      	movs	r2, r5
 8003ed2:	493c      	ldr	r1, [pc, #240]	; (8003fc4 <DisplayModuleStatus+0x2cc>)
 8003ed4:	0018      	movs	r0, r3
 8003ed6:	f012 fc41 	bl	801675c <siprintf>
			strcat( (char *) pcOutputString, pcUserMessage);
 8003eda:	4651      	mov	r1, sl
 8003edc:	0020      	movs	r0, r4
 8003ede:	f012 fc5d 	bl	801679c <strcat>
	for (uint8_t p=1 ; p<=NumOfPorts ; p++) 
 8003ee2:	2d05      	cmp	r5, #5
 8003ee4:	d00b      	beq.n	8003efe <DisplayModuleStatus+0x206>
		if ( (arrayPortsDir[myID-1] & (0x8000>>(p-1))) ) 			/* Port is reversed */
 8003ee6:	0029      	movs	r1, r5
 8003ee8:	3501      	adds	r5, #1
 8003eea:	783b      	ldrb	r3, [r7, #0]
 8003eec:	3b01      	subs	r3, #1
 8003eee:	005b      	lsls	r3, r3, #1
 8003ef0:	5b9a      	ldrh	r2, [r3, r6]
 8003ef2:	2380      	movs	r3, #128	; 0x80
 8003ef4:	021b      	lsls	r3, r3, #8
 8003ef6:	410b      	asrs	r3, r1
 8003ef8:	4213      	tst	r3, r2
 8003efa:	d0f2      	beq.n	8003ee2 <DisplayModuleStatus+0x1ea>
 8003efc:	e7e6      	b.n	8003ecc <DisplayModuleStatus+0x1d4>
		}	
	}
	if (temp == strlen( (char *) pcOutputString)) {				/* All ports are normal */
 8003efe:	0020      	movs	r0, r4
 8003f00:	f7fc f90a 	bl	8000118 <strlen>
 8003f04:	464b      	mov	r3, r9
 8003f06:	041e      	lsls	r6, r3, #16
 8003f08:	0c36      	lsrs	r6, r6, #16
 8003f0a:	42b0      	cmp	r0, r6
 8003f0c:	d010      	beq.n	8003f30 <DisplayModuleStatus+0x238>
		strcat( (char *) pcOutputString, "None");
	}
	strcat( (char *) pcOutputString, "\n\r");
 8003f0e:	0020      	movs	r0, r4
 8003f10:	f7fc f902 	bl	8000118 <strlen>
 8003f14:	1820      	adds	r0, r4, r0
 8003f16:	2203      	movs	r2, #3
 8003f18:	4927      	ldr	r1, [pc, #156]	; (8003fb8 <DisplayModuleStatus+0x2c0>)
 8003f1a:	f012 fb0b 	bl	8016534 <memcpy>
	
	/* Display output */
	if (port)
 8003f1e:	4643      	mov	r3, r8
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d10b      	bne.n	8003f3c <DisplayModuleStatus+0x244>
		writePxMutex(port, (char *) pcOutputString, strlen( (char *) pcOutputString), cmd50ms, HAL_MAX_DELAY);
	
}
 8003f24:	b002      	add	sp, #8
 8003f26:	bce0      	pop	{r5, r6, r7}
 8003f28:	46ba      	mov	sl, r7
 8003f2a:	46b1      	mov	r9, r6
 8003f2c:	46a8      	mov	r8, r5
 8003f2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		strcat( (char *) pcOutputString, "None");
 8003f30:	1820      	adds	r0, r4, r0
 8003f32:	2205      	movs	r2, #5
 8003f34:	4924      	ldr	r1, [pc, #144]	; (8003fc8 <DisplayModuleStatus+0x2d0>)
 8003f36:	f012 fafd 	bl	8016534 <memcpy>
 8003f3a:	e7e8      	b.n	8003f0e <DisplayModuleStatus+0x216>
		writePxMutex(port, (char *) pcOutputString, strlen( (char *) pcOutputString), cmd50ms, HAL_MAX_DELAY);
 8003f3c:	0020      	movs	r0, r4
 8003f3e:	f7fc f8eb 	bl	8000118 <strlen>
 8003f42:	b282      	uxth	r2, r0
 8003f44:	2301      	movs	r3, #1
 8003f46:	425b      	negs	r3, r3
 8003f48:	9300      	str	r3, [sp, #0]
 8003f4a:	3333      	adds	r3, #51	; 0x33
 8003f4c:	0021      	movs	r1, r4
 8003f4e:	4640      	mov	r0, r8
 8003f50:	f009 fec6 	bl	800dce0 <writePxMutex>
}
 8003f54:	e7e6      	b.n	8003f24 <DisplayModuleStatus+0x22c>
 8003f56:	46c0      	nop			; (mov r8, r8)
 8003f58:	20000b04 	.word	0x20000b04
 8003f5c:	20000b30 	.word	0x20000b30
 8003f60:	08019bec 	.word	0x08019bec
 8003f64:	2000055f 	.word	0x2000055f
 8003f68:	08019c08 	.word	0x08019c08
 8003f6c:	08019c24 	.word	0x08019c24
 8003f70:	08019c44 	.word	0x08019c44
 8003f74:	08019c50 	.word	0x08019c50
 8003f78:	08019c68 	.word	0x08019c68
 8003f7c:	08019c74 	.word	0x08019c74
 8003f80:	08019c90 	.word	0x08019c90
 8003f84:	08019ca4 	.word	0x08019ca4
 8003f88:	20000b80 	.word	0x20000b80
 8003f8c:	08019cac 	.word	0x08019cac
 8003f90:	08019da8 	.word	0x08019da8
 8003f94:	08019cb4 	.word	0x08019cb4
 8003f98:	08019ccc 	.word	0x08019ccc
 8003f9c:	08019cd8 	.word	0x08019cd8
 8003fa0:	08019cf4 	.word	0x08019cf4
 8003fa4:	08019d14 	.word	0x08019d14
 8003fa8:	20001364 	.word	0x20001364
 8003fac:	08019d2c 	.word	0x08019d2c
 8003fb0:	20000ee4 	.word	0x20000ee4
 8003fb4:	08019d48 	.word	0x08019d48
 8003fb8:	08019ca0 	.word	0x08019ca0
 8003fbc:	08019d78 	.word	0x08019d78
 8003fc0:	200068e4 	.word	0x200068e4
 8003fc4:	08019d98 	.word	0x08019d98
 8003fc8:	08019da0 	.word	0x08019da0

08003fcc <GetID>:
/*-----------------------------------------------------------*/

/* --- Extract module ID from it's alias, ID string or keyword --- 
*/
int16_t GetID(char* string)
{
 8003fcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003fce:	46c6      	mov	lr, r8
 8003fd0:	b500      	push	{lr}
 8003fd2:	0006      	movs	r6, r0
	uint8_t id = 0, i = 0;
	
	if(!strcmp(string, "me"))							/* Check keywords */
 8003fd4:	4929      	ldr	r1, [pc, #164]	; (800407c <GetID+0xb0>)
 8003fd6:	f7fc f895 	bl	8000104 <strcmp>
 8003fda:	2800      	cmp	r0, #0
 8003fdc:	d010      	beq.n	8004000 <GetID+0x34>
		return myID;
	else if(!strcmp(string, "all"))							
 8003fde:	4928      	ldr	r1, [pc, #160]	; (8004080 <GetID+0xb4>)
 8003fe0:	0030      	movs	r0, r6
 8003fe2:	f7fc f88f 	bl	8000104 <strcmp>
 8003fe6:	2800      	cmp	r0, #0
 8003fe8:	d045      	beq.n	8004076 <GetID+0xaa>
		return BOS_BROADCAST;				
	else if (string[0] == '#') 						/* Check IDs */
 8003fea:	7833      	ldrb	r3, [r6, #0]
 8003fec:	4698      	mov	r8, r3
 8003fee:	2b23      	cmp	r3, #35	; 0x23
 8003ff0:	d00b      	beq.n	800400a <GetID+0x3e>
			return BOS_ERR_WrongID;				
	} 
	else 																	/* Check alias */
	{															
		/* Check module alias */
		for (i=0 ; i<N ; i++) {
 8003ff2:	4b24      	ldr	r3, [pc, #144]	; (8004084 <GetID+0xb8>)
 8003ff4:	781f      	ldrb	r7, [r3, #0]
 8003ff6:	2f00      	cmp	r7, #0
 8003ff8:	d02a      	beq.n	8004050 <GetID+0x84>
 8003ffa:	4d23      	ldr	r5, [pc, #140]	; (8004088 <GetID+0xbc>)
 8003ffc:	2400      	movs	r4, #0
 8003ffe:	e01c      	b.n	800403a <GetID+0x6e>
		return myID;
 8004000:	4b22      	ldr	r3, [pc, #136]	; (800408c <GetID+0xc0>)
 8004002:	7818      	ldrb	r0, [r3, #0]
		}			
		
		return BOS_ERR_WrongName;			
	}
	
}
 8004004:	bc80      	pop	{r7}
 8004006:	46b8      	mov	r8, r7
 8004008:	bdf0      	pop	{r4, r5, r6, r7, pc}
		id = atol(string+1);
 800400a:	1c70      	adds	r0, r6, #1
 800400c:	f012 fa45 	bl	801649a <atol>
 8004010:	b2c3      	uxtb	r3, r0
		if (id > 0 && id <= N)
 8004012:	2b00      	cmp	r3, #0
 8004014:	d003      	beq.n	800401e <GetID+0x52>
 8004016:	4a1b      	ldr	r2, [pc, #108]	; (8004084 <GetID+0xb8>)
 8004018:	7812      	ldrb	r2, [r2, #0]
 800401a:	429a      	cmp	r2, r3
 800401c:	d206      	bcs.n	800402c <GetID+0x60>
		else if (id == myID)
 800401e:	4a1b      	ldr	r2, [pc, #108]	; (800408c <GetID+0xc0>)
 8004020:	7812      	ldrb	r2, [r2, #0]
			return BOS_ERR_WrongID;				
 8004022:	2066      	movs	r0, #102	; 0x66
		else if (id == myID)
 8004024:	429a      	cmp	r2, r3
 8004026:	d1ed      	bne.n	8004004 <GetID+0x38>
			return myID;
 8004028:	b218      	sxth	r0, r3
 800402a:	e7eb      	b.n	8004004 <GetID+0x38>
			return id;
 800402c:	b218      	sxth	r0, r3
 800402e:	e7e9      	b.n	8004004 <GetID+0x38>
		for (i=0 ; i<N ; i++) {
 8004030:	3401      	adds	r4, #1
 8004032:	b2e4      	uxtb	r4, r4
 8004034:	350a      	adds	r5, #10
 8004036:	42bc      	cmp	r4, r7
 8004038:	d00a      	beq.n	8004050 <GetID+0x84>
			if(!strcmp(string, moduleAlias[i]) && (*string != 0))	return (i);	
 800403a:	0029      	movs	r1, r5
 800403c:	0030      	movs	r0, r6
 800403e:	f7fc f861 	bl	8000104 <strcmp>
 8004042:	2800      	cmp	r0, #0
 8004044:	d1f4      	bne.n	8004030 <GetID+0x64>
 8004046:	4643      	mov	r3, r8
 8004048:	2b00      	cmp	r3, #0
 800404a:	d0f1      	beq.n	8004030 <GetID+0x64>
 800404c:	b220      	sxth	r0, r4
 800404e:	e7d9      	b.n	8004004 <GetID+0x38>
 8004050:	4f0f      	ldr	r7, [pc, #60]	; (8004090 <GetID+0xc4>)
		for (i=0 ; i<N ; i++) {
 8004052:	2500      	movs	r5, #0
			if (!strcmp(string, groupAlias[i]))	return (BOS_MULTICAST|(i<<8));
 8004054:	0039      	movs	r1, r7
 8004056:	0030      	movs	r0, r6
 8004058:	f7fc f854 	bl	8000104 <strcmp>
 800405c:	2800      	cmp	r0, #0
 800405e:	d005      	beq.n	800406c <GetID+0xa0>
		for(i=0 ; i<MaxNumOfGroups ; i++) {
 8004060:	3501      	adds	r5, #1
 8004062:	370a      	adds	r7, #10
 8004064:	2d0a      	cmp	r5, #10
 8004066:	d1f5      	bne.n	8004054 <GetID+0x88>
		return BOS_ERR_WrongName;			
 8004068:	2064      	movs	r0, #100	; 0x64
 800406a:	e7cb      	b.n	8004004 <GetID+0x38>
			if (!strcmp(string, groupAlias[i]))	return (BOS_MULTICAST|(i<<8));
 800406c:	022c      	lsls	r4, r5, #8
 800406e:	20fe      	movs	r0, #254	; 0xfe
 8004070:	4320      	orrs	r0, r4
 8004072:	b200      	sxth	r0, r0
 8004074:	e7c6      	b.n	8004004 <GetID+0x38>
		return BOS_BROADCAST;				
 8004076:	20ff      	movs	r0, #255	; 0xff
 8004078:	e7c4      	b.n	8004004 <GetID+0x38>
 800407a:	46c0      	nop			; (mov r8, r8)
 800407c:	08019dbc 	.word	0x08019dbc
 8004080:	08019dc0 	.word	0x08019dc0
 8004084:	2000001c 	.word	0x2000001c
 8004088:	20000a00 	.word	0x20000a00
 800408c:	20000b04 	.word	0x20000b04
 8004090:	200008f4 	.word	0x200008f4

08004094 <NameModule>:
/*-----------------------------------------------------------*/

/* --- Name a module with an alias --- 
*/
BOS_Status NameModule(uint8_t module, char* alias)
{
 8004094:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004096:	b083      	sub	sp, #12
 8004098:	9001      	str	r0, [sp, #4]
 800409a:	000e      	movs	r6, r1
	static const CLI_Definition_List_Item_t *pxCommand = NULL;
	const int8_t *pcRegisteredCommandString;
	size_t xCommandStringLength;

	/* 1. Check module alias with keywords */
	for(i=0 ; i<NumOfKeywords ; i++)
 800409c:	4c28      	ldr	r4, [pc, #160]	; (8004140 <NameModule+0xac>)
 800409e:	0025      	movs	r5, r4
 80040a0:	3510      	adds	r5, #16
	{
		if (!strcmp(alias, BOSkeywords[i]))	
 80040a2:	0021      	movs	r1, r4
 80040a4:	0030      	movs	r0, r6
 80040a6:	f7fc f82d 	bl	8000104 <strcmp>
 80040aa:	2800      	cmp	r0, #0
 80040ac:	d03f      	beq.n	800412e <NameModule+0x9a>
	for(i=0 ; i<NumOfKeywords ; i++)
 80040ae:	3404      	adds	r4, #4
 80040b0:	42ac      	cmp	r4, r5
 80040b2:	d1f6      	bne.n	80040a2 <NameModule+0xe>
			return BOS_ERR_Keyword;
	}
	
	/* 2. Check module alias with other module aliases */
	for(i=1 ; i<N ; i++)
 80040b4:	4b23      	ldr	r3, [pc, #140]	; (8004144 <NameModule+0xb0>)
 80040b6:	781f      	ldrb	r7, [r3, #0]
 80040b8:	2f01      	cmp	r7, #1
 80040ba:	dd0b      	ble.n	80040d4 <NameModule+0x40>
 80040bc:	4c22      	ldr	r4, [pc, #136]	; (8004148 <NameModule+0xb4>)
 80040be:	2501      	movs	r5, #1
	{
		if (!strcmp(alias, moduleAlias[i]))	
 80040c0:	0021      	movs	r1, r4
 80040c2:	0030      	movs	r0, r6
 80040c4:	f7fc f81e 	bl	8000104 <strcmp>
 80040c8:	2800      	cmp	r0, #0
 80040ca:	d032      	beq.n	8004132 <NameModule+0x9e>
	for(i=1 ; i<N ; i++)
 80040cc:	3501      	adds	r5, #1
 80040ce:	340a      	adds	r4, #10
 80040d0:	42bd      	cmp	r5, r7
 80040d2:	dbf5      	blt.n	80040c0 <NameModule+0x2c>
 80040d4:	4c1d      	ldr	r4, [pc, #116]	; (800414c <NameModule+0xb8>)
 80040d6:	0025      	movs	r5, r4
 80040d8:	3564      	adds	r5, #100	; 0x64
	}

	/* 3. Check module alias with group aliases */
	for(i=0 ; i<MaxNumOfGroups ; i++)
	{
		if (!strcmp(alias, groupAlias[i]))	
 80040da:	0021      	movs	r1, r4
 80040dc:	0030      	movs	r0, r6
 80040de:	f7fc f811 	bl	8000104 <strcmp>
 80040e2:	2800      	cmp	r0, #0
 80040e4:	d028      	beq.n	8004138 <NameModule+0xa4>
	for(i=0 ; i<MaxNumOfGroups ; i++)
 80040e6:	340a      	adds	r4, #10
 80040e8:	42ac      	cmp	r4, r5
 80040ea:	d1f6      	bne.n	80040da <NameModule+0x46>
			return BOS_ERR_ExistingAlias;
	}
	
	/* 4. Check alias with BOS and module commands */
	for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 80040ec:	4c18      	ldr	r4, [pc, #96]	; (8004150 <NameModule+0xbc>)
 80040ee:	4b19      	ldr	r3, [pc, #100]	; (8004154 <NameModule+0xc0>)
 80040f0:	601c      	str	r4, [r3, #0]
 80040f2:	001f      	movs	r7, r3
	{
		pcRegisteredCommandString = pxCommand->pxCommandLineDefinition->pcCommand;
 80040f4:	6823      	ldr	r3, [r4, #0]
 80040f6:	681d      	ldr	r5, [r3, #0]
		xCommandStringLength = strlen( ( const char * ) pcRegisteredCommandString );
 80040f8:	0028      	movs	r0, r5
 80040fa:	f7fc f80d 	bl	8000118 <strlen>
 80040fe:	0002      	movs	r2, r0
		
		if( !strncmp(alias, (const char *) pcRegisteredCommandString, xCommandStringLength ) ) {
 8004100:	0029      	movs	r1, r5
 8004102:	0030      	movs	r0, r6
 8004104:	f012 fb6d 	bl	80167e2 <strncmp>
 8004108:	2800      	cmp	r0, #0
 800410a:	d017      	beq.n	800413c <NameModule+0xa8>
	for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 800410c:	6864      	ldr	r4, [r4, #4]
 800410e:	603c      	str	r4, [r7, #0]
 8004110:	2c00      	cmp	r4, #0
 8004112:	d1ef      	bne.n	80040f4 <NameModule+0x60>
			return BOS_ERR_ExistingCmd;
		}
	}
	
	/* 5. Module alias is unique */
	strcpy(moduleAlias[module], alias);
 8004114:	9b01      	ldr	r3, [sp, #4]
 8004116:	0098      	lsls	r0, r3, #2
 8004118:	469c      	mov	ip, r3
 800411a:	4460      	add	r0, ip
 800411c:	0040      	lsls	r0, r0, #1
 800411e:	4f0e      	ldr	r7, [pc, #56]	; (8004158 <NameModule+0xc4>)
 8004120:	19c0      	adds	r0, r0, r7
 8004122:	0031      	movs	r1, r6
 8004124:	f012 fb55 	bl	80167d2 <strcpy>
	
	/* 6. Share new module alias with other modules */
	
	
	/* 7. Save new alias to emulated EEPROM */
	result = SaveEEalias();
 8004128:	f7fe fe88 	bl	8002e3c <SaveEEalias>
	
	return result;
 800412c:	e002      	b.n	8004134 <NameModule+0xa0>
			return BOS_ERR_Keyword;
 800412e:	2006      	movs	r0, #6
 8004130:	e000      	b.n	8004134 <NameModule+0xa0>
			return BOS_ERR_ExistingAlias;
 8004132:	2007      	movs	r0, #7
}
 8004134:	b003      	add	sp, #12
 8004136:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return BOS_ERR_ExistingAlias;
 8004138:	2007      	movs	r0, #7
 800413a:	e7fb      	b.n	8004134 <NameModule+0xa0>
			return BOS_ERR_ExistingCmd;
 800413c:	2008      	movs	r0, #8
 800413e:	e7f9      	b.n	8004134 <NameModule+0xa0>
 8004140:	08019ff4 	.word	0x08019ff4
 8004144:	2000001c 	.word	0x2000001c
 8004148:	20000a0a 	.word	0x20000a0a
 800414c:	200008f4 	.word	0x200008f4
 8004150:	2000009c 	.word	0x2000009c
 8004154:	20000b88 	.word	0x20000b88
 8004158:	20000a00 	.word	0x20000a00

0800415c <AddModuleToGroup>:
/*-----------------------------------------------------------*/

/* --- Add a module to this group --- 
*/
BOS_Status AddModuleToGroup(uint8_t module, char* group)
{
 800415c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800415e:	46ce      	mov	lr, r9
 8004160:	b500      	push	{lr}
 8004162:	b082      	sub	sp, #8
 8004164:	9001      	str	r0, [sp, #4]
 8004166:	000e      	movs	r6, r1
	const int8_t *pcRegisteredCommandString;
	size_t xCommandStringLength;

	/* Check alias with other group aliases */
	
	for(i=0 ; i<MaxNumOfGroups ; i++)
 8004168:	4f36      	ldr	r7, [pc, #216]	; (8004244 <AddModuleToGroup+0xe8>)
{
 800416a:	003d      	movs	r5, r7
	for(i=0 ; i<MaxNumOfGroups ; i++)
 800416c:	2400      	movs	r4, #0
	{
		/* This group already exists */
		if (!strcmp(group, groupAlias[i]))	
 800416e:	0029      	movs	r1, r5
 8004170:	0030      	movs	r0, r6
 8004172:	f7fb ffc7 	bl	8000104 <strcmp>
 8004176:	2800      	cmp	r0, #0
 8004178:	d047      	beq.n	800420a <AddModuleToGroup+0xae>
	for(i=0 ; i<MaxNumOfGroups ; i++)
 800417a:	3401      	adds	r4, #1
 800417c:	350a      	adds	r5, #10
 800417e:	2c0a      	cmp	r4, #10
 8004180:	d1f5      	bne.n	800416e <AddModuleToGroup+0x12>
 8004182:	4c31      	ldr	r4, [pc, #196]	; (8004248 <AddModuleToGroup+0xec>)
 8004184:	0025      	movs	r5, r4
 8004186:	3510      	adds	r5, #16
	/* This is a new group - Verify alias and create the group */
	
	/* 1. Check group alias with keywords */
	for(j=0 ; j<NumOfKeywords ; j++)
	{
		if (!strcmp(group, BOSkeywords[j]))	
 8004188:	0021      	movs	r1, r4
 800418a:	0030      	movs	r0, r6
 800418c:	f7fb ffba 	bl	8000104 <strcmp>
 8004190:	2800      	cmp	r0, #0
 8004192:	d050      	beq.n	8004236 <AddModuleToGroup+0xda>
	for(j=0 ; j<NumOfKeywords ; j++)
 8004194:	3404      	adds	r4, #4
 8004196:	42ac      	cmp	r4, r5
 8004198:	d1f6      	bne.n	8004188 <AddModuleToGroup+0x2c>
			return BOS_ERR_Keyword;
	}	

	/* 2. Check group alias with module aliases */
	for(j=1 ; j<N ; j++)
 800419a:	4b2c      	ldr	r3, [pc, #176]	; (800424c <AddModuleToGroup+0xf0>)
 800419c:	781b      	ldrb	r3, [r3, #0]
 800419e:	4699      	mov	r9, r3
 80041a0:	2b01      	cmp	r3, #1
 80041a2:	dd0b      	ble.n	80041bc <AddModuleToGroup+0x60>
 80041a4:	4c2a      	ldr	r4, [pc, #168]	; (8004250 <AddModuleToGroup+0xf4>)
 80041a6:	2501      	movs	r5, #1
	{
		if (!strcmp(group, moduleAlias[j]))	
 80041a8:	0021      	movs	r1, r4
 80041aa:	0030      	movs	r0, r6
 80041ac:	f7fb ffaa 	bl	8000104 <strcmp>
 80041b0:	2800      	cmp	r0, #0
 80041b2:	d042      	beq.n	800423a <AddModuleToGroup+0xde>
	for(j=1 ; j<N ; j++)
 80041b4:	3501      	adds	r5, #1
 80041b6:	340a      	adds	r4, #10
 80041b8:	454d      	cmp	r5, r9
 80041ba:	dbf5      	blt.n	80041a8 <AddModuleToGroup+0x4c>
			return BOS_ERR_ExistingAlias;
	}		
	
	/* 3. Check group alias with BOS and module commands */
	for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 80041bc:	4c25      	ldr	r4, [pc, #148]	; (8004254 <AddModuleToGroup+0xf8>)
 80041be:	4b26      	ldr	r3, [pc, #152]	; (8004258 <AddModuleToGroup+0xfc>)
 80041c0:	601c      	str	r4, [r3, #0]
 80041c2:	4699      	mov	r9, r3
	{
		pcRegisteredCommandString = pxCommand->pxCommandLineDefinition->pcCommand;
 80041c4:	6823      	ldr	r3, [r4, #0]
 80041c6:	681d      	ldr	r5, [r3, #0]
		xCommandStringLength = strlen( ( const char * ) pcRegisteredCommandString );
 80041c8:	0028      	movs	r0, r5
 80041ca:	f7fb ffa5 	bl	8000118 <strlen>
 80041ce:	0002      	movs	r2, r0
		
		if( !strncmp(group, (const char *) pcRegisteredCommandString, xCommandStringLength ) ) {
 80041d0:	0029      	movs	r1, r5
 80041d2:	0030      	movs	r0, r6
 80041d4:	f012 fb05 	bl	80167e2 <strncmp>
 80041d8:	2800      	cmp	r0, #0
 80041da:	d030      	beq.n	800423e <AddModuleToGroup+0xe2>
	for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 80041dc:	6864      	ldr	r4, [r4, #4]
 80041de:	464b      	mov	r3, r9
 80041e0:	601c      	str	r4, [r3, #0]
 80041e2:	2c00      	cmp	r4, #0
 80041e4:	d1ee      	bne.n	80041c4 <AddModuleToGroup+0x68>
	}			
	
	/* 4. Group alias is unique - copy to first empty location */
	for(i=0 ; i<MaxNumOfGroups ; i++)
	{
		if (!groupAlias[i][0]) {	
 80041e6:	783b      	ldrb	r3, [r7, #0]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d01b      	beq.n	8004224 <AddModuleToGroup+0xc8>
	for(i=0 ; i<MaxNumOfGroups ; i++)
 80041ec:	3401      	adds	r4, #1
 80041ee:	370a      	adds	r7, #10
 80041f0:	2c0a      	cmp	r4, #10
 80041f2:	d1f8      	bne.n	80041e6 <AddModuleToGroup+0x8a>
			break;
		}
	}		
	
	/* 5. Add this module to the new group */
	groupModules[module-1] |= (0x0001<<i);
 80041f4:	9f01      	ldr	r7, [sp, #4]
 80041f6:	3f01      	subs	r7, #1
 80041f8:	4918      	ldr	r1, [pc, #96]	; (800425c <AddModuleToGroup+0x100>)
 80041fa:	007f      	lsls	r7, r7, #1
 80041fc:	2201      	movs	r2, #1
 80041fe:	40a2      	lsls	r2, r4
 8004200:	5a7b      	ldrh	r3, [r7, r1]
 8004202:	4313      	orrs	r3, r2
 8004204:	527b      	strh	r3, [r7, r1]


	/* 7. Save new group to emulated EEPROM - Should call this manually */
	//result = SaveEEgroup();			
	
	return result;
 8004206:	2000      	movs	r0, #0
 8004208:	e008      	b.n	800421c <AddModuleToGroup+0xc0>
			groupModules[module-1] |= (0x0001<<i);	
 800420a:	9f01      	ldr	r7, [sp, #4]
 800420c:	3f01      	subs	r7, #1
 800420e:	4913      	ldr	r1, [pc, #76]	; (800425c <AddModuleToGroup+0x100>)
 8004210:	007f      	lsls	r7, r7, #1
 8004212:	2201      	movs	r2, #1
 8004214:	40a2      	lsls	r2, r4
 8004216:	5a7b      	ldrh	r3, [r7, r1]
 8004218:	4313      	orrs	r3, r2
 800421a:	527b      	strh	r3, [r7, r1]
}
 800421c:	b002      	add	sp, #8
 800421e:	bc80      	pop	{r7}
 8004220:	46b9      	mov	r9, r7
 8004222:	bdf0      	pop	{r4, r5, r6, r7, pc}
			strcpy(groupAlias[i], group);	
 8004224:	00a0      	lsls	r0, r4, #2
 8004226:	1900      	adds	r0, r0, r4
 8004228:	0040      	lsls	r0, r0, #1
 800422a:	4b06      	ldr	r3, [pc, #24]	; (8004244 <AddModuleToGroup+0xe8>)
 800422c:	1818      	adds	r0, r3, r0
 800422e:	0031      	movs	r1, r6
 8004230:	f012 facf 	bl	80167d2 <strcpy>
			break;
 8004234:	e7de      	b.n	80041f4 <AddModuleToGroup+0x98>
			return BOS_ERR_Keyword;
 8004236:	2006      	movs	r0, #6
 8004238:	e7f0      	b.n	800421c <AddModuleToGroup+0xc0>
			return BOS_ERR_ExistingAlias;
 800423a:	2007      	movs	r0, #7
 800423c:	e7ee      	b.n	800421c <AddModuleToGroup+0xc0>
			return BOS_ERR_ExistingCmd;
 800423e:	2008      	movs	r0, #8
 8004240:	e7ec      	b.n	800421c <AddModuleToGroup+0xc0>
 8004242:	46c0      	nop			; (mov r8, r8)
 8004244:	200008f4 	.word	0x200008f4
 8004248:	08019ff4 	.word	0x08019ff4
 800424c:	2000001c 	.word	0x2000001c
 8004250:	20000a0a 	.word	0x20000a0a
 8004254:	2000009c 	.word	0x2000009c
 8004258:	20000b8c 	.word	0x20000b8c
 800425c:	20000958 	.word	0x20000958

08004260 <ReadPortsDir>:
/*-----------------------------------------------------------*/

/* --- Read Ports directions when a pre-defined topology file is used --- 
*/
BOS_Status ReadPortsDir(void)
{
 8004260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004262:	46de      	mov	lr, fp
 8004264:	464f      	mov	r7, r9
 8004266:	4646      	mov	r6, r8
 8004268:	b5c0      	push	{r6, r7, lr}
	BOS_Status result = BOS_OK; 
	
	/* Ask all other modules for their ports directions */
	for (uint8_t i=1 ; i<=N ; i++) 
 800426a:	4b22      	ldr	r3, [pc, #136]	; (80042f4 <ReadPortsDir+0x94>)
 800426c:	781f      	ldrb	r7, [r3, #0]
 800426e:	2f00      	cmp	r7, #0
 8004270:	d03a      	beq.n	80042e8 <ReadPortsDir+0x88>
 8004272:	2401      	movs	r4, #1
	BOS_Status result = BOS_OK; 
 8004274:	2700      	movs	r7, #0
	{
		if (i != myID) {
 8004276:	4b20      	ldr	r3, [pc, #128]	; (80042f8 <ReadPortsDir+0x98>)
 8004278:	4698      	mov	r8, r3
			} 	
		} else {
			/* Check my own ports */
			for (uint8_t p=1 ; p<=NumOfPorts ; p++) {
				if (GetUart(p)->AdvancedInit.Swap == UART_ADVFEATURE_SWAP_ENABLE) {
					arrayPortsDir[myID-1] |= (0x8000>>(p-1));		/* Set bit to 1 */
 800427a:	4b20      	ldr	r3, [pc, #128]	; (80042fc <ReadPortsDir+0x9c>)
 800427c:	4699      	mov	r9, r3
			if (responseStatus != BOS_OK)	{
 800427e:	4b20      	ldr	r3, [pc, #128]	; (8004300 <ReadPortsDir+0xa0>)
 8004280:	469b      	mov	fp, r3
 8004282:	e01f      	b.n	80042c4 <ReadPortsDir+0x64>
 8004284:	2500      	movs	r5, #0
				if (GetUart(p)->AdvancedInit.Swap == UART_ADVFEATURE_SWAP_ENABLE) {
 8004286:	2680      	movs	r6, #128	; 0x80
 8004288:	0236      	lsls	r6, r6, #8
 800428a:	e002      	b.n	8004292 <ReadPortsDir+0x32>
			for (uint8_t p=1 ; p<=NumOfPorts ; p++) {
 800428c:	3501      	adds	r5, #1
 800428e:	2d05      	cmp	r5, #5
 8004290:	d012      	beq.n	80042b8 <ReadPortsDir+0x58>
				if (GetUart(p)->AdvancedInit.Swap == UART_ADVFEATURE_SWAP_ENABLE) {
 8004292:	1c68      	adds	r0, r5, #1
 8004294:	b2c0      	uxtb	r0, r0
 8004296:	f009 fd05 	bl	800dca4 <GetUart>
 800429a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800429c:	42b3      	cmp	r3, r6
 800429e:	d1f5      	bne.n	800428c <ReadPortsDir+0x2c>
					arrayPortsDir[myID-1] |= (0x8000>>(p-1));		/* Set bit to 1 */
 80042a0:	4b15      	ldr	r3, [pc, #84]	; (80042f8 <ReadPortsDir+0x98>)
 80042a2:	781b      	ldrb	r3, [r3, #0]
 80042a4:	3b01      	subs	r3, #1
 80042a6:	005b      	lsls	r3, r3, #1
 80042a8:	464a      	mov	r2, r9
 80042aa:	5a9a      	ldrh	r2, [r3, r2]
 80042ac:	0031      	movs	r1, r6
 80042ae:	4129      	asrs	r1, r5
 80042b0:	430a      	orrs	r2, r1
 80042b2:	4649      	mov	r1, r9
 80042b4:	525a      	strh	r2, [r3, r1]
 80042b6:	e7e9      	b.n	800428c <ReadPortsDir+0x2c>
	for (uint8_t i=1 ; i<=N ; i++) 
 80042b8:	3401      	adds	r4, #1
 80042ba:	b2e4      	uxtb	r4, r4
 80042bc:	4b0d      	ldr	r3, [pc, #52]	; (80042f4 <ReadPortsDir+0x94>)
 80042be:	781b      	ldrb	r3, [r3, #0]
 80042c0:	42a3      	cmp	r3, r4
 80042c2:	d311      	bcc.n	80042e8 <ReadPortsDir+0x88>
		if (i != myID) {
 80042c4:	4643      	mov	r3, r8
 80042c6:	781b      	ldrb	r3, [r3, #0]
 80042c8:	42a3      	cmp	r3, r4
 80042ca:	d0db      	beq.n	8004284 <ReadPortsDir+0x24>
			SendMessageToModule(i, CODE_READ_PORT_DIR, 0);
 80042cc:	2200      	movs	r2, #0
 80042ce:	2113      	movs	r1, #19
 80042d0:	0020      	movs	r0, r4
 80042d2:	f004 fe05 	bl	8008ee0 <SendMessageToModule>
			Delay_ms_no_rtos(50);
 80042d6:	2032      	movs	r0, #50	; 0x32
 80042d8:	f009 fb44 	bl	800d964 <StartMilliDelay>
			if (responseStatus != BOS_OK)	{
 80042dc:	465b      	mov	r3, fp
 80042de:	781b      	ldrb	r3, [r3, #0]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d0e9      	beq.n	80042b8 <ReadPortsDir+0x58>
				result = BOS_ERR_NoResponse;
 80042e4:	2702      	movs	r7, #2
 80042e6:	e7e7      	b.n	80042b8 <ReadPortsDir+0x58>
			}
		}
	}
	
	return result;
}
 80042e8:	0038      	movs	r0, r7
 80042ea:	bce0      	pop	{r5, r6, r7}
 80042ec:	46bb      	mov	fp, r7
 80042ee:	46b1      	mov	r9, r6
 80042f0:	46a8      	mov	r8, r5
 80042f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80042f4:	2000001c 	.word	0x2000001c
 80042f8:	20000b04 	.word	0x20000b04
 80042fc:	200068e4 	.word	0x200068e4
 8004300:	20000b98 	.word	0x20000b98

08004304 <UpdateMyPortsDir>:
/*-----------------------------------------------------------*/
#ifndef __N
/* --- Update module port directions based on what is stored in eeprom --- 
*/
BOS_Status UpdateMyPortsDir(void)
{
 8004304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004306:	2400      	movs	r4, #0
	BOS_Status result = BOS_OK;
	
	/* Check port direction */
	for (uint8_t p=1 ; p<=NumOfPorts ; p++) 
	{
		if ( !(arrayPortsDir[myID-1] & (0x8000>>(p-1))) ) {
 8004308:	4f0f      	ldr	r7, [pc, #60]	; (8004348 <UpdateMyPortsDir+0x44>)
 800430a:	4e10      	ldr	r6, [pc, #64]	; (800434c <UpdateMyPortsDir+0x48>)
 800430c:	2580      	movs	r5, #128	; 0x80
 800430e:	022d      	lsls	r5, r5, #8
 8004310:	e007      	b.n	8004322 <UpdateMyPortsDir+0x1e>
			/* Port is normal */
			SwapUartPins(GetUart(p), NORMAL);
		} else {
			/* Port is reversed */
			SwapUartPins(GetUart(p), REVERSED);					
 8004312:	f009 fcc7 	bl	800dca4 <GetUart>
 8004316:	2101      	movs	r1, #1
 8004318:	f009 fd5c 	bl	800ddd4 <SwapUartPins>
	for (uint8_t p=1 ; p<=NumOfPorts ; p++) 
 800431c:	3401      	adds	r4, #1
 800431e:	2c05      	cmp	r4, #5
 8004320:	d00f      	beq.n	8004342 <UpdateMyPortsDir+0x3e>
 8004322:	1c60      	adds	r0, r4, #1
 8004324:	b2c0      	uxtb	r0, r0
		if ( !(arrayPortsDir[myID-1] & (0x8000>>(p-1))) ) {
 8004326:	7833      	ldrb	r3, [r6, #0]
 8004328:	3b01      	subs	r3, #1
 800432a:	005b      	lsls	r3, r3, #1
 800432c:	5bdb      	ldrh	r3, [r3, r7]
 800432e:	002a      	movs	r2, r5
 8004330:	4122      	asrs	r2, r4
 8004332:	421a      	tst	r2, r3
 8004334:	d1ed      	bne.n	8004312 <UpdateMyPortsDir+0xe>
			SwapUartPins(GetUart(p), NORMAL);
 8004336:	f009 fcb5 	bl	800dca4 <GetUart>
 800433a:	2100      	movs	r1, #0
 800433c:	f009 fd4a 	bl	800ddd4 <SwapUartPins>
 8004340:	e7ec      	b.n	800431c <UpdateMyPortsDir+0x18>
		}	
	}		
	
	return result;
}
 8004342:	2000      	movs	r0, #0
 8004344:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004346:	46c0      	nop			; (mov r8, r8)
 8004348:	200068e4 	.word	0x200068e4
 800434c:	20000b04 	.word	0x20000b04

08004350 <BOS_Init>:
{
 8004350:	b570      	push	{r4, r5, r6, lr}
	RTC_Init();
 8004352:	f009 f9bf 	bl	800d6d4 <RTC_Init>
	GetTimeDate();
 8004356:	f009 fa5d 	bl	800d814 <GetTimeDate>
	EE_Init();
 800435a:	f003 f9d1 	bl	8007700 <EE_Init>
  GPIO_Init();
 800435e:	f008 fda9 	bl	800ceb4 <GPIO_Init>
	DMA_Init();
 8004362:	f007 fce3 	bl	800bd2c <DMA_Init>
	TIM_USEC_Init();
 8004366:	f009 fa89 	bl	800d87c <TIM_USEC_Init>
	CRC_Init();
 800436a:	f008 fcfd 	bl	800cd68 <CRC_Init>
	TIM_MSEC_Init();
 800436e:	f009 fab7 	bl	800d8e0 <TIM_MSEC_Init>
	if (IsFactoryReset())
 8004372:	f008 fe33 	bl	800cfdc <IsFactoryReset>
 8004376:	2800      	cmp	r0, #0
 8004378:	d11a      	bne.n	80043b0 <BOS_Init+0x60>
	if (IsLowerCLIbaud())
 800437a:	f7ff f88f 	bl	800349c <IsLowerCLIbaud>
 800437e:	2800      	cmp	r0, #0
 8004380:	d021      	beq.n	80043c6 <BOS_Init+0x76>
		CLI_LOW_Baudrate_Flag = 1;
 8004382:	4b3e      	ldr	r3, [pc, #248]	; (800447c <BOS_Init+0x12c>)
 8004384:	2201      	movs	r2, #1
 8004386:	701a      	strb	r2, [r3, #0]
		Delay_ms_no_rtos(50);					// Give other modules time to finish factory reset and baudrate check
 8004388:	2032      	movs	r0, #50	; 0x32
 800438a:	f009 faeb 	bl	800d964 <StartMilliDelay>
		Module_Init();	
 800438e:	f006 ff2b 	bl	800b1e8 <Module_Init>
		BOS.clibaudrate = CLI_BAUDRATE_1;
 8004392:	4b3b      	ldr	r3, [pc, #236]	; (8004480 <BOS_Init+0x130>)
 8004394:	22e1      	movs	r2, #225	; 0xe1
 8004396:	0252      	lsls	r2, r2, #9
 8004398:	609a      	str	r2, [r3, #8]
		for (uint8_t port=1 ; port<=NumOfPorts ; port++) 
 800439a:	2401      	movs	r4, #1
			UpdateBaudrate(port, BOS.clibaudrate);
 800439c:	001d      	movs	r5, r3
 800439e:	68a9      	ldr	r1, [r5, #8]
 80043a0:	0020      	movs	r0, r4
 80043a2:	f009 fd0d 	bl	800ddc0 <UpdateBaudrate>
		for (uint8_t port=1 ; port<=NumOfPorts ; port++) 
 80043a6:	3401      	adds	r4, #1
 80043a8:	b2e4      	uxtb	r4, r4
 80043aa:	2c06      	cmp	r4, #6
 80043ac:	d1f7      	bne.n	800439e <BOS_Init+0x4e>
 80043ae:	e00f      	b.n	80043d0 <BOS_Init+0x80>
		EE_FormatForFactoryReset();
 80043b0:	f7ff f8c4 	bl	800353c <EE_FormatForFactoryReset>
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80043b4:	f3bf 8f4f 	dsb	sy
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80043b8:	4b32      	ldr	r3, [pc, #200]	; (8004484 <BOS_Init+0x134>)
 80043ba:	4a33      	ldr	r2, [pc, #204]	; (8004488 <BOS_Init+0x138>)
 80043bc:	60da      	str	r2, [r3, #12]
 80043be:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 80043c2:	46c0      	nop			; (mov r8, r8)
 80043c4:	e7fd      	b.n	80043c2 <BOS_Init+0x72>
		Delay_ms_no_rtos(50);					// Give other modules time to finish factory reset and baudrate check
 80043c6:	2032      	movs	r0, #50	; 0x32
 80043c8:	f009 facc 	bl	800d964 <StartMilliDelay>
		Module_Init();				
 80043cc:	f006 ff0c 	bl	800b1e8 <Module_Init>
	LoadEEvars();
 80043d0:	f7ff f852 	bl	8003478 <LoadEEvars>
	UpdateMyPortsDir();
 80043d4:	f7ff ff96 	bl	8004304 <UpdateMyPortsDir>
	SetupMessagingRxDMAs();
 80043d8:	f008 f90e 	bl	800c5f8 <SetupMessagingRxDMAs>
	if (myID == 0)		/* Native module */
 80043dc:	4b2b      	ldr	r3, [pc, #172]	; (800448c <BOS_Init+0x13c>)
 80043de:	781b      	ldrb	r3, [r3, #0]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d117      	bne.n	8004414 <BOS_Init+0xc4>
		IND_ON();	Delay_ms_no_rtos(500); IND_OFF();
 80043e4:	2580      	movs	r5, #128	; 0x80
 80043e6:	012d      	lsls	r5, r5, #4
 80043e8:	2490      	movs	r4, #144	; 0x90
 80043ea:	05e4      	lsls	r4, r4, #23
 80043ec:	2201      	movs	r2, #1
 80043ee:	0029      	movs	r1, r5
 80043f0:	0020      	movs	r0, r4
 80043f2:	f00c ff05 	bl	8011200 <HAL_GPIO_WritePin>
 80043f6:	20fa      	movs	r0, #250	; 0xfa
 80043f8:	0040      	lsls	r0, r0, #1
 80043fa:	f009 fab3 	bl	800d964 <StartMilliDelay>
 80043fe:	2200      	movs	r2, #0
 8004400:	0029      	movs	r1, r5
 8004402:	0020      	movs	r0, r4
 8004404:	f00c fefc 	bl	8011200 <HAL_GPIO_WritePin>
	ResetUartORE();
 8004408:	f002 ffb4 	bl	8007374 <ResetUartORE>
	BOS_initialized = 1;
 800440c:	4b20      	ldr	r3, [pc, #128]	; (8004490 <BOS_Init+0x140>)
 800440e:	2201      	movs	r2, #1
 8004410:	701a      	strb	r2, [r3, #0]
}
 8004412:	bd70      	pop	{r4, r5, r6, pc}
		IND_ON();	Delay_ms_no_rtos(500); IND_OFF();
 8004414:	2580      	movs	r5, #128	; 0x80
 8004416:	012d      	lsls	r5, r5, #4
 8004418:	2490      	movs	r4, #144	; 0x90
 800441a:	05e4      	lsls	r4, r4, #23
 800441c:	2201      	movs	r2, #1
 800441e:	0029      	movs	r1, r5
 8004420:	0020      	movs	r0, r4
 8004422:	f00c feed 	bl	8011200 <HAL_GPIO_WritePin>
 8004426:	20fa      	movs	r0, #250	; 0xfa
 8004428:	0040      	lsls	r0, r0, #1
 800442a:	f009 fa9b 	bl	800d964 <StartMilliDelay>
 800442e:	2200      	movs	r2, #0
 8004430:	0029      	movs	r1, r5
 8004432:	0020      	movs	r0, r4
 8004434:	f00c fee4 	bl	8011200 <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(100);
 8004438:	2064      	movs	r0, #100	; 0x64
 800443a:	f009 fa93 	bl	800d964 <StartMilliDelay>
		IND_ON();	Delay_ms_no_rtos(100); IND_OFF();
 800443e:	2201      	movs	r2, #1
 8004440:	0029      	movs	r1, r5
 8004442:	0020      	movs	r0, r4
 8004444:	f00c fedc 	bl	8011200 <HAL_GPIO_WritePin>
 8004448:	2064      	movs	r0, #100	; 0x64
 800444a:	f009 fa8b 	bl	800d964 <StartMilliDelay>
 800444e:	2200      	movs	r2, #0
 8004450:	0029      	movs	r1, r5
 8004452:	0020      	movs	r0, r4
 8004454:	f00c fed4 	bl	8011200 <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(100);
 8004458:	2064      	movs	r0, #100	; 0x64
 800445a:	f009 fa83 	bl	800d964 <StartMilliDelay>
		IND_ON();	Delay_ms_no_rtos(100); IND_OFF();
 800445e:	2201      	movs	r2, #1
 8004460:	0029      	movs	r1, r5
 8004462:	0020      	movs	r0, r4
 8004464:	f00c fecc 	bl	8011200 <HAL_GPIO_WritePin>
 8004468:	2064      	movs	r0, #100	; 0x64
 800446a:	f009 fa7b 	bl	800d964 <StartMilliDelay>
 800446e:	2200      	movs	r2, #0
 8004470:	0029      	movs	r1, r5
 8004472:	0020      	movs	r0, r4
 8004474:	f00c fec4 	bl	8011200 <HAL_GPIO_WritePin>
 8004478:	e7c6      	b.n	8004408 <BOS_Init+0xb8>
 800447a:	46c0      	nop			; (mov r8, r8)
 800447c:	2000055e 	.word	0x2000055e
 8004480:	20006368 	.word	0x20006368
 8004484:	e000ed00 	.word	0xe000ed00
 8004488:	05fa0004 	.word	0x05fa0004
 800448c:	20000b04 	.word	0x20000b04
 8004490:	2000055d 	.word	0x2000055d

08004494 <GetDateString>:
/*-----------------------------------------------------------*/

/* --- Make a data string with format weekday / month / date / year 
*/
char *GetDateString(void)
{
 8004494:	b510      	push	{r4, lr}
 8004496:	b082      	sub	sp, #8
  static const char formatDateStr[] = "%s %02d/%02d/%04d";
  char *buffer = malloc(30 * sizeof(int8_t));
 8004498:	201e      	movs	r0, #30
 800449a:	f012 f829 	bl	80164f0 <malloc>
 800449e:	0004      	movs	r4, r0
  memset (buffer, 0x00, 30 * sizeof(int8_t));
 80044a0:	221e      	movs	r2, #30
 80044a2:	2100      	movs	r1, #0
 80044a4:	f012 f84f 	bl	8016546 <memset>
  sprintf(buffer, formatDateStr, weekdayString[BOS.date.weekday-1], BOS.date.month, BOS.date.day, BOS.date.year);
 80044a8:	4908      	ldr	r1, [pc, #32]	; (80044cc <GetDateString+0x38>)
 80044aa:	7d8b      	ldrb	r3, [r1, #22]
 80044ac:	7d0a      	ldrb	r2, [r1, #20]
 80044ae:	3a01      	subs	r2, #1
 80044b0:	0092      	lsls	r2, r2, #2
 80044b2:	4807      	ldr	r0, [pc, #28]	; (80044d0 <GetDateString+0x3c>)
 80044b4:	5812      	ldr	r2, [r2, r0]
 80044b6:	8b08      	ldrh	r0, [r1, #24]
 80044b8:	9001      	str	r0, [sp, #4]
 80044ba:	7d49      	ldrb	r1, [r1, #21]
 80044bc:	9100      	str	r1, [sp, #0]
 80044be:	4905      	ldr	r1, [pc, #20]	; (80044d4 <GetDateString+0x40>)
 80044c0:	0020      	movs	r0, r4
 80044c2:	f012 f94b 	bl	801675c <siprintf>
  return buffer;
}
 80044c6:	0020      	movs	r0, r4
 80044c8:	b002      	add	sp, #8
 80044ca:	bd10      	pop	{r4, pc}
 80044cc:	20006368 	.word	0x20006368
 80044d0:	0801a098 	.word	0x0801a098
 80044d4:	0801a004 	.word	0x0801a004

080044d8 <Bridge>:
/*-----------------------------------------------------------*/

/* --- Bridge two array/communication ports together
*/
BOS_Status Bridge(uint8_t port1, uint8_t port2)
{
 80044d8:	b500      	push	{lr}
 80044da:	b085      	sub	sp, #20
 80044dc:	000a      	movs	r2, r1
	// Link the ports together with an infinite DMA stream
	return StartScastDMAStream(port1, myID, port2, myID, BIDIRECTIONAL, 0xFFFFFFFF, 0xFFFFFFFF, true);
 80044de:	4b07      	ldr	r3, [pc, #28]	; (80044fc <Bridge+0x24>)
 80044e0:	7819      	ldrb	r1, [r3, #0]
 80044e2:	2301      	movs	r3, #1
 80044e4:	9303      	str	r3, [sp, #12]
 80044e6:	3b02      	subs	r3, #2
 80044e8:	9302      	str	r3, [sp, #8]
 80044ea:	9301      	str	r3, [sp, #4]
 80044ec:	3303      	adds	r3, #3
 80044ee:	9300      	str	r3, [sp, #0]
 80044f0:	000b      	movs	r3, r1
 80044f2:	f004 fd1b 	bl	8008f2c <StartScastDMAStream>
}
 80044f6:	b005      	add	sp, #20
 80044f8:	bd00      	pop	{pc}
 80044fa:	46c0      	nop			; (mov r8, r8)
 80044fc:	20000b04 	.word	0x20000b04

08004500 <Unbridge>:
/*-----------------------------------------------------------*/

/* --- Un-bridge two array/communication ports
*/
BOS_Status Unbridge(uint8_t port1, uint8_t port2)
{		
 8004500:	b530      	push	{r4, r5, lr}
 8004502:	b087      	sub	sp, #28
 8004504:	0005      	movs	r5, r0
 8004506:	000c      	movs	r4, r1
	// Remove the stream from EEPROM
	SaveEEstreams(0, 0, 0, 0, 0, 0, 0, 0, 0);
 8004508:	2300      	movs	r3, #0
 800450a:	9304      	str	r3, [sp, #16]
 800450c:	9303      	str	r3, [sp, #12]
 800450e:	9302      	str	r3, [sp, #8]
 8004510:	9301      	str	r3, [sp, #4]
 8004512:	9300      	str	r3, [sp, #0]
 8004514:	2200      	movs	r2, #0
 8004516:	2100      	movs	r1, #0
 8004518:	2000      	movs	r0, #0
 800451a:	f7fe fe13 	bl	8003144 <SaveEEstreams>
	
	// Stop the DMA streams and enable messaging back on these ports
	if(streamDMA[port1-1].Instance != 0 && streamDMA[port2-1].Instance != 0) 
 800451e:	1e6a      	subs	r2, r5, #1
 8004520:	00d3      	lsls	r3, r2, #3
 8004522:	1a9b      	subs	r3, r3, r2
 8004524:	00db      	lsls	r3, r3, #3
 8004526:	4a14      	ldr	r2, [pc, #80]	; (8004578 <Unbridge+0x78>)
 8004528:	589b      	ldr	r3, [r3, r2]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d014      	beq.n	8004558 <Unbridge+0x58>
 800452e:	1e62      	subs	r2, r4, #1
 8004530:	00d3      	lsls	r3, r2, #3
 8004532:	1a9b      	subs	r3, r3, r2
 8004534:	00db      	lsls	r3, r3, #3
 8004536:	4a10      	ldr	r2, [pc, #64]	; (8004578 <Unbridge+0x78>)
 8004538:	589b      	ldr	r3, [r3, r2]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d104      	bne.n	8004548 <Unbridge+0x48>
			{SwitchStreamDMAToMsg(port1);SwitchStreamDMAToMsg(port2);return BOS_OK;}
	else if (streamDMA[port1-1].Instance != 0)
			{SwitchStreamDMAToMsg(port1);return BOS_OK;}
 800453e:	0028      	movs	r0, r5
 8004540:	f002 fe88 	bl	8007254 <SwitchStreamDMAToMsg>
 8004544:	2000      	movs	r0, #0
 8004546:	e013      	b.n	8004570 <Unbridge+0x70>
			{SwitchStreamDMAToMsg(port1);SwitchStreamDMAToMsg(port2);return BOS_OK;}
 8004548:	0028      	movs	r0, r5
 800454a:	f002 fe83 	bl	8007254 <SwitchStreamDMAToMsg>
 800454e:	0020      	movs	r0, r4
 8004550:	f002 fe80 	bl	8007254 <SwitchStreamDMAToMsg>
 8004554:	2000      	movs	r0, #0
 8004556:	e00b      	b.n	8004570 <Unbridge+0x70>
	else if (streamDMA[port2-1].Instance != 0)
 8004558:	1e62      	subs	r2, r4, #1
 800455a:	00d3      	lsls	r3, r2, #3
 800455c:	1a9b      	subs	r3, r3, r2
 800455e:	00db      	lsls	r3, r3, #3
 8004560:	4a05      	ldr	r2, [pc, #20]	; (8004578 <Unbridge+0x78>)
 8004562:	589b      	ldr	r3, [r3, r2]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d005      	beq.n	8004574 <Unbridge+0x74>
			{SwitchStreamDMAToMsg(port2);return BOS_OK;}	
 8004568:	0020      	movs	r0, r4
 800456a:	f002 fe73 	bl	8007254 <SwitchStreamDMAToMsg>
 800456e:	2000      	movs	r0, #0
	else {return BOS_ERR_WrongValue;}
}
 8004570:	b007      	add	sp, #28
 8004572:	bd30      	pop	{r4, r5, pc}
	else {return BOS_ERR_WrongValue;}
 8004574:	2068      	movs	r0, #104	; 0x68
 8004576:	e7fb      	b.n	8004570 <Unbridge+0x70>
 8004578:	20001364 	.word	0x20001364

0800457c <StringToLowerCase>:
/*-----------------------------------------------------------*/

/* Convert a string to lower case
*/
void StringToLowerCase(char *string)
{
 800457c:	b530      	push	{r4, r5, lr}
	for(int i = 0; string[i]; i++){
 800457e:	7803      	ldrb	r3, [r0, #0]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d00f      	beq.n	80045a4 <StringToLowerCase+0x28>
		string[i] = tolower(string[i]);
 8004584:	4d08      	ldr	r5, [pc, #32]	; (80045a8 <StringToLowerCase+0x2c>)
 8004586:	2403      	movs	r4, #3
 8004588:	e004      	b.n	8004594 <StringToLowerCase+0x18>
 800458a:	7001      	strb	r1, [r0, #0]
	for(int i = 0; string[i]; i++){
 800458c:	3001      	adds	r0, #1
 800458e:	7803      	ldrb	r3, [r0, #0]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d007      	beq.n	80045a4 <StringToLowerCase+0x28>
		string[i] = tolower(string[i]);
 8004594:	5cea      	ldrb	r2, [r5, r3]
 8004596:	4022      	ands	r2, r4
 8004598:	0019      	movs	r1, r3
 800459a:	2a01      	cmp	r2, #1
 800459c:	d1f5      	bne.n	800458a <StringToLowerCase+0xe>
 800459e:	3320      	adds	r3, #32
 80045a0:	0019      	movs	r1, r3
 80045a2:	e7f2      	b.n	800458a <StringToLowerCase+0xe>
	}
}
 80045a4:	bd30      	pop	{r4, r5, pc}
 80045a6:	46c0      	nop			; (mov r8, r8)
 80045a8:	0801ccd1 	.word	0x0801ccd1

080045ac <ParseSnippetCondition>:
/*-----------------------------------------------------------*/

/* Parse Snippet conditions into the internal buffer
*/
BOS_Status ParseSnippetCondition(char *string)
{
 80045ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80045ae:	46ce      	mov	lr, r9
 80045b0:	4647      	mov	r7, r8
 80045b2:	b580      	push	{r7, lr}
 80045b4:	b089      	sub	sp, #36	; 0x24
 80045b6:	0005      	movs	r5, r0
	static int8_t cInputString[ cmdMAX_INPUT_SIZE ];
	BOS_Status status = BOS_OK;
	uint8_t port = 0;
	
	// A. Verify first there's still memory left to store Snippets	
	if (numOfRecordedSnippets == MAX_SNIPPETS)
 80045b8:	4bde      	ldr	r3, [pc, #888]	; (8004934 <ParseSnippetCondition+0x388>)
 80045ba:	781c      	ldrb	r4, [r3, #0]
 80045bc:	2c05      	cmp	r4, #5
 80045be:	d100      	bne.n	80045c2 <ParseSnippetCondition+0x16>
 80045c0:	e21a      	b.n	80049f8 <ParseSnippetCondition+0x44c>
		return BOS_ERR_SNIP_MEM_FULL;
	}
	// Initialize the next empty location
	else
	{
		snippets[numOfRecordedSnippets].cond.conditionType = 0;
 80045c2:	49dd      	ldr	r1, [pc, #884]	; (8004938 <ParseSnippetCondition+0x38c>)
 80045c4:	00a3      	lsls	r3, r4, #2
 80045c6:	191a      	adds	r2, r3, r4
 80045c8:	0092      	lsls	r2, r2, #2
 80045ca:	2000      	movs	r0, #0
 80045cc:	5450      	strb	r0, [r2, r1]
		snippets[numOfRecordedSnippets].cond.mathOperator = 0;			
 80045ce:	191a      	adds	r2, r3, r4
 80045d0:	0092      	lsls	r2, r2, #2
 80045d2:	188a      	adds	r2, r1, r2
 80045d4:	7050      	strb	r0, [r2, #1]
		memset(snippets[numOfRecordedSnippets].cond.buffer1, 0, 4);			
 80045d6:	1918      	adds	r0, r3, r4
 80045d8:	0080      	lsls	r0, r0, #2
 80045da:	3002      	adds	r0, #2
 80045dc:	1840      	adds	r0, r0, r1
 80045de:	2204      	movs	r2, #4
 80045e0:	2100      	movs	r1, #0
 80045e2:	f011 ffb0 	bl	8016546 <memset>
	}
	
	// B. Parse Snippets based on their condition type 
	
	// #1: Button event: condition starts with "bx." 
	if(string[0] == 'b' && string[2] == '.')
 80045e6:	782b      	ldrb	r3, [r5, #0]
 80045e8:	2b62      	cmp	r3, #98	; 0x62
 80045ea:	d102      	bne.n	80045f2 <ParseSnippetCondition+0x46>
 80045ec:	78ab      	ldrb	r3, [r5, #2]
 80045ee:	2b2e      	cmp	r3, #46	; 0x2e
 80045f0:	d032      	beq.n	8004658 <ParseSnippetCondition+0xac>
		}
	}
	// Module-related conditions (local only for now)
	else
	{
		strcpy( (char *)cInputString, string);
 80045f2:	4cd2      	ldr	r4, [pc, #840]	; (800493c <ParseSnippetCondition+0x390>)
 80045f4:	0029      	movs	r1, r5
 80045f6:	0020      	movs	r0, r4
 80045f8:	f012 f8eb 	bl	80167d2 <strcpy>

		// This is probably a three part condition, extract them out
		char *firstPart, *secondPart, *thirdPart; uint8_t modPar1 = 0, modPar2 = 0;
		firstPart = strtok ( (char *)cInputString, " ");
 80045fc:	4dd0      	ldr	r5, [pc, #832]	; (8004940 <ParseSnippetCondition+0x394>)
 80045fe:	0029      	movs	r1, r5
 8004600:	0020      	movs	r0, r4
 8004602:	f012 ff5d 	bl	80174c0 <strtok>
 8004606:	0004      	movs	r4, r0
		secondPart = strtok ( NULL, " ");
 8004608:	0029      	movs	r1, r5
 800460a:	2000      	movs	r0, #0
 800460c:	f012 ff58 	bl	80174c0 <strtok>
 8004610:	0006      	movs	r6, r0
		thirdPart = strtok ( NULL, " ");
 8004612:	0029      	movs	r1, r5
 8004614:	2000      	movs	r0, #0
 8004616:	f012 ff53 	bl	80174c0 <strtok>
 800461a:	0005      	movs	r5, r0
		
		// Check if first part is module parameter or event
		if (firstPart == NULL) 
 800461c:	2c00      	cmp	r4, #0
 800461e:	d100      	bne.n	8004622 <ParseSnippetCondition+0x76>
 8004620:	e1ec      	b.n	80049fc <ParseSnippetCondition+0x450>
		{
			return BOS_ERR_WrongParam;
		} 
		else 
		{
			modPar1 = IsModuleParameter(firstPart);
 8004622:	0020      	movs	r0, r4
 8004624:	f7fe ffb4 	bl	8003590 <IsModuleParameter>
 8004628:	1e04      	subs	r4, r0, #0
			// Found a module parameter and no more strings
			if (modPar1 && secondPart == NULL && thirdPart == NULL) 
 800462a:	d100      	bne.n	800462e <ParseSnippetCondition+0x82>
 800462c:	e194      	b.n	8004958 <ParseSnippetCondition+0x3ac>
 800462e:	2e00      	cmp	r6, #0
 8004630:	d000      	beq.n	8004634 <ParseSnippetCondition+0x88>
 8004632:	e193      	b.n	800495c <ParseSnippetCondition+0x3b0>
				++numOfRecordedSnippets;		// Record a successful Snippet
				return BOS_OK;				
			} 
			else 
			{
				return BOS_ERR_WrongParam;
 8004634:	3667      	adds	r6, #103	; 0x67
			if (modPar1 && secondPart == NULL && thirdPart == NULL) 
 8004636:	2d00      	cmp	r5, #0
 8004638:	d000      	beq.n	800463c <ParseSnippetCondition+0x90>
 800463a:	e1ba      	b.n	80049b2 <ParseSnippetCondition+0x406>
				snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_MODULE_EVENT;			
 800463c:	4dbd      	ldr	r5, [pc, #756]	; (8004934 <ParseSnippetCondition+0x388>)
 800463e:	782b      	ldrb	r3, [r5, #0]
 8004640:	49bd      	ldr	r1, [pc, #756]	; (8004938 <ParseSnippetCondition+0x38c>)
 8004642:	009a      	lsls	r2, r3, #2
 8004644:	18d0      	adds	r0, r2, r3
 8004646:	0080      	lsls	r0, r0, #2
 8004648:	3e65      	subs	r6, #101	; 0x65
 800464a:	5446      	strb	r6, [r0, r1]
				snippets[numOfRecordedSnippets].cond.buffer1[1] = modPar1;		// Leaving first buffer byte for remote module ID
 800464c:	180a      	adds	r2, r1, r0
 800464e:	70d4      	strb	r4, [r2, #3]
				++numOfRecordedSnippets;		// Record a successful Snippet	
 8004650:	3301      	adds	r3, #1
 8004652:	702b      	strb	r3, [r5, #0]
				return BOS_OK;
 8004654:	2600      	movs	r6, #0
 8004656:	e1ac      	b.n	80049b2 <ParseSnippetCondition+0x406>
		if(string[1] >= '0' && string[1] <= (NumOfPorts+'0'))		// Valid port number
 8004658:	786f      	ldrb	r7, [r5, #1]
 800465a:	3f30      	subs	r7, #48	; 0x30
 800465c:	b2ff      	uxtb	r7, r7
	BOS_Status status = BOS_OK;
 800465e:	2600      	movs	r6, #0
		if(string[1] >= '0' && string[1] <= (NumOfPorts+'0'))		// Valid port number
 8004660:	2f05      	cmp	r7, #5
 8004662:	d900      	bls.n	8004666 <ParseSnippetCondition+0xba>
 8004664:	e1a5      	b.n	80049b2 <ParseSnippetCondition+0x406>
			snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_BUTTON_EVENT;
 8004666:	4ab4      	ldr	r2, [pc, #720]	; (8004938 <ParseSnippetCondition+0x38c>)
 8004668:	00a3      	lsls	r3, r4, #2
 800466a:	1919      	adds	r1, r3, r4
 800466c:	0089      	lsls	r1, r1, #2
 800466e:	2001      	movs	r0, #1
 8004670:	5488      	strb	r0, [r1, r2]
			snippets[numOfRecordedSnippets].cond.mathOperator = 0;			// No math operations
 8004672:	1853      	adds	r3, r2, r1
 8004674:	2200      	movs	r2, #0
 8004676:	705a      	strb	r2, [r3, #1]
			snippets[numOfRecordedSnippets].cond.buffer1[0] = port;		// Store button port number	
 8004678:	709f      	strb	r7, [r3, #2]
			if (!strncmp((char *)&string[3], "clicked", 7))
 800467a:	1cee      	adds	r6, r5, #3
 800467c:	3207      	adds	r2, #7
 800467e:	49b1      	ldr	r1, [pc, #708]	; (8004944 <ParseSnippetCondition+0x398>)
 8004680:	0030      	movs	r0, r6
 8004682:	f012 f8ae 	bl	80167e2 <strncmp>
 8004686:	2800      	cmp	r0, #0
 8004688:	d124      	bne.n	80046d4 <ParseSnippetCondition+0x128>
				snippets[numOfRecordedSnippets].cond.buffer1[1] = CLICKED;	
 800468a:	00a3      	lsls	r3, r4, #2
 800468c:	191c      	adds	r4, r3, r4
 800468e:	00a4      	lsls	r4, r4, #2
 8004690:	4ba9      	ldr	r3, [pc, #676]	; (8004938 <ParseSnippetCondition+0x38c>)
 8004692:	191c      	adds	r4, r3, r4
 8004694:	2305      	movs	r3, #5
 8004696:	70e3      	strb	r3, [r4, #3]
				if ((button[port].events & BUTTON_EVENT_CLICKED) != BUTTON_EVENT_CLICKED)		// Enable the event
 8004698:	00fa      	lsls	r2, r7, #3
 800469a:	19d2      	adds	r2, r2, r7
 800469c:	4baa      	ldr	r3, [pc, #680]	; (8004948 <ParseSnippetCondition+0x39c>)
 800469e:	189b      	adds	r3, r3, r2
 80046a0:	7a1b      	ldrb	r3, [r3, #8]
 80046a2:	2201      	movs	r2, #1
 80046a4:	0016      	movs	r6, r2
 80046a6:	401e      	ands	r6, r3
 80046a8:	421a      	tst	r2, r3
 80046aa:	d005      	beq.n	80046b8 <ParseSnippetCondition+0x10c>
				status = BOS_OK;
 80046ac:	2600      	movs	r6, #0
			++numOfRecordedSnippets;		// Record a successful Snippet			
 80046ae:	4aa1      	ldr	r2, [pc, #644]	; (8004934 <ParseSnippetCondition+0x388>)
 80046b0:	7813      	ldrb	r3, [r2, #0]
 80046b2:	3301      	adds	r3, #1
 80046b4:	7013      	strb	r3, [r2, #0]
 80046b6:	e17c      	b.n	80049b2 <ParseSnippetCondition+0x406>
					SetButtonEvents(port, 1, 0, 0, 0, 0, 0, 0, 0, BUTTON_EVENT_MODE_OR);
 80046b8:	2301      	movs	r3, #1
 80046ba:	9305      	str	r3, [sp, #20]
 80046bc:	2300      	movs	r3, #0
 80046be:	9304      	str	r3, [sp, #16]
 80046c0:	9303      	str	r3, [sp, #12]
 80046c2:	9302      	str	r3, [sp, #8]
 80046c4:	9301      	str	r3, [sp, #4]
 80046c6:	9300      	str	r3, [sp, #0]
 80046c8:	2200      	movs	r2, #0
 80046ca:	2101      	movs	r1, #1
 80046cc:	0038      	movs	r0, r7
 80046ce:	f003 ff05 	bl	80084dc <SetButtonEvents>
 80046d2:	e7ec      	b.n	80046ae <ParseSnippetCondition+0x102>
			else if (!strncmp((char *)&string[3], "double clicked", 14))
 80046d4:	220e      	movs	r2, #14
 80046d6:	499d      	ldr	r1, [pc, #628]	; (800494c <ParseSnippetCondition+0x3a0>)
 80046d8:	0030      	movs	r0, r6
 80046da:	f012 f882 	bl	80167e2 <strncmp>
 80046de:	2800      	cmp	r0, #0
 80046e0:	d120      	bne.n	8004724 <ParseSnippetCondition+0x178>
				snippets[numOfRecordedSnippets].cond.buffer1[1] = DBL_CLICKED;			
 80046e2:	00a3      	lsls	r3, r4, #2
 80046e4:	191c      	adds	r4, r3, r4
 80046e6:	00a4      	lsls	r4, r4, #2
 80046e8:	4b93      	ldr	r3, [pc, #588]	; (8004938 <ParseSnippetCondition+0x38c>)
 80046ea:	191c      	adds	r4, r3, r4
 80046ec:	2306      	movs	r3, #6
 80046ee:	70e3      	strb	r3, [r4, #3]
				if ((button[port].events & BUTTON_EVENT_DBL_CLICKED) != BUTTON_EVENT_DBL_CLICKED)
 80046f0:	00fa      	lsls	r2, r7, #3
 80046f2:	19d2      	adds	r2, r2, r7
 80046f4:	4b94      	ldr	r3, [pc, #592]	; (8004948 <ParseSnippetCondition+0x39c>)
 80046f6:	189b      	adds	r3, r3, r2
 80046f8:	7a1b      	ldrb	r3, [r3, #8]
 80046fa:	2202      	movs	r2, #2
 80046fc:	0016      	movs	r6, r2
 80046fe:	401e      	ands	r6, r3
 8004700:	421a      	tst	r2, r3
 8004702:	d001      	beq.n	8004708 <ParseSnippetCondition+0x15c>
				status = BOS_OK;					
 8004704:	2600      	movs	r6, #0
 8004706:	e7d2      	b.n	80046ae <ParseSnippetCondition+0x102>
					SetButtonEvents(port, 0, 1, 0, 0, 0, 0, 0, 0, BUTTON_EVENT_MODE_OR);
 8004708:	2301      	movs	r3, #1
 800470a:	9305      	str	r3, [sp, #20]
 800470c:	2300      	movs	r3, #0
 800470e:	9304      	str	r3, [sp, #16]
 8004710:	9303      	str	r3, [sp, #12]
 8004712:	9302      	str	r3, [sp, #8]
 8004714:	9301      	str	r3, [sp, #4]
 8004716:	9300      	str	r3, [sp, #0]
 8004718:	3a01      	subs	r2, #1
 800471a:	2100      	movs	r1, #0
 800471c:	0038      	movs	r0, r7
 800471e:	f003 fedd 	bl	80084dc <SetButtonEvents>
 8004722:	e7c4      	b.n	80046ae <ParseSnippetCondition+0x102>
			else if (!strncmp((char *)&string[3], "pressed for ", 12))
 8004724:	220c      	movs	r2, #12
 8004726:	498a      	ldr	r1, [pc, #552]	; (8004950 <ParseSnippetCondition+0x3a4>)
 8004728:	0030      	movs	r0, r6
 800472a:	f012 f85a 	bl	80167e2 <strncmp>
 800472e:	2800      	cmp	r0, #0
 8004730:	d17b      	bne.n	800482a <ParseSnippetCondition+0x27e>
				if (!button[port].pressedX1Sec) {	
 8004732:	00fa      	lsls	r2, r7, #3
 8004734:	19d2      	adds	r2, r2, r7
 8004736:	4b84      	ldr	r3, [pc, #528]	; (8004948 <ParseSnippetCondition+0x39c>)
 8004738:	189b      	adds	r3, r3, r2
 800473a:	789e      	ldrb	r6, [r3, #2]
 800473c:	2e00      	cmp	r6, #0
 800473e:	d00f      	beq.n	8004760 <ParseSnippetCondition+0x1b4>
				} else if (!button[port].pressedX2Sec) {	
 8004740:	00fa      	lsls	r2, r7, #3
 8004742:	19d2      	adds	r2, r2, r7
 8004744:	4b80      	ldr	r3, [pc, #512]	; (8004948 <ParseSnippetCondition+0x39c>)
 8004746:	189b      	adds	r3, r3, r2
 8004748:	78de      	ldrb	r6, [r3, #3]
 800474a:	2e00      	cmp	r6, #0
 800474c:	d029      	beq.n	80047a2 <ParseSnippetCondition+0x1f6>
				} else if (!button[port].pressedX3Sec) {	
 800474e:	00fa      	lsls	r2, r7, #3
 8004750:	19d2      	adds	r2, r2, r7
 8004752:	4b7d      	ldr	r3, [pc, #500]	; (8004948 <ParseSnippetCondition+0x39c>)
 8004754:	189b      	adds	r3, r3, r2
 8004756:	791e      	ldrb	r6, [r3, #4]
 8004758:	2e00      	cmp	r6, #0
 800475a:	d044      	beq.n	80047e6 <ParseSnippetCondition+0x23a>
					status = BOS_ERR_BUTTON_PRESS_EVENT_FULL;
 800475c:	260c      	movs	r6, #12
 800475e:	e7a6      	b.n	80046ae <ParseSnippetCondition+0x102>
					snippets[numOfRecordedSnippets].cond.buffer1[1] = PRESSED_FOR_X1_SEC;	
 8004760:	4b75      	ldr	r3, [pc, #468]	; (8004938 <ParseSnippetCondition+0x38c>)
 8004762:	4698      	mov	r8, r3
 8004764:	00a3      	lsls	r3, r4, #2
 8004766:	191b      	adds	r3, r3, r4
 8004768:	009b      	lsls	r3, r3, #2
 800476a:	4443      	add	r3, r8
 800476c:	2209      	movs	r2, #9
 800476e:	70da      	strb	r2, [r3, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] = atoi((char *)&string[15]);
 8004770:	0028      	movs	r0, r5
 8004772:	300f      	adds	r0, #15
 8004774:	f011 fe8b 	bl	801648e <atoi>
 8004778:	b2c3      	uxtb	r3, r0
 800477a:	4a6e      	ldr	r2, [pc, #440]	; (8004934 <ParseSnippetCondition+0x388>)
 800477c:	7811      	ldrb	r1, [r2, #0]
 800477e:	008a      	lsls	r2, r1, #2
 8004780:	1852      	adds	r2, r2, r1
 8004782:	0092      	lsls	r2, r2, #2
 8004784:	4442      	add	r2, r8
 8004786:	7113      	strb	r3, [r2, #4]
					SetButtonEvents(port, 0, 0, snippets[numOfRecordedSnippets].cond.buffer1[2], 0, 0, 0, 0, 0, BUTTON_EVENT_MODE_OR);
 8004788:	2201      	movs	r2, #1
 800478a:	9205      	str	r2, [sp, #20]
 800478c:	2200      	movs	r2, #0
 800478e:	9204      	str	r2, [sp, #16]
 8004790:	9203      	str	r2, [sp, #12]
 8004792:	9202      	str	r2, [sp, #8]
 8004794:	9201      	str	r2, [sp, #4]
 8004796:	9200      	str	r2, [sp, #0]
 8004798:	2100      	movs	r1, #0
 800479a:	0038      	movs	r0, r7
 800479c:	f003 fe9e 	bl	80084dc <SetButtonEvents>
					status = BOS_OK;
 80047a0:	e785      	b.n	80046ae <ParseSnippetCondition+0x102>
					snippets[numOfRecordedSnippets].cond.buffer1[1] = PRESSED_FOR_X2_SEC;	
 80047a2:	4b65      	ldr	r3, [pc, #404]	; (8004938 <ParseSnippetCondition+0x38c>)
 80047a4:	4698      	mov	r8, r3
 80047a6:	00a3      	lsls	r3, r4, #2
 80047a8:	191b      	adds	r3, r3, r4
 80047aa:	009b      	lsls	r3, r3, #2
 80047ac:	4443      	add	r3, r8
 80047ae:	220a      	movs	r2, #10
 80047b0:	70da      	strb	r2, [r3, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] = atoi((char *)&string[15]);
 80047b2:	0028      	movs	r0, r5
 80047b4:	300f      	adds	r0, #15
 80047b6:	f011 fe6a 	bl	801648e <atoi>
 80047ba:	b2c0      	uxtb	r0, r0
 80047bc:	4b5d      	ldr	r3, [pc, #372]	; (8004934 <ParseSnippetCondition+0x388>)
 80047be:	781a      	ldrb	r2, [r3, #0]
 80047c0:	0093      	lsls	r3, r2, #2
 80047c2:	189b      	adds	r3, r3, r2
 80047c4:	009b      	lsls	r3, r3, #2
 80047c6:	4443      	add	r3, r8
 80047c8:	7118      	strb	r0, [r3, #4]
					SetButtonEvents(port, 0, 0, 0, snippets[numOfRecordedSnippets].cond.buffer1[2], 0, 0, 0, 0, BUTTON_EVENT_MODE_OR);
 80047ca:	2301      	movs	r3, #1
 80047cc:	9305      	str	r3, [sp, #20]
 80047ce:	2300      	movs	r3, #0
 80047d0:	9304      	str	r3, [sp, #16]
 80047d2:	9303      	str	r3, [sp, #12]
 80047d4:	9302      	str	r3, [sp, #8]
 80047d6:	9301      	str	r3, [sp, #4]
 80047d8:	9000      	str	r0, [sp, #0]
 80047da:	2200      	movs	r2, #0
 80047dc:	2100      	movs	r1, #0
 80047de:	0038      	movs	r0, r7
 80047e0:	f003 fe7c 	bl	80084dc <SetButtonEvents>
					status = BOS_OK;		
 80047e4:	e763      	b.n	80046ae <ParseSnippetCondition+0x102>
					snippets[numOfRecordedSnippets].cond.buffer1[1] = PRESSED_FOR_X3_SEC;	
 80047e6:	4b54      	ldr	r3, [pc, #336]	; (8004938 <ParseSnippetCondition+0x38c>)
 80047e8:	4698      	mov	r8, r3
 80047ea:	00a3      	lsls	r3, r4, #2
 80047ec:	191b      	adds	r3, r3, r4
 80047ee:	009b      	lsls	r3, r3, #2
 80047f0:	4443      	add	r3, r8
 80047f2:	220b      	movs	r2, #11
 80047f4:	70da      	strb	r2, [r3, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] = atoi((char *)&string[15]);
 80047f6:	0028      	movs	r0, r5
 80047f8:	300f      	adds	r0, #15
 80047fa:	f011 fe48 	bl	801648e <atoi>
 80047fe:	b2c0      	uxtb	r0, r0
 8004800:	4b4c      	ldr	r3, [pc, #304]	; (8004934 <ParseSnippetCondition+0x388>)
 8004802:	781a      	ldrb	r2, [r3, #0]
 8004804:	0093      	lsls	r3, r2, #2
 8004806:	189b      	adds	r3, r3, r2
 8004808:	009b      	lsls	r3, r3, #2
 800480a:	4443      	add	r3, r8
 800480c:	7118      	strb	r0, [r3, #4]
					SetButtonEvents(port, 0, 0, 0, 0, snippets[numOfRecordedSnippets].cond.buffer1[2], 0, 0, 0, BUTTON_EVENT_MODE_OR);
 800480e:	2301      	movs	r3, #1
 8004810:	9305      	str	r3, [sp, #20]
 8004812:	2300      	movs	r3, #0
 8004814:	9304      	str	r3, [sp, #16]
 8004816:	9303      	str	r3, [sp, #12]
 8004818:	9302      	str	r3, [sp, #8]
 800481a:	9001      	str	r0, [sp, #4]
 800481c:	9300      	str	r3, [sp, #0]
 800481e:	2200      	movs	r2, #0
 8004820:	2100      	movs	r1, #0
 8004822:	0038      	movs	r0, r7
 8004824:	f003 fe5a 	bl	80084dc <SetButtonEvents>
					status = BOS_OK;	
 8004828:	e741      	b.n	80046ae <ParseSnippetCondition+0x102>
			else if (!strncmp((char *)&string[3], "released for ", 13))
 800482a:	220d      	movs	r2, #13
 800482c:	4949      	ldr	r1, [pc, #292]	; (8004954 <ParseSnippetCondition+0x3a8>)
 800482e:	0030      	movs	r0, r6
 8004830:	f011 ffd7 	bl	80167e2 <strncmp>
	BOS_Status status = BOS_OK;
 8004834:	2600      	movs	r6, #0
			else if (!strncmp((char *)&string[3], "released for ", 13))
 8004836:	2800      	cmp	r0, #0
 8004838:	d000      	beq.n	800483c <ParseSnippetCondition+0x290>
 800483a:	e738      	b.n	80046ae <ParseSnippetCondition+0x102>
				if (!button[port].releasedY1Sec) {	
 800483c:	00fa      	lsls	r2, r7, #3
 800483e:	19d2      	adds	r2, r2, r7
 8004840:	4b41      	ldr	r3, [pc, #260]	; (8004948 <ParseSnippetCondition+0x39c>)
 8004842:	189b      	adds	r3, r3, r2
 8004844:	795e      	ldrb	r6, [r3, #5]
 8004846:	2e00      	cmp	r6, #0
 8004848:	d00f      	beq.n	800486a <ParseSnippetCondition+0x2be>
				} else if (!button[port].releasedY2Sec) {	
 800484a:	00fa      	lsls	r2, r7, #3
 800484c:	19d2      	adds	r2, r2, r7
 800484e:	4b3e      	ldr	r3, [pc, #248]	; (8004948 <ParseSnippetCondition+0x39c>)
 8004850:	189b      	adds	r3, r3, r2
 8004852:	799e      	ldrb	r6, [r3, #6]
 8004854:	2e00      	cmp	r6, #0
 8004856:	d02a      	beq.n	80048ae <ParseSnippetCondition+0x302>
				} else if (!button[port].releasedY3Sec) {	
 8004858:	00fa      	lsls	r2, r7, #3
 800485a:	19d2      	adds	r2, r2, r7
 800485c:	4b3a      	ldr	r3, [pc, #232]	; (8004948 <ParseSnippetCondition+0x39c>)
 800485e:	189b      	adds	r3, r3, r2
 8004860:	79de      	ldrb	r6, [r3, #7]
 8004862:	2e00      	cmp	r6, #0
 8004864:	d044      	beq.n	80048f0 <ParseSnippetCondition+0x344>
					status = BOS_ERR_BUTTON_RELEASE_EVENT_FULL;
 8004866:	260d      	movs	r6, #13
 8004868:	e721      	b.n	80046ae <ParseSnippetCondition+0x102>
					snippets[numOfRecordedSnippets].cond.buffer1[1] = RELEASED_FOR_Y1_SEC;	
 800486a:	4b33      	ldr	r3, [pc, #204]	; (8004938 <ParseSnippetCondition+0x38c>)
 800486c:	4698      	mov	r8, r3
 800486e:	00a3      	lsls	r3, r4, #2
 8004870:	191b      	adds	r3, r3, r4
 8004872:	009b      	lsls	r3, r3, #2
 8004874:	4443      	add	r3, r8
 8004876:	220c      	movs	r2, #12
 8004878:	70da      	strb	r2, [r3, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] = atoi((char *)&string[16]);
 800487a:	0028      	movs	r0, r5
 800487c:	3010      	adds	r0, #16
 800487e:	f011 fe06 	bl	801648e <atoi>
 8004882:	b2c0      	uxtb	r0, r0
 8004884:	4b2b      	ldr	r3, [pc, #172]	; (8004934 <ParseSnippetCondition+0x388>)
 8004886:	781a      	ldrb	r2, [r3, #0]
 8004888:	0093      	lsls	r3, r2, #2
 800488a:	189b      	adds	r3, r3, r2
 800488c:	009b      	lsls	r3, r3, #2
 800488e:	4443      	add	r3, r8
 8004890:	7118      	strb	r0, [r3, #4]
					SetButtonEvents(port, 0, 0, 0, 0, 0, snippets[numOfRecordedSnippets].cond.buffer1[2], 0, 0, BUTTON_EVENT_MODE_OR);
 8004892:	2301      	movs	r3, #1
 8004894:	9305      	str	r3, [sp, #20]
 8004896:	2300      	movs	r3, #0
 8004898:	9304      	str	r3, [sp, #16]
 800489a:	9303      	str	r3, [sp, #12]
 800489c:	9002      	str	r0, [sp, #8]
 800489e:	9301      	str	r3, [sp, #4]
 80048a0:	9300      	str	r3, [sp, #0]
 80048a2:	2200      	movs	r2, #0
 80048a4:	2100      	movs	r1, #0
 80048a6:	0038      	movs	r0, r7
 80048a8:	f003 fe18 	bl	80084dc <SetButtonEvents>
					status = BOS_OK;
 80048ac:	e6ff      	b.n	80046ae <ParseSnippetCondition+0x102>
					snippets[numOfRecordedSnippets].cond.buffer1[1] = RELEASED_FOR_Y2_SEC;	
 80048ae:	4b22      	ldr	r3, [pc, #136]	; (8004938 <ParseSnippetCondition+0x38c>)
 80048b0:	4698      	mov	r8, r3
 80048b2:	2314      	movs	r3, #20
 80048b4:	4699      	mov	r9, r3
 80048b6:	435c      	muls	r4, r3
 80048b8:	4444      	add	r4, r8
 80048ba:	3b07      	subs	r3, #7
 80048bc:	70e3      	strb	r3, [r4, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] = atoi((char *)&string[16]);
 80048be:	0028      	movs	r0, r5
 80048c0:	3010      	adds	r0, #16
 80048c2:	f011 fde4 	bl	801648e <atoi>
 80048c6:	b2c0      	uxtb	r0, r0
 80048c8:	4b1a      	ldr	r3, [pc, #104]	; (8004934 <ParseSnippetCondition+0x388>)
 80048ca:	781b      	ldrb	r3, [r3, #0]
 80048cc:	464a      	mov	r2, r9
 80048ce:	4353      	muls	r3, r2
 80048d0:	4443      	add	r3, r8
 80048d2:	7118      	strb	r0, [r3, #4]
					SetButtonEvents(port, 0, 0, 0, 0, 0, 0, snippets[numOfRecordedSnippets].cond.buffer1[2], 0, BUTTON_EVENT_MODE_OR);
 80048d4:	2301      	movs	r3, #1
 80048d6:	9305      	str	r3, [sp, #20]
 80048d8:	2100      	movs	r1, #0
 80048da:	9104      	str	r1, [sp, #16]
 80048dc:	9003      	str	r0, [sp, #12]
 80048de:	9102      	str	r1, [sp, #8]
 80048e0:	9101      	str	r1, [sp, #4]
 80048e2:	9100      	str	r1, [sp, #0]
 80048e4:	000b      	movs	r3, r1
 80048e6:	000a      	movs	r2, r1
 80048e8:	0038      	movs	r0, r7
 80048ea:	f003 fdf7 	bl	80084dc <SetButtonEvents>
					status = BOS_OK;		
 80048ee:	e6de      	b.n	80046ae <ParseSnippetCondition+0x102>
					snippets[numOfRecordedSnippets].cond.buffer1[1] = RELEASED_FOR_Y3_SEC;	
 80048f0:	4b11      	ldr	r3, [pc, #68]	; (8004938 <ParseSnippetCondition+0x38c>)
 80048f2:	4698      	mov	r8, r3
 80048f4:	2314      	movs	r3, #20
 80048f6:	4699      	mov	r9, r3
 80048f8:	435c      	muls	r4, r3
 80048fa:	4444      	add	r4, r8
 80048fc:	3b06      	subs	r3, #6
 80048fe:	70e3      	strb	r3, [r4, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] = atoi((char *)&string[16]);
 8004900:	0028      	movs	r0, r5
 8004902:	3010      	adds	r0, #16
 8004904:	f011 fdc3 	bl	801648e <atoi>
 8004908:	b2c0      	uxtb	r0, r0
 800490a:	4b0a      	ldr	r3, [pc, #40]	; (8004934 <ParseSnippetCondition+0x388>)
 800490c:	781b      	ldrb	r3, [r3, #0]
 800490e:	464a      	mov	r2, r9
 8004910:	4353      	muls	r3, r2
 8004912:	4443      	add	r3, r8
 8004914:	7118      	strb	r0, [r3, #4]
					SetButtonEvents(port, 0, 0, 0, 0, 0, 0, 0, snippets[numOfRecordedSnippets].cond.buffer1[2], BUTTON_EVENT_MODE_OR);					
 8004916:	2301      	movs	r3, #1
 8004918:	9305      	str	r3, [sp, #20]
 800491a:	9004      	str	r0, [sp, #16]
 800491c:	2100      	movs	r1, #0
 800491e:	9103      	str	r1, [sp, #12]
 8004920:	9102      	str	r1, [sp, #8]
 8004922:	9101      	str	r1, [sp, #4]
 8004924:	9100      	str	r1, [sp, #0]
 8004926:	000b      	movs	r3, r1
 8004928:	000a      	movs	r2, r1
 800492a:	0038      	movs	r0, r7
 800492c:	f003 fdd6 	bl	80084dc <SetButtonEvents>
					status = BOS_OK;	
 8004930:	e6bd      	b.n	80046ae <ParseSnippetCondition+0x102>
 8004932:	46c0      	nop			; (mov r8, r8)
 8004934:	20000ca3 	.word	0x20000ca3
 8004938:	20006384 	.word	0x20006384
 800493c:	20000c08 	.word	0x20000c08
 8004940:	08019ca8 	.word	0x08019ca8
 8004944:	0801a848 	.word	0x0801a848
 8004948:	20000f3c 	.word	0x20000f3c
 800494c:	0801a0b4 	.word	0x0801a0b4
 8004950:	0801a0c4 	.word	0x0801a0c4
 8004954:	0801a0d4 	.word	0x0801a0d4
			else if (secondPart != NULL && thirdPart != NULL) 
 8004958:	2e00      	cmp	r6, #0
 800495a:	d051      	beq.n	8004a00 <ParseSnippetCondition+0x454>
 800495c:	2d00      	cmp	r5, #0
 800495e:	d051      	beq.n	8004a04 <ParseSnippetCondition+0x458>
				modPar2 = IsModuleParameter(thirdPart);
 8004960:	0028      	movs	r0, r5
 8004962:	f7fe fe15 	bl	8003590 <IsModuleParameter>
				if (modPar2) 		// Found a module parameter
 8004966:	2800      	cmp	r0, #0
 8004968:	d029      	beq.n	80049be <ParseSnippetCondition+0x412>
					snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_MODULE_PARAM_PARAM;
 800496a:	4b28      	ldr	r3, [pc, #160]	; (8004a0c <ParseSnippetCondition+0x460>)
 800496c:	781d      	ldrb	r5, [r3, #0]
 800496e:	4a28      	ldr	r2, [pc, #160]	; (8004a10 <ParseSnippetCondition+0x464>)
 8004970:	00ab      	lsls	r3, r5, #2
 8004972:	1959      	adds	r1, r3, r5
 8004974:	0089      	lsls	r1, r1, #2
 8004976:	2704      	movs	r7, #4
 8004978:	548f      	strb	r7, [r1, r2]
					snippets[numOfRecordedSnippets].cond.buffer1[1] = modPar1;		// Leaving first buffer byte for remote module ID
 800497a:	1959      	adds	r1, r3, r5
 800497c:	0089      	lsls	r1, r1, #2
 800497e:	1851      	adds	r1, r2, r1
 8004980:	70cc      	strb	r4, [r1, #3]
					snippets[numOfRecordedSnippets].cond.buffer2[1] = modPar2;		// Leaving first buffer byte for remote module ID				
 8004982:	71c8      	strb	r0, [r1, #7]
				snippets[numOfRecordedSnippets].cond.mathOperator = IsMathOperator(secondPart);
 8004984:	4c21      	ldr	r4, [pc, #132]	; (8004a0c <ParseSnippetCondition+0x460>)
 8004986:	7825      	ldrb	r5, [r4, #0]
 8004988:	0030      	movs	r0, r6
 800498a:	f7fe fe0d 	bl	80035a8 <IsMathOperator>
 800498e:	4a20      	ldr	r2, [pc, #128]	; (8004a10 <ParseSnippetCondition+0x464>)
 8004990:	00ab      	lsls	r3, r5, #2
 8004992:	195b      	adds	r3, r3, r5
 8004994:	009b      	lsls	r3, r3, #2
 8004996:	18d3      	adds	r3, r2, r3
 8004998:	7058      	strb	r0, [r3, #1]
				if (!snippets[numOfRecordedSnippets].cond.mathOperator)
 800499a:	7821      	ldrb	r1, [r4, #0]
 800499c:	008b      	lsls	r3, r1, #2
 800499e:	185b      	adds	r3, r3, r1
 80049a0:	009b      	lsls	r3, r3, #2
 80049a2:	18d3      	adds	r3, r2, r3
 80049a4:	785b      	ldrb	r3, [r3, #1]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d02e      	beq.n	8004a08 <ParseSnippetCondition+0x45c>
				++numOfRecordedSnippets;		// Record a successful Snippet
 80049aa:	3101      	adds	r1, #1
 80049ac:	4b17      	ldr	r3, [pc, #92]	; (8004a0c <ParseSnippetCondition+0x460>)
 80049ae:	7019      	strb	r1, [r3, #0]
				return BOS_OK;				
 80049b0:	2600      	movs	r6, #0
	}
	
	// Note: after exiting this function, numOfRecordedSnippets refers to the next empty Snippet. Substract by one to reference the last Snippet.
	
	return status;
}
 80049b2:	0030      	movs	r0, r6
 80049b4:	b009      	add	sp, #36	; 0x24
 80049b6:	bcc0      	pop	{r6, r7}
 80049b8:	46b9      	mov	r9, r7
 80049ba:	46b0      	mov	r8, r6
 80049bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
					snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_MODULE_PARAM_CONST;
 80049be:	4b13      	ldr	r3, [pc, #76]	; (8004a0c <ParseSnippetCondition+0x460>)
 80049c0:	4698      	mov	r8, r3
 80049c2:	781a      	ldrb	r2, [r3, #0]
 80049c4:	4f12      	ldr	r7, [pc, #72]	; (8004a10 <ParseSnippetCondition+0x464>)
 80049c6:	0093      	lsls	r3, r2, #2
 80049c8:	1899      	adds	r1, r3, r2
 80049ca:	0089      	lsls	r1, r1, #2
 80049cc:	2003      	movs	r0, #3
 80049ce:	55c8      	strb	r0, [r1, r7]
					snippets[numOfRecordedSnippets].cond.buffer1[1] = modPar1;		// Leaving first buffer byte for remote module ID
 80049d0:	187b      	adds	r3, r7, r1
 80049d2:	70dc      	strb	r4, [r3, #3]
					float constant = atof(thirdPart);
 80049d4:	0028      	movs	r0, r5
 80049d6:	f011 fd55 	bl	8016484 <atof>
 80049da:	f7fe f823 	bl	8002a24 <__aeabi_d2f>
 80049de:	9007      	str	r0, [sp, #28]
					memcpy(snippets[numOfRecordedSnippets].cond.buffer2, &constant, sizeof(float));		// This buffer can be misaligned and cause hardfault on F0
 80049e0:	4643      	mov	r3, r8
 80049e2:	781b      	ldrb	r3, [r3, #0]
 80049e4:	0098      	lsls	r0, r3, #2
 80049e6:	18c0      	adds	r0, r0, r3
 80049e8:	0080      	lsls	r0, r0, #2
 80049ea:	3006      	adds	r0, #6
 80049ec:	19c0      	adds	r0, r0, r7
 80049ee:	2204      	movs	r2, #4
 80049f0:	a907      	add	r1, sp, #28
 80049f2:	f011 fd9f 	bl	8016534 <memcpy>
 80049f6:	e7c5      	b.n	8004984 <ParseSnippetCondition+0x3d8>
		return BOS_ERR_SNIP_MEM_FULL;
 80049f8:	260e      	movs	r6, #14
 80049fa:	e7da      	b.n	80049b2 <ParseSnippetCondition+0x406>
			return BOS_ERR_WrongParam;
 80049fc:	2667      	movs	r6, #103	; 0x67
 80049fe:	e7d8      	b.n	80049b2 <ParseSnippetCondition+0x406>
				return BOS_ERR_WrongParam;
 8004a00:	2667      	movs	r6, #103	; 0x67
 8004a02:	e7d6      	b.n	80049b2 <ParseSnippetCondition+0x406>
 8004a04:	2667      	movs	r6, #103	; 0x67
 8004a06:	e7d4      	b.n	80049b2 <ParseSnippetCondition+0x406>
					return BOS_ERR_WrongParam;
 8004a08:	2667      	movs	r6, #103	; 0x67
 8004a0a:	e7d2      	b.n	80049b2 <ParseSnippetCondition+0x406>
 8004a0c:	20000ca3 	.word	0x20000ca3
 8004a10:	20006384 	.word	0x20006384

08004a14 <AddSnippet>:
{
 8004a14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a16:	000c      	movs	r4, r1
	switch (code)
 8004a18:	2802      	cmp	r0, #2
 8004a1a:	d017      	beq.n	8004a4c <AddSnippet+0x38>
 8004a1c:	2803      	cmp	r0, #3
 8004a1e:	d003      	beq.n	8004a28 <AddSnippet+0x14>
 8004a20:	2801      	cmp	r0, #1
 8004a22:	d00f      	beq.n	8004a44 <AddSnippet+0x30>
 8004a24:	2000      	movs	r0, #0
}
 8004a26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			snippets[numOfRecordedSnippets-1].state = true;
 8004a28:	4b35      	ldr	r3, [pc, #212]	; (8004b00 <AddSnippet+0xec>)
 8004a2a:	781a      	ldrb	r2, [r3, #0]
 8004a2c:	3a01      	subs	r2, #1
 8004a2e:	0093      	lsls	r3, r2, #2
 8004a30:	189b      	adds	r3, r3, r2
 8004a32:	009b      	lsls	r3, r3, #2
 8004a34:	4a33      	ldr	r2, [pc, #204]	; (8004b04 <AddSnippet+0xf0>)
 8004a36:	18d3      	adds	r3, r2, r3
 8004a38:	2201      	movs	r2, #1
 8004a3a:	741a      	strb	r2, [r3, #16]
			SaveToRO();
 8004a3c:	f006 fc78 	bl	800b330 <SaveToRO>
	return BOS_OK;
 8004a40:	2000      	movs	r0, #0
			break;
 8004a42:	e7f0      	b.n	8004a26 <AddSnippet+0x12>
			return ParseSnippetCondition(string);
 8004a44:	0008      	movs	r0, r1
 8004a46:	f7ff fdb1 	bl	80045ac <ParseSnippetCondition>
 8004a4a:	e7ec      	b.n	8004a26 <AddSnippet+0x12>
			if (snippets[numOfRecordedSnippets-1].cmd != NULL) 
 8004a4c:	4b2c      	ldr	r3, [pc, #176]	; (8004b00 <AddSnippet+0xec>)
 8004a4e:	781d      	ldrb	r5, [r3, #0]
 8004a50:	3d01      	subs	r5, #1
 8004a52:	00ab      	lsls	r3, r5, #2
 8004a54:	195b      	adds	r3, r3, r5
 8004a56:	009b      	lsls	r3, r3, #2
 8004a58:	4a2a      	ldr	r2, [pc, #168]	; (8004b04 <AddSnippet+0xf0>)
 8004a5a:	18d3      	adds	r3, r2, r3
 8004a5c:	68de      	ldr	r6, [r3, #12]
 8004a5e:	2e00      	cmp	r6, #0
 8004a60:	d032      	beq.n	8004ac8 <AddSnippet+0xb4>
				int currentLenght = strlen(snippets[numOfRecordedSnippets-1].cmd);
 8004a62:	0030      	movs	r0, r6
 8004a64:	f7fb fb58 	bl	8000118 <strlen>
 8004a68:	0007      	movs	r7, r0
				snippets[numOfRecordedSnippets-1].cmd = (char *) realloc(snippets[numOfRecordedSnippets-1].cmd, currentLenght+strlen(string)+2);
 8004a6a:	0020      	movs	r0, r4
 8004a6c:	f7fb fb54 	bl	8000118 <strlen>
 8004a70:	1839      	adds	r1, r7, r0
 8004a72:	3102      	adds	r1, #2
 8004a74:	0030      	movs	r0, r6
 8004a76:	f011 fe55 	bl	8016724 <realloc>
 8004a7a:	4e22      	ldr	r6, [pc, #136]	; (8004b04 <AddSnippet+0xf0>)
 8004a7c:	00ab      	lsls	r3, r5, #2
 8004a7e:	195d      	adds	r5, r3, r5
 8004a80:	00ad      	lsls	r5, r5, #2
 8004a82:	1975      	adds	r5, r6, r5
 8004a84:	60e8      	str	r0, [r5, #12]
				strcpy(snippets[numOfRecordedSnippets-1].cmd + currentLenght + 1, string);
 8004a86:	4d1e      	ldr	r5, [pc, #120]	; (8004b00 <AddSnippet+0xec>)
 8004a88:	782a      	ldrb	r2, [r5, #0]
 8004a8a:	3a01      	subs	r2, #1
 8004a8c:	0093      	lsls	r3, r2, #2
 8004a8e:	189b      	adds	r3, r3, r2
 8004a90:	009b      	lsls	r3, r3, #2
 8004a92:	18f3      	adds	r3, r6, r3
 8004a94:	1c7a      	adds	r2, r7, #1
 8004a96:	68d8      	ldr	r0, [r3, #12]
 8004a98:	1880      	adds	r0, r0, r2
 8004a9a:	0021      	movs	r1, r4
 8004a9c:	f011 fe99 	bl	80167d2 <strcpy>
				*(snippets[numOfRecordedSnippets-1].cmd + currentLenght) = 0x13;		// ENTER key between commands
 8004aa0:	782a      	ldrb	r2, [r5, #0]
 8004aa2:	3a01      	subs	r2, #1
 8004aa4:	0093      	lsls	r3, r2, #2
 8004aa6:	189b      	adds	r3, r3, r2
 8004aa8:	009b      	lsls	r3, r3, #2
 8004aaa:	18f3      	adds	r3, r6, r3
 8004aac:	68db      	ldr	r3, [r3, #12]
 8004aae:	2213      	movs	r2, #19
 8004ab0:	55da      	strb	r2, [r3, r7]
			if (snippets[numOfRecordedSnippets-1].cmd == NULL) {
 8004ab2:	782a      	ldrb	r2, [r5, #0]
 8004ab4:	3a01      	subs	r2, #1
 8004ab6:	0093      	lsls	r3, r2, #2
 8004ab8:	189b      	adds	r3, r3, r2
 8004aba:	009b      	lsls	r3, r3, #2
 8004abc:	18f6      	adds	r6, r6, r3
 8004abe:	68f3      	ldr	r3, [r6, #12]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d012      	beq.n	8004aea <AddSnippet+0xd6>
	return BOS_OK;
 8004ac4:	2000      	movs	r0, #0
 8004ac6:	e7ae      	b.n	8004a26 <AddSnippet+0x12>
				snippets[numOfRecordedSnippets-1].cmd = (char *) malloc(strlen(string)+1);
 8004ac8:	0008      	movs	r0, r1
 8004aca:	f7fb fb25 	bl	8000118 <strlen>
 8004ace:	3001      	adds	r0, #1
 8004ad0:	f011 fd0e 	bl	80164f0 <malloc>
 8004ad4:	00ab      	lsls	r3, r5, #2
 8004ad6:	195d      	adds	r5, r3, r5
 8004ad8:	00ad      	lsls	r5, r5, #2
 8004ada:	4b0a      	ldr	r3, [pc, #40]	; (8004b04 <AddSnippet+0xf0>)
 8004adc:	195d      	adds	r5, r3, r5
 8004ade:	60e8      	str	r0, [r5, #12]
				strcpy(snippets[numOfRecordedSnippets-1].cmd, string);
 8004ae0:	0021      	movs	r1, r4
 8004ae2:	f011 fe76 	bl	80167d2 <strcpy>
	return BOS_OK;
 8004ae6:	2000      	movs	r0, #0
 8004ae8:	e79d      	b.n	8004a26 <AddSnippet+0x12>
				memset(&snippets[numOfRecordedSnippets-1], 0, sizeof(snippet_t) );
 8004aea:	0090      	lsls	r0, r2, #2
 8004aec:	1880      	adds	r0, r0, r2
 8004aee:	0080      	lsls	r0, r0, #2
 8004af0:	4a04      	ldr	r2, [pc, #16]	; (8004b04 <AddSnippet+0xf0>)
 8004af2:	1880      	adds	r0, r0, r2
 8004af4:	2214      	movs	r2, #20
 8004af6:	2100      	movs	r1, #0
 8004af8:	f011 fd25 	bl	8016546 <memset>
				return BOS_ERR_SNIP_MEM_FULL;
 8004afc:	200e      	movs	r0, #14
 8004afe:	e792      	b.n	8004a26 <AddSnippet+0x12>
 8004b00:	20000ca3 	.word	0x20000ca3
 8004b04:	20006384 	.word	0x20006384

08004b08 <CLI_CommandParser>:
{
 8004b08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b0a:	46de      	mov	lr, fp
 8004b0c:	4657      	mov	r7, sl
 8004b0e:	464e      	mov	r6, r9
 8004b10:	4645      	mov	r5, r8
 8004b12:	b5e0      	push	{r5, r6, r7, lr}
 8004b14:	b08b      	sub	sp, #44	; 0x2c
 8004b16:	9004      	str	r0, [sp, #16]
 8004b18:	9103      	str	r1, [sp, #12]
 8004b1a:	0015      	movs	r5, r2
 8004b1c:	001c      	movs	r4, r3
	char* loc = 0; int16_t id = 0; char idString[MaxLengthOfAlias] = {0};
 8004b1e:	2300      	movs	r3, #0
 8004b20:	9307      	str	r3, [sp, #28]
 8004b22:	2205      	movs	r2, #5
 8004b24:	2100      	movs	r1, #0
 8004b26:	a808      	add	r0, sp, #32
 8004b28:	f011 fd0d 	bl	8016546 <memset>
		if (!recordSnippet && !strncmp((char *)cInputString, "if ", 3)) 
 8004b2c:	4bd8      	ldr	r3, [pc, #864]	; (8004e90 <CLI_CommandParser+0x388>)
 8004b2e:	4699      	mov	r9, r3
 8004b30:	e129      	b.n	8004d86 <CLI_CommandParser+0x27e>
			if (AddSnippet(SNIPPET_CONDITION, ( char * ) (cInputString+3)) != BOS_OK) {
 8004b32:	1ce9      	adds	r1, r5, #3
 8004b34:	3001      	adds	r0, #1
 8004b36:	f7ff ff6d 	bl	8004a14 <AddSnippet>
 8004b3a:	2800      	cmp	r0, #0
 8004b3c:	d105      	bne.n	8004b4a <CLI_CommandParser+0x42>
				recordSnippet = SNIPPET_COMMANDS;
 8004b3e:	4bd4      	ldr	r3, [pc, #848]	; (8004e90 <CLI_CommandParser+0x388>)
 8004b40:	2202      	movs	r2, #2
 8004b42:	701a      	strb	r2, [r3, #0]
				pcOutputString[0] = '\r';
 8004b44:	230d      	movs	r3, #13
 8004b46:	7023      	strb	r3, [r4, #0]
 8004b48:	e027      	b.n	8004b9a <CLI_CommandParser+0x92>
				sprintf( ( char * ) pcOutputString, "\nCannot store more Command Snippets. Please delete existing ones and try again.\n\r");
 8004b4a:	2252      	movs	r2, #82	; 0x52
 8004b4c:	49d1      	ldr	r1, [pc, #836]	; (8004e94 <CLI_CommandParser+0x38c>)
 8004b4e:	0020      	movs	r0, r4
 8004b50:	f011 fcf0 	bl	8016534 <memcpy>
				recordSnippet = 0;
 8004b54:	4bce      	ldr	r3, [pc, #824]	; (8004e90 <CLI_CommandParser+0x388>)
 8004b56:	2200      	movs	r2, #0
 8004b58:	701a      	strb	r2, [r3, #0]
 8004b5a:	e01e      	b.n	8004b9a <CLI_CommandParser+0x92>
		else if (recordSnippet && !strncmp((char *)cInputString, "end if", 6))
 8004b5c:	2206      	movs	r2, #6
 8004b5e:	49ce      	ldr	r1, [pc, #824]	; (8004e98 <CLI_CommandParser+0x390>)
 8004b60:	0028      	movs	r0, r5
 8004b62:	f011 fe3e 	bl	80167e2 <strncmp>
 8004b66:	2800      	cmp	r0, #0
 8004b68:	d00b      	beq.n	8004b82 <CLI_CommandParser+0x7a>
		else if (recordSnippet == SNIPPET_COMMANDS)
 8004b6a:	2e02      	cmp	r6, #2
 8004b6c:	d000      	beq.n	8004b70 <CLI_CommandParser+0x68>
 8004b6e:	e11a      	b.n	8004da6 <CLI_CommandParser+0x29e>
			if (AddSnippet(SNIPPET_COMMANDS, ( char * ) cInputString) != BOS_OK)
 8004b70:	0029      	movs	r1, r5
 8004b72:	2002      	movs	r0, #2
 8004b74:	f7ff ff4e 	bl	8004a14 <AddSnippet>
 8004b78:	2800      	cmp	r0, #0
 8004b7a:	d124      	bne.n	8004bc6 <CLI_CommandParser+0xbe>
				pcOutputString[0] = '\r';
 8004b7c:	230d      	movs	r3, #13
 8004b7e:	7023      	strb	r3, [r4, #0]
 8004b80:	e00b      	b.n	8004b9a <CLI_CommandParser+0x92>
			recordSnippet = 0;
 8004b82:	4bc3      	ldr	r3, [pc, #780]	; (8004e90 <CLI_CommandParser+0x388>)
 8004b84:	2200      	movs	r2, #0
 8004b86:	701a      	strb	r2, [r3, #0]
			AddSnippet(SNIPPET_ACTIVATE, "");				
 8004b88:	49c4      	ldr	r1, [pc, #784]	; (8004e9c <CLI_CommandParser+0x394>)
 8004b8a:	3003      	adds	r0, #3
 8004b8c:	f7ff ff42 	bl	8004a14 <AddSnippet>
			sprintf( ( char * ) pcOutputString, "\nConditional statement accepted and added to Command Snippets.\n\r");
 8004b90:	2241      	movs	r2, #65	; 0x41
 8004b92:	49c3      	ldr	r1, [pc, #780]	; (8004ea0 <CLI_CommandParser+0x398>)
 8004b94:	0020      	movs	r0, r4
 8004b96:	f011 fccd 	bl	8016534 <memcpy>
		if (strlen((char*)pcOutputString) > 0 && enableOutput)
 8004b9a:	7823      	ldrb	r3, [r4, #0]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d100      	bne.n	8004ba2 <CLI_CommandParser+0x9a>
 8004ba0:	e1a8      	b.n	8004ef4 <CLI_CommandParser+0x3ec>
 8004ba2:	9b03      	ldr	r3, [sp, #12]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d100      	bne.n	8004baa <CLI_CommandParser+0xa2>
 8004ba8:	e1bf      	b.n	8004f2a <CLI_CommandParser+0x422>
 8004baa:	2700      	movs	r7, #0
			writePxMutex(port, (char*)pcOutputString, strlen((char*)pcOutputString), cmd50ms, HAL_MAX_DELAY);		
 8004bac:	0020      	movs	r0, r4
 8004bae:	f7fb fab3 	bl	8000118 <strlen>
 8004bb2:	b282      	uxth	r2, r0
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	425b      	negs	r3, r3
 8004bb8:	9300      	str	r3, [sp, #0]
 8004bba:	3333      	adds	r3, #51	; 0x33
 8004bbc:	0021      	movs	r1, r4
 8004bbe:	9804      	ldr	r0, [sp, #16]
 8004bc0:	f009 f88e 	bl	800dce0 <writePxMutex>
 8004bc4:	e0d4      	b.n	8004d70 <CLI_CommandParser+0x268>
				sprintf( ( char * ) pcOutputString, "\nCannot store more Command Snippets. Please delete existing ones and try again.\n\r");
 8004bc6:	2252      	movs	r2, #82	; 0x52
 8004bc8:	49b2      	ldr	r1, [pc, #712]	; (8004e94 <CLI_CommandParser+0x38c>)
 8004bca:	0020      	movs	r0, r4
 8004bcc:	f011 fcb2 	bl	8016534 <memcpy>
 8004bd0:	e7e3      	b.n	8004b9a <CLI_CommandParser+0x92>
					xReturned = FreeRTOS_CLIProcessCommand( (const signed char*)(loc+1), pcOutputString, configCOMMAND_INT_MAX_OUTPUT_SIZE );		
 8004bd2:	2299      	movs	r2, #153	; 0x99
 8004bd4:	1c70      	adds	r0, r6, #1
 8004bd6:	0092      	lsls	r2, r2, #2
 8004bd8:	0021      	movs	r1, r4
 8004bda:	f009 fa49 	bl	800e070 <FreeRTOS_CLIProcessCommand>
 8004bde:	0007      	movs	r7, r0
 8004be0:	e0c2      	b.n	8004d68 <CLI_CommandParser+0x260>
					sprintf( ( char * ) pcOutputString, "Wrong module name! Please try again.\n\r");
 8004be2:	2227      	movs	r2, #39	; 0x27
 8004be4:	49af      	ldr	r1, [pc, #700]	; (8004ea4 <CLI_CommandParser+0x39c>)
 8004be6:	0020      	movs	r0, r4
 8004be8:	f011 fca4 	bl	8016534 <memcpy>
					xReturned = pdFALSE;
 8004bec:	e7d5      	b.n	8004b9a <CLI_CommandParser+0x92>
					sprintf( ( char * ) pcOutputString, "Wrong module ID! Please try again.\n\r");
 8004bee:	2225      	movs	r2, #37	; 0x25
 8004bf0:	49ad      	ldr	r1, [pc, #692]	; (8004ea8 <CLI_CommandParser+0x3a0>)
 8004bf2:	0020      	movs	r0, r4
 8004bf4:	f011 fc9e 	bl	8016534 <memcpy>
					xReturned = pdFALSE;						
 8004bf8:	e7cf      	b.n	8004b9a <CLI_CommandParser+0x92>
					memset( broadcastResponse, 0x00, sizeof(broadcastResponse) );
 8004bfa:	2219      	movs	r2, #25
 8004bfc:	2100      	movs	r1, #0
 8004bfe:	48ab      	ldr	r0, [pc, #684]	; (8004eac <CLI_CommandParser+0x3a4>)
 8004c00:	f011 fca1 	bl	8016546 <memset>
					strncpy( ( char * ) messageParams, loc+1, (size_t)(strlen( (char*) cInputString)-strlen( (char*) idString)-1));
 8004c04:	3601      	adds	r6, #1
 8004c06:	0028      	movs	r0, r5
 8004c08:	f7fb fa86 	bl	8000118 <strlen>
 8004c0c:	0007      	movs	r7, r0
 8004c0e:	a807      	add	r0, sp, #28
 8004c10:	f7fb fa82 	bl	8000118 <strlen>
 8004c14:	3f01      	subs	r7, #1
 8004c16:	1a3a      	subs	r2, r7, r0
 8004c18:	0031      	movs	r1, r6
 8004c1a:	48a5      	ldr	r0, [pc, #660]	; (8004eb0 <CLI_CommandParser+0x3a8>)
 8004c1c:	f011 fdf2 	bl	8016804 <strncpy>
							BroadcastMessage(myID, BOS_BROADCAST, CODE_CLI_COMMAND, strlen( (char*) cInputString)-strlen( (char*) idString));		// Send terminating zero
 8004c20:	0028      	movs	r0, r5
 8004c22:	f7fb fa79 	bl	8000118 <strlen>
 8004c26:	0007      	movs	r7, r0
 8004c28:	a807      	add	r0, sp, #28
 8004c2a:	f7fb fa75 	bl	8000118 <strlen>
 8004c2e:	1a3b      	subs	r3, r7, r0
 8004c30:	b29b      	uxth	r3, r3
 8004c32:	2217      	movs	r2, #23
 8004c34:	21ff      	movs	r1, #255	; 0xff
 8004c36:	4640      	mov	r0, r8
 8004c38:	f004 f92a 	bl	8008e90 <BroadcastMessage>
					xReturned = FreeRTOS_CLIProcessCommand( (const signed char*)(loc+1), pcOutputString, configCOMMAND_INT_MAX_OUTPUT_SIZE );	
 8004c3c:	2299      	movs	r2, #153	; 0x99
 8004c3e:	0092      	lsls	r2, r2, #2
 8004c40:	0021      	movs	r1, r4
 8004c42:	0030      	movs	r0, r6
 8004c44:	f009 fa14 	bl	800e070 <FreeRTOS_CLIProcessCommand>
 8004c48:	0007      	movs	r7, r0
					strcat( ( char * ) pcOutputString, "Command broadcasted to all\n\r");
 8004c4a:	0020      	movs	r0, r4
 8004c4c:	f7fb fa64 	bl	8000118 <strlen>
 8004c50:	1820      	adds	r0, r4, r0
 8004c52:	221d      	movs	r2, #29
 8004c54:	4997      	ldr	r1, [pc, #604]	; (8004eb4 <CLI_CommandParser+0x3ac>)
 8004c56:	f011 fc6d 	bl	8016534 <memcpy>
 8004c5a:	e085      	b.n	8004d68 <CLI_CommandParser+0x260>
					group = id >> 8;
 8004c5c:	9b05      	ldr	r3, [sp, #20]
 8004c5e:	1218      	asrs	r0, r3, #8
 8004c60:	b2c3      	uxtb	r3, r0
 8004c62:	469a      	mov	sl, r3
 8004c64:	4b94      	ldr	r3, [pc, #592]	; (8004eb8 <CLI_CommandParser+0x3b0>)
 8004c66:	469b      	mov	fp, r3
 8004c68:	4652      	mov	r2, sl
 8004c6a:	701a      	strb	r2, [r3, #0]
					memset( broadcastResponse, 0x00, sizeof(broadcastResponse) );
 8004c6c:	2219      	movs	r2, #25
 8004c6e:	2100      	movs	r1, #0
 8004c70:	488e      	ldr	r0, [pc, #568]	; (8004eac <CLI_CommandParser+0x3a4>)
 8004c72:	f011 fc68 	bl	8016546 <memset>
					strncpy( ( char * ) messageParams, loc+1, (size_t)(strlen( (char*) cInputString)-strlen( (char*) idString)-1));
 8004c76:	1c73      	adds	r3, r6, #1
 8004c78:	9305      	str	r3, [sp, #20]
 8004c7a:	0028      	movs	r0, r5
 8004c7c:	f7fb fa4c 	bl	8000118 <strlen>
 8004c80:	0006      	movs	r6, r0
 8004c82:	a807      	add	r0, sp, #28
 8004c84:	f7fb fa48 	bl	8000118 <strlen>
 8004c88:	3e01      	subs	r6, #1
 8004c8a:	1a32      	subs	r2, r6, r0
 8004c8c:	9905      	ldr	r1, [sp, #20]
 8004c8e:	4888      	ldr	r0, [pc, #544]	; (8004eb0 <CLI_CommandParser+0x3a8>)
 8004c90:	f011 fdb8 	bl	8016804 <strncpy>
							BroadcastMessage(myID, group, CODE_CLI_COMMAND, strlen( (char*) cInputString)-strlen( (char*) idString));		// Send terminating zero
 8004c94:	0028      	movs	r0, r5
 8004c96:	f7fb fa3f 	bl	8000118 <strlen>
 8004c9a:	0006      	movs	r6, r0
 8004c9c:	a807      	add	r0, sp, #28
 8004c9e:	f7fb fa3b 	bl	8000118 <strlen>
 8004ca2:	1a33      	subs	r3, r6, r0
 8004ca4:	b29b      	uxth	r3, r3
 8004ca6:	2217      	movs	r2, #23
 8004ca8:	4651      	mov	r1, sl
 8004caa:	4640      	mov	r0, r8
 8004cac:	f004 f8f0 	bl	8008e90 <BroadcastMessage>
					if (InGroup(myID, group))
 8004cb0:	4b82      	ldr	r3, [pc, #520]	; (8004ebc <CLI_CommandParser+0x3b4>)
 8004cb2:	781b      	ldrb	r3, [r3, #0]
 8004cb4:	3b01      	subs	r3, #1
 8004cb6:	005b      	lsls	r3, r3, #1
 8004cb8:	4a81      	ldr	r2, [pc, #516]	; (8004ec0 <CLI_CommandParser+0x3b8>)
 8004cba:	5a9b      	ldrh	r3, [r3, r2]
 8004cbc:	465a      	mov	r2, fp
 8004cbe:	7812      	ldrb	r2, [r2, #0]
 8004cc0:	4113      	asrs	r3, r2
 8004cc2:	07db      	lsls	r3, r3, #31
 8004cc4:	d406      	bmi.n	8004cd4 <CLI_CommandParser+0x1cc>
					sprintf( ( char * ) pcOutputString, "%sMulticast Command forwarded to group %s\n\r", pcOutputString, idString);
 8004cc6:	ab07      	add	r3, sp, #28
 8004cc8:	0022      	movs	r2, r4
 8004cca:	497e      	ldr	r1, [pc, #504]	; (8004ec4 <CLI_CommandParser+0x3bc>)
 8004ccc:	0020      	movs	r0, r4
 8004cce:	f011 fd45 	bl	801675c <siprintf>
 8004cd2:	e049      	b.n	8004d68 <CLI_CommandParser+0x260>
						xReturned = FreeRTOS_CLIProcessCommand( (const signed char*)(loc+1), pcOutputString, configCOMMAND_INT_MAX_OUTPUT_SIZE );	
 8004cd4:	2299      	movs	r2, #153	; 0x99
 8004cd6:	0092      	lsls	r2, r2, #2
 8004cd8:	0021      	movs	r1, r4
 8004cda:	9805      	ldr	r0, [sp, #20]
 8004cdc:	f009 f9c8 	bl	800e070 <FreeRTOS_CLIProcessCommand>
 8004ce0:	0007      	movs	r7, r0
 8004ce2:	e7f0      	b.n	8004cc6 <CLI_CommandParser+0x1be>
						strncpy( ( char * ) messageParams, loc+1, (size_t)(strlen((char*) cInputString)-strlen((char*) idString)-1));
 8004ce4:	0028      	movs	r0, r5
 8004ce6:	f7fb fa17 	bl	8000118 <strlen>
 8004cea:	0007      	movs	r7, r0
 8004cec:	a807      	add	r0, sp, #28
 8004cee:	f7fb fa13 	bl	8000118 <strlen>
 8004cf2:	3f01      	subs	r7, #1
 8004cf4:	1a3a      	subs	r2, r7, r0
 8004cf6:	0031      	movs	r1, r6
 8004cf8:	486d      	ldr	r0, [pc, #436]	; (8004eb0 <CLI_CommandParser+0x3a8>)
 8004cfa:	f011 fd83 	bl	8016804 <strncpy>
								SendMessageToModule(id, CODE_CLI_COMMAND, strlen((char*) cInputString)-strlen((char*) idString)-1);
 8004cfe:	0028      	movs	r0, r5
 8004d00:	f7fb fa0a 	bl	8000118 <strlen>
 8004d04:	0006      	movs	r6, r0
 8004d06:	a807      	add	r0, sp, #28
 8004d08:	f7fb fa06 	bl	8000118 <strlen>
 8004d0c:	3e01      	subs	r6, #1
 8004d0e:	1a36      	subs	r6, r6, r0
 8004d10:	b2b2      	uxth	r2, r6
 8004d12:	2117      	movs	r1, #23
 8004d14:	4650      	mov	r0, sl
 8004d16:	f004 f8e3 	bl	8008ee0 <SendMessageToModule>
						sprintf( ( char * ) pcOutputString, "Command forwarded to Module %d\n\r", id);
 8004d1a:	9a05      	ldr	r2, [sp, #20]
 8004d1c:	496a      	ldr	r1, [pc, #424]	; (8004ec8 <CLI_CommandParser+0x3c0>)
 8004d1e:	0020      	movs	r0, r4
 8004d20:	f011 fd1c 	bl	801675c <siprintf>
						if ((strlen((char*)pcOutputString) > 0) && enableOutput)
 8004d24:	7823      	ldrb	r3, [r4, #0]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d002      	beq.n	8004d30 <CLI_CommandParser+0x228>
 8004d2a:	9b03      	ldr	r3, [sp, #12]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d108      	bne.n	8004d42 <CLI_CommandParser+0x23a>
						memset( pcOutputString, 0x00, strlen((char*)pcOutputString) );
 8004d30:	0020      	movs	r0, r4
 8004d32:	f7fb f9f1 	bl	8000118 <strlen>
 8004d36:	0002      	movs	r2, r0
 8004d38:	2100      	movs	r1, #0
 8004d3a:	0020      	movs	r0, r4
 8004d3c:	f011 fc03 	bl	8016546 <memset>
 8004d40:	e07c      	b.n	8004e3c <CLI_CommandParser+0x334>
							writePxMutex(port, (char*)pcOutputString, strlen((char*)pcOutputString), cmd50ms, 1);		
 8004d42:	0020      	movs	r0, r4
 8004d44:	f7fb f9e8 	bl	8000118 <strlen>
 8004d48:	b282      	uxth	r2, r0
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	9300      	str	r3, [sp, #0]
 8004d4e:	3331      	adds	r3, #49	; 0x31
 8004d50:	0021      	movs	r1, r4
 8004d52:	9804      	ldr	r0, [sp, #16]
 8004d54:	f008 ffc4 	bl	800dce0 <writePxMutex>
 8004d58:	e7ea      	b.n	8004d30 <CLI_CommandParser+0x228>
				xReturned = FreeRTOS_CLIProcessCommand( cInputString, pcOutputString, configCOMMAND_INT_MAX_OUTPUT_SIZE );		
 8004d5a:	2299      	movs	r2, #153	; 0x99
 8004d5c:	0092      	lsls	r2, r2, #2
 8004d5e:	0021      	movs	r1, r4
 8004d60:	0028      	movs	r0, r5
 8004d62:	f009 f985 	bl	800e070 <FreeRTOS_CLIProcessCommand>
 8004d66:	0007      	movs	r7, r0
		if (strlen((char*)pcOutputString) > 0 && enableOutput)
 8004d68:	7823      	ldrb	r3, [r4, #0]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d000      	beq.n	8004d70 <CLI_CommandParser+0x268>
 8004d6e:	e07f      	b.n	8004e70 <CLI_CommandParser+0x368>
		memset( pcOutputString, 0x00, strlen((char*)pcOutputString) );
 8004d70:	0020      	movs	r0, r4
 8004d72:	f7fb f9d1 	bl	8000118 <strlen>
 8004d76:	0002      	movs	r2, r0
 8004d78:	2100      	movs	r1, #0
 8004d7a:	0020      	movs	r0, r4
 8004d7c:	f011 fbe3 	bl	8016546 <memset>
	} while( xReturned != pdFALSE );
 8004d80:	2f00      	cmp	r7, #0
 8004d82:	d100      	bne.n	8004d86 <CLI_CommandParser+0x27e>
 8004d84:	e0be      	b.n	8004f04 <CLI_CommandParser+0x3fc>
		StringToLowerCase(( char * )cInputString);
 8004d86:	0028      	movs	r0, r5
 8004d88:	f7ff fbf8 	bl	800457c <StringToLowerCase>
		if (!recordSnippet && !strncmp((char *)cInputString, "if ", 3)) 
 8004d8c:	464b      	mov	r3, r9
 8004d8e:	781e      	ldrb	r6, [r3, #0]
 8004d90:	2e00      	cmp	r6, #0
 8004d92:	d000      	beq.n	8004d96 <CLI_CommandParser+0x28e>
 8004d94:	e6e2      	b.n	8004b5c <CLI_CommandParser+0x54>
 8004d96:	2203      	movs	r2, #3
 8004d98:	494c      	ldr	r1, [pc, #304]	; (8004ecc <CLI_CommandParser+0x3c4>)
 8004d9a:	0028      	movs	r0, r5
 8004d9c:	f011 fd21 	bl	80167e2 <strncmp>
 8004da0:	2800      	cmp	r0, #0
 8004da2:	d100      	bne.n	8004da6 <CLI_CommandParser+0x29e>
 8004da4:	e6c5      	b.n	8004b32 <CLI_CommandParser+0x2a>
			loc = strchr( ( char * ) cInputString, '.');
 8004da6:	212e      	movs	r1, #46	; 0x2e
 8004da8:	0028      	movs	r0, r5
 8004daa:	f011 fd04 	bl	80167b6 <strchr>
 8004dae:	1e06      	subs	r6, r0, #0
			if ( loc != NULL && strncmp((char *)loc-3, "bos", 3) && !isdigit(*(loc+1)) ) 
 8004db0:	d0d3      	beq.n	8004d5a <CLI_CommandParser+0x252>
 8004db2:	3803      	subs	r0, #3
 8004db4:	2203      	movs	r2, #3
 8004db6:	4946      	ldr	r1, [pc, #280]	; (8004ed0 <CLI_CommandParser+0x3c8>)
 8004db8:	f011 fd13 	bl	80167e2 <strncmp>
 8004dbc:	2800      	cmp	r0, #0
 8004dbe:	d0cc      	beq.n	8004d5a <CLI_CommandParser+0x252>
 8004dc0:	7873      	ldrb	r3, [r6, #1]
 8004dc2:	4a44      	ldr	r2, [pc, #272]	; (8004ed4 <CLI_CommandParser+0x3cc>)
 8004dc4:	5cd3      	ldrb	r3, [r2, r3]
 8004dc6:	075b      	lsls	r3, r3, #29
 8004dc8:	d4c7      	bmi.n	8004d5a <CLI_CommandParser+0x252>
				strncpy(idString, ( char * ) cInputString, (size_t) (loc - (char*)cInputString));
 8004dca:	1b72      	subs	r2, r6, r5
 8004dcc:	0029      	movs	r1, r5
 8004dce:	a807      	add	r0, sp, #28
 8004dd0:	f011 fd18 	bl	8016804 <strncpy>
				id = GetID(idString);
 8004dd4:	a807      	add	r0, sp, #28
 8004dd6:	f7ff f8f9 	bl	8003fcc <GetID>
 8004dda:	9005      	str	r0, [sp, #20]
				if (id == myID) {
 8004ddc:	4a37      	ldr	r2, [pc, #220]	; (8004ebc <CLI_CommandParser+0x3b4>)
 8004dde:	7812      	ldrb	r2, [r2, #0]
 8004de0:	4690      	mov	r8, r2
 8004de2:	4290      	cmp	r0, r2
 8004de4:	d100      	bne.n	8004de8 <CLI_CommandParser+0x2e0>
 8004de6:	e6f4      	b.n	8004bd2 <CLI_CommandParser+0xca>
				}	else if (id == BOS_ERR_WrongName) {		
 8004de8:	2864      	cmp	r0, #100	; 0x64
 8004dea:	d100      	bne.n	8004dee <CLI_CommandParser+0x2e6>
 8004dec:	e6f9      	b.n	8004be2 <CLI_CommandParser+0xda>
				}	else if (id == BOS_ERR_WrongID) {
 8004dee:	2866      	cmp	r0, #102	; 0x66
 8004df0:	d100      	bne.n	8004df4 <CLI_CommandParser+0x2ec>
 8004df2:	e6fc      	b.n	8004bee <CLI_CommandParser+0xe6>
				}	else if (id == BOS_BROADCAST) {
 8004df4:	28ff      	cmp	r0, #255	; 0xff
 8004df6:	d100      	bne.n	8004dfa <CLI_CommandParser+0x2f2>
 8004df8:	e6ff      	b.n	8004bfa <CLI_CommandParser+0xf2>
				}	else if ((uint8_t)id == BOS_MULTICAST) {	
 8004dfa:	466b      	mov	r3, sp
 8004dfc:	7d1b      	ldrb	r3, [r3, #20]
 8004dfe:	469a      	mov	sl, r3
 8004e00:	2bfe      	cmp	r3, #254	; 0xfe
 8004e02:	d100      	bne.n	8004e06 <CLI_CommandParser+0x2fe>
 8004e04:	e72a      	b.n	8004c5c <CLI_CommandParser+0x154>
					if (!strncmp((char *)loc+1, "update", 6)) {			// remote update
 8004e06:	3601      	adds	r6, #1
 8004e08:	2206      	movs	r2, #6
 8004e0a:	4933      	ldr	r1, [pc, #204]	; (8004ed8 <CLI_CommandParser+0x3d0>)
 8004e0c:	0030      	movs	r0, r6
 8004e0e:	f011 fce8 	bl	80167e2 <strncmp>
 8004e12:	2800      	cmp	r0, #0
 8004e14:	d000      	beq.n	8004e18 <CLI_CommandParser+0x310>
 8004e16:	e765      	b.n	8004ce4 <CLI_CommandParser+0x1dc>
						BOS.response = BOS_RESPONSE_NONE;				
 8004e18:	4b30      	ldr	r3, [pc, #192]	; (8004edc <CLI_CommandParser+0x3d4>)
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	719a      	strb	r2, [r3, #6]
								SendMessageToModule(id, CODE_UPDATE, 0);
 8004e1e:	2119      	movs	r1, #25
 8004e20:	4650      	mov	r0, sl
 8004e22:	f004 f85d 	bl	8008ee0 <SendMessageToModule>
						osDelay(100);
 8004e26:	2064      	movs	r0, #100	; 0x64
 8004e28:	f009 f889 	bl	800df3e <osDelay>
						remoteBootloaderUpdate(myID, id, PcPort, 0);
 8004e2c:	4b2c      	ldr	r3, [pc, #176]	; (8004ee0 <CLI_CommandParser+0x3d8>)
 8004e2e:	781a      	ldrb	r2, [r3, #0]
 8004e30:	4b22      	ldr	r3, [pc, #136]	; (8004ebc <CLI_CommandParser+0x3b4>)
 8004e32:	7818      	ldrb	r0, [r3, #0]
 8004e34:	2300      	movs	r3, #0
 8004e36:	4651      	mov	r1, sl
 8004e38:	f7fe fd8a 	bl	8003950 <remoteBootloaderUpdate>
					if (BOS.response == BOS_RESPONSE_ALL)
 8004e3c:	4b27      	ldr	r3, [pc, #156]	; (8004edc <CLI_CommandParser+0x3d4>)
 8004e3e:	799b      	ldrb	r3, [r3, #6]
 8004e40:	2b60      	cmp	r3, #96	; 0x60
 8004e42:	d000      	beq.n	8004e46 <CLI_CommandParser+0x33e>
 8004e44:	e6a9      	b.n	8004b9a <CLI_CommandParser+0x92>
						ulTaskNotifyTake(pdTRUE, 1000);		//cmd500ms
 8004e46:	21fa      	movs	r1, #250	; 0xfa
 8004e48:	0089      	lsls	r1, r1, #2
 8004e4a:	2001      	movs	r0, #1
 8004e4c:	f00a fca0 	bl	800f790 <ulTaskNotifyTake>
								if (responseStatus != BOS_OK) {
 8004e50:	4b24      	ldr	r3, [pc, #144]	; (8004ee4 <CLI_CommandParser+0x3dc>)
 8004e52:	781b      	ldrb	r3, [r3, #0]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d100      	bne.n	8004e5a <CLI_CommandParser+0x352>
 8004e58:	e69f      	b.n	8004b9a <CLI_CommandParser+0x92>
									++timedoutMsg;
 8004e5a:	4a23      	ldr	r2, [pc, #140]	; (8004ee8 <CLI_CommandParser+0x3e0>)
 8004e5c:	8813      	ldrh	r3, [r2, #0]
 8004e5e:	3301      	adds	r3, #1
 8004e60:	8013      	strh	r3, [r2, #0]
									sprintf( ( char * ) pcOutputString, "%sModule %d is not reachable.\n\r", ( char * ) pcOutputString, id);
 8004e62:	9b05      	ldr	r3, [sp, #20]
 8004e64:	0022      	movs	r2, r4
 8004e66:	4921      	ldr	r1, [pc, #132]	; (8004eec <CLI_CommandParser+0x3e4>)
 8004e68:	0020      	movs	r0, r4
 8004e6a:	f011 fc77 	bl	801675c <siprintf>
 8004e6e:	e694      	b.n	8004b9a <CLI_CommandParser+0x92>
		if (strlen((char*)pcOutputString) > 0 && enableOutput)
 8004e70:	9b03      	ldr	r3, [sp, #12]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d100      	bne.n	8004e78 <CLI_CommandParser+0x370>
 8004e76:	e77b      	b.n	8004d70 <CLI_CommandParser+0x268>
 8004e78:	e698      	b.n	8004bac <CLI_CommandParser+0xa4>
		writePxMutex(port, pcEndOfCommandOutputString, strlen(pcEndOfCommandOutputString), cmd50ms, HAL_MAX_DELAY);		
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	425b      	negs	r3, r3
 8004e7e:	9300      	str	r3, [sp, #0]
 8004e80:	3333      	adds	r3, #51	; 0x33
 8004e82:	2238      	movs	r2, #56	; 0x38
 8004e84:	491a      	ldr	r1, [pc, #104]	; (8004ef0 <CLI_CommandParser+0x3e8>)
 8004e86:	9804      	ldr	r0, [sp, #16]
 8004e88:	f008 ff2a 	bl	800dce0 <writePxMutex>
}
 8004e8c:	e046      	b.n	8004f1c <CLI_CommandParser+0x414>
 8004e8e:	46c0      	nop			; (mov r8, r8)
 8004e90:	20000cd0 	.word	0x20000cd0
 8004e94:	0801a0e8 	.word	0x0801a0e8
 8004e98:	0801a13c 	.word	0x0801a13c
 8004e9c:	08019b80 	.word	0x08019b80
 8004ea0:	0801a144 	.word	0x0801a144
 8004ea4:	0801a18c 	.word	0x0801a18c
 8004ea8:	0801a1b4 	.word	0x0801a1b4
 8004eac:	200007bc 	.word	0x200007bc
 8004eb0:	200009d0 	.word	0x200009d0
 8004eb4:	0801a1dc 	.word	0x0801a1dc
 8004eb8:	20000ca2 	.word	0x20000ca2
 8004ebc:	20000b04 	.word	0x20000b04
 8004ec0:	20000958 	.word	0x20000958
 8004ec4:	0801a1fc 	.word	0x0801a1fc
 8004ec8:	0801a230 	.word	0x0801a230
 8004ecc:	0801a0e4 	.word	0x0801a0e4
 8004ed0:	0801a188 	.word	0x0801a188
 8004ed4:	0801ccd1 	.word	0x0801ccd1
 8004ed8:	0801a228 	.word	0x0801a228
 8004edc:	20006368 	.word	0x20006368
 8004ee0:	2000055f 	.word	0x2000055f
 8004ee4:	20000b98 	.word	0x20000b98
 8004ee8:	2000114e 	.word	0x2000114e
 8004eec:	0801a254 	.word	0x0801a254
 8004ef0:	0801a274 	.word	0x0801a274
		memset( pcOutputString, 0x00, strlen((char*)pcOutputString) );
 8004ef4:	0020      	movs	r0, r4
 8004ef6:	f7fb f90f 	bl	8000118 <strlen>
 8004efa:	0002      	movs	r2, r0
 8004efc:	2100      	movs	r1, #0
 8004efe:	0020      	movs	r0, r4
 8004f00:	f011 fb21 	bl	8016546 <memset>
	memset( idString, 0x00, MaxLengthOfAlias );
 8004f04:	2209      	movs	r2, #9
 8004f06:	2100      	movs	r1, #0
 8004f08:	a807      	add	r0, sp, #28
 8004f0a:	f011 fb1c 	bl	8016546 <memset>
	if(!recordSnippet && enableOutput)
 8004f0e:	4b0b      	ldr	r3, [pc, #44]	; (8004f3c <CLI_CommandParser+0x434>)
 8004f10:	781b      	ldrb	r3, [r3, #0]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d102      	bne.n	8004f1c <CLI_CommandParser+0x414>
 8004f16:	9b03      	ldr	r3, [sp, #12]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d1ae      	bne.n	8004e7a <CLI_CommandParser+0x372>
}
 8004f1c:	b00b      	add	sp, #44	; 0x2c
 8004f1e:	bcf0      	pop	{r4, r5, r6, r7}
 8004f20:	46bb      	mov	fp, r7
 8004f22:	46b2      	mov	sl, r6
 8004f24:	46a9      	mov	r9, r5
 8004f26:	46a0      	mov	r8, r4
 8004f28:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memset( pcOutputString, 0x00, strlen((char*)pcOutputString) );
 8004f2a:	0020      	movs	r0, r4
 8004f2c:	f7fb f8f4 	bl	8000118 <strlen>
 8004f30:	0002      	movs	r2, r0
 8004f32:	2100      	movs	r1, #0
 8004f34:	0020      	movs	r0, r4
 8004f36:	f011 fb06 	bl	8016546 <memset>
	} while( xReturned != pdFALSE );
 8004f3a:	e7e3      	b.n	8004f04 <CLI_CommandParser+0x3fc>
 8004f3c:	20000cd0 	.word	0x20000cd0

08004f40 <prvCLITask>:
{
 8004f40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f42:	46d6      	mov	lr, sl
 8004f44:	464f      	mov	r7, r9
 8004f46:	4646      	mov	r6, r8
 8004f48:	b5c0      	push	{r6, r7, lr}
 8004f4a:	b084      	sub	sp, #16
	ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8004f4c:	2101      	movs	r1, #1
 8004f4e:	4249      	negs	r1, r1
 8004f50:	2001      	movs	r0, #1
 8004f52:	f00a fc1d 	bl	800f790 <ulTaskNotifyTake>
	cRxedChar = '\0';
 8004f56:	230f      	movs	r3, #15
 8004f58:	446b      	add	r3, sp
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	701a      	strb	r2, [r3, #0]
	pcOutputString = FreeRTOS_CLIGetOutputBuffer();
 8004f5e:	f009 f911 	bl	800e184 <FreeRTOS_CLIGetOutputBuffer>
 8004f62:	4682      	mov	sl, r0
	if (BOS.clibaudrate != DEF_ARRAY_BAUDRATE)
 8004f64:	23e1      	movs	r3, #225	; 0xe1
 8004f66:	031b      	lsls	r3, r3, #12
 8004f68:	4a58      	ldr	r2, [pc, #352]	; (80050cc <prvCLITask+0x18c>)
 8004f6a:	6892      	ldr	r2, [r2, #8]
 8004f6c:	429a      	cmp	r2, r3
 8004f6e:	d00f      	beq.n	8004f90 <prvCLITask+0x50>
		for (uint8_t port=1 ; port<=NumOfPorts ; port++) 
 8004f70:	2401      	movs	r4, #1
			if (port != PcPort)
 8004f72:	4e57      	ldr	r6, [pc, #348]	; (80050d0 <prvCLITask+0x190>)
				UpdateBaudrate(port, DEF_ARRAY_BAUDRATE);
 8004f74:	001d      	movs	r5, r3
 8004f76:	e003      	b.n	8004f80 <prvCLITask+0x40>
		for (uint8_t port=1 ; port<=NumOfPorts ; port++) 
 8004f78:	3401      	adds	r4, #1
 8004f7a:	b2e4      	uxtb	r4, r4
 8004f7c:	2c06      	cmp	r4, #6
 8004f7e:	d007      	beq.n	8004f90 <prvCLITask+0x50>
			if (port != PcPort)
 8004f80:	7833      	ldrb	r3, [r6, #0]
 8004f82:	42a3      	cmp	r3, r4
 8004f84:	d0f8      	beq.n	8004f78 <prvCLITask+0x38>
				UpdateBaudrate(port, DEF_ARRAY_BAUDRATE);
 8004f86:	0029      	movs	r1, r5
 8004f88:	0020      	movs	r0, r4
 8004f8a:	f008 ff19 	bl	800ddc0 <UpdateBaudrate>
 8004f8e:	e7f3      	b.n	8004f78 <prvCLITask+0x38>
	sprintf(pcWelcomePortMessage, "Connected to module %d (%s), port P%d.\n\n\r>", myID, modulePNstring[myPN], PcPort);
 8004f90:	4b50      	ldr	r3, [pc, #320]	; (80050d4 <prvCLITask+0x194>)
 8004f92:	881a      	ldrh	r2, [r3, #0]
 8004f94:	0053      	lsls	r3, r2, #1
 8004f96:	189b      	adds	r3, r3, r2
 8004f98:	005b      	lsls	r3, r3, #1
 8004f9a:	4a4f      	ldr	r2, [pc, #316]	; (80050d8 <prvCLITask+0x198>)
 8004f9c:	189b      	adds	r3, r3, r2
 8004f9e:	4a4f      	ldr	r2, [pc, #316]	; (80050dc <prvCLITask+0x19c>)
 8004fa0:	7812      	ldrb	r2, [r2, #0]
 8004fa2:	4c4f      	ldr	r4, [pc, #316]	; (80050e0 <prvCLITask+0x1a0>)
 8004fa4:	4d4a      	ldr	r5, [pc, #296]	; (80050d0 <prvCLITask+0x190>)
 8004fa6:	7829      	ldrb	r1, [r5, #0]
 8004fa8:	9100      	str	r1, [sp, #0]
 8004faa:	494e      	ldr	r1, [pc, #312]	; (80050e4 <prvCLITask+0x1a4>)
 8004fac:	0020      	movs	r0, r4
 8004fae:	f011 fbd5 	bl	801675c <siprintf>
	writePxITMutex(PcPort, pcWelcomeMessage, strlen(pcWelcomeMessage), 10);
 8004fb2:	7828      	ldrb	r0, [r5, #0]
 8004fb4:	230a      	movs	r3, #10
 8004fb6:	4a4c      	ldr	r2, [pc, #304]	; (80050e8 <prvCLITask+0x1a8>)
 8004fb8:	494c      	ldr	r1, [pc, #304]	; (80050ec <prvCLITask+0x1ac>)
 8004fba:	f008 febd 	bl	800dd38 <writePxITMutex>
	writePxITMutex(PcPort, pcWelcomePortMessage, strlen(pcWelcomePortMessage), 10);
 8004fbe:	0020      	movs	r0, r4
 8004fc0:	f7fb f8aa 	bl	8000118 <strlen>
 8004fc4:	b282      	uxth	r2, r0
 8004fc6:	7828      	ldrb	r0, [r5, #0]
 8004fc8:	230a      	movs	r3, #10
 8004fca:	0021      	movs	r1, r4
 8004fcc:	f008 feb4 	bl	800dd38 <writePxITMutex>
char cRxedChar; int8_t cInputIndex = 0, *pcOutputString; 
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	4698      	mov	r8, r3
		for (chr=UARTRxBufIndex[PcPort-1] ; chr<MSG_RX_BUF_SIZE ; chr++)
 8004fd4:	4b46      	ldr	r3, [pc, #280]	; (80050f0 <prvCLITask+0x1b0>)
 8004fd6:	4699      	mov	r9, r3
				chr = UARTRxBufIndex[PcPort-1] = 0;
 8004fd8:	001f      	movs	r7, r3
 8004fda:	e05c      	b.n	8005096 <prvCLITask+0x156>
				cRxedChar = UARTRxBuf[PcPort-1][chr];
 8004fdc:	200f      	movs	r0, #15
 8004fde:	4468      	add	r0, sp
 8004fe0:	7002      	strb	r2, [r0, #0]
				UARTRxBuf[PcPort-1][chr] = 0;
 8004fe2:	0198      	lsls	r0, r3, #6
 8004fe4:	4a43      	ldr	r2, [pc, #268]	; (80050f4 <prvCLITask+0x1b4>)
 8004fe6:	1812      	adds	r2, r2, r0
 8004fe8:	2000      	movs	r0, #0
 8004fea:	5510      	strb	r0, [r2, r4]
				UARTRxBufIndex[PcPort-1] = chr;
 8004fec:	4a40      	ldr	r2, [pc, #256]	; (80050f0 <prvCLITask+0x1b0>)
 8004fee:	54d4      	strb	r4, [r2, r3]
		writePxITMutex(PcPort, &cRxedChar, 1, 10);
 8004ff0:	240f      	movs	r4, #15
 8004ff2:	446c      	add	r4, sp
 8004ff4:	4b36      	ldr	r3, [pc, #216]	; (80050d0 <prvCLITask+0x190>)
 8004ff6:	7818      	ldrb	r0, [r3, #0]
 8004ff8:	230a      	movs	r3, #10
 8004ffa:	2201      	movs	r2, #1
 8004ffc:	0021      	movs	r1, r4
 8004ffe:	f008 fe9b 	bl	800dd38 <writePxITMutex>
		if( cRxedChar == '\r' )
 8005002:	7823      	ldrb	r3, [r4, #0]
 8005004:	2b0d      	cmp	r3, #13
 8005006:	d027      	beq.n	8005058 <prvCLITask+0x118>
			if( cRxedChar == '\n' )
 8005008:	2b0a      	cmp	r3, #10
 800500a:	d042      	beq.n	8005092 <prvCLITask+0x152>
			else if( cRxedChar == '\b' )
 800500c:	2b08      	cmp	r3, #8
 800500e:	d051      	beq.n	80050b4 <prvCLITask+0x174>
				if( ( cRxedChar >= ' ' ) && ( cRxedChar <= '~' ) )
 8005010:	001a      	movs	r2, r3
 8005012:	3a20      	subs	r2, #32
 8005014:	2a5e      	cmp	r2, #94	; 0x5e
 8005016:	d83c      	bhi.n	8005092 <prvCLITask+0x152>
					if( cInputIndex < cmdMAX_INPUT_SIZE )
 8005018:	4642      	mov	r2, r8
 800501a:	2a31      	cmp	r2, #49	; 0x31
 800501c:	dc39      	bgt.n	8005092 <prvCLITask+0x152>
						cInputString[ cInputIndex ] = cRxedChar;
 800501e:	4a36      	ldr	r2, [pc, #216]	; (80050f8 <prvCLITask+0x1b8>)
 8005020:	4641      	mov	r1, r8
 8005022:	5453      	strb	r3, [r2, r1]
						cInputIndex++;
 8005024:	4643      	mov	r3, r8
 8005026:	3301      	adds	r3, #1
 8005028:	b25b      	sxtb	r3, r3
 800502a:	4698      	mov	r8, r3
 800502c:	e031      	b.n	8005092 <prvCLITask+0x152>
				chr = UARTRxBufIndex[PcPort-1] = 0;
 800502e:	2200      	movs	r2, #0
 8005030:	54fa      	strb	r2, [r7, r3]
			taskYIELD();
 8005032:	f00a fe89 	bl	800fd48 <vPortYield>
		for (chr=UARTRxBufIndex[PcPort-1] ; chr<MSG_RX_BUF_SIZE ; chr++)
 8005036:	3c3e      	subs	r4, #62	; 0x3e
			if (UARTRxBuf[PcPort-1][chr]) {
 8005038:	7833      	ldrb	r3, [r6, #0]
 800503a:	3b01      	subs	r3, #1
 800503c:	019a      	lsls	r2, r3, #6
 800503e:	18aa      	adds	r2, r5, r2
 8005040:	5d12      	ldrb	r2, [r2, r4]
 8005042:	2a00      	cmp	r2, #0
 8005044:	d1ca      	bne.n	8004fdc <prvCLITask+0x9c>
			if (chr == MSG_RX_BUF_SIZE-1)	{
 8005046:	2c3f      	cmp	r4, #63	; 0x3f
 8005048:	d0f1      	beq.n	800502e <prvCLITask+0xee>
			taskYIELD();
 800504a:	f00a fe7d 	bl	800fd48 <vPortYield>
		for (chr=UARTRxBufIndex[PcPort-1] ; chr<MSG_RX_BUF_SIZE ; chr++)
 800504e:	3401      	adds	r4, #1
 8005050:	b2a4      	uxth	r4, r4
 8005052:	2c3f      	cmp	r4, #63	; 0x3f
 8005054:	d9f0      	bls.n	8005038 <prvCLITask+0xf8>
 8005056:	e7cb      	b.n	8004ff0 <prvCLITask+0xb0>
			writePxITMutex(PcPort, pcNewLine, strlen(pcNewLine), 10);
 8005058:	4b1d      	ldr	r3, [pc, #116]	; (80050d0 <prvCLITask+0x190>)
 800505a:	7818      	ldrb	r0, [r3, #0]
 800505c:	230a      	movs	r3, #10
 800505e:	2202      	movs	r2, #2
 8005060:	4926      	ldr	r1, [pc, #152]	; (80050fc <prvCLITask+0x1bc>)
 8005062:	f008 fe69 	bl	800dd38 <writePxITMutex>
			if( cInputIndex == 0 )
 8005066:	4643      	mov	r3, r8
 8005068:	2b00      	cmp	r3, #0
 800506a:	d01e      	beq.n	80050aa <prvCLITask+0x16a>
			CLI_CommandParser(PcPort, true, cInputString, pcOutputString);
 800506c:	4c22      	ldr	r4, [pc, #136]	; (80050f8 <prvCLITask+0x1b8>)
 800506e:	4b18      	ldr	r3, [pc, #96]	; (80050d0 <prvCLITask+0x190>)
 8005070:	7818      	ldrb	r0, [r3, #0]
 8005072:	4653      	mov	r3, sl
 8005074:	0022      	movs	r2, r4
 8005076:	2101      	movs	r1, #1
 8005078:	f7ff fd46 	bl	8004b08 <CLI_CommandParser>
			strcpy( ( char * ) cLastInputString, ( char * ) cInputString );
 800507c:	0021      	movs	r1, r4
 800507e:	4820      	ldr	r0, [pc, #128]	; (8005100 <prvCLITask+0x1c0>)
 8005080:	f011 fba7 	bl	80167d2 <strcpy>
			memset( cInputString, 0x00, cmdMAX_INPUT_SIZE );
 8005084:	2232      	movs	r2, #50	; 0x32
 8005086:	2100      	movs	r1, #0
 8005088:	0020      	movs	r0, r4
 800508a:	f011 fa5c 	bl	8016546 <memset>
			cInputIndex = 0;
 800508e:	2300      	movs	r3, #0
 8005090:	4698      	mov	r8, r3
		taskYIELD();
 8005092:	f00a fe59 	bl	800fd48 <vPortYield>
		for (chr=UARTRxBufIndex[PcPort-1] ; chr<MSG_RX_BUF_SIZE ; chr++)
 8005096:	4b0e      	ldr	r3, [pc, #56]	; (80050d0 <prvCLITask+0x190>)
 8005098:	781b      	ldrb	r3, [r3, #0]
 800509a:	444b      	add	r3, r9
 800509c:	3b01      	subs	r3, #1
 800509e:	781c      	ldrb	r4, [r3, #0]
 80050a0:	2c3f      	cmp	r4, #63	; 0x3f
 80050a2:	d8a5      	bhi.n	8004ff0 <prvCLITask+0xb0>
			if (UARTRxBuf[PcPort-1][chr]) {
 80050a4:	4e0a      	ldr	r6, [pc, #40]	; (80050d0 <prvCLITask+0x190>)
 80050a6:	4d13      	ldr	r5, [pc, #76]	; (80050f4 <prvCLITask+0x1b4>)
 80050a8:	e7c6      	b.n	8005038 <prvCLITask+0xf8>
				strcpy( ( char * ) cInputString, ( char * ) cLastInputString );
 80050aa:	4915      	ldr	r1, [pc, #84]	; (8005100 <prvCLITask+0x1c0>)
 80050ac:	4812      	ldr	r0, [pc, #72]	; (80050f8 <prvCLITask+0x1b8>)
 80050ae:	f011 fb90 	bl	80167d2 <strcpy>
 80050b2:	e7db      	b.n	800506c <prvCLITask+0x12c>
				if( cInputIndex > 0 )
 80050b4:	4643      	mov	r3, r8
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	ddeb      	ble.n	8005092 <prvCLITask+0x152>
					cInputIndex--;
 80050ba:	3b01      	subs	r3, #1
 80050bc:	b25b      	sxtb	r3, r3
 80050be:	4698      	mov	r8, r3
					cInputString[ cInputIndex ] = '\0';
 80050c0:	4b0d      	ldr	r3, [pc, #52]	; (80050f8 <prvCLITask+0x1b8>)
 80050c2:	2200      	movs	r2, #0
 80050c4:	4641      	mov	r1, r8
 80050c6:	545a      	strb	r2, [r3, r1]
 80050c8:	e7e3      	b.n	8005092 <prvCLITask+0x152>
 80050ca:	46c0      	nop			; (mov r8, r8)
 80050cc:	20006368 	.word	0x20006368
 80050d0:	2000055f 	.word	0x2000055f
 80050d4:	20000050 	.word	0x20000050
 80050d8:	0801a018 	.word	0x0801a018
 80050dc:	20000b04 	.word	0x20000b04
 80050e0:	20000ca4 	.word	0x20000ca4
 80050e4:	0801a2b0 	.word	0x0801a2b0
 80050e8:	00000293 	.word	0x00000293
 80050ec:	0801a2dc 	.word	0x0801a2dc
 80050f0:	20000e94 	.word	0x20000e94
 80050f4:	20000d54 	.word	0x20000d54
 80050f8:	20000bd4 	.word	0x20000bd4
 80050fc:	0801b670 	.word	0x0801b670
 8005100:	20000c70 	.word	0x20000c70

08005104 <ParseSnippetCommand>:
/*-----------------------------------------------------------*/

/* Parse Snippet commands into the internal buffer
*/
bool ParseSnippetCommand(char *snippetBuffer, int8_t *cliBuffer)
{
 8005104:	b570      	push	{r4, r5, r6, lr}
 8005106:	000c      	movs	r4, r1
	static char *ptrStart, *ptrEnd;
	
	if (snippets[numOfRecordedSnippets-1].cmd == NULL)	return false;
 8005108:	4b1c      	ldr	r3, [pc, #112]	; (800517c <ParseSnippetCommand+0x78>)
 800510a:	781a      	ldrb	r2, [r3, #0]
 800510c:	3a01      	subs	r2, #1
 800510e:	0093      	lsls	r3, r2, #2
 8005110:	189b      	adds	r3, r3, r2
 8005112:	009b      	lsls	r3, r3, #2
 8005114:	4a1a      	ldr	r2, [pc, #104]	; (8005180 <ParseSnippetCommand+0x7c>)
 8005116:	18d3      	adds	r3, r2, r3
 8005118:	68db      	ldr	r3, [r3, #12]
 800511a:	2b00      	cmp	r3, #0
 800511c:	d02c      	beq.n	8005178 <ParseSnippetCommand+0x74>
	
	// Initialize the start pointer to snippet buffer address
	if (!ptrStart)	ptrStart = snippetBuffer;	
 800511e:	4b19      	ldr	r3, [pc, #100]	; (8005184 <ParseSnippetCommand+0x80>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d014      	beq.n	8005150 <ParseSnippetCommand+0x4c>
	
	// Did we already reach end of Snippet buffer?
	if (*ptrStart == 0x00) {
 8005126:	4b17      	ldr	r3, [pc, #92]	; (8005184 <ParseSnippetCommand+0x80>)
 8005128:	681e      	ldr	r6, [r3, #0]
 800512a:	7833      	ldrb	r3, [r6, #0]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d012      	beq.n	8005156 <ParseSnippetCommand+0x52>
		cliBuffer = NULL;
		return false;
	}
	
	// Search the buffer for first occurance of 0x13 (ENTER key)
	ptrEnd = strchr(ptrStart,0x13);
 8005130:	2113      	movs	r1, #19
 8005132:	0030      	movs	r0, r6
 8005134:	f011 fb3f 	bl	80167b6 <strchr>
 8005138:	1e05      	subs	r5, r0, #0
	if (ptrEnd != NULL)
 800513a:	d011      	beq.n	8005160 <ParseSnippetCommand+0x5c>
	{
		strncpy((char *)cliBuffer, ptrStart, ptrEnd-ptrStart);
 800513c:	1b82      	subs	r2, r0, r6
 800513e:	0031      	movs	r1, r6
 8005140:	0020      	movs	r0, r4
 8005142:	f011 fb5f 	bl	8016804 <strncpy>
		ptrStart = ptrEnd+1;
 8005146:	3501      	adds	r5, #1
 8005148:	4b0e      	ldr	r3, [pc, #56]	; (8005184 <ParseSnippetCommand+0x80>)
 800514a:	601d      	str	r5, [r3, #0]
	{
		strcpy((char *)cliBuffer, ptrStart);
		ptrStart += strlen((const char *) cliBuffer);
	}

	return true;
 800514c:	2001      	movs	r0, #1
}
 800514e:	bd70      	pop	{r4, r5, r6, pc}
	if (!ptrStart)	ptrStart = snippetBuffer;	
 8005150:	4b0c      	ldr	r3, [pc, #48]	; (8005184 <ParseSnippetCommand+0x80>)
 8005152:	6018      	str	r0, [r3, #0]
 8005154:	e7e7      	b.n	8005126 <ParseSnippetCommand+0x22>
		ptrStart = 0;		// Initialize the start pointer for next Snippet
 8005156:	4b0b      	ldr	r3, [pc, #44]	; (8005184 <ParseSnippetCommand+0x80>)
 8005158:	2200      	movs	r2, #0
 800515a:	601a      	str	r2, [r3, #0]
		return false;
 800515c:	2000      	movs	r0, #0
 800515e:	e7f6      	b.n	800514e <ParseSnippetCommand+0x4a>
		strcpy((char *)cliBuffer, ptrStart);
 8005160:	0031      	movs	r1, r6
 8005162:	0020      	movs	r0, r4
 8005164:	f011 fb35 	bl	80167d2 <strcpy>
		ptrStart += strlen((const char *) cliBuffer);
 8005168:	0020      	movs	r0, r4
 800516a:	f7fa ffd5 	bl	8000118 <strlen>
 800516e:	1836      	adds	r6, r6, r0
 8005170:	4b04      	ldr	r3, [pc, #16]	; (8005184 <ParseSnippetCommand+0x80>)
 8005172:	601e      	str	r6, [r3, #0]
	return true;
 8005174:	2001      	movs	r0, #1
 8005176:	e7ea      	b.n	800514e <ParseSnippetCommand+0x4a>
	if (snippets[numOfRecordedSnippets-1].cmd == NULL)	return false;
 8005178:	2000      	movs	r0, #0
 800517a:	e7e8      	b.n	800514e <ParseSnippetCommand+0x4a>
 800517c:	20000ca3 	.word	0x20000ca3
 8005180:	20006384 	.word	0x20006384
 8005184:	20000ccc 	.word	0x20000ccc

08005188 <CheckSnippetCondition>:
/*-----------------------------------------------------------*/

/* Check if Snippet conditional is true or false
*/
bool CheckSnippetCondition(uint8_t index)
{
 8005188:	b5f0      	push	{r4, r5, r6, r7, lr}
 800518a:	b083      	sub	sp, #12
 800518c:	0004      	movs	r4, r0
	uint8_t temp8;
	float flt1, flt2;
	
	/* Check conditions based on Snippet tupe */	

	switch (snippets[index].cond.conditionType)
 800518e:	0083      	lsls	r3, r0, #2
 8005190:	181b      	adds	r3, r3, r0
 8005192:	009b      	lsls	r3, r3, #2
 8005194:	4a3e      	ldr	r2, [pc, #248]	; (8005290 <CheckSnippetCondition+0x108>)
 8005196:	5c9b      	ldrb	r3, [r3, r2]
 8005198:	2b01      	cmp	r3, #1
 800519a:	d021      	beq.n	80051e0 <CheckSnippetCondition+0x58>
 800519c:	2000      	movs	r0, #0
 800519e:	2b03      	cmp	r3, #3
 80051a0:	d130      	bne.n	8005204 <CheckSnippetCondition+0x7c>
			break;
			
						
		case SNIP_COND_MODULE_PARAM_CONST :	
			// Get the constant and module parameter values. 
			flt1 = *(float *)modParam[snippets[index].cond.buffer1[1]-1].paramPtr;
 80051a2:	4d3b      	ldr	r5, [pc, #236]	; (8005290 <CheckSnippetCondition+0x108>)
 80051a4:	00a6      	lsls	r6, r4, #2
 80051a6:	1933      	adds	r3, r6, r4
 80051a8:	009b      	lsls	r3, r3, #2
 80051aa:	18eb      	adds	r3, r5, r3
 80051ac:	78da      	ldrb	r2, [r3, #3]
 80051ae:	3a01      	subs	r2, #1
 80051b0:	0053      	lsls	r3, r2, #1
 80051b2:	189b      	adds	r3, r3, r2
 80051b4:	009b      	lsls	r3, r3, #2
 80051b6:	4a37      	ldr	r2, [pc, #220]	; (8005294 <CheckSnippetCondition+0x10c>)
 80051b8:	589b      	ldr	r3, [r3, r2]
 80051ba:	681f      	ldr	r7, [r3, #0]
			memcpy( (uint8_t *)&flt2, &snippets[index].cond.buffer2, sizeof(float));		// This buffer can be misaligned and cause hardfault on F0
 80051bc:	1931      	adds	r1, r6, r4
 80051be:	0089      	lsls	r1, r1, #2
 80051c0:	3106      	adds	r1, #6
 80051c2:	1949      	adds	r1, r1, r5
 80051c4:	2204      	movs	r2, #4
 80051c6:	a801      	add	r0, sp, #4
 80051c8:	f011 f9b4 	bl	8016534 <memcpy>
			// Compare them mathematically
			switch (snippets[index].cond.mathOperator)
 80051cc:	1936      	adds	r6, r6, r4
 80051ce:	00b6      	lsls	r6, r6, #2
 80051d0:	19ad      	adds	r5, r5, r6
 80051d2:	786b      	ldrb	r3, [r5, #1]
 80051d4:	2b06      	cmp	r3, #6
 80051d6:	d853      	bhi.n	8005280 <CheckSnippetCondition+0xf8>
 80051d8:	009b      	lsls	r3, r3, #2
 80051da:	4a2f      	ldr	r2, [pc, #188]	; (8005298 <CheckSnippetCondition+0x110>)
 80051dc:	58d3      	ldr	r3, [r2, r3]
 80051de:	469f      	mov	pc, r3
  		temp8 = snippets[index].cond.buffer1[0]; 	// Button port
 80051e0:	4a2b      	ldr	r2, [pc, #172]	; (8005290 <CheckSnippetCondition+0x108>)
 80051e2:	0080      	lsls	r0, r0, #2
 80051e4:	1903      	adds	r3, r0, r4
 80051e6:	009b      	lsls	r3, r3, #2
 80051e8:	18d3      	adds	r3, r2, r3
			if (snippets[index].cond.buffer1[1] == button[temp8].state)
 80051ea:	7899      	ldrb	r1, [r3, #2]
 80051ec:	00cb      	lsls	r3, r1, #3
 80051ee:	185b      	adds	r3, r3, r1
 80051f0:	1900      	adds	r0, r0, r4
 80051f2:	0080      	lsls	r0, r0, #2
 80051f4:	1812      	adds	r2, r2, r0
 80051f6:	4929      	ldr	r1, [pc, #164]	; (800529c <CheckSnippetCondition+0x114>)
 80051f8:	5c58      	ldrb	r0, [r3, r1]
 80051fa:	78d3      	ldrb	r3, [r2, #3]
 80051fc:	1ac0      	subs	r0, r0, r3
 80051fe:	4243      	negs	r3, r0
 8005200:	4158      	adcs	r0, r3
 8005202:	b2c0      	uxtb	r0, r0
  	default:
  		break;
  }
	
	return false;
}
 8005204:	b003      	add	sp, #12
 8005206:	bdf0      	pop	{r4, r5, r6, r7, pc}
      	case MATH_EQUAL:					if (flt1 == flt2)	return true;	break;
 8005208:	1c39      	adds	r1, r7, #0
 800520a:	9801      	ldr	r0, [sp, #4]
 800520c:	f7fb f960 	bl	80004d0 <__aeabi_fcmpeq>
 8005210:	1e43      	subs	r3, r0, #1
 8005212:	4198      	sbcs	r0, r3
 8005214:	e7f6      	b.n	8005204 <CheckSnippetCondition+0x7c>
      	case MATH_GREATER:				if (flt1 > flt2)	return true;	break;
 8005216:	1c39      	adds	r1, r7, #0
 8005218:	9801      	ldr	r0, [sp, #4]
 800521a:	f7fb f95f 	bl	80004dc <__aeabi_fcmplt>
 800521e:	1e43      	subs	r3, r0, #1
 8005220:	4198      	sbcs	r0, r3
 8005222:	e7ef      	b.n	8005204 <CheckSnippetCondition+0x7c>
		    case MATH_SMALLER:				if (flt1 < flt2 && flt1 != 0.0f)	return true;	break;
 8005224:	1c39      	adds	r1, r7, #0
 8005226:	9801      	ldr	r0, [sp, #4]
 8005228:	f7fb f96c 	bl	8000504 <__aeabi_fcmpgt>
 800522c:	2800      	cmp	r0, #0
 800522e:	d029      	beq.n	8005284 <CheckSnippetCondition+0xfc>
 8005230:	2100      	movs	r1, #0
 8005232:	1c38      	adds	r0, r7, #0
 8005234:	f7fb f94c 	bl	80004d0 <__aeabi_fcmpeq>
 8005238:	4243      	negs	r3, r0
 800523a:	4158      	adcs	r0, r3
 800523c:	e7e2      	b.n	8005204 <CheckSnippetCondition+0x7c>
			  case MATH_GREATER_EQUAL:	if (flt1 >= flt2)	return true;	break;
 800523e:	1c39      	adds	r1, r7, #0
 8005240:	9801      	ldr	r0, [sp, #4]
 8005242:	f7fb f955 	bl	80004f0 <__aeabi_fcmple>
 8005246:	1e43      	subs	r3, r0, #1
 8005248:	4198      	sbcs	r0, r3
 800524a:	e7db      	b.n	8005204 <CheckSnippetCondition+0x7c>
			  case MATH_SMALLER_EQUAL:	if (flt1 <= flt2 && flt1 != 0.0f)	return true;	break;
 800524c:	1c39      	adds	r1, r7, #0
 800524e:	9801      	ldr	r0, [sp, #4]
 8005250:	f7fb f962 	bl	8000518 <__aeabi_fcmpge>
 8005254:	2800      	cmp	r0, #0
 8005256:	d017      	beq.n	8005288 <CheckSnippetCondition+0x100>
 8005258:	2100      	movs	r1, #0
 800525a:	1c38      	adds	r0, r7, #0
 800525c:	f7fb f938 	bl	80004d0 <__aeabi_fcmpeq>
 8005260:	4243      	negs	r3, r0
 8005262:	4158      	adcs	r0, r3
 8005264:	e7ce      	b.n	8005204 <CheckSnippetCondition+0x7c>
				case MATH_NOT_EQUAL:			if (flt1 != flt2 && flt1 != 0.0f)	return true;	break;
 8005266:	1c39      	adds	r1, r7, #0
 8005268:	9801      	ldr	r0, [sp, #4]
 800526a:	f7fb f931 	bl	80004d0 <__aeabi_fcmpeq>
 800526e:	2800      	cmp	r0, #0
 8005270:	d10c      	bne.n	800528c <CheckSnippetCondition+0x104>
 8005272:	2100      	movs	r1, #0
 8005274:	1c38      	adds	r0, r7, #0
 8005276:	f7fb f92b 	bl	80004d0 <__aeabi_fcmpeq>
 800527a:	4243      	negs	r3, r0
 800527c:	4158      	adcs	r0, r3
 800527e:	e7c1      	b.n	8005204 <CheckSnippetCondition+0x7c>
			switch (snippets[index].cond.mathOperator)
 8005280:	2000      	movs	r0, #0
 8005282:	e7bf      	b.n	8005204 <CheckSnippetCondition+0x7c>
	return false;
 8005284:	2000      	movs	r0, #0
 8005286:	e7bd      	b.n	8005204 <CheckSnippetCondition+0x7c>
 8005288:	2000      	movs	r0, #0
 800528a:	e7bb      	b.n	8005204 <CheckSnippetCondition+0x7c>
 800528c:	2000      	movs	r0, #0
 800528e:	e7b9      	b.n	8005204 <CheckSnippetCondition+0x7c>
 8005290:	20006384 	.word	0x20006384
 8005294:	20000088 	.word	0x20000088
 8005298:	0801a570 	.word	0x0801a570
 800529c:	20000f3c 	.word	0x20000f3c

080052a0 <ExecuteSnippet>:
/*-----------------------------------------------------------*/

/* Execute activated Command Snippets
*/
BOS_Status ExecuteSnippet(void)
{
 80052a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052a2:	46ce      	mov	lr, r9
 80052a4:	4647      	mov	r7, r8
 80052a6:	b580      	push	{r7, lr}
	
	/* Must get this address even if output is not used otherwise memory will corrupt */
	/* Obtain the address of the output buffer.  Note there is no mutual
	exclusion on this buffer as it is assumed only one command console
	interface will be used at any one time. */
	pcOutputString = FreeRTOS_CLIGetOutputBuffer();	
 80052a8:	f008 ff6c 	bl	800e184 <FreeRTOS_CLIGetOutputBuffer>
 80052ac:	0006      	movs	r6, r0
	
	/* Go through activated Snippets */
	for(s=0 ; s<numOfRecordedSnippets ; s++)
 80052ae:	4b20      	ldr	r3, [pc, #128]	; (8005330 <ExecuteSnippet+0x90>)
 80052b0:	781b      	ldrb	r3, [r3, #0]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d036      	beq.n	8005324 <ExecuteSnippet+0x84>
 80052b6:	2400      	movs	r4, #0
  {
		if (snippets[s].state)								// Check for activated Snippets
 80052b8:	4f1e      	ldr	r7, [pc, #120]	; (8005334 <ExecuteSnippet+0x94>)
				while (ParseSnippetCommand(snippets[s].cmd, (int8_t *) &cInputString) != false)
				{			
					/* Pass the received command to the command interpreter.  The
					command interpreter is called repeatedly until it returns
					pdFALSE as it might generate more than one string. */
					CLI_CommandParser(PcPort, false, cInputString, pcOutputString);
 80052ba:	4b1f      	ldr	r3, [pc, #124]	; (8005338 <ExecuteSnippet+0x98>)
 80052bc:	4698      	mov	r8, r3
 80052be:	e01a      	b.n	80052f6 <ExecuteSnippet+0x56>
 80052c0:	4b1e      	ldr	r3, [pc, #120]	; (800533c <ExecuteSnippet+0x9c>)
 80052c2:	7818      	ldrb	r0, [r3, #0]
 80052c4:	0033      	movs	r3, r6
 80052c6:	4642      	mov	r2, r8
 80052c8:	2100      	movs	r1, #0
 80052ca:	f7ff fc1d 	bl	8004b08 <CLI_CommandParser>
					
					/* Clear output buffer since we do not need it. Input buffer is cleared in  CLI_CommandParser */
					memset( pcOutputString, 0x00, strlen((char*) pcOutputString) );
 80052ce:	0030      	movs	r0, r6
 80052d0:	f7fa ff22 	bl	8000118 <strlen>
 80052d4:	0002      	movs	r2, r0
 80052d6:	2100      	movs	r1, #0
 80052d8:	0030      	movs	r0, r6
 80052da:	f011 f934 	bl	8016546 <memset>
				while (ParseSnippetCommand(snippets[s].cmd, (int8_t *) &cInputString) != false)
 80052de:	4649      	mov	r1, r9
 80052e0:	68e8      	ldr	r0, [r5, #12]
 80052e2:	f7ff ff0f 	bl	8005104 <ParseSnippetCommand>
 80052e6:	2800      	cmp	r0, #0
 80052e8:	d1ea      	bne.n	80052c0 <ExecuteSnippet+0x20>
	for(s=0 ; s<numOfRecordedSnippets ; s++)
 80052ea:	3401      	adds	r4, #1
 80052ec:	b2a4      	uxth	r4, r4
 80052ee:	4b10      	ldr	r3, [pc, #64]	; (8005330 <ExecuteSnippet+0x90>)
 80052f0:	781b      	ldrb	r3, [r3, #0]
 80052f2:	42a3      	cmp	r3, r4
 80052f4:	d916      	bls.n	8005324 <ExecuteSnippet+0x84>
		if (snippets[s].state)								// Check for activated Snippets
 80052f6:	00a3      	lsls	r3, r4, #2
 80052f8:	191b      	adds	r3, r3, r4
 80052fa:	009b      	lsls	r3, r3, #2
 80052fc:	18fb      	adds	r3, r7, r3
 80052fe:	7c1b      	ldrb	r3, [r3, #16]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d0f2      	beq.n	80052ea <ExecuteSnippet+0x4a>
			if (CheckSnippetCondition(s))				// Process Snippet condition 				
 8005304:	b2e0      	uxtb	r0, r4
 8005306:	f7ff ff3f 	bl	8005188 <CheckSnippetCondition>
 800530a:	2800      	cmp	r0, #0
 800530c:	d0ed      	beq.n	80052ea <ExecuteSnippet+0x4a>
				BOS.response = BOS_RESPONSE_MSG;		// Disable CLI response
 800530e:	4b0c      	ldr	r3, [pc, #48]	; (8005340 <ExecuteSnippet+0xa0>)
 8005310:	2220      	movs	r2, #32
 8005312:	719a      	strb	r2, [r3, #6]
				while (ParseSnippetCommand(snippets[s].cmd, (int8_t *) &cInputString) != false)
 8005314:	4b08      	ldr	r3, [pc, #32]	; (8005338 <ExecuteSnippet+0x98>)
 8005316:	4699      	mov	r9, r3
 8005318:	00a3      	lsls	r3, r4, #2
 800531a:	191d      	adds	r5, r3, r4
 800531c:	00ad      	lsls	r5, r5, #2
 800531e:	4b05      	ldr	r3, [pc, #20]	; (8005334 <ExecuteSnippet+0x94>)
 8005320:	195d      	adds	r5, r3, r5
 8005322:	e7dc      	b.n	80052de <ExecuteSnippet+0x3e>
			}
		}
  }
	
	return result;
}
 8005324:	2000      	movs	r0, #0
 8005326:	bcc0      	pop	{r6, r7}
 8005328:	46b9      	mov	r9, r7
 800532a:	46b0      	mov	r8, r6
 800532c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800532e:	46c0      	nop			; (mov r8, r8)
 8005330:	20000ca3 	.word	0x20000ca3
 8005334:	20006384 	.word	0x20006384
 8005338:	20000c3c 	.word	0x20000c3c
 800533c:	2000055f 	.word	0x2000055f
 8005340:	20006368 	.word	0x20006368

08005344 <exploreCommand>:
//	
//	/* There is no more data to return after this single string, so return
//	pdFALSE. */
//	return pdFALSE;
return 0;
}
 8005344:	2000      	movs	r0, #0
 8005346:	4770      	bx	lr

08005348 <setBaudrateCommand>:
}

/*-----------------------------------------------------------*/

static portBASE_TYPE setBaudrateCommand( int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString )
{
 8005348:	b570      	push	{r4, r5, r6, lr}
 800534a:	b082      	sub	sp, #8
 800534c:	0004      	movs	r4, r0
 800534e:	0015      	movs	r5, r2
	BOS_Status result = BOS_OK;

	int8_t *pcParameterString1;
	int8_t *pcParameterString2;
	portBASE_TYPE xParameterStringLength1 = 0;
 8005350:	2300      	movs	r3, #0
 8005352:	9301      	str	r3, [sp, #4]
	portBASE_TYPE xParameterStringLength2 = 0;
 8005354:	9300      	str	r3, [sp, #0]

	/* Remove compile time warnings about unused parameters, and check the
	write buffer is not NULL.  NOTE - for simplicity, this example assumes the
	write buffer length is adequate, so does not check for buffer overflows. */
	( void ) xWriteBufferLen;
	configASSERT( pcWriteBuffer );
 8005356:	2800      	cmp	r0, #0
 8005358:	d015      	beq.n	8005386 <setBaudrateCommand+0x3e>

	/* 1st parameter for port name: P1 to P6 */
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 800535a:	aa01      	add	r2, sp, #4
 800535c:	2101      	movs	r1, #1
 800535e:	0028      	movs	r0, r5
 8005360:	f008 ff14 	bl	800e18c <FreeRTOS_CLIGetParameter>
	if (pcParameterString1[0] == 'p') {
 8005364:	2300      	movs	r3, #0
 8005366:	56c3      	ldrsb	r3, [r0, r3]
 8005368:	2b70      	cmp	r3, #112	; 0x70
 800536a:	d00e      	beq.n	800538a <setBaudrateCommand+0x42>
	else
	{
		result = BOS_ERR_WrongValue;
	}
  /* 2nd parameter for baudrate */
	pcParameterString2 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 2, &xParameterStringLength2);
 800536c:	466a      	mov	r2, sp
 800536e:	2102      	movs	r1, #2
 8005370:	0028      	movs	r0, r5
 8005372:	f008 ff0b 	bl	800e18c <FreeRTOS_CLIGetParameter>
	baudrate = ( uint32_t ) atol( ( char * ) pcParameterString2 );
 8005376:	f011 f890 	bl	801649a <atol>

	/* Respond to the command */
	if (BOS_ERR_WrongValue == result)
	{
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrongParam );
 800537a:	2213      	movs	r2, #19
 800537c:	4910      	ldr	r1, [pc, #64]	; (80053c0 <setBaudrateCommand+0x78>)
 800537e:	0020      	movs	r0, r4
 8005380:	f011 f8d8 	bl	8016534 <memcpy>
		UpdateBaudrate(port, baudrate);
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK, baudrate, port);
  }

	/* There is no more data to return after this single string, so return pdFALSE. */
	return pdFALSE;
 8005384:	e018      	b.n	80053b8 <setBaudrateCommand+0x70>
	configASSERT( pcWriteBuffer );
 8005386:	b672      	cpsid	i
 8005388:	e7fe      	b.n	8005388 <setBaudrateCommand+0x40>
		port = ( uint8_t ) atol( ( char * ) pcParameterString1+1 );
 800538a:	3001      	adds	r0, #1
 800538c:	f011 f885 	bl	801649a <atol>
 8005390:	0006      	movs	r6, r0
	pcParameterString2 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 2, &xParameterStringLength2);
 8005392:	466a      	mov	r2, sp
 8005394:	2102      	movs	r1, #2
 8005396:	0028      	movs	r0, r5
 8005398:	f008 fef8 	bl	800e18c <FreeRTOS_CLIGetParameter>
	baudrate = ( uint32_t ) atol( ( char * ) pcParameterString2 );
 800539c:	f011 f87d 	bl	801649a <atol>
 80053a0:	0005      	movs	r5, r0
		UpdateBaudrate(port, baudrate);
 80053a2:	b2f0      	uxtb	r0, r6
 80053a4:	0029      	movs	r1, r5
 80053a6:	f008 fd0b 	bl	800ddc0 <UpdateBaudrate>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK, baudrate, port);
 80053aa:	23ff      	movs	r3, #255	; 0xff
 80053ac:	4033      	ands	r3, r6
 80053ae:	002a      	movs	r2, r5
 80053b0:	4904      	ldr	r1, [pc, #16]	; (80053c4 <setBaudrateCommand+0x7c>)
 80053b2:	0020      	movs	r0, r4
 80053b4:	f011 f9d2 	bl	801675c <siprintf>
}
 80053b8:	2000      	movs	r0, #0
 80053ba:	b002      	add	sp, #8
 80053bc:	bd70      	pop	{r4, r5, r6, pc}
 80053be:	46c0      	nop			; (mov r8, r8)
 80053c0:	0801a5b4 	.word	0x0801a5b4
 80053c4:	0801a58c 	.word	0x0801a58c

080053c8 <flashsizeCommand>:
}

/*-----------------------------------------------------------*/

static portBASE_TYPE flashsizeCommand( int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString )
{	
 80053c8:	b510      	push	{r4, lr}
	
	/* Remove compile time warnings about unused parameters, and check the
	write buffer is not NULL.  NOTE - for simplicity, this example assumes the
	write buffer length is adequate, so does not check for buffer overflows. */
	( void ) xWriteBufferLen;
	configASSERT( pcWriteBuffer );
 80053ca:	2800      	cmp	r0, #0
 80053cc:	d006      	beq.n	80053dc <flashsizeCommand+0x14>
	
	/* Respond to the command */
	sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageFLASH, (*(uint32_t *) (MCU_F0_FLASH_SIZE_BASE)) & 0x0000FFFF );
 80053ce:	4b04      	ldr	r3, [pc, #16]	; (80053e0 <flashsizeCommand+0x18>)
 80053d0:	881a      	ldrh	r2, [r3, #0]
 80053d2:	4904      	ldr	r1, [pc, #16]	; (80053e4 <flashsizeCommand+0x1c>)
 80053d4:	f011 f9c2 	bl	801675c <siprintf>


	/* There is no more data to return after this single string, so return
	pdFALSE. */
	return pdFALSE;
}
 80053d8:	2000      	movs	r0, #0
 80053da:	bd10      	pop	{r4, pc}
	configASSERT( pcWriteBuffer );
 80053dc:	b672      	cpsid	i
 80053de:	e7fe      	b.n	80053de <flashsizeCommand+0x16>
 80053e0:	1ffff7cc 	.word	0x1ffff7cc
 80053e4:	0801a5c8 	.word	0x0801a5c8

080053e8 <testportCommand>:
}

/*-----------------------------------------------------------*/

static portBASE_TYPE testportCommand( int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString )
{	
 80053e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80053ea:	46d6      	mov	lr, sl
 80053ec:	464f      	mov	r7, r9
 80053ee:	b580      	push	{r7, lr}
 80053f0:	b085      	sub	sp, #20
 80053f2:	0004      	movs	r4, r0
 80053f4:	0010      	movs	r0, r2
	static const int8_t *pcMessageWrong = ( int8_t * ) "Wrong syntax\n\r";
	static const int8_t *pcMessageFail = ( int8_t * ) "P%d test failed\n\r";
  static const int8_t *pcMessageWrong1 = ( int8_t * ) "the port number is wrong\n\r";
  static const int8_t *pcMessageWait = ( int8_t * )"Please shorten the next port and press any key to continue testing the next one\n\r\n\r";
	int8_t *pcParameterString1;
	portBASE_TYPE xParameterStringLength1 = 0;
 80053f6:	2300      	movs	r3, #0
 80053f8:	9303      	str	r3, [sp, #12]
	BOS_Status result = BOS_OK;
	uint8_t portt,ports;
  extern uint8_t UARTRxBufIndex[NumOfPorts];
  char WriteVaule[1]="H";
 80053fa:	4b63      	ldr	r3, [pc, #396]	; (8005588 <testportCommand+0x1a0>)
 80053fc:	781a      	ldrb	r2, [r3, #0]
 80053fe:	ab02      	add	r3, sp, #8
 8005400:	701a      	strb	r2, [r3, #0]
  int LastEnter=0;
	/* Remove compile time warnings about unused parameters, and check the
	write buffer is not NULL.  NOTE - for simplicity, this example assumes the
	write buffer length is adequate, so does not check for buffer overflows. */
	( void ) xWriteBufferLen;
	configASSERT( pcWriteBuffer );
 8005402:	2c00      	cmp	r4, #0
 8005404:	d012      	beq.n	800542c <testportCommand+0x44>
	
	/* Obtain the 1st parameter string. */
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 8005406:	aa03      	add	r2, sp, #12
 8005408:	2101      	movs	r1, #1
 800540a:	f008 febf 	bl	800e18c <FreeRTOS_CLIGetParameter>
 800540e:	0005      	movs	r5, r0
  if(strcmp((char *)pcParameterString1,"all")==0)
 8005410:	495e      	ldr	r1, [pc, #376]	; (800558c <testportCommand+0x1a4>)
 8005412:	f7fa fe77 	bl	8000104 <strcmp>
 8005416:	2800      	cmp	r0, #0
 8005418:	d174      	bne.n	8005504 <testportCommand+0x11c>
  { 
    if(LastEnter==0)
      LastEnter=  UARTRxBufIndex[PcPort-1];
 800541a:	4b5d      	ldr	r3, [pc, #372]	; (8005590 <testportCommand+0x1a8>)
 800541c:	781a      	ldrb	r2, [r3, #0]
 800541e:	4b5d      	ldr	r3, [pc, #372]	; (8005594 <testportCommand+0x1ac>)
 8005420:	189b      	adds	r3, r3, r2
 8005422:	3b01      	subs	r3, #1
 8005424:	781f      	ldrb	r7, [r3, #0]
 8005426:	2501      	movs	r5, #1
    for (ports=1;ports<=NumOfPorts;ports++)
    {
      if(PcPort!=ports)
 8005428:	4e59      	ldr	r6, [pc, #356]	; (8005590 <testportCommand+0x1a8>)
 800542a:	e03e      	b.n	80054aa <testportCommand+0xc2>
	configASSERT( pcWriteBuffer );
 800542c:	b672      	cpsid	i
 800542e:	e7fe      	b.n	800542e <testportCommand+0x46>
      
      if (result == BOS_OK){ 
       sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK, ports);
       writePxMutex(PcPort, (char*) pcWriteBuffer, strlen((char*) pcWriteBuffer), 10, 100);}
     	else if (result == BOS_ERR_Keyword){
       sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageFail, ports );	
 8005430:	002a      	movs	r2, r5
 8005432:	4959      	ldr	r1, [pc, #356]	; (8005598 <testportCommand+0x1b0>)
 8005434:	0020      	movs	r0, r4
 8005436:	f011 f991 	bl	801675c <siprintf>
       writePxMutex(PcPort, (char*) pcWriteBuffer, strlen((char*) pcWriteBuffer), 10, 100);}
 800543a:	0020      	movs	r0, r4
 800543c:	f7fa fe6c 	bl	8000118 <strlen>
 8005440:	b282      	uxth	r2, r0
 8005442:	4b53      	ldr	r3, [pc, #332]	; (8005590 <testportCommand+0x1a8>)
 8005444:	7818      	ldrb	r0, [r3, #0]
 8005446:	2364      	movs	r3, #100	; 0x64
 8005448:	9300      	str	r3, [sp, #0]
 800544a:	3b5a      	subs	r3, #90	; 0x5a
 800544c:	0021      	movs	r1, r4
 800544e:	f008 fc47 	bl	800dce0 <writePxMutex>
       strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWait );	
 8005452:	2254      	movs	r2, #84	; 0x54
 8005454:	4951      	ldr	r1, [pc, #324]	; (800559c <testportCommand+0x1b4>)
 8005456:	0020      	movs	r0, r4
 8005458:	f011 f86c 	bl	8016534 <memcpy>
       writePxMutex(PcPort, (char*) pcWriteBuffer, strlen((char*) pcWriteBuffer), 10, 100);
 800545c:	0020      	movs	r0, r4
 800545e:	f7fa fe5b 	bl	8000118 <strlen>
 8005462:	b282      	uxth	r2, r0
 8005464:	4b4a      	ldr	r3, [pc, #296]	; (8005590 <testportCommand+0x1a8>)
 8005466:	7818      	ldrb	r0, [r3, #0]
 8005468:	2364      	movs	r3, #100	; 0x64
 800546a:	9300      	str	r3, [sp, #0]
 800546c:	3b5a      	subs	r3, #90	; 0x5a
 800546e:	0021      	movs	r1, r4
 8005470:	f008 fc36 	bl	800dce0 <writePxMutex>
       while(UARTRxBuf[PcPort-1][LastEnter+1]==0){Delay_ms(1);}
 8005474:	3701      	adds	r7, #1
 8005476:	4b46      	ldr	r3, [pc, #280]	; (8005590 <testportCommand+0x1a8>)
 8005478:	781b      	ldrb	r3, [r3, #0]
 800547a:	3b01      	subs	r3, #1
 800547c:	019b      	lsls	r3, r3, #6
 800547e:	4a48      	ldr	r2, [pc, #288]	; (80055a0 <testportCommand+0x1b8>)
 8005480:	18d3      	adds	r3, r2, r3
 8005482:	5ddb      	ldrb	r3, [r3, r7]
 8005484:	2b00      	cmp	r3, #0
 8005486:	d10d      	bne.n	80054a4 <testportCommand+0xbc>
 8005488:	4692      	mov	sl, r2
 800548a:	4b41      	ldr	r3, [pc, #260]	; (8005590 <testportCommand+0x1a8>)
 800548c:	4699      	mov	r9, r3
 800548e:	2001      	movs	r0, #1
 8005490:	f00a fdd4 	bl	801003c <HAL_Delay>
 8005494:	464b      	mov	r3, r9
 8005496:	781b      	ldrb	r3, [r3, #0]
 8005498:	3b01      	subs	r3, #1
 800549a:	019b      	lsls	r3, r3, #6
 800549c:	4453      	add	r3, sl
 800549e:	5ddb      	ldrb	r3, [r3, r7]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d0f4      	beq.n	800548e <testportCommand+0xa6>
    for (ports=1;ports<=NumOfPorts;ports++)
 80054a4:	3501      	adds	r5, #1
 80054a6:	2d06      	cmp	r5, #6
 80054a8:	d035      	beq.n	8005516 <testportCommand+0x12e>
 80054aa:	b2eb      	uxtb	r3, r5
 80054ac:	4699      	mov	r9, r3
      if(PcPort!=ports)
 80054ae:	7833      	ldrb	r3, [r6, #0]
 80054b0:	454b      	cmp	r3, r9
 80054b2:	d0f7      	beq.n	80054a4 <testportCommand+0xbc>
        WriteVaule[0]=rand();
 80054b4:	f011 f8f8 	bl	80166a8 <rand>
 80054b8:	466b      	mov	r3, sp
 80054ba:	7218      	strb	r0, [r3, #8]
        writePxMutex(ports, WriteVaule,1, 10, 100);
 80054bc:	2364      	movs	r3, #100	; 0x64
 80054be:	9300      	str	r3, [sp, #0]
 80054c0:	3b5a      	subs	r3, #90	; 0x5a
 80054c2:	2201      	movs	r2, #1
 80054c4:	a902      	add	r1, sp, #8
 80054c6:	4648      	mov	r0, r9
 80054c8:	f008 fc0a 	bl	800dce0 <writePxMutex>
        ReadValue[0]= (GetUart(ports)->Instance->RDR);
 80054cc:	4648      	mov	r0, r9
 80054ce:	f008 fbe9 	bl	800dca4 <GetUart>
 80054d2:	6803      	ldr	r3, [r0, #0]
 80054d4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
      if(WriteVaule[0]==ReadValue[0])
 80054d6:	466a      	mov	r2, sp
 80054d8:	7a12      	ldrb	r2, [r2, #8]
 80054da:	b2db      	uxtb	r3, r3
 80054dc:	429a      	cmp	r2, r3
 80054de:	d1a7      	bne.n	8005430 <testportCommand+0x48>
       sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK, ports);
 80054e0:	002a      	movs	r2, r5
 80054e2:	4930      	ldr	r1, [pc, #192]	; (80055a4 <testportCommand+0x1bc>)
 80054e4:	0020      	movs	r0, r4
 80054e6:	f011 f939 	bl	801675c <siprintf>
       writePxMutex(PcPort, (char*) pcWriteBuffer, strlen((char*) pcWriteBuffer), 10, 100);}
 80054ea:	0020      	movs	r0, r4
 80054ec:	f7fa fe14 	bl	8000118 <strlen>
 80054f0:	b282      	uxth	r2, r0
 80054f2:	4b27      	ldr	r3, [pc, #156]	; (8005590 <testportCommand+0x1a8>)
 80054f4:	7818      	ldrb	r0, [r3, #0]
 80054f6:	2364      	movs	r3, #100	; 0x64
 80054f8:	9300      	str	r3, [sp, #0]
 80054fa:	3b5a      	subs	r3, #90	; 0x5a
 80054fc:	0021      	movs	r1, r4
 80054fe:	f008 fbef 	bl	800dce0 <writePxMutex>
 8005502:	e7a6      	b.n	8005452 <testportCommand+0x6a>
       LastEnter++;
        }
      }
    }
	else if (pcParameterString1[0] == 'p') {
 8005504:	2300      	movs	r3, #0
 8005506:	56eb      	ldrsb	r3, [r5, r3]
 8005508:	2b70      	cmp	r3, #112	; 0x70
 800550a:	d00a      	beq.n	8005522 <testportCommand+0x13a>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrong1 );	
	else if (result == BOS_ERR_Keyword)  
    sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageFail, portt );
    }
    else {
    strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrong );	
 800550c:	220f      	movs	r2, #15
 800550e:	4926      	ldr	r1, [pc, #152]	; (80055a8 <testportCommand+0x1c0>)
 8005510:	0020      	movs	r0, r4
 8005512:	f011 f80f 	bl	8016534 <memcpy>
	}
	/* There is no more data to return after this single string, so return
	pdFALSE. */
	return pdFALSE;
}
 8005516:	2000      	movs	r0, #0
 8005518:	b005      	add	sp, #20
 800551a:	bcc0      	pop	{r6, r7}
 800551c:	46ba      	mov	sl, r7
 800551e:	46b1      	mov	r9, r6
 8005520:	bdf0      	pop	{r4, r5, r6, r7, pc}
		portt = ( uint8_t ) atol( ( char * ) pcParameterString1+1);
 8005522:	1c68      	adds	r0, r5, #1
 8005524:	f010 ffb9 	bl	801649a <atol>
 8005528:	0005      	movs	r5, r0
 800552a:	b2c6      	uxtb	r6, r0
    if(portt>0 && portt<=NumOfPorts)
 800552c:	1e73      	subs	r3, r6, #1
 800552e:	2b04      	cmp	r3, #4
 8005530:	d905      	bls.n	800553e <testportCommand+0x156>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrong1 );	
 8005532:	221b      	movs	r2, #27
 8005534:	491d      	ldr	r1, [pc, #116]	; (80055ac <testportCommand+0x1c4>)
 8005536:	0020      	movs	r0, r4
 8005538:	f010 fffc 	bl	8016534 <memcpy>
	return pdFALSE;
 800553c:	e7eb      	b.n	8005516 <testportCommand+0x12e>
        WriteVaule[0]=rand();
 800553e:	f011 f8b3 	bl	80166a8 <rand>
 8005542:	466b      	mov	r3, sp
 8005544:	7218      	strb	r0, [r3, #8]
        writePxMutex(portt, WriteVaule,1, cmd50ms, 100);
 8005546:	2364      	movs	r3, #100	; 0x64
 8005548:	9300      	str	r3, [sp, #0]
 800554a:	3b32      	subs	r3, #50	; 0x32
 800554c:	2201      	movs	r2, #1
 800554e:	a902      	add	r1, sp, #8
 8005550:	0030      	movs	r0, r6
 8005552:	f008 fbc5 	bl	800dce0 <writePxMutex>
        ReadValue[0]= (GetUart(portt)->Instance->RDR);
 8005556:	0030      	movs	r0, r6
 8005558:	f008 fba4 	bl	800dca4 <GetUart>
 800555c:	6803      	ldr	r3, [r0, #0]
 800555e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
  if(WriteVaule[0]==ReadValue[0])
 8005560:	466a      	mov	r2, sp
 8005562:	7a12      	ldrb	r2, [r2, #8]
 8005564:	b2db      	uxtb	r3, r3
 8005566:	429a      	cmp	r2, r3
 8005568:	d006      	beq.n	8005578 <testportCommand+0x190>
    sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageFail, portt );
 800556a:	22ff      	movs	r2, #255	; 0xff
 800556c:	402a      	ands	r2, r5
 800556e:	490a      	ldr	r1, [pc, #40]	; (8005598 <testportCommand+0x1b0>)
 8005570:	0020      	movs	r0, r4
 8005572:	f011 f8f3 	bl	801675c <siprintf>
 8005576:	e7ce      	b.n	8005516 <testportCommand+0x12e>
   sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK, portt);
 8005578:	22ff      	movs	r2, #255	; 0xff
 800557a:	402a      	ands	r2, r5
 800557c:	4909      	ldr	r1, [pc, #36]	; (80055a4 <testportCommand+0x1bc>)
 800557e:	0020      	movs	r0, r4
 8005580:	f011 f8ec 	bl	801675c <siprintf>
 8005584:	e7c7      	b.n	8005516 <testportCommand+0x12e>
 8005586:	46c0      	nop			; (mov r8, r8)
 8005588:	0801a698 	.word	0x0801a698
 800558c:	08019dc0 	.word	0x08019dc0
 8005590:	2000055f 	.word	0x2000055f
 8005594:	20000e94 	.word	0x20000e94
 8005598:	0801a604 	.word	0x0801a604
 800559c:	0801a618 	.word	0x0801a618
 80055a0:	20000d54 	.word	0x20000d54
 80055a4:	0801a5e8 	.word	0x0801a5e8
 80055a8:	0801a66c 	.word	0x0801a66c
 80055ac:	0801a67c 	.word	0x0801a67c

080055b0 <unbridgeCommand>:
{	
 80055b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80055b2:	b083      	sub	sp, #12
 80055b4:	0004      	movs	r4, r0
 80055b6:	0015      	movs	r5, r2
	portBASE_TYPE xParameterStringLength1 = 0, xParameterStringLength2 = 0;
 80055b8:	2300      	movs	r3, #0
 80055ba:	9301      	str	r3, [sp, #4]
 80055bc:	9300      	str	r3, [sp, #0]
	configASSERT( pcWriteBuffer );
 80055be:	2800      	cmp	r0, #0
 80055c0:	d017      	beq.n	80055f2 <unbridgeCommand+0x42>
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 80055c2:	aa01      	add	r2, sp, #4
 80055c4:	2101      	movs	r1, #1
 80055c6:	0028      	movs	r0, r5
 80055c8:	f008 fde0 	bl	800e18c <FreeRTOS_CLIGetParameter>
	if (pcParameterString1[0] == 'p') {
 80055cc:	2300      	movs	r3, #0
 80055ce:	56c3      	ldrsb	r3, [r0, r3]
 80055d0:	2b70      	cmp	r3, #112	; 0x70
 80055d2:	d010      	beq.n	80055f6 <unbridgeCommand+0x46>
	pcParameterString2 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 2, &xParameterStringLength2);
 80055d4:	466a      	mov	r2, sp
 80055d6:	2102      	movs	r1, #2
 80055d8:	0028      	movs	r0, r5
 80055da:	f008 fdd7 	bl	800e18c <FreeRTOS_CLIGetParameter>
	if (pcParameterString2[0] == 'p') {
 80055de:	2300      	movs	r3, #0
 80055e0:	56c3      	ldrsb	r3, [r0, r3]
 80055e2:	2b70      	cmp	r3, #112	; 0x70
 80055e4:	d028      	beq.n	8005638 <unbridgeCommand+0x88>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrong );	
 80055e6:	220f      	movs	r2, #15
 80055e8:	491a      	ldr	r1, [pc, #104]	; (8005654 <unbridgeCommand+0xa4>)
 80055ea:	0020      	movs	r0, r4
 80055ec:	f010 ffa2 	bl	8016534 <memcpy>
 80055f0:	e02d      	b.n	800564e <unbridgeCommand+0x9e>
	configASSERT( pcWriteBuffer );
 80055f2:	b672      	cpsid	i
 80055f4:	e7fe      	b.n	80055f4 <unbridgeCommand+0x44>
		port1 = ( uint8_t ) atol( ( char * ) pcParameterString1+1 );
 80055f6:	3001      	adds	r0, #1
 80055f8:	f010 ff4f 	bl	801649a <atol>
 80055fc:	0006      	movs	r6, r0
 80055fe:	b2c7      	uxtb	r7, r0
	pcParameterString2 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 2, &xParameterStringLength2);
 8005600:	466a      	mov	r2, sp
 8005602:	2102      	movs	r1, #2
 8005604:	0028      	movs	r0, r5
 8005606:	f008 fdc1 	bl	800e18c <FreeRTOS_CLIGetParameter>
	if (pcParameterString2[0] == 'p') {
 800560a:	2300      	movs	r3, #0
 800560c:	56c3      	ldrsb	r3, [r0, r3]
 800560e:	2b70      	cmp	r3, #112	; 0x70
 8005610:	d1e9      	bne.n	80055e6 <unbridgeCommand+0x36>
		port2 = ( uint8_t ) atol( ( char * ) pcParameterString2+1 );
 8005612:	3001      	adds	r0, #1
 8005614:	f010 ff41 	bl	801649a <atol>
 8005618:	0005      	movs	r5, r0
		result = Unbridge(port1, port2);
 800561a:	b2c1      	uxtb	r1, r0
 800561c:	0038      	movs	r0, r7
 800561e:	f7fe ff6f 	bl	8004500 <Unbridge>
	if (result == BOS_OK) 
 8005622:	2800      	cmp	r0, #0
 8005624:	d10c      	bne.n	8005640 <unbridgeCommand+0x90>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK, port1, port2 );
 8005626:	22ff      	movs	r2, #255	; 0xff
 8005628:	002b      	movs	r3, r5
 800562a:	4013      	ands	r3, r2
 800562c:	4032      	ands	r2, r6
 800562e:	490a      	ldr	r1, [pc, #40]	; (8005658 <unbridgeCommand+0xa8>)
 8005630:	0020      	movs	r0, r4
 8005632:	f011 f893 	bl	801675c <siprintf>
 8005636:	e00a      	b.n	800564e <unbridgeCommand+0x9e>
		port2 = ( uint8_t ) atol( ( char * ) pcParameterString2+1 );
 8005638:	3001      	adds	r0, #1
 800563a:	f010 ff2e 	bl	801649a <atol>
	else if (result == BOS_ERR_WrongParam) 
 800563e:	e7d2      	b.n	80055e6 <unbridgeCommand+0x36>
 8005640:	2867      	cmp	r0, #103	; 0x67
 8005642:	d0d0      	beq.n	80055e6 <unbridgeCommand+0x36>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageFail );	
 8005644:	2219      	movs	r2, #25
 8005646:	4905      	ldr	r1, [pc, #20]	; (800565c <unbridgeCommand+0xac>)
 8005648:	0020      	movs	r0, r4
 800564a:	f010 ff73 	bl	8016534 <memcpy>
}
 800564e:	2000      	movs	r0, #0
 8005650:	b003      	add	sp, #12
 8005652:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005654:	0801a66c 	.word	0x0801a66c
 8005658:	0801a69c 	.word	0x0801a69c
 800565c:	0801a6bc 	.word	0x0801a6bc

08005660 <bridgeCommand>:
{	
 8005660:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005662:	b083      	sub	sp, #12
 8005664:	0004      	movs	r4, r0
 8005666:	0015      	movs	r5, r2
	portBASE_TYPE xParameterStringLength1 = 0, xParameterStringLength2 = 0;
 8005668:	2300      	movs	r3, #0
 800566a:	9301      	str	r3, [sp, #4]
 800566c:	9300      	str	r3, [sp, #0]
	configASSERT( pcWriteBuffer );
 800566e:	2800      	cmp	r0, #0
 8005670:	d017      	beq.n	80056a2 <bridgeCommand+0x42>
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 8005672:	aa01      	add	r2, sp, #4
 8005674:	2101      	movs	r1, #1
 8005676:	0028      	movs	r0, r5
 8005678:	f008 fd88 	bl	800e18c <FreeRTOS_CLIGetParameter>
	if (pcParameterString1[0] == 'p') {
 800567c:	2300      	movs	r3, #0
 800567e:	56c3      	ldrsb	r3, [r0, r3]
 8005680:	2b70      	cmp	r3, #112	; 0x70
 8005682:	d010      	beq.n	80056a6 <bridgeCommand+0x46>
	pcParameterString2 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 2, &xParameterStringLength2);
 8005684:	466a      	mov	r2, sp
 8005686:	2102      	movs	r1, #2
 8005688:	0028      	movs	r0, r5
 800568a:	f008 fd7f 	bl	800e18c <FreeRTOS_CLIGetParameter>
	if (pcParameterString2[0] == 'p') {
 800568e:	2300      	movs	r3, #0
 8005690:	56c3      	ldrsb	r3, [r0, r3]
 8005692:	2b70      	cmp	r3, #112	; 0x70
 8005694:	d028      	beq.n	80056e8 <bridgeCommand+0x88>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrong );	
 8005696:	220f      	movs	r2, #15
 8005698:	491a      	ldr	r1, [pc, #104]	; (8005704 <bridgeCommand+0xa4>)
 800569a:	0020      	movs	r0, r4
 800569c:	f010 ff4a 	bl	8016534 <memcpy>
 80056a0:	e02d      	b.n	80056fe <bridgeCommand+0x9e>
	configASSERT( pcWriteBuffer );
 80056a2:	b672      	cpsid	i
 80056a4:	e7fe      	b.n	80056a4 <bridgeCommand+0x44>
		port1 = ( uint8_t ) atol( ( char * ) pcParameterString1+1 );
 80056a6:	3001      	adds	r0, #1
 80056a8:	f010 fef7 	bl	801649a <atol>
 80056ac:	0006      	movs	r6, r0
 80056ae:	b2c7      	uxtb	r7, r0
	pcParameterString2 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 2, &xParameterStringLength2);
 80056b0:	466a      	mov	r2, sp
 80056b2:	2102      	movs	r1, #2
 80056b4:	0028      	movs	r0, r5
 80056b6:	f008 fd69 	bl	800e18c <FreeRTOS_CLIGetParameter>
	if (pcParameterString2[0] == 'p') {
 80056ba:	2300      	movs	r3, #0
 80056bc:	56c3      	ldrsb	r3, [r0, r3]
 80056be:	2b70      	cmp	r3, #112	; 0x70
 80056c0:	d1e9      	bne.n	8005696 <bridgeCommand+0x36>
		port2 = ( uint8_t ) atol( ( char * ) pcParameterString2+1 );
 80056c2:	3001      	adds	r0, #1
 80056c4:	f010 fee9 	bl	801649a <atol>
 80056c8:	0005      	movs	r5, r0
		result = Bridge(port1, port2);
 80056ca:	b2c1      	uxtb	r1, r0
 80056cc:	0038      	movs	r0, r7
 80056ce:	f7fe ff03 	bl	80044d8 <Bridge>
	if (result == BOS_OK) 
 80056d2:	2800      	cmp	r0, #0
 80056d4:	d10c      	bne.n	80056f0 <bridgeCommand+0x90>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK, port1, port2 );
 80056d6:	22ff      	movs	r2, #255	; 0xff
 80056d8:	002b      	movs	r3, r5
 80056da:	4013      	ands	r3, r2
 80056dc:	4032      	ands	r2, r6
 80056de:	490a      	ldr	r1, [pc, #40]	; (8005708 <bridgeCommand+0xa8>)
 80056e0:	0020      	movs	r0, r4
 80056e2:	f011 f83b 	bl	801675c <siprintf>
 80056e6:	e00a      	b.n	80056fe <bridgeCommand+0x9e>
		port2 = ( uint8_t ) atol( ( char * ) pcParameterString2+1 );
 80056e8:	3001      	adds	r0, #1
 80056ea:	f010 fed6 	bl	801649a <atol>
	else if (result == BOS_ERR_WrongParam) 
 80056ee:	e7d2      	b.n	8005696 <bridgeCommand+0x36>
 80056f0:	2867      	cmp	r0, #103	; 0x67
 80056f2:	d0d0      	beq.n	8005696 <bridgeCommand+0x36>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageFail );	
 80056f4:	2217      	movs	r2, #23
 80056f6:	4905      	ldr	r1, [pc, #20]	; (800570c <bridgeCommand+0xac>)
 80056f8:	0020      	movs	r0, r4
 80056fa:	f010 ff1b 	bl	8016534 <memcpy>
}
 80056fe:	2000      	movs	r0, #0
 8005700:	b003      	add	sp, #12
 8005702:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005704:	0801a66c 	.word	0x0801a66c
 8005708:	0801a6d8 	.word	0x0801a6d8
 800570c:	0801a6fc 	.word	0x0801a6fc

08005710 <delSnipCommand>:
{	
 8005710:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005712:	46de      	mov	lr, fp
 8005714:	4657      	mov	r7, sl
 8005716:	464e      	mov	r6, r9
 8005718:	4645      	mov	r5, r8
 800571a:	b5e0      	push	{r5, r6, r7, lr}
 800571c:	b083      	sub	sp, #12
 800571e:	0007      	movs	r7, r0
 8005720:	0010      	movs	r0, r2
	portBASE_TYPE xParameterStringLength1 = 0;
 8005722:	2300      	movs	r3, #0
 8005724:	9301      	str	r3, [sp, #4]
	configASSERT( pcWriteBuffer );
 8005726:	2f00      	cmp	r7, #0
 8005728:	d013      	beq.n	8005752 <delSnipCommand+0x42>
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 800572a:	aa01      	add	r2, sp, #4
 800572c:	2101      	movs	r1, #1
 800572e:	f008 fd2d 	bl	800e18c <FreeRTOS_CLIGetParameter>
	uint8_t index = ( uint8_t ) atoi( ( char * ) pcParameterString1 );
 8005732:	f010 feac 	bl	801648e <atoi>
 8005736:	4681      	mov	r9, r0
 8005738:	b2c5      	uxtb	r5, r0
	if (!index || index > numOfRecordedSnippets)	result = BOS_ERROR;
 800573a:	2d00      	cmp	r5, #0
 800573c:	d003      	beq.n	8005746 <delSnipCommand+0x36>
 800573e:	4b31      	ldr	r3, [pc, #196]	; (8005804 <delSnipCommand+0xf4>)
 8005740:	781b      	ldrb	r3, [r3, #0]
 8005742:	42ab      	cmp	r3, r5
 8005744:	d207      	bcs.n	8005756 <delSnipCommand+0x46>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrong );
 8005746:	2223      	movs	r2, #35	; 0x23
 8005748:	492f      	ldr	r1, [pc, #188]	; (8005808 <delSnipCommand+0xf8>)
 800574a:	0038      	movs	r0, r7
 800574c:	f010 fef2 	bl	8016534 <memcpy>
	return pdFALSE;
 8005750:	e04f      	b.n	80057f2 <delSnipCommand+0xe2>
	configASSERT( pcWriteBuffer );
 8005752:	b672      	cpsid	i
 8005754:	e7fe      	b.n	8005754 <delSnipCommand+0x44>
		snippets[index-1].cond.conditionType = 0;
 8005756:	24ff      	movs	r4, #255	; 0xff
 8005758:	4004      	ands	r4, r0
 800575a:	3c01      	subs	r4, #1
 800575c:	4b2b      	ldr	r3, [pc, #172]	; (800580c <delSnipCommand+0xfc>)
 800575e:	4698      	mov	r8, r3
 8005760:	00a6      	lsls	r6, r4, #2
 8005762:	1933      	adds	r3, r6, r4
 8005764:	009b      	lsls	r3, r3, #2
 8005766:	2200      	movs	r2, #0
 8005768:	4692      	mov	sl, r2
 800576a:	4642      	mov	r2, r8
 800576c:	4651      	mov	r1, sl
 800576e:	5499      	strb	r1, [r3, r2]
		snippets[index-1].cond.mathOperator = 0;
 8005770:	1933      	adds	r3, r6, r4
 8005772:	009b      	lsls	r3, r3, #2
 8005774:	4443      	add	r3, r8
 8005776:	469b      	mov	fp, r3
 8005778:	4652      	mov	r2, sl
 800577a:	7059      	strb	r1, [r3, #1]
		memset(snippets[index-1].cond.buffer1, 0, 4);
 800577c:	1930      	adds	r0, r6, r4
 800577e:	0080      	lsls	r0, r0, #2
 8005780:	3002      	adds	r0, #2
 8005782:	4440      	add	r0, r8
 8005784:	3204      	adds	r2, #4
 8005786:	f010 fede 	bl	8016546 <memset>
		snippets[index-1].state = false;
 800578a:	465b      	mov	r3, fp
 800578c:	4652      	mov	r2, sl
 800578e:	741a      	strb	r2, [r3, #16]
		free(snippets[index-1].cmd);
 8005790:	68d8      	ldr	r0, [r3, #12]
 8005792:	f010 feb7 	bl	8016504 <free>
		snippets[index-1].cmd = NULL;
 8005796:	465c      	mov	r4, fp
 8005798:	4653      	mov	r3, sl
 800579a:	60e3      	str	r3, [r4, #12]
		for(uint8_t s=index ; s<numOfRecordedSnippets ; s++) {
 800579c:	4b19      	ldr	r3, [pc, #100]	; (8005804 <delSnipCommand+0xf4>)
 800579e:	781e      	ldrb	r6, [r3, #0]
 80057a0:	42b5      	cmp	r5, r6
 80057a2:	d21c      	bcs.n	80057de <delSnipCommand+0xce>
 80057a4:	20ff      	movs	r0, #255	; 0xff
 80057a6:	464b      	mov	r3, r9
 80057a8:	4018      	ands	r0, r3
 80057aa:	0084      	lsls	r4, r0, #2
 80057ac:	1824      	adds	r4, r4, r0
 80057ae:	00a4      	lsls	r4, r4, #2
 80057b0:	4b16      	ldr	r3, [pc, #88]	; (800580c <delSnipCommand+0xfc>)
 80057b2:	18e4      	adds	r4, r4, r3
 80057b4:	e004      	b.n	80057c0 <delSnipCommand+0xb0>
 80057b6:	3501      	adds	r5, #1
 80057b8:	b2ed      	uxtb	r5, r5
 80057ba:	3414      	adds	r4, #20
 80057bc:	42b5      	cmp	r5, r6
 80057be:	d00e      	beq.n	80057de <delSnipCommand+0xce>
			if (snippets[s].cond.conditionType) {
 80057c0:	7823      	ldrb	r3, [r4, #0]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d0f7      	beq.n	80057b6 <delSnipCommand+0xa6>
				memcpy( &snippets[s-1], &snippets[s], sizeof(snippet_t) );
 80057c6:	2214      	movs	r2, #20
 80057c8:	0021      	movs	r1, r4
 80057ca:	0020      	movs	r0, r4
 80057cc:	3814      	subs	r0, #20
 80057ce:	f010 feb1 	bl	8016534 <memcpy>
				memset( &snippets[s], 0, sizeof(snippet_t) );
 80057d2:	2214      	movs	r2, #20
 80057d4:	2100      	movs	r1, #0
 80057d6:	0020      	movs	r0, r4
 80057d8:	f010 feb5 	bl	8016546 <memset>
 80057dc:	e7eb      	b.n	80057b6 <delSnipCommand+0xa6>
		--numOfRecordedSnippets;
 80057de:	3e01      	subs	r6, #1
 80057e0:	4b08      	ldr	r3, [pc, #32]	; (8005804 <delSnipCommand+0xf4>)
 80057e2:	701e      	strb	r6, [r3, #0]
		SaveToRO();
 80057e4:	f005 fda4 	bl	800b330 <SaveToRO>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK );
 80057e8:	2236      	movs	r2, #54	; 0x36
 80057ea:	4909      	ldr	r1, [pc, #36]	; (8005810 <delSnipCommand+0x100>)
 80057ec:	0038      	movs	r0, r7
 80057ee:	f010 fea1 	bl	8016534 <memcpy>
}
 80057f2:	2000      	movs	r0, #0
 80057f4:	b003      	add	sp, #12
 80057f6:	bcf0      	pop	{r4, r5, r6, r7}
 80057f8:	46bb      	mov	fp, r7
 80057fa:	46b2      	mov	sl, r6
 80057fc:	46a9      	mov	r9, r5
 80057fe:	46a0      	mov	r8, r4
 8005800:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005802:	46c0      	nop			; (mov r8, r8)
 8005804:	20000ca3 	.word	0x20000ca3
 8005808:	0801a74c 	.word	0x0801a74c
 800580c:	20006384 	.word	0x20006384
 8005810:	0801a714 	.word	0x0801a714

08005814 <pauseSnipCommand>:
{	
 8005814:	b510      	push	{r4, lr}
 8005816:	b082      	sub	sp, #8
 8005818:	0004      	movs	r4, r0
 800581a:	0010      	movs	r0, r2
	portBASE_TYPE xParameterStringLength1 = 0;
 800581c:	2300      	movs	r3, #0
 800581e:	9301      	str	r3, [sp, #4]
	configASSERT( pcWriteBuffer );
 8005820:	2c00      	cmp	r4, #0
 8005822:	d014      	beq.n	800584e <pauseSnipCommand+0x3a>
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 8005824:	aa01      	add	r2, sp, #4
 8005826:	2101      	movs	r1, #1
 8005828:	f008 fcb0 	bl	800e18c <FreeRTOS_CLIGetParameter>
	uint8_t index = ( uint8_t ) atoi( ( char * ) pcParameterString1 );
 800582c:	f010 fe2f 	bl	801648e <atoi>
 8005830:	b2c3      	uxtb	r3, r0
	if (!index || index > numOfRecordedSnippets)	result = BOS_ERROR;
 8005832:	2b00      	cmp	r3, #0
 8005834:	d003      	beq.n	800583e <pauseSnipCommand+0x2a>
 8005836:	4a10      	ldr	r2, [pc, #64]	; (8005878 <pauseSnipCommand+0x64>)
 8005838:	7812      	ldrb	r2, [r2, #0]
 800583a:	429a      	cmp	r2, r3
 800583c:	d209      	bcs.n	8005852 <pauseSnipCommand+0x3e>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrong );
 800583e:	2223      	movs	r2, #35	; 0x23
 8005840:	490e      	ldr	r1, [pc, #56]	; (800587c <pauseSnipCommand+0x68>)
 8005842:	0020      	movs	r0, r4
 8005844:	f010 fe76 	bl	8016534 <memcpy>
}
 8005848:	2000      	movs	r0, #0
 800584a:	b002      	add	sp, #8
 800584c:	bd10      	pop	{r4, pc}
	configASSERT( pcWriteBuffer );
 800584e:	b672      	cpsid	i
 8005850:	e7fe      	b.n	8005850 <pauseSnipCommand+0x3c>
		snippets[index-1].state = false;
 8005852:	23ff      	movs	r3, #255	; 0xff
 8005854:	4003      	ands	r3, r0
 8005856:	3b01      	subs	r3, #1
 8005858:	009a      	lsls	r2, r3, #2
 800585a:	18d3      	adds	r3, r2, r3
 800585c:	009b      	lsls	r3, r3, #2
 800585e:	4a08      	ldr	r2, [pc, #32]	; (8005880 <pauseSnipCommand+0x6c>)
 8005860:	18d3      	adds	r3, r2, r3
 8005862:	2200      	movs	r2, #0
 8005864:	741a      	strb	r2, [r3, #16]
		SaveToRO();
 8005866:	f005 fd63 	bl	800b330 <SaveToRO>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK );
 800586a:	2235      	movs	r2, #53	; 0x35
 800586c:	4905      	ldr	r1, [pc, #20]	; (8005884 <pauseSnipCommand+0x70>)
 800586e:	0020      	movs	r0, r4
 8005870:	f010 fe60 	bl	8016534 <memcpy>
 8005874:	e7e8      	b.n	8005848 <pauseSnipCommand+0x34>
 8005876:	46c0      	nop			; (mov r8, r8)
 8005878:	20000ca3 	.word	0x20000ca3
 800587c:	0801a74c 	.word	0x0801a74c
 8005880:	20006384 	.word	0x20006384
 8005884:	0801a770 	.word	0x0801a770

08005888 <actSnipCommand>:
{	
 8005888:	b510      	push	{r4, lr}
 800588a:	b082      	sub	sp, #8
 800588c:	0004      	movs	r4, r0
 800588e:	0010      	movs	r0, r2
	portBASE_TYPE xParameterStringLength1 = 0;
 8005890:	2300      	movs	r3, #0
 8005892:	9301      	str	r3, [sp, #4]
	configASSERT( pcWriteBuffer );
 8005894:	2c00      	cmp	r4, #0
 8005896:	d014      	beq.n	80058c2 <actSnipCommand+0x3a>
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 8005898:	aa01      	add	r2, sp, #4
 800589a:	2101      	movs	r1, #1
 800589c:	f008 fc76 	bl	800e18c <FreeRTOS_CLIGetParameter>
	uint8_t index = ( uint8_t ) atoi( ( char * ) pcParameterString1 );
 80058a0:	f010 fdf5 	bl	801648e <atoi>
 80058a4:	b2c3      	uxtb	r3, r0
	if (!index || index > numOfRecordedSnippets)	result = BOS_ERROR;
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d003      	beq.n	80058b2 <actSnipCommand+0x2a>
 80058aa:	4a10      	ldr	r2, [pc, #64]	; (80058ec <actSnipCommand+0x64>)
 80058ac:	7812      	ldrb	r2, [r2, #0]
 80058ae:	429a      	cmp	r2, r3
 80058b0:	d209      	bcs.n	80058c6 <actSnipCommand+0x3e>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrong );
 80058b2:	2223      	movs	r2, #35	; 0x23
 80058b4:	490e      	ldr	r1, [pc, #56]	; (80058f0 <actSnipCommand+0x68>)
 80058b6:	0020      	movs	r0, r4
 80058b8:	f010 fe3c 	bl	8016534 <memcpy>
}
 80058bc:	2000      	movs	r0, #0
 80058be:	b002      	add	sp, #8
 80058c0:	bd10      	pop	{r4, pc}
	configASSERT( pcWriteBuffer );
 80058c2:	b672      	cpsid	i
 80058c4:	e7fe      	b.n	80058c4 <actSnipCommand+0x3c>
		snippets[index-1].state = true;
 80058c6:	23ff      	movs	r3, #255	; 0xff
 80058c8:	4003      	ands	r3, r0
 80058ca:	3b01      	subs	r3, #1
 80058cc:	009a      	lsls	r2, r3, #2
 80058ce:	18d3      	adds	r3, r2, r3
 80058d0:	009b      	lsls	r3, r3, #2
 80058d2:	4a08      	ldr	r2, [pc, #32]	; (80058f4 <actSnipCommand+0x6c>)
 80058d4:	18d3      	adds	r3, r2, r3
 80058d6:	2201      	movs	r2, #1
 80058d8:	741a      	strb	r2, [r3, #16]
		SaveToRO();
 80058da:	f005 fd29 	bl	800b330 <SaveToRO>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK );
 80058de:	2238      	movs	r2, #56	; 0x38
 80058e0:	4905      	ldr	r1, [pc, #20]	; (80058f8 <actSnipCommand+0x70>)
 80058e2:	0020      	movs	r0, r4
 80058e4:	f010 fe26 	bl	8016534 <memcpy>
 80058e8:	e7e8      	b.n	80058bc <actSnipCommand+0x34>
 80058ea:	46c0      	nop			; (mov r8, r8)
 80058ec:	20000ca3 	.word	0x20000ca3
 80058f0:	0801a74c 	.word	0x0801a74c
 80058f4:	20006384 	.word	0x20006384
 80058f8:	0801a7a8 	.word	0x0801a7a8

080058fc <snipCommand>:
{	
 80058fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80058fe:	46de      	mov	lr, fp
 8005900:	4657      	mov	r7, sl
 8005902:	464e      	mov	r6, r9
 8005904:	4645      	mov	r5, r8
 8005906:	b5e0      	push	{r5, r6, r7, lr}
 8005908:	b08b      	sub	sp, #44	; 0x2c
 800590a:	0004      	movs	r4, r0
	char status[2][7] = {"Paused", "Active"};
 800590c:	aa06      	add	r2, sp, #24
 800590e:	4b80      	ldr	r3, [pc, #512]	; (8005b10 <snipCommand+0x214>)
 8005910:	cb23      	ldmia	r3!, {r0, r1, r5}
 8005912:	c223      	stmia	r2!, {r0, r1, r5}
 8005914:	881b      	ldrh	r3, [r3, #0]
 8005916:	8013      	strh	r3, [r2, #0]
	configASSERT( pcWriteBuffer );
 8005918:	2c00      	cmp	r4, #0
 800591a:	d013      	beq.n	8005944 <snipCommand+0x48>
	writePxMutex(PcPort, (char*) pcMessageSnipWelcome, strlen((char*) pcMessageSnipWelcome), cmd50ms, HAL_MAX_DELAY);
 800591c:	4b7d      	ldr	r3, [pc, #500]	; (8005b14 <snipCommand+0x218>)
 800591e:	7818      	ldrb	r0, [r3, #0]
 8005920:	2301      	movs	r3, #1
 8005922:	425b      	negs	r3, r3
 8005924:	9300      	str	r3, [sp, #0]
 8005926:	3333      	adds	r3, #51	; 0x33
 8005928:	2237      	movs	r2, #55	; 0x37
 800592a:	497b      	ldr	r1, [pc, #492]	; (8005b18 <snipCommand+0x21c>)
 800592c:	f008 f9d8 	bl	800dce0 <writePxMutex>
	for(uint8_t s=0 ; s<numOfRecordedSnippets ; s++)
 8005930:	4b7a      	ldr	r3, [pc, #488]	; (8005b1c <snipCommand+0x220>)
 8005932:	781b      	ldrb	r3, [r3, #0]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d100      	bne.n	800593a <snipCommand+0x3e>
 8005938:	e0dd      	b.n	8005af6 <snipCommand+0x1fa>
 800593a:	2700      	movs	r7, #0
		if (snippets[s].cond.conditionType)
 800593c:	4b78      	ldr	r3, [pc, #480]	; (8005b20 <snipCommand+0x224>)
 800593e:	4698      	mov	r8, r3
			sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageCmds, pcWriteBuffer, commands );
 8005940:	4d78      	ldr	r5, [pc, #480]	; (8005b24 <snipCommand+0x228>)
 8005942:	e0c3      	b.n	8005acc <snipCommand+0x1d0>
	configASSERT( pcWriteBuffer );
 8005944:	b672      	cpsid	i
 8005946:	e7fe      	b.n	8005946 <snipCommand+0x4a>
			sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageSnipStart, count, status[snippets[s].state]);
 8005948:	4b75      	ldr	r3, [pc, #468]	; (8005b20 <snipCommand+0x224>)
 800594a:	469b      	mov	fp, r3
 800594c:	00b3      	lsls	r3, r6, #2
 800594e:	4699      	mov	r9, r3
 8005950:	199b      	adds	r3, r3, r6
 8005952:	009b      	lsls	r3, r3, #2
 8005954:	445b      	add	r3, fp
 8005956:	7c1a      	ldrb	r2, [r3, #16]
 8005958:	00d3      	lsls	r3, r2, #3
 800595a:	1a9b      	subs	r3, r3, r2
 800595c:	aa06      	add	r2, sp, #24
 800595e:	4694      	mov	ip, r2
 8005960:	4463      	add	r3, ip
 8005962:	003a      	movs	r2, r7
 8005964:	4970      	ldr	r1, [pc, #448]	; (8005b28 <snipCommand+0x22c>)
 8005966:	0020      	movs	r0, r4
 8005968:	f010 fef8 	bl	801675c <siprintf>
		switch (snippets[s].cond.conditionType)
 800596c:	464b      	mov	r3, r9
 800596e:	199b      	adds	r3, r3, r6
 8005970:	009b      	lsls	r3, r3, #2
 8005972:	465a      	mov	r2, fp
 8005974:	5c9b      	ldrb	r3, [r3, r2]
 8005976:	2b01      	cmp	r3, #1
 8005978:	d11c      	bne.n	80059b4 <snipCommand+0xb8>
				switch (snippets[s].cond.buffer1[1])
 800597a:	00b3      	lsls	r3, r6, #2
 800597c:	199b      	adds	r3, r3, r6
 800597e:	009b      	lsls	r3, r3, #2
 8005980:	4a67      	ldr	r2, [pc, #412]	; (8005b20 <snipCommand+0x224>)
 8005982:	18d3      	adds	r3, r2, r3
 8005984:	78db      	ldrb	r3, [r3, #3]
 8005986:	2b0b      	cmp	r3, #11
 8005988:	d842      	bhi.n	8005a10 <snipCommand+0x114>
 800598a:	2b08      	cmp	r3, #8
 800598c:	d861      	bhi.n	8005a52 <snipCommand+0x156>
 800598e:	2b05      	cmp	r3, #5
 8005990:	d051      	beq.n	8005a36 <snipCommand+0x13a>
 8005992:	2b06      	cmp	r3, #6
 8005994:	d000      	beq.n	8005998 <snipCommand+0x9c>
 8005996:	e0a5      	b.n	8005ae4 <snipCommand+0x1e8>
						sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageSnipButtonEventDblClicked, ( char * ) pcWriteBuffer, snippets[s].cond.buffer1[0], snippets[s].cmd);				
 8005998:	00b3      	lsls	r3, r6, #2
 800599a:	199e      	adds	r6, r3, r6
 800599c:	00b6      	lsls	r6, r6, #2
 800599e:	4b60      	ldr	r3, [pc, #384]	; (8005b20 <snipCommand+0x224>)
 80059a0:	199e      	adds	r6, r3, r6
 80059a2:	78b3      	ldrb	r3, [r6, #2]
 80059a4:	68f2      	ldr	r2, [r6, #12]
 80059a6:	9200      	str	r2, [sp, #0]
 80059a8:	0022      	movs	r2, r4
 80059aa:	4960      	ldr	r1, [pc, #384]	; (8005b2c <snipCommand+0x230>)
 80059ac:	0020      	movs	r0, r4
 80059ae:	f010 fed5 	bl	801675c <siprintf>
        		break;
 80059b2:	e097      	b.n	8005ae4 <snipCommand+0x1e8>
		switch (snippets[s].cond.conditionType)
 80059b4:	2b03      	cmp	r3, #3
 80059b6:	d000      	beq.n	80059ba <snipCommand+0xbe>
 80059b8:	e094      	b.n	8005ae4 <snipCommand+0x1e8>
				memcpy( (uint8_t *)&flt1, &snippets[s].cond.buffer2, sizeof(float));	// This buffer can be misaligned and cause hardfault on F0
 80059ba:	00b1      	lsls	r1, r6, #2
 80059bc:	1989      	adds	r1, r1, r6
 80059be:	0089      	lsls	r1, r1, #2
 80059c0:	3106      	adds	r1, #6
 80059c2:	4b57      	ldr	r3, [pc, #348]	; (8005b20 <snipCommand+0x224>)
 80059c4:	4699      	mov	r9, r3
 80059c6:	4449      	add	r1, r9
 80059c8:	2204      	movs	r2, #4
 80059ca:	a805      	add	r0, sp, #20
 80059cc:	f010 fdb2 	bl	8016534 <memcpy>
				sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageSnipModuleParamConst, ( char * ) pcWriteBuffer, modParam[snippets[s].cond.buffer1[1]-1].paramName, mathStr[snippets[s].cond.mathOperator-1], flt1);				      		
 80059d0:	00b3      	lsls	r3, r6, #2
 80059d2:	199e      	adds	r6, r3, r6
 80059d4:	00b6      	lsls	r6, r6, #2
 80059d6:	444e      	add	r6, r9
 80059d8:	78f2      	ldrb	r2, [r6, #3]
 80059da:	3a01      	subs	r2, #1
 80059dc:	0053      	lsls	r3, r2, #1
 80059de:	189b      	adds	r3, r3, r2
 80059e0:	009b      	lsls	r3, r3, #2
 80059e2:	4a53      	ldr	r2, [pc, #332]	; (8005b30 <snipCommand+0x234>)
 80059e4:	18d3      	adds	r3, r2, r3
 80059e6:	689b      	ldr	r3, [r3, #8]
 80059e8:	4699      	mov	r9, r3
 80059ea:	9805      	ldr	r0, [sp, #20]
 80059ec:	f7fc ffd2 	bl	8002994 <__aeabi_f2d>
 80059f0:	9002      	str	r0, [sp, #8]
 80059f2:	9103      	str	r1, [sp, #12]
 80059f4:	7873      	ldrb	r3, [r6, #1]
 80059f6:	3b01      	subs	r3, #1
 80059f8:	005a      	lsls	r2, r3, #1
 80059fa:	18d2      	adds	r2, r2, r3
 80059fc:	4b4d      	ldr	r3, [pc, #308]	; (8005b34 <snipCommand+0x238>)
 80059fe:	189b      	adds	r3, r3, r2
 8005a00:	9300      	str	r3, [sp, #0]
 8005a02:	464b      	mov	r3, r9
 8005a04:	0022      	movs	r2, r4
 8005a06:	494c      	ldr	r1, [pc, #304]	; (8005b38 <snipCommand+0x23c>)
 8005a08:	0020      	movs	r0, r4
 8005a0a:	f010 fea7 	bl	801675c <siprintf>
				break;
 8005a0e:	e069      	b.n	8005ae4 <snipCommand+0x1e8>
 8005a10:	3b0c      	subs	r3, #12
 8005a12:	2b02      	cmp	r3, #2
 8005a14:	d866      	bhi.n	8005ae4 <snipCommand+0x1e8>
						sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageSnipButtonEventReleased, ( char * ) pcWriteBuffer, snippets[s].cond.buffer1[0], snippets[s].cond.buffer1[2], snippets[s].cmd);				
 8005a16:	00b2      	lsls	r2, r6, #2
 8005a18:	1996      	adds	r6, r2, r6
 8005a1a:	00b6      	lsls	r6, r6, #2
 8005a1c:	4a40      	ldr	r2, [pc, #256]	; (8005b20 <snipCommand+0x224>)
 8005a1e:	1992      	adds	r2, r2, r6
 8005a20:	7893      	ldrb	r3, [r2, #2]
 8005a22:	68d1      	ldr	r1, [r2, #12]
 8005a24:	9101      	str	r1, [sp, #4]
 8005a26:	7912      	ldrb	r2, [r2, #4]
 8005a28:	9200      	str	r2, [sp, #0]
 8005a2a:	0022      	movs	r2, r4
 8005a2c:	4943      	ldr	r1, [pc, #268]	; (8005b3c <snipCommand+0x240>)
 8005a2e:	0020      	movs	r0, r4
 8005a30:	f010 fe94 	bl	801675c <siprintf>
        		break;						
 8005a34:	e056      	b.n	8005ae4 <snipCommand+0x1e8>
						sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageSnipButtonEventClicked, ( char * ) pcWriteBuffer, snippets[s].cond.buffer1[0], snippets[s].cmd);				
 8005a36:	00b3      	lsls	r3, r6, #2
 8005a38:	199e      	adds	r6, r3, r6
 8005a3a:	00b6      	lsls	r6, r6, #2
 8005a3c:	4b38      	ldr	r3, [pc, #224]	; (8005b20 <snipCommand+0x224>)
 8005a3e:	199e      	adds	r6, r3, r6
 8005a40:	78b3      	ldrb	r3, [r6, #2]
 8005a42:	68f2      	ldr	r2, [r6, #12]
 8005a44:	9200      	str	r2, [sp, #0]
 8005a46:	0022      	movs	r2, r4
 8005a48:	493d      	ldr	r1, [pc, #244]	; (8005b40 <snipCommand+0x244>)
 8005a4a:	0020      	movs	r0, r4
 8005a4c:	f010 fe86 	bl	801675c <siprintf>
        		break;
 8005a50:	e048      	b.n	8005ae4 <snipCommand+0x1e8>
						sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageSnipButtonEventPressed, ( char * ) pcWriteBuffer, snippets[s].cond.buffer1[0], snippets[s].cond.buffer1[2], snippets[s].cmd);				
 8005a52:	00b2      	lsls	r2, r6, #2
 8005a54:	1996      	adds	r6, r2, r6
 8005a56:	00b6      	lsls	r6, r6, #2
 8005a58:	4a31      	ldr	r2, [pc, #196]	; (8005b20 <snipCommand+0x224>)
 8005a5a:	1992      	adds	r2, r2, r6
 8005a5c:	7893      	ldrb	r3, [r2, #2]
 8005a5e:	68d1      	ldr	r1, [r2, #12]
 8005a60:	9101      	str	r1, [sp, #4]
 8005a62:	7912      	ldrb	r2, [r2, #4]
 8005a64:	9200      	str	r2, [sp, #0]
 8005a66:	0022      	movs	r2, r4
 8005a68:	4936      	ldr	r1, [pc, #216]	; (8005b44 <snipCommand+0x248>)
 8005a6a:	0020      	movs	r0, r4
 8005a6c:	f010 fe76 	bl	801675c <siprintf>
        		break;
 8005a70:	e038      	b.n	8005ae4 <snipCommand+0x1e8>
			sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageCmds, pcWriteBuffer, commands );
 8005a72:	002b      	movs	r3, r5
 8005a74:	0022      	movs	r2, r4
 8005a76:	4934      	ldr	r1, [pc, #208]	; (8005b48 <snipCommand+0x24c>)
 8005a78:	0020      	movs	r0, r4
 8005a7a:	f010 fe6f 	bl	801675c <siprintf>
			memset( &commands, 0x00, strlen((char*) commands) );
 8005a7e:	0028      	movs	r0, r5
 8005a80:	f7fa fb4a 	bl	8000118 <strlen>
 8005a84:	0002      	movs	r2, r0
 8005a86:	2100      	movs	r1, #0
 8005a88:	0028      	movs	r0, r5
 8005a8a:	f010 fd5c 	bl	8016546 <memset>
		while (ParseSnippetCommand(snippets[s].cmd, (int8_t *) &commands) != false)
 8005a8e:	4649      	mov	r1, r9
 8005a90:	68f0      	ldr	r0, [r6, #12]
 8005a92:	f7ff fb37 	bl	8005104 <ParseSnippetCommand>
 8005a96:	2800      	cmp	r0, #0
 8005a98:	d1eb      	bne.n	8005a72 <snipCommand+0x176>
		strcat( ( char * ) pcWriteBuffer, ( char * ) pcMessageEnd);
 8005a9a:	0020      	movs	r0, r4
 8005a9c:	f7fa fb3c 	bl	8000118 <strlen>
 8005aa0:	1820      	adds	r0, r4, r0
 8005aa2:	220c      	movs	r2, #12
 8005aa4:	4929      	ldr	r1, [pc, #164]	; (8005b4c <snipCommand+0x250>)
 8005aa6:	f010 fd45 	bl	8016534 <memcpy>
		writePxMutex(PcPort, (char*) pcWriteBuffer, strlen((char*) pcWriteBuffer), cmd50ms, HAL_MAX_DELAY);
 8005aaa:	0020      	movs	r0, r4
 8005aac:	f7fa fb34 	bl	8000118 <strlen>
 8005ab0:	b282      	uxth	r2, r0
 8005ab2:	4b18      	ldr	r3, [pc, #96]	; (8005b14 <snipCommand+0x218>)
 8005ab4:	7818      	ldrb	r0, [r3, #0]
 8005ab6:	2301      	movs	r3, #1
 8005ab8:	425b      	negs	r3, r3
 8005aba:	9300      	str	r3, [sp, #0]
 8005abc:	3333      	adds	r3, #51	; 0x33
 8005abe:	0021      	movs	r1, r4
 8005ac0:	f008 f90e 	bl	800dce0 <writePxMutex>
	for(uint8_t s=0 ; s<numOfRecordedSnippets ; s++)
 8005ac4:	4b15      	ldr	r3, [pc, #84]	; (8005b1c <snipCommand+0x220>)
 8005ac6:	781b      	ldrb	r3, [r3, #0]
 8005ac8:	42bb      	cmp	r3, r7
 8005aca:	d914      	bls.n	8005af6 <snipCommand+0x1fa>
 8005acc:	003e      	movs	r6, r7
 8005ace:	3701      	adds	r7, #1
 8005ad0:	b2ff      	uxtb	r7, r7
		if (snippets[s].cond.conditionType)
 8005ad2:	46b2      	mov	sl, r6
 8005ad4:	00b3      	lsls	r3, r6, #2
 8005ad6:	199b      	adds	r3, r3, r6
 8005ad8:	009b      	lsls	r3, r3, #2
 8005ada:	4642      	mov	r2, r8
 8005adc:	5c9b      	ldrb	r3, [r3, r2]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d000      	beq.n	8005ae4 <snipCommand+0x1e8>
 8005ae2:	e731      	b.n	8005948 <snipCommand+0x4c>
		while (ParseSnippetCommand(snippets[s].cmd, (int8_t *) &commands) != false)
 8005ae4:	4b0f      	ldr	r3, [pc, #60]	; (8005b24 <snipCommand+0x228>)
 8005ae6:	4699      	mov	r9, r3
 8005ae8:	4653      	mov	r3, sl
 8005aea:	009b      	lsls	r3, r3, #2
 8005aec:	4453      	add	r3, sl
 8005aee:	009b      	lsls	r3, r3, #2
 8005af0:	4e0b      	ldr	r6, [pc, #44]	; (8005b20 <snipCommand+0x224>)
 8005af2:	18f6      	adds	r6, r6, r3
 8005af4:	e7cb      	b.n	8005a8e <snipCommand+0x192>
	strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageSnipAction );
 8005af6:	22a7      	movs	r2, #167	; 0xa7
 8005af8:	4915      	ldr	r1, [pc, #84]	; (8005b50 <snipCommand+0x254>)
 8005afa:	0020      	movs	r0, r4
 8005afc:	f010 fd1a 	bl	8016534 <memcpy>
}
 8005b00:	2000      	movs	r0, #0
 8005b02:	b00b      	add	sp, #44	; 0x2c
 8005b04:	bcf0      	pop	{r4, r5, r6, r7}
 8005b06:	46bb      	mov	fp, r7
 8005b08:	46b2      	mov	sl, r6
 8005b0a:	46a9      	mov	r9, r5
 8005b0c:	46a0      	mov	r8, r4
 8005b0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005b10:	08019a40 	.word	0x08019a40
 8005b14:	2000055f 	.word	0x2000055f
 8005b18:	0801a7e0 	.word	0x0801a7e0
 8005b1c:	20000ca3 	.word	0x20000ca3
 8005b20:	20006384 	.word	0x20006384
 8005b24:	20000cd4 	.word	0x20000cd4
 8005b28:	0801a818 	.word	0x0801a818
 8005b2c:	0801a838 	.word	0x0801a838
 8005b30:	20000088 	.word	0x20000088
 8005b34:	0801c020 	.word	0x0801c020
 8005b38:	0801a884 	.word	0x0801a884
 8005b3c:	0801a868 	.word	0x0801a868
 8005b40:	0801a824 	.word	0x0801a824
 8005b44:	0801a850 	.word	0x0801a850
 8005b48:	0801a894 	.word	0x0801a894
 8005b4c:	0801a89c 	.word	0x0801a89c
 8005b50:	0801a8a8 	.word	0x0801a8a8

08005b54 <idcodeCommand>:
{	
 8005b54:	b510      	push	{r4, lr}
 8005b56:	1e04      	subs	r4, r0, #0
	configASSERT( pcWriteBuffer );
 8005b58:	d00c      	beq.n	8005b74 <idcodeCommand+0x20>
	dev = HAL_GetDEVID();
 8005b5a:	f00a fa83 	bl	8010064 <HAL_GetDEVID>
	switch (dev)
 8005b5e:	0403      	lsls	r3, r0, #16
 8005b60:	0c1b      	lsrs	r3, r3, #16
 8005b62:	4a1c      	ldr	r2, [pc, #112]	; (8005bd4 <idcodeCommand+0x80>)
 8005b64:	4694      	mov	ip, r2
 8005b66:	4463      	add	r3, ip
 8005b68:	2b08      	cmp	r3, #8
 8005b6a:	d82c      	bhi.n	8005bc6 <idcodeCommand+0x72>
 8005b6c:	009b      	lsls	r3, r3, #2
 8005b6e:	4a1a      	ldr	r2, [pc, #104]	; (8005bd8 <idcodeCommand+0x84>)
 8005b70:	58d3      	ldr	r3, [r2, r3]
 8005b72:	469f      	mov	pc, r3
	configASSERT( pcWriteBuffer );
 8005b74:	b672      	cpsid	i
 8005b76:	e7fe      	b.n	8005b76 <idcodeCommand+0x22>
			sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageDEVID, "STM32F03x" );
 8005b78:	4a18      	ldr	r2, [pc, #96]	; (8005bdc <idcodeCommand+0x88>)
 8005b7a:	4919      	ldr	r1, [pc, #100]	; (8005be0 <idcodeCommand+0x8c>)
 8005b7c:	0020      	movs	r0, r4
 8005b7e:	f010 fded 	bl	801675c <siprintf>
	sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageREVID, ( char * ) pcWriteBuffer, HAL_GetREVID()>>12 );
 8005b82:	f00a fa69 	bl	8010058 <HAL_GetREVID>
 8005b86:	0b03      	lsrs	r3, r0, #12
 8005b88:	0022      	movs	r2, r4
 8005b8a:	4916      	ldr	r1, [pc, #88]	; (8005be4 <idcodeCommand+0x90>)
 8005b8c:	0020      	movs	r0, r4
 8005b8e:	f010 fde5 	bl	801675c <siprintf>
}
 8005b92:	2000      	movs	r0, #0
 8005b94:	bd10      	pop	{r4, pc}
			sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageDEVID, "STM32F04x" );
 8005b96:	4a14      	ldr	r2, [pc, #80]	; (8005be8 <idcodeCommand+0x94>)
 8005b98:	4911      	ldr	r1, [pc, #68]	; (8005be0 <idcodeCommand+0x8c>)
 8005b9a:	0020      	movs	r0, r4
 8005b9c:	f010 fdde 	bl	801675c <siprintf>
  		break;
 8005ba0:	e7ef      	b.n	8005b82 <idcodeCommand+0x2e>
			sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageDEVID, "STM32F05x" );
 8005ba2:	4a12      	ldr	r2, [pc, #72]	; (8005bec <idcodeCommand+0x98>)
 8005ba4:	490e      	ldr	r1, [pc, #56]	; (8005be0 <idcodeCommand+0x8c>)
 8005ba6:	0020      	movs	r0, r4
 8005ba8:	f010 fdd8 	bl	801675c <siprintf>
  		break;
 8005bac:	e7e9      	b.n	8005b82 <idcodeCommand+0x2e>
			sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageDEVID, "STM32F07x" );
 8005bae:	4a10      	ldr	r2, [pc, #64]	; (8005bf0 <idcodeCommand+0x9c>)
 8005bb0:	490b      	ldr	r1, [pc, #44]	; (8005be0 <idcodeCommand+0x8c>)
 8005bb2:	0020      	movs	r0, r4
 8005bb4:	f010 fdd2 	bl	801675c <siprintf>
  		break;
 8005bb8:	e7e3      	b.n	8005b82 <idcodeCommand+0x2e>
			sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageDEVID, "STM32F09x" );
 8005bba:	4a0e      	ldr	r2, [pc, #56]	; (8005bf4 <idcodeCommand+0xa0>)
 8005bbc:	4908      	ldr	r1, [pc, #32]	; (8005be0 <idcodeCommand+0x8c>)
 8005bbe:	0020      	movs	r0, r4
 8005bc0:	f010 fdcc 	bl	801675c <siprintf>
  		break;
 8005bc4:	e7dd      	b.n	8005b82 <idcodeCommand+0x2e>
			sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageDEVID, "UNKNOWN" );
 8005bc6:	4a0c      	ldr	r2, [pc, #48]	; (8005bf8 <idcodeCommand+0xa4>)
 8005bc8:	4905      	ldr	r1, [pc, #20]	; (8005be0 <idcodeCommand+0x8c>)
 8005bca:	0020      	movs	r0, r4
 8005bcc:	f010 fdc6 	bl	801675c <siprintf>
  		break;
 8005bd0:	e7d7      	b.n	8005b82 <idcodeCommand+0x2e>
 8005bd2:	46c0      	nop			; (mov r8, r8)
 8005bd4:	fffffbc0 	.word	0xfffffbc0
 8005bd8:	0801a9c0 	.word	0x0801a9c0
 8005bdc:	0801a950 	.word	0x0801a950
 8005be0:	0801a95c 	.word	0x0801a95c
 8005be4:	0801a9a8 	.word	0x0801a9a8
 8005be8:	0801a970 	.word	0x0801a970
 8005bec:	0801a97c 	.word	0x0801a97c
 8005bf0:	0801a988 	.word	0x0801a988
 8005bf4:	0801a994 	.word	0x0801a994
 8005bf8:	0801a9a0 	.word	0x0801a9a0

08005bfc <uuidCommand>:
{
 8005bfc:	b570      	push	{r4, r5, r6, lr}
 8005bfe:	1e04      	subs	r4, r0, #0
	configASSERT( pcWriteBuffer );
 8005c00:	d023      	beq.n	8005c4a <uuidCommand+0x4e>
	sprintf( ( char * ) pcWriteBuffer, "%s", ( char * ) pcMessageUUID );
 8005c02:	220e      	movs	r2, #14
 8005c04:	4912      	ldr	r1, [pc, #72]	; (8005c50 <uuidCommand+0x54>)
 8005c06:	f010 fc95 	bl	8016534 <memcpy>
		sprintf( ( char * ) pcWriteBuffer, "%s%08X", ( char * ) pcWriteBuffer, *(uint32_t *) (MCU_F0_UUID_BASE+i*4) );
 8005c0a:	4b12      	ldr	r3, [pc, #72]	; (8005c54 <uuidCommand+0x58>)
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	4d12      	ldr	r5, [pc, #72]	; (8005c58 <uuidCommand+0x5c>)
 8005c10:	0022      	movs	r2, r4
 8005c12:	0029      	movs	r1, r5
 8005c14:	0020      	movs	r0, r4
 8005c16:	f010 fda1 	bl	801675c <siprintf>
 8005c1a:	4b10      	ldr	r3, [pc, #64]	; (8005c5c <uuidCommand+0x60>)
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	0022      	movs	r2, r4
 8005c20:	0029      	movs	r1, r5
 8005c22:	0020      	movs	r0, r4
 8005c24:	f010 fd9a 	bl	801675c <siprintf>
 8005c28:	4b0d      	ldr	r3, [pc, #52]	; (8005c60 <uuidCommand+0x64>)
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	0022      	movs	r2, r4
 8005c2e:	0029      	movs	r1, r5
 8005c30:	0020      	movs	r0, r4
 8005c32:	f010 fd93 	bl	801675c <siprintf>
	strcat(( char * ) pcWriteBuffer, "\r\n");
 8005c36:	0020      	movs	r0, r4
 8005c38:	f7fa fa6e 	bl	8000118 <strlen>
 8005c3c:	1820      	adds	r0, r4, r0
 8005c3e:	2203      	movs	r2, #3
 8005c40:	4908      	ldr	r1, [pc, #32]	; (8005c64 <uuidCommand+0x68>)
 8005c42:	f010 fc77 	bl	8016534 <memcpy>
}
 8005c46:	2000      	movs	r0, #0
 8005c48:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( pcWriteBuffer );
 8005c4a:	b672      	cpsid	i
 8005c4c:	e7fe      	b.n	8005c4c <uuidCommand+0x50>
 8005c4e:	46c0      	nop			; (mov r8, r8)
 8005c50:	0801a9e4 	.word	0x0801a9e4
 8005c54:	1ffff7ac 	.word	0x1ffff7ac
 8005c58:	0801a9f4 	.word	0x0801a9f4
 8005c5c:	1ffff7b0 	.word	0x1ffff7b0
 8005c60:	1ffff7b4 	.word	0x1ffff7b4
 8005c64:	0801b670 	.word	0x0801b670

08005c68 <timeCommand>:
{
 8005c68:	b510      	push	{r4, lr}
 8005c6a:	b084      	sub	sp, #16
 8005c6c:	1e04      	subs	r4, r0, #0
	configASSERT( pcWriteBuffer );
 8005c6e:	d00a      	beq.n	8005c86 <timeCommand+0x1e>
	GetTimeDate();
 8005c70:	f007 fdd0 	bl	800d814 <GetTimeDate>
	if (BOS.hourformat == 24)
 8005c74:	4b1c      	ldr	r3, [pc, #112]	; (8005ce8 <timeCommand+0x80>)
 8005c76:	7b5b      	ldrb	r3, [r3, #13]
 8005c78:	2b18      	cmp	r3, #24
 8005c7a:	d006      	beq.n	8005c8a <timeCommand+0x22>
	else if (BOS.hourformat == 12)
 8005c7c:	2b0c      	cmp	r3, #12
 8005c7e:	d010      	beq.n	8005ca2 <timeCommand+0x3a>
}
 8005c80:	2000      	movs	r0, #0
 8005c82:	b004      	add	sp, #16
 8005c84:	bd10      	pop	{r4, pc}
	configASSERT( pcWriteBuffer );
 8005c86:	b672      	cpsid	i
 8005c88:	e7fe      	b.n	8005c88 <timeCommand+0x20>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessage24, BOS.time.hours, BOS.time.minutes, BOS.time.seconds, BOS.time.msec );
 8005c8a:	4917      	ldr	r1, [pc, #92]	; (8005ce8 <timeCommand+0x80>)
 8005c8c:	7c4b      	ldrb	r3, [r1, #17]
 8005c8e:	7c8a      	ldrb	r2, [r1, #18]
 8005c90:	89c8      	ldrh	r0, [r1, #14]
 8005c92:	9001      	str	r0, [sp, #4]
 8005c94:	7c09      	ldrb	r1, [r1, #16]
 8005c96:	9100      	str	r1, [sp, #0]
 8005c98:	4914      	ldr	r1, [pc, #80]	; (8005cec <timeCommand+0x84>)
 8005c9a:	0020      	movs	r0, r4
 8005c9c:	f010 fd5e 	bl	801675c <siprintf>
 8005ca0:	e7ee      	b.n	8005c80 <timeCommand+0x18>
		if (BOS.time.ampm == RTC_AM)
 8005ca2:	4b11      	ldr	r3, [pc, #68]	; (8005ce8 <timeCommand+0x80>)
 8005ca4:	7cdb      	ldrb	r3, [r3, #19]
 8005ca6:	2b01      	cmp	r3, #1
 8005ca8:	d00f      	beq.n	8005cca <timeCommand+0x62>
		else if (BOS.time.ampm == RTC_PM)
 8005caa:	2b02      	cmp	r3, #2
 8005cac:	d1e8      	bne.n	8005c80 <timeCommand+0x18>
			sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessage12, BOS.time.hours, BOS.time.minutes, BOS.time.seconds, BOS.time.msec, "PM" );
 8005cae:	490e      	ldr	r1, [pc, #56]	; (8005ce8 <timeCommand+0x80>)
 8005cb0:	7c4b      	ldrb	r3, [r1, #17]
 8005cb2:	7c8a      	ldrb	r2, [r1, #18]
 8005cb4:	480e      	ldr	r0, [pc, #56]	; (8005cf0 <timeCommand+0x88>)
 8005cb6:	9002      	str	r0, [sp, #8]
 8005cb8:	89c8      	ldrh	r0, [r1, #14]
 8005cba:	9001      	str	r0, [sp, #4]
 8005cbc:	7c09      	ldrb	r1, [r1, #16]
 8005cbe:	9100      	str	r1, [sp, #0]
 8005cc0:	490c      	ldr	r1, [pc, #48]	; (8005cf4 <timeCommand+0x8c>)
 8005cc2:	0020      	movs	r0, r4
 8005cc4:	f010 fd4a 	bl	801675c <siprintf>
 8005cc8:	e7da      	b.n	8005c80 <timeCommand+0x18>
			sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessage12, BOS.time.hours, BOS.time.minutes, BOS.time.seconds, BOS.time.msec, "AM" );
 8005cca:	4907      	ldr	r1, [pc, #28]	; (8005ce8 <timeCommand+0x80>)
 8005ccc:	7c4b      	ldrb	r3, [r1, #17]
 8005cce:	7c8a      	ldrb	r2, [r1, #18]
 8005cd0:	4809      	ldr	r0, [pc, #36]	; (8005cf8 <timeCommand+0x90>)
 8005cd2:	9002      	str	r0, [sp, #8]
 8005cd4:	89c8      	ldrh	r0, [r1, #14]
 8005cd6:	9001      	str	r0, [sp, #4]
 8005cd8:	7c09      	ldrb	r1, [r1, #16]
 8005cda:	9100      	str	r1, [sp, #0]
 8005cdc:	4905      	ldr	r1, [pc, #20]	; (8005cf4 <timeCommand+0x8c>)
 8005cde:	0020      	movs	r0, r4
 8005ce0:	f010 fd3c 	bl	801675c <siprintf>
 8005ce4:	e7cc      	b.n	8005c80 <timeCommand+0x18>
 8005ce6:	46c0      	nop			; (mov r8, r8)
 8005ce8:	20006368 	.word	0x20006368
 8005cec:	0801a9fc 	.word	0x0801a9fc
 8005cf0:	0801aa54 	.word	0x0801aa54
 8005cf4:	0801aa24 	.word	0x0801aa24
 8005cf8:	0801aa50 	.word	0x0801aa50

08005cfc <dateCommand>:
{
 8005cfc:	b510      	push	{r4, lr}
 8005cfe:	1e04      	subs	r4, r0, #0
	configASSERT( pcWriteBuffer );
 8005d00:	d00a      	beq.n	8005d18 <dateCommand+0x1c>
	GetTimeDate();
 8005d02:	f007 fd87 	bl	800d814 <GetTimeDate>
	sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageDate, GetDateString() );
 8005d06:	f7fe fbc5 	bl	8004494 <GetDateString>
 8005d0a:	0002      	movs	r2, r0
 8005d0c:	4903      	ldr	r1, [pc, #12]	; (8005d1c <dateCommand+0x20>)
 8005d0e:	0020      	movs	r0, r4
 8005d10:	f010 fd24 	bl	801675c <siprintf>
}
 8005d14:	2000      	movs	r0, #0
 8005d16:	bd10      	pop	{r4, pc}
	configASSERT( pcWriteBuffer );
 8005d18:	b672      	cpsid	i
 8005d1a:	e7fe      	b.n	8005d1a <dateCommand+0x1e>
 8005d1c:	0801aa58 	.word	0x0801aa58

08005d20 <getCommand>:
{
 8005d20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005d22:	46c6      	mov	lr, r8
 8005d24:	b500      	push	{lr}
 8005d26:	b082      	sub	sp, #8
 8005d28:	0004      	movs	r4, r0
 8005d2a:	0015      	movs	r5, r2
	portBASE_TYPE xParameterStringLength1 = 0, xParameterStringLength2 = 0;
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	9301      	str	r3, [sp, #4]
 8005d30:	9300      	str	r3, [sp, #0]
	configASSERT( pcWriteBuffer );
 8005d32:	2800      	cmp	r0, #0
 8005d34:	d026      	beq.n	8005d84 <getCommand+0x64>
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 8005d36:	aa01      	add	r2, sp, #4
 8005d38:	2101      	movs	r1, #1
 8005d3a:	0028      	movs	r0, r5
 8005d3c:	f008 fa26 	bl	800e18c <FreeRTOS_CLIGetParameter>
 8005d40:	0006      	movs	r6, r0
 8005d42:	4b74      	ldr	r3, [pc, #464]	; (8005f14 <getCommand+0x1f4>)
 8005d44:	6018      	str	r0, [r3, #0]
	if (!strncmp((const char *)pcParameterString1, "bos.", 4)) 
 8005d46:	2204      	movs	r2, #4
 8005d48:	4973      	ldr	r1, [pc, #460]	; (8005f18 <getCommand+0x1f8>)
 8005d4a:	f010 fd4a 	bl	80167e2 <strncmp>
 8005d4e:	2800      	cmp	r0, #0
 8005d50:	d000      	beq.n	8005d54 <getCommand+0x34>
 8005d52:	e092      	b.n	8005e7a <getCommand+0x15a>
		if (!strncmp((const char *)pcParameterString1+4, "response", xParameterStringLength1-4)) 
 8005d54:	1d37      	adds	r7, r6, #4
 8005d56:	9b01      	ldr	r3, [sp, #4]
 8005d58:	1f1d      	subs	r5, r3, #4
 8005d5a:	002a      	movs	r2, r5
 8005d5c:	496f      	ldr	r1, [pc, #444]	; (8005f1c <getCommand+0x1fc>)
 8005d5e:	0038      	movs	r0, r7
 8005d60:	f010 fd3f 	bl	80167e2 <strncmp>
 8005d64:	2800      	cmp	r0, #0
 8005d66:	d121      	bne.n	8005dac <getCommand+0x8c>
			if (BOS.response == BOS_RESPONSE_ALL)
 8005d68:	4b6d      	ldr	r3, [pc, #436]	; (8005f20 <getCommand+0x200>)
 8005d6a:	799b      	ldrb	r3, [r3, #6]
 8005d6c:	2b60      	cmp	r3, #96	; 0x60
 8005d6e:	d00b      	beq.n	8005d88 <getCommand+0x68>
			else if (BOS.response == BOS_RESPONSE_MSG)
 8005d70:	2b20      	cmp	r3, #32
 8005d72:	d00f      	beq.n	8005d94 <getCommand+0x74>
			else if (BOS.response == BOS_RESPONSE_NONE)
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d013      	beq.n	8005da0 <getCommand+0x80>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrongValue, pcParameterString1);
 8005d78:	0032      	movs	r2, r6
 8005d7a:	496a      	ldr	r1, [pc, #424]	; (8005f24 <getCommand+0x204>)
 8005d7c:	0020      	movs	r0, r4
 8005d7e:	f010 fced 	bl	801675c <siprintf>
 8005d82:	e086      	b.n	8005e92 <getCommand+0x172>
	configASSERT( pcWriteBuffer );
 8005d84:	b672      	cpsid	i
 8005d86:	e7fe      	b.n	8005d86 <getCommand+0x66>
				sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK, "all");
 8005d88:	4a67      	ldr	r2, [pc, #412]	; (8005f28 <getCommand+0x208>)
 8005d8a:	4968      	ldr	r1, [pc, #416]	; (8005f2c <getCommand+0x20c>)
 8005d8c:	0020      	movs	r0, r4
 8005d8e:	f010 fce5 	bl	801675c <siprintf>
	if (result == BOS_ERR_WrongParam)
 8005d92:	e07e      	b.n	8005e92 <getCommand+0x172>
				sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK, "msg");
 8005d94:	4a66      	ldr	r2, [pc, #408]	; (8005f30 <getCommand+0x210>)
 8005d96:	4965      	ldr	r1, [pc, #404]	; (8005f2c <getCommand+0x20c>)
 8005d98:	0020      	movs	r0, r4
 8005d9a:	f010 fcdf 	bl	801675c <siprintf>
	if (result == BOS_ERR_WrongParam)
 8005d9e:	e078      	b.n	8005e92 <getCommand+0x172>
				sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK, "none");
 8005da0:	4a64      	ldr	r2, [pc, #400]	; (8005f34 <getCommand+0x214>)
 8005da2:	4962      	ldr	r1, [pc, #392]	; (8005f2c <getCommand+0x20c>)
 8005da4:	0020      	movs	r0, r4
 8005da6:	f010 fcd9 	bl	801675c <siprintf>
	if (result == BOS_ERR_WrongParam)
 8005daa:	e072      	b.n	8005e92 <getCommand+0x172>
		else if (!strncmp((const char *)pcParameterString1+4, "trace", xParameterStringLength1-4)) 
 8005dac:	002a      	movs	r2, r5
 8005dae:	4962      	ldr	r1, [pc, #392]	; (8005f38 <getCommand+0x218>)
 8005db0:	0038      	movs	r0, r7
 8005db2:	f010 fd16 	bl	80167e2 <strncmp>
 8005db6:	2800      	cmp	r0, #0
 8005db8:	d119      	bne.n	8005dee <getCommand+0xce>
			if (BOS.trace == TRACE_BOTH)
 8005dba:	4b59      	ldr	r3, [pc, #356]	; (8005f20 <getCommand+0x200>)
 8005dbc:	79db      	ldrb	r3, [r3, #7]
 8005dbe:	2b03      	cmp	r3, #3
 8005dc0:	d009      	beq.n	8005dd6 <getCommand+0xb6>
			else if (BOS.trace == TRACE_MESSAGE)
 8005dc2:	2b01      	cmp	r3, #1
 8005dc4:	d00d      	beq.n	8005de2 <getCommand+0xc2>
			else if (BOS.trace == TRACE_NONE)
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d1d6      	bne.n	8005d78 <getCommand+0x58>
				sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK, "none");
 8005dca:	4a5a      	ldr	r2, [pc, #360]	; (8005f34 <getCommand+0x214>)
 8005dcc:	4957      	ldr	r1, [pc, #348]	; (8005f2c <getCommand+0x20c>)
 8005dce:	0020      	movs	r0, r4
 8005dd0:	f010 fcc4 	bl	801675c <siprintf>
	if (result == BOS_ERR_WrongParam)
 8005dd4:	e05d      	b.n	8005e92 <getCommand+0x172>
				sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK, "all");
 8005dd6:	4a54      	ldr	r2, [pc, #336]	; (8005f28 <getCommand+0x208>)
 8005dd8:	4954      	ldr	r1, [pc, #336]	; (8005f2c <getCommand+0x20c>)
 8005dda:	0020      	movs	r0, r4
 8005ddc:	f010 fcbe 	bl	801675c <siprintf>
	if (result == BOS_ERR_WrongParam)
 8005de0:	e057      	b.n	8005e92 <getCommand+0x172>
				sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK, "msg");
 8005de2:	4a53      	ldr	r2, [pc, #332]	; (8005f30 <getCommand+0x210>)
 8005de4:	4951      	ldr	r1, [pc, #324]	; (8005f2c <getCommand+0x20c>)
 8005de6:	0020      	movs	r0, r4
 8005de8:	f010 fcb8 	bl	801675c <siprintf>
	if (result == BOS_ERR_WrongParam)
 8005dec:	e051      	b.n	8005e92 <getCommand+0x172>
		else if (!strncmp((const char *)pcParameterString1+4, "clibaudrate", xParameterStringLength1-4)) 
 8005dee:	002a      	movs	r2, r5
 8005df0:	4952      	ldr	r1, [pc, #328]	; (8005f3c <getCommand+0x21c>)
 8005df2:	0038      	movs	r0, r7
 8005df4:	f010 fcf5 	bl	80167e2 <strncmp>
 8005df8:	2800      	cmp	r0, #0
 8005dfa:	d022      	beq.n	8005e42 <getCommand+0x122>
		else if (!strncmp((const char *)pcParameterString1+4, "debounce", xParameterStringLength1-4)) 
 8005dfc:	002a      	movs	r2, r5
 8005dfe:	4950      	ldr	r1, [pc, #320]	; (8005f40 <getCommand+0x220>)
 8005e00:	0038      	movs	r0, r7
 8005e02:	f010 fcee 	bl	80167e2 <strncmp>
 8005e06:	2800      	cmp	r0, #0
 8005e08:	d022      	beq.n	8005e50 <getCommand+0x130>
		else if (!strncmp((const char *)pcParameterString1+4, "singleclicktime", xParameterStringLength1-4)) 
 8005e0a:	002a      	movs	r2, r5
 8005e0c:	494d      	ldr	r1, [pc, #308]	; (8005f44 <getCommand+0x224>)
 8005e0e:	0038      	movs	r0, r7
 8005e10:	f010 fce7 	bl	80167e2 <strncmp>
 8005e14:	2800      	cmp	r0, #0
 8005e16:	d022      	beq.n	8005e5e <getCommand+0x13e>
		else if (!strncmp((const char *)pcParameterString1+4, "mininterclicktime", xParameterStringLength1-4)) 
 8005e18:	002a      	movs	r2, r5
 8005e1a:	494b      	ldr	r1, [pc, #300]	; (8005f48 <getCommand+0x228>)
 8005e1c:	0038      	movs	r0, r7
 8005e1e:	f010 fce0 	bl	80167e2 <strncmp>
 8005e22:	2800      	cmp	r0, #0
 8005e24:	d022      	beq.n	8005e6c <getCommand+0x14c>
		else if (!strncmp((const char *)pcParameterString1+4, "maxinterclicktime", xParameterStringLength1-4)) 
 8005e26:	002a      	movs	r2, r5
 8005e28:	4948      	ldr	r1, [pc, #288]	; (8005f4c <getCommand+0x22c>)
 8005e2a:	0038      	movs	r0, r7
 8005e2c:	f010 fcd9 	bl	80167e2 <strncmp>
 8005e30:	2800      	cmp	r0, #0
 8005e32:	d129      	bne.n	8005e88 <getCommand+0x168>
			sprintf( ( char * ) pcWriteBuffer, "%d\n\r", BOS.buttons.maxInterClickTime);
 8005e34:	4b3a      	ldr	r3, [pc, #232]	; (8005f20 <getCommand+0x200>)
 8005e36:	795a      	ldrb	r2, [r3, #5]
 8005e38:	4945      	ldr	r1, [pc, #276]	; (8005f50 <getCommand+0x230>)
 8005e3a:	0020      	movs	r0, r4
 8005e3c:	f010 fc8e 	bl	801675c <siprintf>
	if (result == BOS_ERR_WrongParam)
 8005e40:	e027      	b.n	8005e92 <getCommand+0x172>
			sprintf( ( char * ) pcWriteBuffer, "%d\n\r", BOS.clibaudrate);
 8005e42:	4b37      	ldr	r3, [pc, #220]	; (8005f20 <getCommand+0x200>)
 8005e44:	689a      	ldr	r2, [r3, #8]
 8005e46:	4942      	ldr	r1, [pc, #264]	; (8005f50 <getCommand+0x230>)
 8005e48:	0020      	movs	r0, r4
 8005e4a:	f010 fc87 	bl	801675c <siprintf>
	if (result == BOS_ERR_WrongParam)
 8005e4e:	e020      	b.n	8005e92 <getCommand+0x172>
			sprintf( ( char * ) pcWriteBuffer, "%d\n\r", BOS.buttons.debounce);
 8005e50:	4b33      	ldr	r3, [pc, #204]	; (8005f20 <getCommand+0x200>)
 8005e52:	881a      	ldrh	r2, [r3, #0]
 8005e54:	493e      	ldr	r1, [pc, #248]	; (8005f50 <getCommand+0x230>)
 8005e56:	0020      	movs	r0, r4
 8005e58:	f010 fc80 	bl	801675c <siprintf>
	if (result == BOS_ERR_WrongParam)
 8005e5c:	e019      	b.n	8005e92 <getCommand+0x172>
			sprintf( ( char * ) pcWriteBuffer, "%d\n\r", BOS.buttons.singleClickTime);
 8005e5e:	4b30      	ldr	r3, [pc, #192]	; (8005f20 <getCommand+0x200>)
 8005e60:	885a      	ldrh	r2, [r3, #2]
 8005e62:	493b      	ldr	r1, [pc, #236]	; (8005f50 <getCommand+0x230>)
 8005e64:	0020      	movs	r0, r4
 8005e66:	f010 fc79 	bl	801675c <siprintf>
	if (result == BOS_ERR_WrongParam)
 8005e6a:	e012      	b.n	8005e92 <getCommand+0x172>
			sprintf( ( char * ) pcWriteBuffer, "%d\n\r", BOS.buttons.minInterClickTime);
 8005e6c:	4b2c      	ldr	r3, [pc, #176]	; (8005f20 <getCommand+0x200>)
 8005e6e:	791a      	ldrb	r2, [r3, #4]
 8005e70:	4937      	ldr	r1, [pc, #220]	; (8005f50 <getCommand+0x230>)
 8005e72:	0020      	movs	r0, r4
 8005e74:	f010 fc72 	bl	801675c <siprintf>
	if (result == BOS_ERR_WrongParam)
 8005e78:	e00b      	b.n	8005e92 <getCommand+0x172>
	else if (!strncmp((const char *)pcParameterString1, "group", 5))
 8005e7a:	2205      	movs	r2, #5
 8005e7c:	4935      	ldr	r1, [pc, #212]	; (8005f54 <getCommand+0x234>)
 8005e7e:	0030      	movs	r0, r6
 8005e80:	f010 fcaf 	bl	80167e2 <strncmp>
 8005e84:	2800      	cmp	r0, #0
 8005e86:	d009      	beq.n	8005e9c <getCommand+0x17c>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrongParam );
 8005e88:	2213      	movs	r2, #19
 8005e8a:	4933      	ldr	r1, [pc, #204]	; (8005f58 <getCommand+0x238>)
 8005e8c:	0020      	movs	r0, r4
 8005e8e:	f010 fb51 	bl	8016534 <memcpy>
}
 8005e92:	2000      	movs	r0, #0
 8005e94:	b002      	add	sp, #8
 8005e96:	bc80      	pop	{r7}
 8005e98:	46b8      	mov	r8, r7
 8005e9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		pcParameterString2 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 2, &xParameterStringLength2);
 8005e9c:	466a      	mov	r2, sp
 8005e9e:	2102      	movs	r1, #2
 8005ea0:	0028      	movs	r0, r5
 8005ea2:	f008 f973 	bl	800e18c <FreeRTOS_CLIGetParameter>
 8005ea6:	0006      	movs	r6, r0
		for(i=0 ; i<MaxNumOfGroups ; i++)
 8005ea8:	4f2c      	ldr	r7, [pc, #176]	; (8005f5c <getCommand+0x23c>)
 8005eaa:	2500      	movs	r5, #0
			if (!strcmp( ( char * ) pcParameterString2, groupAlias[i]))	
 8005eac:	0039      	movs	r1, r7
 8005eae:	0030      	movs	r0, r6
 8005eb0:	f7fa f928 	bl	8000104 <strcmp>
 8005eb4:	2800      	cmp	r0, #0
 8005eb6:	d01c      	beq.n	8005ef2 <getCommand+0x1d2>
		for(i=0 ; i<MaxNumOfGroups ; i++)
 8005eb8:	3501      	adds	r5, #1
 8005eba:	b2ed      	uxtb	r5, r5
 8005ebc:	370a      	adds	r7, #10
 8005ebe:	2d0a      	cmp	r5, #10
 8005ec0:	d1f4      	bne.n	8005eac <getCommand+0x18c>
			sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageGroupDoesNotExist, ( char * ) pcParameterString2 );
 8005ec2:	0032      	movs	r2, r6
 8005ec4:	4926      	ldr	r1, [pc, #152]	; (8005f60 <getCommand+0x240>)
 8005ec6:	0020      	movs	r0, r4
 8005ec8:	f010 fc48 	bl	801675c <siprintf>
			return pdFALSE;
 8005ecc:	e7e1      	b.n	8005e92 <getCommand+0x172>
			for(j=1 ; j<=N ; j++)						// N modules
 8005ece:	3501      	adds	r5, #1
 8005ed0:	b2ed      	uxtb	r5, r5
 8005ed2:	783b      	ldrb	r3, [r7, #0]
 8005ed4:	42ab      	cmp	r3, r5
 8005ed6:	d3dc      	bcc.n	8005e92 <getCommand+0x172>
				if (InGroup(j, i))
 8005ed8:	1e6b      	subs	r3, r5, #1
 8005eda:	005b      	lsls	r3, r3, #1
 8005edc:	4642      	mov	r2, r8
 8005ede:	5a9b      	ldrh	r3, [r3, r2]
 8005ee0:	421e      	tst	r6, r3
 8005ee2:	d0f4      	beq.n	8005ece <getCommand+0x1ae>
					sprintf( ( char * ) pcWriteBuffer, "%s#%d\n\r", ( char * ) pcWriteBuffer, j );
 8005ee4:	002b      	movs	r3, r5
 8005ee6:	0022      	movs	r2, r4
 8005ee8:	491e      	ldr	r1, [pc, #120]	; (8005f64 <getCommand+0x244>)
 8005eea:	0020      	movs	r0, r4
 8005eec:	f010 fc36 	bl	801675c <siprintf>
 8005ef0:	e7ed      	b.n	8005ece <getCommand+0x1ae>
			sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageGroupExists, ( char * ) pcParameterString2 );
 8005ef2:	0032      	movs	r2, r6
 8005ef4:	491c      	ldr	r1, [pc, #112]	; (8005f68 <getCommand+0x248>)
 8005ef6:	0020      	movs	r0, r4
 8005ef8:	f010 fc30 	bl	801675c <siprintf>
			for(j=1 ; j<=N ; j++)						// N modules
 8005efc:	4b1b      	ldr	r3, [pc, #108]	; (8005f6c <getCommand+0x24c>)
 8005efe:	781b      	ldrb	r3, [r3, #0]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d0c6      	beq.n	8005e92 <getCommand+0x172>
 8005f04:	2601      	movs	r6, #1
 8005f06:	40ae      	lsls	r6, r5
 8005f08:	2501      	movs	r5, #1
				if (InGroup(j, i))
 8005f0a:	4b19      	ldr	r3, [pc, #100]	; (8005f70 <getCommand+0x250>)
 8005f0c:	4698      	mov	r8, r3
			for(j=1 ; j<=N ; j++)						// N modules
 8005f0e:	4f17      	ldr	r7, [pc, #92]	; (8005f6c <getCommand+0x24c>)
 8005f10:	e7e2      	b.n	8005ed8 <getCommand+0x1b8>
 8005f12:	46c0      	nop			; (mov r8, r8)
 8005f14:	20000d18 	.word	0x20000d18
 8005f18:	0801aa70 	.word	0x0801aa70
 8005f1c:	0801aa78 	.word	0x0801aa78
 8005f20:	20006368 	.word	0x20006368
 8005f24:	0801ab0c 	.word	0x0801ab0c
 8005f28:	08019dc0 	.word	0x08019dc0
 8005f2c:	08019c88 	.word	0x08019c88
 8005f30:	0801aa84 	.word	0x0801aa84
 8005f34:	0801aa88 	.word	0x0801aa88
 8005f38:	0801aa90 	.word	0x0801aa90
 8005f3c:	0801aa98 	.word	0x0801aa98
 8005f40:	0801aaa4 	.word	0x0801aaa4
 8005f44:	0801aab0 	.word	0x0801aab0
 8005f48:	0801aac0 	.word	0x0801aac0
 8005f4c:	0801aad4 	.word	0x0801aad4
 8005f50:	0801a24c 	.word	0x0801a24c
 8005f54:	0801aae8 	.word	0x0801aae8
 8005f58:	0801aaf8 	.word	0x0801aaf8
 8005f5c:	200008f4 	.word	0x200008f4
 8005f60:	0801ab2c 	.word	0x0801ab2c
 8005f64:	0801aaf0 	.word	0x0801aaf0
 8005f68:	0801ab48 	.word	0x0801ab48
 8005f6c:	2000001c 	.word	0x2000001c
 8005f70:	20000958 	.word	0x20000958

08005f74 <defaultCommand>:
{
 8005f74:	b570      	push	{r4, r5, r6, lr}
 8005f76:	b082      	sub	sp, #8
 8005f78:	0004      	movs	r4, r0
 8005f7a:	0010      	movs	r0, r2
	portBASE_TYPE xParameterStringLength1 = 0;
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	9301      	str	r3, [sp, #4]
	configASSERT( pcWriteBuffer );
 8005f80:	2c00      	cmp	r4, #0
 8005f82:	d01a      	beq.n	8005fba <defaultCommand+0x46>
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 8005f84:	aa01      	add	r2, sp, #4
 8005f86:	2101      	movs	r1, #1
 8005f88:	f008 f900 	bl	800e18c <FreeRTOS_CLIGetParameter>
 8005f8c:	0005      	movs	r5, r0
	if (!strncmp((const char *)pcParameterString1, "params", xParameterStringLength1)) 
 8005f8e:	9e01      	ldr	r6, [sp, #4]
 8005f90:	0032      	movs	r2, r6
 8005f92:	491f      	ldr	r1, [pc, #124]	; (8006010 <defaultCommand+0x9c>)
 8005f94:	f010 fc25 	bl	80167e2 <strncmp>
 8005f98:	2800      	cmp	r0, #0
 8005f9a:	d010      	beq.n	8005fbe <defaultCommand+0x4a>
	else if (!strncmp((const char *)pcParameterString1, "array", xParameterStringLength1)) 
 8005f9c:	0032      	movs	r2, r6
 8005f9e:	491d      	ldr	r1, [pc, #116]	; (8006014 <defaultCommand+0xa0>)
 8005fa0:	0028      	movs	r0, r5
 8005fa2:	f010 fc1e 	bl	80167e2 <strncmp>
 8005fa6:	2800      	cmp	r0, #0
 8005fa8:	d01a      	beq.n	8005fe0 <defaultCommand+0x6c>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrongValue );
 8005faa:	220f      	movs	r2, #15
 8005fac:	491a      	ldr	r1, [pc, #104]	; (8006018 <defaultCommand+0xa4>)
 8005fae:	0020      	movs	r0, r4
 8005fb0:	f010 fac0 	bl	8016534 <memcpy>
}
 8005fb4:	2000      	movs	r0, #0
 8005fb6:	b002      	add	sp, #8
 8005fb8:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( pcWriteBuffer );
 8005fba:	b672      	cpsid	i
 8005fbc:	e7fe      	b.n	8005fbc <defaultCommand+0x48>
		memcpy(&BOS, &BOS_default, sizeof(BOS_default));
 8005fbe:	4917      	ldr	r1, [pc, #92]	; (800601c <defaultCommand+0xa8>)
 8005fc0:	4b17      	ldr	r3, [pc, #92]	; (8006020 <defaultCommand+0xac>)
 8005fc2:	000a      	movs	r2, r1
 8005fc4:	cb23      	ldmia	r3!, {r0, r1, r5}
 8005fc6:	c223      	stmia	r2!, {r0, r1, r5}
 8005fc8:	cb23      	ldmia	r3!, {r0, r1, r5}
 8005fca:	c223      	stmia	r2!, {r0, r1, r5}
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	6013      	str	r3, [r2, #0]
		SaveEEparams();
 8005fd0:	f7fd f9a2 	bl	8003318 <SaveEEparams>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageOKParams );
 8005fd4:	2227      	movs	r2, #39	; 0x27
 8005fd6:	4913      	ldr	r1, [pc, #76]	; (8006024 <defaultCommand+0xb0>)
 8005fd8:	0020      	movs	r0, r4
 8005fda:	f010 faab 	bl	8016534 <memcpy>
	if (result == BOS_ERR_WrongValue)
 8005fde:	e7e9      	b.n	8005fb4 <defaultCommand+0x40>
		SendMessageToModule(BOS_BROADCAST, CODE_DEF_ARRAY, 0);
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	2116      	movs	r1, #22
 8005fe4:	20ff      	movs	r0, #255	; 0xff
 8005fe6:	f002 ff7b 	bl	8008ee0 <SendMessageToModule>
		indMode = IND_TOPOLOGY; osDelay(100);
 8005fea:	4b0f      	ldr	r3, [pc, #60]	; (8006028 <defaultCommand+0xb4>)
 8005fec:	2202      	movs	r2, #2
 8005fee:	701a      	strb	r2, [r3, #0]
 8005ff0:	2064      	movs	r0, #100	; 0x64
 8005ff2:	f007 ffa4 	bl	800df3e <osDelay>
		ClearEEportsDir();
 8005ff6:	f7fc fed7 	bl	8002da8 <ClearEEportsDir>
		ClearROtopology();
 8005ffa:	f005 fab7 	bl	800b56c <ClearROtopology>
		osDelay(100);
 8005ffe:	2064      	movs	r0, #100	; 0x64
 8006000:	f007 ff9d 	bl	800df3e <osDelay>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageOKArray );
 8006004:	2240      	movs	r2, #64	; 0x40
 8006006:	4909      	ldr	r1, [pc, #36]	; (800602c <defaultCommand+0xb8>)
 8006008:	0020      	movs	r0, r4
 800600a:	f010 fa93 	bl	8016534 <memcpy>
	if (result == BOS_ERR_WrongValue)
 800600e:	e7d1      	b.n	8005fb4 <defaultCommand+0x40>
 8006010:	0801ab5c 	.word	0x0801ab5c
 8006014:	0801ab8c 	.word	0x0801ab8c
 8006018:	0801ab94 	.word	0x0801ab94
 800601c:	20006368 	.word	0x20006368
 8006020:	20000000 	.word	0x20000000
 8006024:	0801ab64 	.word	0x0801ab64
 8006028:	2000098a 	.word	0x2000098a
 800602c:	0801aba4 	.word	0x0801aba4

08006030 <setCommand>:
{
 8006030:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006032:	46d6      	mov	lr, sl
 8006034:	464f      	mov	r7, r9
 8006036:	4646      	mov	r6, r8
 8006038:	b5c0      	push	{r6, r7, lr}
 800603a:	b08e      	sub	sp, #56	; 0x38
 800603c:	4682      	mov	sl, r0
 800603e:	0014      	movs	r4, r2
 8006040:	2700      	movs	r7, #0
 8006042:	2600      	movs	r6, #0
	portBASE_TYPE xParameterStringLength1 = 0, xParameterStringLength2 = 0, xParameterStringLength3 = 0;
 8006044:	970d      	str	r7, [sp, #52]	; 0x34
 8006046:	970c      	str	r7, [sp, #48]	; 0x30
 8006048:	970b      	str	r7, [sp, #44]	; 0x2c
	portBASE_TYPE xParameterStringLength4 = 0, xParameterStringLength5 = 0;
 800604a:	970a      	str	r7, [sp, #40]	; 0x28
 800604c:	9709      	str	r7, [sp, #36]	; 0x24
	configASSERT( pcWriteBuffer );
 800604e:	2800      	cmp	r0, #0
 8006050:	d023      	beq.n	800609a <setCommand+0x6a>
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 8006052:	aa0d      	add	r2, sp, #52	; 0x34
 8006054:	2101      	movs	r1, #1
 8006056:	0020      	movs	r0, r4
 8006058:	f008 f898 	bl	800e18c <FreeRTOS_CLIGetParameter>
 800605c:	0005      	movs	r5, r0
 800605e:	4bd6      	ldr	r3, [pc, #856]	; (80063b8 <setCommand+0x388>)
 8006060:	6018      	str	r0, [r3, #0]
	if (!strncmp((const char *)pcParameterString1, "bos.", 4)) 
 8006062:	2204      	movs	r2, #4
 8006064:	49d5      	ldr	r1, [pc, #852]	; (80063bc <setCommand+0x38c>)
 8006066:	f010 fbbc 	bl	80167e2 <strncmp>
 800606a:	2800      	cmp	r0, #0
 800606c:	d017      	beq.n	800609e <setCommand+0x6e>
	else if (!strncmp((const char *)pcParameterString1, "time", 4))
 800606e:	2204      	movs	r2, #4
 8006070:	49d3      	ldr	r1, [pc, #844]	; (80063c0 <setCommand+0x390>)
 8006072:	0028      	movs	r0, r5
 8006074:	f010 fbb5 	bl	80167e2 <strncmp>
 8006078:	2800      	cmp	r0, #0
 800607a:	d100      	bne.n	800607e <setCommand+0x4e>
 800607c:	e15b      	b.n	8006336 <setCommand+0x306>
	else if (!strncmp((const char *)pcParameterString1, "date", 4))
 800607e:	2204      	movs	r2, #4
 8006080:	49d0      	ldr	r1, [pc, #832]	; (80063c4 <setCommand+0x394>)
 8006082:	0028      	movs	r0, r5
 8006084:	f010 fbad 	bl	80167e2 <strncmp>
 8006088:	2800      	cmp	r0, #0
 800608a:	d100      	bne.n	800608e <setCommand+0x5e>
 800608c:	e1f8      	b.n	8006480 <setCommand+0x450>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrongParam );
 800608e:	2213      	movs	r2, #19
 8006090:	49cd      	ldr	r1, [pc, #820]	; (80063c8 <setCommand+0x398>)
 8006092:	4650      	mov	r0, sl
 8006094:	f010 fa4e 	bl	8016534 <memcpy>
 8006098:	e33c      	b.n	8006714 <setCommand+0x6e4>
	configASSERT( pcWriteBuffer );
 800609a:	b672      	cpsid	i
 800609c:	e7fe      	b.n	800609c <setCommand+0x6c>
		pcParameterString2 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 2, &xParameterStringLength2);
 800609e:	aa0c      	add	r2, sp, #48	; 0x30
 80060a0:	2102      	movs	r1, #2
 80060a2:	0020      	movs	r0, r4
 80060a4:	f008 f872 	bl	800e18c <FreeRTOS_CLIGetParameter>
 80060a8:	0004      	movs	r4, r0
 80060aa:	4bc8      	ldr	r3, [pc, #800]	; (80063cc <setCommand+0x39c>)
 80060ac:	6018      	str	r0, [r3, #0]
		if (!strncmp((const char *)pcParameterString1+4, "response", xParameterStringLength1-4)) 
 80060ae:	4bc2      	ldr	r3, [pc, #776]	; (80063b8 <setCommand+0x388>)
 80060b0:	681d      	ldr	r5, [r3, #0]
 80060b2:	3504      	adds	r5, #4
 80060b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80060b6:	1f1e      	subs	r6, r3, #4
 80060b8:	0032      	movs	r2, r6
 80060ba:	49c5      	ldr	r1, [pc, #788]	; (80063d0 <setCommand+0x3a0>)
 80060bc:	0028      	movs	r0, r5
 80060be:	f010 fb90 	bl	80167e2 <strncmp>
 80060c2:	2800      	cmp	r0, #0
 80060c4:	d150      	bne.n	8006168 <setCommand+0x138>
			if (!strncmp((const char *)pcParameterString2, "all", xParameterStringLength2)) {
 80060c6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80060c8:	002a      	movs	r2, r5
 80060ca:	49c2      	ldr	r1, [pc, #776]	; (80063d4 <setCommand+0x3a4>)
 80060cc:	0020      	movs	r0, r4
 80060ce:	f010 fb88 	bl	80167e2 <strncmp>
 80060d2:	2800      	cmp	r0, #0
 80060d4:	d01a      	beq.n	800610c <setCommand+0xdc>
			} else if (!strncmp((const char *)pcParameterString2, "message", xParameterStringLength2)) {
 80060d6:	002a      	movs	r2, r5
 80060d8:	49bf      	ldr	r1, [pc, #764]	; (80063d8 <setCommand+0x3a8>)
 80060da:	0020      	movs	r0, r4
 80060dc:	f010 fb81 	bl	80167e2 <strncmp>
 80060e0:	2800      	cmp	r0, #0
 80060e2:	d01f      	beq.n	8006124 <setCommand+0xf4>
		  } else if (!strncmp((const char *)pcParameterString2, "cli", xParameterStringLength2)) {
 80060e4:	002a      	movs	r2, r5
 80060e6:	49bd      	ldr	r1, [pc, #756]	; (80063dc <setCommand+0x3ac>)
 80060e8:	0020      	movs	r0, r4
 80060ea:	f010 fb7a 	bl	80167e2 <strncmp>
 80060ee:	2800      	cmp	r0, #0
 80060f0:	d024      	beq.n	800613c <setCommand+0x10c>
		  } else if (!strncmp((const char *)pcParameterString2, "none", xParameterStringLength2)) {
 80060f2:	002a      	movs	r2, r5
 80060f4:	49ba      	ldr	r1, [pc, #744]	; (80063e0 <setCommand+0x3b0>)
 80060f6:	0020      	movs	r0, r4
 80060f8:	f010 fb73 	bl	80167e2 <strncmp>
 80060fc:	2800      	cmp	r0, #0
 80060fe:	d029      	beq.n	8006154 <setCommand+0x124>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrongValue );
 8006100:	220f      	movs	r2, #15
 8006102:	49b8      	ldr	r1, [pc, #736]	; (80063e4 <setCommand+0x3b4>)
 8006104:	4650      	mov	r0, sl
 8006106:	f010 fa15 	bl	8016534 <memcpy>
 800610a:	e303      	b.n	8006714 <setCommand+0x6e4>
				BOS.response = BOS_RESPONSE_ALL;
 800610c:	4bb6      	ldr	r3, [pc, #728]	; (80063e8 <setCommand+0x3b8>)
 800610e:	2260      	movs	r2, #96	; 0x60
 8006110:	719a      	strb	r2, [r3, #6]
				EE_WriteVariable(_EE_PARAMS_BASE, ((uint16_t)BOS.trace<<8) | (uint16_t)BOS.response);
 8006112:	79d9      	ldrb	r1, [r3, #7]
 8006114:	0209      	lsls	r1, r1, #8
 8006116:	2360      	movs	r3, #96	; 0x60
 8006118:	4319      	orrs	r1, r3
 800611a:	308a      	adds	r0, #138	; 0x8a
 800611c:	0040      	lsls	r0, r0, #1
 800611e:	f001 f9db 	bl	80074d8 <EE_WriteVariable>
	if (result == BOS_OK) 
 8006122:	e1a1      	b.n	8006468 <setCommand+0x438>
				BOS.response = BOS_RESPONSE_MSG;
 8006124:	4bb0      	ldr	r3, [pc, #704]	; (80063e8 <setCommand+0x3b8>)
 8006126:	2220      	movs	r2, #32
 8006128:	719a      	strb	r2, [r3, #6]
				EE_WriteVariable(_EE_PARAMS_BASE, ((uint16_t)BOS.trace<<8) | (uint16_t)BOS.response);
 800612a:	79d9      	ldrb	r1, [r3, #7]
 800612c:	0209      	lsls	r1, r1, #8
 800612e:	2320      	movs	r3, #32
 8006130:	4319      	orrs	r1, r3
 8006132:	308a      	adds	r0, #138	; 0x8a
 8006134:	0040      	lsls	r0, r0, #1
 8006136:	f001 f9cf 	bl	80074d8 <EE_WriteVariable>
	if (result == BOS_OK) 
 800613a:	e195      	b.n	8006468 <setCommand+0x438>
				BOS.response = BOS_RESPONSE_CLI;
 800613c:	4baa      	ldr	r3, [pc, #680]	; (80063e8 <setCommand+0x3b8>)
 800613e:	2240      	movs	r2, #64	; 0x40
 8006140:	719a      	strb	r2, [r3, #6]
				EE_WriteVariable(_EE_PARAMS_BASE, ((uint16_t)BOS.trace<<8) | (uint16_t)BOS.response);
 8006142:	79d9      	ldrb	r1, [r3, #7]
 8006144:	0209      	lsls	r1, r1, #8
 8006146:	2340      	movs	r3, #64	; 0x40
 8006148:	4319      	orrs	r1, r3
 800614a:	308a      	adds	r0, #138	; 0x8a
 800614c:	0040      	lsls	r0, r0, #1
 800614e:	f001 f9c3 	bl	80074d8 <EE_WriteVariable>
	if (result == BOS_OK) 
 8006152:	e189      	b.n	8006468 <setCommand+0x438>
				BOS.response = BOS_RESPONSE_NONE;
 8006154:	4ba4      	ldr	r3, [pc, #656]	; (80063e8 <setCommand+0x3b8>)
 8006156:	2200      	movs	r2, #0
 8006158:	719a      	strb	r2, [r3, #6]
				EE_WriteVariable(_EE_PARAMS_BASE, ((uint16_t)BOS.trace<<8) | (uint16_t)BOS.response);
 800615a:	79d9      	ldrb	r1, [r3, #7]
 800615c:	0209      	lsls	r1, r1, #8
 800615e:	308a      	adds	r0, #138	; 0x8a
 8006160:	0040      	lsls	r0, r0, #1
 8006162:	f001 f9b9 	bl	80074d8 <EE_WriteVariable>
	if (result == BOS_OK) 
 8006166:	e17f      	b.n	8006468 <setCommand+0x438>
		else if (!strncmp((const char *)pcParameterString1+4, "trace", xParameterStringLength1-4)) 
 8006168:	0032      	movs	r2, r6
 800616a:	49a0      	ldr	r1, [pc, #640]	; (80063ec <setCommand+0x3bc>)
 800616c:	0028      	movs	r0, r5
 800616e:	f010 fb38 	bl	80167e2 <strncmp>
 8006172:	2800      	cmp	r0, #0
 8006174:	d149      	bne.n	800620a <setCommand+0x1da>
			if (!strncmp((const char *)pcParameterString2, "all", xParameterStringLength2)) {
 8006176:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006178:	002a      	movs	r2, r5
 800617a:	4996      	ldr	r1, [pc, #600]	; (80063d4 <setCommand+0x3a4>)
 800617c:	0020      	movs	r0, r4
 800617e:	f010 fb30 	bl	80167e2 <strncmp>
 8006182:	2800      	cmp	r0, #0
 8006184:	d01d      	beq.n	80061c2 <setCommand+0x192>
			} else if (!strncmp((const char *)pcParameterString2, "message", xParameterStringLength2)) {
 8006186:	002a      	movs	r2, r5
 8006188:	4993      	ldr	r1, [pc, #588]	; (80063d8 <setCommand+0x3a8>)
 800618a:	0020      	movs	r0, r4
 800618c:	f010 fb29 	bl	80167e2 <strncmp>
 8006190:	2800      	cmp	r0, #0
 8006192:	d022      	beq.n	80061da <setCommand+0x1aa>
			} else if (!strncmp((const char *)pcParameterString2, "response", xParameterStringLength2)) {
 8006194:	002a      	movs	r2, r5
 8006196:	498e      	ldr	r1, [pc, #568]	; (80063d0 <setCommand+0x3a0>)
 8006198:	0020      	movs	r0, r4
 800619a:	f010 fb22 	bl	80167e2 <strncmp>
 800619e:	2800      	cmp	r0, #0
 80061a0:	d027      	beq.n	80061f2 <setCommand+0x1c2>
		  } else if (!strncmp((const char *)pcParameterString2, "none", xParameterStringLength2)) {
 80061a2:	002a      	movs	r2, r5
 80061a4:	498e      	ldr	r1, [pc, #568]	; (80063e0 <setCommand+0x3b0>)
 80061a6:	0020      	movs	r0, r4
 80061a8:	f010 fb1b 	bl	80167e2 <strncmp>
 80061ac:	2800      	cmp	r0, #0
 80061ae:	d1a7      	bne.n	8006100 <setCommand+0xd0>
				BOS.trace = TRACE_NONE;
 80061b0:	4b8d      	ldr	r3, [pc, #564]	; (80063e8 <setCommand+0x3b8>)
 80061b2:	2200      	movs	r2, #0
 80061b4:	71da      	strb	r2, [r3, #7]
				EE_WriteVariable(_EE_PARAMS_BASE, ((uint16_t)BOS.trace<<8) | (uint16_t)BOS.response);
 80061b6:	7999      	ldrb	r1, [r3, #6]
 80061b8:	308a      	adds	r0, #138	; 0x8a
 80061ba:	0040      	lsls	r0, r0, #1
 80061bc:	f001 f98c 	bl	80074d8 <EE_WriteVariable>
	if (result == BOS_OK) 
 80061c0:	e152      	b.n	8006468 <setCommand+0x438>
				BOS.trace = TRACE_BOTH;
 80061c2:	4b89      	ldr	r3, [pc, #548]	; (80063e8 <setCommand+0x3b8>)
 80061c4:	2203      	movs	r2, #3
 80061c6:	71da      	strb	r2, [r3, #7]
				EE_WriteVariable(_EE_PARAMS_BASE, ((uint16_t)BOS.trace<<8) | (uint16_t)BOS.response);
 80061c8:	799b      	ldrb	r3, [r3, #6]
 80061ca:	21c0      	movs	r1, #192	; 0xc0
 80061cc:	0089      	lsls	r1, r1, #2
 80061ce:	4319      	orrs	r1, r3
 80061d0:	308a      	adds	r0, #138	; 0x8a
 80061d2:	0040      	lsls	r0, r0, #1
 80061d4:	f001 f980 	bl	80074d8 <EE_WriteVariable>
	if (result == BOS_OK) 
 80061d8:	e146      	b.n	8006468 <setCommand+0x438>
				BOS.trace = TRACE_MESSAGE;
 80061da:	4b83      	ldr	r3, [pc, #524]	; (80063e8 <setCommand+0x3b8>)
 80061dc:	2201      	movs	r2, #1
 80061de:	71da      	strb	r2, [r3, #7]
				EE_WriteVariable(_EE_PARAMS_BASE, ((uint16_t)BOS.trace<<8) | (uint16_t)BOS.response);
 80061e0:	799b      	ldrb	r3, [r3, #6]
 80061e2:	2180      	movs	r1, #128	; 0x80
 80061e4:	0049      	lsls	r1, r1, #1
 80061e6:	4319      	orrs	r1, r3
 80061e8:	308a      	adds	r0, #138	; 0x8a
 80061ea:	0040      	lsls	r0, r0, #1
 80061ec:	f001 f974 	bl	80074d8 <EE_WriteVariable>
	if (result == BOS_OK) 
 80061f0:	e13a      	b.n	8006468 <setCommand+0x438>
				BOS.trace = TRACE_RESPONSE;
 80061f2:	4b7d      	ldr	r3, [pc, #500]	; (80063e8 <setCommand+0x3b8>)
 80061f4:	2202      	movs	r2, #2
 80061f6:	71da      	strb	r2, [r3, #7]
				EE_WriteVariable(_EE_PARAMS_BASE, ((uint16_t)BOS.trace<<8) | (uint16_t)BOS.response);
 80061f8:	799b      	ldrb	r3, [r3, #6]
 80061fa:	2180      	movs	r1, #128	; 0x80
 80061fc:	0089      	lsls	r1, r1, #2
 80061fe:	4319      	orrs	r1, r3
 8006200:	308a      	adds	r0, #138	; 0x8a
 8006202:	0040      	lsls	r0, r0, #1
 8006204:	f001 f968 	bl	80074d8 <EE_WriteVariable>
	if (result == BOS_OK) 
 8006208:	e12e      	b.n	8006468 <setCommand+0x438>
		else if (!strncmp((const char *)pcParameterString1+4, "clibaudrate", xParameterStringLength1-4)) 
 800620a:	0032      	movs	r2, r6
 800620c:	4978      	ldr	r1, [pc, #480]	; (80063f0 <setCommand+0x3c0>)
 800620e:	0028      	movs	r0, r5
 8006210:	f010 fae7 	bl	80167e2 <strncmp>
 8006214:	2800      	cmp	r0, #0
 8006216:	d02f      	beq.n	8006278 <setCommand+0x248>
		else if (!strncmp((const char *)pcParameterString1+4, "debounce", xParameterStringLength1-4)) 
 8006218:	0032      	movs	r2, r6
 800621a:	4976      	ldr	r1, [pc, #472]	; (80063f4 <setCommand+0x3c4>)
 800621c:	0028      	movs	r0, r5
 800621e:	f010 fae0 	bl	80167e2 <strncmp>
 8006222:	2800      	cmp	r0, #0
 8006224:	d058      	beq.n	80062d8 <setCommand+0x2a8>
		else if (!strncmp((const char *)pcParameterString1+4, "singleclicktime", xParameterStringLength1-4)) 
 8006226:	0032      	movs	r2, r6
 8006228:	4973      	ldr	r1, [pc, #460]	; (80063f8 <setCommand+0x3c8>)
 800622a:	0028      	movs	r0, r5
 800622c:	f010 fad9 	bl	80167e2 <strncmp>
 8006230:	2800      	cmp	r0, #0
 8006232:	d05f      	beq.n	80062f4 <setCommand+0x2c4>
		else if (!strncmp((const char *)pcParameterString1+4, "mininterclicktime", xParameterStringLength1-4)) 
 8006234:	0032      	movs	r2, r6
 8006236:	4971      	ldr	r1, [pc, #452]	; (80063fc <setCommand+0x3cc>)
 8006238:	0028      	movs	r0, r5
 800623a:	f010 fad2 	bl	80167e2 <strncmp>
 800623e:	2800      	cmp	r0, #0
 8006240:	d066      	beq.n	8006310 <setCommand+0x2e0>
		else if (!strncmp((const char *)pcParameterString1+4, "maxinterclicktime", xParameterStringLength1-4)) 
 8006242:	0032      	movs	r2, r6
 8006244:	496e      	ldr	r1, [pc, #440]	; (8006400 <setCommand+0x3d0>)
 8006246:	0028      	movs	r0, r5
 8006248:	f010 facb 	bl	80167e2 <strncmp>
 800624c:	2800      	cmp	r0, #0
 800624e:	d000      	beq.n	8006252 <setCommand+0x222>
 8006250:	e71d      	b.n	800608e <setCommand+0x5e>
			temp16 = atoi((const char *)pcParameterString2);
 8006252:	0020      	movs	r0, r4
 8006254:	f010 f91b 	bl	801648e <atoi>
			if (temp16 >= 1 && temp16 <= UCHAR_MAX) {
 8006258:	1e43      	subs	r3, r0, #1
 800625a:	b29b      	uxth	r3, r3
 800625c:	2bfe      	cmp	r3, #254	; 0xfe
 800625e:	d900      	bls.n	8006262 <setCommand+0x232>
 8006260:	e74e      	b.n	8006100 <setCommand+0xd0>
				BOS.buttons.maxInterClickTime = temp16;
 8006262:	4b61      	ldr	r3, [pc, #388]	; (80063e8 <setCommand+0x3b8>)
 8006264:	7158      	strb	r0, [r3, #5]
				EE_WriteVariable(_EE_PARAMS_DBL_CLICK, ((uint16_t)BOS.buttons.maxInterClickTime<<8) | (uint16_t)BOS.buttons.minInterClickTime);
 8006266:	0200      	lsls	r0, r0, #8
 8006268:	7919      	ldrb	r1, [r3, #4]
 800626a:	4301      	orrs	r1, r0
 800626c:	b289      	uxth	r1, r1
 800626e:	2018      	movs	r0, #24
 8006270:	30ff      	adds	r0, #255	; 0xff
 8006272:	f001 f931 	bl	80074d8 <EE_WriteVariable>
	if (result == BOS_OK) 
 8006276:	e0f7      	b.n	8006468 <setCommand+0x438>
			temp2 = atoi((const char *)pcParameterString2);
 8006278:	0020      	movs	r0, r4
 800627a:	f010 f908 	bl	801648e <atoi>
			if (temp2 <= DEF_CLI_BAUDRATE) {
 800627e:	23e1      	movs	r3, #225	; 0xe1
 8006280:	031b      	lsls	r3, r3, #12
 8006282:	4298      	cmp	r0, r3
 8006284:	d900      	bls.n	8006288 <setCommand+0x258>
 8006286:	e73b      	b.n	8006100 <setCommand+0xd0>
				BOS.clibaudrate = temp2;
 8006288:	4c57      	ldr	r4, [pc, #348]	; (80063e8 <setCommand+0x3b8>)
 800628a:	60a0      	str	r0, [r4, #8]
				EE_WriteVariable(_EE_CLI_BAUD, (uint16_t)BOS.clibaudrate);
 800628c:	b281      	uxth	r1, r0
 800628e:	208c      	movs	r0, #140	; 0x8c
 8006290:	0040      	lsls	r0, r0, #1
 8006292:	f001 f921 	bl	80074d8 <EE_WriteVariable>
				EE_WriteVariable(_EE_CLI_BAUD+1, (uint16_t)(BOS.clibaudrate>>16));
 8006296:	8961      	ldrh	r1, [r4, #10]
 8006298:	201a      	movs	r0, #26
 800629a:	30ff      	adds	r0, #255	; 0xff
 800629c:	f001 f91c 	bl	80074d8 <EE_WriteVariable>
		pcParameterString1[xParameterStringLength1] = 0;		// Get rid of the remaining parameters
 80062a0:	4b45      	ldr	r3, [pc, #276]	; (80063b8 <setCommand+0x388>)
 80062a2:	681a      	ldr	r2, [r3, #0]
 80062a4:	2300      	movs	r3, #0
 80062a6:	990d      	ldr	r1, [sp, #52]	; 0x34
 80062a8:	5453      	strb	r3, [r2, r1]
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK, pcParameterString1, pcParameterString2);
 80062aa:	4b48      	ldr	r3, [pc, #288]	; (80063cc <setCommand+0x39c>)
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	4955      	ldr	r1, [pc, #340]	; (8006404 <setCommand+0x3d4>)
 80062b0:	4650      	mov	r0, sl
 80062b2:	f010 fa53 	bl	801675c <siprintf>
			strcat(( char * ) pcWriteBuffer, ( char * ) pcMessageCLI1);
 80062b6:	4650      	mov	r0, sl
 80062b8:	f7f9 ff2e 	bl	8000118 <strlen>
 80062bc:	4450      	add	r0, sl
 80062be:	2230      	movs	r2, #48	; 0x30
 80062c0:	4951      	ldr	r1, [pc, #324]	; (8006408 <setCommand+0x3d8>)
 80062c2:	f010 f937 	bl	8016534 <memcpy>
			strcat(( char * ) pcWriteBuffer, ( char * ) pcMessageCLI2);
 80062c6:	4650      	mov	r0, sl
 80062c8:	f7f9 ff26 	bl	8000118 <strlen>
 80062cc:	4450      	add	r0, sl
 80062ce:	22a3      	movs	r2, #163	; 0xa3
 80062d0:	494e      	ldr	r1, [pc, #312]	; (800640c <setCommand+0x3dc>)
 80062d2:	f010 f92f 	bl	8016534 <memcpy>
 80062d6:	e21d      	b.n	8006714 <setCommand+0x6e4>
			temp16 = atoi((const char *)pcParameterString2);
 80062d8:	0020      	movs	r0, r4
 80062da:	f010 f8d8 	bl	801648e <atoi>
 80062de:	b281      	uxth	r1, r0
			if (temp16 >= 1 && temp16 <= USHRT_MAX) {
 80062e0:	2900      	cmp	r1, #0
 80062e2:	d100      	bne.n	80062e6 <setCommand+0x2b6>
 80062e4:	e70c      	b.n	8006100 <setCommand+0xd0>
				BOS.buttons.debounce = temp16;
 80062e6:	4b40      	ldr	r3, [pc, #256]	; (80063e8 <setCommand+0x3b8>)
 80062e8:	8019      	strh	r1, [r3, #0]
				EE_WriteVariable(_EE_PARAMS_DEBOUNCE, temp16);
 80062ea:	2016      	movs	r0, #22
 80062ec:	30ff      	adds	r0, #255	; 0xff
 80062ee:	f001 f8f3 	bl	80074d8 <EE_WriteVariable>
	if (result == BOS_OK) 
 80062f2:	e0b9      	b.n	8006468 <setCommand+0x438>
			temp16 = atoi((const char *)pcParameterString2);
 80062f4:	0020      	movs	r0, r4
 80062f6:	f010 f8ca 	bl	801648e <atoi>
 80062fa:	b281      	uxth	r1, r0
			if (temp16 >= 1 && temp16 <= USHRT_MAX) {
 80062fc:	2900      	cmp	r1, #0
 80062fe:	d100      	bne.n	8006302 <setCommand+0x2d2>
 8006300:	e6fe      	b.n	8006100 <setCommand+0xd0>
				BOS.buttons.singleClickTime = temp16;
 8006302:	4b39      	ldr	r3, [pc, #228]	; (80063e8 <setCommand+0x3b8>)
 8006304:	8059      	strh	r1, [r3, #2]
				EE_WriteVariable(_EE_PARAMS_SINGLE_CLICK, temp16);
 8006306:	208b      	movs	r0, #139	; 0x8b
 8006308:	0040      	lsls	r0, r0, #1
 800630a:	f001 f8e5 	bl	80074d8 <EE_WriteVariable>
	if (result == BOS_OK) 
 800630e:	e0ab      	b.n	8006468 <setCommand+0x438>
			temp16 = atoi((const char *)pcParameterString2);
 8006310:	0020      	movs	r0, r4
 8006312:	f010 f8bc 	bl	801648e <atoi>
			if (temp16 >= 1 && temp16 <= UCHAR_MAX) {
 8006316:	1e43      	subs	r3, r0, #1
 8006318:	b29b      	uxth	r3, r3
 800631a:	2bfe      	cmp	r3, #254	; 0xfe
 800631c:	d900      	bls.n	8006320 <setCommand+0x2f0>
 800631e:	e6ef      	b.n	8006100 <setCommand+0xd0>
				BOS.buttons.minInterClickTime = temp16;
 8006320:	b2c0      	uxtb	r0, r0
 8006322:	4b31      	ldr	r3, [pc, #196]	; (80063e8 <setCommand+0x3b8>)
 8006324:	7118      	strb	r0, [r3, #4]
				EE_WriteVariable(_EE_PARAMS_DBL_CLICK, ((uint16_t)BOS.buttons.maxInterClickTime<<8) | (uint16_t)BOS.buttons.minInterClickTime);
 8006326:	7959      	ldrb	r1, [r3, #5]
 8006328:	0209      	lsls	r1, r1, #8
 800632a:	4301      	orrs	r1, r0
 800632c:	2018      	movs	r0, #24
 800632e:	30ff      	adds	r0, #255	; 0xff
 8006330:	f001 f8d2 	bl	80074d8 <EE_WriteVariable>
	if (result == BOS_OK) 
 8006334:	e098      	b.n	8006468 <setCommand+0x438>
		pcParameterString2 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 2, &xParameterStringLength2);
 8006336:	aa0c      	add	r2, sp, #48	; 0x30
 8006338:	2102      	movs	r1, #2
 800633a:	0020      	movs	r0, r4
 800633c:	f007 ff26 	bl	800e18c <FreeRTOS_CLIGetParameter>
 8006340:	4b22      	ldr	r3, [pc, #136]	; (80063cc <setCommand+0x39c>)
 8006342:	4698      	mov	r8, r3
 8006344:	6018      	str	r0, [r3, #0]
		pcParameterString3 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 3, &xParameterStringLength3);
 8006346:	aa0b      	add	r2, sp, #44	; 0x2c
 8006348:	2103      	movs	r1, #3
 800634a:	0020      	movs	r0, r4
 800634c:	f007 ff1e 	bl	800e18c <FreeRTOS_CLIGetParameter>
 8006350:	4d2f      	ldr	r5, [pc, #188]	; (8006410 <setCommand+0x3e0>)
 8006352:	6028      	str	r0, [r5, #0]
		pcParameterString4 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 4, &xParameterStringLength4);
 8006354:	aa0a      	add	r2, sp, #40	; 0x28
 8006356:	2104      	movs	r1, #4
 8006358:	0020      	movs	r0, r4
 800635a:	f007 ff17 	bl	800e18c <FreeRTOS_CLIGetParameter>
 800635e:	4b2d      	ldr	r3, [pc, #180]	; (8006414 <setCommand+0x3e4>)
 8006360:	4699      	mov	r9, r3
 8006362:	6018      	str	r0, [r3, #0]
		pcParameterString5 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 5, &xParameterStringLength5);
 8006364:	aa09      	add	r2, sp, #36	; 0x24
 8006366:	2105      	movs	r1, #5
 8006368:	0020      	movs	r0, r4
 800636a:	f007 ff0f 	bl	800e18c <FreeRTOS_CLIGetParameter>
 800636e:	4f2a      	ldr	r7, [pc, #168]	; (8006418 <setCommand+0x3e8>)
 8006370:	6038      	str	r0, [r7, #0]
		temp81 = atoi((const char *)pcParameterString2);		// Hours
 8006372:	4643      	mov	r3, r8
 8006374:	6818      	ldr	r0, [r3, #0]
 8006376:	f010 f88a 	bl	801648e <atoi>
 800637a:	b2c3      	uxtb	r3, r0
 800637c:	4698      	mov	r8, r3
		temp82 = atoi((const char *)pcParameterString3);		// Minutes
 800637e:	6828      	ldr	r0, [r5, #0]
 8006380:	f010 f885 	bl	801648e <atoi>
 8006384:	0005      	movs	r5, r0
		temp83 = atoi((const char *)pcParameterString4);		// Seconds
 8006386:	464b      	mov	r3, r9
 8006388:	6818      	ldr	r0, [r3, #0]
 800638a:	f010 f880 	bl	801648e <atoi>
 800638e:	0004      	movs	r4, r0
		if (pcParameterString5 != NULL) {
 8006390:	683f      	ldr	r7, [r7, #0]
 8006392:	2f00      	cmp	r7, #0
 8006394:	d047      	beq.n	8006426 <setCommand+0x3f6>
			if (!strncmp((const char *)pcParameterString5, "am", 2))
 8006396:	2202      	movs	r2, #2
 8006398:	4920      	ldr	r1, [pc, #128]	; (800641c <setCommand+0x3ec>)
 800639a:	0038      	movs	r0, r7
 800639c:	f010 fa21 	bl	80167e2 <strncmp>
 80063a0:	2800      	cmp	r0, #0
 80063a2:	d03f      	beq.n	8006424 <setCommand+0x3f4>
			else if (!strncmp((const char *)pcParameterString5, "pm", 2))
 80063a4:	2202      	movs	r2, #2
 80063a6:	491e      	ldr	r1, [pc, #120]	; (8006420 <setCommand+0x3f0>)
 80063a8:	0038      	movs	r0, r7
 80063aa:	f010 fa1a 	bl	80167e2 <strncmp>
				temp84 = RTC_PM;
 80063ae:	2602      	movs	r6, #2
			else if (!strncmp((const char *)pcParameterString5, "pm", 2))
 80063b0:	2800      	cmp	r0, #0
 80063b2:	d038      	beq.n	8006426 <setCommand+0x3f6>
				result = BOS_ERR_WrongValue;
 80063b4:	2668      	movs	r6, #104	; 0x68
 80063b6:	e1aa      	b.n	800670e <setCommand+0x6de>
 80063b8:	20000d14 	.word	0x20000d14
 80063bc:	0801aa70 	.word	0x0801aa70
 80063c0:	0801acd8 	.word	0x0801acd8
 80063c4:	0801ace4 	.word	0x0801ace4
 80063c8:	0801aaf8 	.word	0x0801aaf8
 80063cc:	20000d20 	.word	0x20000d20
 80063d0:	0801aa78 	.word	0x0801aa78
 80063d4:	08019dc0 	.word	0x08019dc0
 80063d8:	0801abe4 	.word	0x0801abe4
 80063dc:	0801abec 	.word	0x0801abec
 80063e0:	0801aa88 	.word	0x0801aa88
 80063e4:	0801ab94 	.word	0x0801ab94
 80063e8:	20006368 	.word	0x20006368
 80063ec:	0801aa90 	.word	0x0801aa90
 80063f0:	0801aa98 	.word	0x0801aa98
 80063f4:	0801aaa4 	.word	0x0801aaa4
 80063f8:	0801aab0 	.word	0x0801aab0
 80063fc:	0801aac0 	.word	0x0801aac0
 8006400:	0801aad4 	.word	0x0801aad4
 8006404:	0801abf0 	.word	0x0801abf0
 8006408:	0801ac04 	.word	0x0801ac04
 800640c:	0801ac34 	.word	0x0801ac34
 8006410:	20000d28 	.word	0x20000d28
 8006414:	20000d2c 	.word	0x20000d2c
 8006418:	20000d30 	.word	0x20000d30
 800641c:	0801c7b4 	.word	0x0801c7b4
 8006420:	0801ace0 	.word	0x0801ace0
				temp84 = RTC_AM;
 8006424:	2601      	movs	r6, #1
			if (temp81 > 23 || temp82 > 59 || temp83 > 59)
 8006426:	4643      	mov	r3, r8
 8006428:	2b17      	cmp	r3, #23
 800642a:	d900      	bls.n	800642e <setCommand+0x3fe>
 800642c:	e668      	b.n	8006100 <setCommand+0xd0>
		temp82 = atoi((const char *)pcParameterString3);		// Minutes
 800642e:	b2ed      	uxtb	r5, r5
			if (temp81 > 23 || temp82 > 59 || temp83 > 59)
 8006430:	2d3b      	cmp	r5, #59	; 0x3b
 8006432:	d900      	bls.n	8006436 <setCommand+0x406>
 8006434:	e664      	b.n	8006100 <setCommand+0xd0>
		temp83 = atoi((const char *)pcParameterString4);		// Seconds
 8006436:	b2e4      	uxtb	r4, r4
			if (temp81 > 23 || temp82 > 59 || temp83 > 59)
 8006438:	2c3b      	cmp	r4, #59	; 0x3b
 800643a:	d900      	bls.n	800643e <setCommand+0x40e>
 800643c:	e660      	b.n	8006100 <setCommand+0xd0>
				GetTimeDate();				
 800643e:	f007 f9e9 	bl	800d814 <GetTimeDate>
				result = BOS_CalendarConfig(BOS.date.month, BOS.date.day, BOS.date.year, BOS.date.weekday, temp83, temp82, temp81, temp84, BOS.daylightsaving);
 8006442:	4fb8      	ldr	r7, [pc, #736]	; (8006724 <setCommand+0x6f4>)
 8006444:	7d3b      	ldrb	r3, [r7, #20]
 8006446:	8b3a      	ldrh	r2, [r7, #24]
 8006448:	7d79      	ldrb	r1, [r7, #21]
 800644a:	7db8      	ldrb	r0, [r7, #22]
 800644c:	7b3f      	ldrb	r7, [r7, #12]
 800644e:	b27f      	sxtb	r7, r7
 8006450:	9704      	str	r7, [sp, #16]
 8006452:	9603      	str	r6, [sp, #12]
 8006454:	4646      	mov	r6, r8
 8006456:	9602      	str	r6, [sp, #8]
 8006458:	9501      	str	r5, [sp, #4]
 800645a:	9400      	str	r4, [sp, #0]
 800645c:	f007 f980 	bl	800d760 <BOS_CalendarConfig>
 8006460:	0006      	movs	r6, r0
	if (result == BOS_OK) 
 8006462:	2e00      	cmp	r6, #0
 8006464:	d000      	beq.n	8006468 <setCommand+0x438>
 8006466:	e14f      	b.n	8006708 <setCommand+0x6d8>
		pcParameterString1[xParameterStringLength1] = 0;		// Get rid of the remaining parameters
 8006468:	4baf      	ldr	r3, [pc, #700]	; (8006728 <setCommand+0x6f8>)
 800646a:	681a      	ldr	r2, [r3, #0]
 800646c:	2300      	movs	r3, #0
 800646e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006470:	5453      	strb	r3, [r2, r1]
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK, pcParameterString1, pcParameterString2);
 8006472:	4bae      	ldr	r3, [pc, #696]	; (800672c <setCommand+0x6fc>)
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	49ae      	ldr	r1, [pc, #696]	; (8006730 <setCommand+0x700>)
 8006478:	4650      	mov	r0, sl
 800647a:	f010 f96f 	bl	801675c <siprintf>
	return pdFALSE;
 800647e:	e149      	b.n	8006714 <setCommand+0x6e4>
		pcParameterString2 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 2, &xParameterStringLength2);
 8006480:	aa0c      	add	r2, sp, #48	; 0x30
 8006482:	2102      	movs	r1, #2
 8006484:	0020      	movs	r0, r4
 8006486:	f007 fe81 	bl	800e18c <FreeRTOS_CLIGetParameter>
 800648a:	4da8      	ldr	r5, [pc, #672]	; (800672c <setCommand+0x6fc>)
 800648c:	6028      	str	r0, [r5, #0]
		pcParameterString3 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 3, &xParameterStringLength3);
 800648e:	aa0b      	add	r2, sp, #44	; 0x2c
 8006490:	2103      	movs	r1, #3
 8006492:	0020      	movs	r0, r4
 8006494:	f007 fe7a 	bl	800e18c <FreeRTOS_CLIGetParameter>
 8006498:	4ba6      	ldr	r3, [pc, #664]	; (8006734 <setCommand+0x704>)
 800649a:	6018      	str	r0, [r3, #0]
		pcParameterString4 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 4, &xParameterStringLength4);
 800649c:	aa0a      	add	r2, sp, #40	; 0x28
 800649e:	2104      	movs	r1, #4
 80064a0:	0020      	movs	r0, r4
 80064a2:	f007 fe73 	bl	800e18c <FreeRTOS_CLIGetParameter>
 80064a6:	4ea4      	ldr	r6, [pc, #656]	; (8006738 <setCommand+0x708>)
 80064a8:	6030      	str	r0, [r6, #0]
		pcParameterString5 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 5, &xParameterStringLength5);
 80064aa:	aa09      	add	r2, sp, #36	; 0x24
 80064ac:	2105      	movs	r1, #5
 80064ae:	0020      	movs	r0, r4
 80064b0:	f007 fe6c 	bl	800e18c <FreeRTOS_CLIGetParameter>
 80064b4:	4ca1      	ldr	r4, [pc, #644]	; (800673c <setCommand+0x70c>)
 80064b6:	6020      	str	r0, [r4, #0]
		temp83 = atoi((const char *)pcParameterString4);		// day
 80064b8:	6830      	ldr	r0, [r6, #0]
 80064ba:	f00f ffe8 	bl	801648e <atoi>
 80064be:	9006      	str	r0, [sp, #24]
		temp16 = atoi((const char *)pcParameterString5);		// year	
 80064c0:	6820      	ldr	r0, [r4, #0]
 80064c2:	f00f ffe4 	bl	801648e <atoi>
 80064c6:	9007      	str	r0, [sp, #28]
		if (!strncmp((const char *)pcParameterString2, "monday", 6))
 80064c8:	682c      	ldr	r4, [r5, #0]
 80064ca:	2206      	movs	r2, #6
 80064cc:	499c      	ldr	r1, [pc, #624]	; (8006740 <setCommand+0x710>)
 80064ce:	0020      	movs	r0, r4
 80064d0:	f010 f987 	bl	80167e2 <strncmp>
 80064d4:	2800      	cmp	r0, #0
 80064d6:	d100      	bne.n	80064da <setCommand+0x4aa>
 80064d8:	e170      	b.n	80067bc <setCommand+0x78c>
		else if (!strncmp((const char *)pcParameterString2, "tuesday", 7))
 80064da:	2207      	movs	r2, #7
 80064dc:	4999      	ldr	r1, [pc, #612]	; (8006744 <setCommand+0x714>)
 80064de:	0020      	movs	r0, r4
 80064e0:	f010 f97f 	bl	80167e2 <strncmp>
 80064e4:	2800      	cmp	r0, #0
 80064e6:	d100      	bne.n	80064ea <setCommand+0x4ba>
 80064e8:	e199      	b.n	800681e <setCommand+0x7ee>
		else if (!strncmp((const char *)pcParameterString2, "wednesday", 9))
 80064ea:	2209      	movs	r2, #9
 80064ec:	4996      	ldr	r1, [pc, #600]	; (8006748 <setCommand+0x718>)
 80064ee:	0020      	movs	r0, r4
 80064f0:	f010 f977 	bl	80167e2 <strncmp>
 80064f4:	2800      	cmp	r0, #0
 80064f6:	d100      	bne.n	80064fa <setCommand+0x4ca>
 80064f8:	e193      	b.n	8006822 <setCommand+0x7f2>
		else if (!strncmp((const char *)pcParameterString2, "thursday", 8))
 80064fa:	2208      	movs	r2, #8
 80064fc:	4993      	ldr	r1, [pc, #588]	; (800674c <setCommand+0x71c>)
 80064fe:	0020      	movs	r0, r4
 8006500:	f010 f96f 	bl	80167e2 <strncmp>
 8006504:	2800      	cmp	r0, #0
 8006506:	d100      	bne.n	800650a <setCommand+0x4da>
 8006508:	e18d      	b.n	8006826 <setCommand+0x7f6>
		else if (!strncmp((const char *)pcParameterString2, "friday", 6))
 800650a:	2206      	movs	r2, #6
 800650c:	4990      	ldr	r1, [pc, #576]	; (8006750 <setCommand+0x720>)
 800650e:	0020      	movs	r0, r4
 8006510:	f010 f967 	bl	80167e2 <strncmp>
 8006514:	2800      	cmp	r0, #0
 8006516:	d100      	bne.n	800651a <setCommand+0x4ea>
 8006518:	e187      	b.n	800682a <setCommand+0x7fa>
		else if (!strncmp((const char *)pcParameterString2, "saturday", 8))
 800651a:	2208      	movs	r2, #8
 800651c:	498d      	ldr	r1, [pc, #564]	; (8006754 <setCommand+0x724>)
 800651e:	0020      	movs	r0, r4
 8006520:	f010 f95f 	bl	80167e2 <strncmp>
 8006524:	2800      	cmp	r0, #0
 8006526:	d100      	bne.n	800652a <setCommand+0x4fa>
 8006528:	e181      	b.n	800682e <setCommand+0x7fe>
		else if (!strncmp((const char *)pcParameterString2, "sunday", 6))
 800652a:	2206      	movs	r2, #6
 800652c:	498a      	ldr	r1, [pc, #552]	; (8006758 <setCommand+0x728>)
 800652e:	0020      	movs	r0, r4
 8006530:	f010 f957 	bl	80167e2 <strncmp>
 8006534:	2800      	cmp	r0, #0
 8006536:	d100      	bne.n	800653a <setCommand+0x50a>
 8006538:	e17b      	b.n	8006832 <setCommand+0x802>
		if (!strncmp((const char *)pcParameterString3, "january", 7) || !strncmp((const char *)pcParameterString3, "1 ", 2))
 800653a:	4b7e      	ldr	r3, [pc, #504]	; (8006734 <setCommand+0x704>)
 800653c:	681c      	ldr	r4, [r3, #0]
 800653e:	2207      	movs	r2, #7
 8006540:	4986      	ldr	r1, [pc, #536]	; (800675c <setCommand+0x72c>)
 8006542:	0020      	movs	r0, r4
 8006544:	f010 f94d 	bl	80167e2 <strncmp>
 8006548:	2800      	cmp	r0, #0
 800654a:	d100      	bne.n	800654e <setCommand+0x51e>
 800654c:	e0ab      	b.n	80066a6 <setCommand+0x676>
			result = BOS_ERR_WrongValue;		
 800654e:	2668      	movs	r6, #104	; 0x68
		if (!strncmp((const char *)pcParameterString3, "january", 7) || !strncmp((const char *)pcParameterString3, "1 ", 2))
 8006550:	2202      	movs	r2, #2
 8006552:	4983      	ldr	r1, [pc, #524]	; (8006760 <setCommand+0x730>)
 8006554:	0020      	movs	r0, r4
 8006556:	f010 f944 	bl	80167e2 <strncmp>
 800655a:	2800      	cmp	r0, #0
 800655c:	d100      	bne.n	8006560 <setCommand+0x530>
 800655e:	e0a5      	b.n	80066ac <setCommand+0x67c>
		else if (!strncmp((const char *)pcParameterString3, "february", 8) || !strncmp((const char *)pcParameterString3, "2 ", 2))
 8006560:	2208      	movs	r2, #8
 8006562:	4980      	ldr	r1, [pc, #512]	; (8006764 <setCommand+0x734>)
 8006564:	0020      	movs	r0, r4
 8006566:	f010 f93c 	bl	80167e2 <strncmp>
 800656a:	2800      	cmp	r0, #0
 800656c:	d100      	bne.n	8006570 <setCommand+0x540>
 800656e:	e0a1      	b.n	80066b4 <setCommand+0x684>
 8006570:	2202      	movs	r2, #2
 8006572:	497d      	ldr	r1, [pc, #500]	; (8006768 <setCommand+0x738>)
 8006574:	0020      	movs	r0, r4
 8006576:	f010 f934 	bl	80167e2 <strncmp>
 800657a:	2800      	cmp	r0, #0
 800657c:	d100      	bne.n	8006580 <setCommand+0x550>
 800657e:	e09b      	b.n	80066b8 <setCommand+0x688>
		else if (!strncmp((const char *)pcParameterString3, "march", 5) || !strncmp((const char *)pcParameterString3, "3 ", 2))
 8006580:	2205      	movs	r2, #5
 8006582:	497a      	ldr	r1, [pc, #488]	; (800676c <setCommand+0x73c>)
 8006584:	0020      	movs	r0, r4
 8006586:	f010 f92c 	bl	80167e2 <strncmp>
 800658a:	2800      	cmp	r0, #0
 800658c:	d100      	bne.n	8006590 <setCommand+0x560>
 800658e:	e095      	b.n	80066bc <setCommand+0x68c>
 8006590:	2202      	movs	r2, #2
 8006592:	4977      	ldr	r1, [pc, #476]	; (8006770 <setCommand+0x740>)
 8006594:	0020      	movs	r0, r4
 8006596:	f010 f924 	bl	80167e2 <strncmp>
 800659a:	2800      	cmp	r0, #0
 800659c:	d100      	bne.n	80065a0 <setCommand+0x570>
 800659e:	e08f      	b.n	80066c0 <setCommand+0x690>
		else if (!strncmp((const char *)pcParameterString3, "april", 5) || !strncmp((const char *)pcParameterString3, "4 ", 2))
 80065a0:	2205      	movs	r2, #5
 80065a2:	4974      	ldr	r1, [pc, #464]	; (8006774 <setCommand+0x744>)
 80065a4:	0020      	movs	r0, r4
 80065a6:	f010 f91c 	bl	80167e2 <strncmp>
 80065aa:	2800      	cmp	r0, #0
 80065ac:	d100      	bne.n	80065b0 <setCommand+0x580>
 80065ae:	e089      	b.n	80066c4 <setCommand+0x694>
 80065b0:	2202      	movs	r2, #2
 80065b2:	4971      	ldr	r1, [pc, #452]	; (8006778 <setCommand+0x748>)
 80065b4:	0020      	movs	r0, r4
 80065b6:	f010 f914 	bl	80167e2 <strncmp>
 80065ba:	2800      	cmp	r0, #0
 80065bc:	d100      	bne.n	80065c0 <setCommand+0x590>
 80065be:	e083      	b.n	80066c8 <setCommand+0x698>
		else if (!strncmp((const char *)pcParameterString3, "may", 3) || !strncmp((const char *)pcParameterString3, "5 ", 2))
 80065c0:	2203      	movs	r2, #3
 80065c2:	496e      	ldr	r1, [pc, #440]	; (800677c <setCommand+0x74c>)
 80065c4:	0020      	movs	r0, r4
 80065c6:	f010 f90c 	bl	80167e2 <strncmp>
 80065ca:	2800      	cmp	r0, #0
 80065cc:	d07e      	beq.n	80066cc <setCommand+0x69c>
 80065ce:	2202      	movs	r2, #2
 80065d0:	496b      	ldr	r1, [pc, #428]	; (8006780 <setCommand+0x750>)
 80065d2:	0020      	movs	r0, r4
 80065d4:	f010 f905 	bl	80167e2 <strncmp>
 80065d8:	2800      	cmp	r0, #0
 80065da:	d079      	beq.n	80066d0 <setCommand+0x6a0>
		else if (!strncmp((const char *)pcParameterString3, "june", 4) || !strncmp((const char *)pcParameterString3, "6 ", 2))
 80065dc:	2204      	movs	r2, #4
 80065de:	4969      	ldr	r1, [pc, #420]	; (8006784 <setCommand+0x754>)
 80065e0:	0020      	movs	r0, r4
 80065e2:	f010 f8fe 	bl	80167e2 <strncmp>
 80065e6:	2800      	cmp	r0, #0
 80065e8:	d074      	beq.n	80066d4 <setCommand+0x6a4>
 80065ea:	2202      	movs	r2, #2
 80065ec:	4966      	ldr	r1, [pc, #408]	; (8006788 <setCommand+0x758>)
 80065ee:	0020      	movs	r0, r4
 80065f0:	f010 f8f7 	bl	80167e2 <strncmp>
 80065f4:	2800      	cmp	r0, #0
 80065f6:	d06f      	beq.n	80066d8 <setCommand+0x6a8>
		else if (!strncmp((const char *)pcParameterString3, "july", 4) || !strncmp((const char *)pcParameterString3, "7 ", 2))
 80065f8:	2204      	movs	r2, #4
 80065fa:	4964      	ldr	r1, [pc, #400]	; (800678c <setCommand+0x75c>)
 80065fc:	0020      	movs	r0, r4
 80065fe:	f010 f8f0 	bl	80167e2 <strncmp>
 8006602:	2800      	cmp	r0, #0
 8006604:	d06a      	beq.n	80066dc <setCommand+0x6ac>
 8006606:	2202      	movs	r2, #2
 8006608:	4961      	ldr	r1, [pc, #388]	; (8006790 <setCommand+0x760>)
 800660a:	0020      	movs	r0, r4
 800660c:	f010 f8e9 	bl	80167e2 <strncmp>
 8006610:	2800      	cmp	r0, #0
 8006612:	d065      	beq.n	80066e0 <setCommand+0x6b0>
		else if (!strncmp((const char *)pcParameterString3, "august", 5) || !strncmp((const char *)pcParameterString3, "8 ", 2))
 8006614:	2205      	movs	r2, #5
 8006616:	495f      	ldr	r1, [pc, #380]	; (8006794 <setCommand+0x764>)
 8006618:	0020      	movs	r0, r4
 800661a:	f010 f8e2 	bl	80167e2 <strncmp>
 800661e:	2800      	cmp	r0, #0
 8006620:	d060      	beq.n	80066e4 <setCommand+0x6b4>
 8006622:	2202      	movs	r2, #2
 8006624:	495c      	ldr	r1, [pc, #368]	; (8006798 <setCommand+0x768>)
 8006626:	0020      	movs	r0, r4
 8006628:	f010 f8db 	bl	80167e2 <strncmp>
 800662c:	2800      	cmp	r0, #0
 800662e:	d05b      	beq.n	80066e8 <setCommand+0x6b8>
		else if (!strncmp((const char *)pcParameterString3, "september", 9) || !strncmp((const char *)pcParameterString3, "9 ", 2))
 8006630:	2209      	movs	r2, #9
 8006632:	495a      	ldr	r1, [pc, #360]	; (800679c <setCommand+0x76c>)
 8006634:	0020      	movs	r0, r4
 8006636:	f010 f8d4 	bl	80167e2 <strncmp>
 800663a:	2800      	cmp	r0, #0
 800663c:	d056      	beq.n	80066ec <setCommand+0x6bc>
 800663e:	2202      	movs	r2, #2
 8006640:	4957      	ldr	r1, [pc, #348]	; (80067a0 <setCommand+0x770>)
 8006642:	0020      	movs	r0, r4
 8006644:	f010 f8cd 	bl	80167e2 <strncmp>
 8006648:	2800      	cmp	r0, #0
 800664a:	d051      	beq.n	80066f0 <setCommand+0x6c0>
		else if (!strncmp((const char *)pcParameterString3, "october", 7) || !strncmp((const char *)pcParameterString3, "10", 2))
 800664c:	2207      	movs	r2, #7
 800664e:	4955      	ldr	r1, [pc, #340]	; (80067a4 <setCommand+0x774>)
 8006650:	0020      	movs	r0, r4
 8006652:	f010 f8c6 	bl	80167e2 <strncmp>
 8006656:	2800      	cmp	r0, #0
 8006658:	d04c      	beq.n	80066f4 <setCommand+0x6c4>
 800665a:	2202      	movs	r2, #2
 800665c:	4952      	ldr	r1, [pc, #328]	; (80067a8 <setCommand+0x778>)
 800665e:	0020      	movs	r0, r4
 8006660:	f010 f8bf 	bl	80167e2 <strncmp>
 8006664:	2800      	cmp	r0, #0
 8006666:	d047      	beq.n	80066f8 <setCommand+0x6c8>
		else if (!strncmp((const char *)pcParameterString3, "november", 8) || !strncmp((const char *)pcParameterString3, "11", 2))
 8006668:	2208      	movs	r2, #8
 800666a:	4950      	ldr	r1, [pc, #320]	; (80067ac <setCommand+0x77c>)
 800666c:	0020      	movs	r0, r4
 800666e:	f010 f8b8 	bl	80167e2 <strncmp>
 8006672:	2800      	cmp	r0, #0
 8006674:	d042      	beq.n	80066fc <setCommand+0x6cc>
 8006676:	2202      	movs	r2, #2
 8006678:	494d      	ldr	r1, [pc, #308]	; (80067b0 <setCommand+0x780>)
 800667a:	0020      	movs	r0, r4
 800667c:	f010 f8b1 	bl	80167e2 <strncmp>
 8006680:	2800      	cmp	r0, #0
 8006682:	d03d      	beq.n	8006700 <setCommand+0x6d0>
		else if (!strncmp((const char *)pcParameterString3, "december", 8) || !strncmp((const char *)pcParameterString3, "12", 2))
 8006684:	2208      	movs	r2, #8
 8006686:	494b      	ldr	r1, [pc, #300]	; (80067b4 <setCommand+0x784>)
 8006688:	0020      	movs	r0, r4
 800668a:	f010 f8aa 	bl	80167e2 <strncmp>
 800668e:	2800      	cmp	r0, #0
 8006690:	d038      	beq.n	8006704 <setCommand+0x6d4>
 8006692:	2202      	movs	r2, #2
 8006694:	4948      	ldr	r1, [pc, #288]	; (80067b8 <setCommand+0x788>)
 8006696:	0020      	movs	r0, r4
 8006698:	f010 f8a3 	bl	80167e2 <strncmp>
			temp82 = DECEMBER;
 800669c:	250c      	movs	r5, #12
		else if (!strncmp((const char *)pcParameterString3, "december", 8) || !strncmp((const char *)pcParameterString3, "12", 2))
 800669e:	2800      	cmp	r0, #0
 80066a0:	d005      	beq.n	80066ae <setCommand+0x67e>
			result = BOS_ERR_WrongValue;	
 80066a2:	2668      	movs	r6, #104	; 0x68
	else if (result == BOS_ERR_WrongParam)
 80066a4:	e033      	b.n	800670e <setCommand+0x6de>
			result = BOS_ERR_WrongValue;		
 80066a6:	2668      	movs	r6, #104	; 0x68
			temp82 = JANUARY;
 80066a8:	2501      	movs	r5, #1
 80066aa:	e000      	b.n	80066ae <setCommand+0x67e>
 80066ac:	2501      	movs	r5, #1
		if (result == BOS_OK) 
 80066ae:	2e00      	cmp	r6, #0
 80066b0:	d12d      	bne.n	800670e <setCommand+0x6de>
 80066b2:	e090      	b.n	80067d6 <setCommand+0x7a6>
			temp82 = FEBRUARY;
 80066b4:	2502      	movs	r5, #2
 80066b6:	e7fa      	b.n	80066ae <setCommand+0x67e>
 80066b8:	2502      	movs	r5, #2
 80066ba:	e7f8      	b.n	80066ae <setCommand+0x67e>
			temp82 = MARCH;
 80066bc:	2503      	movs	r5, #3
 80066be:	e7f6      	b.n	80066ae <setCommand+0x67e>
 80066c0:	2503      	movs	r5, #3
 80066c2:	e7f4      	b.n	80066ae <setCommand+0x67e>
			temp82 = APRIL;
 80066c4:	2504      	movs	r5, #4
 80066c6:	e7f2      	b.n	80066ae <setCommand+0x67e>
 80066c8:	2504      	movs	r5, #4
 80066ca:	e7f0      	b.n	80066ae <setCommand+0x67e>
			temp82 = MAY;
 80066cc:	2505      	movs	r5, #5
 80066ce:	e7ee      	b.n	80066ae <setCommand+0x67e>
 80066d0:	2505      	movs	r5, #5
 80066d2:	e7ec      	b.n	80066ae <setCommand+0x67e>
			temp82 = JUNE;
 80066d4:	2506      	movs	r5, #6
 80066d6:	e7ea      	b.n	80066ae <setCommand+0x67e>
 80066d8:	2506      	movs	r5, #6
 80066da:	e7e8      	b.n	80066ae <setCommand+0x67e>
			temp82 = JULY;
 80066dc:	2507      	movs	r5, #7
 80066de:	e7e6      	b.n	80066ae <setCommand+0x67e>
 80066e0:	2507      	movs	r5, #7
 80066e2:	e7e4      	b.n	80066ae <setCommand+0x67e>
			temp82 = AUGUST;
 80066e4:	2508      	movs	r5, #8
 80066e6:	e7e2      	b.n	80066ae <setCommand+0x67e>
 80066e8:	2508      	movs	r5, #8
 80066ea:	e7e0      	b.n	80066ae <setCommand+0x67e>
			temp82 = SEPTEMBER;
 80066ec:	2509      	movs	r5, #9
 80066ee:	e7de      	b.n	80066ae <setCommand+0x67e>
 80066f0:	2509      	movs	r5, #9
 80066f2:	e7dc      	b.n	80066ae <setCommand+0x67e>
			temp82 = OCTOBER;
 80066f4:	250a      	movs	r5, #10
 80066f6:	e7da      	b.n	80066ae <setCommand+0x67e>
 80066f8:	250a      	movs	r5, #10
 80066fa:	e7d8      	b.n	80066ae <setCommand+0x67e>
			temp82 = NOVEMBER;
 80066fc:	250b      	movs	r5, #11
 80066fe:	e7d6      	b.n	80066ae <setCommand+0x67e>
 8006700:	250b      	movs	r5, #11
 8006702:	e7d4      	b.n	80066ae <setCommand+0x67e>
			temp82 = DECEMBER;
 8006704:	250c      	movs	r5, #12
 8006706:	e7d2      	b.n	80066ae <setCommand+0x67e>
	else if (result == BOS_ERR_WrongParam)
 8006708:	2e67      	cmp	r6, #103	; 0x67
 800670a:	d100      	bne.n	800670e <setCommand+0x6de>
 800670c:	e4bf      	b.n	800608e <setCommand+0x5e>
	else if (result == BOS_ERR_WrongValue)
 800670e:	2e68      	cmp	r6, #104	; 0x68
 8006710:	d100      	bne.n	8006714 <setCommand+0x6e4>
 8006712:	e4f5      	b.n	8006100 <setCommand+0xd0>
}
 8006714:	2000      	movs	r0, #0
 8006716:	b00e      	add	sp, #56	; 0x38
 8006718:	bce0      	pop	{r5, r6, r7}
 800671a:	46ba      	mov	sl, r7
 800671c:	46b1      	mov	r9, r6
 800671e:	46a8      	mov	r8, r5
 8006720:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006722:	46c0      	nop			; (mov r8, r8)
 8006724:	20006368 	.word	0x20006368
 8006728:	20000d14 	.word	0x20000d14
 800672c:	20000d20 	.word	0x20000d20
 8006730:	0801abf0 	.word	0x0801abf0
 8006734:	20000d28 	.word	0x20000d28
 8006738:	20000d2c 	.word	0x20000d2c
 800673c:	20000d30 	.word	0x20000d30
 8006740:	0801acec 	.word	0x0801acec
 8006744:	0801acf4 	.word	0x0801acf4
 8006748:	0801acfc 	.word	0x0801acfc
 800674c:	0801ad08 	.word	0x0801ad08
 8006750:	0801ad14 	.word	0x0801ad14
 8006754:	0801ad1c 	.word	0x0801ad1c
 8006758:	0801ad28 	.word	0x0801ad28
 800675c:	0801ad30 	.word	0x0801ad30
 8006760:	0801ad38 	.word	0x0801ad38
 8006764:	0801ad3c 	.word	0x0801ad3c
 8006768:	0801ad48 	.word	0x0801ad48
 800676c:	0801ad4c 	.word	0x0801ad4c
 8006770:	0801ad54 	.word	0x0801ad54
 8006774:	0801ad58 	.word	0x0801ad58
 8006778:	0801ad60 	.word	0x0801ad60
 800677c:	0801ad64 	.word	0x0801ad64
 8006780:	0801ad68 	.word	0x0801ad68
 8006784:	0801ad6c 	.word	0x0801ad6c
 8006788:	0801ad74 	.word	0x0801ad74
 800678c:	0801ad78 	.word	0x0801ad78
 8006790:	0801ad80 	.word	0x0801ad80
 8006794:	0801ad84 	.word	0x0801ad84
 8006798:	0801ad8c 	.word	0x0801ad8c
 800679c:	0801ad90 	.word	0x0801ad90
 80067a0:	0801ad9c 	.word	0x0801ad9c
 80067a4:	0801ada0 	.word	0x0801ada0
 80067a8:	0801ada8 	.word	0x0801ada8
 80067ac:	0801adac 	.word	0x0801adac
 80067b0:	0801adb8 	.word	0x0801adb8
 80067b4:	0801adbc 	.word	0x0801adbc
 80067b8:	0801adc8 	.word	0x0801adc8
			temp81 = MONDAY;
 80067bc:	2701      	movs	r7, #1
		if (!strncmp((const char *)pcParameterString3, "january", 7) || !strncmp((const char *)pcParameterString3, "1 ", 2))
 80067be:	4b1e      	ldr	r3, [pc, #120]	; (8006838 <setCommand+0x808>)
 80067c0:	681c      	ldr	r4, [r3, #0]
 80067c2:	2207      	movs	r2, #7
 80067c4:	491d      	ldr	r1, [pc, #116]	; (800683c <setCommand+0x80c>)
 80067c6:	0020      	movs	r0, r4
 80067c8:	f010 f80b 	bl	80167e2 <strncmp>
			temp82 = JANUARY;
 80067cc:	2501      	movs	r5, #1
		if (!strncmp((const char *)pcParameterString3, "january", 7) || !strncmp((const char *)pcParameterString3, "1 ", 2))
 80067ce:	2600      	movs	r6, #0
 80067d0:	2800      	cmp	r0, #0
 80067d2:	d000      	beq.n	80067d6 <setCommand+0x7a6>
 80067d4:	e6bc      	b.n	8006550 <setCommand+0x520>
		temp83 = atoi((const char *)pcParameterString4);		// day
 80067d6:	466b      	mov	r3, sp
 80067d8:	7e1e      	ldrb	r6, [r3, #24]
			if (temp83 < 1 || temp83 > 31 || temp16 < 2000 || temp16 > 2100)
 80067da:	1e73      	subs	r3, r6, #1
 80067dc:	2b1e      	cmp	r3, #30
 80067de:	d900      	bls.n	80067e2 <setCommand+0x7b2>
 80067e0:	e48e      	b.n	8006100 <setCommand+0xd0>
		temp16 = atoi((const char *)pcParameterString5);		// year	
 80067e2:	466b      	mov	r3, sp
 80067e4:	8b9c      	ldrh	r4, [r3, #28]
			if (temp83 < 1 || temp83 > 31 || temp16 < 2000 || temp16 > 2100)
 80067e6:	4b16      	ldr	r3, [pc, #88]	; (8006840 <setCommand+0x810>)
 80067e8:	18e3      	adds	r3, r4, r3
 80067ea:	b29b      	uxth	r3, r3
 80067ec:	2b64      	cmp	r3, #100	; 0x64
 80067ee:	d900      	bls.n	80067f2 <setCommand+0x7c2>
 80067f0:	e486      	b.n	8006100 <setCommand+0xd0>
				GetTimeDate();
 80067f2:	f007 f80f 	bl	800d814 <GetTimeDate>
				result = BOS_CalendarConfig(temp82, temp83, temp16, temp81, BOS.time.seconds, BOS.time.minutes, BOS.time.hours, BOS.time.ampm, BOS.daylightsaving);
 80067f6:	4b13      	ldr	r3, [pc, #76]	; (8006844 <setCommand+0x814>)
 80067f8:	220c      	movs	r2, #12
 80067fa:	569a      	ldrsb	r2, [r3, r2]
 80067fc:	9204      	str	r2, [sp, #16]
 80067fe:	7cda      	ldrb	r2, [r3, #19]
 8006800:	9203      	str	r2, [sp, #12]
 8006802:	7c9a      	ldrb	r2, [r3, #18]
 8006804:	9202      	str	r2, [sp, #8]
 8006806:	7c5a      	ldrb	r2, [r3, #17]
 8006808:	9201      	str	r2, [sp, #4]
 800680a:	7c1b      	ldrb	r3, [r3, #16]
 800680c:	9300      	str	r3, [sp, #0]
 800680e:	003b      	movs	r3, r7
 8006810:	0022      	movs	r2, r4
 8006812:	0031      	movs	r1, r6
 8006814:	0028      	movs	r0, r5
 8006816:	f006 ffa3 	bl	800d760 <BOS_CalendarConfig>
 800681a:	0006      	movs	r6, r0
 800681c:	e621      	b.n	8006462 <setCommand+0x432>
			temp81 = TUESDAY;
 800681e:	2702      	movs	r7, #2
 8006820:	e7cd      	b.n	80067be <setCommand+0x78e>
			temp81 = WEDNESDAY;
 8006822:	2703      	movs	r7, #3
 8006824:	e7cb      	b.n	80067be <setCommand+0x78e>
			temp81 = THURSDAY;
 8006826:	2704      	movs	r7, #4
 8006828:	e7c9      	b.n	80067be <setCommand+0x78e>
			temp81 = FRIDAY;
 800682a:	2705      	movs	r7, #5
 800682c:	e7c7      	b.n	80067be <setCommand+0x78e>
			temp81 = SATURDAY;
 800682e:	2706      	movs	r7, #6
 8006830:	e7c5      	b.n	80067be <setCommand+0x78e>
			temp81 = SUNDAY;
 8006832:	2707      	movs	r7, #7
 8006834:	e7c3      	b.n	80067be <setCommand+0x78e>
 8006836:	46c0      	nop			; (mov r8, r8)
 8006838:	20000d28 	.word	0x20000d28
 800683c:	0801ad30 	.word	0x0801ad30
 8006840:	fffff830 	.word	0xfffff830
 8006844:	20006368 	.word	0x20006368

08006848 <removebuttonCommand>:
{
 8006848:	b530      	push	{r4, r5, lr}
 800684a:	b083      	sub	sp, #12
 800684c:	0005      	movs	r5, r0
 800684e:	0010      	movs	r0, r2
	portBASE_TYPE xParameterStringLength1 = 0; 
 8006850:	2300      	movs	r3, #0
 8006852:	9301      	str	r3, [sp, #4]
	configASSERT( pcWriteBuffer );
 8006854:	2d00      	cmp	r5, #0
 8006856:	d010      	beq.n	800687a <removebuttonCommand+0x32>
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 8006858:	aa01      	add	r2, sp, #4
 800685a:	2101      	movs	r1, #1
 800685c:	f007 fc96 	bl	800e18c <FreeRTOS_CLIGetParameter>
	if (pcParameterString1[0] == 'p') {
 8006860:	2300      	movs	r3, #0
 8006862:	56c3      	ldrsb	r3, [r0, r3]
	uint8_t port = 0;
 8006864:	2400      	movs	r4, #0
	if (pcParameterString1[0] == 'p') {
 8006866:	2b70      	cmp	r3, #112	; 0x70
 8006868:	d009      	beq.n	800687e <removebuttonCommand+0x36>
	result = RemovePortButton(port);
 800686a:	0020      	movs	r0, r4
 800686c:	f001 fdb0 	bl	80083d0 <RemovePortButton>
	if (result == BOS_OK) 
 8006870:	2800      	cmp	r0, #0
 8006872:	d009      	beq.n	8006888 <removebuttonCommand+0x40>
}
 8006874:	2000      	movs	r0, #0
 8006876:	b003      	add	sp, #12
 8006878:	bd30      	pop	{r4, r5, pc}
	configASSERT( pcWriteBuffer );
 800687a:	b672      	cpsid	i
 800687c:	e7fe      	b.n	800687c <removebuttonCommand+0x34>
		port = ( uint8_t ) atol( ( char * ) pcParameterString1+1 );
 800687e:	3001      	adds	r0, #1
 8006880:	f00f fe0b 	bl	801649a <atol>
 8006884:	b2c4      	uxtb	r4, r0
 8006886:	e7f0      	b.n	800686a <removebuttonCommand+0x22>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessage, port, port);
 8006888:	0023      	movs	r3, r4
 800688a:	0022      	movs	r2, r4
 800688c:	4902      	ldr	r1, [pc, #8]	; (8006898 <removebuttonCommand+0x50>)
 800688e:	0028      	movs	r0, r5
 8006890:	f00f ff64 	bl	801675c <siprintf>
 8006894:	e7ee      	b.n	8006874 <removebuttonCommand+0x2c>
 8006896:	46c0      	nop			; (mov r8, r8)
 8006898:	0801adcc 	.word	0x0801adcc

0800689c <addbuttonCommand>:
{
 800689c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800689e:	46c6      	mov	lr, r8
 80068a0:	b500      	push	{lr}
 80068a2:	b084      	sub	sp, #16
 80068a4:	0006      	movs	r6, r0
 80068a6:	0017      	movs	r7, r2
	portBASE_TYPE xParameterStringLength1 = 0, xParameterStringLength2 = 0; 
 80068a8:	2300      	movs	r3, #0
 80068aa:	9303      	str	r3, [sp, #12]
 80068ac:	9302      	str	r3, [sp, #8]
	configASSERT( pcWriteBuffer );
 80068ae:	2800      	cmp	r0, #0
 80068b0:	d03d      	beq.n	800692e <addbuttonCommand+0x92>
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 80068b2:	aa03      	add	r2, sp, #12
 80068b4:	2101      	movs	r1, #1
 80068b6:	0038      	movs	r0, r7
 80068b8:	f007 fc68 	bl	800e18c <FreeRTOS_CLIGetParameter>
 80068bc:	0005      	movs	r5, r0
 80068be:	4b25      	ldr	r3, [pc, #148]	; (8006954 <addbuttonCommand+0xb8>)
 80068c0:	6018      	str	r0, [r3, #0]
	if (!strncmp((const char *)pcParameterString1, "momentary-no", xParameterStringLength1)) {
 80068c2:	9b03      	ldr	r3, [sp, #12]
 80068c4:	4698      	mov	r8, r3
 80068c6:	001a      	movs	r2, r3
 80068c8:	4923      	ldr	r1, [pc, #140]	; (8006958 <addbuttonCommand+0xbc>)
 80068ca:	f00f ff8a 	bl	80167e2 <strncmp>
		type = MOMENTARY_NO;
 80068ce:	2401      	movs	r4, #1
	if (!strncmp((const char *)pcParameterString1, "momentary-no", xParameterStringLength1)) {
 80068d0:	2800      	cmp	r0, #0
 80068d2:	d017      	beq.n	8006904 <addbuttonCommand+0x68>
	} else if (!strncmp((const char *)pcParameterString1, "momentary-nc", xParameterStringLength1)) {
 80068d4:	4642      	mov	r2, r8
 80068d6:	4921      	ldr	r1, [pc, #132]	; (800695c <addbuttonCommand+0xc0>)
 80068d8:	0028      	movs	r0, r5
 80068da:	f00f ff82 	bl	80167e2 <strncmp>
		type = MOMENTARY_NC;
 80068de:	3401      	adds	r4, #1
	} else if (!strncmp((const char *)pcParameterString1, "momentary-nc", xParameterStringLength1)) {
 80068e0:	2800      	cmp	r0, #0
 80068e2:	d00f      	beq.n	8006904 <addbuttonCommand+0x68>
	} else if (!strncmp((const char *)pcParameterString1, "onoff-no", xParameterStringLength1)) {
 80068e4:	4642      	mov	r2, r8
 80068e6:	491e      	ldr	r1, [pc, #120]	; (8006960 <addbuttonCommand+0xc4>)
 80068e8:	0028      	movs	r0, r5
 80068ea:	f00f ff7a 	bl	80167e2 <strncmp>
		type = ONOFF_NO;
 80068ee:	3401      	adds	r4, #1
	} else if (!strncmp((const char *)pcParameterString1, "onoff-no", xParameterStringLength1)) {
 80068f0:	2800      	cmp	r0, #0
 80068f2:	d007      	beq.n	8006904 <addbuttonCommand+0x68>
	} else if (!strncmp((const char *)pcParameterString1, "onoff-nc", xParameterStringLength1)) {
 80068f4:	4642      	mov	r2, r8
 80068f6:	491b      	ldr	r1, [pc, #108]	; (8006964 <addbuttonCommand+0xc8>)
 80068f8:	0028      	movs	r0, r5
 80068fa:	f00f ff72 	bl	80167e2 <strncmp>
		type = ONOFF_NC;
 80068fe:	4244      	negs	r4, r0
 8006900:	4144      	adcs	r4, r0
 8006902:	00a4      	lsls	r4, r4, #2
	pcParameterString2 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 2, &xParameterStringLength2);
 8006904:	aa02      	add	r2, sp, #8
 8006906:	2102      	movs	r1, #2
 8006908:	0038      	movs	r0, r7
 800690a:	f007 fc3f 	bl	800e18c <FreeRTOS_CLIGetParameter>
	if (pcParameterString2[0] == 'p') {
 800690e:	2300      	movs	r3, #0
 8006910:	56c3      	ldrsb	r3, [r0, r3]
	uint8_t port = 0, type = 0;
 8006912:	2500      	movs	r5, #0
	if (pcParameterString2[0] == 'p') {
 8006914:	2b70      	cmp	r3, #112	; 0x70
 8006916:	d00c      	beq.n	8006932 <addbuttonCommand+0x96>
	result = AddPortButton(type, port);
 8006918:	0029      	movs	r1, r5
 800691a:	0020      	movs	r0, r4
 800691c:	f001 fcc6 	bl	80082ac <AddPortButton>
	if (result == BOS_OK) 
 8006920:	2800      	cmp	r0, #0
 8006922:	d00b      	beq.n	800693c <addbuttonCommand+0xa0>
}
 8006924:	2000      	movs	r0, #0
 8006926:	b004      	add	sp, #16
 8006928:	bc80      	pop	{r7}
 800692a:	46b8      	mov	r8, r7
 800692c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	configASSERT( pcWriteBuffer );
 800692e:	b672      	cpsid	i
 8006930:	e7fe      	b.n	8006930 <addbuttonCommand+0x94>
		port = ( uint8_t ) atol( ( char * ) pcParameterString2+1 );
 8006932:	3001      	adds	r0, #1
 8006934:	f00f fdb1 	bl	801649a <atol>
 8006938:	b2c5      	uxtb	r5, r0
 800693a:	e7ed      	b.n	8006918 <addbuttonCommand+0x7c>
		pcParameterString1[xParameterStringLength1] = 0;		// Get rid of the remaining parameters
 800693c:	4b05      	ldr	r3, [pc, #20]	; (8006954 <addbuttonCommand+0xb8>)
 800693e:	681a      	ldr	r2, [r3, #0]
 8006940:	2300      	movs	r3, #0
 8006942:	9903      	ldr	r1, [sp, #12]
 8006944:	5453      	strb	r3, [r2, r1]
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessage, pcParameterString1, port, port);
 8006946:	9500      	str	r5, [sp, #0]
 8006948:	002b      	movs	r3, r5
 800694a:	4907      	ldr	r1, [pc, #28]	; (8006968 <addbuttonCommand+0xcc>)
 800694c:	0030      	movs	r0, r6
 800694e:	f00f ff05 	bl	801675c <siprintf>
 8006952:	e7e7      	b.n	8006924 <addbuttonCommand+0x88>
 8006954:	20000d10 	.word	0x20000d10
 8006958:	0801adf4 	.word	0x0801adf4
 800695c:	0801ae04 	.word	0x0801ae04
 8006960:	0801ae14 	.word	0x0801ae14
 8006964:	0801ae20 	.word	0x0801ae20
 8006968:	0801ae2c 	.word	0x0801ae2c

0800696c <scastCommand>:
{
 800696c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800696e:	46de      	mov	lr, fp
 8006970:	4657      	mov	r7, sl
 8006972:	464e      	mov	r6, r9
 8006974:	4645      	mov	r5, r8
 8006976:	b5e0      	push	{r5, r6, r7, lr}
 8006978:	b099      	sub	sp, #100	; 0x64
 800697a:	0006      	movs	r6, r0
 800697c:	9007      	str	r0, [sp, #28]
 800697e:	0014      	movs	r4, r2
	portBASE_TYPE xParameterStringLength1 = 0, xParameterStringLength2 = 0, xParameterStringLength3 = 0; 
 8006980:	2500      	movs	r5, #0
 8006982:	9517      	str	r5, [sp, #92]	; 0x5c
 8006984:	9516      	str	r5, [sp, #88]	; 0x58
 8006986:	9515      	str	r5, [sp, #84]	; 0x54
	portBASE_TYPE xParameterStringLength4 = 0, xParameterStringLength5 = 0, xParameterStringLength6 = 0;
 8006988:	9514      	str	r5, [sp, #80]	; 0x50
 800698a:	9513      	str	r5, [sp, #76]	; 0x4c
 800698c:	9512      	str	r5, [sp, #72]	; 0x48
	portBASE_TYPE xParameterStringLength7 = 0;
 800698e:	9511      	str	r5, [sp, #68]	; 0x44
	char par1[MaxLengthOfAlias+1] = {0}, par2[MaxLengthOfAlias+1] = {0}, par3[MaxLengthOfAlias+1] = {0};
 8006990:	950e      	str	r5, [sp, #56]	; 0x38
 8006992:	2206      	movs	r2, #6
 8006994:	2100      	movs	r1, #0
 8006996:	a80f      	add	r0, sp, #60	; 0x3c
 8006998:	f00f fdd5 	bl	8016546 <memset>
 800699c:	950b      	str	r5, [sp, #44]	; 0x2c
 800699e:	2206      	movs	r2, #6
 80069a0:	2100      	movs	r1, #0
 80069a2:	a80c      	add	r0, sp, #48	; 0x30
 80069a4:	f00f fdcf 	bl	8016546 <memset>
 80069a8:	9508      	str	r5, [sp, #32]
 80069aa:	2206      	movs	r2, #6
 80069ac:	2100      	movs	r1, #0
 80069ae:	a809      	add	r0, sp, #36	; 0x24
 80069b0:	f00f fdc9 	bl	8016546 <memset>
	configASSERT( pcWriteBuffer );
 80069b4:	2e00      	cmp	r6, #0
 80069b6:	d100      	bne.n	80069ba <scastCommand+0x4e>
 80069b8:	e07c      	b.n	8006ab4 <scastCommand+0x148>
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 80069ba:	aa17      	add	r2, sp, #92	; 0x5c
 80069bc:	2101      	movs	r1, #1
 80069be:	0020      	movs	r0, r4
 80069c0:	f007 fbe4 	bl	800e18c <FreeRTOS_CLIGetParameter>
	if (pcParameterString1[0] == 'P') {
 80069c4:	2300      	movs	r3, #0
 80069c6:	56c3      	ldrsb	r3, [r0, r3]
	uint8_t direction = 0, srcP = 0, dstP = 0, srcM = 0, dstM = 0; uint32_t count = 0, timeout = 0;
 80069c8:	2700      	movs	r7, #0
	if (pcParameterString1[0] == 'P') {
 80069ca:	2b50      	cmp	r3, #80	; 0x50
 80069cc:	d100      	bne.n	80069d0 <scastCommand+0x64>
 80069ce:	e073      	b.n	8006ab8 <scastCommand+0x14c>
	pcParameterString2 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 2, &xParameterStringLength2);
 80069d0:	aa16      	add	r2, sp, #88	; 0x58
 80069d2:	2102      	movs	r1, #2
 80069d4:	0020      	movs	r0, r4
 80069d6:	f007 fbd9 	bl	800e18c <FreeRTOS_CLIGetParameter>
 80069da:	0001      	movs	r1, r0
	strncpy(par1, ( char * ) pcParameterString2, xParameterStringLength2);
 80069dc:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80069de:	a80e      	add	r0, sp, #56	; 0x38
 80069e0:	f00f ff10 	bl	8016804 <strncpy>
	srcM = (uint8_t) GetID(par1);
 80069e4:	a80e      	add	r0, sp, #56	; 0x38
 80069e6:	f7fd faf1 	bl	8003fcc <GetID>
 80069ea:	b2c3      	uxtb	r3, r0
 80069ec:	469b      	mov	fp, r3
	pcParameterString3 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 3, &xParameterStringLength3);
 80069ee:	aa15      	add	r2, sp, #84	; 0x54
 80069f0:	2103      	movs	r1, #3
 80069f2:	0020      	movs	r0, r4
 80069f4:	f007 fbca 	bl	800e18c <FreeRTOS_CLIGetParameter>
	if (pcParameterString3[0] == 'p') {
 80069f8:	2300      	movs	r3, #0
 80069fa:	56c3      	ldrsb	r3, [r0, r3]
	uint8_t direction = 0, srcP = 0, dstP = 0, srcM = 0, dstM = 0; uint32_t count = 0, timeout = 0;
 80069fc:	2200      	movs	r2, #0
 80069fe:	4690      	mov	r8, r2
	if (pcParameterString3[0] == 'p') {
 8006a00:	2b70      	cmp	r3, #112	; 0x70
 8006a02:	d05e      	beq.n	8006ac2 <scastCommand+0x156>
	pcParameterString4 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 4, &xParameterStringLength4);
 8006a04:	aa14      	add	r2, sp, #80	; 0x50
 8006a06:	2104      	movs	r1, #4
 8006a08:	0020      	movs	r0, r4
 8006a0a:	f007 fbbf 	bl	800e18c <FreeRTOS_CLIGetParameter>
 8006a0e:	0001      	movs	r1, r0
	strncpy(par2, ( char * ) pcParameterString4, xParameterStringLength4);
 8006a10:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006a12:	a80b      	add	r0, sp, #44	; 0x2c
 8006a14:	f00f fef6 	bl	8016804 <strncpy>
	dstM = (uint8_t) GetID(par2);
 8006a18:	a80b      	add	r0, sp, #44	; 0x2c
 8006a1a:	f7fd fad7 	bl	8003fcc <GetID>
 8006a1e:	b2c3      	uxtb	r3, r0
 8006a20:	4699      	mov	r9, r3
	pcParameterString5 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 5, &xParameterStringLength5);
 8006a22:	aa13      	add	r2, sp, #76	; 0x4c
 8006a24:	2105      	movs	r1, #5
 8006a26:	0020      	movs	r0, r4
 8006a28:	f007 fbb0 	bl	800e18c <FreeRTOS_CLIGetParameter>
 8006a2c:	0006      	movs	r6, r0
	if (!strncmp((const char *)pcParameterString5, "forward", xParameterStringLength5))
 8006a2e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006a30:	469a      	mov	sl, r3
 8006a32:	001a      	movs	r2, r3
 8006a34:	492d      	ldr	r1, [pc, #180]	; (8006aec <scastCommand+0x180>)
 8006a36:	f00f fed4 	bl	80167e2 <strncmp>
		direction = FORWARD;
 8006a3a:	2500      	movs	r5, #0
	if (!strncmp((const char *)pcParameterString5, "forward", xParameterStringLength5))
 8006a3c:	2800      	cmp	r0, #0
 8006a3e:	d00f      	beq.n	8006a60 <scastCommand+0xf4>
	else if (!strncmp(( const char *)pcParameterString5, "backward", xParameterStringLength5))
 8006a40:	4652      	mov	r2, sl
 8006a42:	492b      	ldr	r1, [pc, #172]	; (8006af0 <scastCommand+0x184>)
 8006a44:	0030      	movs	r0, r6
 8006a46:	f00f fecc 	bl	80167e2 <strncmp>
		direction = BACKWARD;
 8006a4a:	3501      	adds	r5, #1
	else if (!strncmp(( const char *)pcParameterString5, "backward", xParameterStringLength5))
 8006a4c:	2800      	cmp	r0, #0
 8006a4e:	d007      	beq.n	8006a60 <scastCommand+0xf4>
	else if (!strncmp((const char *)pcParameterString5, "bidirectional", xParameterStringLength5))
 8006a50:	4652      	mov	r2, sl
 8006a52:	4928      	ldr	r1, [pc, #160]	; (8006af4 <scastCommand+0x188>)
 8006a54:	0030      	movs	r0, r6
 8006a56:	f00f fec4 	bl	80167e2 <strncmp>
		direction = BIDIRECTIONAL;
 8006a5a:	4245      	negs	r5, r0
 8006a5c:	4145      	adcs	r5, r0
 8006a5e:	006d      	lsls	r5, r5, #1
	strncpy(par3, ( char * ) pcParameterString5, xParameterStringLength5);
 8006a60:	4652      	mov	r2, sl
 8006a62:	0031      	movs	r1, r6
 8006a64:	a808      	add	r0, sp, #32
 8006a66:	f00f fecd 	bl	8016804 <strncpy>
	pcParameterString6 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 6, &xParameterStringLength6);
 8006a6a:	aa12      	add	r2, sp, #72	; 0x48
 8006a6c:	2106      	movs	r1, #6
 8006a6e:	0020      	movs	r0, r4
 8006a70:	f007 fb8c 	bl	800e18c <FreeRTOS_CLIGetParameter>
	count = ( uint32_t ) atol( ( char * ) pcParameterString6 );
 8006a74:	f00f fd11 	bl	801649a <atol>
 8006a78:	0006      	movs	r6, r0
	pcParameterString7 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 7, &xParameterStringLength7);
 8006a7a:	aa11      	add	r2, sp, #68	; 0x44
 8006a7c:	2107      	movs	r1, #7
 8006a7e:	0020      	movs	r0, r4
 8006a80:	f007 fb84 	bl	800e18c <FreeRTOS_CLIGetParameter>
	timeout = ( uint32_t ) atol( ( char * ) pcParameterString7 );
 8006a84:	f00f fd09 	bl	801649a <atol>
 8006a88:	0004      	movs	r4, r0
	result = StartScastDMAStream(srcP, srcM, dstP, dstM, direction, count, timeout, false);
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	9303      	str	r3, [sp, #12]
 8006a8e:	9002      	str	r0, [sp, #8]
 8006a90:	9601      	str	r6, [sp, #4]
 8006a92:	9500      	str	r5, [sp, #0]
 8006a94:	464b      	mov	r3, r9
 8006a96:	4642      	mov	r2, r8
 8006a98:	4659      	mov	r1, fp
 8006a9a:	0038      	movs	r0, r7
 8006a9c:	f002 fa46 	bl	8008f2c <StartScastDMAStream>
	if (result == BOS_OK) 
 8006aa0:	2800      	cmp	r0, #0
 8006aa2:	d014      	beq.n	8006ace <scastCommand+0x162>
}
 8006aa4:	2000      	movs	r0, #0
 8006aa6:	b019      	add	sp, #100	; 0x64
 8006aa8:	bcf0      	pop	{r4, r5, r6, r7}
 8006aaa:	46bb      	mov	fp, r7
 8006aac:	46b2      	mov	sl, r6
 8006aae:	46a9      	mov	r9, r5
 8006ab0:	46a0      	mov	r8, r4
 8006ab2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	configASSERT( pcWriteBuffer );
 8006ab4:	b672      	cpsid	i
 8006ab6:	e7fe      	b.n	8006ab6 <scastCommand+0x14a>
		srcP = ( uint8_t ) atol( ( char * ) pcParameterString1+1 );
 8006ab8:	3001      	adds	r0, #1
 8006aba:	f00f fcee 	bl	801649a <atol>
 8006abe:	b2c7      	uxtb	r7, r0
 8006ac0:	e786      	b.n	80069d0 <scastCommand+0x64>
		dstP = ( uint8_t ) atol( ( char * ) pcParameterString3+1 );
 8006ac2:	3001      	adds	r0, #1
 8006ac4:	f00f fce9 	bl	801649a <atol>
 8006ac8:	b2c3      	uxtb	r3, r0
 8006aca:	4698      	mov	r8, r3
 8006acc:	e79a      	b.n	8006a04 <scastCommand+0x98>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessage, par3, srcP, par1, dstP, par2, count, timeout);
 8006ace:	9404      	str	r4, [sp, #16]
 8006ad0:	9603      	str	r6, [sp, #12]
 8006ad2:	ab0b      	add	r3, sp, #44	; 0x2c
 8006ad4:	9302      	str	r3, [sp, #8]
 8006ad6:	4643      	mov	r3, r8
 8006ad8:	9301      	str	r3, [sp, #4]
 8006ada:	ab0e      	add	r3, sp, #56	; 0x38
 8006adc:	9300      	str	r3, [sp, #0]
 8006ade:	003b      	movs	r3, r7
 8006ae0:	aa08      	add	r2, sp, #32
 8006ae2:	4905      	ldr	r1, [pc, #20]	; (8006af8 <scastCommand+0x18c>)
 8006ae4:	9807      	ldr	r0, [sp, #28]
 8006ae6:	f00f fe39 	bl	801675c <siprintf>
 8006aea:	e7db      	b.n	8006aa4 <scastCommand+0x138>
 8006aec:	0801ae60 	.word	0x0801ae60
 8006af0:	0801ae68 	.word	0x0801ae68
 8006af4:	0801ae74 	.word	0x0801ae74
 8006af8:	0801ae84 	.word	0x0801ae84

08006afc <infoCommand>:
{
 8006afc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006afe:	b083      	sub	sp, #12
 8006b00:	1e04      	subs	r4, r0, #0
	configASSERT( pcWriteBuffer );
 8006b02:	d036      	beq.n	8006b72 <infoCommand+0x76>
	if (N > 1)
 8006b04:	4b27      	ldr	r3, [pc, #156]	; (8006ba4 <infoCommand+0xa8>)
 8006b06:	781b      	ldrb	r3, [r3, #0]
	BOS_Status result = BOS_OK; 
 8006b08:	2500      	movs	r5, #0
	if (N > 1)
 8006b0a:	2b01      	cmp	r3, #1
 8006b0c:	d833      	bhi.n	8006b76 <infoCommand+0x7a>
	sprintf( ( char * ) pcWriteBuffer, "\n\rNumber of modules: %d\n", N);
 8006b0e:	4b25      	ldr	r3, [pc, #148]	; (8006ba4 <infoCommand+0xa8>)
 8006b10:	781a      	ldrb	r2, [r3, #0]
 8006b12:	4925      	ldr	r1, [pc, #148]	; (8006ba8 <infoCommand+0xac>)
 8006b14:	0020      	movs	r0, r4
 8006b16:	f00f fe21 	bl	801675c <siprintf>
	writePxMutex(PcPort, (char*) pcWriteBuffer, strlen((char*) pcWriteBuffer), cmd50ms, HAL_MAX_DELAY);
 8006b1a:	0020      	movs	r0, r4
 8006b1c:	f7f9 fafc 	bl	8000118 <strlen>
 8006b20:	b282      	uxth	r2, r0
 8006b22:	4e22      	ldr	r6, [pc, #136]	; (8006bac <infoCommand+0xb0>)
 8006b24:	7830      	ldrb	r0, [r6, #0]
 8006b26:	2701      	movs	r7, #1
 8006b28:	427f      	negs	r7, r7
 8006b2a:	9700      	str	r7, [sp, #0]
 8006b2c:	2332      	movs	r3, #50	; 0x32
 8006b2e:	0021      	movs	r1, r4
 8006b30:	f007 f8d6 	bl	800dce0 <writePxMutex>
	sprintf( ( char * ) pcWriteBuffer, "\n\rArray topology:\n");
 8006b34:	2213      	movs	r2, #19
 8006b36:	491e      	ldr	r1, [pc, #120]	; (8006bb0 <infoCommand+0xb4>)
 8006b38:	0020      	movs	r0, r4
 8006b3a:	f00f fcfb 	bl	8016534 <memcpy>
	writePxMutex(PcPort, (char*) pcWriteBuffer, strlen((char*) pcWriteBuffer), cmd50ms, HAL_MAX_DELAY);
 8006b3e:	0020      	movs	r0, r4
 8006b40:	f7f9 faea 	bl	8000118 <strlen>
 8006b44:	b282      	uxth	r2, r0
 8006b46:	7830      	ldrb	r0, [r6, #0]
 8006b48:	9700      	str	r7, [sp, #0]
 8006b4a:	2332      	movs	r3, #50	; 0x32
 8006b4c:	0021      	movs	r1, r4
 8006b4e:	f007 f8c7 	bl	800dce0 <writePxMutex>
	DisplayTopology(PcPort);
 8006b52:	7830      	ldrb	r0, [r6, #0]
 8006b54:	f7fc ff7e 	bl	8003a54 <DisplayTopology>
	DisplayPortsDir(PcPort);
 8006b58:	7830      	ldrb	r0, [r6, #0]
 8006b5a:	f7fd f857 	bl	8003c0c <DisplayPortsDir>
	if (result == BOS_ERR_NoResponse) {
 8006b5e:	2d02      	cmp	r5, #2
 8006b60:	d00d      	beq.n	8006b7e <infoCommand+0x82>
	sprintf( ( char * ) pcWriteBuffer, " ");
 8006b62:	2202      	movs	r2, #2
 8006b64:	4913      	ldr	r1, [pc, #76]	; (8006bb4 <infoCommand+0xb8>)
 8006b66:	0020      	movs	r0, r4
 8006b68:	f00f fce4 	bl	8016534 <memcpy>
}
 8006b6c:	2000      	movs	r0, #0
 8006b6e:	b003      	add	sp, #12
 8006b70:	bdf0      	pop	{r4, r5, r6, r7, pc}
	configASSERT( pcWriteBuffer );
 8006b72:	b672      	cpsid	i
 8006b74:	e7fe      	b.n	8006b74 <infoCommand+0x78>
		result = ReadPortsDir();
 8006b76:	f7fd fb73 	bl	8004260 <ReadPortsDir>
 8006b7a:	0005      	movs	r5, r0
 8006b7c:	e7c7      	b.n	8006b0e <infoCommand+0x12>
		sprintf( ( char * ) pcWriteBuffer, "Could not read ports direction for some modules! Please try again\n\r");
 8006b7e:	2244      	movs	r2, #68	; 0x44
 8006b80:	490d      	ldr	r1, [pc, #52]	; (8006bb8 <infoCommand+0xbc>)
 8006b82:	0020      	movs	r0, r4
 8006b84:	f00f fcd6 	bl	8016534 <memcpy>
		writePxMutex(PcPort, (char*) pcWriteBuffer, strlen((char*) pcWriteBuffer), cmd50ms, HAL_MAX_DELAY);		
 8006b88:	0020      	movs	r0, r4
 8006b8a:	f7f9 fac5 	bl	8000118 <strlen>
 8006b8e:	b282      	uxth	r2, r0
 8006b90:	4b06      	ldr	r3, [pc, #24]	; (8006bac <infoCommand+0xb0>)
 8006b92:	7818      	ldrb	r0, [r3, #0]
 8006b94:	003b      	movs	r3, r7
 8006b96:	9700      	str	r7, [sp, #0]
 8006b98:	3333      	adds	r3, #51	; 0x33
 8006b9a:	0021      	movs	r1, r4
 8006b9c:	f007 f8a0 	bl	800dce0 <writePxMutex>
 8006ba0:	e7df      	b.n	8006b62 <infoCommand+0x66>
 8006ba2:	46c0      	nop			; (mov r8, r8)
 8006ba4:	2000001c 	.word	0x2000001c
 8006ba8:	0801af0c 	.word	0x0801af0c
 8006bac:	2000055f 	.word	0x2000055f
 8006bb0:	0801af28 	.word	0x0801af28
 8006bb4:	08019ca8 	.word	0x08019ca8
 8006bb8:	0801af3c 	.word	0x0801af3c

08006bbc <statusCommand>:
{
 8006bbc:	b510      	push	{r4, lr}
	configASSERT( pcWriteBuffer );
 8006bbe:	2800      	cmp	r0, #0
 8006bc0:	d004      	beq.n	8006bcc <statusCommand+0x10>
	DisplayModuleStatus(0);
 8006bc2:	2000      	movs	r0, #0
 8006bc4:	f7fd f898 	bl	8003cf8 <DisplayModuleStatus>
}
 8006bc8:	2000      	movs	r0, #0
 8006bca:	bd10      	pop	{r4, pc}
	configASSERT( pcWriteBuffer );
 8006bcc:	b672      	cpsid	i
 8006bce:	e7fe      	b.n	8006bce <statusCommand+0x12>

08006bd0 <groupCommand>:
{
 8006bd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006bd2:	46ce      	mov	lr, r9
 8006bd4:	4647      	mov	r7, r8
 8006bd6:	b580      	push	{r7, lr}
 8006bd8:	b08f      	sub	sp, #60	; 0x3c
 8006bda:	0004      	movs	r4, r0
 8006bdc:	0016      	movs	r6, r2
	char module[MaxLengthOfAlias+30] = {0}; int16_t modID = 0, type = 0; char alias[MaxLengthOfAlias+1] = {0};
 8006bde:	2500      	movs	r5, #0
 8006be0:	9504      	str	r5, [sp, #16]
 8006be2:	2223      	movs	r2, #35	; 0x23
 8006be4:	2100      	movs	r1, #0
 8006be6:	a805      	add	r0, sp, #20
 8006be8:	f00f fcad 	bl	8016546 <memset>
 8006bec:	9501      	str	r5, [sp, #4]
 8006bee:	2206      	movs	r2, #6
 8006bf0:	2100      	movs	r1, #0
 8006bf2:	a802      	add	r0, sp, #8
 8006bf4:	f00f fca7 	bl	8016546 <memset>
	configASSERT( pcWriteBuffer );
 8006bf8:	2c00      	cmp	r4, #0
 8006bfa:	d02c      	beq.n	8006c56 <groupCommand+0x86>
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 8006bfc:	4d56      	ldr	r5, [pc, #344]	; (8006d58 <groupCommand+0x188>)
 8006bfe:	002a      	movs	r2, r5
 8006c00:	2101      	movs	r1, #1
 8006c02:	0030      	movs	r0, r6
 8006c04:	f007 fac2 	bl	800e18c <FreeRTOS_CLIGetParameter>
 8006c08:	0001      	movs	r1, r0
	strncpy( alias, ( char * ) pcParameterString1, xParameterStringLength1);
 8006c0a:	682a      	ldr	r2, [r5, #0]
 8006c0c:	a801      	add	r0, sp, #4
 8006c0e:	f00f fdf9 	bl	8016804 <strncpy>
	for(uint8_t i=0 ; i<MaxNumOfGroups ; i++)
 8006c12:	4d52      	ldr	r5, [pc, #328]	; (8006d5c <groupCommand+0x18c>)
 8006c14:	002f      	movs	r7, r5
 8006c16:	3764      	adds	r7, #100	; 0x64
		if (!strcmp(alias, groupAlias[i]))	
 8006c18:	0029      	movs	r1, r5
 8006c1a:	a801      	add	r0, sp, #4
 8006c1c:	f7f9 fa72 	bl	8000104 <strcmp>
 8006c20:	2800      	cmp	r0, #0
 8006c22:	d01a      	beq.n	8006c5a <groupCommand+0x8a>
	for(uint8_t i=0 ; i<MaxNumOfGroups ; i++)
 8006c24:	350a      	adds	r5, #10
 8006c26:	42af      	cmp	r7, r5
 8006c28:	d1f6      	bne.n	8006c18 <groupCommand+0x48>
	type = 1;
 8006c2a:	2701      	movs	r7, #1
	count = 2;
 8006c2c:	4b4c      	ldr	r3, [pc, #304]	; (8006d60 <groupCommand+0x190>)
 8006c2e:	2202      	movs	r2, #2
 8006c30:	701a      	strb	r2, [r3, #0]
	strcpy( ( char * ) pcWriteBuffer, "Modules [");
 8006c32:	3208      	adds	r2, #8
 8006c34:	494b      	ldr	r1, [pc, #300]	; (8006d64 <groupCommand+0x194>)
 8006c36:	0020      	movs	r0, r4
 8006c38:	f00f fc7c 	bl	8016534 <memcpy>
	pcParameterString = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, count, &xParameterStringLength);
 8006c3c:	4a4a      	ldr	r2, [pc, #296]	; (8006d68 <groupCommand+0x198>)
 8006c3e:	2102      	movs	r1, #2
 8006c40:	0030      	movs	r0, r6
 8006c42:	f007 faa3 	bl	800e18c <FreeRTOS_CLIGetParameter>
 8006c46:	1e01      	subs	r1, r0, #0
 8006c48:	4b48      	ldr	r3, [pc, #288]	; (8006d6c <groupCommand+0x19c>)
 8006c4a:	6018      	str	r0, [r3, #0]
	while (pcParameterString != NULL)
 8006c4c:	d100      	bne.n	8006c50 <groupCommand+0x80>
 8006c4e:	e072      	b.n	8006d36 <groupCommand+0x166>
		strncpy(module, ( char * ) pcParameterString, xParameterStringLength); module[xParameterStringLength] = '\0';
 8006c50:	4b45      	ldr	r3, [pc, #276]	; (8006d68 <groupCommand+0x198>)
 8006c52:	4698      	mov	r8, r3
 8006c54:	e024      	b.n	8006ca0 <groupCommand+0xd0>
	configASSERT( pcWriteBuffer );
 8006c56:	b672      	cpsid	i
 8006c58:	e7fe      	b.n	8006c58 <groupCommand+0x88>
			type = 0; break;
 8006c5a:	2700      	movs	r7, #0
 8006c5c:	e7e6      	b.n	8006c2c <groupCommand+0x5c>
	else if (count == 2)
 8006c5e:	4b40      	ldr	r3, [pc, #256]	; (8006d60 <groupCommand+0x190>)
 8006c60:	781b      	ldrb	r3, [r3, #0]
 8006c62:	b25b      	sxtb	r3, r3
 8006c64:	2b02      	cmp	r3, #2
 8006c66:	d03f      	beq.n	8006ce8 <groupCommand+0x118>
	} else if (result == BOS_ERR_Keyword)
 8006c68:	2806      	cmp	r0, #6
 8006c6a:	d04d      	beq.n	8006d08 <groupCommand+0x138>
	else if (result == BOS_ERR_ExistingAlias)
 8006c6c:	2807      	cmp	r0, #7
 8006c6e:	d051      	beq.n	8006d14 <groupCommand+0x144>
	else if (result == BOS_ERR_ExistingCmd)
 8006c70:	2808      	cmp	r0, #8
 8006c72:	d15a      	bne.n	8006d2a <groupCommand+0x15a>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageCmd, alias);	
 8006c74:	aa01      	add	r2, sp, #4
 8006c76:	493e      	ldr	r1, [pc, #248]	; (8006d70 <groupCommand+0x1a0>)
 8006c78:	0020      	movs	r0, r4
 8006c7a:	f00f fd6f 	bl	801675c <siprintf>
 8006c7e:	e054      	b.n	8006d2a <groupCommand+0x15a>
		strcat( ( char * ) pcWriteBuffer, module);
 8006c80:	a904      	add	r1, sp, #16
 8006c82:	0020      	movs	r0, r4
 8006c84:	f00f fd8a 	bl	801679c <strcat>
		pcParameterString = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, ++count, &xParameterStringLength);	
 8006c88:	1c69      	adds	r1, r5, #1
 8006c8a:	b249      	sxtb	r1, r1
 8006c8c:	4b34      	ldr	r3, [pc, #208]	; (8006d60 <groupCommand+0x190>)
 8006c8e:	7019      	strb	r1, [r3, #0]
 8006c90:	4a35      	ldr	r2, [pc, #212]	; (8006d68 <groupCommand+0x198>)
 8006c92:	0030      	movs	r0, r6
 8006c94:	f007 fa7a 	bl	800e18c <FreeRTOS_CLIGetParameter>
 8006c98:	1e01      	subs	r1, r0, #0
 8006c9a:	4b34      	ldr	r3, [pc, #208]	; (8006d6c <groupCommand+0x19c>)
 8006c9c:	6018      	str	r0, [r3, #0]
	while (pcParameterString != NULL)
 8006c9e:	d04a      	beq.n	8006d36 <groupCommand+0x166>
		strncpy(module, ( char * ) pcParameterString, xParameterStringLength); module[xParameterStringLength] = '\0';
 8006ca0:	4643      	mov	r3, r8
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	4699      	mov	r9, r3
 8006ca6:	ad04      	add	r5, sp, #16
 8006ca8:	001a      	movs	r2, r3
 8006caa:	0028      	movs	r0, r5
 8006cac:	f00f fdaa 	bl	8016804 <strncpy>
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	464a      	mov	r2, r9
 8006cb4:	54ab      	strb	r3, [r5, r2]
		modID = GetID(module);
 8006cb6:	0028      	movs	r0, r5
 8006cb8:	f7fd f988 	bl	8003fcc <GetID>
		if (modID < 0)	break;
 8006cbc:	2800      	cmp	r0, #0
 8006cbe:	db2f      	blt.n	8006d20 <groupCommand+0x150>
		result = AddModuleToGroup(modID, alias);
 8006cc0:	b2c0      	uxtb	r0, r0
 8006cc2:	a901      	add	r1, sp, #4
 8006cc4:	f7fd fa4a 	bl	800415c <AddModuleToGroup>
		if (result != BOS_OK)	break;
 8006cc8:	2800      	cmp	r0, #0
 8006cca:	d1c8      	bne.n	8006c5e <groupCommand+0x8e>
		if (count > 2)
 8006ccc:	4b24      	ldr	r3, [pc, #144]	; (8006d60 <groupCommand+0x190>)
 8006cce:	2500      	movs	r5, #0
 8006cd0:	575d      	ldrsb	r5, [r3, r5]
 8006cd2:	2d02      	cmp	r5, #2
 8006cd4:	ddd4      	ble.n	8006c80 <groupCommand+0xb0>
			strcat( ( char * ) pcWriteBuffer, ", "); 
 8006cd6:	0020      	movs	r0, r4
 8006cd8:	f7f9 fa1e 	bl	8000118 <strlen>
 8006cdc:	1820      	adds	r0, r4, r0
 8006cde:	2203      	movs	r2, #3
 8006ce0:	4924      	ldr	r1, [pc, #144]	; (8006d74 <groupCommand+0x1a4>)
 8006ce2:	f00f fc27 	bl	8016534 <memcpy>
 8006ce6:	e7cb      	b.n	8006c80 <groupCommand+0xb0>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageNoModules, alias);
 8006ce8:	aa01      	add	r2, sp, #4
 8006cea:	4923      	ldr	r1, [pc, #140]	; (8006d78 <groupCommand+0x1a8>)
 8006cec:	0020      	movs	r0, r4
 8006cee:	f00f fd35 	bl	801675c <siprintf>
 8006cf2:	e01a      	b.n	8006d2a <groupCommand+0x15a>
		sprintf( module, ( char * ) pcMessageOKnew, alias); 
 8006cf4:	aa01      	add	r2, sp, #4
 8006cf6:	4921      	ldr	r1, [pc, #132]	; (8006d7c <groupCommand+0x1ac>)
 8006cf8:	a804      	add	r0, sp, #16
 8006cfa:	f00f fd2f 	bl	801675c <siprintf>
		strcat( ( char * ) pcWriteBuffer, module);
 8006cfe:	a904      	add	r1, sp, #16
 8006d00:	0020      	movs	r0, r4
 8006d02:	f00f fd4b 	bl	801679c <strcat>
 8006d06:	e010      	b.n	8006d2a <groupCommand+0x15a>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageKey, alias);
 8006d08:	aa01      	add	r2, sp, #4
 8006d0a:	491d      	ldr	r1, [pc, #116]	; (8006d80 <groupCommand+0x1b0>)
 8006d0c:	0020      	movs	r0, r4
 8006d0e:	f00f fd25 	bl	801675c <siprintf>
 8006d12:	e00a      	b.n	8006d2a <groupCommand+0x15a>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageAlias, alias);	
 8006d14:	aa01      	add	r2, sp, #4
 8006d16:	491b      	ldr	r1, [pc, #108]	; (8006d84 <groupCommand+0x1b4>)
 8006d18:	0020      	movs	r0, r4
 8006d1a:	f00f fd1f 	bl	801675c <siprintf>
 8006d1e:	e004      	b.n	8006d2a <groupCommand+0x15a>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrongModule, module);
 8006d20:	aa04      	add	r2, sp, #16
 8006d22:	4919      	ldr	r1, [pc, #100]	; (8006d88 <groupCommand+0x1b8>)
 8006d24:	0020      	movs	r0, r4
 8006d26:	f00f fd19 	bl	801675c <siprintf>
}
 8006d2a:	2000      	movs	r0, #0
 8006d2c:	b00f      	add	sp, #60	; 0x3c
 8006d2e:	bcc0      	pop	{r6, r7}
 8006d30:	46b9      	mov	r9, r7
 8006d32:	46b0      	mov	r8, r6
 8006d34:	bdf0      	pop	{r4, r5, r6, r7, pc}
	else if (count == 2)
 8006d36:	4b0a      	ldr	r3, [pc, #40]	; (8006d60 <groupCommand+0x190>)
 8006d38:	781b      	ldrb	r3, [r3, #0]
 8006d3a:	b25b      	sxtb	r3, r3
 8006d3c:	2b02      	cmp	r3, #2
 8006d3e:	d0d3      	beq.n	8006ce8 <groupCommand+0x118>
	else if (result == BOS_OK && type) {
 8006d40:	2f00      	cmp	r7, #0
 8006d42:	d1d7      	bne.n	8006cf4 <groupCommand+0x124>
		sprintf( module, ( char * ) pcMessageOKexist, alias);
 8006d44:	aa01      	add	r2, sp, #4
 8006d46:	4911      	ldr	r1, [pc, #68]	; (8006d8c <groupCommand+0x1bc>)
 8006d48:	a804      	add	r0, sp, #16
 8006d4a:	f00f fd07 	bl	801675c <siprintf>
		strcat( ( char * ) pcWriteBuffer, module);
 8006d4e:	a904      	add	r1, sp, #16
 8006d50:	0020      	movs	r0, r4
 8006d52:	f00f fd23 	bl	801679c <strcat>
 8006d56:	e7e8      	b.n	8006d2a <groupCommand+0x15a>
 8006d58:	20000d40 	.word	0x20000d40
 8006d5c:	200008f4 	.word	0x200008f4
 8006d60:	20000d06 	.word	0x20000d06
 8006d64:	0801af80 	.word	0x0801af80
 8006d68:	20000d34 	.word	0x20000d34
 8006d6c:	20000d08 	.word	0x20000d08
 8006d70:	0801b06c 	.word	0x0801b06c
 8006d74:	0801af8c 	.word	0x0801af8c
 8006d78:	0801af90 	.word	0x0801af90
 8006d7c:	0801afbc 	.word	0x0801afbc
 8006d80:	0801aff8 	.word	0x0801aff8
 8006d84:	0801b038 	.word	0x0801b038
 8006d88:	0801b0ac 	.word	0x0801b0ac
 8006d8c:	0801afd8 	.word	0x0801afd8

08006d90 <nameCommand>:
{
 8006d90:	b570      	push	{r4, r5, r6, lr}
 8006d92:	0004      	movs	r4, r0
 8006d94:	0010      	movs	r0, r2
	configASSERT( pcWriteBuffer );
 8006d96:	2c00      	cmp	r4, #0
 8006d98:	d01a      	beq.n	8006dd0 <nameCommand+0x40>
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 8006d9a:	4d1d      	ldr	r5, [pc, #116]	; (8006e10 <nameCommand+0x80>)
 8006d9c:	002a      	movs	r2, r5
 8006d9e:	2101      	movs	r1, #1
 8006da0:	f007 f9f4 	bl	800e18c <FreeRTOS_CLIGetParameter>
 8006da4:	0001      	movs	r1, r0
 8006da6:	4b1b      	ldr	r3, [pc, #108]	; (8006e14 <nameCommand+0x84>)
 8006da8:	6018      	str	r0, [r3, #0]
	if (xParameterStringLength1 > MaxLengthOfAlias) {
 8006daa:	682b      	ldr	r3, [r5, #0]
 8006dac:	2b09      	cmp	r3, #9
 8006dae:	dd01      	ble.n	8006db4 <nameCommand+0x24>
		pcParameterString1[MaxLengthOfAlias] = '\0';
 8006db0:	2300      	movs	r3, #0
 8006db2:	7243      	strb	r3, [r0, #9]
	result = NameModule(myID, (char*) pcParameterString1);
 8006db4:	4b18      	ldr	r3, [pc, #96]	; (8006e18 <nameCommand+0x88>)
 8006db6:	7818      	ldrb	r0, [r3, #0]
 8006db8:	f7fd f96c 	bl	8004094 <NameModule>
	if (result == BOS_OK)
 8006dbc:	2800      	cmp	r0, #0
 8006dbe:	d009      	beq.n	8006dd4 <nameCommand+0x44>
	else if (result == BOS_ERR_Keyword)
 8006dc0:	2806      	cmp	r0, #6
 8006dc2:	d010      	beq.n	8006de6 <nameCommand+0x56>
	else if (result == BOS_ERR_ExistingAlias)
 8006dc4:	2807      	cmp	r0, #7
 8006dc6:	d015      	beq.n	8006df4 <nameCommand+0x64>
	else if (result == BOS_ERR_ExistingCmd)
 8006dc8:	2808      	cmp	r0, #8
 8006dca:	d01a      	beq.n	8006e02 <nameCommand+0x72>
}
 8006dcc:	2000      	movs	r0, #0
 8006dce:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( pcWriteBuffer );
 8006dd0:	b672      	cpsid	i
 8006dd2:	e7fe      	b.n	8006dd2 <nameCommand+0x42>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK, myID, pcParameterString1);
 8006dd4:	4b0f      	ldr	r3, [pc, #60]	; (8006e14 <nameCommand+0x84>)
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	4a0f      	ldr	r2, [pc, #60]	; (8006e18 <nameCommand+0x88>)
 8006dda:	7812      	ldrb	r2, [r2, #0]
 8006ddc:	490f      	ldr	r1, [pc, #60]	; (8006e1c <nameCommand+0x8c>)
 8006dde:	0020      	movs	r0, r4
 8006de0:	f00f fcbc 	bl	801675c <siprintf>
 8006de4:	e7f2      	b.n	8006dcc <nameCommand+0x3c>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageKey, pcParameterString1);
 8006de6:	4b0b      	ldr	r3, [pc, #44]	; (8006e14 <nameCommand+0x84>)
 8006de8:	681a      	ldr	r2, [r3, #0]
 8006dea:	490d      	ldr	r1, [pc, #52]	; (8006e20 <nameCommand+0x90>)
 8006dec:	0020      	movs	r0, r4
 8006dee:	f00f fcb5 	bl	801675c <siprintf>
 8006df2:	e7eb      	b.n	8006dcc <nameCommand+0x3c>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageAlias, pcParameterString1);	
 8006df4:	4b07      	ldr	r3, [pc, #28]	; (8006e14 <nameCommand+0x84>)
 8006df6:	681a      	ldr	r2, [r3, #0]
 8006df8:	490a      	ldr	r1, [pc, #40]	; (8006e24 <nameCommand+0x94>)
 8006dfa:	0020      	movs	r0, r4
 8006dfc:	f00f fcae 	bl	801675c <siprintf>
 8006e00:	e7e4      	b.n	8006dcc <nameCommand+0x3c>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageCmd, pcParameterString1);	
 8006e02:	4b04      	ldr	r3, [pc, #16]	; (8006e14 <nameCommand+0x84>)
 8006e04:	681a      	ldr	r2, [r3, #0]
 8006e06:	4908      	ldr	r1, [pc, #32]	; (8006e28 <nameCommand+0x98>)
 8006e08:	0020      	movs	r0, r4
 8006e0a:	f00f fca7 	bl	801675c <siprintf>
 8006e0e:	e7dd      	b.n	8006dcc <nameCommand+0x3c>
 8006e10:	20000d3c 	.word	0x20000d3c
 8006e14:	20000d0c 	.word	0x20000d0c
 8006e18:	20000b04 	.word	0x20000b04
 8006e1c:	0801b0d0 	.word	0x0801b0d0
 8006e20:	0801aff8 	.word	0x0801aff8
 8006e24:	0801b038 	.word	0x0801b038
 8006e28:	0801b06c 	.word	0x0801b06c

08006e2c <bootloaderUpdateCommand>:
{
 8006e2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006e2e:	46c6      	mov	lr, r8
 8006e30:	b500      	push	{lr}
 8006e32:	b082      	sub	sp, #8
 8006e34:	0004      	movs	r4, r0
 8006e36:	0017      	movs	r7, r2
 8006e38:	2600      	movs	r6, #0
 8006e3a:	2500      	movs	r5, #0
	configASSERT( pcWriteBuffer );
 8006e3c:	2800      	cmp	r0, #0
 8006e3e:	d04f      	beq.n	8006ee0 <bootloaderUpdateCommand+0xb4>
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 8006e40:	4a4d      	ldr	r2, [pc, #308]	; (8006f78 <bootloaderUpdateCommand+0x14c>)
 8006e42:	2101      	movs	r1, #1
 8006e44:	0038      	movs	r0, r7
 8006e46:	f007 f9a1 	bl	800e18c <FreeRTOS_CLIGetParameter>
	if (pcParameterString1 == NULL)
 8006e4a:	2800      	cmp	r0, #0
 8006e4c:	d04a      	beq.n	8006ee4 <bootloaderUpdateCommand+0xb8>
		if (!strncmp((const char *)pcParameterString1, "via", xParameterStringLength1)) 
 8006e4e:	4b4a      	ldr	r3, [pc, #296]	; (8006f78 <bootloaderUpdateCommand+0x14c>)
 8006e50:	681a      	ldr	r2, [r3, #0]
 8006e52:	494a      	ldr	r1, [pc, #296]	; (8006f7c <bootloaderUpdateCommand+0x150>)
 8006e54:	f00f fcc5 	bl	80167e2 <strncmp>
 8006e58:	2800      	cmp	r0, #0
 8006e5a:	d137      	bne.n	8006ecc <bootloaderUpdateCommand+0xa0>
			pcParameterString2 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 2, &xParameterStringLength2);
 8006e5c:	4a48      	ldr	r2, [pc, #288]	; (8006f80 <bootloaderUpdateCommand+0x154>)
 8006e5e:	2102      	movs	r1, #2
 8006e60:	0038      	movs	r0, r7
 8006e62:	f007 f993 	bl	800e18c <FreeRTOS_CLIGetParameter>
 8006e66:	4b47      	ldr	r3, [pc, #284]	; (8006f84 <bootloaderUpdateCommand+0x158>)
 8006e68:	4698      	mov	r8, r3
 8006e6a:	6018      	str	r0, [r3, #0]
			pcParameterString3 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 3, &xParameterStringLength3);
 8006e6c:	4a46      	ldr	r2, [pc, #280]	; (8006f88 <bootloaderUpdateCommand+0x15c>)
 8006e6e:	2103      	movs	r1, #3
 8006e70:	0038      	movs	r0, r7
 8006e72:	f007 f98b 	bl	800e18c <FreeRTOS_CLIGetParameter>
 8006e76:	4b45      	ldr	r3, [pc, #276]	; (8006f8c <bootloaderUpdateCommand+0x160>)
 8006e78:	6018      	str	r0, [r3, #0]
			if (pcParameterString2[0] == '#') {
 8006e7a:	4643      	mov	r3, r8
 8006e7c:	6818      	ldr	r0, [r3, #0]
 8006e7e:	2300      	movs	r3, #0
 8006e80:	56c3      	ldrsb	r3, [r0, r3]
				result = BOS_ERR_WrongValue;				
 8006e82:	2768      	movs	r7, #104	; 0x68
			if (pcParameterString2[0] == '#') {
 8006e84:	2b23      	cmp	r3, #35	; 0x23
 8006e86:	d057      	beq.n	8006f38 <bootloaderUpdateCommand+0x10c>
			if (pcParameterString3[0] == 'p') {
 8006e88:	4b40      	ldr	r3, [pc, #256]	; (8006f8c <bootloaderUpdateCommand+0x160>)
 8006e8a:	6818      	ldr	r0, [r3, #0]
 8006e8c:	2300      	movs	r3, #0
 8006e8e:	56c3      	ldrsb	r3, [r0, r3]
 8006e90:	2b70      	cmp	r3, #112	; 0x70
 8006e92:	d057      	beq.n	8006f44 <bootloaderUpdateCommand+0x118>
				result = BOS_ERR_WrongValue;		
 8006e94:	2768      	movs	r7, #104	; 0x68
			if (module != myID)
 8006e96:	4b3e      	ldr	r3, [pc, #248]	; (8006f90 <bootloaderUpdateCommand+0x164>)
 8006e98:	781b      	ldrb	r3, [r3, #0]
 8006e9a:	42b3      	cmp	r3, r6
 8006e9c:	d057      	beq.n	8006f4e <bootloaderUpdateCommand+0x122>
				BOS.response = BOS_RESPONSE_NONE;							
 8006e9e:	4b3d      	ldr	r3, [pc, #244]	; (8006f94 <bootloaderUpdateCommand+0x168>)
 8006ea0:	2200      	movs	r2, #0
 8006ea2:	719a      	strb	r2, [r3, #6]
				messageParams[0] = port; SendMessageToModule(module, CODE_UPDATE_VIA_PORT, 1);
 8006ea4:	4b3c      	ldr	r3, [pc, #240]	; (8006f98 <bootloaderUpdateCommand+0x16c>)
 8006ea6:	701d      	strb	r5, [r3, #0]
 8006ea8:	3201      	adds	r2, #1
 8006eaa:	211a      	movs	r1, #26
 8006eac:	0030      	movs	r0, r6
 8006eae:	f002 f817 	bl	8008ee0 <SendMessageToModule>
				osDelay(100);			
 8006eb2:	2064      	movs	r0, #100	; 0x64
 8006eb4:	f007 f843 	bl	800df3e <osDelay>
				remoteBootloaderUpdate(myID, module, PcPort, port);	
 8006eb8:	4b38      	ldr	r3, [pc, #224]	; (8006f9c <bootloaderUpdateCommand+0x170>)
 8006eba:	781a      	ldrb	r2, [r3, #0]
 8006ebc:	4b34      	ldr	r3, [pc, #208]	; (8006f90 <bootloaderUpdateCommand+0x164>)
 8006ebe:	7818      	ldrb	r0, [r3, #0]
 8006ec0:	002b      	movs	r3, r5
 8006ec2:	0031      	movs	r1, r6
 8006ec4:	f7fc fd44 	bl	8003950 <remoteBootloaderUpdate>
	if (result == BOS_ERR_WrongValue) {
 8006ec8:	2f68      	cmp	r7, #104	; 0x68
 8006eca:	d104      	bne.n	8006ed6 <bootloaderUpdateCommand+0xaa>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrongValue );			
 8006ecc:	220f      	movs	r2, #15
 8006ece:	4934      	ldr	r1, [pc, #208]	; (8006fa0 <bootloaderUpdateCommand+0x174>)
 8006ed0:	0020      	movs	r0, r4
 8006ed2:	f00f fb2f 	bl	8016534 <memcpy>
}
 8006ed6:	2000      	movs	r0, #0
 8006ed8:	b002      	add	sp, #8
 8006eda:	bc80      	pop	{r7}
 8006edc:	46b8      	mov	r8, r7
 8006ede:	bdf0      	pop	{r4, r5, r6, r7, pc}
	configASSERT( pcWriteBuffer );
 8006ee0:	b672      	cpsid	i
 8006ee2:	e7fe      	b.n	8006ee2 <bootloaderUpdateCommand+0xb6>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessage, myID);
 8006ee4:	4b2a      	ldr	r3, [pc, #168]	; (8006f90 <bootloaderUpdateCommand+0x164>)
 8006ee6:	781a      	ldrb	r2, [r3, #0]
 8006ee8:	492e      	ldr	r1, [pc, #184]	; (8006fa4 <bootloaderUpdateCommand+0x178>)
 8006eea:	0020      	movs	r0, r4
 8006eec:	f00f fc36 	bl	801675c <siprintf>
		strcat( ( char * ) pcWriteBuffer, ( char * ) pcBootloaderUpdateMessage );
 8006ef0:	4b2d      	ldr	r3, [pc, #180]	; (8006fa8 <bootloaderUpdateCommand+0x17c>)
 8006ef2:	6819      	ldr	r1, [r3, #0]
 8006ef4:	0020      	movs	r0, r4
 8006ef6:	f00f fc51 	bl	801679c <strcat>
		writePxMutex(PcPort, (char*) pcWriteBuffer, strlen((char*) pcWriteBuffer), cmd50ms, HAL_MAX_DELAY);
 8006efa:	0020      	movs	r0, r4
 8006efc:	f7f9 f90c 	bl	8000118 <strlen>
 8006f00:	b282      	uxth	r2, r0
 8006f02:	4b26      	ldr	r3, [pc, #152]	; (8006f9c <bootloaderUpdateCommand+0x170>)
 8006f04:	7818      	ldrb	r0, [r3, #0]
 8006f06:	2301      	movs	r3, #1
 8006f08:	425b      	negs	r3, r3
 8006f0a:	9300      	str	r3, [sp, #0]
 8006f0c:	3333      	adds	r3, #51	; 0x33
 8006f0e:	0021      	movs	r1, r4
 8006f10:	f006 fee6 	bl	800dce0 <writePxMutex>
		*((unsigned long *)0x20007FF0) = 0xDEADBEEF;   
 8006f14:	4b25      	ldr	r3, [pc, #148]	; (8006fac <bootloaderUpdateCommand+0x180>)
 8006f16:	4a26      	ldr	r2, [pc, #152]	; (8006fb0 <bootloaderUpdateCommand+0x184>)
 8006f18:	601a      	str	r2, [r3, #0]
		indMode = IND_PING;
 8006f1a:	4b26      	ldr	r3, [pc, #152]	; (8006fb4 <bootloaderUpdateCommand+0x188>)
 8006f1c:	2201      	movs	r2, #1
 8006f1e:	701a      	strb	r2, [r3, #0]
		osDelay(10);
 8006f20:	200a      	movs	r0, #10
 8006f22:	f007 f80c 	bl	800df3e <osDelay>
  __ASM volatile ("dsb 0xF":::"memory");
 8006f26:	f3bf 8f4f 	dsb	sy
 8006f2a:	4b23      	ldr	r3, [pc, #140]	; (8006fb8 <bootloaderUpdateCommand+0x18c>)
 8006f2c:	4a23      	ldr	r2, [pc, #140]	; (8006fbc <bootloaderUpdateCommand+0x190>)
 8006f2e:	60da      	str	r2, [r3, #12]
 8006f30:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 8006f34:	46c0      	nop			; (mov r8, r8)
 8006f36:	e7fd      	b.n	8006f34 <bootloaderUpdateCommand+0x108>
				module = ( uint8_t ) atol( ( char * ) pcParameterString2+1 );
 8006f38:	3001      	adds	r0, #1
 8006f3a:	f00f faae 	bl	801649a <atol>
 8006f3e:	b2c6      	uxtb	r6, r0
	uint8_t module, port; BOS_Status result = BOS_OK;
 8006f40:	2700      	movs	r7, #0
 8006f42:	e7a1      	b.n	8006e88 <bootloaderUpdateCommand+0x5c>
				port = ( uint8_t ) atol( ( char * ) pcParameterString3+1 );
 8006f44:	3001      	adds	r0, #1
 8006f46:	f00f faa8 	bl	801649a <atol>
 8006f4a:	b2c5      	uxtb	r5, r0
 8006f4c:	e7a3      	b.n	8006e96 <bootloaderUpdateCommand+0x6a>
				SendMessageFromPort(port, 0, 0, CODE_UPDATE, 0);
 8006f4e:	2300      	movs	r3, #0
 8006f50:	9300      	str	r3, [sp, #0]
 8006f52:	3319      	adds	r3, #25
 8006f54:	2200      	movs	r2, #0
 8006f56:	2100      	movs	r1, #0
 8006f58:	0028      	movs	r0, r5
 8006f5a:	f001 fd97 	bl	8008a8c <SendMessageFromPort>
				osDelay(100);
 8006f5e:	2064      	movs	r0, #100	; 0x64
 8006f60:	f006 ffed 	bl	800df3e <osDelay>
				remoteBootloaderUpdate(myID, myID, PcPort, port);							
 8006f64:	4b0a      	ldr	r3, [pc, #40]	; (8006f90 <bootloaderUpdateCommand+0x164>)
 8006f66:	7818      	ldrb	r0, [r3, #0]
 8006f68:	4b0c      	ldr	r3, [pc, #48]	; (8006f9c <bootloaderUpdateCommand+0x170>)
 8006f6a:	781a      	ldrb	r2, [r3, #0]
 8006f6c:	002b      	movs	r3, r5
 8006f6e:	0001      	movs	r1, r0
 8006f70:	f7fc fcee 	bl	8003950 <remoteBootloaderUpdate>
 8006f74:	e7a8      	b.n	8006ec8 <bootloaderUpdateCommand+0x9c>
 8006f76:	46c0      	nop			; (mov r8, r8)
 8006f78:	20000d38 	.word	0x20000d38
 8006f7c:	0801b108 	.word	0x0801b108
 8006f80:	20000d44 	.word	0x20000d44
 8006f84:	20000d1c 	.word	0x20000d1c
 8006f88:	20000d48 	.word	0x20000d48
 8006f8c:	20000d24 	.word	0x20000d24
 8006f90:	20000b04 	.word	0x20000b04
 8006f94:	20006368 	.word	0x20006368
 8006f98:	200009d0 	.word	0x200009d0
 8006f9c:	2000055f 	.word	0x2000055f
 8006fa0:	0801ab94 	.word	0x0801ab94
 8006fa4:	0801b0e8 	.word	0x0801b0e8
 8006fa8:	20000074 	.word	0x20000074
 8006fac:	20007ff0 	.word	0x20007ff0
 8006fb0:	deadbeef 	.word	0xdeadbeef
 8006fb4:	2000098a 	.word	0x2000098a
 8006fb8:	e000ed00 	.word	0xe000ed00
 8006fbc:	05fa0004 	.word	0x05fa0004

08006fc0 <pingCommand>:
{
 8006fc0:	b570      	push	{r4, r5, r6, lr}
	configASSERT( pcWriteBuffer );
 8006fc2:	2800      	cmp	r0, #0
 8006fc4:	d01e      	beq.n	8007004 <pingCommand+0x44>
	if (!moduleAlias[myID][0])
 8006fc6:	4b15      	ldr	r3, [pc, #84]	; (800701c <pingCommand+0x5c>)
 8006fc8:	781a      	ldrb	r2, [r3, #0]
 8006fca:	0093      	lsls	r3, r2, #2
 8006fcc:	189b      	adds	r3, r3, r2
 8006fce:	005b      	lsls	r3, r3, #1
 8006fd0:	4913      	ldr	r1, [pc, #76]	; (8007020 <pingCommand+0x60>)
 8006fd2:	5c5b      	ldrb	r3, [r3, r1]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d117      	bne.n	8007008 <pingCommand+0x48>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessage1, myID);
 8006fd8:	4912      	ldr	r1, [pc, #72]	; (8007024 <pingCommand+0x64>)
 8006fda:	f00f fbbf 	bl	801675c <siprintf>
	RTOS_IND_blink(200);	
 8006fde:	2580      	movs	r5, #128	; 0x80
 8006fe0:	012d      	lsls	r5, r5, #4
 8006fe2:	2490      	movs	r4, #144	; 0x90
 8006fe4:	05e4      	lsls	r4, r4, #23
 8006fe6:	2201      	movs	r2, #1
 8006fe8:	0029      	movs	r1, r5
 8006fea:	0020      	movs	r0, r4
 8006fec:	f00a f908 	bl	8011200 <HAL_GPIO_WritePin>
 8006ff0:	20c8      	movs	r0, #200	; 0xc8
 8006ff2:	f006 ffa4 	bl	800df3e <osDelay>
 8006ff6:	2200      	movs	r2, #0
 8006ff8:	0029      	movs	r1, r5
 8006ffa:	0020      	movs	r0, r4
 8006ffc:	f00a f900 	bl	8011200 <HAL_GPIO_WritePin>
}
 8007000:	2000      	movs	r0, #0
 8007002:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( pcWriteBuffer );
 8007004:	b672      	cpsid	i
 8007006:	e7fe      	b.n	8007006 <pingCommand+0x46>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessage2, myID, moduleAlias[myID]);
 8007008:	0093      	lsls	r3, r2, #2
 800700a:	189b      	adds	r3, r3, r2
 800700c:	005b      	lsls	r3, r3, #1
 800700e:	4904      	ldr	r1, [pc, #16]	; (8007020 <pingCommand+0x60>)
 8007010:	185b      	adds	r3, r3, r1
 8007012:	4905      	ldr	r1, [pc, #20]	; (8007028 <pingCommand+0x68>)
 8007014:	f00f fba2 	bl	801675c <siprintf>
 8007018:	e7e1      	b.n	8006fde <pingCommand+0x1e>
 800701a:	46c0      	nop			; (mov r8, r8)
 800701c:	20000b04 	.word	0x20000b04
 8007020:	20000a00 	.word	0x20000a00
 8007024:	0801b10c 	.word	0x0801b10c
 8007028:	0801b120 	.word	0x0801b120

0800702c <prvRunTimeStatsCommand>:
{
 800702c:	b510      	push	{r4, lr}
 800702e:	1e04      	subs	r4, r0, #0
	configASSERT( pcWriteBuffer );
 8007030:	d009      	beq.n	8007046 <prvRunTimeStatsCommand+0x1a>
	strcpy( ( char * ) pcWriteBuffer, ( char * ) pcStatsTableHeader );
 8007032:	2251      	movs	r2, #81	; 0x51
 8007034:	4905      	ldr	r1, [pc, #20]	; (800704c <prvRunTimeStatsCommand+0x20>)
 8007036:	f00f fa7d 	bl	8016534 <memcpy>
	vTaskGetRunTimeStats( ((char*) pcWriteBuffer) + strlen( ( char * ) pcStatsTableHeader ) );
 800703a:	0020      	movs	r0, r4
 800703c:	3050      	adds	r0, #80	; 0x50
 800703e:	f008 fb37 	bl	800f6b0 <vTaskGetRunTimeStats>
}
 8007042:	2000      	movs	r0, #0
 8007044:	bd10      	pop	{r4, pc}
	configASSERT( pcWriteBuffer );
 8007046:	b672      	cpsid	i
 8007048:	e7fe      	b.n	8007048 <prvRunTimeStatsCommand+0x1c>
 800704a:	46c0      	nop			; (mov r8, r8)
 800704c:	0801b13c 	.word	0x0801b13c

08007050 <prvTaskStatsCommand>:
{
 8007050:	b510      	push	{r4, lr}
 8007052:	1e04      	subs	r4, r0, #0
	configASSERT( pcWriteBuffer );
 8007054:	d009      	beq.n	800706a <prvTaskStatsCommand+0x1a>
	strcpy( ( char * ) pcWriteBuffer, ( char * ) pcTaskTableHeader );
 8007056:	225b      	movs	r2, #91	; 0x5b
 8007058:	4905      	ldr	r1, [pc, #20]	; (8007070 <prvTaskStatsCommand+0x20>)
 800705a:	f00f fa6b 	bl	8016534 <memcpy>
	vTaskList( ((char*) pcWriteBuffer) + strlen( ( char * ) pcTaskTableHeader ) );
 800705e:	0020      	movs	r0, r4
 8007060:	305a      	adds	r0, #90	; 0x5a
 8007062:	f008 fab7 	bl	800f5d4 <vTaskList>
}
 8007066:	2000      	movs	r0, #0
 8007068:	bd10      	pop	{r4, pc}
	configASSERT( pcWriteBuffer );
 800706a:	b672      	cpsid	i
 800706c:	e7fe      	b.n	800706c <prvTaskStatsCommand+0x1c>
 800706e:	46c0      	nop			; (mov r8, r8)
 8007070:	0801b190 	.word	0x0801b190

08007074 <resetCommand>:
	configASSERT( pcWriteBuffer );
 8007074:	2800      	cmp	r0, #0
 8007076:	d008      	beq.n	800708a <resetCommand+0x16>
  __ASM volatile ("dsb 0xF":::"memory");
 8007078:	f3bf 8f4f 	dsb	sy
 800707c:	4b04      	ldr	r3, [pc, #16]	; (8007090 <resetCommand+0x1c>)
 800707e:	4a05      	ldr	r2, [pc, #20]	; (8007094 <resetCommand+0x20>)
 8007080:	60da      	str	r2, [r3, #12]
 8007082:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 8007086:	46c0      	nop			; (mov r8, r8)
 8007088:	e7fd      	b.n	8007086 <resetCommand+0x12>
 800708a:	b672      	cpsid	i
 800708c:	e7fe      	b.n	800708c <resetCommand+0x18>
 800708e:	46c0      	nop			; (mov r8, r8)
 8007090:	e000ed00 	.word	0xe000ed00
 8007094:	05fa0004 	.word	0x05fa0004

08007098 <RegisterUserCLICommands>:
}
 8007098:	4770      	bx	lr
	...

0800709c <vRegisterCLICommands>:
{
 800709c:	b510      	push	{r4, lr}
	FreeRTOS_CLIRegisterCommand( &prvTaskStatsCommandDefinition );
 800709e:	482f      	ldr	r0, [pc, #188]	; (800715c <vRegisterCLICommands+0xc0>)
 80070a0:	f006 ffca 	bl	800e038 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &prvRunTimeStatsCommandDefinition );	
 80070a4:	482e      	ldr	r0, [pc, #184]	; (8007160 <vRegisterCLICommands+0xc4>)
 80070a6:	f006 ffc7 	bl	800e038 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &pingCommandDefinition );
 80070aa:	482e      	ldr	r0, [pc, #184]	; (8007164 <vRegisterCLICommands+0xc8>)
 80070ac:	f006 ffc4 	bl	800e038 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &bootloaderUpdateCommandDefinition );
 80070b0:	482d      	ldr	r0, [pc, #180]	; (8007168 <vRegisterCLICommands+0xcc>)
 80070b2:	f006 ffc1 	bl	800e038 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &exploreCommandDefinition );
 80070b6:	482d      	ldr	r0, [pc, #180]	; (800716c <vRegisterCLICommands+0xd0>)
 80070b8:	f006 ffbe 	bl	800e038 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &resetCommandDefinition );
 80070bc:	482c      	ldr	r0, [pc, #176]	; (8007170 <vRegisterCLICommands+0xd4>)
 80070be:	f006 ffbb 	bl	800e038 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &nameCommandDefinition );
 80070c2:	482c      	ldr	r0, [pc, #176]	; (8007174 <vRegisterCLICommands+0xd8>)
 80070c4:	f006 ffb8 	bl	800e038 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &groupCommandDefinition );
 80070c8:	482b      	ldr	r0, [pc, #172]	; (8007178 <vRegisterCLICommands+0xdc>)
 80070ca:	f006 ffb5 	bl	800e038 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &statusCommandDefinition );
 80070ce:	482b      	ldr	r0, [pc, #172]	; (800717c <vRegisterCLICommands+0xe0>)
 80070d0:	f006 ffb2 	bl	800e038 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &infoCommandDefinition );
 80070d4:	482a      	ldr	r0, [pc, #168]	; (8007180 <vRegisterCLICommands+0xe4>)
 80070d6:	f006 ffaf 	bl	800e038 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &scastCommandDefinition );
 80070da:	482a      	ldr	r0, [pc, #168]	; (8007184 <vRegisterCLICommands+0xe8>)
 80070dc:	f006 ffac 	bl	800e038 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &addbuttonCommandDefinition );
 80070e0:	4829      	ldr	r0, [pc, #164]	; (8007188 <vRegisterCLICommands+0xec>)
 80070e2:	f006 ffa9 	bl	800e038 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &removebuttonCommandDefinition );
 80070e6:	4829      	ldr	r0, [pc, #164]	; (800718c <vRegisterCLICommands+0xf0>)
 80070e8:	f006 ffa6 	bl	800e038 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &setCommandDefinition );
 80070ec:	4828      	ldr	r0, [pc, #160]	; (8007190 <vRegisterCLICommands+0xf4>)
 80070ee:	f006 ffa3 	bl	800e038 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &getCommandDefinition );
 80070f2:	4828      	ldr	r0, [pc, #160]	; (8007194 <vRegisterCLICommands+0xf8>)
 80070f4:	f006 ffa0 	bl	800e038 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &defaultCommandDefinition );
 80070f8:	4827      	ldr	r0, [pc, #156]	; (8007198 <vRegisterCLICommands+0xfc>)
 80070fa:	f006 ff9d 	bl	800e038 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &timeCommandDefinition );
 80070fe:	4827      	ldr	r0, [pc, #156]	; (800719c <vRegisterCLICommands+0x100>)
 8007100:	f006 ff9a 	bl	800e038 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &dateCommandDefinition );
 8007104:	4826      	ldr	r0, [pc, #152]	; (80071a0 <vRegisterCLICommands+0x104>)
 8007106:	f006 ff97 	bl	800e038 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &setBaudrateCommandDefinition);
 800710a:	4826      	ldr	r0, [pc, #152]	; (80071a4 <vRegisterCLICommands+0x108>)
 800710c:	f006 ff94 	bl	800e038 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &uuidCommandDefinition);
 8007110:	4825      	ldr	r0, [pc, #148]	; (80071a8 <vRegisterCLICommands+0x10c>)
 8007112:	f006 ff91 	bl	800e038 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &idcodeCommandDefinition);
 8007116:	4825      	ldr	r0, [pc, #148]	; (80071ac <vRegisterCLICommands+0x110>)
 8007118:	f006 ff8e 	bl	800e038 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &flashsizeCommandDefinition);
 800711c:	4824      	ldr	r0, [pc, #144]	; (80071b0 <vRegisterCLICommands+0x114>)
 800711e:	f006 ff8b 	bl	800e038 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &snipCommandDefinition);
 8007122:	4824      	ldr	r0, [pc, #144]	; (80071b4 <vRegisterCLICommands+0x118>)
 8007124:	f006 ff88 	bl	800e038 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &actSnipCommandDefinition);
 8007128:	4823      	ldr	r0, [pc, #140]	; (80071b8 <vRegisterCLICommands+0x11c>)
 800712a:	f006 ff85 	bl	800e038 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &pauseSnipCommandDefinition);
 800712e:	4823      	ldr	r0, [pc, #140]	; (80071bc <vRegisterCLICommands+0x120>)
 8007130:	f006 ff82 	bl	800e038 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &delSnipCommandDefinition);
 8007134:	4822      	ldr	r0, [pc, #136]	; (80071c0 <vRegisterCLICommands+0x124>)
 8007136:	f006 ff7f 	bl	800e038 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &bridgeCommandDefinition);
 800713a:	4822      	ldr	r0, [pc, #136]	; (80071c4 <vRegisterCLICommands+0x128>)
 800713c:	f006 ff7c 	bl	800e038 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &unbridgeCommandDefinition);
 8007140:	4821      	ldr	r0, [pc, #132]	; (80071c8 <vRegisterCLICommands+0x12c>)
 8007142:	f006 ff79 	bl	800e038 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &testportCommandDefinition);
 8007146:	4821      	ldr	r0, [pc, #132]	; (80071cc <vRegisterCLICommands+0x130>)
 8007148:	f006 ff76 	bl	800e038 <FreeRTOS_CLIRegisterCommand>
	numOfBosCommands = 29;
 800714c:	4b20      	ldr	r3, [pc, #128]	; (80071d0 <vRegisterCLICommands+0x134>)
 800714e:	221d      	movs	r2, #29
 8007150:	701a      	strb	r2, [r3, #0]
	RegisterModuleCLICommands();
 8007152:	f004 fa23 	bl	800b59c <RegisterModuleCLICommands>
	RegisterUserCLICommands();
 8007156:	f7ff ff9f 	bl	8007098 <RegisterUserCLICommands>
}
 800715a:	bd10      	pop	{r4, pc}
 800715c:	0801c074 	.word	0x0801c074
 8007160:	0801c064 	.word	0x0801c064
 8007164:	0801c054 	.word	0x0801c054
 8007168:	0801bf70 	.word	0x0801bf70
 800716c:	0801bfc0 	.word	0x0801bfc0
 8007170:	0801c094 	.word	0x0801c094
 8007174:	0801c034 	.word	0x0801c034
 8007178:	0801bff0 	.word	0x0801bff0
 800717c:	0801c0e4 	.word	0x0801c0e4
 8007180:	0801c010 	.word	0x0801c010
 8007184:	0801c0a4 	.word	0x0801c0a4
 8007188:	0801bf60 	.word	0x0801bf60
 800718c:	0801c084 	.word	0x0801c084
 8007190:	0801c0c4 	.word	0x0801c0c4
 8007194:	0801bfe0 	.word	0x0801bfe0
 8007198:	0801bfa0 	.word	0x0801bfa0
 800719c:	0801c104 	.word	0x0801c104
 80071a0:	0801bf90 	.word	0x0801bf90
 80071a4:	0801c0b4 	.word	0x0801c0b4
 80071a8:	0801c124 	.word	0x0801c124
 80071ac:	0801c000 	.word	0x0801c000
 80071b0:	0801bfd0 	.word	0x0801bfd0
 80071b4:	0801c0d4 	.word	0x0801c0d4
 80071b8:	0801bf50 	.word	0x0801bf50
 80071bc:	0801c044 	.word	0x0801c044
 80071c0:	0801bfb0 	.word	0x0801bfb0
 80071c4:	0801bf80 	.word	0x0801bf80
 80071c8:	0801c114 	.word	0x0801c114
 80071cc:	0801c0f4 	.word	0x0801c0f4
 80071d0:	200062ec 	.word	0x200062ec

080071d4 <StopMsgDMA>:


/* --- Stop a messaging DMA --- 
*/
void StopMsgDMA(uint8_t port)
{
 80071d4:	b570      	push	{r4, r5, r6, lr}
	DMA_HandleTypeDef *hDMA;
	
	/* Select DMA struct */
	hDMA = &msgRxDMA[port-1];
 80071d6:	1e45      	subs	r5, r0, #1
 80071d8:	00ec      	lsls	r4, r5, #3
 80071da:	1b60      	subs	r0, r4, r5
 80071dc:	00c0      	lsls	r0, r0, #3
 80071de:	4e05      	ldr	r6, [pc, #20]	; (80071f4 <StopMsgDMA+0x20>)
 80071e0:	1980      	adds	r0, r0, r6
	
	HAL_DMA_Abort(hDMA);
 80071e2:	f009 f94c 	bl	801047e <HAL_DMA_Abort>
	hDMA->Instance->CNDTR = 0;
 80071e6:	1b64      	subs	r4, r4, r5
 80071e8:	00e4      	lsls	r4, r4, #3
 80071ea:	59a3      	ldr	r3, [r4, r6]
 80071ec:	2200      	movs	r2, #0
 80071ee:	605a      	str	r2, [r3, #4]
}
 80071f0:	bd70      	pop	{r4, r5, r6, pc}
 80071f2:	46c0      	nop			; (mov r8, r8)
 80071f4:	2000116c 	.word	0x2000116c

080071f8 <StopStreamDMA>:
/*-----------------------------------------------------------*/

/* --- Stop a streaming DMA --- 
*/
void StopStreamDMA(uint8_t port)
{
 80071f8:	b570      	push	{r4, r5, r6, lr}
	DMA_HandleTypeDef *hDMA;
	
	/* Select DMA struct */
	hDMA = &streamDMA[port-1];
 80071fa:	1e44      	subs	r4, r0, #1
 80071fc:	00e5      	lsls	r5, r4, #3
 80071fe:	1b28      	subs	r0, r5, r4
 8007200:	00c0      	lsls	r0, r0, #3
 8007202:	4e07      	ldr	r6, [pc, #28]	; (8007220 <StopStreamDMA+0x28>)
 8007204:	1980      	adds	r0, r0, r6
	
	HAL_DMA_Abort(hDMA);
 8007206:	f009 f93a 	bl	801047e <HAL_DMA_Abort>
	hDMA->Instance->CNDTR = 0;
 800720a:	1b2d      	subs	r5, r5, r4
 800720c:	00ed      	lsls	r5, r5, #3
 800720e:	59aa      	ldr	r2, [r5, r6]
 8007210:	2300      	movs	r3, #0
 8007212:	6053      	str	r3, [r2, #4]
	dmaStreamCount[port-1] = 0;
 8007214:	00a4      	lsls	r4, r4, #2
 8007216:	4a03      	ldr	r2, [pc, #12]	; (8007224 <StopStreamDMA+0x2c>)
 8007218:	50a3      	str	r3, [r4, r2]
	dmaStreamTotal[port-1] = 0;
 800721a:	4a03      	ldr	r2, [pc, #12]	; (8007228 <StopStreamDMA+0x30>)
 800721c:	50a3      	str	r3, [r4, r2]

}
 800721e:	bd70      	pop	{r4, r5, r6, pc}
 8007220:	20001364 	.word	0x20001364
 8007224:	20000ed4 	.word	0x20000ed4
 8007228:	20000efc 	.word	0x20000efc

0800722c <SwitchMsgDMAToStream>:
/*-----------------------------------------------------------*/

/* Switch messaging DMA channels to streaming 
*/
void SwitchMsgDMAToStream(uint8_t port)
{
 800722c:	b510      	push	{r4, lr}
 800722e:	0004      	movs	r4, r0
	// TODO - Make sure all messages in the RX buffer have been parsed?
	
	// Stop the messaging DMA
	StopMsgDMA(port);
 8007230:	f7ff ffd0 	bl	80071d4 <StopMsgDMA>
	
	// Initialize a streaming DMA using same channel
	DMA_STREAM_CH_Init(&streamDMA[port-1], msgRxDMA[port-1].Instance);
 8007234:	3c01      	subs	r4, #1
 8007236:	00e0      	lsls	r0, r4, #3
 8007238:	1b02      	subs	r2, r0, r4
 800723a:	00d2      	lsls	r2, r2, #3
 800723c:	4903      	ldr	r1, [pc, #12]	; (800724c <SwitchMsgDMAToStream+0x20>)
 800723e:	5851      	ldr	r1, [r2, r1]
 8007240:	4b03      	ldr	r3, [pc, #12]	; (8007250 <SwitchMsgDMAToStream+0x24>)
 8007242:	18d0      	adds	r0, r2, r3
 8007244:	f004 fdc6 	bl	800bdd4 <DMA_STREAM_CH_Init>
}
 8007248:	bd10      	pop	{r4, pc}
 800724a:	46c0      	nop			; (mov r8, r8)
 800724c:	2000116c 	.word	0x2000116c
 8007250:	20001364 	.word	0x20001364

08007254 <SwitchStreamDMAToMsg>:
/*-----------------------------------------------------------*/

/* Switch streaming DMA channel to messaging 
*/
void SwitchStreamDMAToMsg(uint8_t port)
{
 8007254:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007256:	46c6      	mov	lr, r8
 8007258:	b500      	push	{lr}
 800725a:	0007      	movs	r7, r0
	// Stop the streaming DMA
	StopStreamDMA(port);
 800725c:	f7ff ffcc 	bl	80071f8 <StopStreamDMA>
	
	// Initialize a messaging DMA using same channels
	DMA_MSG_RX_CH_Init(&msgRxDMA[port-1], streamDMA[port-1].Instance);	
 8007260:	1e7c      	subs	r4, r7, #1
 8007262:	00e5      	lsls	r5, r4, #3
 8007264:	1b2e      	subs	r6, r5, r4
 8007266:	00f6      	lsls	r6, r6, #3
 8007268:	4b11      	ldr	r3, [pc, #68]	; (80072b0 <SwitchStreamDMAToMsg+0x5c>)
 800726a:	18f6      	adds	r6, r6, r3
 800726c:	4b11      	ldr	r3, [pc, #68]	; (80072b4 <SwitchStreamDMAToMsg+0x60>)
 800726e:	4698      	mov	r8, r3
 8007270:	1b2b      	subs	r3, r5, r4
 8007272:	00db      	lsls	r3, r3, #3
 8007274:	4642      	mov	r2, r8
 8007276:	5899      	ldr	r1, [r3, r2]
 8007278:	0030      	movs	r0, r6
 800727a:	f004 fd35 	bl	800bce8 <DMA_MSG_RX_CH_Init>
	
	// Remove stream DMA and change port status
	portStatus[GetPort(streamDMA[port-1].Parent)] = FREE; 
 800727e:	1b2b      	subs	r3, r5, r4
 8007280:	00db      	lsls	r3, r3, #3
 8007282:	4443      	add	r3, r8
 8007284:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8007286:	f004 f9af 	bl	800b5e8 <GetPort>
 800728a:	2300      	movs	r3, #0
 800728c:	4a0a      	ldr	r2, [pc, #40]	; (80072b8 <SwitchStreamDMAToMsg+0x64>)
 800728e:	5413      	strb	r3, [r2, r0]
	streamDMA[port-1].Instance = 0;
 8007290:	1b2d      	subs	r5, r5, r4
 8007292:	00ed      	lsls	r5, r5, #3
 8007294:	4642      	mov	r2, r8
 8007296:	50ab      	str	r3, [r5, r2]
	dmaStreamDst[port-1] = 0;
 8007298:	00a4      	lsls	r4, r4, #2
 800729a:	4a08      	ldr	r2, [pc, #32]	; (80072bc <SwitchStreamDMAToMsg+0x68>)
 800729c:	50a3      	str	r3, [r4, r2]
	
	// Read this port again in messaging mode	
	DMA_MSG_RX_Setup(GetUart(port), &msgRxDMA[port-1]);
 800729e:	0038      	movs	r0, r7
 80072a0:	f006 fd00 	bl	800dca4 <GetUart>
 80072a4:	0031      	movs	r1, r6
 80072a6:	f005 f98f 	bl	800c5c8 <DMA_MSG_RX_Setup>
		
}
 80072aa:	bc80      	pop	{r7}
 80072ac:	46b8      	mov	r8, r7
 80072ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80072b0:	2000116c 	.word	0x2000116c
 80072b4:	20001364 	.word	0x20001364
 80072b8:	20000b80 	.word	0x20000b80
 80072bc:	20000ee8 	.word	0x20000ee8

080072c0 <StartDMAstream>:
/*-----------------------------------------------------------*/

/* Setup and start a streaming DMA (port-to-port) 
*/
BOS_Status StartDMAstream(UART_HandleTypeDef* huartSrc, UART_HandleTypeDef* huartDst, uint16_t num)
{	
 80072c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072c2:	0005      	movs	r5, r0
 80072c4:	000e      	movs	r6, r1
 80072c6:	0017      	movs	r7, r2
	uint8_t srcPort = GetPort(huartSrc);
 80072c8:	f004 f98e 	bl	800b5e8 <GetPort>
 80072cc:	0004      	movs	r4, r0
	
	// 1. Check if single- or multi-cast 
	// 1.a. If single-cast, switch the DMA channel to streaming if it's available 
	if (portStatus[srcPort] == FREE || portStatus[srcPort] == MSG || portStatus[srcPort] == CLI)		// This port is not streaming so it's single-cast
 80072ce:	4b0d      	ldr	r3, [pc, #52]	; (8007304 <StartDMAstream+0x44>)
 80072d0:	5c1b      	ldrb	r3, [r3, r0]
 80072d2:	2b01      	cmp	r3, #1
 80072d4:	d902      	bls.n	80072dc <StartDMAstream+0x1c>
		SwitchMsgDMAToStream(srcPort);
	}
	// 1.b. If multi-cast, do some stuff - TODO
	else if (portStatus[srcPort] == STREAM)
	{
		return BOS_ERR_PORT_BUSY;		// Multi-casting not implemented right now
 80072d6:	2017      	movs	r0, #23
	if (portStatus[srcPort] == FREE || portStatus[srcPort] == MSG || portStatus[srcPort] == CLI)		// This port is not streaming so it's single-cast
 80072d8:	2b03      	cmp	r3, #3
 80072da:	d112      	bne.n	8007302 <StartDMAstream+0x42>
		SwitchMsgDMAToStream(srcPort);
 80072dc:	0020      	movs	r0, r4
 80072de:	f7ff ffa5 	bl	800722c <SwitchMsgDMAToStream>
	}
	else
		return BOS_ERR_PORT_BUSY;

	// 2. Setup streaming destination
	dmaStreamDst[srcPort-1] = huartDst;
 80072e2:	1e63      	subs	r3, r4, #1
 80072e4:	009b      	lsls	r3, r3, #2
 80072e6:	4a08      	ldr	r2, [pc, #32]	; (8007308 <StartDMAstream+0x48>)
 80072e8:	509e      	str	r6, [r3, r2]
	
	// 3. Lock the ports 
	portStatus[srcPort] = STREAM;
 80072ea:	4a06      	ldr	r2, [pc, #24]	; (8007304 <StartDMAstream+0x44>)
 80072ec:	2102      	movs	r1, #2
 80072ee:	5511      	strb	r1, [r2, r4]
	
	// 4. Initialize stream counter 
	dmaStreamCount[srcPort-1] = 0;
 80072f0:	4a06      	ldr	r2, [pc, #24]	; (800730c <StartDMAstream+0x4c>)
 80072f2:	2100      	movs	r1, #0
 80072f4:	5099      	str	r1, [r3, r2]
	
	// 5. Setup and start the DMA stream
	DMA_STREAM_Setup(huartSrc, huartDst, num);	
 80072f6:	003a      	movs	r2, r7
 80072f8:	0031      	movs	r1, r6
 80072fa:	0028      	movs	r0, r5
 80072fc:	f005 f9c2 	bl	800c684 <DMA_STREAM_Setup>
	
	return BOS_OK;
 8007300:	2000      	movs	r0, #0
}
 8007302:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007304:	20000b80 	.word	0x20000b80
 8007308:	20000ee8 	.word	0x20000ee8
 800730c:	20000ed4 	.word	0x20000ed4

08007310 <DMA_IRQHandler>:
/*-----------------------------------------------------------*/

/* DMA interrupt service routine 
*/
void DMA_IRQHandler(uint8_t port)
{
 8007310:	b570      	push	{r4, r5, r6, lr}
 8007312:	0004      	movs	r4, r0
	if (portStatus[port] != STREAM) {
 8007314:	4b12      	ldr	r3, [pc, #72]	; (8007360 <DMA_IRQHandler+0x50>)
 8007316:	5c1b      	ldrb	r3, [r3, r0]
 8007318:	2b02      	cmp	r3, #2
 800731a:	d008      	beq.n	800732e <DMA_IRQHandler+0x1e>
		HAL_DMA_IRQHandler(&msgRxDMA[port-1]);
 800731c:	3c01      	subs	r4, #1
 800731e:	00e0      	lsls	r0, r4, #3
 8007320:	1b00      	subs	r0, r0, r4
 8007322:	00c0      	lsls	r0, r0, #3
 8007324:	4c0f      	ldr	r4, [pc, #60]	; (8007364 <DMA_IRQHandler+0x54>)
 8007326:	1900      	adds	r0, r0, r4
 8007328:	f009 f8d2 	bl	80104d0 <HAL_DMA_IRQHandler>
			++dmaStreamCount[port-1];
		if (dmaStreamCount[port-1] >= dmaStreamTotal[port-1]) {
			StopStreamDMA(port);
		}
	}
}
 800732c:	bd70      	pop	{r4, r5, r6, pc}
		HAL_DMA_IRQHandler(&streamDMA[port-1]);
 800732e:	1e45      	subs	r5, r0, #1
 8007330:	00e8      	lsls	r0, r5, #3
 8007332:	1b40      	subs	r0, r0, r5
 8007334:	00c0      	lsls	r0, r0, #3
 8007336:	4b0c      	ldr	r3, [pc, #48]	; (8007368 <DMA_IRQHandler+0x58>)
 8007338:	18c0      	adds	r0, r0, r3
 800733a:	f009 f8c9 	bl	80104d0 <HAL_DMA_IRQHandler>
		if (dmaStreamTotal[port-1])
 800733e:	00aa      	lsls	r2, r5, #2
 8007340:	4b0a      	ldr	r3, [pc, #40]	; (800736c <DMA_IRQHandler+0x5c>)
 8007342:	58d2      	ldr	r2, [r2, r3]
 8007344:	2a00      	cmp	r2, #0
 8007346:	d006      	beq.n	8007356 <DMA_IRQHandler+0x46>
			++dmaStreamCount[port-1];
 8007348:	4909      	ldr	r1, [pc, #36]	; (8007370 <DMA_IRQHandler+0x60>)
 800734a:	00ad      	lsls	r5, r5, #2
 800734c:	586b      	ldr	r3, [r5, r1]
 800734e:	3301      	adds	r3, #1
 8007350:	506b      	str	r3, [r5, r1]
		if (dmaStreamCount[port-1] >= dmaStreamTotal[port-1]) {
 8007352:	429a      	cmp	r2, r3
 8007354:	d8ea      	bhi.n	800732c <DMA_IRQHandler+0x1c>
			StopStreamDMA(port);
 8007356:	0020      	movs	r0, r4
 8007358:	f7ff ff4e 	bl	80071f8 <StopStreamDMA>
}
 800735c:	e7e6      	b.n	800732c <DMA_IRQHandler+0x1c>
 800735e:	46c0      	nop			; (mov r8, r8)
 8007360:	20000b80 	.word	0x20000b80
 8007364:	2000116c 	.word	0x2000116c
 8007368:	20001364 	.word	0x20001364
 800736c:	20000efc 	.word	0x20000efc
 8007370:	20000ed4 	.word	0x20000ed4

08007374 <ResetUartORE>:
/* Reset UART ORE (overrun) flag in case other modules were already transmitting on startup
*/
void ResetUartORE(void)
{
#ifdef _Usart1
	__HAL_UART_CLEAR_OREFLAG(&huart1);
 8007374:	4b08      	ldr	r3, [pc, #32]	; (8007398 <ResetUartORE+0x24>)
 8007376:	681a      	ldr	r2, [r3, #0]
 8007378:	2308      	movs	r3, #8
 800737a:	6213      	str	r3, [r2, #32]
#endif
#ifdef _Usart2
	__HAL_UART_CLEAR_OREFLAG(&huart2);
 800737c:	4a07      	ldr	r2, [pc, #28]	; (800739c <ResetUartORE+0x28>)
 800737e:	6812      	ldr	r2, [r2, #0]
 8007380:	6213      	str	r3, [r2, #32]
#endif
#ifdef _Usart3
	__HAL_UART_CLEAR_OREFLAG(&huart3);
 8007382:	4a07      	ldr	r2, [pc, #28]	; (80073a0 <ResetUartORE+0x2c>)
 8007384:	6812      	ldr	r2, [r2, #0]
 8007386:	6213      	str	r3, [r2, #32]
#endif
#ifdef _Usart4
	__HAL_UART_CLEAR_OREFLAG(&huart4);
#endif
#ifdef _Usart5
	__HAL_UART_CLEAR_OREFLAG(&huart5);
 8007388:	4a06      	ldr	r2, [pc, #24]	; (80073a4 <ResetUartORE+0x30>)
 800738a:	6812      	ldr	r2, [r2, #0]
 800738c:	6213      	str	r3, [r2, #32]
#endif
#ifdef _Usart6
	__HAL_UART_CLEAR_OREFLAG(&huart6);
 800738e:	4a06      	ldr	r2, [pc, #24]	; (80073a8 <ResetUartORE+0x34>)
 8007390:	6812      	ldr	r2, [r2, #0]
 8007392:	6213      	str	r3, [r2, #32]
#endif
}
 8007394:	4770      	bx	lr
 8007396:	46c0      	nop			; (mov r8, r8)
 8007398:	2000652c 	.word	0x2000652c
 800739c:	20006614 	.word	0x20006614
 80073a0:	20006444 	.word	0x20006444
 80073a4:	200064b8 	.word	0x200064b8
 80073a8:	200065a0 	.word	0x200065a0

080073ac <EE_VerifyPageFullWriteVariable>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
static uint16_t EE_VerifyPageFullWriteVariable(uint16_t VirtAddress, uint16_t Data)
{
 80073ac:	b570      	push	{r4, r5, r6, lr}
 80073ae:	0006      	movs	r6, r0
 80073b0:	000d      	movs	r5, r1
  HAL_StatusTypeDef FlashStatus = HAL_OK;
  uint16_t ValidPage = PAGEA;
  uint32_t Address = 0, PageEndAddress = 0;
	
	HAL_FLASH_Unlock();
 80073b2:	f009 fcfd 	bl	8010db0 <HAL_FLASH_Unlock>
  PageStatusA = (*(__IO uint16_t*)PAGEA1_BASE_ADDRESS);
 80073b6:	4b2a      	ldr	r3, [pc, #168]	; (8007460 <EE_VerifyPageFullWriteVariable+0xb4>)
 80073b8:	881a      	ldrh	r2, [r3, #0]
 80073ba:	b292      	uxth	r2, r2
  PageStatusB = (*(__IO uint16_t*)PAGEB1_BASE_ADDRESS);
 80073bc:	4b29      	ldr	r3, [pc, #164]	; (8007464 <EE_VerifyPageFullWriteVariable+0xb8>)
 80073be:	881b      	ldrh	r3, [r3, #0]
 80073c0:	b29b      	uxth	r3, r3
      if (PageStatusB == VALID_PAGE)
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d104      	bne.n	80073d0 <EE_VerifyPageFullWriteVariable+0x24>
        if (PageStatusA == RECEIVE_DATA)
 80073c6:	4928      	ldr	r1, [pc, #160]	; (8007468 <EE_VerifyPageFullWriteVariable+0xbc>)
 80073c8:	428a      	cmp	r2, r1
 80073ca:	d007      	beq.n	80073dc <EE_VerifyPageFullWriteVariable+0x30>
          return PAGEB;         /* PageB valid */
 80073cc:	3302      	adds	r3, #2
 80073ce:	e005      	b.n	80073dc <EE_VerifyPageFullWriteVariable+0x30>
      else if (PageStatusA == VALID_PAGE)
 80073d0:	2a00      	cmp	r2, #0
 80073d2:	d140      	bne.n	8007456 <EE_VerifyPageFullWriteVariable+0xaa>
        if (PageStatusB == RECEIVE_DATA)
 80073d4:	4924      	ldr	r1, [pc, #144]	; (8007468 <EE_VerifyPageFullWriteVariable+0xbc>)
 80073d6:	428b      	cmp	r3, r1
 80073d8:	d03f      	beq.n	800745a <EE_VerifyPageFullWriteVariable+0xae>
          return PAGEA;         /* PageA valid */
 80073da:	0013      	movs	r3, r2
  {
    return  NO_VALID_PAGE;
  }

  /* Get the valid Page start Address */
  Address = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 80073dc:	4a23      	ldr	r2, [pc, #140]	; (800746c <EE_VerifyPageFullWriteVariable+0xc0>)
 80073de:	189c      	adds	r4, r3, r2
 80073e0:	02e4      	lsls	r4, r4, #11

  /* Get the valid Page end Address - Each page is twice pages size */
  PageEndAddress = (uint32_t)((EEPROM_START_ADDRESS - 2) + (uint32_t)((2 + ValidPage) * PAGE_SIZE));
 80073e2:	02db      	lsls	r3, r3, #11
 80073e4:	4a22      	ldr	r2, [pc, #136]	; (8007470 <EE_VerifyPageFullWriteVariable+0xc4>)
 80073e6:	4694      	mov	ip, r2
 80073e8:	4463      	add	r3, ip

  /* Check each active page address starting from begining */
  while (Address < PageEndAddress)
  {
    /* Verify if Address and Address+2 contents are 0xFFFFFFFF */
    if ((*(__IO uint32_t*)Address) == 0xFFFFFFFF)
 80073ea:	6822      	ldr	r2, [r4, #0]
 80073ec:	3201      	adds	r2, #1
 80073ee:	d006      	beq.n	80073fe <EE_VerifyPageFullWriteVariable+0x52>
      return pFlash.ErrorCode;
    }
    else
    {
      /* Next address location */
      Address = Address + 4;
 80073f0:	3404      	adds	r4, #4
  while (Address < PageEndAddress)
 80073f2:	429c      	cmp	r4, r3
 80073f4:	d3f9      	bcc.n	80073ea <EE_VerifyPageFullWriteVariable+0x3e>
    }
  }
	
	HAL_FLASH_Lock();
 80073f6:	f009 fcef 	bl	8010dd8 <HAL_FLASH_Lock>

  /* Return PAGE_FULL in case the valid page is full */
  return PAGE_FULL;
 80073fa:	2080      	movs	r0, #128	; 0x80
}
 80073fc:	bd70      	pop	{r4, r5, r6, pc}
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, Address, Data);
 80073fe:	002a      	movs	r2, r5
 8007400:	2300      	movs	r3, #0
 8007402:	0021      	movs	r1, r4
 8007404:	2001      	movs	r0, #1
 8007406:	f009 fd1f 	bl	8010e48 <HAL_FLASH_Program>
			FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800740a:	481a      	ldr	r0, [pc, #104]	; (8007474 <EE_VerifyPageFullWriteVariable+0xc8>)
 800740c:	f009 fcee 	bl	8010dec <FLASH_WaitForLastOperation>
      if (FlashStatus != HAL_OK)
 8007410:	2800      	cmp	r0, #0
 8007412:	d003      	beq.n	800741c <EE_VerifyPageFullWriteVariable+0x70>
        return pFlash.ErrorCode;
 8007414:	4b18      	ldr	r3, [pc, #96]	; (8007478 <EE_VerifyPageFullWriteVariable+0xcc>)
 8007416:	69d8      	ldr	r0, [r3, #28]
 8007418:	b280      	uxth	r0, r0
 800741a:	e7ef      	b.n	80073fc <EE_VerifyPageFullWriteVariable+0x50>
				CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800741c:	4a17      	ldr	r2, [pc, #92]	; (800747c <EE_VerifyPageFullWriteVariable+0xd0>)
 800741e:	6913      	ldr	r3, [r2, #16]
 8007420:	2101      	movs	r1, #1
 8007422:	438b      	bics	r3, r1
 8007424:	6113      	str	r3, [r2, #16]
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, Address + 2, VirtAddress);
 8007426:	1ca1      	adds	r1, r4, #2
 8007428:	0032      	movs	r2, r6
 800742a:	2300      	movs	r3, #0
 800742c:	2001      	movs	r0, #1
 800742e:	f009 fd0b 	bl	8010e48 <HAL_FLASH_Program>
			FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007432:	4810      	ldr	r0, [pc, #64]	; (8007474 <EE_VerifyPageFullWriteVariable+0xc8>)
 8007434:	f009 fcda 	bl	8010dec <FLASH_WaitForLastOperation>
      if (FlashStatus != HAL_OK)
 8007438:	2800      	cmp	r0, #0
 800743a:	d003      	beq.n	8007444 <EE_VerifyPageFullWriteVariable+0x98>
        return pFlash.ErrorCode;
 800743c:	4b0e      	ldr	r3, [pc, #56]	; (8007478 <EE_VerifyPageFullWriteVariable+0xcc>)
 800743e:	69d8      	ldr	r0, [r3, #28]
 8007440:	b280      	uxth	r0, r0
 8007442:	e7db      	b.n	80073fc <EE_VerifyPageFullWriteVariable+0x50>
				CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8007444:	4a0d      	ldr	r2, [pc, #52]	; (800747c <EE_VerifyPageFullWriteVariable+0xd0>)
 8007446:	6913      	ldr	r3, [r2, #16]
 8007448:	2101      	movs	r1, #1
 800744a:	438b      	bics	r3, r1
 800744c:	6113      	str	r3, [r2, #16]
      return pFlash.ErrorCode;
 800744e:	4b0a      	ldr	r3, [pc, #40]	; (8007478 <EE_VerifyPageFullWriteVariable+0xcc>)
 8007450:	69d8      	ldr	r0, [r3, #28]
 8007452:	b280      	uxth	r0, r0
 8007454:	e7d2      	b.n	80073fc <EE_VerifyPageFullWriteVariable+0x50>
    return  NO_VALID_PAGE;
 8007456:	20ab      	movs	r0, #171	; 0xab
 8007458:	e7d0      	b.n	80073fc <EE_VerifyPageFullWriteVariable+0x50>
          return PAGEB;         /* PageB valid */
 800745a:	2302      	movs	r3, #2
 800745c:	e7be      	b.n	80073dc <EE_VerifyPageFullWriteVariable+0x30>
 800745e:	46c0      	nop			; (mov r8, r8)
 8007460:	0801e000 	.word	0x0801e000
 8007464:	0801f000 	.word	0x0801f000
 8007468:	0000eeee 	.word	0x0000eeee
 800746c:	0001003c 	.word	0x0001003c
 8007470:	0801effe 	.word	0x0801effe
 8007474:	0000c350 	.word	0x0000c350
 8007478:	20006958 	.word	0x20006958
 800747c:	40022000 	.word	0x40022000

08007480 <EE_ReadVariable>:
{
 8007480:	b510      	push	{r4, lr}
  PageStatusA = (*(__IO uint16_t*)PAGEA1_BASE_ADDRESS);
 8007482:	4b11      	ldr	r3, [pc, #68]	; (80074c8 <EE_ReadVariable+0x48>)
 8007484:	881c      	ldrh	r4, [r3, #0]
 8007486:	b2a4      	uxth	r4, r4
  PageStatusB = (*(__IO uint16_t*)PAGEB1_BASE_ADDRESS);
 8007488:	4b10      	ldr	r3, [pc, #64]	; (80074cc <EE_ReadVariable+0x4c>)
 800748a:	881b      	ldrh	r3, [r3, #0]
 800748c:	b29b      	uxth	r3, r3
      if (PageStatusA == VALID_PAGE)
 800748e:	2c00      	cmp	r4, #0
 8007490:	d009      	beq.n	80074a6 <EE_ReadVariable+0x26>
      else if (PageStatusB == VALID_PAGE)
 8007492:	2b00      	cmp	r3, #0
 8007494:	d006      	beq.n	80074a4 <EE_ReadVariable+0x24>
    return  NO_VALID_PAGE;
 8007496:	20ab      	movs	r0, #171	; 0xab
 8007498:	e003      	b.n	80074a2 <EE_ReadVariable+0x22>
      *Data = (*(__IO uint16_t*)(Address - 2));
 800749a:	3b02      	subs	r3, #2
 800749c:	881b      	ldrh	r3, [r3, #0]
 800749e:	800b      	strh	r3, [r1, #0]
      ReadStatus = 0;
 80074a0:	2000      	movs	r0, #0
}
 80074a2:	bd10      	pop	{r4, pc}
        return PAGEB;           /* PageB valid */
 80074a4:	2402      	movs	r4, #2
  Address = (uint32_t)((EEPROM_START_ADDRESS - 2) + (uint32_t)((2 + ValidPage) * PAGE_SIZE));
 80074a6:	02e3      	lsls	r3, r4, #11
 80074a8:	4a09      	ldr	r2, [pc, #36]	; (80074d0 <EE_ReadVariable+0x50>)
 80074aa:	4694      	mov	ip, r2
 80074ac:	4463      	add	r3, ip
  PageStartAddress = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 80074ae:	02e4      	lsls	r4, r4, #11
  while (Address > (PageStartAddress + 2))
 80074b0:	4a08      	ldr	r2, [pc, #32]	; (80074d4 <EE_ReadVariable+0x54>)
 80074b2:	4694      	mov	ip, r2
 80074b4:	4464      	add	r4, ip
    AddressValue = (*(__IO uint16_t*)Address);
 80074b6:	881a      	ldrh	r2, [r3, #0]
 80074b8:	b292      	uxth	r2, r2
    if (AddressValue == VirtAddress)
 80074ba:	4282      	cmp	r2, r0
 80074bc:	d0ed      	beq.n	800749a <EE_ReadVariable+0x1a>
      Address = Address - 4;
 80074be:	3b04      	subs	r3, #4
  while (Address > (PageStartAddress + 2))
 80074c0:	42a3      	cmp	r3, r4
 80074c2:	d8f8      	bhi.n	80074b6 <EE_ReadVariable+0x36>
  uint16_t AddressValue = 0x5555, ReadStatus = 1;
 80074c4:	2001      	movs	r0, #1
 80074c6:	e7ec      	b.n	80074a2 <EE_ReadVariable+0x22>
 80074c8:	0801e000 	.word	0x0801e000
 80074cc:	0801f000 	.word	0x0801f000
 80074d0:	0801effe 	.word	0x0801effe
 80074d4:	0801e002 	.word	0x0801e002

080074d8 <EE_WriteVariable>:
{
 80074d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80074da:	46de      	mov	lr, fp
 80074dc:	4657      	mov	r7, sl
 80074de:	464e      	mov	r6, r9
 80074e0:	4645      	mov	r5, r8
 80074e2:	b5e0      	push	{r5, r6, r7, lr}
 80074e4:	b083      	sub	sp, #12
 80074e6:	0006      	movs	r6, r0
 80074e8:	000d      	movs	r5, r1
	HAL_FLASH_Unlock();
 80074ea:	f009 fc61 	bl	8010db0 <HAL_FLASH_Unlock>
  Status = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 80074ee:	0029      	movs	r1, r5
 80074f0:	0030      	movs	r0, r6
 80074f2:	f7ff ff5b 	bl	80073ac <EE_VerifyPageFullWriteVariable>
 80074f6:	0004      	movs	r4, r0
  if (Status == PAGE_FULL)
 80074f8:	2880      	cmp	r0, #128	; 0x80
 80074fa:	d009      	beq.n	8007510 <EE_WriteVariable+0x38>
	HAL_FLASH_Lock();
 80074fc:	f009 fc6c 	bl	8010dd8 <HAL_FLASH_Lock>
}
 8007500:	0020      	movs	r0, r4
 8007502:	b003      	add	sp, #12
 8007504:	bcf0      	pop	{r4, r5, r6, r7}
 8007506:	46bb      	mov	fp, r7
 8007508:	46b2      	mov	sl, r6
 800750a:	46a9      	mov	r9, r5
 800750c:	46a0      	mov	r8, r4
 800750e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  HAL_StatusTypeDef FlashStatus = HAL_OK;
  uint32_t NewPageAddress = 0, OldPageAddress = 0;
  uint16_t ValidPage = PAGEA, VarIdx = 0;
  uint16_t EepromStatus = 0, ReadStatus = 0;
	
	HAL_FLASH_Unlock();
 8007510:	f009 fc4e 	bl	8010db0 <HAL_FLASH_Unlock>
  PageStatusA = (*(__IO uint16_t*)PAGEA1_BASE_ADDRESS);
 8007514:	4b40      	ldr	r3, [pc, #256]	; (8007618 <EE_WriteVariable+0x140>)
 8007516:	881b      	ldrh	r3, [r3, #0]
 8007518:	b29b      	uxth	r3, r3
  PageStatusB = (*(__IO uint16_t*)PAGEB1_BASE_ADDRESS);
 800751a:	4a40      	ldr	r2, [pc, #256]	; (800761c <EE_WriteVariable+0x144>)
 800751c:	8812      	ldrh	r2, [r2, #0]
 800751e:	b292      	uxth	r2, r2
      if (PageStatusA == VALID_PAGE)
 8007520:	2b00      	cmp	r3, #0
 8007522:	d007      	beq.n	8007534 <EE_WriteVariable+0x5c>
    /* Old page address where variable will be taken from */
    OldPageAddress = PAGEA1_BASE_ADDRESS;
  }
  else
  {
    return NO_VALID_PAGE;       /* No valid Page */
 8007524:	342b      	adds	r4, #43	; 0x2b
      else if (PageStatusB == VALID_PAGE)
 8007526:	2a00      	cmp	r2, #0
 8007528:	d1e8      	bne.n	80074fc <EE_WriteVariable+0x24>
    OldPageAddress = PAGEB1_BASE_ADDRESS;
 800752a:	4b3c      	ldr	r3, [pc, #240]	; (800761c <EE_WriteVariable+0x144>)
 800752c:	469b      	mov	fp, r3
    NewPageAddress = PAGEA1_BASE_ADDRESS;
 800752e:	4b3a      	ldr	r3, [pc, #232]	; (8007618 <EE_WriteVariable+0x140>)
 8007530:	469a      	mov	sl, r3
 8007532:	e003      	b.n	800753c <EE_WriteVariable+0x64>
    OldPageAddress = PAGEA1_BASE_ADDRESS;
 8007534:	4b38      	ldr	r3, [pc, #224]	; (8007618 <EE_WriteVariable+0x140>)
 8007536:	469b      	mov	fp, r3
    NewPageAddress = PAGEB1_BASE_ADDRESS;
 8007538:	4b38      	ldr	r3, [pc, #224]	; (800761c <EE_WriteVariable+0x144>)
 800753a:	469a      	mov	sl, r3
  }

  /* Set the new Page status to RECEIVE_DATA status */
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, NewPageAddress, RECEIVE_DATA);
 800753c:	4a38      	ldr	r2, [pc, #224]	; (8007620 <EE_WriteVariable+0x148>)
 800753e:	2300      	movs	r3, #0
 8007540:	4651      	mov	r1, sl
 8007542:	2001      	movs	r0, #1
 8007544:	f009 fc80 	bl	8010e48 <HAL_FLASH_Program>
	/* Wait for last operation to be completed */
	FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007548:	4836      	ldr	r0, [pc, #216]	; (8007624 <EE_WriteVariable+0x14c>)
 800754a:	f009 fc4f 	bl	8010dec <FLASH_WaitForLastOperation>
  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 800754e:	2800      	cmp	r0, #0
 8007550:	d003      	beq.n	800755a <EE_WriteVariable+0x82>
  {
    return pFlash.ErrorCode;
 8007552:	4b35      	ldr	r3, [pc, #212]	; (8007628 <EE_WriteVariable+0x150>)
 8007554:	69dc      	ldr	r4, [r3, #28]
 8007556:	b2a4      	uxth	r4, r4
 8007558:	e7d0      	b.n	80074fc <EE_WriteVariable+0x24>
  }
	else
	{
		/* If the program operation is completed, disable the PG Bit */
		CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800755a:	4a34      	ldr	r2, [pc, #208]	; (800762c <EE_WriteVariable+0x154>)
 800755c:	6913      	ldr	r3, [r2, #16]
 800755e:	2101      	movs	r1, #1
 8007560:	438b      	bics	r3, r1
 8007562:	6113      	str	r3, [r2, #16]
	}
			
  /* Write the variable passed as parameter in the new active page */
  EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 8007564:	0029      	movs	r1, r5
 8007566:	0030      	movs	r0, r6
 8007568:	f7ff ff20 	bl	80073ac <EE_VerifyPageFullWriteVariable>
 800756c:	9001      	str	r0, [sp, #4]
  /* If program operation was failed, a Flash error code is returned */
  if (EepromStatus != HAL_OK)
 800756e:	2800      	cmp	r0, #0
 8007570:	d150      	bne.n	8007614 <EE_WriteVariable+0x13c>
  {
    return EepromStatus;
  }

  /* Transfer process: transfer variables from old to the new active page */
  for (VarIdx = 1; VarIdx <= NumOfEEPROMvar; VarIdx++)
 8007572:	2501      	movs	r5, #1
  {
    if (VarIdx != VirtAddress)  /* Check each variable except the one passed as parameter */
    {
      /* Read the other last variable updates */
      ReadStatus = EE_ReadVariable(VarIdx, &DataVar);
 8007574:	4b2e      	ldr	r3, [pc, #184]	; (8007630 <EE_WriteVariable+0x158>)
 8007576:	4698      	mov	r8, r3
      /* In case variable corresponding to the virtual address was found */
      if (ReadStatus != 0x1)
      {
        /* Transfer the variable to the new active page */
        EepromStatus = EE_VerifyPageFullWriteVariable(VarIdx, DataVar);
 8007578:	4699      	mov	r9, r3
  for (VarIdx = 1; VarIdx <= NumOfEEPROMvar; VarIdx++)
 800757a:	4f2e      	ldr	r7, [pc, #184]	; (8007634 <EE_WriteVariable+0x15c>)
 800757c:	e003      	b.n	8007586 <EE_WriteVariable+0xae>
 800757e:	3501      	adds	r5, #1
 8007580:	b2ad      	uxth	r5, r5
 8007582:	42bd      	cmp	r5, r7
 8007584:	d00f      	beq.n	80075a6 <EE_WriteVariable+0xce>
    if (VarIdx != VirtAddress)  /* Check each variable except the one passed as parameter */
 8007586:	42ae      	cmp	r6, r5
 8007588:	d0f9      	beq.n	800757e <EE_WriteVariable+0xa6>
      ReadStatus = EE_ReadVariable(VarIdx, &DataVar);
 800758a:	4641      	mov	r1, r8
 800758c:	0028      	movs	r0, r5
 800758e:	f7ff ff77 	bl	8007480 <EE_ReadVariable>
      if (ReadStatus != 0x1)
 8007592:	2801      	cmp	r0, #1
 8007594:	d0f3      	beq.n	800757e <EE_WriteVariable+0xa6>
        EepromStatus = EE_VerifyPageFullWriteVariable(VarIdx, DataVar);
 8007596:	464b      	mov	r3, r9
 8007598:	8819      	ldrh	r1, [r3, #0]
 800759a:	0028      	movs	r0, r5
 800759c:	f7ff ff06 	bl	80073ac <EE_VerifyPageFullWriteVariable>
 80075a0:	1e04      	subs	r4, r0, #0
        /* If program operation was failed, a Flash error code is returned */
        if (EepromStatus != HAL_OK)
 80075a2:	d0ec      	beq.n	800757e <EE_WriteVariable+0xa6>
 80075a4:	e7aa      	b.n	80074fc <EE_WriteVariable+0x24>
      }
    }
  }

  /* Erase the old Page: Set old Page status to ERASED status */
  FLASH_PageErase(OldPageAddress);
 80075a6:	4658      	mov	r0, fp
 80075a8:	f009 fcc6 	bl	8010f38 <FLASH_PageErase>
	/* Wait for last operation to be completed */
	FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 80075ac:	481d      	ldr	r0, [pc, #116]	; (8007624 <EE_WriteVariable+0x14c>)
 80075ae:	f009 fc1d 	bl	8010dec <FLASH_WaitForLastOperation>
  /* If erase operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 80075b2:	2800      	cmp	r0, #0
 80075b4:	d003      	beq.n	80075be <EE_WriteVariable+0xe6>
  {
    return pFlash.ErrorCode;
 80075b6:	4b1c      	ldr	r3, [pc, #112]	; (8007628 <EE_WriteVariable+0x150>)
 80075b8:	69dc      	ldr	r4, [r3, #28]
 80075ba:	b2a4      	uxth	r4, r4
 80075bc:	e79e      	b.n	80074fc <EE_WriteVariable+0x24>
  }
	else
	{
		/* Erase the other half of the old Page: Set old Page status to ERASED status */
		FLASH_PageErase(OldPageAddress + PAGE_SIZE);
 80075be:	2080      	movs	r0, #128	; 0x80
 80075c0:	0100      	lsls	r0, r0, #4
 80075c2:	4458      	add	r0, fp
 80075c4:	f009 fcb8 	bl	8010f38 <FLASH_PageErase>
		FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 80075c8:	4816      	ldr	r0, [pc, #88]	; (8007624 <EE_WriteVariable+0x14c>)
 80075ca:	f009 fc0f 	bl	8010dec <FLASH_WaitForLastOperation>
		 if (FlashStatus != HAL_OK)
 80075ce:	2800      	cmp	r0, #0
 80075d0:	d003      	beq.n	80075da <EE_WriteVariable+0x102>
		{
			return pFlash.ErrorCode;
 80075d2:	4b15      	ldr	r3, [pc, #84]	; (8007628 <EE_WriteVariable+0x150>)
 80075d4:	69dc      	ldr	r4, [r3, #28]
 80075d6:	b2a4      	uxth	r4, r4
 80075d8:	e790      	b.n	80074fc <EE_WriteVariable+0x24>
		}
		else
		{
			/* Operation is completed, disable the PER Bit */
			CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80075da:	4a14      	ldr	r2, [pc, #80]	; (800762c <EE_WriteVariable+0x154>)
 80075dc:	6913      	ldr	r3, [r2, #16]
 80075de:	2102      	movs	r1, #2
 80075e0:	438b      	bics	r3, r1
 80075e2:	6113      	str	r3, [r2, #16]
		}
	}
	
  /* Set new Page status to VALID_PAGE status */
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, NewPageAddress, VALID_PAGE);
 80075e4:	2200      	movs	r2, #0
 80075e6:	2300      	movs	r3, #0
 80075e8:	4651      	mov	r1, sl
 80075ea:	2001      	movs	r0, #1
 80075ec:	f009 fc2c 	bl	8010e48 <HAL_FLASH_Program>
	/* Wait for last operation to be completed */
	FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 80075f0:	480c      	ldr	r0, [pc, #48]	; (8007624 <EE_WriteVariable+0x14c>)
 80075f2:	f009 fbfb 	bl	8010dec <FLASH_WaitForLastOperation>
  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 80075f6:	2800      	cmp	r0, #0
 80075f8:	d003      	beq.n	8007602 <EE_WriteVariable+0x12a>
  {
    return pFlash.ErrorCode;
 80075fa:	4b0b      	ldr	r3, [pc, #44]	; (8007628 <EE_WriteVariable+0x150>)
 80075fc:	69dc      	ldr	r4, [r3, #28]
 80075fe:	b2a4      	uxth	r4, r4
 8007600:	e77c      	b.n	80074fc <EE_WriteVariable+0x24>
  }
	else
	{
		/* If the program operation is completed, disable the PG Bit */
		CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8007602:	4a0a      	ldr	r2, [pc, #40]	; (800762c <EE_WriteVariable+0x154>)
 8007604:	6913      	ldr	r3, [r2, #16]
 8007606:	2101      	movs	r1, #1
 8007608:	438b      	bics	r3, r1
 800760a:	6113      	str	r3, [r2, #16]
	}
			
	HAL_FLASH_Lock();
 800760c:	f009 fbe4 	bl	8010dd8 <HAL_FLASH_Lock>
	
  /* Return last operation flash status */
  return FlashStatus;
 8007610:	9c01      	ldr	r4, [sp, #4]
 8007612:	e773      	b.n	80074fc <EE_WriteVariable+0x24>
    return EepromStatus;
 8007614:	9c01      	ldr	r4, [sp, #4]
 8007616:	e771      	b.n	80074fc <EE_WriteVariable+0x24>
 8007618:	0801e000 	.word	0x0801e000
 800761c:	0801f000 	.word	0x0801f000
 8007620:	0000eeee 	.word	0x0000eeee
 8007624:	0000c350 	.word	0x0000c350
 8007628:	20006958 	.word	0x20006958
 800762c:	40022000 	.word	0x40022000
 8007630:	20000f10 	.word	0x20000f10
 8007634:	00000401 	.word	0x00000401

08007638 <EE_Format>:
{
 8007638:	b510      	push	{r4, lr}
	HAL_FLASH_Unlock();
 800763a:	f009 fbb9 	bl	8010db0 <HAL_FLASH_Unlock>
	FLASH_PageErase(PAGEA1_BASE_ADDRESS);	
 800763e:	4829      	ldr	r0, [pc, #164]	; (80076e4 <EE_Format+0xac>)
 8007640:	f009 fc7a 	bl	8010f38 <FLASH_PageErase>
	FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007644:	4828      	ldr	r0, [pc, #160]	; (80076e8 <EE_Format+0xb0>)
 8007646:	f009 fbd1 	bl	8010dec <FLASH_WaitForLastOperation>
	if (FlashStatus != HAL_OK)
 800764a:	2800      	cmp	r0, #0
 800764c:	d003      	beq.n	8007656 <EE_Format+0x1e>
		return pFlash.ErrorCode;
 800764e:	4b27      	ldr	r3, [pc, #156]	; (80076ec <EE_Format+0xb4>)
 8007650:	69d8      	ldr	r0, [r3, #28]
 8007652:	b280      	uxth	r0, r0
}
 8007654:	bd10      	pop	{r4, pc}
		FLASH_PageErase(PAGEA2_BASE_ADDRESS);
 8007656:	4826      	ldr	r0, [pc, #152]	; (80076f0 <EE_Format+0xb8>)
 8007658:	f009 fc6e 	bl	8010f38 <FLASH_PageErase>
		FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800765c:	4822      	ldr	r0, [pc, #136]	; (80076e8 <EE_Format+0xb0>)
 800765e:	f009 fbc5 	bl	8010dec <FLASH_WaitForLastOperation>
		if(FlashStatus != HAL_OK)
 8007662:	2800      	cmp	r0, #0
 8007664:	d003      	beq.n	800766e <EE_Format+0x36>
			return pFlash.ErrorCode;
 8007666:	4b21      	ldr	r3, [pc, #132]	; (80076ec <EE_Format+0xb4>)
 8007668:	69d8      	ldr	r0, [r3, #28]
 800766a:	b280      	uxth	r0, r0
 800766c:	e7f2      	b.n	8007654 <EE_Format+0x1c>
			CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800766e:	4a21      	ldr	r2, [pc, #132]	; (80076f4 <EE_Format+0xbc>)
 8007670:	6913      	ldr	r3, [r2, #16]
 8007672:	2102      	movs	r1, #2
 8007674:	438b      	bics	r3, r1
 8007676:	6113      	str	r3, [r2, #16]
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, PAGEA1_BASE_ADDRESS, VALID_PAGE);
 8007678:	2200      	movs	r2, #0
 800767a:	2300      	movs	r3, #0
 800767c:	4919      	ldr	r1, [pc, #100]	; (80076e4 <EE_Format+0xac>)
 800767e:	2001      	movs	r0, #1
 8007680:	f009 fbe2 	bl	8010e48 <HAL_FLASH_Program>
	FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007684:	4818      	ldr	r0, [pc, #96]	; (80076e8 <EE_Format+0xb0>)
 8007686:	f009 fbb1 	bl	8010dec <FLASH_WaitForLastOperation>
	if (FlashStatus != HAL_OK)
 800768a:	2800      	cmp	r0, #0
 800768c:	d003      	beq.n	8007696 <EE_Format+0x5e>
		return pFlash.ErrorCode;
 800768e:	4b17      	ldr	r3, [pc, #92]	; (80076ec <EE_Format+0xb4>)
 8007690:	69d8      	ldr	r0, [r3, #28]
 8007692:	b280      	uxth	r0, r0
 8007694:	e7de      	b.n	8007654 <EE_Format+0x1c>
		CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8007696:	4a17      	ldr	r2, [pc, #92]	; (80076f4 <EE_Format+0xbc>)
 8007698:	6913      	ldr	r3, [r2, #16]
 800769a:	2101      	movs	r1, #1
 800769c:	438b      	bics	r3, r1
 800769e:	6113      	str	r3, [r2, #16]
	FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 80076a0:	4815      	ldr	r0, [pc, #84]	; (80076f8 <EE_Format+0xc0>)
 80076a2:	f009 fc49 	bl	8010f38 <FLASH_PageErase>
	FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 80076a6:	4810      	ldr	r0, [pc, #64]	; (80076e8 <EE_Format+0xb0>)
 80076a8:	f009 fba0 	bl	8010dec <FLASH_WaitForLastOperation>
	if (FlashStatus != HAL_OK)
 80076ac:	2800      	cmp	r0, #0
 80076ae:	d003      	beq.n	80076b8 <EE_Format+0x80>
		return pFlash.ErrorCode;
 80076b0:	4b0e      	ldr	r3, [pc, #56]	; (80076ec <EE_Format+0xb4>)
 80076b2:	69d8      	ldr	r0, [r3, #28]
 80076b4:	b280      	uxth	r0, r0
 80076b6:	e7cd      	b.n	8007654 <EE_Format+0x1c>
		FLASH_PageErase(PAGEB2_BASE_ADDRESS);
 80076b8:	4810      	ldr	r0, [pc, #64]	; (80076fc <EE_Format+0xc4>)
 80076ba:	f009 fc3d 	bl	8010f38 <FLASH_PageErase>
		FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 80076be:	480a      	ldr	r0, [pc, #40]	; (80076e8 <EE_Format+0xb0>)
 80076c0:	f009 fb94 	bl	8010dec <FLASH_WaitForLastOperation>
		if(FlashStatus != HAL_OK)
 80076c4:	2800      	cmp	r0, #0
 80076c6:	d003      	beq.n	80076d0 <EE_Format+0x98>
			return pFlash.ErrorCode;
 80076c8:	4b08      	ldr	r3, [pc, #32]	; (80076ec <EE_Format+0xb4>)
 80076ca:	69d8      	ldr	r0, [r3, #28]
 80076cc:	b280      	uxth	r0, r0
 80076ce:	e7c1      	b.n	8007654 <EE_Format+0x1c>
			CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 80076d0:	4a08      	ldr	r2, [pc, #32]	; (80076f4 <EE_Format+0xbc>)
 80076d2:	6913      	ldr	r3, [r2, #16]
 80076d4:	2101      	movs	r1, #1
 80076d6:	438b      	bics	r3, r1
 80076d8:	6113      	str	r3, [r2, #16]
	HAL_FLASH_Lock();
 80076da:	f009 fb7d 	bl	8010dd8 <HAL_FLASH_Lock>
  return FlashStatus;
 80076de:	2000      	movs	r0, #0
 80076e0:	e7b8      	b.n	8007654 <EE_Format+0x1c>
 80076e2:	46c0      	nop			; (mov r8, r8)
 80076e4:	0801e000 	.word	0x0801e000
 80076e8:	0000c350 	.word	0x0000c350
 80076ec:	20006958 	.word	0x20006958
 80076f0:	0801e800 	.word	0x0801e800
 80076f4:	40022000 	.word	0x40022000
 80076f8:	0801f000 	.word	0x0801f000
 80076fc:	0801f800 	.word	0x0801f800

08007700 <EE_Init>:
{
 8007700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007702:	46ce      	mov	lr, r9
 8007704:	4647      	mov	r7, r8
 8007706:	b580      	push	{r7, lr}
	HAL_FLASH_Unlock();
 8007708:	f009 fb52 	bl	8010db0 <HAL_FLASH_Unlock>
  PageStatusA = (*(__IO uint16_t*)PAGEA1_BASE_ADDRESS);
 800770c:	4bbf      	ldr	r3, [pc, #764]	; (8007a0c <EE_Init+0x30c>)
 800770e:	881b      	ldrh	r3, [r3, #0]
 8007710:	b29b      	uxth	r3, r3
  PageStatusB = (*(__IO uint16_t*)PAGEB1_BASE_ADDRESS);
 8007712:	4abf      	ldr	r2, [pc, #764]	; (8007a10 <EE_Init+0x310>)
 8007714:	8812      	ldrh	r2, [r2, #0]
 8007716:	b292      	uxth	r2, r2
  switch (PageStatusA)
 8007718:	49be      	ldr	r1, [pc, #760]	; (8007a14 <EE_Init+0x314>)
 800771a:	428b      	cmp	r3, r1
 800771c:	d100      	bne.n	8007720 <EE_Init+0x20>
 800771e:	e075      	b.n	800780c <EE_Init+0x10c>
 8007720:	49bd      	ldr	r1, [pc, #756]	; (8007a18 <EE_Init+0x318>)
 8007722:	428b      	cmp	r3, r1
 8007724:	d012      	beq.n	800774c <EE_Init+0x4c>
 8007726:	2b00      	cmp	r3, #0
 8007728:	d100      	bne.n	800772c <EE_Init+0x2c>
 800772a:	e10b      	b.n	8007944 <EE_Init+0x244>
      FlashStatus = EE_Format();
 800772c:	f7ff ff84 	bl	8007638 <EE_Format>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007730:	48ba      	ldr	r0, [pc, #744]	; (8007a1c <EE_Init+0x31c>)
 8007732:	f009 fb5b 	bl	8010dec <FLASH_WaitForLastOperation>
 8007736:	b285      	uxth	r5, r0
				if(FlashStatus != HAL_OK)
 8007738:	2d00      	cmp	r5, #0
 800773a:	d102      	bne.n	8007742 <EE_Init+0x42>
	HAL_FLASH_Lock();
 800773c:	f009 fb4c 	bl	8010dd8 <HAL_FLASH_Lock>
  return HAL_OK;
 8007740:	2500      	movs	r5, #0
}
 8007742:	0028      	movs	r0, r5
 8007744:	bcc0      	pop	{r6, r7}
 8007746:	46b9      	mov	r9, r7
 8007748:	46b0      	mov	r8, r6
 800774a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (PageStatusB == VALID_PAGE) /* PageA erased, PageB valid */
 800774c:	2a00      	cmp	r2, #0
 800774e:	d00d      	beq.n	800776c <EE_Init+0x6c>
      else if (PageStatusB == RECEIVE_DATA) /* PageA erased, PageB receive */
 8007750:	4bb0      	ldr	r3, [pc, #704]	; (8007a14 <EE_Init+0x314>)
 8007752:	429a      	cmp	r2, r3
 8007754:	d028      	beq.n	80077a8 <EE_Init+0xa8>
        FlashStatus = EE_Format();
 8007756:	f7ff ff6f 	bl	8007638 <EE_Format>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800775a:	48b0      	ldr	r0, [pc, #704]	; (8007a1c <EE_Init+0x31c>)
 800775c:	f009 fb46 	bl	8010dec <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK)
 8007760:	2800      	cmp	r0, #0
 8007762:	d0eb      	beq.n	800773c <EE_Init+0x3c>
          return pFlash.ErrorCode;
 8007764:	4bae      	ldr	r3, [pc, #696]	; (8007a20 <EE_Init+0x320>)
 8007766:	69dd      	ldr	r5, [r3, #28]
 8007768:	b2ad      	uxth	r5, r5
 800776a:	e7ea      	b.n	8007742 <EE_Init+0x42>
        FLASH_PageErase(PAGEA1_BASE_ADDRESS);			
 800776c:	48a7      	ldr	r0, [pc, #668]	; (8007a0c <EE_Init+0x30c>)
 800776e:	f009 fbe3 	bl	8010f38 <FLASH_PageErase>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007772:	48aa      	ldr	r0, [pc, #680]	; (8007a1c <EE_Init+0x31c>)
 8007774:	f009 fb3a 	bl	8010dec <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK)
 8007778:	2800      	cmp	r0, #0
 800777a:	d003      	beq.n	8007784 <EE_Init+0x84>
          return pFlash.ErrorCode;
 800777c:	4ba8      	ldr	r3, [pc, #672]	; (8007a20 <EE_Init+0x320>)
 800777e:	69dd      	ldr	r5, [r3, #28]
 8007780:	b2ad      	uxth	r5, r5
 8007782:	e7de      	b.n	8007742 <EE_Init+0x42>
					FLASH_PageErase(PAGEA2_BASE_ADDRESS);
 8007784:	48a7      	ldr	r0, [pc, #668]	; (8007a24 <EE_Init+0x324>)
 8007786:	f009 fbd7 	bl	8010f38 <FLASH_PageErase>
					FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800778a:	48a4      	ldr	r0, [pc, #656]	; (8007a1c <EE_Init+0x31c>)
 800778c:	f009 fb2e 	bl	8010dec <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK)
 8007790:	2800      	cmp	r0, #0
 8007792:	d105      	bne.n	80077a0 <EE_Init+0xa0>
						CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8007794:	4aa4      	ldr	r2, [pc, #656]	; (8007a28 <EE_Init+0x328>)
 8007796:	6913      	ldr	r3, [r2, #16]
 8007798:	2102      	movs	r1, #2
 800779a:	438b      	bics	r3, r1
 800779c:	6113      	str	r3, [r2, #16]
 800779e:	e7cd      	b.n	800773c <EE_Init+0x3c>
						return pFlash.ErrorCode;
 80077a0:	4b9f      	ldr	r3, [pc, #636]	; (8007a20 <EE_Init+0x320>)
 80077a2:	69dd      	ldr	r5, [r3, #28]
 80077a4:	b2ad      	uxth	r5, r5
 80077a6:	e7cc      	b.n	8007742 <EE_Init+0x42>
        FLASH_PageErase(PAGEA1_BASE_ADDRESS);
 80077a8:	4898      	ldr	r0, [pc, #608]	; (8007a0c <EE_Init+0x30c>)
 80077aa:	f009 fbc5 	bl	8010f38 <FLASH_PageErase>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 80077ae:	489b      	ldr	r0, [pc, #620]	; (8007a1c <EE_Init+0x31c>)
 80077b0:	f009 fb1c 	bl	8010dec <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK)
 80077b4:	2800      	cmp	r0, #0
 80077b6:	d003      	beq.n	80077c0 <EE_Init+0xc0>
          return pFlash.ErrorCode;
 80077b8:	4b99      	ldr	r3, [pc, #612]	; (8007a20 <EE_Init+0x320>)
 80077ba:	69dd      	ldr	r5, [r3, #28]
 80077bc:	b2ad      	uxth	r5, r5
 80077be:	e7c0      	b.n	8007742 <EE_Init+0x42>
					FLASH_PageErase(PAGEA2_BASE_ADDRESS);
 80077c0:	4898      	ldr	r0, [pc, #608]	; (8007a24 <EE_Init+0x324>)
 80077c2:	f009 fbb9 	bl	8010f38 <FLASH_PageErase>
					FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 80077c6:	4895      	ldr	r0, [pc, #596]	; (8007a1c <EE_Init+0x31c>)
 80077c8:	f009 fb10 	bl	8010dec <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK)
 80077cc:	2800      	cmp	r0, #0
 80077ce:	d003      	beq.n	80077d8 <EE_Init+0xd8>
						return pFlash.ErrorCode;
 80077d0:	4b93      	ldr	r3, [pc, #588]	; (8007a20 <EE_Init+0x320>)
 80077d2:	69dd      	ldr	r5, [r3, #28]
 80077d4:	b2ad      	uxth	r5, r5
 80077d6:	e7b4      	b.n	8007742 <EE_Init+0x42>
						CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80077d8:	4a93      	ldr	r2, [pc, #588]	; (8007a28 <EE_Init+0x328>)
 80077da:	6913      	ldr	r3, [r2, #16]
 80077dc:	2102      	movs	r1, #2
 80077de:	438b      	bics	r3, r1
 80077e0:	6113      	str	r3, [r2, #16]
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, PAGEB1_BASE_ADDRESS, VALID_PAGE);
 80077e2:	2200      	movs	r2, #0
 80077e4:	2300      	movs	r3, #0
 80077e6:	498a      	ldr	r1, [pc, #552]	; (8007a10 <EE_Init+0x310>)
 80077e8:	2001      	movs	r0, #1
 80077ea:	f009 fb2d 	bl	8010e48 <HAL_FLASH_Program>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 80077ee:	488b      	ldr	r0, [pc, #556]	; (8007a1c <EE_Init+0x31c>)
 80077f0:	f009 fafc 	bl	8010dec <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK)
 80077f4:	2800      	cmp	r0, #0
 80077f6:	d105      	bne.n	8007804 <EE_Init+0x104>
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 80077f8:	4a8b      	ldr	r2, [pc, #556]	; (8007a28 <EE_Init+0x328>)
 80077fa:	6913      	ldr	r3, [r2, #16]
 80077fc:	2101      	movs	r1, #1
 80077fe:	438b      	bics	r3, r1
 8007800:	6113      	str	r3, [r2, #16]
 8007802:	e79b      	b.n	800773c <EE_Init+0x3c>
          return pFlash.ErrorCode;
 8007804:	4b86      	ldr	r3, [pc, #536]	; (8007a20 <EE_Init+0x320>)
 8007806:	69dd      	ldr	r5, [r3, #28]
 8007808:	b2ad      	uxth	r5, r5
 800780a:	e79a      	b.n	8007742 <EE_Init+0x42>
      if (PageStatusB == VALID_PAGE) /* PageA receive, PageB valid */
 800780c:	2a00      	cmp	r2, #0
 800780e:	d158      	bne.n	80078c2 <EE_Init+0x1c2>
 8007810:	2401      	movs	r4, #1
  int16_t x = -1;
 8007812:	2601      	movs	r6, #1
 8007814:	4276      	negs	r6, r6
          if (( *(__IO uint16_t*)(PAGEA1_BASE_ADDRESS + 6)) == VarIdx)
 8007816:	4f85      	ldr	r7, [pc, #532]	; (8007a2c <EE_Init+0x32c>)
            ReadStatus = EE_ReadVariable(VarIdx, &DataVar);
 8007818:	4b85      	ldr	r3, [pc, #532]	; (8007a30 <EE_Init+0x330>)
 800781a:	4698      	mov	r8, r3
              EepromStatus = EE_VerifyPageFullWriteVariable(VarIdx, DataVar);
 800781c:	4699      	mov	r9, r3
 800781e:	e005      	b.n	800782c <EE_Init+0x12c>
            x = VarIdx;
 8007820:	b226      	sxth	r6, r4
 8007822:	e008      	b.n	8007836 <EE_Init+0x136>
        for (VarIdx = 1; VarIdx <= NumOfEEPROMvar; VarIdx++)
 8007824:	3401      	adds	r4, #1
 8007826:	4b83      	ldr	r3, [pc, #524]	; (8007a34 <EE_Init+0x334>)
 8007828:	429c      	cmp	r4, r3
 800782a:	d018      	beq.n	800785e <EE_Init+0x15e>
 800782c:	b2a5      	uxth	r5, r4
          if (( *(__IO uint16_t*)(PAGEA1_BASE_ADDRESS + 6)) == VarIdx)
 800782e:	883b      	ldrh	r3, [r7, #0]
 8007830:	b29b      	uxth	r3, r3
 8007832:	42ab      	cmp	r3, r5
 8007834:	d0f4      	beq.n	8007820 <EE_Init+0x120>
          if (VarIdx != x)
 8007836:	42a6      	cmp	r6, r4
 8007838:	d0f4      	beq.n	8007824 <EE_Init+0x124>
            ReadStatus = EE_ReadVariable(VarIdx, &DataVar);
 800783a:	4641      	mov	r1, r8
 800783c:	0028      	movs	r0, r5
 800783e:	f7ff fe1f 	bl	8007480 <EE_ReadVariable>
            if (ReadStatus != 0x1)
 8007842:	2801      	cmp	r0, #1
 8007844:	d0ee      	beq.n	8007824 <EE_Init+0x124>
              EepromStatus = EE_VerifyPageFullWriteVariable(VarIdx, DataVar);
 8007846:	464b      	mov	r3, r9
 8007848:	8819      	ldrh	r1, [r3, #0]
 800784a:	0028      	movs	r0, r5
 800784c:	f7ff fdae 	bl	80073ac <EE_VerifyPageFullWriteVariable>
 8007850:	0005      	movs	r5, r0
							FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007852:	4872      	ldr	r0, [pc, #456]	; (8007a1c <EE_Init+0x31c>)
 8007854:	f009 faca 	bl	8010dec <FLASH_WaitForLastOperation>
							if(FlashStatus != HAL_OK)
 8007858:	2800      	cmp	r0, #0
 800785a:	d0e3      	beq.n	8007824 <EE_Init+0x124>
 800785c:	e771      	b.n	8007742 <EE_Init+0x42>
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, PAGEA1_BASE_ADDRESS, VALID_PAGE);
 800785e:	2200      	movs	r2, #0
 8007860:	2300      	movs	r3, #0
 8007862:	496a      	ldr	r1, [pc, #424]	; (8007a0c <EE_Init+0x30c>)
 8007864:	2001      	movs	r0, #1
 8007866:	f009 faef 	bl	8010e48 <HAL_FLASH_Program>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800786a:	486c      	ldr	r0, [pc, #432]	; (8007a1c <EE_Init+0x31c>)
 800786c:	f009 fabe 	bl	8010dec <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK)
 8007870:	2800      	cmp	r0, #0
 8007872:	d003      	beq.n	800787c <EE_Init+0x17c>
          return pFlash.ErrorCode;
 8007874:	4b6a      	ldr	r3, [pc, #424]	; (8007a20 <EE_Init+0x320>)
 8007876:	69dd      	ldr	r5, [r3, #28]
 8007878:	b2ad      	uxth	r5, r5
 800787a:	e762      	b.n	8007742 <EE_Init+0x42>
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800787c:	4a6a      	ldr	r2, [pc, #424]	; (8007a28 <EE_Init+0x328>)
 800787e:	6913      	ldr	r3, [r2, #16]
 8007880:	2101      	movs	r1, #1
 8007882:	438b      	bics	r3, r1
 8007884:	6113      	str	r3, [r2, #16]
        FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 8007886:	4862      	ldr	r0, [pc, #392]	; (8007a10 <EE_Init+0x310>)
 8007888:	f009 fb56 	bl	8010f38 <FLASH_PageErase>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800788c:	4863      	ldr	r0, [pc, #396]	; (8007a1c <EE_Init+0x31c>)
 800788e:	f009 faad 	bl	8010dec <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK)
 8007892:	2800      	cmp	r0, #0
 8007894:	d003      	beq.n	800789e <EE_Init+0x19e>
          return pFlash.ErrorCode;
 8007896:	4b62      	ldr	r3, [pc, #392]	; (8007a20 <EE_Init+0x320>)
 8007898:	69dd      	ldr	r5, [r3, #28]
 800789a:	b2ad      	uxth	r5, r5
 800789c:	e751      	b.n	8007742 <EE_Init+0x42>
					FLASH_PageErase(PAGEB2_BASE_ADDRESS);
 800789e:	4866      	ldr	r0, [pc, #408]	; (8007a38 <EE_Init+0x338>)
 80078a0:	f009 fb4a 	bl	8010f38 <FLASH_PageErase>
					FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 80078a4:	485d      	ldr	r0, [pc, #372]	; (8007a1c <EE_Init+0x31c>)
 80078a6:	f009 faa1 	bl	8010dec <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK)
 80078aa:	2800      	cmp	r0, #0
 80078ac:	d105      	bne.n	80078ba <EE_Init+0x1ba>
						CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80078ae:	4a5e      	ldr	r2, [pc, #376]	; (8007a28 <EE_Init+0x328>)
 80078b0:	6913      	ldr	r3, [r2, #16]
 80078b2:	2102      	movs	r1, #2
 80078b4:	438b      	bics	r3, r1
 80078b6:	6113      	str	r3, [r2, #16]
 80078b8:	e740      	b.n	800773c <EE_Init+0x3c>
						return pFlash.ErrorCode;
 80078ba:	4b59      	ldr	r3, [pc, #356]	; (8007a20 <EE_Init+0x320>)
 80078bc:	69dd      	ldr	r5, [r3, #28]
 80078be:	b2ad      	uxth	r5, r5
 80078c0:	e73f      	b.n	8007742 <EE_Init+0x42>
      else if (PageStatusB == ERASED) /* PageA receive, PageB erased */
 80078c2:	4b55      	ldr	r3, [pc, #340]	; (8007a18 <EE_Init+0x318>)
 80078c4:	429a      	cmp	r2, r3
 80078c6:	d00b      	beq.n	80078e0 <EE_Init+0x1e0>
        FlashStatus = EE_Format();
 80078c8:	f7ff feb6 	bl	8007638 <EE_Format>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 80078cc:	4853      	ldr	r0, [pc, #332]	; (8007a1c <EE_Init+0x31c>)
 80078ce:	f009 fa8d 	bl	8010dec <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK)
 80078d2:	2800      	cmp	r0, #0
 80078d4:	d100      	bne.n	80078d8 <EE_Init+0x1d8>
 80078d6:	e731      	b.n	800773c <EE_Init+0x3c>
          return pFlash.ErrorCode;
 80078d8:	4b51      	ldr	r3, [pc, #324]	; (8007a20 <EE_Init+0x320>)
 80078da:	69dd      	ldr	r5, [r3, #28]
 80078dc:	b2ad      	uxth	r5, r5
 80078de:	e730      	b.n	8007742 <EE_Init+0x42>
        FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 80078e0:	484b      	ldr	r0, [pc, #300]	; (8007a10 <EE_Init+0x310>)
 80078e2:	f009 fb29 	bl	8010f38 <FLASH_PageErase>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 80078e6:	484d      	ldr	r0, [pc, #308]	; (8007a1c <EE_Init+0x31c>)
 80078e8:	f009 fa80 	bl	8010dec <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK)
 80078ec:	2800      	cmp	r0, #0
 80078ee:	d003      	beq.n	80078f8 <EE_Init+0x1f8>
          return pFlash.ErrorCode;
 80078f0:	4b4b      	ldr	r3, [pc, #300]	; (8007a20 <EE_Init+0x320>)
 80078f2:	69dd      	ldr	r5, [r3, #28]
 80078f4:	b2ad      	uxth	r5, r5
 80078f6:	e724      	b.n	8007742 <EE_Init+0x42>
					FLASH_PageErase(PAGEB2_BASE_ADDRESS);
 80078f8:	484f      	ldr	r0, [pc, #316]	; (8007a38 <EE_Init+0x338>)
 80078fa:	f009 fb1d 	bl	8010f38 <FLASH_PageErase>
					FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 80078fe:	4847      	ldr	r0, [pc, #284]	; (8007a1c <EE_Init+0x31c>)
 8007900:	f009 fa74 	bl	8010dec <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK)
 8007904:	2800      	cmp	r0, #0
 8007906:	d003      	beq.n	8007910 <EE_Init+0x210>
						return pFlash.ErrorCode;
 8007908:	4b45      	ldr	r3, [pc, #276]	; (8007a20 <EE_Init+0x320>)
 800790a:	69dd      	ldr	r5, [r3, #28]
 800790c:	b2ad      	uxth	r5, r5
 800790e:	e718      	b.n	8007742 <EE_Init+0x42>
						CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8007910:	4a45      	ldr	r2, [pc, #276]	; (8007a28 <EE_Init+0x328>)
 8007912:	6913      	ldr	r3, [r2, #16]
 8007914:	2102      	movs	r1, #2
 8007916:	438b      	bics	r3, r1
 8007918:	6113      	str	r3, [r2, #16]
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, PAGEA1_BASE_ADDRESS, VALID_PAGE);
 800791a:	2200      	movs	r2, #0
 800791c:	2300      	movs	r3, #0
 800791e:	493b      	ldr	r1, [pc, #236]	; (8007a0c <EE_Init+0x30c>)
 8007920:	2001      	movs	r0, #1
 8007922:	f009 fa91 	bl	8010e48 <HAL_FLASH_Program>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007926:	483d      	ldr	r0, [pc, #244]	; (8007a1c <EE_Init+0x31c>)
 8007928:	f009 fa60 	bl	8010dec <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK)
 800792c:	2800      	cmp	r0, #0
 800792e:	d105      	bne.n	800793c <EE_Init+0x23c>
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8007930:	4a3d      	ldr	r2, [pc, #244]	; (8007a28 <EE_Init+0x328>)
 8007932:	6913      	ldr	r3, [r2, #16]
 8007934:	2101      	movs	r1, #1
 8007936:	438b      	bics	r3, r1
 8007938:	6113      	str	r3, [r2, #16]
 800793a:	e6ff      	b.n	800773c <EE_Init+0x3c>
          return pFlash.ErrorCode;
 800793c:	4b38      	ldr	r3, [pc, #224]	; (8007a20 <EE_Init+0x320>)
 800793e:	69dd      	ldr	r5, [r3, #28]
 8007940:	b2ad      	uxth	r5, r5
 8007942:	e6fe      	b.n	8007742 <EE_Init+0x42>
      if (PageStatusB == VALID_PAGE) /* Invalid state -> format eeprom */
 8007944:	2a00      	cmp	r2, #0
 8007946:	d00a      	beq.n	800795e <EE_Init+0x25e>
      else if (PageStatusB == ERASED) /* PageA valid, PageB erased */
 8007948:	4b33      	ldr	r3, [pc, #204]	; (8007a18 <EE_Init+0x318>)
 800794a:	429a      	cmp	r2, r3
 800794c:	d011      	beq.n	8007972 <EE_Init+0x272>
 800794e:	2401      	movs	r4, #1
  int16_t x = -1;
 8007950:	2601      	movs	r6, #1
 8007952:	4276      	negs	r6, r6
          if ((*(__IO uint16_t*)(PAGEB1_BASE_ADDRESS + 6)) == VarIdx)
 8007954:	4f39      	ldr	r7, [pc, #228]	; (8007a3c <EE_Init+0x33c>)
            ReadStatus = EE_ReadVariable(VarIdx, &DataVar);
 8007956:	4b36      	ldr	r3, [pc, #216]	; (8007a30 <EE_Init+0x330>)
 8007958:	4698      	mov	r8, r3
              EepromStatus = EE_VerifyPageFullWriteVariable(VarIdx, DataVar);
 800795a:	4699      	mov	r9, r3
 800795c:	e02d      	b.n	80079ba <EE_Init+0x2ba>
        FlashStatus = EE_Format();
 800795e:	f7ff fe6b 	bl	8007638 <EE_Format>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007962:	482e      	ldr	r0, [pc, #184]	; (8007a1c <EE_Init+0x31c>)
 8007964:	f009 fa42 	bl	8010dec <FLASH_WaitForLastOperation>
 8007968:	b285      	uxth	r5, r0
				if(FlashStatus != HAL_OK)
 800796a:	2d00      	cmp	r5, #0
 800796c:	d100      	bne.n	8007970 <EE_Init+0x270>
 800796e:	e6e5      	b.n	800773c <EE_Init+0x3c>
 8007970:	e6e7      	b.n	8007742 <EE_Init+0x42>
        FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 8007972:	4827      	ldr	r0, [pc, #156]	; (8007a10 <EE_Init+0x310>)
 8007974:	f009 fae0 	bl	8010f38 <FLASH_PageErase>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007978:	4828      	ldr	r0, [pc, #160]	; (8007a1c <EE_Init+0x31c>)
 800797a:	f009 fa37 	bl	8010dec <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK)
 800797e:	2800      	cmp	r0, #0
 8007980:	d003      	beq.n	800798a <EE_Init+0x28a>
          return pFlash.ErrorCode;
 8007982:	4b27      	ldr	r3, [pc, #156]	; (8007a20 <EE_Init+0x320>)
 8007984:	69dd      	ldr	r5, [r3, #28]
 8007986:	b2ad      	uxth	r5, r5
 8007988:	e6db      	b.n	8007742 <EE_Init+0x42>
					FLASH_PageErase(PAGEB2_BASE_ADDRESS);
 800798a:	482b      	ldr	r0, [pc, #172]	; (8007a38 <EE_Init+0x338>)
 800798c:	f009 fad4 	bl	8010f38 <FLASH_PageErase>
					FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007990:	4822      	ldr	r0, [pc, #136]	; (8007a1c <EE_Init+0x31c>)
 8007992:	f009 fa2b 	bl	8010dec <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK)
 8007996:	2800      	cmp	r0, #0
 8007998:	d105      	bne.n	80079a6 <EE_Init+0x2a6>
						CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800799a:	4a23      	ldr	r2, [pc, #140]	; (8007a28 <EE_Init+0x328>)
 800799c:	6913      	ldr	r3, [r2, #16]
 800799e:	2102      	movs	r1, #2
 80079a0:	438b      	bics	r3, r1
 80079a2:	6113      	str	r3, [r2, #16]
 80079a4:	e6ca      	b.n	800773c <EE_Init+0x3c>
						return pFlash.ErrorCode;
 80079a6:	4b1e      	ldr	r3, [pc, #120]	; (8007a20 <EE_Init+0x320>)
 80079a8:	69dd      	ldr	r5, [r3, #28]
 80079aa:	b2ad      	uxth	r5, r5
 80079ac:	e6c9      	b.n	8007742 <EE_Init+0x42>
            x = VarIdx;
 80079ae:	b226      	sxth	r6, r4
 80079b0:	e008      	b.n	80079c4 <EE_Init+0x2c4>
        for (VarIdx = 1; VarIdx <= NumOfEEPROMvar; VarIdx++)
 80079b2:	3401      	adds	r4, #1
 80079b4:	4b1f      	ldr	r3, [pc, #124]	; (8007a34 <EE_Init+0x334>)
 80079b6:	429c      	cmp	r4, r3
 80079b8:	d018      	beq.n	80079ec <EE_Init+0x2ec>
 80079ba:	b2a5      	uxth	r5, r4
          if ((*(__IO uint16_t*)(PAGEB1_BASE_ADDRESS + 6)) == VarIdx)
 80079bc:	883b      	ldrh	r3, [r7, #0]
 80079be:	b29b      	uxth	r3, r3
 80079c0:	42ab      	cmp	r3, r5
 80079c2:	d0f4      	beq.n	80079ae <EE_Init+0x2ae>
          if (VarIdx != x)
 80079c4:	42a6      	cmp	r6, r4
 80079c6:	d0f4      	beq.n	80079b2 <EE_Init+0x2b2>
            ReadStatus = EE_ReadVariable(VarIdx, &DataVar);
 80079c8:	4641      	mov	r1, r8
 80079ca:	0028      	movs	r0, r5
 80079cc:	f7ff fd58 	bl	8007480 <EE_ReadVariable>
            if (ReadStatus != 0x1)
 80079d0:	2801      	cmp	r0, #1
 80079d2:	d0ee      	beq.n	80079b2 <EE_Init+0x2b2>
              EepromStatus = EE_VerifyPageFullWriteVariable(VarIdx, DataVar);
 80079d4:	464b      	mov	r3, r9
 80079d6:	8819      	ldrh	r1, [r3, #0]
 80079d8:	0028      	movs	r0, r5
 80079da:	f7ff fce7 	bl	80073ac <EE_VerifyPageFullWriteVariable>
 80079de:	0005      	movs	r5, r0
							FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 80079e0:	480e      	ldr	r0, [pc, #56]	; (8007a1c <EE_Init+0x31c>)
 80079e2:	f009 fa03 	bl	8010dec <FLASH_WaitForLastOperation>
							if(FlashStatus != HAL_OK)
 80079e6:	2800      	cmp	r0, #0
 80079e8:	d0e3      	beq.n	80079b2 <EE_Init+0x2b2>
 80079ea:	e6aa      	b.n	8007742 <EE_Init+0x42>
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, PAGEB1_BASE_ADDRESS, VALID_PAGE);
 80079ec:	2200      	movs	r2, #0
 80079ee:	2300      	movs	r3, #0
 80079f0:	4907      	ldr	r1, [pc, #28]	; (8007a10 <EE_Init+0x310>)
 80079f2:	2001      	movs	r0, #1
 80079f4:	f009 fa28 	bl	8010e48 <HAL_FLASH_Program>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 80079f8:	4808      	ldr	r0, [pc, #32]	; (8007a1c <EE_Init+0x31c>)
 80079fa:	f009 f9f7 	bl	8010dec <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK)
 80079fe:	2800      	cmp	r0, #0
 8007a00:	d01e      	beq.n	8007a40 <EE_Init+0x340>
          return pFlash.ErrorCode;
 8007a02:	4b07      	ldr	r3, [pc, #28]	; (8007a20 <EE_Init+0x320>)
 8007a04:	69dd      	ldr	r5, [r3, #28]
 8007a06:	b2ad      	uxth	r5, r5
 8007a08:	e69b      	b.n	8007742 <EE_Init+0x42>
 8007a0a:	46c0      	nop			; (mov r8, r8)
 8007a0c:	0801e000 	.word	0x0801e000
 8007a10:	0801f000 	.word	0x0801f000
 8007a14:	0000eeee 	.word	0x0000eeee
 8007a18:	0000ffff 	.word	0x0000ffff
 8007a1c:	0000c350 	.word	0x0000c350
 8007a20:	20006958 	.word	0x20006958
 8007a24:	0801e800 	.word	0x0801e800
 8007a28:	40022000 	.word	0x40022000
 8007a2c:	0801e006 	.word	0x0801e006
 8007a30:	20000f10 	.word	0x20000f10
 8007a34:	00000401 	.word	0x00000401
 8007a38:	0801f800 	.word	0x0801f800
 8007a3c:	0801f006 	.word	0x0801f006
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8007a40:	4a11      	ldr	r2, [pc, #68]	; (8007a88 <EE_Init+0x388>)
 8007a42:	6913      	ldr	r3, [r2, #16]
 8007a44:	2101      	movs	r1, #1
 8007a46:	438b      	bics	r3, r1
 8007a48:	6113      	str	r3, [r2, #16]
        FLASH_PageErase(PAGEA1_BASE_ADDRESS);
 8007a4a:	4810      	ldr	r0, [pc, #64]	; (8007a8c <EE_Init+0x38c>)
 8007a4c:	f009 fa74 	bl	8010f38 <FLASH_PageErase>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007a50:	480f      	ldr	r0, [pc, #60]	; (8007a90 <EE_Init+0x390>)
 8007a52:	f009 f9cb 	bl	8010dec <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK)
 8007a56:	2800      	cmp	r0, #0
 8007a58:	d003      	beq.n	8007a62 <EE_Init+0x362>
          return pFlash.ErrorCode;
 8007a5a:	4b0e      	ldr	r3, [pc, #56]	; (8007a94 <EE_Init+0x394>)
 8007a5c:	69dd      	ldr	r5, [r3, #28]
 8007a5e:	b2ad      	uxth	r5, r5
 8007a60:	e66f      	b.n	8007742 <EE_Init+0x42>
					FLASH_PageErase(PAGEA2_BASE_ADDRESS);
 8007a62:	480d      	ldr	r0, [pc, #52]	; (8007a98 <EE_Init+0x398>)
 8007a64:	f009 fa68 	bl	8010f38 <FLASH_PageErase>
					FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007a68:	4809      	ldr	r0, [pc, #36]	; (8007a90 <EE_Init+0x390>)
 8007a6a:	f009 f9bf 	bl	8010dec <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK)
 8007a6e:	2800      	cmp	r0, #0
 8007a70:	d105      	bne.n	8007a7e <EE_Init+0x37e>
						CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8007a72:	4a05      	ldr	r2, [pc, #20]	; (8007a88 <EE_Init+0x388>)
 8007a74:	6913      	ldr	r3, [r2, #16]
 8007a76:	2102      	movs	r1, #2
 8007a78:	438b      	bics	r3, r1
 8007a7a:	6113      	str	r3, [r2, #16]
 8007a7c:	e65e      	b.n	800773c <EE_Init+0x3c>
						return pFlash.ErrorCode;
 8007a7e:	4b05      	ldr	r3, [pc, #20]	; (8007a94 <EE_Init+0x394>)
 8007a80:	69dd      	ldr	r5, [r3, #28]
 8007a82:	b2ad      	uxth	r5, r5
 8007a84:	e65d      	b.n	8007742 <EE_Init+0x42>
 8007a86:	46c0      	nop			; (mov r8, r8)
 8007a88:	40022000 	.word	0x40022000
 8007a8c:	0801e000 	.word	0x0801e000
 8007a90:	0000c350 	.word	0x0000c350
 8007a94:	20006958 	.word	0x20006958
 8007a98:	0801e800 	.word	0x0801e800

08007a9c <StartDefaultTask>:

/*-----------------------------------------------------------*/

/* StartDefaultTask function */
void StartDefaultTask(void * argument)
{
 8007a9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007a9e:	46c6      	mov	lr, r8
 8007aa0:	b500      	push	{lr}
	
  /* Infinite loop */
  for(;;)
  {
		/* Switch indicator LED according to mode */
		switch (indMode)
 8007aa2:	4c2a      	ldr	r4, [pc, #168]	; (8007b4c <StartDefaultTask+0xb0>)
				indMode = IND_OFF;
				break;
			
			case IND_TOPOLOGY :
				RTOS_IND_blink(100);
				indMode = IND_OFF;
 8007aa4:	0026      	movs	r6, r4
				break;
			
			case IND_SHORT_BLINK :
				RTOS_IND_blink(30);
				indMode = IND_OFF;
 8007aa6:	46a0      	mov	r8, r4
 8007aa8:	e01f      	b.n	8007aea <StartDefaultTask+0x4e>
				RTOS_IND_blink(100);
 8007aaa:	2580      	movs	r5, #128	; 0x80
 8007aac:	012d      	lsls	r5, r5, #4
 8007aae:	2790      	movs	r7, #144	; 0x90
 8007ab0:	05ff      	lsls	r7, r7, #23
 8007ab2:	2201      	movs	r2, #1
 8007ab4:	0029      	movs	r1, r5
 8007ab6:	0038      	movs	r0, r7
 8007ab8:	f009 fba2 	bl	8011200 <HAL_GPIO_WritePin>
 8007abc:	2064      	movs	r0, #100	; 0x64
 8007abe:	f006 fa3e 	bl	800df3e <osDelay>
 8007ac2:	2200      	movs	r2, #0
 8007ac4:	0029      	movs	r1, r5
 8007ac6:	0038      	movs	r0, r7
 8007ac8:	f009 fb9a 	bl	8011200 <HAL_GPIO_WritePin>
				indMode = IND_OFF;
 8007acc:	2300      	movs	r3, #0
 8007ace:	7033      	strb	r3, [r6, #0]
			default:
				break;
		}
		
		/* Read button state */
		CheckAttachedButtons();
 8007ad0:	f000 f9dc 	bl	8007e8c <CheckAttachedButtons>
		
		/* Execute activated Command Snippets */
		ExecuteSnippet();
 8007ad4:	f7fd fbe4 	bl	80052a0 <ExecuteSnippet>
		
		/* Reset button state if no delay is needed by this module */
		if(needToDelayButtonStateReset != true)	delayButtonStateReset = false;
 8007ad8:	4b1d      	ldr	r3, [pc, #116]	; (8007b50 <StartDefaultTask+0xb4>)
 8007ada:	781b      	ldrb	r3, [r3, #0]
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d102      	bne.n	8007ae6 <StartDefaultTask+0x4a>
 8007ae0:	4b1c      	ldr	r3, [pc, #112]	; (8007b54 <StartDefaultTask+0xb8>)
 8007ae2:	2200      	movs	r2, #0
 8007ae4:	701a      	strb	r2, [r3, #0]
				
		taskYIELD();
 8007ae6:	f008 f92f 	bl	800fd48 <vPortYield>
		switch (indMode)
 8007aea:	7823      	ldrb	r3, [r4, #0]
 8007aec:	2b02      	cmp	r3, #2
 8007aee:	d0dc      	beq.n	8007aaa <StartDefaultTask+0xe>
 8007af0:	2b03      	cmp	r3, #3
 8007af2:	d016      	beq.n	8007b22 <StartDefaultTask+0x86>
 8007af4:	2b01      	cmp	r3, #1
 8007af6:	d1eb      	bne.n	8007ad0 <StartDefaultTask+0x34>
				RTOS_IND_blink(200);
 8007af8:	2580      	movs	r5, #128	; 0x80
 8007afa:	012d      	lsls	r5, r5, #4
 8007afc:	2790      	movs	r7, #144	; 0x90
 8007afe:	05ff      	lsls	r7, r7, #23
 8007b00:	2201      	movs	r2, #1
 8007b02:	0029      	movs	r1, r5
 8007b04:	0038      	movs	r0, r7
 8007b06:	f009 fb7b 	bl	8011200 <HAL_GPIO_WritePin>
 8007b0a:	20c8      	movs	r0, #200	; 0xc8
 8007b0c:	f006 fa17 	bl	800df3e <osDelay>
 8007b10:	2200      	movs	r2, #0
 8007b12:	0029      	movs	r1, r5
 8007b14:	0038      	movs	r0, r7
 8007b16:	f009 fb73 	bl	8011200 <HAL_GPIO_WritePin>
				indMode = IND_OFF;
 8007b1a:	4b0c      	ldr	r3, [pc, #48]	; (8007b4c <StartDefaultTask+0xb0>)
 8007b1c:	2200      	movs	r2, #0
 8007b1e:	701a      	strb	r2, [r3, #0]
				break;
 8007b20:	e7d6      	b.n	8007ad0 <StartDefaultTask+0x34>
				RTOS_IND_blink(30);
 8007b22:	2580      	movs	r5, #128	; 0x80
 8007b24:	012d      	lsls	r5, r5, #4
 8007b26:	2790      	movs	r7, #144	; 0x90
 8007b28:	05ff      	lsls	r7, r7, #23
 8007b2a:	2201      	movs	r2, #1
 8007b2c:	0029      	movs	r1, r5
 8007b2e:	0038      	movs	r0, r7
 8007b30:	f009 fb66 	bl	8011200 <HAL_GPIO_WritePin>
 8007b34:	201e      	movs	r0, #30
 8007b36:	f006 fa02 	bl	800df3e <osDelay>
 8007b3a:	2200      	movs	r2, #0
 8007b3c:	0029      	movs	r1, r5
 8007b3e:	0038      	movs	r0, r7
 8007b40:	f009 fb5e 	bl	8011200 <HAL_GPIO_WritePin>
				indMode = IND_OFF;
 8007b44:	2300      	movs	r3, #0
 8007b46:	4642      	mov	r2, r8
 8007b48:	7013      	strb	r3, [r2, #0]
				break;
 8007b4a:	e7c1      	b.n	8007ad0 <StartDefaultTask+0x34>
 8007b4c:	2000098a 	.word	0x2000098a
 8007b50:	20000f7b 	.word	0x20000f7b
 8007b54:	20000f7a 	.word	0x20000f7a

08007b58 <MX_FREERTOS_Init>:
{
 8007b58:	b570      	push	{r4, r5, r6, lr}
 8007b5a:	b08e      	sub	sp, #56	; 0x38
  xTaskCreate(StartDefaultTask, (const char *) "DefaultTask", (2*configMINIMAL_STACK_SIZE), NULL, osPriorityNormal-osPriorityIdle, &defaultTaskHandle);	
 8007b5c:	25a0      	movs	r5, #160	; 0xa0
 8007b5e:	006d      	lsls	r5, r5, #1
 8007b60:	2400      	movs	r4, #0
 8007b62:	9403      	str	r4, [sp, #12]
 8007b64:	9402      	str	r4, [sp, #8]
 8007b66:	4b53      	ldr	r3, [pc, #332]	; (8007cb4 <MX_FREERTOS_Init+0x15c>)
 8007b68:	9301      	str	r3, [sp, #4]
 8007b6a:	2603      	movs	r6, #3
 8007b6c:	9600      	str	r6, [sp, #0]
 8007b6e:	2300      	movs	r3, #0
 8007b70:	002a      	movs	r2, r5
 8007b72:	4951      	ldr	r1, [pc, #324]	; (8007cb8 <MX_FREERTOS_Init+0x160>)
 8007b74:	4851      	ldr	r0, [pc, #324]	; (8007cbc <MX_FREERTOS_Init+0x164>)
 8007b76:	f007 f803 	bl	800eb80 <xTaskGenericCreate>
	xTaskCreate(BackEndTask, (const char *) "BackEndTask", (2*configMINIMAL_STACK_SIZE), NULL, osPriorityNormal-osPriorityIdle, &BackEndTaskHandle);
 8007b7a:	9403      	str	r4, [sp, #12]
 8007b7c:	9402      	str	r4, [sp, #8]
 8007b7e:	4b50      	ldr	r3, [pc, #320]	; (8007cc0 <MX_FREERTOS_Init+0x168>)
 8007b80:	9301      	str	r3, [sp, #4]
 8007b82:	9600      	str	r6, [sp, #0]
 8007b84:	2300      	movs	r3, #0
 8007b86:	002a      	movs	r2, r5
 8007b88:	494e      	ldr	r1, [pc, #312]	; (8007cc4 <MX_FREERTOS_Init+0x16c>)
 8007b8a:	484f      	ldr	r0, [pc, #316]	; (8007cc8 <MX_FREERTOS_Init+0x170>)
 8007b8c:	f006 fff8 	bl	800eb80 <xTaskGenericCreate>
	xTaskCreate(UserTask, (const char *) "UserTask", (2*configMINIMAL_STACK_SIZE), NULL, osPriorityNormal-osPriorityIdle, &UserTaskHandle);
 8007b90:	9403      	str	r4, [sp, #12]
 8007b92:	9402      	str	r4, [sp, #8]
 8007b94:	4b4d      	ldr	r3, [pc, #308]	; (8007ccc <MX_FREERTOS_Init+0x174>)
 8007b96:	9301      	str	r3, [sp, #4]
 8007b98:	9600      	str	r6, [sp, #0]
 8007b9a:	2300      	movs	r3, #0
 8007b9c:	002a      	movs	r2, r5
 8007b9e:	494c      	ldr	r1, [pc, #304]	; (8007cd0 <MX_FREERTOS_Init+0x178>)
 8007ba0:	484c      	ldr	r0, [pc, #304]	; (8007cd4 <MX_FREERTOS_Init+0x17c>)
 8007ba2:	f006 ffed 	bl	800eb80 <xTaskGenericCreate>
	vRegisterCLICommands();
 8007ba6:	f7ff fa79 	bl	800709c <vRegisterCLICommands>
	xTaskCreate(prvCLITask, "CliTask",	(2*configMINIMAL_STACK_SIZE),	NULL,	osPriorityNormal-osPriorityIdle, &xCommandConsoleTaskHandle);		
 8007baa:	9403      	str	r4, [sp, #12]
 8007bac:	9402      	str	r4, [sp, #8]
 8007bae:	4b4a      	ldr	r3, [pc, #296]	; (8007cd8 <MX_FREERTOS_Init+0x180>)
 8007bb0:	9301      	str	r3, [sp, #4]
 8007bb2:	9600      	str	r6, [sp, #0]
 8007bb4:	2300      	movs	r3, #0
 8007bb6:	002a      	movs	r2, r5
 8007bb8:	4948      	ldr	r1, [pc, #288]	; (8007cdc <MX_FREERTOS_Init+0x184>)
 8007bba:	4849      	ldr	r0, [pc, #292]	; (8007ce0 <MX_FREERTOS_Init+0x188>)
 8007bbc:	f006 ffe0 	bl	800eb80 <xTaskGenericCreate>
  xTaskCreate(PxMessagingTask, (const char *) "P1MsgTask", configMINIMAL_STACK_SIZE, (void *) P1, osPriorityAboveNormal-osPriorityIdle, &P1MsgTaskHandle);
 8007bc0:	4d48      	ldr	r5, [pc, #288]	; (8007ce4 <MX_FREERTOS_Init+0x18c>)
 8007bc2:	9403      	str	r4, [sp, #12]
 8007bc4:	9402      	str	r4, [sp, #8]
 8007bc6:	4b48      	ldr	r3, [pc, #288]	; (8007ce8 <MX_FREERTOS_Init+0x190>)
 8007bc8:	9301      	str	r3, [sp, #4]
 8007bca:	3601      	adds	r6, #1
 8007bcc:	9600      	str	r6, [sp, #0]
 8007bce:	2301      	movs	r3, #1
 8007bd0:	22a0      	movs	r2, #160	; 0xa0
 8007bd2:	4946      	ldr	r1, [pc, #280]	; (8007cec <MX_FREERTOS_Init+0x194>)
 8007bd4:	0028      	movs	r0, r5
 8007bd6:	f006 ffd3 	bl	800eb80 <xTaskGenericCreate>
	xTaskCreate(PxMessagingTask, (const char *) "P2MsgTask", configMINIMAL_STACK_SIZE, (void *) P2, osPriorityAboveNormal-osPriorityIdle, &P2MsgTaskHandle);
 8007bda:	9403      	str	r4, [sp, #12]
 8007bdc:	9402      	str	r4, [sp, #8]
 8007bde:	4b44      	ldr	r3, [pc, #272]	; (8007cf0 <MX_FREERTOS_Init+0x198>)
 8007be0:	9301      	str	r3, [sp, #4]
 8007be2:	9600      	str	r6, [sp, #0]
 8007be4:	2302      	movs	r3, #2
 8007be6:	22a0      	movs	r2, #160	; 0xa0
 8007be8:	4942      	ldr	r1, [pc, #264]	; (8007cf4 <MX_FREERTOS_Init+0x19c>)
 8007bea:	0028      	movs	r0, r5
 8007bec:	f006 ffc8 	bl	800eb80 <xTaskGenericCreate>
	xTaskCreate(PxMessagingTask, (const char *) "P3MsgTask", configMINIMAL_STACK_SIZE, (void *) P3, osPriorityAboveNormal-osPriorityIdle, &P3MsgTaskHandle);
 8007bf0:	9403      	str	r4, [sp, #12]
 8007bf2:	9402      	str	r4, [sp, #8]
 8007bf4:	4b40      	ldr	r3, [pc, #256]	; (8007cf8 <MX_FREERTOS_Init+0x1a0>)
 8007bf6:	9301      	str	r3, [sp, #4]
 8007bf8:	9600      	str	r6, [sp, #0]
 8007bfa:	2303      	movs	r3, #3
 8007bfc:	22a0      	movs	r2, #160	; 0xa0
 8007bfe:	493f      	ldr	r1, [pc, #252]	; (8007cfc <MX_FREERTOS_Init+0x1a4>)
 8007c00:	0028      	movs	r0, r5
 8007c02:	f006 ffbd 	bl	800eb80 <xTaskGenericCreate>
	xTaskCreate(PxMessagingTask, (const char *) "P4MsgTask", configMINIMAL_STACK_SIZE, (void *) P4, osPriorityAboveNormal-osPriorityIdle, &P4MsgTaskHandle);
 8007c06:	9403      	str	r4, [sp, #12]
 8007c08:	9402      	str	r4, [sp, #8]
 8007c0a:	4b3d      	ldr	r3, [pc, #244]	; (8007d00 <MX_FREERTOS_Init+0x1a8>)
 8007c0c:	9301      	str	r3, [sp, #4]
 8007c0e:	9600      	str	r6, [sp, #0]
 8007c10:	2304      	movs	r3, #4
 8007c12:	22a0      	movs	r2, #160	; 0xa0
 8007c14:	493b      	ldr	r1, [pc, #236]	; (8007d04 <MX_FREERTOS_Init+0x1ac>)
 8007c16:	0028      	movs	r0, r5
 8007c18:	f006 ffb2 	bl	800eb80 <xTaskGenericCreate>
	xTaskCreate(PxMessagingTask, (const char *) "P5MsgTask", configMINIMAL_STACK_SIZE, (void *) P5, osPriorityAboveNormal-osPriorityIdle, &P5MsgTaskHandle);
 8007c1c:	9403      	str	r4, [sp, #12]
 8007c1e:	9402      	str	r4, [sp, #8]
 8007c20:	4b39      	ldr	r3, [pc, #228]	; (8007d08 <MX_FREERTOS_Init+0x1b0>)
 8007c22:	9301      	str	r3, [sp, #4]
 8007c24:	9600      	str	r6, [sp, #0]
 8007c26:	2305      	movs	r3, #5
 8007c28:	22a0      	movs	r2, #160	; 0xa0
 8007c2a:	4938      	ldr	r1, [pc, #224]	; (8007d0c <MX_FREERTOS_Init+0x1b4>)
 8007c2c:	0028      	movs	r0, r5
 8007c2e:	f006 ffa7 	bl	800eb80 <xTaskGenericCreate>
	osSemaphoreDef(SemaphoreP1); PxRxSemaphoreHandle[P1] = osSemaphoreCreate(osSemaphore(SemaphoreP1), 1);
 8007c32:	940d      	str	r4, [sp, #52]	; 0x34
 8007c34:	2101      	movs	r1, #1
 8007c36:	a80d      	add	r0, sp, #52	; 0x34
 8007c38:	f006 f989 	bl	800df4e <osSemaphoreCreate>
 8007c3c:	4e34      	ldr	r6, [pc, #208]	; (8007d10 <MX_FREERTOS_Init+0x1b8>)
 8007c3e:	6070      	str	r0, [r6, #4]
	osSemaphoreDef(SemaphoreP2); PxTxSemaphoreHandle[P1] = osSemaphoreCreate(osSemaphore(SemaphoreP2), 1);
 8007c40:	940c      	str	r4, [sp, #48]	; 0x30
 8007c42:	2101      	movs	r1, #1
 8007c44:	a80c      	add	r0, sp, #48	; 0x30
 8007c46:	f006 f982 	bl	800df4e <osSemaphoreCreate>
 8007c4a:	4d32      	ldr	r5, [pc, #200]	; (8007d14 <MX_FREERTOS_Init+0x1bc>)
 8007c4c:	6068      	str	r0, [r5, #4]
	osSemaphoreDef(SemaphoreP3); PxRxSemaphoreHandle[P2] = osSemaphoreCreate(osSemaphore(SemaphoreP3), 1);
 8007c4e:	940b      	str	r4, [sp, #44]	; 0x2c
 8007c50:	2101      	movs	r1, #1
 8007c52:	a80b      	add	r0, sp, #44	; 0x2c
 8007c54:	f006 f97b 	bl	800df4e <osSemaphoreCreate>
 8007c58:	60b0      	str	r0, [r6, #8]
	osSemaphoreDef(SemaphoreP4); PxTxSemaphoreHandle[P2] = osSemaphoreCreate(osSemaphore(SemaphoreP4), 1);
 8007c5a:	940a      	str	r4, [sp, #40]	; 0x28
 8007c5c:	2101      	movs	r1, #1
 8007c5e:	a80a      	add	r0, sp, #40	; 0x28
 8007c60:	f006 f975 	bl	800df4e <osSemaphoreCreate>
 8007c64:	60a8      	str	r0, [r5, #8]
	osSemaphoreDef(SemaphoreP5); PxRxSemaphoreHandle[P3] = osSemaphoreCreate(osSemaphore(SemaphoreP5), 1);
 8007c66:	9409      	str	r4, [sp, #36]	; 0x24
 8007c68:	2101      	movs	r1, #1
 8007c6a:	a809      	add	r0, sp, #36	; 0x24
 8007c6c:	f006 f96f 	bl	800df4e <osSemaphoreCreate>
 8007c70:	60f0      	str	r0, [r6, #12]
	osSemaphoreDef(SemaphoreP6); PxTxSemaphoreHandle[P3] = osSemaphoreCreate(osSemaphore(SemaphoreP6), 1);
 8007c72:	9408      	str	r4, [sp, #32]
 8007c74:	2101      	movs	r1, #1
 8007c76:	a808      	add	r0, sp, #32
 8007c78:	f006 f969 	bl	800df4e <osSemaphoreCreate>
 8007c7c:	60e8      	str	r0, [r5, #12]
	osSemaphoreDef(SemaphoreP7); PxRxSemaphoreHandle[P4] = osSemaphoreCreate(osSemaphore(SemaphoreP7), 1);
 8007c7e:	9407      	str	r4, [sp, #28]
 8007c80:	2101      	movs	r1, #1
 8007c82:	a807      	add	r0, sp, #28
 8007c84:	f006 f963 	bl	800df4e <osSemaphoreCreate>
 8007c88:	6130      	str	r0, [r6, #16]
	osSemaphoreDef(SemaphoreP8); PxTxSemaphoreHandle[P4] = osSemaphoreCreate(osSemaphore(SemaphoreP8), 1);
 8007c8a:	9406      	str	r4, [sp, #24]
 8007c8c:	2101      	movs	r1, #1
 8007c8e:	a806      	add	r0, sp, #24
 8007c90:	f006 f95d 	bl	800df4e <osSemaphoreCreate>
 8007c94:	6128      	str	r0, [r5, #16]
	osSemaphoreDef(SemaphoreP9); PxRxSemaphoreHandle[P5] = osSemaphoreCreate(osSemaphore(SemaphoreP9), 1);
 8007c96:	9405      	str	r4, [sp, #20]
 8007c98:	2101      	movs	r1, #1
 8007c9a:	a805      	add	r0, sp, #20
 8007c9c:	f006 f957 	bl	800df4e <osSemaphoreCreate>
 8007ca0:	6170      	str	r0, [r6, #20]
	osSemaphoreDef(SemaphoreP10); PxTxSemaphoreHandle[P5] = osSemaphoreCreate(osSemaphore(SemaphoreP10), 1);
 8007ca2:	9404      	str	r4, [sp, #16]
 8007ca4:	2101      	movs	r1, #1
 8007ca6:	a804      	add	r0, sp, #16
 8007ca8:	f006 f951 	bl	800df4e <osSemaphoreCreate>
 8007cac:	6168      	str	r0, [r5, #20]
}
 8007cae:	b00e      	add	sp, #56	; 0x38
 8007cb0:	bd70      	pop	{r4, r5, r6, pc}
 8007cb2:	46c0      	nop			; (mov r8, r8)
 8007cb4:	20000f30 	.word	0x20000f30
 8007cb8:	0801c134 	.word	0x0801c134
 8007cbc:	08007a9d 	.word	0x08007a9d
 8007cc0:	20000f14 	.word	0x20000f14
 8007cc4:	0801c140 	.word	0x0801c140
 8007cc8:	080090d5 	.word	0x080090d5
 8007ccc:	20000f2c 	.word	0x20000f2c
 8007cd0:	0801c14c 	.word	0x0801c14c
 8007cd4:	08016483 	.word	0x08016483
 8007cd8:	20000f38 	.word	0x20000f38
 8007cdc:	0801c158 	.word	0x0801c158
 8007ce0:	08004f41 	.word	0x08004f41
 8007ce4:	080094a1 	.word	0x080094a1
 8007ce8:	20000f18 	.word	0x20000f18
 8007cec:	0801c160 	.word	0x0801c160
 8007cf0:	20000f1c 	.word	0x20000f1c
 8007cf4:	0801c16c 	.word	0x0801c16c
 8007cf8:	20000f20 	.word	0x20000f20
 8007cfc:	0801c178 	.word	0x0801c178
 8007d00:	20000f24 	.word	0x20000f24
 8007d04:	0801c184 	.word	0x0801c184
 8007d08:	20000f28 	.word	0x20000f28
 8007d0c:	0801c190 	.word	0x0801c190
 8007d10:	20006404 	.word	0x20006404
 8007d14:	200063e8 	.word	0x200063e8

08007d18 <vMainConfigureTimerForRunTimeStats>:
}

/*-----------------------------------------------------------*/

void vMainConfigureTimerForRunTimeStats( void )
{
 8007d18:	b510      	push	{r4, lr}
	/* How many clocks are there per tenth of a millisecond? */
	ulClocksPer10thOfAMilliSecond = configCPU_CLOCK_HZ / 10000UL;
 8007d1a:	4b04      	ldr	r3, [pc, #16]	; (8007d2c <vMainConfigureTimerForRunTimeStats+0x14>)
 8007d1c:	6818      	ldr	r0, [r3, #0]
 8007d1e:	4904      	ldr	r1, [pc, #16]	; (8007d30 <vMainConfigureTimerForRunTimeStats+0x18>)
 8007d20:	f7f8 fa16 	bl	8000150 <__udivsi3>
 8007d24:	4b03      	ldr	r3, [pc, #12]	; (8007d34 <vMainConfigureTimerForRunTimeStats+0x1c>)
 8007d26:	6018      	str	r0, [r3, #0]
}
 8007d28:	bd10      	pop	{r4, pc}
 8007d2a:	46c0      	nop			; (mov r8, r8)
 8007d2c:	20000094 	.word	0x20000094
 8007d30:	00002710 	.word	0x00002710
 8007d34:	20000f34 	.word	0x20000f34

08007d38 <ulMainGetRunTimeCounterValue>:

/*-----------------------------------------------------------*/

uint32_t ulMainGetRunTimeCounterValue( void )
{
 8007d38:	b570      	push	{r4, r5, r6, lr}
uint32_t ulSysTickCounts, ulTickCount, ulReturn;
const uint32_t ulSysTickReloadValue = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007d3a:	4b0f      	ldr	r3, [pc, #60]	; (8007d78 <ulMainGetRunTimeCounterValue+0x40>)
 8007d3c:	6818      	ldr	r0, [r3, #0]
 8007d3e:	21fa      	movs	r1, #250	; 0xfa
 8007d40:	0089      	lsls	r1, r1, #2
 8007d42:	f7f8 fa05 	bl	8000150 <__udivsi3>
 8007d46:	1e45      	subs	r5, r0, #1
	timer peripheral. */


	/* The SysTick is a down counter.  How many clocks have passed since it was
	last reloaded? */
	ulSysTickCounts = ulSysTickReloadValue - *pulCurrentSysTickCount;
 8007d48:	4b0c      	ldr	r3, [pc, #48]	; (8007d7c <ulMainGetRunTimeCounterValue+0x44>)
 8007d4a:	681c      	ldr	r4, [r3, #0]

	/* How many times has it overflowed? */
	ulTickCount = xTaskGetTickCountFromISR();
 8007d4c:	f007 f8b8 	bl	800eec0 <xTaskGetTickCountFromISR>
 8007d50:	0003      	movs	r3, r0

	/* Is there a SysTick interrupt pending? */
	if( ( *pulInterruptCTRLState & ulSysTickPendingBit ) != 0UL )
 8007d52:	4a0b      	ldr	r2, [pc, #44]	; (8007d80 <ulMainGetRunTimeCounterValue+0x48>)
 8007d54:	6812      	ldr	r2, [r2, #0]
	ulSysTickCounts = ulSysTickReloadValue - *pulCurrentSysTickCount;
 8007d56:	1b28      	subs	r0, r5, r4
	if( ( *pulInterruptCTRLState & ulSysTickPendingBit ) != 0UL )
 8007d58:	0152      	lsls	r2, r2, #5
 8007d5a:	d503      	bpl.n	8007d64 <ulMainGetRunTimeCounterValue+0x2c>
	{
		/* There is a SysTick interrupt pending, so the SysTick has overflowed
		but the tick count not yet incremented. */
		ulTickCount++;
 8007d5c:	3301      	adds	r3, #1

		/* Read the SysTick again, as the overflow might have occurred since
		it was read last. */
		ulSysTickCounts = ulSysTickReloadValue - *pulCurrentSysTickCount;
 8007d5e:	4a07      	ldr	r2, [pc, #28]	; (8007d7c <ulMainGetRunTimeCounterValue+0x44>)
 8007d60:	6810      	ldr	r0, [r2, #0]
 8007d62:	1a28      	subs	r0, r5, r0
	}

	/* Convert the tick count into tenths of a millisecond.  THIS ASSUMES
	configTICK_RATE_HZ is 1000! */
	ulReturn = ( ulTickCount * 10UL ) ;
 8007d64:	009c      	lsls	r4, r3, #2
 8007d66:	18e4      	adds	r4, r4, r3
 8007d68:	0064      	lsls	r4, r4, #1

	/* Add on the number of tenths of a millisecond that have passed since the
	tick count last got updated. */
	ulReturn += ( ulSysTickCounts / ulClocksPer10thOfAMilliSecond );
 8007d6a:	4b06      	ldr	r3, [pc, #24]	; (8007d84 <ulMainGetRunTimeCounterValue+0x4c>)
 8007d6c:	6819      	ldr	r1, [r3, #0]
 8007d6e:	f7f8 f9ef 	bl	8000150 <__udivsi3>
 8007d72:	1900      	adds	r0, r0, r4

	return ulReturn;
}
 8007d74:	bd70      	pop	{r4, r5, r6, pc}
 8007d76:	46c0      	nop			; (mov r8, r8)
 8007d78:	20000094 	.word	0x20000094
 8007d7c:	e000e018 	.word	0xe000e018
 8007d80:	e000ed04 	.word	0xe000ed04
 8007d84:	20000f34 	.word	0x20000f34

08007d88 <buttonPressedCallback>:
/* --- Button press callback. DO NOT MODIFY THIS CALLBACK. 
		This function is declared as __weak to be overwritten by other implementations in user file.
*/
__weak void buttonPressedCallback(uint8_t port)
{	
}
 8007d88:	4770      	bx	lr

08007d8a <buttonReleasedCallback>:
/* --- Button release callback. DO NOT MODIFY THIS CALLBACK. 
		This function is declared as __weak to be overwritten by other implementations in user file.
*/
__weak void buttonReleasedCallback(uint8_t port)
{	
}
 8007d8a:	4770      	bx	lr

08007d8c <buttonClickedCallback>:
/* --- Button single click callback. DO NOT MODIFY THIS CALLBACK. 
		This function is declared as __weak to be overwritten by other implementations in user file.
*/
__weak void buttonClickedCallback(uint8_t port)
{	
}
 8007d8c:	4770      	bx	lr

08007d8e <buttonDblClickedCallback>:
/* --- Button double click callback. DO NOT MODIFY THIS CALLBACK. 
		This function is declared as __weak to be overwritten by other implementations in user file.
*/
__weak void buttonDblClickedCallback(uint8_t port)
{	
}
 8007d8e:	4770      	bx	lr

08007d90 <buttonPressedForXCallback>:
/* --- Button pressed_for_x callbacks. DO NOT MODIFY THIS CALLBACK. 
		This function is declared as __weak to be overwritten by other implementations in user file.
*/
__weak void buttonPressedForXCallback(uint8_t port, uint8_t eventType)
{	
}
 8007d90:	4770      	bx	lr

08007d92 <buttonReleasedForYCallback>:
/* --- Button released_for_y callbacks. DO NOT MODIFY THIS CALLBACK. 
		This function is declared as __weak to be overwritten by other implementations in user file.
*/
__weak void buttonReleasedForYCallback(uint8_t port, uint8_t eventType)
{	
}
 8007d92:	4770      	bx	lr

08007d94 <CheckForTimedButtonPress>:
/*-----------------------------------------------------------*/	

/* --- Check for timed press button events
*/
BOS_Status CheckForTimedButtonPress(uint8_t port)
{
 8007d94:	b510      	push	{r4, lr}
	BOS_Status result = BOS_OK;
	uint32_t t1 = button[port].pressedX1Sec, t2 = button[port].pressedX2Sec, t3 = button[port].pressedX3Sec;
 8007d96:	00c2      	lsls	r2, r0, #3
 8007d98:	1812      	adds	r2, r2, r0
 8007d9a:	4b1b      	ldr	r3, [pc, #108]	; (8007e08 <CheckForTimedButtonPress+0x74>)
 8007d9c:	189b      	adds	r3, r3, r2
 8007d9e:	789c      	ldrb	r4, [r3, #2]
	
	/* Convert to ms */
	t1 *= 1000; t2 *= 1000; t3 *= 1000;
	
	if (pressCounter[port] == t1)	
 8007da0:	0082      	lsls	r2, r0, #2
 8007da2:	4b1a      	ldr	r3, [pc, #104]	; (8007e0c <CheckForTimedButtonPress+0x78>)
 8007da4:	58d1      	ldr	r1, [r2, r3]
	t1 *= 1000; t2 *= 1000; t3 *= 1000;
 8007da6:	0163      	lsls	r3, r4, #5
 8007da8:	1b1b      	subs	r3, r3, r4
 8007daa:	009b      	lsls	r3, r3, #2
 8007dac:	191b      	adds	r3, r3, r4
 8007dae:	00db      	lsls	r3, r3, #3
	if (pressCounter[port] == t1)	
 8007db0:	4299      	cmp	r1, r3
 8007db2:	d01c      	beq.n	8007dee <CheckForTimedButtonPress+0x5a>
	uint32_t t1 = button[port].pressedX1Sec, t2 = button[port].pressedX2Sec, t3 = button[port].pressedX3Sec;
 8007db4:	00c2      	lsls	r2, r0, #3
 8007db6:	1812      	adds	r2, r2, r0
 8007db8:	4b13      	ldr	r3, [pc, #76]	; (8007e08 <CheckForTimedButtonPress+0x74>)
 8007dba:	189b      	adds	r3, r3, r2
 8007dbc:	78dc      	ldrb	r4, [r3, #3]
	t1 *= 1000; t2 *= 1000; t3 *= 1000;
 8007dbe:	0163      	lsls	r3, r4, #5
 8007dc0:	1b1b      	subs	r3, r3, r4
 8007dc2:	009b      	lsls	r3, r3, #2
 8007dc4:	191b      	adds	r3, r3, r4
 8007dc6:	00db      	lsls	r3, r3, #3
	{	
		button[port].state = PRESSED_FOR_X1_SEC;
	}
	else if (pressCounter[port] == t2)	
 8007dc8:	4299      	cmp	r1, r3
 8007dca:	d017      	beq.n	8007dfc <CheckForTimedButtonPress+0x68>
	uint32_t t1 = button[port].pressedX1Sec, t2 = button[port].pressedX2Sec, t3 = button[port].pressedX3Sec;
 8007dcc:	00c2      	lsls	r2, r0, #3
 8007dce:	1812      	adds	r2, r2, r0
 8007dd0:	4b0d      	ldr	r3, [pc, #52]	; (8007e08 <CheckForTimedButtonPress+0x74>)
 8007dd2:	189b      	adds	r3, r3, r2
 8007dd4:	791c      	ldrb	r4, [r3, #4]
	t1 *= 1000; t2 *= 1000; t3 *= 1000;
 8007dd6:	0163      	lsls	r3, r4, #5
 8007dd8:	1b1b      	subs	r3, r3, r4
 8007dda:	009b      	lsls	r3, r3, #2
 8007ddc:	191b      	adds	r3, r3, r4
 8007dde:	00db      	lsls	r3, r3, #3
	{	
		button[port].state = PRESSED_FOR_X2_SEC;
	}		
	else if (pressCounter[port] == t3)	
 8007de0:	4299      	cmp	r1, r3
 8007de2:	d109      	bne.n	8007df8 <CheckForTimedButtonPress+0x64>
	{	
		button[port].state = PRESSED_FOR_X2_SEC;
 8007de4:	0010      	movs	r0, r2
 8007de6:	4b08      	ldr	r3, [pc, #32]	; (8007e08 <CheckForTimedButtonPress+0x74>)
 8007de8:	220a      	movs	r2, #10
 8007dea:	54c2      	strb	r2, [r0, r3]
 8007dec:	e004      	b.n	8007df8 <CheckForTimedButtonPress+0x64>
		button[port].state = PRESSED_FOR_X1_SEC;
 8007dee:	00c3      	lsls	r3, r0, #3
 8007df0:	1818      	adds	r0, r3, r0
 8007df2:	4b05      	ldr	r3, [pc, #20]	; (8007e08 <CheckForTimedButtonPress+0x74>)
 8007df4:	2209      	movs	r2, #9
 8007df6:	54c2      	strb	r2, [r0, r3]
	}	

	return result;	
}
 8007df8:	2000      	movs	r0, #0
 8007dfa:	bd10      	pop	{r4, pc}
		button[port].state = PRESSED_FOR_X2_SEC;
 8007dfc:	0010      	movs	r0, r2
 8007dfe:	4b02      	ldr	r3, [pc, #8]	; (8007e08 <CheckForTimedButtonPress+0x74>)
 8007e00:	220a      	movs	r2, #10
 8007e02:	54c2      	strb	r2, [r0, r3]
 8007e04:	e7f8      	b.n	8007df8 <CheckForTimedButtonPress+0x64>
 8007e06:	46c0      	nop			; (mov r8, r8)
 8007e08:	20000f3c 	.word	0x20000f3c
 8007e0c:	20000f7c 	.word	0x20000f7c

08007e10 <CheckForTimedButtonRelease>:
/*-----------------------------------------------------------*/	

/* --- Check for timed release button events
*/
BOS_Status CheckForTimedButtonRelease(uint8_t port)
{
 8007e10:	b510      	push	{r4, lr}
	BOS_Status result = BOS_OK;
	uint32_t t1 = button[port].releasedY1Sec, t2 = button[port].releasedY2Sec, t3 = button[port].releasedY3Sec;
 8007e12:	00c2      	lsls	r2, r0, #3
 8007e14:	1812      	adds	r2, r2, r0
 8007e16:	4b1b      	ldr	r3, [pc, #108]	; (8007e84 <CheckForTimedButtonRelease+0x74>)
 8007e18:	189b      	adds	r3, r3, r2
 8007e1a:	795c      	ldrb	r4, [r3, #5]

	/* Convert to ms */
	t1 *= 1000; t2 *= 1000; t3 *= 1000;
	
	if (releaseCounter[port] == t1)	
 8007e1c:	0082      	lsls	r2, r0, #2
 8007e1e:	4b1a      	ldr	r3, [pc, #104]	; (8007e88 <CheckForTimedButtonRelease+0x78>)
 8007e20:	58d1      	ldr	r1, [r2, r3]
	t1 *= 1000; t2 *= 1000; t3 *= 1000;
 8007e22:	0163      	lsls	r3, r4, #5
 8007e24:	1b1b      	subs	r3, r3, r4
 8007e26:	009b      	lsls	r3, r3, #2
 8007e28:	191b      	adds	r3, r3, r4
 8007e2a:	00db      	lsls	r3, r3, #3
	if (releaseCounter[port] == t1)	
 8007e2c:	4299      	cmp	r1, r3
 8007e2e:	d01c      	beq.n	8007e6a <CheckForTimedButtonRelease+0x5a>
	uint32_t t1 = button[port].releasedY1Sec, t2 = button[port].releasedY2Sec, t3 = button[port].releasedY3Sec;
 8007e30:	00c2      	lsls	r2, r0, #3
 8007e32:	1812      	adds	r2, r2, r0
 8007e34:	4b13      	ldr	r3, [pc, #76]	; (8007e84 <CheckForTimedButtonRelease+0x74>)
 8007e36:	189b      	adds	r3, r3, r2
 8007e38:	799c      	ldrb	r4, [r3, #6]
	t1 *= 1000; t2 *= 1000; t3 *= 1000;
 8007e3a:	0163      	lsls	r3, r4, #5
 8007e3c:	1b1b      	subs	r3, r3, r4
 8007e3e:	009b      	lsls	r3, r3, #2
 8007e40:	191b      	adds	r3, r3, r4
 8007e42:	00db      	lsls	r3, r3, #3
	{	
		button[port].state = RELEASED_FOR_Y1_SEC;
	}
	else if (releaseCounter[port] == t2)	
 8007e44:	4299      	cmp	r1, r3
 8007e46:	d017      	beq.n	8007e78 <CheckForTimedButtonRelease+0x68>
	uint32_t t1 = button[port].releasedY1Sec, t2 = button[port].releasedY2Sec, t3 = button[port].releasedY3Sec;
 8007e48:	00c2      	lsls	r2, r0, #3
 8007e4a:	1812      	adds	r2, r2, r0
 8007e4c:	4b0d      	ldr	r3, [pc, #52]	; (8007e84 <CheckForTimedButtonRelease+0x74>)
 8007e4e:	189b      	adds	r3, r3, r2
 8007e50:	79dc      	ldrb	r4, [r3, #7]
	t1 *= 1000; t2 *= 1000; t3 *= 1000;
 8007e52:	0163      	lsls	r3, r4, #5
 8007e54:	1b1b      	subs	r3, r3, r4
 8007e56:	009b      	lsls	r3, r3, #2
 8007e58:	191b      	adds	r3, r3, r4
 8007e5a:	00db      	lsls	r3, r3, #3
	{	
		button[port].state = RELEASED_FOR_Y2_SEC;
	}		
	else if (releaseCounter[port] == t3)	
 8007e5c:	4299      	cmp	r1, r3
 8007e5e:	d109      	bne.n	8007e74 <CheckForTimedButtonRelease+0x64>
	{	
		button[port].state = RELEASED_FOR_Y2_SEC;
 8007e60:	0010      	movs	r0, r2
 8007e62:	4b08      	ldr	r3, [pc, #32]	; (8007e84 <CheckForTimedButtonRelease+0x74>)
 8007e64:	220d      	movs	r2, #13
 8007e66:	54c2      	strb	r2, [r0, r3]
 8007e68:	e004      	b.n	8007e74 <CheckForTimedButtonRelease+0x64>
		button[port].state = RELEASED_FOR_Y1_SEC;
 8007e6a:	00c3      	lsls	r3, r0, #3
 8007e6c:	1818      	adds	r0, r3, r0
 8007e6e:	4b05      	ldr	r3, [pc, #20]	; (8007e84 <CheckForTimedButtonRelease+0x74>)
 8007e70:	220c      	movs	r2, #12
 8007e72:	54c2      	strb	r2, [r0, r3]
	}	

	return result;	
}
 8007e74:	2000      	movs	r0, #0
 8007e76:	bd10      	pop	{r4, pc}
		button[port].state = RELEASED_FOR_Y2_SEC;
 8007e78:	0010      	movs	r0, r2
 8007e7a:	4b02      	ldr	r3, [pc, #8]	; (8007e84 <CheckForTimedButtonRelease+0x74>)
 8007e7c:	220d      	movs	r2, #13
 8007e7e:	54c2      	strb	r2, [r0, r3]
 8007e80:	e7f8      	b.n	8007e74 <CheckForTimedButtonRelease+0x64>
 8007e82:	46c0      	nop			; (mov r8, r8)
 8007e84:	20000f3c 	.word	0x20000f3c
 8007e88:	20000f94 	.word	0x20000f94

08007e8c <CheckAttachedButtons>:
{
 8007e8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007e8e:	46de      	mov	lr, fp
 8007e90:	4657      	mov	r7, sl
 8007e92:	464e      	mov	r6, r9
 8007e94:	4645      	mov	r5, r8
 8007e96:	b5e0      	push	{r5, r6, r7, lr}
 8007e98:	b089      	sub	sp, #36	; 0x24
	for(uint8_t i=1 ; i<=NumOfPorts ; i++)
 8007e9a:	4dbd      	ldr	r5, [pc, #756]	; (8008190 <CheckAttachedButtons+0x304>)
 8007e9c:	4ebd      	ldr	r6, [pc, #756]	; (8008194 <CheckAttachedButtons+0x308>)
 8007e9e:	4bbe      	ldr	r3, [pc, #760]	; (8008198 <CheckAttachedButtons+0x30c>)
 8007ea0:	4698      	mov	r8, r3
 8007ea2:	4bbe      	ldr	r3, [pc, #760]	; (800819c <CheckAttachedButtons+0x310>)
 8007ea4:	469a      	mov	sl, r3
 8007ea6:	2401      	movs	r4, #1
	uint8_t connected = GPIO_PIN_RESET, state = 0;
 8007ea8:	2300      	movs	r3, #0
 8007eaa:	9303      	str	r3, [sp, #12]
 8007eac:	9302      	str	r3, [sp, #8]
 8007eae:	e121      	b.n	80080f4 <CheckAttachedButtons+0x268>
				HAL_GPIO_WritePin((GPIO_TypeDef *)TX_Port, TX_Pin, GPIO_PIN_SET); Delay_us(10);
 8007eb0:	230e      	movs	r3, #14
 8007eb2:	aa02      	add	r2, sp, #8
 8007eb4:	4694      	mov	ip, r2
 8007eb6:	4463      	add	r3, ip
 8007eb8:	8819      	ldrh	r1, [r3, #0]
 8007eba:	2201      	movs	r2, #1
 8007ebc:	9807      	ldr	r0, [sp, #28]
 8007ebe:	f009 f99f 	bl	8011200 <HAL_GPIO_WritePin>
 8007ec2:	200a      	movs	r0, #10
 8007ec4:	f005 fd3c 	bl	800d940 <StartMicroDelay>
				connected = HAL_GPIO_ReadPin((GPIO_TypeDef *)RX_Port, RX_Pin); 
 8007ec8:	ab05      	add	r3, sp, #20
 8007eca:	8819      	ldrh	r1, [r3, #0]
 8007ecc:	9806      	ldr	r0, [sp, #24]
 8007ece:	f009 f991 	bl	80111f4 <HAL_GPIO_ReadPin>
 8007ed2:	9002      	str	r0, [sp, #8]
 8007ed4:	e134      	b.n	8008140 <CheckAttachedButtons+0x2b4>
			switch (button[i].type)
 8007ed6:	2b04      	cmp	r3, #4
 8007ed8:	d10e      	bne.n	8007ef8 <CheckAttachedButtons+0x6c>
					if (connected == GPIO_PIN_SET)	
 8007eda:	9b02      	ldr	r3, [sp, #8]
 8007edc:	2b01      	cmp	r3, #1
 8007ede:	d100      	bne.n	8007ee2 <CheckAttachedButtons+0x56>
 8007ee0:	e1d7      	b.n	8008292 <CheckAttachedButtons+0x406>
					else if (connected == GPIO_PIN_RESET) 
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d108      	bne.n	8007ef8 <CheckAttachedButtons+0x6c>
 8007ee6:	2302      	movs	r3, #2
 8007ee8:	9303      	str	r3, [sp, #12]
 8007eea:	e031      	b.n	8007f50 <CheckAttachedButtons+0xc4>
					if (connected == GPIO_PIN_SET)	
 8007eec:	9b02      	ldr	r3, [sp, #8]
 8007eee:	2b01      	cmp	r3, #1
 8007ef0:	d02c      	beq.n	8007f4c <CheckAttachedButtons+0xc0>
					else if (connected == GPIO_PIN_RESET)
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d100      	bne.n	8007ef8 <CheckAttachedButtons+0x6c>
 8007ef6:	e1c9      	b.n	800828c <CheckAttachedButtons+0x400>
			if (state == CLOSED || state == ON)												
 8007ef8:	9b03      	ldr	r3, [sp, #12]
 8007efa:	2b04      	cmp	r3, #4
 8007efc:	d028      	beq.n	8007f50 <CheckAttachedButtons+0xc4>
 8007efe:	2b02      	cmp	r3, #2
 8007f00:	d026      	beq.n	8007f50 <CheckAttachedButtons+0xc4>
			if (state == OPEN || state == OFF)												
 8007f02:	23fd      	movs	r3, #253	; 0xfd
 8007f04:	9a03      	ldr	r2, [sp, #12]
 8007f06:	4013      	ands	r3, r2
 8007f08:	2b01      	cmp	r3, #1
 8007f0a:	d129      	bne.n	8007f60 <CheckAttachedButtons+0xd4>
				if (releaseCounter[i] < 0xFFFF)
 8007f0c:	0031      	movs	r1, r6
 8007f0e:	6872      	ldr	r2, [r6, #4]
 8007f10:	48a3      	ldr	r0, [pc, #652]	; (80081a0 <CheckAttachedButtons+0x314>)
					releaseCounter[i] = 0;																	// Reset debounce counter		
 8007f12:	2300      	movs	r3, #0
				if (releaseCounter[i] < 0xFFFF)
 8007f14:	4282      	cmp	r2, r0
 8007f16:	d800      	bhi.n	8007f1a <CheckAttachedButtons+0x8e>
					++releaseCounter[i];																		// Advance the debounce counter
 8007f18:	1c53      	adds	r3, r2, #1
 8007f1a:	604b      	str	r3, [r1, #4]
				if (clicked == 2 && dblCounter[i] <= BOS.buttons.maxInterClickTime)				// Advance the inter-click counter		
 8007f1c:	4ba1      	ldr	r3, [pc, #644]	; (80081a4 <CheckAttachedButtons+0x318>)
 8007f1e:	781b      	ldrb	r3, [r3, #0]
 8007f20:	2b02      	cmp	r3, #2
 8007f22:	d045      	beq.n	8007fb0 <CheckAttachedButtons+0x124>
				else if (dblCounter[i] > BOS.buttons.maxInterClickTime)	{
 8007f24:	4653      	mov	r3, sl
 8007f26:	785a      	ldrb	r2, [r3, #1]
 8007f28:	4b9f      	ldr	r3, [pc, #636]	; (80081a8 <CheckAttachedButtons+0x31c>)
 8007f2a:	795b      	ldrb	r3, [r3, #5]
 8007f2c:	429a      	cmp	r2, r3
 8007f2e:	d917      	bls.n	8007f60 <CheckAttachedButtons+0xd4>
					clicked = 0;
 8007f30:	2300      	movs	r3, #0
 8007f32:	4a9c      	ldr	r2, [pc, #624]	; (80081a4 <CheckAttachedButtons+0x318>)
 8007f34:	7013      	strb	r3, [r2, #0]
					dblCounter[i] = 0;																			// Reset the inter-click counter
 8007f36:	4652      	mov	r2, sl
 8007f38:	7053      	strb	r3, [r2, #1]
 8007f3a:	e011      	b.n	8007f60 <CheckAttachedButtons+0xd4>
					if (connected == GPIO_PIN_SET)	
 8007f3c:	9b02      	ldr	r3, [sp, #8]
 8007f3e:	2b01      	cmp	r3, #1
 8007f40:	d02f      	beq.n	8007fa2 <CheckAttachedButtons+0x116>
					else if (connected == GPIO_PIN_RESET) 
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d1d8      	bne.n	8007ef8 <CheckAttachedButtons+0x6c>
						state = OFF;
 8007f46:	2301      	movs	r3, #1
 8007f48:	9303      	str	r3, [sp, #12]
 8007f4a:	e7df      	b.n	8007f0c <CheckAttachedButtons+0x80>
						state = CLOSED;
 8007f4c:	2304      	movs	r3, #4
 8007f4e:	9303      	str	r3, [sp, #12]
				if (pressCounter[i] < 0xFFFF)	
 8007f50:	4643      	mov	r3, r8
 8007f52:	685b      	ldr	r3, [r3, #4]
 8007f54:	4a92      	ldr	r2, [pc, #584]	; (80081a0 <CheckAttachedButtons+0x314>)
 8007f56:	4293      	cmp	r3, r2
 8007f58:	d826      	bhi.n	8007fa8 <CheckAttachedButtons+0x11c>
					++pressCounter[i];																			// Advance the debounce counter
 8007f5a:	3301      	adds	r3, #1
 8007f5c:	4642      	mov	r2, r8
 8007f5e:	6053      	str	r3, [r2, #4]
			if (pressCounter[i] < BOS.buttons.debounce) 									
 8007f60:	4647      	mov	r7, r8
 8007f62:	687a      	ldr	r2, [r7, #4]
 8007f64:	4b90      	ldr	r3, [pc, #576]	; (80081a8 <CheckAttachedButtons+0x31c>)
 8007f66:	881b      	ldrh	r3, [r3, #0]
 8007f68:	429a      	cmp	r2, r3
 8007f6a:	d352      	bcc.n	8008012 <CheckAttachedButtons+0x186>
				if (pressCounter[i] == BOS.buttons.debounce)
 8007f6c:	d02a      	beq.n	8007fc4 <CheckAttachedButtons+0x138>
				if (releaseCounter[i] > BOS.buttons.debounce)							// Reset releaseCounter if needed - to avoid masking pressCounter on NO switches
 8007f6e:	6872      	ldr	r2, [r6, #4]
 8007f70:	4293      	cmp	r3, r2
 8007f72:	d201      	bcs.n	8007f78 <CheckAttachedButtons+0xec>
					releaseCounter[i] = 0;					
 8007f74:	2300      	movs	r3, #0
 8007f76:	6073      	str	r3, [r6, #4]
				if (pressCounter[i] > BOS.buttons.singleClickTime && pressCounter[i] < 500)	
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	4a8b      	ldr	r2, [pc, #556]	; (80081a8 <CheckAttachedButtons+0x31c>)
 8007f7c:	8852      	ldrh	r2, [r2, #2]
 8007f7e:	4293      	cmp	r3, r2
 8007f80:	d938      	bls.n	8007ff4 <CheckAttachedButtons+0x168>
 8007f82:	22fa      	movs	r2, #250	; 0xfa
 8007f84:	0052      	lsls	r2, r2, #1
 8007f86:	4293      	cmp	r3, r2
 8007f88:	d234      	bcs.n	8007ff4 <CheckAttachedButtons+0x168>
					if (clicked == 0)
 8007f8a:	4b86      	ldr	r3, [pc, #536]	; (80081a4 <CheckAttachedButtons+0x318>)
 8007f8c:	781b      	ldrb	r3, [r3, #0]
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d11e      	bne.n	8007fd0 <CheckAttachedButtons+0x144>
						clicked = 1;																					// Record a possible single click 
 8007f92:	4b84      	ldr	r3, [pc, #528]	; (80081a4 <CheckAttachedButtons+0x318>)
 8007f94:	3af4      	subs	r2, #244	; 0xf4
 8007f96:	3aff      	subs	r2, #255	; 0xff
 8007f98:	701a      	strb	r2, [r3, #0]
 8007f9a:	e03a      	b.n	8008012 <CheckAttachedButtons+0x186>
						state = CLOSED;
 8007f9c:	2304      	movs	r3, #4
 8007f9e:	9303      	str	r3, [sp, #12]
 8007fa0:	e7d6      	b.n	8007f50 <CheckAttachedButtons+0xc4>
 8007fa2:	2302      	movs	r3, #2
 8007fa4:	9303      	str	r3, [sp, #12]
 8007fa6:	e7d3      	b.n	8007f50 <CheckAttachedButtons+0xc4>
					pressCounter[i] = 0;																		// Reset debounce counter					
 8007fa8:	2300      	movs	r3, #0
 8007faa:	4642      	mov	r2, r8
 8007fac:	6053      	str	r3, [r2, #4]
 8007fae:	e7d7      	b.n	8007f60 <CheckAttachedButtons+0xd4>
				if (clicked == 2 && dblCounter[i] <= BOS.buttons.maxInterClickTime)				// Advance the inter-click counter		
 8007fb0:	4653      	mov	r3, sl
 8007fb2:	785b      	ldrb	r3, [r3, #1]
 8007fb4:	4a7c      	ldr	r2, [pc, #496]	; (80081a8 <CheckAttachedButtons+0x31c>)
 8007fb6:	7952      	ldrb	r2, [r2, #5]
 8007fb8:	429a      	cmp	r2, r3
 8007fba:	d3b9      	bcc.n	8007f30 <CheckAttachedButtons+0xa4>
					++dblCounter[i];			
 8007fbc:	3301      	adds	r3, #1
 8007fbe:	4652      	mov	r2, sl
 8007fc0:	7053      	strb	r3, [r2, #1]
 8007fc2:	e7cd      	b.n	8007f60 <CheckAttachedButtons+0xd4>
					button[i].state = PRESSED;															// Record a PRESSED event. This event is always reset on next tick.
 8007fc4:	2207      	movs	r2, #7
 8007fc6:	4649      	mov	r1, r9
 8007fc8:	724a      	strb	r2, [r1, #9]
					++pressCounter[i];
 8007fca:	1c5a      	adds	r2, r3, #1
 8007fcc:	607a      	str	r2, [r7, #4]
 8007fce:	e7ce      	b.n	8007f6e <CheckAttachedButtons+0xe2>
					else if (clicked == 2) {
 8007fd0:	2b02      	cmp	r3, #2
 8007fd2:	d11e      	bne.n	8008012 <CheckAttachedButtons+0x186>
						if (dblCounter[i] > BOS.buttons.minInterClickTime && dblCounter[i] < BOS.buttons.maxInterClickTime) {
 8007fd4:	4651      	mov	r1, sl
 8007fd6:	784b      	ldrb	r3, [r1, #1]
 8007fd8:	4a73      	ldr	r2, [pc, #460]	; (80081a8 <CheckAttachedButtons+0x31c>)
 8007fda:	7912      	ldrb	r2, [r2, #4]
 8007fdc:	429a      	cmp	r2, r3
 8007fde:	d218      	bcs.n	8008012 <CheckAttachedButtons+0x186>
 8007fe0:	4a71      	ldr	r2, [pc, #452]	; (80081a8 <CheckAttachedButtons+0x31c>)
 8007fe2:	7952      	ldrb	r2, [r2, #5]
 8007fe4:	429a      	cmp	r2, r3
 8007fe6:	d914      	bls.n	8008012 <CheckAttachedButtons+0x186>
							clicked = 3;																				// Record a possible double click 
 8007fe8:	4b6e      	ldr	r3, [pc, #440]	; (80081a4 <CheckAttachedButtons+0x318>)
 8007fea:	2203      	movs	r2, #3
 8007fec:	701a      	strb	r2, [r3, #0]
							dblCounter[i] = 0;																	// Reset the inter-click counter
 8007fee:	2300      	movs	r3, #0
 8007ff0:	704b      	strb	r3, [r1, #1]
 8007ff2:	e00e      	b.n	8008012 <CheckAttachedButtons+0x186>
				else if (pressCounter[i] >= 500 && pressCounter[i] < 0xFFFF)	
 8007ff4:	3bf5      	subs	r3, #245	; 0xf5
 8007ff6:	3bff      	subs	r3, #255	; 0xff
 8007ff8:	4a6c      	ldr	r2, [pc, #432]	; (80081ac <CheckAttachedButtons+0x320>)
 8007ffa:	4293      	cmp	r3, r2
 8007ffc:	d809      	bhi.n	8008012 <CheckAttachedButtons+0x186>
					if (clicked)	clicked = 0;															// Cannot be a click
 8007ffe:	4b69      	ldr	r3, [pc, #420]	; (80081a4 <CheckAttachedButtons+0x318>)
 8008000:	781b      	ldrb	r3, [r3, #0]
 8008002:	2b00      	cmp	r3, #0
 8008004:	d002      	beq.n	800800c <CheckAttachedButtons+0x180>
 8008006:	4b67      	ldr	r3, [pc, #412]	; (80081a4 <CheckAttachedButtons+0x318>)
 8008008:	2200      	movs	r2, #0
 800800a:	701a      	strb	r2, [r3, #0]
					CheckForTimedButtonPress(i);
 800800c:	0020      	movs	r0, r4
 800800e:	f7ff fec1 	bl	8007d94 <CheckForTimedButtonPress>
			if (releaseCounter[i] < BOS.buttons.debounce) 							
 8008012:	0031      	movs	r1, r6
 8008014:	6872      	ldr	r2, [r6, #4]
 8008016:	4b64      	ldr	r3, [pc, #400]	; (80081a8 <CheckAttachedButtons+0x31c>)
 8008018:	881b      	ldrh	r3, [r3, #0]
 800801a:	429a      	cmp	r2, r3
 800801c:	d349      	bcc.n	80080b2 <CheckAttachedButtons+0x226>
				if (releaseCounter[i] == BOS.buttons.debounce)
 800801e:	d028      	beq.n	8008072 <CheckAttachedButtons+0x1e6>
				if (pressCounter[i] > BOS.buttons.debounce)								// Reset pressCounter if needed - to avoid masking releaseCounter on NC switches
 8008020:	687a      	ldr	r2, [r7, #4]
 8008022:	4293      	cmp	r3, r2
 8008024:	d201      	bcs.n	800802a <CheckAttachedButtons+0x19e>
					pressCounter[i] = 0;				
 8008026:	2300      	movs	r3, #0
 8008028:	607b      	str	r3, [r7, #4]
				if (releaseCounter[i] > BOS.buttons.singleClickTime && releaseCounter[i] < 500)	
 800802a:	684b      	ldr	r3, [r1, #4]
 800802c:	4a5e      	ldr	r2, [pc, #376]	; (80081a8 <CheckAttachedButtons+0x31c>)
 800802e:	8852      	ldrh	r2, [r2, #2]
 8008030:	4293      	cmp	r3, r2
 8008032:	d939      	bls.n	80080a8 <CheckAttachedButtons+0x21c>
 8008034:	22fa      	movs	r2, #250	; 0xfa
 8008036:	0052      	lsls	r2, r2, #1
 8008038:	4293      	cmp	r3, r2
 800803a:	d235      	bcs.n	80080a8 <CheckAttachedButtons+0x21c>
					if (clicked == 1)
 800803c:	4b59      	ldr	r3, [pc, #356]	; (80081a4 <CheckAttachedButtons+0x318>)
 800803e:	781b      	ldrb	r3, [r3, #0]
 8008040:	2b01      	cmp	r3, #1
 8008042:	d01c      	beq.n	800807e <CheckAttachedButtons+0x1f2>
					else if (clicked == 3)
 8008044:	2b03      	cmp	r3, #3
 8008046:	d134      	bne.n	80080b2 <CheckAttachedButtons+0x226>
						button[i].state = DBL_CLICKED;												// Record a double button click event
 8008048:	3303      	adds	r3, #3
 800804a:	464a      	mov	r2, r9
 800804c:	7253      	strb	r3, [r2, #9]
						clicked = 0;																					// Prepare for a single click					
 800804e:	4b55      	ldr	r3, [pc, #340]	; (80081a4 <CheckAttachedButtons+0x318>)
 8008050:	2200      	movs	r2, #0
 8008052:	701a      	strb	r2, [r3, #0]
					if (!delayButtonStateReset && (button[i].events & BUTTON_EVENT_DBL_CLICKED)) 
 8008054:	4b56      	ldr	r3, [pc, #344]	; (80081b0 <CheckAttachedButtons+0x324>)
 8008056:	781b      	ldrb	r3, [r3, #0]
 8008058:	2b00      	cmp	r3, #0
 800805a:	d13e      	bne.n	80080da <CheckAttachedButtons+0x24e>
 800805c:	464b      	mov	r3, r9
 800805e:	7c5b      	ldrb	r3, [r3, #17]
 8008060:	079b      	lsls	r3, r3, #30
 8008062:	d53a      	bpl.n	80080da <CheckAttachedButtons+0x24e>
						delayButtonStateReset = true;
 8008064:	4b52      	ldr	r3, [pc, #328]	; (80081b0 <CheckAttachedButtons+0x324>)
 8008066:	2201      	movs	r2, #1
 8008068:	701a      	strb	r2, [r3, #0]
						buttonDblClickedCallback(i);
 800806a:	0020      	movs	r0, r4
 800806c:	f7ff fe8f 	bl	8007d8e <buttonDblClickedCallback>
 8008070:	e033      	b.n	80080da <CheckAttachedButtons+0x24e>
					button[i].state = RELEASED;															// Record a RELEASED event. This event is always reset on next tick.
 8008072:	2208      	movs	r2, #8
 8008074:	4648      	mov	r0, r9
 8008076:	7242      	strb	r2, [r0, #9]
					++releaseCounter[i];
 8008078:	1c5a      	adds	r2, r3, #1
 800807a:	6072      	str	r2, [r6, #4]
 800807c:	e7d0      	b.n	8008020 <CheckAttachedButtons+0x194>
						button[i].state = CLICKED;														// Record a single button click event
 800807e:	3304      	adds	r3, #4
 8008080:	464a      	mov	r2, r9
 8008082:	7253      	strb	r3, [r2, #9]
						clicked = 2;																					// Prepare for a double click
 8008084:	4b47      	ldr	r3, [pc, #284]	; (80081a4 <CheckAttachedButtons+0x318>)
 8008086:	2202      	movs	r2, #2
 8008088:	701a      	strb	r2, [r3, #0]
					if (!delayButtonStateReset && (button[i].events & BUTTON_EVENT_CLICKED)) 
 800808a:	4b49      	ldr	r3, [pc, #292]	; (80081b0 <CheckAttachedButtons+0x324>)
 800808c:	781b      	ldrb	r3, [r3, #0]
 800808e:	2b00      	cmp	r3, #0
 8008090:	d123      	bne.n	80080da <CheckAttachedButtons+0x24e>
 8008092:	464b      	mov	r3, r9
 8008094:	7c5b      	ldrb	r3, [r3, #17]
 8008096:	07db      	lsls	r3, r3, #31
 8008098:	d51f      	bpl.n	80080da <CheckAttachedButtons+0x24e>
						delayButtonStateReset = true;
 800809a:	4b45      	ldr	r3, [pc, #276]	; (80081b0 <CheckAttachedButtons+0x324>)
 800809c:	2201      	movs	r2, #1
 800809e:	701a      	strb	r2, [r3, #0]
						buttonClickedCallback(i);
 80080a0:	0020      	movs	r0, r4
 80080a2:	f7ff fe73 	bl	8007d8c <buttonClickedCallback>
 80080a6:	e018      	b.n	80080da <CheckAttachedButtons+0x24e>
				else if (releaseCounter[i] >= 500 && releaseCounter[i] < 0xFFFF)	
 80080a8:	3bf5      	subs	r3, #245	; 0xf5
 80080aa:	3bff      	subs	r3, #255	; 0xff
 80080ac:	4a3f      	ldr	r2, [pc, #252]	; (80081ac <CheckAttachedButtons+0x320>)
 80080ae:	4293      	cmp	r3, r2
 80080b0:	d909      	bls.n	80080c6 <CheckAttachedButtons+0x23a>
			switch (button[i].state)
 80080b2:	464b      	mov	r3, r9
 80080b4:	7a5b      	ldrb	r3, [r3, #9]
 80080b6:	3b05      	subs	r3, #5
 80080b8:	b2da      	uxtb	r2, r3
 80080ba:	2a09      	cmp	r2, #9
 80080bc:	d80d      	bhi.n	80080da <CheckAttachedButtons+0x24e>
 80080be:	0093      	lsls	r3, r2, #2
 80080c0:	4a3c      	ldr	r2, [pc, #240]	; (80081b4 <CheckAttachedButtons+0x328>)
 80080c2:	58d3      	ldr	r3, [r2, r3]
 80080c4:	469f      	mov	pc, r3
					CheckForTimedButtonRelease(i);
 80080c6:	0020      	movs	r0, r4
 80080c8:	f7ff fea2 	bl	8007e10 <CheckForTimedButtonRelease>
 80080cc:	e7f1      	b.n	80080b2 <CheckAttachedButtons+0x226>
					buttonPressedCallback(i);
 80080ce:	0020      	movs	r0, r4
 80080d0:	f7ff fe5a 	bl	8007d88 <buttonPressedCallback>
					button[i].state = NONE;
 80080d4:	2300      	movs	r3, #0
 80080d6:	464a      	mov	r2, r9
 80080d8:	7253      	strb	r3, [r2, #9]
	for(uint8_t i=1 ; i<=NumOfPorts ; i++)
 80080da:	3401      	adds	r4, #1
 80080dc:	b2e4      	uxtb	r4, r4
 80080de:	3509      	adds	r5, #9
 80080e0:	3604      	adds	r6, #4
 80080e2:	2304      	movs	r3, #4
 80080e4:	469c      	mov	ip, r3
 80080e6:	44e0      	add	r8, ip
 80080e8:	3b03      	subs	r3, #3
 80080ea:	469c      	mov	ip, r3
 80080ec:	44e2      	add	sl, ip
 80080ee:	2c06      	cmp	r4, #6
 80080f0:	d100      	bne.n	80080f4 <CheckAttachedButtons+0x268>
 80080f2:	e0d1      	b.n	8008298 <CheckAttachedButtons+0x40c>
		if (button[i].type)			// Only check defined butons
 80080f4:	46a9      	mov	r9, r5
 80080f6:	7aab      	ldrb	r3, [r5, #10]
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d0ee      	beq.n	80080da <CheckAttachedButtons+0x24e>
			if (delayButtonStateReset == false)	button[i].state = NONE;		
 80080fc:	4b2c      	ldr	r3, [pc, #176]	; (80081b0 <CheckAttachedButtons+0x324>)
 80080fe:	781b      	ldrb	r3, [r3, #0]
 8008100:	2b00      	cmp	r3, #0
 8008102:	d100      	bne.n	8008106 <CheckAttachedButtons+0x27a>
 8008104:	726b      	strb	r3, [r5, #9]
			GetPortGPIOs(i, &TX_Port, &TX_Pin, &RX_Port, &RX_Pin);
 8008106:	230e      	movs	r3, #14
 8008108:	aa02      	add	r2, sp, #8
 800810a:	4694      	mov	ip, r2
 800810c:	4463      	add	r3, ip
 800810e:	469b      	mov	fp, r3
 8008110:	af05      	add	r7, sp, #20
 8008112:	9700      	str	r7, [sp, #0]
 8008114:	ab06      	add	r3, sp, #24
 8008116:	465a      	mov	r2, fp
 8008118:	a907      	add	r1, sp, #28
 800811a:	0020      	movs	r0, r4
 800811c:	f004 ff02 	bl	800cf24 <GetPortGPIOs>
			HAL_GPIO_WritePin((GPIO_TypeDef *)TX_Port, TX_Pin, GPIO_PIN_RESET); Delay_us(10);
 8008120:	465b      	mov	r3, fp
 8008122:	8819      	ldrh	r1, [r3, #0]
 8008124:	2200      	movs	r2, #0
 8008126:	9807      	ldr	r0, [sp, #28]
 8008128:	f009 f86a 	bl	8011200 <HAL_GPIO_WritePin>
 800812c:	200a      	movs	r0, #10
 800812e:	f005 fc07 	bl	800d940 <StartMicroDelay>
			if (HAL_GPIO_ReadPin((GPIO_TypeDef *)RX_Port, RX_Pin) == GPIO_PIN_RESET) 
 8008132:	8839      	ldrh	r1, [r7, #0]
 8008134:	9806      	ldr	r0, [sp, #24]
 8008136:	f009 f85d 	bl	80111f4 <HAL_GPIO_ReadPin>
 800813a:	2800      	cmp	r0, #0
 800813c:	d100      	bne.n	8008140 <CheckAttachedButtons+0x2b4>
 800813e:	e6b7      	b.n	8007eb0 <CheckAttachedButtons+0x24>
			HAL_GPIO_WritePin((GPIO_TypeDef *)TX_Port, TX_Pin, GPIO_PIN_RESET);
 8008140:	230e      	movs	r3, #14
 8008142:	aa02      	add	r2, sp, #8
 8008144:	4694      	mov	ip, r2
 8008146:	4463      	add	r3, ip
 8008148:	8819      	ldrh	r1, [r3, #0]
 800814a:	2200      	movs	r2, #0
 800814c:	9807      	ldr	r0, [sp, #28]
 800814e:	f009 f857 	bl	8011200 <HAL_GPIO_WritePin>
			switch (button[i].type)
 8008152:	464b      	mov	r3, r9
 8008154:	7a9b      	ldrb	r3, [r3, #10]
 8008156:	2b03      	cmp	r3, #3
 8008158:	d100      	bne.n	800815c <CheckAttachedButtons+0x2d0>
 800815a:	e6ef      	b.n	8007f3c <CheckAttachedButtons+0xb0>
 800815c:	d900      	bls.n	8008160 <CheckAttachedButtons+0x2d4>
 800815e:	e6ba      	b.n	8007ed6 <CheckAttachedButtons+0x4a>
 8008160:	2b01      	cmp	r3, #1
 8008162:	d100      	bne.n	8008166 <CheckAttachedButtons+0x2da>
 8008164:	e6c2      	b.n	8007eec <CheckAttachedButtons+0x60>
 8008166:	2b02      	cmp	r3, #2
 8008168:	d000      	beq.n	800816c <CheckAttachedButtons+0x2e0>
 800816a:	e6c5      	b.n	8007ef8 <CheckAttachedButtons+0x6c>
					if (connected == GPIO_PIN_SET)	
 800816c:	9b02      	ldr	r3, [sp, #8]
 800816e:	2b01      	cmp	r3, #1
 8008170:	d100      	bne.n	8008174 <CheckAttachedButtons+0x2e8>
 8008172:	e713      	b.n	8007f9c <CheckAttachedButtons+0x110>
					else if (connected == GPIO_PIN_RESET) 
 8008174:	2b00      	cmp	r3, #0
 8008176:	d000      	beq.n	800817a <CheckAttachedButtons+0x2ee>
 8008178:	e6be      	b.n	8007ef8 <CheckAttachedButtons+0x6c>
						state = OPEN;	
 800817a:	2303      	movs	r3, #3
 800817c:	9303      	str	r3, [sp, #12]
 800817e:	e6c5      	b.n	8007f0c <CheckAttachedButtons+0x80>
					buttonReleasedCallback(i);
 8008180:	0020      	movs	r0, r4
 8008182:	f7ff fe02 	bl	8007d8a <buttonReleasedCallback>
					button[i].state = NONE;
 8008186:	2300      	movs	r3, #0
 8008188:	464a      	mov	r2, r9
 800818a:	7253      	strb	r3, [r2, #9]
      		break;
 800818c:	e7a5      	b.n	80080da <CheckAttachedButtons+0x24e>
 800818e:	46c0      	nop			; (mov r8, r8)
 8008190:	20000f3c 	.word	0x20000f3c
 8008194:	20000f94 	.word	0x20000f94
 8008198:	20000f7c 	.word	0x20000f7c
 800819c:	20000f74 	.word	0x20000f74
 80081a0:	0000fffe 	.word	0x0000fffe
 80081a4:	20000f72 	.word	0x20000f72
 80081a8:	20006368 	.word	0x20006368
 80081ac:	0000fe0a 	.word	0x0000fe0a
 80081b0:	20000f7a 	.word	0x20000f7a
 80081b4:	0801c19c 	.word	0x0801c19c
					if (!delayButtonStateReset && (button[i].events & BUTTON_EVENT_PRESSED_FOR_X1_SEC)) 
 80081b8:	4b3b      	ldr	r3, [pc, #236]	; (80082a8 <CheckAttachedButtons+0x41c>)
 80081ba:	781b      	ldrb	r3, [r3, #0]
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d18c      	bne.n	80080da <CheckAttachedButtons+0x24e>
 80081c0:	464b      	mov	r3, r9
 80081c2:	7c5b      	ldrb	r3, [r3, #17]
 80081c4:	075b      	lsls	r3, r3, #29
 80081c6:	d588      	bpl.n	80080da <CheckAttachedButtons+0x24e>
						delayButtonStateReset = true;
 80081c8:	4b37      	ldr	r3, [pc, #220]	; (80082a8 <CheckAttachedButtons+0x41c>)
 80081ca:	2201      	movs	r2, #1
 80081cc:	701a      	strb	r2, [r3, #0]
						buttonPressedForXCallback(i, PRESSED_FOR_X1_SEC-8);
 80081ce:	2101      	movs	r1, #1
 80081d0:	0020      	movs	r0, r4
 80081d2:	f7ff fddd 	bl	8007d90 <buttonPressedForXCallback>
 80081d6:	e780      	b.n	80080da <CheckAttachedButtons+0x24e>
					if (!delayButtonStateReset && (button[i].events & BUTTON_EVENT_PRESSED_FOR_X2_SEC)) 
 80081d8:	4b33      	ldr	r3, [pc, #204]	; (80082a8 <CheckAttachedButtons+0x41c>)
 80081da:	781b      	ldrb	r3, [r3, #0]
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d000      	beq.n	80081e2 <CheckAttachedButtons+0x356>
 80081e0:	e77b      	b.n	80080da <CheckAttachedButtons+0x24e>
 80081e2:	464b      	mov	r3, r9
 80081e4:	7c5b      	ldrb	r3, [r3, #17]
 80081e6:	071b      	lsls	r3, r3, #28
 80081e8:	d400      	bmi.n	80081ec <CheckAttachedButtons+0x360>
 80081ea:	e776      	b.n	80080da <CheckAttachedButtons+0x24e>
						delayButtonStateReset = true;
 80081ec:	4b2e      	ldr	r3, [pc, #184]	; (80082a8 <CheckAttachedButtons+0x41c>)
 80081ee:	2201      	movs	r2, #1
 80081f0:	701a      	strb	r2, [r3, #0]
						buttonPressedForXCallback(i, PRESSED_FOR_X2_SEC-8);
 80081f2:	2102      	movs	r1, #2
 80081f4:	0020      	movs	r0, r4
 80081f6:	f7ff fdcb 	bl	8007d90 <buttonPressedForXCallback>
 80081fa:	e76e      	b.n	80080da <CheckAttachedButtons+0x24e>
					if (!delayButtonStateReset && (button[i].events & BUTTON_EVENT_PRESSED_FOR_X3_SEC)) 
 80081fc:	4b2a      	ldr	r3, [pc, #168]	; (80082a8 <CheckAttachedButtons+0x41c>)
 80081fe:	781b      	ldrb	r3, [r3, #0]
 8008200:	2b00      	cmp	r3, #0
 8008202:	d000      	beq.n	8008206 <CheckAttachedButtons+0x37a>
 8008204:	e769      	b.n	80080da <CheckAttachedButtons+0x24e>
 8008206:	464b      	mov	r3, r9
 8008208:	7c5b      	ldrb	r3, [r3, #17]
 800820a:	06db      	lsls	r3, r3, #27
 800820c:	d400      	bmi.n	8008210 <CheckAttachedButtons+0x384>
 800820e:	e764      	b.n	80080da <CheckAttachedButtons+0x24e>
						delayButtonStateReset = true;
 8008210:	4b25      	ldr	r3, [pc, #148]	; (80082a8 <CheckAttachedButtons+0x41c>)
 8008212:	2201      	movs	r2, #1
 8008214:	701a      	strb	r2, [r3, #0]
						buttonPressedForXCallback(i, PRESSED_FOR_X3_SEC-8);
 8008216:	2103      	movs	r1, #3
 8008218:	0020      	movs	r0, r4
 800821a:	f7ff fdb9 	bl	8007d90 <buttonPressedForXCallback>
 800821e:	e75c      	b.n	80080da <CheckAttachedButtons+0x24e>
					if (!delayButtonStateReset && (button[i].events & BUTTON_EVENT_RELEASED_FOR_Y1_SEC)) 
 8008220:	4b21      	ldr	r3, [pc, #132]	; (80082a8 <CheckAttachedButtons+0x41c>)
 8008222:	781b      	ldrb	r3, [r3, #0]
 8008224:	2b00      	cmp	r3, #0
 8008226:	d000      	beq.n	800822a <CheckAttachedButtons+0x39e>
 8008228:	e757      	b.n	80080da <CheckAttachedButtons+0x24e>
 800822a:	464b      	mov	r3, r9
 800822c:	7c5b      	ldrb	r3, [r3, #17]
 800822e:	069b      	lsls	r3, r3, #26
 8008230:	d400      	bmi.n	8008234 <CheckAttachedButtons+0x3a8>
 8008232:	e752      	b.n	80080da <CheckAttachedButtons+0x24e>
						delayButtonStateReset = true;
 8008234:	4b1c      	ldr	r3, [pc, #112]	; (80082a8 <CheckAttachedButtons+0x41c>)
 8008236:	2201      	movs	r2, #1
 8008238:	701a      	strb	r2, [r3, #0]
						buttonReleasedForYCallback(i, RELEASED_FOR_Y1_SEC-11);
 800823a:	2101      	movs	r1, #1
 800823c:	0020      	movs	r0, r4
 800823e:	f7ff fda8 	bl	8007d92 <buttonReleasedForYCallback>
 8008242:	e74a      	b.n	80080da <CheckAttachedButtons+0x24e>
					if (!delayButtonStateReset && (button[i].events & BUTTON_EVENT_RELEASED_FOR_Y2_SEC)) 
 8008244:	4b18      	ldr	r3, [pc, #96]	; (80082a8 <CheckAttachedButtons+0x41c>)
 8008246:	781b      	ldrb	r3, [r3, #0]
 8008248:	2b00      	cmp	r3, #0
 800824a:	d000      	beq.n	800824e <CheckAttachedButtons+0x3c2>
 800824c:	e745      	b.n	80080da <CheckAttachedButtons+0x24e>
 800824e:	464b      	mov	r3, r9
 8008250:	7c5b      	ldrb	r3, [r3, #17]
 8008252:	065b      	lsls	r3, r3, #25
 8008254:	d400      	bmi.n	8008258 <CheckAttachedButtons+0x3cc>
 8008256:	e740      	b.n	80080da <CheckAttachedButtons+0x24e>
						delayButtonStateReset = true;
 8008258:	4b13      	ldr	r3, [pc, #76]	; (80082a8 <CheckAttachedButtons+0x41c>)
 800825a:	2201      	movs	r2, #1
 800825c:	701a      	strb	r2, [r3, #0]
						buttonReleasedForYCallback(i, RELEASED_FOR_Y2_SEC-11);
 800825e:	2102      	movs	r1, #2
 8008260:	0020      	movs	r0, r4
 8008262:	f7ff fd96 	bl	8007d92 <buttonReleasedForYCallback>
 8008266:	e738      	b.n	80080da <CheckAttachedButtons+0x24e>
					if (!delayButtonStateReset && (button[i].events & BUTTON_EVENT_RELEASED_FOR_Y3_SEC)) 
 8008268:	4b0f      	ldr	r3, [pc, #60]	; (80082a8 <CheckAttachedButtons+0x41c>)
 800826a:	781b      	ldrb	r3, [r3, #0]
 800826c:	2b00      	cmp	r3, #0
 800826e:	d000      	beq.n	8008272 <CheckAttachedButtons+0x3e6>
 8008270:	e733      	b.n	80080da <CheckAttachedButtons+0x24e>
 8008272:	464b      	mov	r3, r9
 8008274:	7c5b      	ldrb	r3, [r3, #17]
 8008276:	2b7f      	cmp	r3, #127	; 0x7f
 8008278:	d800      	bhi.n	800827c <CheckAttachedButtons+0x3f0>
 800827a:	e72e      	b.n	80080da <CheckAttachedButtons+0x24e>
						delayButtonStateReset = true;
 800827c:	4b0a      	ldr	r3, [pc, #40]	; (80082a8 <CheckAttachedButtons+0x41c>)
 800827e:	2201      	movs	r2, #1
 8008280:	701a      	strb	r2, [r3, #0]
						buttonReleasedForYCallback(i, RELEASED_FOR_Y3_SEC-11);
 8008282:	2103      	movs	r1, #3
 8008284:	0020      	movs	r0, r4
 8008286:	f7ff fd84 	bl	8007d92 <buttonReleasedForYCallback>
 800828a:	e726      	b.n	80080da <CheckAttachedButtons+0x24e>
						state = OPEN;			
 800828c:	2303      	movs	r3, #3
 800828e:	9303      	str	r3, [sp, #12]
 8008290:	e63c      	b.n	8007f0c <CheckAttachedButtons+0x80>
						state = OFF;
 8008292:	9b02      	ldr	r3, [sp, #8]
 8008294:	9303      	str	r3, [sp, #12]
			if (state == OPEN || state == OFF)												
 8008296:	e639      	b.n	8007f0c <CheckAttachedButtons+0x80>
}
 8008298:	b009      	add	sp, #36	; 0x24
 800829a:	bcf0      	pop	{r4, r5, r6, r7}
 800829c:	46bb      	mov	fp, r7
 800829e:	46b2      	mov	sl, r6
 80082a0:	46a9      	mov	r9, r5
 80082a2:	46a0      	mov	r8, r4
 80082a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80082a6:	46c0      	nop			; (mov r8, r8)
 80082a8:	20000f7a 	.word	0x20000f7a

080082ac <AddPortButton>:
/* --- Define a new button attached to one of array ports
					buttonType: MOMENTARY_NO, MOMENTARY_NC, ONOFF_NO, ONOFF_NC
					port: array port (P1 - Px)
*/
BOS_Status AddPortButton(uint8_t buttonType, uint8_t port)
{
 80082ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80082ae:	b08d      	sub	sp, #52	; 0x34
 80082b0:	0006      	movs	r6, r0
 80082b2:	000c      	movs	r4, r1
	uint32_t TX_Port, RX_Port; 
	uint16_t TX_Pin, RX_Pin, temp16, res;
	uint8_t temp8 = 0;
	
	/* 1. Stop communication at this port (only if the scheduler is running) - TODO update*/
	if (BOS_initialized) {
 80082b4:	4b41      	ldr	r3, [pc, #260]	; (80083bc <AddPortButton+0x110>)
 80082b6:	781b      	ldrb	r3, [r3, #0]
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d157      	bne.n	800836c <AddPortButton+0xc0>
		osSemaphoreRelease(PxRxSemaphoreHandle[port]);		/* Give back the semaphore if it was taken */
		osSemaphoreRelease(PxTxSemaphoreHandle[port]);
	}
	portStatus[port] = PORTBUTTON;	
 80082bc:	4b40      	ldr	r3, [pc, #256]	; (80083c0 <AddPortButton+0x114>)
 80082be:	2204      	movs	r2, #4
 80082c0:	551a      	strb	r2, [r3, r4]
	
	/* 2. Deinitialize UART (only if module is initialized) */
	if (BOS_initialized) {
 80082c2:	4b3e      	ldr	r3, [pc, #248]	; (80083bc <AddPortButton+0x110>)
 80082c4:	781b      	ldrb	r3, [r3, #0]
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d15a      	bne.n	8008380 <AddPortButton+0xd4>
		HAL_UART_DeInit(GetUart(port));
	}
	
	/* 3. Initialize GPIOs */
	GetPortGPIOs(port, &TX_Port, &TX_Pin, &RX_Port, &RX_Pin);		
 80082ca:	2512      	movs	r5, #18
 80082cc:	446d      	add	r5, sp
 80082ce:	af04      	add	r7, sp, #16
 80082d0:	9700      	str	r7, [sp, #0]
 80082d2:	ab05      	add	r3, sp, #20
 80082d4:	002a      	movs	r2, r5
 80082d6:	a906      	add	r1, sp, #24
 80082d8:	0020      	movs	r0, r4
 80082da:	f004 fe23 	bl	800cf24 <GetPortGPIOs>
	/* Ouput (TXD) */
	GPIO_InitStruct.Pin = TX_Pin;
 80082de:	882b      	ldrh	r3, [r5, #0]
 80082e0:	9307      	str	r3, [sp, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80082e2:	2301      	movs	r3, #1
 80082e4:	9308      	str	r3, [sp, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80082e6:	2500      	movs	r5, #0
 80082e8:	9509      	str	r5, [sp, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 80082ea:	950a      	str	r5, [sp, #40]	; 0x28
	HAL_GPIO_Init((GPIO_TypeDef *)TX_Port, &GPIO_InitStruct);
 80082ec:	a907      	add	r1, sp, #28
 80082ee:	9806      	ldr	r0, [sp, #24]
 80082f0:	f008 fe96 	bl	8011020 <HAL_GPIO_Init>
	/* Input (RXD) */
	GPIO_InitStruct.Pin = RX_Pin;
 80082f4:	883b      	ldrh	r3, [r7, #0]
 80082f6:	9307      	str	r3, [sp, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80082f8:	9508      	str	r5, [sp, #32]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80082fa:	2302      	movs	r3, #2
 80082fc:	9309      	str	r3, [sp, #36]	; 0x24
	HAL_GPIO_Init((GPIO_TypeDef *)RX_Port, &GPIO_InitStruct);
 80082fe:	a907      	add	r1, sp, #28
 8008300:	9805      	ldr	r0, [sp, #20]
 8008302:	f008 fe8d 	bl	8011020 <HAL_GPIO_Init>

	/* 4. Update button struct */
	button[port].type = buttonType;	
 8008306:	00e2      	lsls	r2, r4, #3
 8008308:	1912      	adds	r2, r2, r4
 800830a:	4b2e      	ldr	r3, [pc, #184]	; (80083c4 <AddPortButton+0x118>)
 800830c:	189b      	adds	r3, r3, r2
 800830e:	705e      	strb	r6, [r3, #1]
	
	/* 5. Add to EEPROM if not already there */
	res = EE_ReadVariable(_EE_BUTTON_BASE+4*(port-1), &temp16);
 8008310:	0025      	movs	r5, r4
 8008312:	353a      	adds	r5, #58	; 0x3a
 8008314:	00ad      	lsls	r5, r5, #2
 8008316:	210e      	movs	r1, #14
 8008318:	4469      	add	r1, sp
 800831a:	0028      	movs	r0, r5
 800831c:	f7ff f8b0 	bl	8007480 <EE_ReadVariable>
	if(!res)																														// This variable exists
 8008320:	2800      	cmp	r0, #0
 8008322:	d133      	bne.n	800838c <AddPortButton+0xe0>
	{
		temp8 = (uint8_t)(temp16 >> 8);
 8008324:	230e      	movs	r3, #14
 8008326:	446b      	add	r3, sp
 8008328:	881b      	ldrh	r3, [r3, #0]
 800832a:	0a1a      	lsrs	r2, r3, #8
		if ( ((temp8 >> 4) == port) && ((temp8 & 0x0F) == buttonType) )		// This is same port and same type, do not update
 800832c:	0b1b      	lsrs	r3, r3, #12
 800832e:	42a3      	cmp	r3, r4
 8008330:	d103      	bne.n	800833a <AddPortButton+0x8e>
 8008332:	230f      	movs	r3, #15
 8008334:	4013      	ands	r3, r2
 8008336:	42b3      	cmp	r3, r6
 8008338:	d015      	beq.n	8008366 <AddPortButton+0xba>
			return BOS_OK;
		else 																															// Update the variable
		{																														
			temp16 = ((uint16_t)port << 12) | ((uint16_t)buttonType << 8);
 800833a:	0324      	lsls	r4, r4, #12
 800833c:	0231      	lsls	r1, r6, #8
 800833e:	4321      	orrs	r1, r4
 8008340:	b289      	uxth	r1, r1
 8008342:	230e      	movs	r3, #14
 8008344:	446b      	add	r3, sp
 8008346:	8019      	strh	r1, [r3, #0]
			EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1), temp16);
 8008348:	0028      	movs	r0, r5
 800834a:	f7ff f8c5 	bl	80074d8 <EE_WriteVariable>
			/* Reset times */
			EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1)+1, 0);
 800834e:	1c68      	adds	r0, r5, #1
 8008350:	2100      	movs	r1, #0
 8008352:	f7ff f8c1 	bl	80074d8 <EE_WriteVariable>
			EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1)+2, 0);
 8008356:	1ca8      	adds	r0, r5, #2
 8008358:	2100      	movs	r1, #0
 800835a:	f7ff f8bd 	bl	80074d8 <EE_WriteVariable>
			EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1)+3, 0);
 800835e:	1ce8      	adds	r0, r5, #3
 8008360:	2100      	movs	r1, #0
 8008362:	f7ff f8b9 	bl	80074d8 <EE_WriteVariable>
	  	EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1)+2, 0);
	  	EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1)+3, 0);
	}
	
	return result;
}
 8008366:	2000      	movs	r0, #0
 8008368:	b00d      	add	sp, #52	; 0x34
 800836a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		osSemaphoreRelease(PxRxSemaphoreHandle[port]);		/* Give back the semaphore if it was taken */
 800836c:	008d      	lsls	r5, r1, #2
 800836e:	4b16      	ldr	r3, [pc, #88]	; (80083c8 <AddPortButton+0x11c>)
 8008370:	58e8      	ldr	r0, [r5, r3]
 8008372:	f005 fe31 	bl	800dfd8 <osSemaphoreRelease>
		osSemaphoreRelease(PxTxSemaphoreHandle[port]);
 8008376:	4b15      	ldr	r3, [pc, #84]	; (80083cc <AddPortButton+0x120>)
 8008378:	58e8      	ldr	r0, [r5, r3]
 800837a:	f005 fe2d 	bl	800dfd8 <osSemaphoreRelease>
 800837e:	e79d      	b.n	80082bc <AddPortButton+0x10>
		HAL_UART_DeInit(GetUart(port));
 8008380:	0020      	movs	r0, r4
 8008382:	f005 fc8f 	bl	800dca4 <GetUart>
 8008386:	f00a fcd0 	bl	8012d2a <HAL_UART_DeInit>
 800838a:	e79e      	b.n	80082ca <AddPortButton+0x1e>
	  	temp16 = ((uint16_t)port << 12) | ((uint16_t)buttonType << 8);
 800838c:	0324      	lsls	r4, r4, #12
 800838e:	0231      	lsls	r1, r6, #8
 8008390:	4321      	orrs	r1, r4
 8008392:	b289      	uxth	r1, r1
 8008394:	230e      	movs	r3, #14
 8008396:	446b      	add	r3, sp
 8008398:	8019      	strh	r1, [r3, #0]
	  	EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1), temp16);		
 800839a:	0028      	movs	r0, r5
 800839c:	f7ff f89c 	bl	80074d8 <EE_WriteVariable>
	  	EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1)+1, 0);
 80083a0:	1c68      	adds	r0, r5, #1
 80083a2:	2100      	movs	r1, #0
 80083a4:	f7ff f898 	bl	80074d8 <EE_WriteVariable>
	  	EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1)+2, 0);
 80083a8:	1ca8      	adds	r0, r5, #2
 80083aa:	2100      	movs	r1, #0
 80083ac:	f7ff f894 	bl	80074d8 <EE_WriteVariable>
	  	EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1)+3, 0);
 80083b0:	1ce8      	adds	r0, r5, #3
 80083b2:	2100      	movs	r1, #0
 80083b4:	f7ff f890 	bl	80074d8 <EE_WriteVariable>
 80083b8:	e7d5      	b.n	8008366 <AddPortButton+0xba>
 80083ba:	46c0      	nop			; (mov r8, r8)
 80083bc:	2000055d 	.word	0x2000055d
 80083c0:	20000b80 	.word	0x20000b80
 80083c4:	20000f3c 	.word	0x20000f3c
 80083c8:	20006404 	.word	0x20006404
 80083cc:	200063e8 	.word	0x200063e8

080083d0 <RemovePortButton>:

/* --- Undefine a button attached to one of array ports and restore the port to default state
					port: array port (P1 - Px)
*/
BOS_Status RemovePortButton(uint8_t port)
{
 80083d0:	b570      	push	{r4, r5, r6, lr}
 80083d2:	b082      	sub	sp, #8
 80083d4:	0005      	movs	r5, r0
	BOS_Status result = BOS_OK;
	uint16_t res, temp16;
	
	/* 1. Remove from button struct */
	button[port].type = NONE;
 80083d6:	4836      	ldr	r0, [pc, #216]	; (80084b0 <RemovePortButton+0xe0>)
 80083d8:	00e9      	lsls	r1, r5, #3
 80083da:	1949      	adds	r1, r1, r5
 80083dc:	1842      	adds	r2, r0, r1
 80083de:	2300      	movs	r3, #0
 80083e0:	7053      	strb	r3, [r2, #1]
	button[port].state = NONE;
 80083e2:	540b      	strb	r3, [r1, r0]
	button[port].events = 0;
 80083e4:	7213      	strb	r3, [r2, #8]
	button[port].pressedX1Sec = 0; button[port].pressedX2Sec = 0; button[port].pressedX3Sec = 0;
 80083e6:	7093      	strb	r3, [r2, #2]
 80083e8:	70d3      	strb	r3, [r2, #3]
 80083ea:	7113      	strb	r3, [r2, #4]
	button[port].releasedY1Sec = 0; button[port].releasedY2Sec = 0; button[port].releasedY3Sec = 0;
 80083ec:	7153      	strb	r3, [r2, #5]
 80083ee:	7193      	strb	r3, [r2, #6]
 80083f0:	71d3      	strb	r3, [r2, #7]
	
	/* 2. Remove from EEPROM if it's already there */
	res = EE_ReadVariable(_EE_BUTTON_BASE+4*(port-1), &temp16);
 80083f2:	002c      	movs	r4, r5
 80083f4:	343a      	adds	r4, #58	; 0x3a
 80083f6:	00a4      	lsls	r4, r4, #2
 80083f8:	466b      	mov	r3, sp
 80083fa:	1d99      	adds	r1, r3, #6
 80083fc:	0020      	movs	r0, r4
 80083fe:	f7ff f83f 	bl	8007480 <EE_ReadVariable>
	if(!res)																														// This variable exists, reset all to zeros
 8008402:	2800      	cmp	r0, #0
 8008404:	d02b      	beq.n	800845e <RemovePortButton+0x8e>
		EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1)+2, 0);
		EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1)+3, 0);		
	}
	
	/* 3. Initialize UART at this port */
	UART_HandleTypeDef* huart = GetUart(port);
 8008406:	0028      	movs	r0, r5
 8008408:	f005 fc4c 	bl	800dca4 <GetUart>
 800840c:	0006      	movs	r6, r0
	
	if (huart->Instance == USART1) 
 800840e:	6803      	ldr	r3, [r0, #0]
 8008410:	4a28      	ldr	r2, [pc, #160]	; (80084b4 <RemovePortButton+0xe4>)
 8008412:	4293      	cmp	r3, r2
 8008414:	d034      	beq.n	8008480 <RemovePortButton+0xb0>
	{	
#ifdef _Usart1		
		MX_USART1_UART_Init();
#endif
	} 
	else if (huart->Instance == USART2) 
 8008416:	4a28      	ldr	r2, [pc, #160]	; (80084b8 <RemovePortButton+0xe8>)
 8008418:	4293      	cmp	r3, r2
 800841a:	d035      	beq.n	8008488 <RemovePortButton+0xb8>
	{	
#ifdef _Usart2	
		MX_USART2_UART_Init();
#endif
	} 
	else if (huart->Instance == USART3) 
 800841c:	4a27      	ldr	r2, [pc, #156]	; (80084bc <RemovePortButton+0xec>)
 800841e:	4293      	cmp	r3, r2
 8008420:	d036      	beq.n	8008490 <RemovePortButton+0xc0>
	{	
#ifdef _Usart3	
		MX_USART3_UART_Init();
#endif
	} 
	else if (huart->Instance == USART4) 
 8008422:	4a27      	ldr	r2, [pc, #156]	; (80084c0 <RemovePortButton+0xf0>)
 8008424:	4293      	cmp	r3, r2
 8008426:	d03f      	beq.n	80084a8 <RemovePortButton+0xd8>
	{	
#ifdef _Usart4	
		MX_USART4_UART_Init();
#endif
	} 
	else if (huart->Instance == USART5) 
 8008428:	4a26      	ldr	r2, [pc, #152]	; (80084c4 <RemovePortButton+0xf4>)
 800842a:	4293      	cmp	r3, r2
 800842c:	d034      	beq.n	8008498 <RemovePortButton+0xc8>
	{	
#ifdef _Usart5	
		MX_USART5_UART_Init();
#endif
	} 
	else if (huart->Instance == USART6) 
 800842e:	4a26      	ldr	r2, [pc, #152]	; (80084c8 <RemovePortButton+0xf8>)
 8008430:	4293      	cmp	r3, r2
 8008432:	d035      	beq.n	80084a0 <RemovePortButton+0xd0>
	{	
#ifdef _Usart6	
		MX_USART6_UART_Init();
#endif
	} 
	else if (huart->Instance == USART7) 
 8008434:	4a25      	ldr	r2, [pc, #148]	; (80084cc <RemovePortButton+0xfc>)
 8008436:	4293      	cmp	r3, r2
 8008438:	d038      	beq.n	80084ac <RemovePortButton+0xdc>
	{	
#ifdef _Usart7	
		MX_USART7_UART_Init();
#endif
	} 
	else if (huart->Instance == USART8) 
 800843a:	4a25      	ldr	r2, [pc, #148]	; (80084d0 <RemovePortButton+0x100>)
 800843c:	4694      	mov	ip, r2
 800843e:	4463      	add	r3, ip
 8008440:	1e5c      	subs	r4, r3, #1
 8008442:	41a3      	sbcs	r3, r4
 8008444:	425c      	negs	r4, r3
 8008446:	b2e4      	uxtb	r4, r4
	} 
	else
		result = BOS_ERROR;			
	
	/* 4. Start scanning this port */
	portStatus[port] = FREE;
 8008448:	4b22      	ldr	r3, [pc, #136]	; (80084d4 <RemovePortButton+0x104>)
 800844a:	2200      	movs	r2, #0
 800844c:	555a      	strb	r2, [r3, r5]
	/* Read this port again */
	HAL_UART_Receive_IT(huart, (uint8_t *)&cRxedChar, 1);	
 800844e:	3201      	adds	r2, #1
 8008450:	4921      	ldr	r1, [pc, #132]	; (80084d8 <RemovePortButton+0x108>)
 8008452:	0030      	movs	r0, r6
 8008454:	f00a fcc2 	bl	8012ddc <HAL_UART_Receive_IT>
	
	return result;
}
 8008458:	0020      	movs	r0, r4
 800845a:	b002      	add	sp, #8
 800845c:	bd70      	pop	{r4, r5, r6, pc}
		EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1), 0);
 800845e:	2100      	movs	r1, #0
 8008460:	0020      	movs	r0, r4
 8008462:	f7ff f839 	bl	80074d8 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1)+1, 0);
 8008466:	1c60      	adds	r0, r4, #1
 8008468:	2100      	movs	r1, #0
 800846a:	f7ff f835 	bl	80074d8 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1)+2, 0);
 800846e:	1ca0      	adds	r0, r4, #2
 8008470:	2100      	movs	r1, #0
 8008472:	f7ff f831 	bl	80074d8 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1)+3, 0);		
 8008476:	1ce0      	adds	r0, r4, #3
 8008478:	2100      	movs	r1, #0
 800847a:	f7ff f82d 	bl	80074d8 <EE_WriteVariable>
 800847e:	e7c2      	b.n	8008406 <RemovePortButton+0x36>
		MX_USART1_UART_Init();
 8008480:	f005 fa82 	bl	800d988 <MX_USART1_UART_Init>
	BOS_Status result = BOS_OK;
 8008484:	2400      	movs	r4, #0
 8008486:	e7df      	b.n	8008448 <RemovePortButton+0x78>
		MX_USART2_UART_Init();
 8008488:	f005 fa96 	bl	800d9b8 <MX_USART2_UART_Init>
	BOS_Status result = BOS_OK;
 800848c:	2400      	movs	r4, #0
 800848e:	e7db      	b.n	8008448 <RemovePortButton+0x78>
		MX_USART3_UART_Init();
 8008490:	f005 faaa 	bl	800d9e8 <MX_USART3_UART_Init>
	BOS_Status result = BOS_OK;
 8008494:	2400      	movs	r4, #0
 8008496:	e7d7      	b.n	8008448 <RemovePortButton+0x78>
		MX_USART5_UART_Init();
 8008498:	f005 fabe 	bl	800da18 <MX_USART5_UART_Init>
	BOS_Status result = BOS_OK;
 800849c:	2400      	movs	r4, #0
 800849e:	e7d3      	b.n	8008448 <RemovePortButton+0x78>
		MX_USART6_UART_Init();
 80084a0:	f005 fad2 	bl	800da48 <MX_USART6_UART_Init>
	BOS_Status result = BOS_OK;
 80084a4:	2400      	movs	r4, #0
 80084a6:	e7cf      	b.n	8008448 <RemovePortButton+0x78>
 80084a8:	2400      	movs	r4, #0
 80084aa:	e7cd      	b.n	8008448 <RemovePortButton+0x78>
 80084ac:	2400      	movs	r4, #0
 80084ae:	e7cb      	b.n	8008448 <RemovePortButton+0x78>
 80084b0:	20000f3c 	.word	0x20000f3c
 80084b4:	40013800 	.word	0x40013800
 80084b8:	40004400 	.word	0x40004400
 80084bc:	40004800 	.word	0x40004800
 80084c0:	40004c00 	.word	0x40004c00
 80084c4:	40005000 	.word	0x40005000
 80084c8:	40011400 	.word	0x40011400
 80084cc:	40011800 	.word	0x40011800
 80084d0:	bffee400 	.word	0xbffee400
 80084d4:	20000b80 	.word	0x20000b80
 80084d8:	200008f0 	.word	0x200008f0

080084dc <SetButtonEvents>:
					released_x1sec, released_x1sec, released_x1sec: Release time for events Y1, Y2 and Y3 in seconds. Use 0 to disable the event. 
					mode: BUTTON_EVENT_MODE_CLEAR to clear events marked with 0, BUTTON_EVENT_MODE_OR to OR events marked with 1 with existing events.
*/
BOS_Status SetButtonEvents(uint8_t port, uint8_t clicked, uint8_t dbl_clicked, uint8_t pressed_x1sec, uint8_t pressed_x2sec, uint8_t pressed_x3sec,\
													uint8_t released_y1sec, uint8_t released_y2sec, uint8_t released_y3sec, uint8_t mode)
{
 80084dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80084de:	46de      	mov	lr, fp
 80084e0:	4657      	mov	r7, sl
 80084e2:	464e      	mov	r6, r9
 80084e4:	4645      	mov	r5, r8
 80084e6:	b5e0      	push	{r5, r6, r7, lr}
 80084e8:	b085      	sub	sp, #20
 80084ea:	0005      	movs	r5, r0
 80084ec:	469c      	mov	ip, r3
 80084ee:	9301      	str	r3, [sp, #4]
 80084f0:	ab0e      	add	r3, sp, #56	; 0x38
 80084f2:	781e      	ldrb	r6, [r3, #0]
 80084f4:	ab0f      	add	r3, sp, #60	; 0x3c
 80084f6:	781f      	ldrb	r7, [r3, #0]
 80084f8:	ab10      	add	r3, sp, #64	; 0x40
 80084fa:	7818      	ldrb	r0, [r3, #0]
 80084fc:	4681      	mov	r9, r0
 80084fe:	ab11      	add	r3, sp, #68	; 0x44
 8008500:	7818      	ldrb	r0, [r3, #0]
 8008502:	4682      	mov	sl, r0
 8008504:	ab12      	add	r3, sp, #72	; 0x48
 8008506:	7818      	ldrb	r0, [r3, #0]
 8008508:	4680      	mov	r8, r0
 800850a:	ab13      	add	r3, sp, #76	; 0x4c
 800850c:	7818      	ldrb	r0, [r3, #0]
	BOS_Status result = BOS_OK;	
	uint16_t res, temp16; uint8_t temp8;
	
	if (button[port].type == NONE)
 800850e:	00ec      	lsls	r4, r5, #3
 8008510:	1964      	adds	r4, r4, r5
 8008512:	4bcd      	ldr	r3, [pc, #820]	; (8008848 <SetButtonEvents+0x36c>)
 8008514:	191b      	adds	r3, r3, r4
 8008516:	785b      	ldrb	r3, [r3, #1]
 8008518:	2b00      	cmp	r3, #0
 800851a:	d100      	bne.n	800851e <SetButtonEvents+0x42>
 800851c:	e08c      	b.n	8008638 <SetButtonEvents+0x15c>
		return BOS_ERR_BUTTON_NOT_DEFINED;
	
	button[port].pressedX1Sec = pressed_x1sec; button[port].pressedX2Sec = pressed_x2sec; button[port].pressedX3Sec = pressed_x3sec;
 800851e:	00ec      	lsls	r4, r5, #3
 8008520:	1964      	adds	r4, r4, r5
 8008522:	4bc9      	ldr	r3, [pc, #804]	; (8008848 <SetButtonEvents+0x36c>)
 8008524:	191b      	adds	r3, r3, r4
 8008526:	4664      	mov	r4, ip
 8008528:	709c      	strb	r4, [r3, #2]
 800852a:	70de      	strb	r6, [r3, #3]
 800852c:	711f      	strb	r7, [r3, #4]
	button[port].releasedY1Sec = released_y1sec; button[port].releasedY2Sec = released_y2sec; button[port].releasedY3Sec = released_y3sec;
 800852e:	464c      	mov	r4, r9
 8008530:	715c      	strb	r4, [r3, #5]
 8008532:	4654      	mov	r4, sl
 8008534:	719c      	strb	r4, [r3, #6]
 8008536:	4644      	mov	r4, r8
 8008538:	71dc      	strb	r4, [r3, #7]
	
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && clicked)) {				
 800853a:	2801      	cmp	r0, #1
 800853c:	d100      	bne.n	8008540 <SetButtonEvents+0x64>
 800853e:	e0ec      	b.n	800871a <SetButtonEvents+0x23e>
 8008540:	2800      	cmp	r0, #0
 8008542:	d000      	beq.n	8008546 <SetButtonEvents+0x6a>
 8008544:	e124      	b.n	8008790 <SetButtonEvents+0x2b4>
 8008546:	2900      	cmp	r1, #0
 8008548:	d000      	beq.n	800854c <SetButtonEvents+0x70>
 800854a:	e170      	b.n	800882e <SetButtonEvents+0x352>
		button[port].events |= BUTTON_EVENT_CLICKED;
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !clicked) {
		button[port].events &= ~BUTTON_EVENT_CLICKED;		
 800854c:	00e9      	lsls	r1, r5, #3
 800854e:	1949      	adds	r1, r1, r5
 8008550:	4bbd      	ldr	r3, [pc, #756]	; (8008848 <SetButtonEvents+0x36c>)
 8008552:	185b      	adds	r3, r3, r1
 8008554:	7a19      	ldrb	r1, [r3, #8]
 8008556:	2401      	movs	r4, #1
 8008558:	43a1      	bics	r1, r4
 800855a:	7219      	strb	r1, [r3, #8]
	}
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && dbl_clicked)) {		
 800855c:	2a00      	cmp	r2, #0
 800855e:	d100      	bne.n	8008562 <SetButtonEvents+0x86>
 8008560:	e0c3      	b.n	80086ea <SetButtonEvents+0x20e>
		button[port].events |= BUTTON_EVENT_DBL_CLICKED;
 8008562:	00ea      	lsls	r2, r5, #3
 8008564:	1952      	adds	r2, r2, r5
 8008566:	4bb8      	ldr	r3, [pc, #736]	; (8008848 <SetButtonEvents+0x36c>)
 8008568:	189b      	adds	r3, r3, r2
 800856a:	7a1a      	ldrb	r2, [r3, #8]
 800856c:	2102      	movs	r1, #2
 800856e:	430a      	orrs	r2, r1
 8008570:	721a      	strb	r2, [r3, #8]
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !dbl_clicked) {
		button[port].events &= ~BUTTON_EVENT_DBL_CLICKED;		
	}		
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x1sec)) {			
 8008572:	2801      	cmp	r0, #1
 8008574:	d100      	bne.n	8008578 <SetButtonEvents+0x9c>
 8008576:	e0da      	b.n	800872e <SetButtonEvents+0x252>
 8008578:	2800      	cmp	r0, #0
 800857a:	d100      	bne.n	800857e <SetButtonEvents+0xa2>
 800857c:	e0bd      	b.n	80086fa <SetButtonEvents+0x21e>
 800857e:	e107      	b.n	8008790 <SetButtonEvents+0x2b4>
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X2_SEC;
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !pressed_x2sec) {
		button[port].events &= ~BUTTON_EVENT_PRESSED_FOR_X2_SEC;		
	}		
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x3sec)) {		
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X3_SEC;
 8008580:	00ea      	lsls	r2, r5, #3
 8008582:	1952      	adds	r2, r2, r5
 8008584:	4bb0      	ldr	r3, [pc, #704]	; (8008848 <SetButtonEvents+0x36c>)
 8008586:	189b      	adds	r3, r3, r2
 8008588:	7a1a      	ldrb	r2, [r3, #8]
 800858a:	2110      	movs	r1, #16
 800858c:	430a      	orrs	r2, r1
 800858e:	721a      	strb	r2, [r3, #8]
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !pressed_x3sec) {
		button[port].events &= ~BUTTON_EVENT_PRESSED_FOR_X3_SEC;		
	}		
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && released_y1sec)) {		
 8008590:	2801      	cmp	r0, #1
 8008592:	d100      	bne.n	8008596 <SetButtonEvents+0xba>
 8008594:	e0e3      	b.n	800875e <SetButtonEvents+0x282>
 8008596:	2800      	cmp	r0, #0
 8008598:	d000      	beq.n	800859c <SetButtonEvents+0xc0>
 800859a:	e0f9      	b.n	8008790 <SetButtonEvents+0x2b4>
 800859c:	464b      	mov	r3, r9
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d063      	beq.n	800866a <SetButtonEvents+0x18e>
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y1_SEC;
 80085a2:	00ea      	lsls	r2, r5, #3
 80085a4:	1952      	adds	r2, r2, r5
 80085a6:	4ba8      	ldr	r3, [pc, #672]	; (8008848 <SetButtonEvents+0x36c>)
 80085a8:	189b      	adds	r3, r3, r2
 80085aa:	7a1a      	ldrb	r2, [r3, #8]
 80085ac:	2120      	movs	r1, #32
 80085ae:	430a      	orrs	r2, r1
 80085b0:	721a      	strb	r2, [r3, #8]
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !released_y1sec) {
		button[port].events &= ~BUTTON_EVENT_RELEASED_FOR_Y1_SEC;		
	}		
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && released_y2sec)) {		
 80085b2:	e00a      	b.n	80085ca <SetButtonEvents+0xee>
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y1_SEC;
 80085b4:	00ea      	lsls	r2, r5, #3
 80085b6:	1952      	adds	r2, r2, r5
 80085b8:	4ba3      	ldr	r3, [pc, #652]	; (8008848 <SetButtonEvents+0x36c>)
 80085ba:	189b      	adds	r3, r3, r2
 80085bc:	7a1a      	ldrb	r2, [r3, #8]
 80085be:	2120      	movs	r1, #32
 80085c0:	430a      	orrs	r2, r1
 80085c2:	721a      	strb	r2, [r3, #8]
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && released_y2sec)) {		
 80085c4:	2801      	cmp	r0, #1
 80085c6:	d100      	bne.n	80085ca <SetButtonEvents+0xee>
 80085c8:	e0d1      	b.n	800876e <SetButtonEvents+0x292>
 80085ca:	2800      	cmp	r0, #0
 80085cc:	d000      	beq.n	80085d0 <SetButtonEvents+0xf4>
 80085ce:	e0df      	b.n	8008790 <SetButtonEvents+0x2b4>
 80085d0:	4653      	mov	r3, sl
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d054      	beq.n	8008680 <SetButtonEvents+0x1a4>
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y2_SEC;
 80085d6:	00ea      	lsls	r2, r5, #3
 80085d8:	1952      	adds	r2, r2, r5
 80085da:	4b9b      	ldr	r3, [pc, #620]	; (8008848 <SetButtonEvents+0x36c>)
 80085dc:	189b      	adds	r3, r3, r2
 80085de:	7a1a      	ldrb	r2, [r3, #8]
 80085e0:	2140      	movs	r1, #64	; 0x40
 80085e2:	430a      	orrs	r2, r1
 80085e4:	721a      	strb	r2, [r3, #8]
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !released_y2sec) {
		button[port].events &= ~BUTTON_EVENT_RELEASED_FOR_Y2_SEC;		
	}		
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && released_y3sec)) {		
 80085e6:	e00a      	b.n	80085fe <SetButtonEvents+0x122>
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y2_SEC;
 80085e8:	00ea      	lsls	r2, r5, #3
 80085ea:	1952      	adds	r2, r2, r5
 80085ec:	4b96      	ldr	r3, [pc, #600]	; (8008848 <SetButtonEvents+0x36c>)
 80085ee:	189b      	adds	r3, r3, r2
 80085f0:	7a1a      	ldrb	r2, [r3, #8]
 80085f2:	2140      	movs	r1, #64	; 0x40
 80085f4:	430a      	orrs	r2, r1
 80085f6:	721a      	strb	r2, [r3, #8]
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && released_y3sec)) {		
 80085f8:	2801      	cmp	r0, #1
 80085fa:	d100      	bne.n	80085fe <SetButtonEvents+0x122>
 80085fc:	e0bf      	b.n	800877e <SetButtonEvents+0x2a2>
 80085fe:	2800      	cmp	r0, #0
 8008600:	d046      	beq.n	8008690 <SetButtonEvents+0x1b4>
 8008602:	e0c5      	b.n	8008790 <SetButtonEvents+0x2b4>
	if(!res)																														// This variable exists
	{
		temp8 = (uint8_t)(temp16 >> 8);																		// Keep upper byte
		/* Store event flags */
		if ((uint8_t)(temp16) != button[port].events) {										// Update only if different
			temp16 = ((uint16_t)temp8 << 8) | (uint16_t)button[port].events;
 8008604:	0a19      	lsrs	r1, r3, #8
 8008606:	0209      	lsls	r1, r1, #8
 8008608:	4301      	orrs	r1, r0
 800860a:	ab02      	add	r3, sp, #8
 800860c:	80d9      	strh	r1, [r3, #6]
			EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1), temp16);
 800860e:	0020      	movs	r0, r4
 8008610:	f7fe ff62 	bl	80074d8 <EE_WriteVariable>
 8008614:	e0d3      	b.n	80087be <SetButtonEvents+0x2e2>
		}
		
		/* Store times - only if different */
		EE_ReadVariable(_EE_BUTTON_BASE+4*(port-1)+1, &temp16);
		if ( temp16 != (((uint16_t)pressed_x1sec << 8) | (uint16_t) released_y1sec) )
			EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1)+1, ((uint16_t)pressed_x1sec << 8) | (uint16_t) released_y1sec);
 8008616:	464b      	mov	r3, r9
 8008618:	4319      	orrs	r1, r3
 800861a:	4658      	mov	r0, fp
 800861c:	f7fe ff5c 	bl	80074d8 <EE_WriteVariable>
 8008620:	e0dd      	b.n	80087de <SetButtonEvents+0x302>
		
		EE_ReadVariable(_EE_BUTTON_BASE+4*(port-1)+2, &temp16);
		if ( temp16 != (((uint16_t)pressed_x2sec << 8) | (uint16_t) released_y2sec) )
			EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1)+2, ((uint16_t)pressed_x2sec << 8) | (uint16_t) released_y2sec);
 8008622:	0019      	movs	r1, r3
 8008624:	0028      	movs	r0, r5
 8008626:	f7fe ff57 	bl	80074d8 <EE_WriteVariable>
 800862a:	e0ea      	b.n	8008802 <SetButtonEvents+0x326>
		
		EE_ReadVariable(_EE_BUTTON_BASE+4*(port-1)+3, &temp16);
		if ( temp16 != (((uint16_t)pressed_x3sec << 8) | (uint16_t) released_y3sec) )
			EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1)+3, ((uint16_t)pressed_x3sec << 8) | (uint16_t) released_y3sec);
 800862c:	0019      	movs	r1, r3
 800862e:	0020      	movs	r0, r4
 8008630:	f7fe ff52 	bl	80074d8 <EE_WriteVariable>
	}	// TODO - var does not exist after adding button!
	else																																// Variable does not exist. Return error
		return BOS_ERR_BUTTON_NOT_DEFINED;	
		
	
	return result;
 8008634:	2000      	movs	r0, #0
 8008636:	e0f3      	b.n	8008820 <SetButtonEvents+0x344>
		return BOS_ERR_BUTTON_NOT_DEFINED;
 8008638:	200b      	movs	r0, #11
 800863a:	e0f1      	b.n	8008820 <SetButtonEvents+0x344>
		return BOS_ERR_BUTTON_NOT_DEFINED;	
 800863c:	200b      	movs	r0, #11
 800863e:	e0ef      	b.n	8008820 <SetButtonEvents+0x344>
		button[port].events &= ~BUTTON_EVENT_PRESSED_FOR_X2_SEC;		
 8008640:	00ea      	lsls	r2, r5, #3
 8008642:	1952      	adds	r2, r2, r5
 8008644:	4b80      	ldr	r3, [pc, #512]	; (8008848 <SetButtonEvents+0x36c>)
 8008646:	189b      	adds	r3, r3, r2
 8008648:	7a1a      	ldrb	r2, [r3, #8]
 800864a:	2108      	movs	r1, #8
 800864c:	438a      	bics	r2, r1
 800864e:	721a      	strb	r2, [r3, #8]
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x3sec)) {		
 8008650:	2f00      	cmp	r7, #0
 8008652:	d195      	bne.n	8008580 <SetButtonEvents+0xa4>
		button[port].events &= ~BUTTON_EVENT_PRESSED_FOR_X3_SEC;		
 8008654:	00ea      	lsls	r2, r5, #3
 8008656:	1952      	adds	r2, r2, r5
 8008658:	4b7b      	ldr	r3, [pc, #492]	; (8008848 <SetButtonEvents+0x36c>)
 800865a:	189b      	adds	r3, r3, r2
 800865c:	7a1a      	ldrb	r2, [r3, #8]
 800865e:	2110      	movs	r1, #16
 8008660:	438a      	bics	r2, r1
 8008662:	721a      	strb	r2, [r3, #8]
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && released_y1sec)) {		
 8008664:	464b      	mov	r3, r9
 8008666:	2b00      	cmp	r3, #0
 8008668:	d1a4      	bne.n	80085b4 <SetButtonEvents+0xd8>
		button[port].events &= ~BUTTON_EVENT_RELEASED_FOR_Y1_SEC;		
 800866a:	00ea      	lsls	r2, r5, #3
 800866c:	1952      	adds	r2, r2, r5
 800866e:	4b76      	ldr	r3, [pc, #472]	; (8008848 <SetButtonEvents+0x36c>)
 8008670:	189b      	adds	r3, r3, r2
 8008672:	7a1a      	ldrb	r2, [r3, #8]
 8008674:	2120      	movs	r1, #32
 8008676:	438a      	bics	r2, r1
 8008678:	721a      	strb	r2, [r3, #8]
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && released_y2sec)) {		
 800867a:	4653      	mov	r3, sl
 800867c:	2b00      	cmp	r3, #0
 800867e:	d1b3      	bne.n	80085e8 <SetButtonEvents+0x10c>
		button[port].events &= ~BUTTON_EVENT_RELEASED_FOR_Y2_SEC;		
 8008680:	00ea      	lsls	r2, r5, #3
 8008682:	1952      	adds	r2, r2, r5
 8008684:	4b70      	ldr	r3, [pc, #448]	; (8008848 <SetButtonEvents+0x36c>)
 8008686:	189b      	adds	r3, r3, r2
 8008688:	7a1a      	ldrb	r2, [r3, #8]
 800868a:	2140      	movs	r1, #64	; 0x40
 800868c:	438a      	bics	r2, r1
 800868e:	721a      	strb	r2, [r3, #8]
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && released_y3sec)) {		
 8008690:	4643      	mov	r3, r8
 8008692:	2b00      	cmp	r3, #0
 8008694:	d173      	bne.n	800877e <SetButtonEvents+0x2a2>
		button[port].events &= ~BUTTON_EVENT_RELEASED_FOR_Y3_SEC;		
 8008696:	00ea      	lsls	r2, r5, #3
 8008698:	1952      	adds	r2, r2, r5
 800869a:	4b6b      	ldr	r3, [pc, #428]	; (8008848 <SetButtonEvents+0x36c>)
 800869c:	189b      	adds	r3, r3, r2
 800869e:	7a19      	ldrb	r1, [r3, #8]
 80086a0:	227f      	movs	r2, #127	; 0x7f
 80086a2:	400a      	ands	r2, r1
 80086a4:	721a      	strb	r2, [r3, #8]
 80086a6:	e073      	b.n	8008790 <SetButtonEvents+0x2b4>
		button[port].events &= ~BUTTON_EVENT_PRESSED_FOR_X1_SEC;		
 80086a8:	00ea      	lsls	r2, r5, #3
 80086aa:	1952      	adds	r2, r2, r5
 80086ac:	4b66      	ldr	r3, [pc, #408]	; (8008848 <SetButtonEvents+0x36c>)
 80086ae:	189b      	adds	r3, r3, r2
 80086b0:	7a1a      	ldrb	r2, [r3, #8]
 80086b2:	2104      	movs	r1, #4
 80086b4:	438a      	bics	r2, r1
 80086b6:	721a      	strb	r2, [r3, #8]
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x2sec)) {		
 80086b8:	2e00      	cmp	r6, #0
 80086ba:	d0c1      	beq.n	8008640 <SetButtonEvents+0x164>
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X2_SEC;
 80086bc:	00ea      	lsls	r2, r5, #3
 80086be:	1952      	adds	r2, r2, r5
 80086c0:	4b61      	ldr	r3, [pc, #388]	; (8008848 <SetButtonEvents+0x36c>)
 80086c2:	189b      	adds	r3, r3, r2
 80086c4:	7a1a      	ldrb	r2, [r3, #8]
 80086c6:	2108      	movs	r1, #8
 80086c8:	430a      	orrs	r2, r1
 80086ca:	721a      	strb	r2, [r3, #8]
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x3sec)) {		
 80086cc:	2801      	cmp	r0, #1
 80086ce:	d03e      	beq.n	800874e <SetButtonEvents+0x272>
 80086d0:	2800      	cmp	r0, #0
 80086d2:	d15d      	bne.n	8008790 <SetButtonEvents+0x2b4>
 80086d4:	2f00      	cmp	r7, #0
 80086d6:	d0bd      	beq.n	8008654 <SetButtonEvents+0x178>
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X3_SEC;
 80086d8:	00ea      	lsls	r2, r5, #3
 80086da:	1952      	adds	r2, r2, r5
 80086dc:	4b5a      	ldr	r3, [pc, #360]	; (8008848 <SetButtonEvents+0x36c>)
 80086de:	189b      	adds	r3, r3, r2
 80086e0:	7a1a      	ldrb	r2, [r3, #8]
 80086e2:	2110      	movs	r1, #16
 80086e4:	430a      	orrs	r2, r1
 80086e6:	721a      	strb	r2, [r3, #8]
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && released_y1sec)) {		
 80086e8:	e755      	b.n	8008596 <SetButtonEvents+0xba>
		button[port].events &= ~BUTTON_EVENT_DBL_CLICKED;		
 80086ea:	00ea      	lsls	r2, r5, #3
 80086ec:	1952      	adds	r2, r2, r5
 80086ee:	4b56      	ldr	r3, [pc, #344]	; (8008848 <SetButtonEvents+0x36c>)
 80086f0:	189b      	adds	r3, r3, r2
 80086f2:	7a1a      	ldrb	r2, [r3, #8]
 80086f4:	2102      	movs	r1, #2
 80086f6:	438a      	bics	r2, r1
 80086f8:	721a      	strb	r2, [r3, #8]
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x1sec)) {			
 80086fa:	9b01      	ldr	r3, [sp, #4]
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d0d3      	beq.n	80086a8 <SetButtonEvents+0x1cc>
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X1_SEC;
 8008700:	00ea      	lsls	r2, r5, #3
 8008702:	1952      	adds	r2, r2, r5
 8008704:	4b50      	ldr	r3, [pc, #320]	; (8008848 <SetButtonEvents+0x36c>)
 8008706:	189b      	adds	r3, r3, r2
 8008708:	7a1a      	ldrb	r2, [r3, #8]
 800870a:	2104      	movs	r1, #4
 800870c:	430a      	orrs	r2, r1
 800870e:	721a      	strb	r2, [r3, #8]
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x2sec)) {		
 8008710:	2801      	cmp	r0, #1
 8008712:	d014      	beq.n	800873e <SetButtonEvents+0x262>
 8008714:	2800      	cmp	r0, #0
 8008716:	d0cf      	beq.n	80086b8 <SetButtonEvents+0x1dc>
 8008718:	e03a      	b.n	8008790 <SetButtonEvents+0x2b4>
		button[port].events |= BUTTON_EVENT_CLICKED;
 800871a:	00eb      	lsls	r3, r5, #3
 800871c:	195b      	adds	r3, r3, r5
 800871e:	4a4a      	ldr	r2, [pc, #296]	; (8008848 <SetButtonEvents+0x36c>)
 8008720:	18d2      	adds	r2, r2, r3
 8008722:	7a13      	ldrb	r3, [r2, #8]
 8008724:	2101      	movs	r1, #1
 8008726:	430b      	orrs	r3, r1
		button[port].events |= BUTTON_EVENT_DBL_CLICKED;
 8008728:	2102      	movs	r1, #2
 800872a:	430b      	orrs	r3, r1
 800872c:	7213      	strb	r3, [r2, #8]
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X1_SEC;
 800872e:	00ea      	lsls	r2, r5, #3
 8008730:	1952      	adds	r2, r2, r5
 8008732:	4b45      	ldr	r3, [pc, #276]	; (8008848 <SetButtonEvents+0x36c>)
 8008734:	189b      	adds	r3, r3, r2
 8008736:	7a1a      	ldrb	r2, [r3, #8]
 8008738:	2104      	movs	r1, #4
 800873a:	430a      	orrs	r2, r1
 800873c:	721a      	strb	r2, [r3, #8]
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X2_SEC;
 800873e:	00ea      	lsls	r2, r5, #3
 8008740:	1952      	adds	r2, r2, r5
 8008742:	4b41      	ldr	r3, [pc, #260]	; (8008848 <SetButtonEvents+0x36c>)
 8008744:	189b      	adds	r3, r3, r2
 8008746:	7a1a      	ldrb	r2, [r3, #8]
 8008748:	2108      	movs	r1, #8
 800874a:	430a      	orrs	r2, r1
 800874c:	721a      	strb	r2, [r3, #8]
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X3_SEC;
 800874e:	00ea      	lsls	r2, r5, #3
 8008750:	1952      	adds	r2, r2, r5
 8008752:	4b3d      	ldr	r3, [pc, #244]	; (8008848 <SetButtonEvents+0x36c>)
 8008754:	189b      	adds	r3, r3, r2
 8008756:	7a1a      	ldrb	r2, [r3, #8]
 8008758:	2110      	movs	r1, #16
 800875a:	430a      	orrs	r2, r1
 800875c:	721a      	strb	r2, [r3, #8]
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y1_SEC;
 800875e:	00ea      	lsls	r2, r5, #3
 8008760:	1952      	adds	r2, r2, r5
 8008762:	4b39      	ldr	r3, [pc, #228]	; (8008848 <SetButtonEvents+0x36c>)
 8008764:	189b      	adds	r3, r3, r2
 8008766:	7a1a      	ldrb	r2, [r3, #8]
 8008768:	2120      	movs	r1, #32
 800876a:	430a      	orrs	r2, r1
 800876c:	721a      	strb	r2, [r3, #8]
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y2_SEC;
 800876e:	00ea      	lsls	r2, r5, #3
 8008770:	1952      	adds	r2, r2, r5
 8008772:	4b35      	ldr	r3, [pc, #212]	; (8008848 <SetButtonEvents+0x36c>)
 8008774:	189b      	adds	r3, r3, r2
 8008776:	7a1a      	ldrb	r2, [r3, #8]
 8008778:	2140      	movs	r1, #64	; 0x40
 800877a:	430a      	orrs	r2, r1
 800877c:	721a      	strb	r2, [r3, #8]
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y3_SEC;	
 800877e:	00ea      	lsls	r2, r5, #3
 8008780:	1952      	adds	r2, r2, r5
 8008782:	4b31      	ldr	r3, [pc, #196]	; (8008848 <SetButtonEvents+0x36c>)
 8008784:	189b      	adds	r3, r3, r2
 8008786:	7a19      	ldrb	r1, [r3, #8]
 8008788:	2280      	movs	r2, #128	; 0x80
 800878a:	4252      	negs	r2, r2
 800878c:	430a      	orrs	r2, r1
 800878e:	721a      	strb	r2, [r3, #8]
	res = EE_ReadVariable(_EE_BUTTON_BASE+4*(port-1), &temp16);
 8008790:	002c      	movs	r4, r5
 8008792:	343a      	adds	r4, #58	; 0x3a
 8008794:	00a4      	lsls	r4, r4, #2
 8008796:	ab02      	add	r3, sp, #8
 8008798:	1d99      	adds	r1, r3, #6
 800879a:	0020      	movs	r0, r4
 800879c:	f7fe fe70 	bl	8007480 <EE_ReadVariable>
	if(!res)																														// This variable exists
 80087a0:	2800      	cmp	r0, #0
 80087a2:	d000      	beq.n	80087a6 <SetButtonEvents+0x2ca>
 80087a4:	e74a      	b.n	800863c <SetButtonEvents+0x160>
		temp8 = (uint8_t)(temp16 >> 8);																		// Keep upper byte
 80087a6:	ab02      	add	r3, sp, #8
 80087a8:	1d9a      	adds	r2, r3, #6
 80087aa:	88db      	ldrh	r3, [r3, #6]
		if ((uint8_t)(temp16) != button[port].events) {										// Update only if different
 80087ac:	00e8      	lsls	r0, r5, #3
 80087ae:	1945      	adds	r5, r0, r5
 80087b0:	4825      	ldr	r0, [pc, #148]	; (8008848 <SetButtonEvents+0x36c>)
 80087b2:	1940      	adds	r0, r0, r5
 80087b4:	7a00      	ldrb	r0, [r0, #8]
 80087b6:	7812      	ldrb	r2, [r2, #0]
 80087b8:	4282      	cmp	r2, r0
 80087ba:	d000      	beq.n	80087be <SetButtonEvents+0x2e2>
 80087bc:	e722      	b.n	8008604 <SetButtonEvents+0x128>
		EE_ReadVariable(_EE_BUTTON_BASE+4*(port-1)+1, &temp16);
 80087be:	1c63      	adds	r3, r4, #1
 80087c0:	469b      	mov	fp, r3
 80087c2:	ab02      	add	r3, sp, #8
 80087c4:	1d9d      	adds	r5, r3, #6
 80087c6:	0029      	movs	r1, r5
 80087c8:	4658      	mov	r0, fp
 80087ca:	f7fe fe59 	bl	8007480 <EE_ReadVariable>
		if ( temp16 != (((uint16_t)pressed_x1sec << 8) | (uint16_t) released_y1sec) )
 80087ce:	9b01      	ldr	r3, [sp, #4]
 80087d0:	0219      	lsls	r1, r3, #8
 80087d2:	882a      	ldrh	r2, [r5, #0]
 80087d4:	464b      	mov	r3, r9
 80087d6:	430b      	orrs	r3, r1
 80087d8:	429a      	cmp	r2, r3
 80087da:	d000      	beq.n	80087de <SetButtonEvents+0x302>
 80087dc:	e71b      	b.n	8008616 <SetButtonEvents+0x13a>
		EE_ReadVariable(_EE_BUTTON_BASE+4*(port-1)+2, &temp16);
 80087de:	1ca5      	adds	r5, r4, #2
 80087e0:	2306      	movs	r3, #6
 80087e2:	aa02      	add	r2, sp, #8
 80087e4:	4694      	mov	ip, r2
 80087e6:	4463      	add	r3, ip
 80087e8:	4699      	mov	r9, r3
 80087ea:	0019      	movs	r1, r3
 80087ec:	0028      	movs	r0, r5
 80087ee:	f7fe fe47 	bl	8007480 <EE_ReadVariable>
		if ( temp16 != (((uint16_t)pressed_x2sec << 8) | (uint16_t) released_y2sec) )
 80087f2:	0236      	lsls	r6, r6, #8
 80087f4:	464b      	mov	r3, r9
 80087f6:	881a      	ldrh	r2, [r3, #0]
 80087f8:	4653      	mov	r3, sl
 80087fa:	4333      	orrs	r3, r6
 80087fc:	429a      	cmp	r2, r3
 80087fe:	d000      	beq.n	8008802 <SetButtonEvents+0x326>
 8008800:	e70f      	b.n	8008622 <SetButtonEvents+0x146>
		EE_ReadVariable(_EE_BUTTON_BASE+4*(port-1)+3, &temp16);
 8008802:	3403      	adds	r4, #3
 8008804:	ab02      	add	r3, sp, #8
 8008806:	1d9d      	adds	r5, r3, #6
 8008808:	0029      	movs	r1, r5
 800880a:	0020      	movs	r0, r4
 800880c:	f7fe fe38 	bl	8007480 <EE_ReadVariable>
		if ( temp16 != (((uint16_t)pressed_x3sec << 8) | (uint16_t) released_y3sec) )
 8008810:	023f      	lsls	r7, r7, #8
 8008812:	882a      	ldrh	r2, [r5, #0]
 8008814:	4643      	mov	r3, r8
 8008816:	433b      	orrs	r3, r7
	return result;
 8008818:	2000      	movs	r0, #0
		if ( temp16 != (((uint16_t)pressed_x3sec << 8) | (uint16_t) released_y3sec) )
 800881a:	429a      	cmp	r2, r3
 800881c:	d000      	beq.n	8008820 <SetButtonEvents+0x344>
 800881e:	e705      	b.n	800862c <SetButtonEvents+0x150>
}
 8008820:	b005      	add	sp, #20
 8008822:	bcf0      	pop	{r4, r5, r6, r7}
 8008824:	46bb      	mov	fp, r7
 8008826:	46b2      	mov	sl, r6
 8008828:	46a9      	mov	r9, r5
 800882a:	46a0      	mov	r8, r4
 800882c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		button[port].events |= BUTTON_EVENT_CLICKED;
 800882e:	00e9      	lsls	r1, r5, #3
 8008830:	1949      	adds	r1, r1, r5
 8008832:	4b05      	ldr	r3, [pc, #20]	; (8008848 <SetButtonEvents+0x36c>)
 8008834:	185b      	adds	r3, r3, r1
 8008836:	7a19      	ldrb	r1, [r3, #8]
 8008838:	2401      	movs	r4, #1
 800883a:	4321      	orrs	r1, r4
 800883c:	7219      	strb	r1, [r3, #8]
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && dbl_clicked)) {		
 800883e:	2800      	cmp	r0, #0
 8008840:	d100      	bne.n	8008844 <SetButtonEvents+0x368>
 8008842:	e68b      	b.n	800855c <SetButtonEvents+0x80>
 8008844:	e7a4      	b.n	8008790 <SetButtonEvents+0x2b4>
 8008846:	46c0      	nop			; (mov r8, r8)
 8008848:	20000f3c 	.word	0x20000f3c

0800884c <StreamTimerCallback>:
/*-----------------------------------------------------------*/

/* --- DMA stream timer callback --- 
*/
void StreamTimerCallback( TimerHandle_t xTimerStream )
{
 800884c:	b510      	push	{r4, lr}
	uint32_t tid = 0;
	
	tid = ( uint32_t ) pvTimerGetTimerID( xTimerStream );
 800884e:	f007 fa19 	bl	800fc84 <pvTimerGetTimerID>
	
	StopStreamDMA(tid);
 8008852:	b2c4      	uxtb	r4, r0
 8008854:	0020      	movs	r0, r4
 8008856:	f7fe fccf 	bl	80071f8 <StopStreamDMA>
	
	SwitchStreamDMAToMsg(tid);
 800885a:	0020      	movs	r0, r4
 800885c:	f7fe fcfa 	bl	8007254 <SwitchStreamDMAToMsg>
}
 8008860:	bd10      	pop	{r4, pc}
	...

08008864 <SetupDMAStreams>:
{
 8008864:	b570      	push	{r4, r5, r6, lr}
 8008866:	b084      	sub	sp, #16
 8008868:	0005      	movs	r5, r0
 800886a:	000c      	movs	r4, r1
 800886c:	0016      	movs	r6, r2
 800886e:	220f      	movs	r2, #15
 8008870:	446a      	add	r2, sp
 8008872:	7013      	strb	r3, [r2, #0]
	if (src == dst) {							// Streaming inside destination module. Lock this port to streaming but no need to setup DMA
 8008874:	aa08      	add	r2, sp, #32
 8008876:	7810      	ldrb	r0, [r2, #0]
 8008878:	4283      	cmp	r3, r0
 800887a:	d057      	beq.n	800892c <SetupDMAStreams+0xc8>
	} else if (src == 0 || dst == 0) 			// Streaming outside source module or inside destination module without defining ports. Do not lock the port and do not setup DMA
 800887c:	2b00      	cmp	r3, #0
 800887e:	d100      	bne.n	8008882 <SetupDMAStreams+0x1e>
 8008880:	e0ba      	b.n	80089f8 <SetupDMAStreams+0x194>
 8008882:	2800      	cmp	r0, #0
 8008884:	d100      	bne.n	8008888 <SetupDMAStreams+0x24>
 8008886:	e0ba      	b.n	80089fe <SetupDMAStreams+0x19a>
	if (direction == FORWARD) 
 8008888:	2d00      	cmp	r5, #0
 800888a:	d054      	beq.n	8008936 <SetupDMAStreams+0xd2>
	else if (direction == BACKWARD) 
 800888c:	2d01      	cmp	r5, #1
 800888e:	d100      	bne.n	8008892 <SetupDMAStreams+0x2e>
 8008890:	e089      	b.n	80089a6 <SetupDMAStreams+0x142>
		return BOS_ERR_WrongParam;
 8008892:	2067      	movs	r0, #103	; 0x67
	else if (direction == BIDIRECTIONAL) 
 8008894:	2d02      	cmp	r5, #2
 8008896:	d000      	beq.n	800889a <SetupDMAStreams+0x36>
 8008898:	e0af      	b.n	80089fa <SetupDMAStreams+0x196>
		if (StartDMAstream(GetUart(src), GetUart(dst), 1) == BOS_ERR_PORT_BUSY)	return BOS_ERR_PORT_BUSY;
 800889a:	0018      	movs	r0, r3
 800889c:	f005 fa02 	bl	800dca4 <GetUart>
 80088a0:	0005      	movs	r5, r0
 80088a2:	ab08      	add	r3, sp, #32
 80088a4:	7818      	ldrb	r0, [r3, #0]
 80088a6:	f005 f9fd 	bl	800dca4 <GetUart>
 80088aa:	0001      	movs	r1, r0
 80088ac:	2201      	movs	r2, #1
 80088ae:	0028      	movs	r0, r5
 80088b0:	f7fe fd06 	bl	80072c0 <StartDMAstream>
 80088b4:	2817      	cmp	r0, #23
 80088b6:	d100      	bne.n	80088ba <SetupDMAStreams+0x56>
 80088b8:	e09f      	b.n	80089fa <SetupDMAStreams+0x196>
		xTimerStream = xTimerCreate( "StreamTimer", pdMS_TO_TICKS(timeout), pdFALSE, ( void * )&src, StreamTimerCallback );
 80088ba:	0170      	lsls	r0, r6, #5
 80088bc:	1b80      	subs	r0, r0, r6
 80088be:	0080      	lsls	r0, r0, #2
 80088c0:	1980      	adds	r0, r0, r6
 80088c2:	00c0      	lsls	r0, r0, #3
 80088c4:	21fa      	movs	r1, #250	; 0xfa
 80088c6:	0089      	lsls	r1, r1, #2
 80088c8:	f7f7 fc42 	bl	8000150 <__udivsi3>
 80088cc:	0005      	movs	r5, r0
 80088ce:	4b4d      	ldr	r3, [pc, #308]	; (8008a04 <SetupDMAStreams+0x1a0>)
 80088d0:	9300      	str	r3, [sp, #0]
 80088d2:	230f      	movs	r3, #15
 80088d4:	446b      	add	r3, sp
 80088d6:	2200      	movs	r2, #0
 80088d8:	0001      	movs	r1, r0
 80088da:	484b      	ldr	r0, [pc, #300]	; (8008a08 <SetupDMAStreams+0x1a4>)
 80088dc:	f007 f876 	bl	800f9cc <xTimerCreate>
		dmaStreamTotal[src-1] = count;
 80088e0:	466b      	mov	r3, sp
 80088e2:	7bdb      	ldrb	r3, [r3, #15]
 80088e4:	3b01      	subs	r3, #1
 80088e6:	009b      	lsls	r3, r3, #2
 80088e8:	4a48      	ldr	r2, [pc, #288]	; (8008a0c <SetupDMAStreams+0x1a8>)
 80088ea:	509c      	str	r4, [r3, r2]
		if (StartDMAstream(GetUart(dst), GetUart(src), 1) == BOS_ERR_PORT_BUSY)	return BOS_ERR_PORT_BUSY; 
 80088ec:	ab08      	add	r3, sp, #32
 80088ee:	7818      	ldrb	r0, [r3, #0]
 80088f0:	f005 f9d8 	bl	800dca4 <GetUart>
 80088f4:	0006      	movs	r6, r0
 80088f6:	466b      	mov	r3, sp
 80088f8:	7bd8      	ldrb	r0, [r3, #15]
 80088fa:	f005 f9d3 	bl	800dca4 <GetUart>
 80088fe:	0001      	movs	r1, r0
 8008900:	2201      	movs	r2, #1
 8008902:	0030      	movs	r0, r6
 8008904:	f7fe fcdc 	bl	80072c0 <StartDMAstream>
 8008908:	2817      	cmp	r0, #23
 800890a:	d076      	beq.n	80089fa <SetupDMAStreams+0x196>
		xTimerStream = xTimerCreate( "StreamTimer", pdMS_TO_TICKS(timeout), pdFALSE, ( void * )&dst, StreamTimerCallback );
 800890c:	4b3d      	ldr	r3, [pc, #244]	; (8008a04 <SetupDMAStreams+0x1a0>)
 800890e:	9300      	str	r3, [sp, #0]
 8008910:	ab08      	add	r3, sp, #32
 8008912:	2200      	movs	r2, #0
 8008914:	0029      	movs	r1, r5
 8008916:	483c      	ldr	r0, [pc, #240]	; (8008a08 <SetupDMAStreams+0x1a4>)
 8008918:	f007 f858 	bl	800f9cc <xTimerCreate>
 800891c:	0006      	movs	r6, r0
		dmaStreamTotal[dst-1] = count;
 800891e:	ab08      	add	r3, sp, #32
 8008920:	781b      	ldrb	r3, [r3, #0]
 8008922:	3b01      	subs	r3, #1
 8008924:	009b      	lsls	r3, r3, #2
 8008926:	4a39      	ldr	r2, [pc, #228]	; (8008a0c <SetupDMAStreams+0x1a8>)
 8008928:	509c      	str	r4, [r3, r2]
 800892a:	e02c      	b.n	8008986 <SetupDMAStreams+0x122>
		portStatus[src] = STREAM;
 800892c:	4a38      	ldr	r2, [pc, #224]	; (8008a10 <SetupDMAStreams+0x1ac>)
 800892e:	2102      	movs	r1, #2
 8008930:	54d1      	strb	r1, [r2, r3]
		return BOS_ERR_WrongParam;
 8008932:	2067      	movs	r0, #103	; 0x67
 8008934:	e061      	b.n	80089fa <SetupDMAStreams+0x196>
		if (StartDMAstream(GetUart(src), GetUart(dst), 1) == BOS_ERR_PORT_BUSY)	return BOS_ERR_PORT_BUSY; 
 8008936:	0018      	movs	r0, r3
 8008938:	f005 f9b4 	bl	800dca4 <GetUart>
 800893c:	0005      	movs	r5, r0
 800893e:	ab08      	add	r3, sp, #32
 8008940:	7818      	ldrb	r0, [r3, #0]
 8008942:	f005 f9af 	bl	800dca4 <GetUart>
 8008946:	0001      	movs	r1, r0
 8008948:	2201      	movs	r2, #1
 800894a:	0028      	movs	r0, r5
 800894c:	f7fe fcb8 	bl	80072c0 <StartDMAstream>
 8008950:	2817      	cmp	r0, #23
 8008952:	d052      	beq.n	80089fa <SetupDMAStreams+0x196>
		xTimerStream = xTimerCreate( "StreamTimer", pdMS_TO_TICKS(timeout), pdFALSE, ( void * )&src, StreamTimerCallback );
 8008954:	250f      	movs	r5, #15
 8008956:	446d      	add	r5, sp
 8008958:	0170      	lsls	r0, r6, #5
 800895a:	1b80      	subs	r0, r0, r6
 800895c:	0080      	lsls	r0, r0, #2
 800895e:	1980      	adds	r0, r0, r6
 8008960:	00c0      	lsls	r0, r0, #3
 8008962:	21fa      	movs	r1, #250	; 0xfa
 8008964:	0089      	lsls	r1, r1, #2
 8008966:	f7f7 fbf3 	bl	8000150 <__udivsi3>
 800896a:	0001      	movs	r1, r0
 800896c:	4b25      	ldr	r3, [pc, #148]	; (8008a04 <SetupDMAStreams+0x1a0>)
 800896e:	9300      	str	r3, [sp, #0]
 8008970:	002b      	movs	r3, r5
 8008972:	2200      	movs	r2, #0
 8008974:	4824      	ldr	r0, [pc, #144]	; (8008a08 <SetupDMAStreams+0x1a4>)
 8008976:	f007 f829 	bl	800f9cc <xTimerCreate>
 800897a:	0006      	movs	r6, r0
		dmaStreamTotal[src-1] = count;
 800897c:	782b      	ldrb	r3, [r5, #0]
 800897e:	3b01      	subs	r3, #1
 8008980:	009b      	lsls	r3, r3, #2
 8008982:	4a22      	ldr	r2, [pc, #136]	; (8008a0c <SetupDMAStreams+0x1a8>)
 8008984:	509c      	str	r4, [r3, r2]
	return BOS_OK;
 8008986:	2000      	movs	r0, #0
	if (xTimerStream != NULL)
 8008988:	2e00      	cmp	r6, #0
 800898a:	d036      	beq.n	80089fa <SetupDMAStreams+0x196>
		xTimerStart( xTimerStream, portMAX_DELAY );
 800898c:	f006 fa92 	bl	800eeb4 <xTaskGetTickCount>
 8008990:	0002      	movs	r2, r0
 8008992:	2301      	movs	r3, #1
 8008994:	425b      	negs	r3, r3
 8008996:	9300      	str	r3, [sp, #0]
 8008998:	2300      	movs	r3, #0
 800899a:	2101      	movs	r1, #1
 800899c:	0030      	movs	r0, r6
 800899e:	f007 f835 	bl	800fa0c <xTimerGenericCommand>
	return BOS_OK;
 80089a2:	2000      	movs	r0, #0
 80089a4:	e029      	b.n	80089fa <SetupDMAStreams+0x196>
		if (StartDMAstream(GetUart(dst), GetUart(src), 1) == BOS_ERR_PORT_BUSY)	return BOS_ERR_PORT_BUSY; 
 80089a6:	f005 f97d 	bl	800dca4 <GetUart>
 80089aa:	0005      	movs	r5, r0
 80089ac:	230f      	movs	r3, #15
 80089ae:	446b      	add	r3, sp
 80089b0:	7818      	ldrb	r0, [r3, #0]
 80089b2:	f005 f977 	bl	800dca4 <GetUart>
 80089b6:	0001      	movs	r1, r0
 80089b8:	2201      	movs	r2, #1
 80089ba:	0028      	movs	r0, r5
 80089bc:	f7fe fc80 	bl	80072c0 <StartDMAstream>
 80089c0:	2817      	cmp	r0, #23
 80089c2:	d01a      	beq.n	80089fa <SetupDMAStreams+0x196>
		xTimerStream = xTimerCreate( "StreamTimer", pdMS_TO_TICKS(timeout), pdFALSE, ( void * )&dst, StreamTimerCallback );
 80089c4:	0170      	lsls	r0, r6, #5
 80089c6:	1b80      	subs	r0, r0, r6
 80089c8:	0080      	lsls	r0, r0, #2
 80089ca:	1980      	adds	r0, r0, r6
 80089cc:	00c0      	lsls	r0, r0, #3
 80089ce:	21fa      	movs	r1, #250	; 0xfa
 80089d0:	0089      	lsls	r1, r1, #2
 80089d2:	f7f7 fbbd 	bl	8000150 <__udivsi3>
 80089d6:	0001      	movs	r1, r0
 80089d8:	4b0a      	ldr	r3, [pc, #40]	; (8008a04 <SetupDMAStreams+0x1a0>)
 80089da:	9300      	str	r3, [sp, #0]
 80089dc:	ab08      	add	r3, sp, #32
 80089de:	2200      	movs	r2, #0
 80089e0:	4809      	ldr	r0, [pc, #36]	; (8008a08 <SetupDMAStreams+0x1a4>)
 80089e2:	f006 fff3 	bl	800f9cc <xTimerCreate>
 80089e6:	0006      	movs	r6, r0
		dmaStreamTotal[src-1] = count;
 80089e8:	230f      	movs	r3, #15
 80089ea:	446b      	add	r3, sp
 80089ec:	781b      	ldrb	r3, [r3, #0]
 80089ee:	3b01      	subs	r3, #1
 80089f0:	009b      	lsls	r3, r3, #2
 80089f2:	4a06      	ldr	r2, [pc, #24]	; (8008a0c <SetupDMAStreams+0x1a8>)
 80089f4:	509c      	str	r4, [r3, r2]
 80089f6:	e7c6      	b.n	8008986 <SetupDMAStreams+0x122>
		return BOS_ERR_WrongParam;
 80089f8:	2067      	movs	r0, #103	; 0x67
}
 80089fa:	b004      	add	sp, #16
 80089fc:	bd70      	pop	{r4, r5, r6, pc}
		return BOS_ERR_WrongParam;
 80089fe:	2067      	movs	r0, #103	; 0x67
 8008a00:	e7fb      	b.n	80089fa <SetupDMAStreams+0x196>
 8008a02:	46c0      	nop			; (mov r8, r8)
 8008a04:	0800884d 	.word	0x0800884d
 8008a08:	0801c1c4 	.word	0x0801c1c4
 8008a0c:	20000efc 	.word	0x20000efc
 8008a10:	20000b80 	.word	0x20000b80

08008a14 <NotifyMessagingTask>:
/*-----------------------------------------------------------*/

/* --- Activate Messaging Tasks
*/
void NotifyMessagingTask(uint8_t port)
{
 8008a14:	b510      	push	{r4, lr}
	switch (port)
 8008a16:	2805      	cmp	r0, #5
 8008a18:	d80a      	bhi.n	8008a30 <NotifyMessagingTask+0x1c>
 8008a1a:	0080      	lsls	r0, r0, #2
 8008a1c:	4b15      	ldr	r3, [pc, #84]	; (8008a74 <NotifyMessagingTask+0x60>)
 8008a1e:	581b      	ldr	r3, [r3, r0]
 8008a20:	469f      	mov	pc, r3
	{
	#ifdef _P1
		case P1 : 
			xTaskNotifyGive(P1MsgTaskHandle);	break;
 8008a22:	4b15      	ldr	r3, [pc, #84]	; (8008a78 <NotifyMessagingTask+0x64>)
 8008a24:	6818      	ldr	r0, [r3, #0]
 8008a26:	2300      	movs	r3, #0
 8008a28:	2202      	movs	r2, #2
 8008a2a:	2100      	movs	r1, #0
 8008a2c:	f006 fefc 	bl	800f828 <xTaskGenericNotify>
		case P6 :
			xTaskNotifyGive(P6MsgTaskHandle);	break;
	#endif
		default: break;
	}		
}
 8008a30:	bd10      	pop	{r4, pc}
			xTaskNotifyGive(P2MsgTaskHandle);	break;
 8008a32:	4b12      	ldr	r3, [pc, #72]	; (8008a7c <NotifyMessagingTask+0x68>)
 8008a34:	6818      	ldr	r0, [r3, #0]
 8008a36:	2300      	movs	r3, #0
 8008a38:	2202      	movs	r2, #2
 8008a3a:	2100      	movs	r1, #0
 8008a3c:	f006 fef4 	bl	800f828 <xTaskGenericNotify>
 8008a40:	e7f6      	b.n	8008a30 <NotifyMessagingTask+0x1c>
			xTaskNotifyGive(P3MsgTaskHandle);	break;
 8008a42:	4b0f      	ldr	r3, [pc, #60]	; (8008a80 <NotifyMessagingTask+0x6c>)
 8008a44:	6818      	ldr	r0, [r3, #0]
 8008a46:	2300      	movs	r3, #0
 8008a48:	2202      	movs	r2, #2
 8008a4a:	2100      	movs	r1, #0
 8008a4c:	f006 feec 	bl	800f828 <xTaskGenericNotify>
 8008a50:	e7ee      	b.n	8008a30 <NotifyMessagingTask+0x1c>
			xTaskNotifyGive(P4MsgTaskHandle);	break;
 8008a52:	4b0c      	ldr	r3, [pc, #48]	; (8008a84 <NotifyMessagingTask+0x70>)
 8008a54:	6818      	ldr	r0, [r3, #0]
 8008a56:	2300      	movs	r3, #0
 8008a58:	2202      	movs	r2, #2
 8008a5a:	2100      	movs	r1, #0
 8008a5c:	f006 fee4 	bl	800f828 <xTaskGenericNotify>
 8008a60:	e7e6      	b.n	8008a30 <NotifyMessagingTask+0x1c>
			xTaskNotifyGive(P5MsgTaskHandle);	break;
 8008a62:	4b09      	ldr	r3, [pc, #36]	; (8008a88 <NotifyMessagingTask+0x74>)
 8008a64:	6818      	ldr	r0, [r3, #0]
 8008a66:	2300      	movs	r3, #0
 8008a68:	2202      	movs	r2, #2
 8008a6a:	2100      	movs	r1, #0
 8008a6c:	f006 fedc 	bl	800f828 <xTaskGenericNotify>
}
 8008a70:	e7de      	b.n	8008a30 <NotifyMessagingTask+0x1c>
 8008a72:	46c0      	nop			; (mov r8, r8)
 8008a74:	0801c1d0 	.word	0x0801c1d0
 8008a78:	20000f18 	.word	0x20000f18
 8008a7c:	20000f1c 	.word	0x20000f1c
 8008a80:	20000f20 	.word	0x20000f20
 8008a84:	20000f24 	.word	0x20000f24
 8008a88:	20000f28 	.word	0x20000f28

08008a8c <SendMessageFromPort>:
																								 single-cast message forwarded from another port (which is passed to the API thru numberOfParams).
        7   !0        !0				0								Not allowed.
        8   !0        0					0								Message sent to adjacent neighbor (e.g., if ID is unknown) with myID as source module.
*/
BOS_Status SendMessageFromPort(uint8_t port, uint8_t src, uint8_t dst, uint16_t code, uint16_t numberOfParams)
{
 8008a8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008a8e:	46de      	mov	lr, fp
 8008a90:	4657      	mov	r7, sl
 8008a92:	464e      	mov	r6, r9
 8008a94:	4645      	mov	r5, r8
 8008a96:	b5e0      	push	{r5, r6, r7, lr}
 8008a98:	b085      	sub	sp, #20
 8008a9a:	0005      	movs	r5, r0
 8008a9c:	9102      	str	r1, [sp, #8]
 8008a9e:	0014      	movs	r4, r2
 8008aa0:	001e      	movs	r6, r3
 8008aa2:	ab0e      	add	r3, sp, #56	; 0x38
 8008aa4:	881f      	ldrh	r7, [r3, #0]
	uint8_t length = 0, shift = 0; static uint16_t totalNumberOfParams = 0; static uint16_t ptrShift = 0;
	bool extendOptions = false, extendCode = false;
	UBaseType_t TaskPriority;
	
	/* Sanity check broadcast/multi-cast and not allowed cases */
	if ((port == 0 && dst == 0) ||																												// cases 3 & 4
 8008aa6:	0003      	movs	r3, r0
 8008aa8:	4313      	orrs	r3, r2
 8008aaa:	d100      	bne.n	8008aae <SendMessageFromPort+0x22>
 8008aac:	e173      	b.n	8008d96 <SendMessageFromPort+0x30a>
 8008aae:	2800      	cmp	r0, #0
 8008ab0:	d14c      	bne.n	8008b4c <SendMessageFromPort+0xc0>
			(port == 0 && dst != BOS_BROADCAST && dst != BOS_MULTICAST) || 										// cases 1 & 2
 8008ab2:	2afd      	cmp	r2, #253	; 0xfd
 8008ab4:	d800      	bhi.n	8008ab8 <SendMessageFromPort+0x2c>
 8008ab6:	e170      	b.n	8008d9a <SendMessageFromPort+0x30e>
			(port != 0 && src != 0 && dst == 0)) {																						// case 7
		return BOS_ERR_WrongParam; 
	}
	
	/* Increase the priority of current running task */
	TaskPriority = uxTaskPriorityGet( NULL );
 8008ab8:	2000      	movs	r0, #0
 8008aba:	f006 f95d 	bl	800ed78 <uxTaskPriorityGet>
 8008abe:	9003      	str	r0, [sp, #12]
	vTaskPrioritySet( NULL, osPriorityHigh-osPriorityIdle );
 8008ac0:	2105      	movs	r1, #5
 8008ac2:	2000      	movs	r0, #0
 8008ac4:	f006 f968 	bl	800ed98 <vTaskPrioritySet>
	
	/* HZ Delimiter */
	message[0] = 'H';						
 8008ac8:	4bc0      	ldr	r3, [pc, #768]	; (8008dcc <SendMessageFromPort+0x340>)
 8008aca:	2248      	movs	r2, #72	; 0x48
 8008acc:	701a      	strb	r2, [r3, #0]
	message[1] = 'Z';
 8008ace:	3212      	adds	r2, #18
 8008ad0:	705a      	strb	r2, [r3, #1]

	/* Should I copy message buffer from another port or construct from scratch? */
	if ((port == 0 && src == 0 && (dst == BOS_BROADCAST || dst == BOS_MULTICAST)) || code == 0)					// case 2 and part of case 6
 8008ad2:	9b02      	ldr	r3, [sp, #8]
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d000      	beq.n	8008ada <SendMessageFromPort+0x4e>
 8008ad8:	e174      	b.n	8008dc4 <SendMessageFromPort+0x338>
	{
		/* Get message length from the incoming port */
		length = messageLength[numberOfParams-1];
 8008ada:	1e7b      	subs	r3, r7, #1
 8008adc:	4abc      	ldr	r2, [pc, #752]	; (8008dd0 <SendMessageFromPort+0x344>)
 8008ade:	5cd7      	ldrb	r7, [r2, r3]

		/* Copy message buffer from the incoming port as is */
		memcpy(&message[3], &cMessage[numberOfParams-1][0], (size_t) length);
 8008ae0:	4abc      	ldr	r2, [pc, #752]	; (8008dd4 <SendMessageFromPort+0x348>)
 8008ae2:	4690      	mov	r8, r2
 8008ae4:	00d9      	lsls	r1, r3, #3
 8008ae6:	1ac9      	subs	r1, r1, r3
 8008ae8:	00c9      	lsls	r1, r1, #3
 8008aea:	4bbb      	ldr	r3, [pc, #748]	; (8008dd8 <SendMessageFromPort+0x34c>)
 8008aec:	18c9      	adds	r1, r1, r3
 8008aee:	003a      	movs	r2, r7
 8008af0:	4640      	mov	r0, r8
 8008af2:	f00d fd1f 	bl	8016534 <memcpy>
				length += groupMembers + 2;		// + bcastID + number of group member + group members IDs 
		}
	}
		
	/* Copy message length */
	message[2] = length;
 8008af6:	2303      	movs	r3, #3
 8008af8:	425b      	negs	r3, r3
 8008afa:	469c      	mov	ip, r3
 8008afc:	44e0      	add	r8, ip
 8008afe:	4643      	mov	r3, r8
 8008b00:	709f      	strb	r7, [r3, #2]
	
	/* End of message - Calculate CRC8 */	
	memcpy(crcBuffer, &message[0], length + 3);
 8008b02:	1cfb      	adds	r3, r7, #3
 8008b04:	469b      	mov	fp, r3
 8008b06:	4bb5      	ldr	r3, [pc, #724]	; (8008ddc <SendMessageFromPort+0x350>)
 8008b08:	469a      	mov	sl, r3
 8008b0a:	465a      	mov	r2, fp
 8008b0c:	4641      	mov	r1, r8
 8008b0e:	0018      	movs	r0, r3
 8008b10:	f00d fd10 	bl	8016534 <memcpy>
	
	/* crc calculation function added for test */
	message[length+3] = CalculateCRC8((uint32_t *)&crcBuffer, (length + 3));
 8008b14:	b2bb      	uxth	r3, r7
 8008b16:	4699      	mov	r9, r3
 8008b18:	4659      	mov	r1, fp
 8008b1a:	4650      	mov	r0, sl
 8008b1c:	f004 f946 	bl	800cdac <CalculateCRC8>
 8008b20:	4643      	mov	r3, r8
 8008b22:	465a      	mov	r2, fp
 8008b24:	5498      	strb	r0, [r3, r2]
	
//	message[length+3] = HAL_CRC_Calculate(&hcrc, (uint32_t *)&crcBuffer, (length + 3)/4);
//	if ((length + 3)%4 != 0) 							// Non-word-aligned packet
//		message[length+3] = HAL_CRC_Accumulate(&hcrc, (uint32_t *)&crcBuffer[((length + 3)/4)*4], 1);

	memset(crcBuffer, 0, sizeof(crcBuffer));
 8008b26:	2238      	movs	r2, #56	; 0x38
 8008b28:	2100      	movs	r1, #0
 8008b2a:	4650      	mov	r0, sl
 8008b2c:	f00d fd0b 	bl	8016546 <memset>
	//if(! message[length+3]){message[length+3]=1;}  /*Making sure CRC Value Is not Zero*/
	
	/* Transmit the message - single-cast */
	if (dst != BOS_BROADCAST && dst != BOS_MULTICAST) 
 8008b30:	2cfd      	cmp	r4, #253	; 0xfd
 8008b32:	d800      	bhi.n	8008b36 <SendMessageFromPort+0xaa>
 8008b34:	e102      	b.n	8008d3c <SendMessageFromPort+0x2b0>
		writePxDMAMutex(port, message, length+4, cmd50ms);
	}
	/* Transmit the message - multi-cast or broadcast */
	else
	{
		if (code == 0 && src == 0) {					// Forwarded broadcast or multicast. Update with original source.
 8008b36:	2e00      	cmp	r6, #0
 8008b38:	d000      	beq.n	8008b3c <SendMessageFromPort+0xb0>
 8008b3a:	e0f5      	b.n	8008d28 <SendMessageFromPort+0x29c>
 8008b3c:	9b02      	ldr	r3, [sp, #8]
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d000      	beq.n	8008b44 <SendMessageFromPort+0xb8>
 8008b42:	e0f1      	b.n	8008d28 <SendMessageFromPort+0x29c>
			src = message[4];
 8008b44:	4ba1      	ldr	r3, [pc, #644]	; (8008dcc <SendMessageFromPort+0x340>)
 8008b46:	791b      	ldrb	r3, [r3, #4]
 8008b48:	9302      	str	r3, [sp, #8]
 8008b4a:	e0ed      	b.n	8008d28 <SendMessageFromPort+0x29c>
			(port != 0 && src != 0 && dst == 0)) {																						// case 7
 8008b4c:	9b02      	ldr	r3, [sp, #8]
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d002      	beq.n	8008b58 <SendMessageFromPort+0xcc>
 8008b52:	2a00      	cmp	r2, #0
 8008b54:	d100      	bne.n	8008b58 <SendMessageFromPort+0xcc>
 8008b56:	e122      	b.n	8008d9e <SendMessageFromPort+0x312>
	TaskPriority = uxTaskPriorityGet( NULL );
 8008b58:	2000      	movs	r0, #0
 8008b5a:	f006 f90d 	bl	800ed78 <uxTaskPriorityGet>
 8008b5e:	9003      	str	r0, [sp, #12]
	vTaskPrioritySet( NULL, osPriorityHigh-osPriorityIdle );
 8008b60:	2105      	movs	r1, #5
 8008b62:	2000      	movs	r0, #0
 8008b64:	f006 f918 	bl	800ed98 <vTaskPrioritySet>
	message[0] = 'H';						
 8008b68:	4b98      	ldr	r3, [pc, #608]	; (8008dcc <SendMessageFromPort+0x340>)
 8008b6a:	2248      	movs	r2, #72	; 0x48
 8008b6c:	701a      	strb	r2, [r3, #0]
	message[1] = 'Z';
 8008b6e:	3212      	adds	r2, #18
 8008b70:	705a      	strb	r2, [r3, #1]
	if ((port == 0 && src == 0 && (dst == BOS_BROADCAST || dst == BOS_MULTICAST)) || code == 0)					// case 2 and part of case 6
 8008b72:	2e00      	cmp	r6, #0
 8008b74:	d0b1      	beq.n	8008ada <SendMessageFromPort+0x4e>
		if (src == 0)		src = myID;
 8008b76:	9b02      	ldr	r3, [sp, #8]
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d078      	beq.n	8008c6e <SendMessageFromPort+0x1e2>
		message[2] = length;	
 8008b7c:	4993      	ldr	r1, [pc, #588]	; (8008dcc <SendMessageFromPort+0x340>)
 8008b7e:	2300      	movs	r3, #0
 8008b80:	708b      	strb	r3, [r1, #2]
		message[3] = dst;						
 8008b82:	70cc      	strb	r4, [r1, #3]
		message[4] = src;
 8008b84:	9b02      	ldr	r3, [sp, #8]
 8008b86:	710b      	strb	r3, [r1, #4]
		message[5] = (BOS.response) | (BOS.trace<<2) | (extendCode<<1) | (extendOptions);
 8008b88:	4a95      	ldr	r2, [pc, #596]	; (8008de0 <SendMessageFromPort+0x354>)
 8008b8a:	79d3      	ldrb	r3, [r2, #7]
 8008b8c:	009b      	lsls	r3, r3, #2
 8008b8e:	7992      	ldrb	r2, [r2, #6]
 8008b90:	4313      	orrs	r3, r2
		if (code > 0xFF)	extendCode = true;
 8008b92:	22ff      	movs	r2, #255	; 0xff
 8008b94:	42b2      	cmp	r2, r6
 8008b96:	4192      	sbcs	r2, r2
 8008b98:	4252      	negs	r2, r2
		message[5] = (BOS.response) | (BOS.trace<<2) | (extendCode<<1) | (extendOptions);
 8008b9a:	0052      	lsls	r2, r2, #1
 8008b9c:	4313      	orrs	r3, r2
 8008b9e:	b2db      	uxtb	r3, r3
 8008ba0:	714b      	strb	r3, [r1, #5]
		message[6+shift] = (uint8_t) code;
 8008ba2:	718e      	strb	r6, [r1, #6]
		if (extendCode == true) {
 8008ba4:	2200      	movs	r2, #0
 8008ba6:	4693      	mov	fp, r2
 8008ba8:	2eff      	cmp	r6, #255	; 0xff
 8008baa:	d903      	bls.n	8008bb4 <SendMessageFromPort+0x128>
			message[6+shift] = (uint8_t) (code >> 8);		
 8008bac:	0a32      	lsrs	r2, r6, #8
 8008bae:	71ca      	strb	r2, [r1, #7]
			++shift;
 8008bb0:	2201      	movs	r2, #1
 8008bb2:	4693      	mov	fp, r2
		if (numberOfParams <= MAX_PARAMS_PER_MESSAGE ) {				
 8008bb4:	2f2e      	cmp	r7, #46	; 0x2e
 8008bb6:	d95e      	bls.n	8008c76 <SendMessageFromPort+0x1ea>
			message[5] |= 0x80;		
 8008bb8:	2280      	movs	r2, #128	; 0x80
 8008bba:	4252      	negs	r2, r2
 8008bbc:	4313      	orrs	r3, r2
 8008bbe:	4a83      	ldr	r2, [pc, #524]	; (8008dcc <SendMessageFromPort+0x340>)
 8008bc0:	7153      	strb	r3, [r2, #5]
			totalNumberOfParams = numberOfParams;
 8008bc2:	4b88      	ldr	r3, [pc, #544]	; (8008de4 <SendMessageFromPort+0x358>)
 8008bc4:	801f      	strh	r7, [r3, #0]
					SendMessageFromPort(port, src, dst, code, numberOfParams);
 8008bc6:	232e      	movs	r3, #46	; 0x2e
 8008bc8:	469a      	mov	sl, r3
					totalNumberOfParams -= numberOfParams;
 8008bca:	4b86      	ldr	r3, [pc, #536]	; (8008de4 <SendMessageFromPort+0x358>)
 8008bcc:	4699      	mov	r9, r3
					ptrShift += numberOfParams;
 8008bce:	4b86      	ldr	r3, [pc, #536]	; (8008de8 <SendMessageFromPort+0x35c>)
 8008bd0:	4698      	mov	r8, r3
					SendMessageFromPort(port, src, dst, code, numberOfParams);
 8008bd2:	4653      	mov	r3, sl
 8008bd4:	9300      	str	r3, [sp, #0]
 8008bd6:	0033      	movs	r3, r6
 8008bd8:	0022      	movs	r2, r4
 8008bda:	9902      	ldr	r1, [sp, #8]
 8008bdc:	0028      	movs	r0, r5
 8008bde:	f7ff ff55 	bl	8008a8c <SendMessageFromPort>
					osDelay(10);
 8008be2:	200a      	movs	r0, #10
 8008be4:	f005 f9ab 	bl	800df3e <osDelay>
					totalNumberOfParams -= numberOfParams;
 8008be8:	464b      	mov	r3, r9
 8008bea:	881f      	ldrh	r7, [r3, #0]
 8008bec:	3f2e      	subs	r7, #46	; 0x2e
 8008bee:	b2bf      	uxth	r7, r7
 8008bf0:	801f      	strh	r7, [r3, #0]
					ptrShift += numberOfParams;
 8008bf2:	4643      	mov	r3, r8
 8008bf4:	8819      	ldrh	r1, [r3, #0]
 8008bf6:	312e      	adds	r1, #46	; 0x2e
 8008bf8:	b289      	uxth	r1, r1
 8008bfa:	8019      	strh	r1, [r3, #0]
			while (totalNumberOfParams != 0)
 8008bfc:	2f00      	cmp	r7, #0
 8008bfe:	d049      	beq.n	8008c94 <SendMessageFromPort+0x208>
				if ( (totalNumberOfParams/numberOfParams) >= 1) 
 8008c00:	2f2d      	cmp	r7, #45	; 0x2d
 8008c02:	d8e6      	bhi.n	8008bd2 <SendMessageFromPort+0x146>
					message[5] &= 0x7F;		/* Last message. Reset long message flag */
 8008c04:	4b71      	ldr	r3, [pc, #452]	; (8008dcc <SendMessageFromPort+0x340>)
 8008c06:	7958      	ldrb	r0, [r3, #5]
 8008c08:	227f      	movs	r2, #127	; 0x7f
 8008c0a:	4002      	ands	r2, r0
 8008c0c:	715a      	strb	r2, [r3, #5]
					memcpy((char*)&message[7+shift], (&messageParams[0]+ptrShift), numberOfParams);
 8008c0e:	465a      	mov	r2, fp
 8008c10:	1dd0      	adds	r0, r2, #7
 8008c12:	18c0      	adds	r0, r0, r3
 8008c14:	4b75      	ldr	r3, [pc, #468]	; (8008dec <SendMessageFromPort+0x360>)
 8008c16:	18c9      	adds	r1, r1, r3
 8008c18:	003a      	movs	r2, r7
 8008c1a:	f00d fc8b 	bl	8016534 <memcpy>
					ptrShift = 0; totalNumberOfParams = 0;
 8008c1e:	2300      	movs	r3, #0
 8008c20:	4a71      	ldr	r2, [pc, #452]	; (8008de8 <SendMessageFromPort+0x35c>)
 8008c22:	8013      	strh	r3, [r2, #0]
 8008c24:	4a6f      	ldr	r2, [pc, #444]	; (8008de4 <SendMessageFromPort+0x358>)
 8008c26:	8013      	strh	r3, [r2, #0]
					length = numberOfParams + shift + 4;
 8008c28:	465b      	mov	r3, fp
 8008c2a:	1d1e      	adds	r6, r3, #4
 8008c2c:	19f6      	adds	r6, r6, r7
 8008c2e:	b2f6      	uxtb	r6, r6
		if(AddBcastPayload == true)
 8008c30:	4b6f      	ldr	r3, [pc, #444]	; (8008df0 <SendMessageFromPort+0x364>)
 8008c32:	781b      	ldrb	r3, [r3, #0]
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d05c      	beq.n	8008cf2 <SendMessageFromPort+0x266>
			if (dstGroupID < BOS_BROADCAST)
 8008c38:	4b6e      	ldr	r3, [pc, #440]	; (8008df4 <SendMessageFromPort+0x368>)
 8008c3a:	781b      	ldrb	r3, [r3, #0]
 8008c3c:	2bff      	cmp	r3, #255	; 0xff
 8008c3e:	d100      	bne.n	8008c42 <SendMessageFromPort+0x1b6>
 8008c40:	e0b1      	b.n	8008da6 <SendMessageFromPort+0x31a>
				for(uint16_t i=1 ; i<=N ; i++)						// N modules
 8008c42:	4a6d      	ldr	r2, [pc, #436]	; (8008df8 <SendMessageFromPort+0x36c>)
 8008c44:	7812      	ldrb	r2, [r2, #0]
 8008c46:	4690      	mov	r8, r2
 8008c48:	2a00      	cmp	r2, #0
 8008c4a:	d075      	beq.n	8008d38 <SendMessageFromPort+0x2ac>
 8008c4c:	2201      	movs	r2, #1
 8008c4e:	409a      	lsls	r2, r3
 8008c50:	4694      	mov	ip, r2
 8008c52:	486a      	ldr	r0, [pc, #424]	; (8008dfc <SendMessageFromPort+0x370>)
 8008c54:	2301      	movs	r3, #1
			uint8_t groupMembers = 0;
 8008c56:	2200      	movs	r2, #0
							message[7+shift+numberOfParams+groupMembers-1] = i;
 8008c58:	495c      	ldr	r1, [pc, #368]	; (8008dcc <SendMessageFromPort+0x340>)
 8008c5a:	4689      	mov	r9, r1
 8008c5c:	44b9      	add	r9, r7
 8008c5e:	0029      	movs	r1, r5
 8008c60:	4645      	mov	r5, r8
 8008c62:	46a2      	mov	sl, r4
 8008c64:	4664      	mov	r4, ip
 8008c66:	46b4      	mov	ip, r6
 8008c68:	465e      	mov	r6, fp
 8008c6a:	4688      	mov	r8, r1
 8008c6c:	e01a      	b.n	8008ca4 <SendMessageFromPort+0x218>
		if (src == 0)		src = myID;
 8008c6e:	4b64      	ldr	r3, [pc, #400]	; (8008e00 <SendMessageFromPort+0x374>)
 8008c70:	781b      	ldrb	r3, [r3, #0]
 8008c72:	9302      	str	r3, [sp, #8]
 8008c74:	e782      	b.n	8008b7c <SendMessageFromPort+0xf0>
			memcpy((char*)&message[7+shift], (&messageParams[0]+ptrShift), numberOfParams);
 8008c76:	465b      	mov	r3, fp
 8008c78:	3307      	adds	r3, #7
 8008c7a:	4854      	ldr	r0, [pc, #336]	; (8008dcc <SendMessageFromPort+0x340>)
 8008c7c:	1818      	adds	r0, r3, r0
 8008c7e:	4b5a      	ldr	r3, [pc, #360]	; (8008de8 <SendMessageFromPort+0x35c>)
 8008c80:	8819      	ldrh	r1, [r3, #0]
 8008c82:	4b5a      	ldr	r3, [pc, #360]	; (8008dec <SendMessageFromPort+0x360>)
 8008c84:	18c9      	adds	r1, r1, r3
 8008c86:	003a      	movs	r2, r7
 8008c88:	f00d fc54 	bl	8016534 <memcpy>
			length = numberOfParams + shift + 4;
 8008c8c:	1d3e      	adds	r6, r7, #4
 8008c8e:	445e      	add	r6, fp
 8008c90:	b2f6      	uxtb	r6, r6
 8008c92:	e7cd      	b.n	8008c30 <SendMessageFromPort+0x1a4>
 8008c94:	2600      	movs	r6, #0
 8008c96:	372e      	adds	r7, #46	; 0x2e
 8008c98:	e7ca      	b.n	8008c30 <SendMessageFromPort+0x1a4>
				for(uint16_t i=1 ; i<=N ; i++)						// N modules
 8008c9a:	3301      	adds	r3, #1
 8008c9c:	b29b      	uxth	r3, r3
 8008c9e:	3002      	adds	r0, #2
 8008ca0:	42ab      	cmp	r3, r5
 8008ca2:	d80d      	bhi.n	8008cc0 <SendMessageFromPort+0x234>
					if (InGroup(i, dstGroupID))
 8008ca4:	8801      	ldrh	r1, [r0, #0]
 8008ca6:	420c      	tst	r4, r1
 8008ca8:	d0f7      	beq.n	8008c9a <SendMessageFromPort+0x20e>
						++groupMembers;							// Add this member
 8008caa:	3201      	adds	r2, #1
 8008cac:	b2d2      	uxtb	r2, r2
						if ((numberOfParams+groupMembers+1) < MAX_PARAMS_PER_MESSAGE)
 8008cae:	18b9      	adds	r1, r7, r2
 8008cb0:	292c      	cmp	r1, #44	; 0x2c
 8008cb2:	dd00      	ble.n	8008cb6 <SendMessageFromPort+0x22a>
 8008cb4:	e075      	b.n	8008da2 <SendMessageFromPort+0x316>
							message[7+shift+numberOfParams+groupMembers-1] = i;
 8008cb6:	4649      	mov	r1, r9
 8008cb8:	1889      	adds	r1, r1, r2
 8008cba:	1989      	adds	r1, r1, r6
 8008cbc:	718b      	strb	r3, [r1, #6]
 8008cbe:	e7ec      	b.n	8008c9a <SendMessageFromPort+0x20e>
 8008cc0:	46b3      	mov	fp, r6
 8008cc2:	4666      	mov	r6, ip
 8008cc4:	4645      	mov	r5, r8
 8008cc6:	4654      	mov	r4, sl
				message[7+shift+numberOfParams+groupMembers] = groupMembers;
 8008cc8:	465b      	mov	r3, fp
 8008cca:	3307      	adds	r3, #7
 8008ccc:	19db      	adds	r3, r3, r7
 8008cce:	189b      	adds	r3, r3, r2
 8008cd0:	493e      	ldr	r1, [pc, #248]	; (8008dcc <SendMessageFromPort+0x340>)
 8008cd2:	54ca      	strb	r2, [r1, r3]
			else if ( (dstGroupID < BOS_BROADCAST) && ((numberOfParams+groupMembers+2) < MAX_PARAMS_PER_MESSAGE) )		// Multicast
 8008cd4:	18bf      	adds	r7, r7, r2
				return BOS_ERR_MSG_DOES_NOT_FIT;
 8008cd6:	2069      	movs	r0, #105	; 0x69
			else if ( (dstGroupID < BOS_BROADCAST) && ((numberOfParams+groupMembers+2) < MAX_PARAMS_PER_MESSAGE) )		// Multicast
 8008cd8:	2f2b      	cmp	r7, #43	; 0x2b
 8008cda:	dc3f      	bgt.n	8008d5c <SendMessageFromPort+0x2d0>
				message[7+shift+numberOfParams+groupMembers+1] = ++bcastID;
 8008cdc:	4849      	ldr	r0, [pc, #292]	; (8008e04 <SendMessageFromPort+0x378>)
 8008cde:	7801      	ldrb	r1, [r0, #0]
 8008ce0:	3101      	adds	r1, #1
 8008ce2:	b2c9      	uxtb	r1, r1
 8008ce4:	7001      	strb	r1, [r0, #0]
 8008ce6:	4839      	ldr	r0, [pc, #228]	; (8008dcc <SendMessageFromPort+0x340>)
 8008ce8:	18c3      	adds	r3, r0, r3
 8008cea:	7059      	strb	r1, [r3, #1]
				length += groupMembers + 2;		// + bcastID + number of group member + group members IDs 
 8008cec:	3602      	adds	r6, #2
 8008cee:	18b6      	adds	r6, r6, r2
 8008cf0:	b2f6      	uxtb	r6, r6
	message[2] = length;
 8008cf2:	4b36      	ldr	r3, [pc, #216]	; (8008dcc <SendMessageFromPort+0x340>)
 8008cf4:	4698      	mov	r8, r3
 8008cf6:	709e      	strb	r6, [r3, #2]
	memcpy(crcBuffer, &message[0], length + 3);
 8008cf8:	1cf3      	adds	r3, r6, #3
 8008cfa:	469a      	mov	sl, r3
 8008cfc:	4f37      	ldr	r7, [pc, #220]	; (8008ddc <SendMessageFromPort+0x350>)
 8008cfe:	001a      	movs	r2, r3
 8008d00:	4641      	mov	r1, r8
 8008d02:	0038      	movs	r0, r7
 8008d04:	f00d fc16 	bl	8016534 <memcpy>
	message[length+3] = CalculateCRC8((uint32_t *)&crcBuffer, (length + 3));
 8008d08:	b2b3      	uxth	r3, r6
 8008d0a:	4699      	mov	r9, r3
 8008d0c:	4651      	mov	r1, sl
 8008d0e:	0038      	movs	r0, r7
 8008d10:	f004 f84c 	bl	800cdac <CalculateCRC8>
 8008d14:	4643      	mov	r3, r8
 8008d16:	4652      	mov	r2, sl
 8008d18:	5498      	strb	r0, [r3, r2]
	memset(crcBuffer, 0, sizeof(crcBuffer));
 8008d1a:	2238      	movs	r2, #56	; 0x38
 8008d1c:	2100      	movs	r1, #0
 8008d1e:	0038      	movs	r0, r7
 8008d20:	f00d fc11 	bl	8016546 <memset>
	if (dst != BOS_BROADCAST && dst != BOS_MULTICAST) 
 8008d24:	2cfd      	cmp	r4, #253	; 0xfd
 8008d26:	d909      	bls.n	8008d3c <SendMessageFromPort+0x2b0>
		} 
		
		/* Get broadcast routes */
		FindBroadcastRoutes(src);
 8008d28:	9802      	ldr	r0, [sp, #8]
 8008d2a:	f7fa fca9 	bl	8003680 <FindBroadcastRoutes>
 8008d2e:	2400      	movs	r4, #0
		
		/* Send to all my broadcast ports */
		for (uint8_t p=1 ; p<=NumOfPorts ; p++) 
		{
			if ( (bcastRoutes[myID-1] >> (p-1)) & 0x01 ) 		
 8008d30:	4e35      	ldr	r6, [pc, #212]	; (8008e08 <SendMessageFromPort+0x37c>)
 8008d32:	4d33      	ldr	r5, [pc, #204]	; (8008e00 <SendMessageFromPort+0x374>)
			{
				/* Transmit the message from this port */
				writePxDMAMutex(p, message, length+4, cmd50ms);
 8008d34:	464f      	mov	r7, r9
 8008d36:	e024      	b.n	8008d82 <SendMessageFromPort+0x2f6>
			uint8_t groupMembers = 0;
 8008d38:	2200      	movs	r2, #0
 8008d3a:	e7c5      	b.n	8008cc8 <SendMessageFromPort+0x23c>
		writePxDMAMutex(port, message, length+4, cmd50ms);
 8008d3c:	464a      	mov	r2, r9
 8008d3e:	3204      	adds	r2, #4
 8008d40:	b292      	uxth	r2, r2
 8008d42:	2332      	movs	r3, #50	; 0x32
 8008d44:	4921      	ldr	r1, [pc, #132]	; (8008dcc <SendMessageFromPort+0x340>)
 8008d46:	0028      	movs	r0, r5
 8008d48:	f005 f816 	bl	800dd78 <writePxDMAMutex>
			}	
		}
	}

	/* Put the priority of current running task back to its default state */
	vTaskPrioritySet( NULL, TaskPriority );
 8008d4c:	9903      	ldr	r1, [sp, #12]
 8008d4e:	2000      	movs	r0, #0
 8008d50:	f006 f822 	bl	800ed98 <vTaskPrioritySet>
	
	/* Reset responseStatus in case response is expected - TODO should be tailored for each port */
	responseStatus = BOS_ERR_NoResponse;
 8008d54:	4b2d      	ldr	r3, [pc, #180]	; (8008e0c <SendMessageFromPort+0x380>)
 8008d56:	2202      	movs	r2, #2
 8008d58:	701a      	strb	r2, [r3, #0]
	
	return result;
 8008d5a:	2000      	movs	r0, #0
}
 8008d5c:	b005      	add	sp, #20
 8008d5e:	bcf0      	pop	{r4, r5, r6, r7}
 8008d60:	46bb      	mov	fp, r7
 8008d62:	46b2      	mov	sl, r6
 8008d64:	46a9      	mov	r9, r5
 8008d66:	46a0      	mov	r8, r4
 8008d68:	bdf0      	pop	{r4, r5, r6, r7, pc}
				writePxDMAMutex(p, message, length+4, cmd50ms);
 8008d6a:	1d3a      	adds	r2, r7, #4
 8008d6c:	b292      	uxth	r2, r2
 8008d6e:	2332      	movs	r3, #50	; 0x32
 8008d70:	4916      	ldr	r1, [pc, #88]	; (8008dcc <SendMessageFromPort+0x340>)
 8008d72:	f005 f801 	bl	800dd78 <writePxDMAMutex>
				Delay_ms(1);
 8008d76:	2001      	movs	r0, #1
 8008d78:	f007 f960 	bl	801003c <HAL_Delay>
		for (uint8_t p=1 ; p<=NumOfPorts ; p++) 
 8008d7c:	3401      	adds	r4, #1
 8008d7e:	2c05      	cmp	r4, #5
 8008d80:	d0e4      	beq.n	8008d4c <SendMessageFromPort+0x2c0>
 8008d82:	1c60      	adds	r0, r4, #1
 8008d84:	b2c0      	uxtb	r0, r0
			if ( (bcastRoutes[myID-1] >> (p-1)) & 0x01 ) 		
 8008d86:	782b      	ldrb	r3, [r5, #0]
 8008d88:	3b01      	subs	r3, #1
 8008d8a:	005b      	lsls	r3, r3, #1
 8008d8c:	5b9b      	ldrh	r3, [r3, r6]
 8008d8e:	4123      	asrs	r3, r4
 8008d90:	07db      	lsls	r3, r3, #31
 8008d92:	d5f3      	bpl.n	8008d7c <SendMessageFromPort+0x2f0>
 8008d94:	e7e9      	b.n	8008d6a <SendMessageFromPort+0x2de>
		return BOS_ERR_WrongParam; 
 8008d96:	2067      	movs	r0, #103	; 0x67
 8008d98:	e7e0      	b.n	8008d5c <SendMessageFromPort+0x2d0>
 8008d9a:	2067      	movs	r0, #103	; 0x67
 8008d9c:	e7de      	b.n	8008d5c <SendMessageFromPort+0x2d0>
 8008d9e:	2067      	movs	r0, #103	; 0x67
 8008da0:	e7dc      	b.n	8008d5c <SendMessageFromPort+0x2d0>
							return BOS_ERR_MSG_DOES_NOT_FIT;
 8008da2:	2069      	movs	r0, #105	; 0x69
 8008da4:	e7da      	b.n	8008d5c <SendMessageFromPort+0x2d0>
				return BOS_ERR_MSG_DOES_NOT_FIT;
 8008da6:	2069      	movs	r0, #105	; 0x69
			if ( (dstGroupID == BOS_BROADCAST) && ((numberOfParams+1) < MAX_PARAMS_PER_MESSAGE) )
 8008da8:	2f2c      	cmp	r7, #44	; 0x2c
 8008daa:	d8d7      	bhi.n	8008d5c <SendMessageFromPort+0x2d0>
				message[7+shift+numberOfParams] = ++bcastID;
 8008dac:	4a15      	ldr	r2, [pc, #84]	; (8008e04 <SendMessageFromPort+0x378>)
 8008dae:	7813      	ldrb	r3, [r2, #0]
 8008db0:	3301      	adds	r3, #1
 8008db2:	b2db      	uxtb	r3, r3
 8008db4:	7013      	strb	r3, [r2, #0]
 8008db6:	4a05      	ldr	r2, [pc, #20]	; (8008dcc <SendMessageFromPort+0x340>)
 8008db8:	445a      	add	r2, fp
 8008dba:	19d7      	adds	r7, r2, r7
 8008dbc:	71fb      	strb	r3, [r7, #7]
				length += 1;		// + bcastID
 8008dbe:	3601      	adds	r6, #1
 8008dc0:	b2f6      	uxtb	r6, r6
 8008dc2:	e796      	b.n	8008cf2 <SendMessageFromPort+0x266>
	if ((port == 0 && src == 0 && (dst == BOS_BROADCAST || dst == BOS_MULTICAST)) || code == 0)					// case 2 and part of case 6
 8008dc4:	2e00      	cmp	r6, #0
 8008dc6:	d100      	bne.n	8008dca <SendMessageFromPort+0x33e>
 8008dc8:	e687      	b.n	8008ada <SendMessageFromPort+0x4e>
 8008dca:	e6d7      	b.n	8008b7c <SendMessageFromPort+0xf0>
 8008dcc:	20000990 	.word	0x20000990
 8008dd0:	200009c8 	.word	0x200009c8
 8008dd4:	20000993 	.word	0x20000993
 8008dd8:	200007d8 	.word	0x200007d8
 8008ddc:	20000e9c 	.word	0x20000e9c
 8008de0:	20006368 	.word	0x20006368
 8008de4:	20000fae 	.word	0x20000fae
 8008de8:	20000fac 	.word	0x20000fac
 8008dec:	200009d0 	.word	0x200009d0
 8008df0:	2000055c 	.word	0x2000055c
 8008df4:	2000001d 	.word	0x2000001d
 8008df8:	2000001c 	.word	0x2000001c
 8008dfc:	20000958 	.word	0x20000958
 8008e00:	20000b04 	.word	0x20000b04
 8008e04:	20000786 	.word	0x20000786
 8008e08:	20000788 	.word	0x20000788
 8008e0c:	20000b98 	.word	0x20000b98

08008e10 <ForwardReceivedMessage>:
{
 8008e10:	b530      	push	{r4, r5, lr}
 8008e12:	b083      	sub	sp, #12
 8008e14:	0004      	movs	r4, r0
	AddBcastPayload = false; 	
 8008e16:	4b0b      	ldr	r3, [pc, #44]	; (8008e44 <ForwardReceivedMessage+0x34>)
 8008e18:	2200      	movs	r2, #0
 8008e1a:	701a      	strb	r2, [r3, #0]
	dst = cMessage[incomingPort-1][0];
 8008e1c:	1e42      	subs	r2, r0, #1
 8008e1e:	00d3      	lsls	r3, r2, #3
 8008e20:	1a9b      	subs	r3, r3, r2
 8008e22:	00db      	lsls	r3, r3, #3
 8008e24:	4a08      	ldr	r2, [pc, #32]	; (8008e48 <ForwardReceivedMessage+0x38>)
 8008e26:	5c9d      	ldrb	r5, [r3, r2]
	port = FindRoute(myID, dst); 
 8008e28:	4b08      	ldr	r3, [pc, #32]	; (8008e4c <ForwardReceivedMessage+0x3c>)
 8008e2a:	7818      	ldrb	r0, [r3, #0]
 8008e2c:	0029      	movs	r1, r5
 8008e2e:	f7fa fcc1 	bl	80037b4 <FindRoute>
	SendMessageFromPort(port, 0, dst, 0, incomingPort);
 8008e32:	9400      	str	r4, [sp, #0]
 8008e34:	2300      	movs	r3, #0
 8008e36:	002a      	movs	r2, r5
 8008e38:	2100      	movs	r1, #0
 8008e3a:	f7ff fe27 	bl	8008a8c <SendMessageFromPort>
}
 8008e3e:	2000      	movs	r0, #0
 8008e40:	b003      	add	sp, #12
 8008e42:	bd30      	pop	{r4, r5, pc}
 8008e44:	2000055c 	.word	0x2000055c
 8008e48:	200007d8 	.word	0x200007d8
 8008e4c:	20000b04 	.word	0x20000b04

08008e50 <BroadcastReceivedMessage>:
{
 8008e50:	b500      	push	{lr}
 8008e52:	b083      	sub	sp, #12
	AddBcastPayload = false; dstGroupID = dstGroup;	
 8008e54:	4b0c      	ldr	r3, [pc, #48]	; (8008e88 <BroadcastReceivedMessage+0x38>)
 8008e56:	2200      	movs	r2, #0
 8008e58:	701a      	strb	r2, [r3, #0]
 8008e5a:	4b0c      	ldr	r3, [pc, #48]	; (8008e8c <BroadcastReceivedMessage+0x3c>)
 8008e5c:	7018      	strb	r0, [r3, #0]
	if (dstGroup == BOS_BROADCAST)
 8008e5e:	28ff      	cmp	r0, #255	; 0xff
 8008e60:	d009      	beq.n	8008e76 <BroadcastReceivedMessage+0x26>
		SendMessageFromPort(0, 0, BOS_MULTICAST, 0, incomingPort);
 8008e62:	9100      	str	r1, [sp, #0]
 8008e64:	2300      	movs	r3, #0
 8008e66:	22fe      	movs	r2, #254	; 0xfe
 8008e68:	2100      	movs	r1, #0
 8008e6a:	2000      	movs	r0, #0
 8008e6c:	f7ff fe0e 	bl	8008a8c <SendMessageFromPort>
}
 8008e70:	2000      	movs	r0, #0
 8008e72:	b003      	add	sp, #12
 8008e74:	bd00      	pop	{pc}
		SendMessageFromPort(0, 0, BOS_BROADCAST, 0, incomingPort);
 8008e76:	9100      	str	r1, [sp, #0]
 8008e78:	2300      	movs	r3, #0
 8008e7a:	32ff      	adds	r2, #255	; 0xff
 8008e7c:	2100      	movs	r1, #0
 8008e7e:	2000      	movs	r0, #0
 8008e80:	f7ff fe04 	bl	8008a8c <SendMessageFromPort>
 8008e84:	e7f4      	b.n	8008e70 <BroadcastReceivedMessage+0x20>
 8008e86:	46c0      	nop			; (mov r8, r8)
 8008e88:	2000055c 	.word	0x2000055c
 8008e8c:	2000001d 	.word	0x2000001d

08008e90 <BroadcastMessage>:
{
 8008e90:	b530      	push	{r4, r5, lr}
 8008e92:	b083      	sub	sp, #12
 8008e94:	001c      	movs	r4, r3
	AddBcastPayload = true; dstGroupID = dstGroup;
 8008e96:	4b0f      	ldr	r3, [pc, #60]	; (8008ed4 <BroadcastMessage+0x44>)
 8008e98:	2501      	movs	r5, #1
 8008e9a:	701d      	strb	r5, [r3, #0]
 8008e9c:	4b0e      	ldr	r3, [pc, #56]	; (8008ed8 <BroadcastMessage+0x48>)
 8008e9e:	7019      	strb	r1, [r3, #0]
	if (dstGroup == BOS_BROADCAST)
 8008ea0:	29ff      	cmp	r1, #255	; 0xff
 8008ea2:	d00e      	beq.n	8008ec2 <BroadcastMessage+0x32>
		SendMessageFromPort(0, src, BOS_MULTICAST, code, numberOfParams);
 8008ea4:	9400      	str	r4, [sp, #0]
 8008ea6:	0013      	movs	r3, r2
 8008ea8:	22fe      	movs	r2, #254	; 0xfe
 8008eaa:	0001      	movs	r1, r0
 8008eac:	2000      	movs	r0, #0
 8008eae:	f7ff fded 	bl	8008a8c <SendMessageFromPort>
	memset( messageParams, 0, numberOfParams );
 8008eb2:	0022      	movs	r2, r4
 8008eb4:	2100      	movs	r1, #0
 8008eb6:	4809      	ldr	r0, [pc, #36]	; (8008edc <BroadcastMessage+0x4c>)
 8008eb8:	f00d fb45 	bl	8016546 <memset>
}
 8008ebc:	2000      	movs	r0, #0
 8008ebe:	b003      	add	sp, #12
 8008ec0:	bd30      	pop	{r4, r5, pc}
		SendMessageFromPort(0, src, BOS_BROADCAST, code, numberOfParams);
 8008ec2:	9400      	str	r4, [sp, #0]
 8008ec4:	0013      	movs	r3, r2
 8008ec6:	22ff      	movs	r2, #255	; 0xff
 8008ec8:	0001      	movs	r1, r0
 8008eca:	2000      	movs	r0, #0
 8008ecc:	f7ff fdde 	bl	8008a8c <SendMessageFromPort>
 8008ed0:	e7ef      	b.n	8008eb2 <BroadcastMessage+0x22>
 8008ed2:	46c0      	nop			; (mov r8, r8)
 8008ed4:	2000055c 	.word	0x2000055c
 8008ed8:	2000001d 	.word	0x2000001d
 8008edc:	200009d0 	.word	0x200009d0

08008ee0 <SendMessageToModule>:
{
 8008ee0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008ee2:	b083      	sub	sp, #12
 8008ee4:	0004      	movs	r4, r0
 8008ee6:	000e      	movs	r6, r1
 8008ee8:	0015      	movs	r5, r2
	if (dst != BOS_BROADCAST)
 8008eea:	28ff      	cmp	r0, #255	; 0xff
 8008eec:	d012      	beq.n	8008f14 <SendMessageToModule+0x34>
		port = FindRoute(myID, dst); 
 8008eee:	4f0d      	ldr	r7, [pc, #52]	; (8008f24 <SendMessageToModule+0x44>)
 8008ef0:	7838      	ldrb	r0, [r7, #0]
 8008ef2:	0021      	movs	r1, r4
 8008ef4:	f7fa fc5e 	bl	80037b4 <FindRoute>
		SendMessageFromPort(port, myID, dst, code, numberOfParams);	
 8008ef8:	7839      	ldrb	r1, [r7, #0]
 8008efa:	9500      	str	r5, [sp, #0]
 8008efc:	0033      	movs	r3, r6
 8008efe:	0022      	movs	r2, r4
 8008f00:	f7ff fdc4 	bl	8008a8c <SendMessageFromPort>
		memset( messageParams, 0, numberOfParams );
 8008f04:	002a      	movs	r2, r5
 8008f06:	2100      	movs	r1, #0
 8008f08:	4807      	ldr	r0, [pc, #28]	; (8008f28 <SendMessageToModule+0x48>)
 8008f0a:	f00d fb1c 	bl	8016546 <memset>
}
 8008f0e:	2000      	movs	r0, #0
 8008f10:	b003      	add	sp, #12
 8008f12:	bdf0      	pop	{r4, r5, r6, r7, pc}
		BroadcastMessage(myID, BOS_BROADCAST, code, numberOfParams);
 8008f14:	4b03      	ldr	r3, [pc, #12]	; (8008f24 <SendMessageToModule+0x44>)
 8008f16:	7818      	ldrb	r0, [r3, #0]
 8008f18:	0013      	movs	r3, r2
 8008f1a:	000a      	movs	r2, r1
 8008f1c:	21ff      	movs	r1, #255	; 0xff
 8008f1e:	f7ff ffb7 	bl	8008e90 <BroadcastMessage>
 8008f22:	e7f4      	b.n	8008f0e <SendMessageToModule+0x2e>
 8008f24:	20000b04 	.word	0x20000b04
 8008f28:	200009d0 	.word	0x200009d0

08008f2c <StartScastDMAStream>:

/* --- Start a single-cast DMA stream across the array. Transfer ends after (count) bytes are transferred 
			or timeout (ms), whichever comes first. If stored = true, the stream is stored in emulated eeprom --- 
*/
BOS_Status StartScastDMAStream(uint8_t srcP, uint8_t srcM, uint8_t dstP, uint8_t dstM, uint8_t direction, uint32_t count, uint32_t timeout, bool stored)
{
 8008f2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008f2e:	46de      	mov	lr, fp
 8008f30:	4657      	mov	r7, sl
 8008f32:	464e      	mov	r6, r9
 8008f34:	4645      	mov	r5, r8
 8008f36:	b5e0      	push	{r5, r6, r7, lr}
 8008f38:	b091      	sub	sp, #68	; 0x44
 8008f3a:	900f      	str	r0, [sp, #60]	; 0x3c
 8008f3c:	000f      	movs	r7, r1
 8008f3e:	920e      	str	r2, [sp, #56]	; 0x38
 8008f40:	001e      	movs	r6, r3
 8008f42:	ab1a      	add	r3, sp, #104	; 0x68
 8008f44:	781b      	ldrb	r3, [r3, #0]
 8008f46:	4699      	mov	r9, r3
 8008f48:	ab1d      	add	r3, sp, #116	; 0x74
 8008f4a:	781b      	ldrb	r3, [r3, #0]
 8008f4c:	469b      	mov	fp, r3
	BOS_Status result = BOS_OK;
	uint8_t port = 0, temp1 = 0, temp2 = 0;
	
	/* Is the source a different module? */
	if (srcM != myID) {
 8008f4e:	4b5e      	ldr	r3, [pc, #376]	; (80090c8 <StartScastDMAStream+0x19c>)
 8008f50:	781b      	ldrb	r3, [r3, #0]
 8008f52:	428b      	cmp	r3, r1
 8008f54:	d120      	bne.n	8008f98 <StartScastDMAStream+0x6c>
				temp2 = dstP;
			} else {
				temp2 = FindRoute(route[i], route[i-1]);
			}
			/* Message parameters*/
			messageParams[0] = (uint8_t) (count >> 24);			/* Count */
 8008f56:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008f58:	0e1b      	lsrs	r3, r3, #24
 8008f5a:	9308      	str	r3, [sp, #32]
			messageParams[1] = (uint8_t) (count >> 16);
 8008f5c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008f5e:	0c1b      	lsrs	r3, r3, #16
 8008f60:	b2db      	uxtb	r3, r3
 8008f62:	9309      	str	r3, [sp, #36]	; 0x24
			messageParams[2] = (uint8_t) (count >> 8);
 8008f64:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008f66:	0a1b      	lsrs	r3, r3, #8
 8008f68:	b2db      	uxtb	r3, r3
 8008f6a:	930a      	str	r3, [sp, #40]	; 0x28
			messageParams[3] = (uint8_t) count;
			messageParams[4] = (uint8_t) (timeout >> 24);		/* Timeout */
 8008f6c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8008f6e:	0e1b      	lsrs	r3, r3, #24
 8008f70:	930b      	str	r3, [sp, #44]	; 0x2c
			messageParams[5] = (uint8_t) (timeout >> 16);
 8008f72:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8008f74:	0c1b      	lsrs	r3, r3, #16
 8008f76:	b2db      	uxtb	r3, r3
 8008f78:	930c      	str	r3, [sp, #48]	; 0x30
			messageParams[6] = (uint8_t) (timeout >> 8);
 8008f7a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8008f7c:	0a1b      	lsrs	r3, r3, #8
 8008f7e:	b2db      	uxtb	r3, r3
 8008f80:	4698      	mov	r8, r3
 8008f82:	4d52      	ldr	r5, [pc, #328]	; (80090cc <StartScastDMAStream+0x1a0>)
 8008f84:	2319      	movs	r3, #25
 8008f86:	469a      	mov	sl, r3
 8008f88:	44aa      	add	sl, r5
				temp2 = dstP;
 8008f8a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008f8c:	930d      	str	r3, [sp, #52]	; 0x34
			messageParams[0] = (uint8_t) (count >> 24);			/* Count */
 8008f8e:	4c50      	ldr	r4, [pc, #320]	; (80090d0 <StartScastDMAStream+0x1a4>)
 8008f90:	464b      	mov	r3, r9
 8008f92:	46c1      	mov	r9, r8
 8008f94:	4698      	mov	r8, r3
 8008f96:	e058      	b.n	800904a <StartScastDMAStream+0x11e>
		messageParams[0] = (uint8_t) (count >> 24);			/* Count */
 8008f98:	4b4d      	ldr	r3, [pc, #308]	; (80090d0 <StartScastDMAStream+0x1a4>)
 8008f9a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8008f9c:	0e12      	lsrs	r2, r2, #24
 8008f9e:	701a      	strb	r2, [r3, #0]
		messageParams[1] = (uint8_t) (count >> 16);
 8008fa0:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8008fa2:	0c12      	lsrs	r2, r2, #16
 8008fa4:	705a      	strb	r2, [r3, #1]
		messageParams[2] = (uint8_t) (count >> 8);
 8008fa6:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8008fa8:	0a12      	lsrs	r2, r2, #8
 8008faa:	709a      	strb	r2, [r3, #2]
		messageParams[3] = (uint8_t) count;
 8008fac:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8008fae:	70da      	strb	r2, [r3, #3]
		messageParams[4] = (uint8_t) (timeout >> 24);		/* Timeout */
 8008fb0:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8008fb2:	0e12      	lsrs	r2, r2, #24
 8008fb4:	711a      	strb	r2, [r3, #4]
		messageParams[5] = (uint8_t) (timeout >> 16);
 8008fb6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8008fb8:	0c12      	lsrs	r2, r2, #16
 8008fba:	715a      	strb	r2, [r3, #5]
		messageParams[6] = (uint8_t) (timeout >> 8);
 8008fbc:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8008fbe:	0a12      	lsrs	r2, r2, #8
 8008fc0:	719a      	strb	r2, [r3, #6]
		messageParams[7] = (uint8_t) timeout;
 8008fc2:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8008fc4:	71da      	strb	r2, [r3, #7]
		messageParams[8] = direction;										/* Stream direction */
 8008fc6:	464a      	mov	r2, r9
 8008fc8:	721a      	strb	r2, [r3, #8]
		messageParams[9] = srcP;												/* Source port */
 8008fca:	7258      	strb	r0, [r3, #9]
		messageParams[10] = dstM;												/* destination module */
 8008fcc:	729e      	strb	r6, [r3, #10]
		messageParams[11] = dstP;												/* destination port */
 8008fce:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008fd0:	72da      	strb	r2, [r3, #11]
		messageParams[12] = stored;											/* EEPROM storage */
 8008fd2:	465a      	mov	r2, fp
 8008fd4:	731a      	strb	r2, [r3, #12]
		SendMessageToModule(srcM, CODE_DMA_SCAST_STREAM, 13);		
 8008fd6:	220d      	movs	r2, #13
 8008fd8:	211c      	movs	r1, #28
 8008fda:	0038      	movs	r0, r7
 8008fdc:	f7ff ff80 	bl	8008ee0 <SendMessageToModule>
		return result;
 8008fe0:	e055      	b.n	800908e <StartScastDMAStream+0x162>
				temp1 = FindRoute(route[i], srcM);
 8008fe2:	0039      	movs	r1, r7
 8008fe4:	f7fa fbe6 	bl	80037b4 <FindRoute>
 8008fe8:	9007      	str	r0, [sp, #28]
			FindRoute(srcM, dstM);
 8008fea:	0031      	movs	r1, r6
 8008fec:	0038      	movs	r0, r7
 8008fee:	f7fa fbe1 	bl	80037b4 <FindRoute>
			if (route[i] == dstM) {
 8008ff2:	9a06      	ldr	r2, [sp, #24]
 8008ff4:	7850      	ldrb	r0, [r2, #1]
				temp2 = dstP;
 8008ff6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
			if (route[i] == dstM) {
 8008ff8:	42b0      	cmp	r0, r6
 8008ffa:	d135      	bne.n	8009068 <StartScastDMAStream+0x13c>
			messageParams[0] = (uint8_t) (count >> 24);			/* Count */
 8008ffc:	9a08      	ldr	r2, [sp, #32]
 8008ffe:	7022      	strb	r2, [r4, #0]
			messageParams[1] = (uint8_t) (count >> 16);
 8009000:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009002:	7062      	strb	r2, [r4, #1]
			messageParams[2] = (uint8_t) (count >> 8);
 8009004:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009006:	70a2      	strb	r2, [r4, #2]
			messageParams[3] = (uint8_t) count;
 8009008:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800900a:	70e2      	strb	r2, [r4, #3]
			messageParams[4] = (uint8_t) (timeout >> 24);		/* Timeout */
 800900c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800900e:	7122      	strb	r2, [r4, #4]
			messageParams[5] = (uint8_t) (timeout >> 16);
 8009010:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009012:	7162      	strb	r2, [r4, #5]
			messageParams[6] = (uint8_t) (timeout >> 8);
 8009014:	464a      	mov	r2, r9
 8009016:	71a2      	strb	r2, [r4, #6]
			messageParams[7] = (uint8_t) timeout;
 8009018:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800901a:	71e2      	strb	r2, [r4, #7]
			messageParams[8] = direction;										/* Stream direction */
 800901c:	4642      	mov	r2, r8
 800901e:	7222      	strb	r2, [r4, #8]
			messageParams[9] = temp1;												/* Source port */
 8009020:	9a07      	ldr	r2, [sp, #28]
 8009022:	7262      	strb	r2, [r4, #9]
			messageParams[10] = temp2;											/* destination port */
 8009024:	72a3      	strb	r3, [r4, #10]
			messageParams[11] = stored;											/* EEPROM storage */
 8009026:	465b      	mov	r3, fp
 8009028:	72e3      	strb	r3, [r4, #11]
			FindRoute(srcM, dstM);
 800902a:	0031      	movs	r1, r6
 800902c:	0038      	movs	r0, r7
 800902e:	f7fa fbc1 	bl	80037b4 <FindRoute>
			SendMessageToModule(route[i], CODE_DMA_CHANNEL, 12);
 8009032:	9b06      	ldr	r3, [sp, #24]
 8009034:	7858      	ldrb	r0, [r3, #1]
 8009036:	220c      	movs	r2, #12
 8009038:	211b      	movs	r1, #27
 800903a:	f7ff ff51 	bl	8008ee0 <SendMessageToModule>
			osDelay(10);
 800903e:	200a      	movs	r0, #10
 8009040:	f004 ff7d 	bl	800df3e <osDelay>
	for(uint8_t i=0 ; i<sizeof(route) ; i++)
 8009044:	3501      	adds	r5, #1
 8009046:	4555      	cmp	r5, sl
 8009048:	d013      	beq.n	8009072 <StartScastDMAStream+0x146>
		FindRoute(srcM, dstM);
 800904a:	0031      	movs	r1, r6
 800904c:	0038      	movs	r0, r7
 800904e:	f7fa fbb1 	bl	80037b4 <FindRoute>
		if (route[i]) 
 8009052:	9506      	str	r5, [sp, #24]
 8009054:	7868      	ldrb	r0, [r5, #1]
 8009056:	2800      	cmp	r0, #0
 8009058:	d0f4      	beq.n	8009044 <StartScastDMAStream+0x118>
			if (route[i+1]) {
 800905a:	78a9      	ldrb	r1, [r5, #2]
 800905c:	2900      	cmp	r1, #0
 800905e:	d0c0      	beq.n	8008fe2 <StartScastDMAStream+0xb6>
				temp1 = FindRoute(route[i], route[i+1]);
 8009060:	f7fa fba8 	bl	80037b4 <FindRoute>
 8009064:	9007      	str	r0, [sp, #28]
 8009066:	e7c0      	b.n	8008fea <StartScastDMAStream+0xbe>
				temp2 = FindRoute(route[i], route[i-1]);
 8009068:	7811      	ldrb	r1, [r2, #0]
 800906a:	f7fa fba3 	bl	80037b4 <FindRoute>
 800906e:	0003      	movs	r3, r0
 8009070:	e7c4      	b.n	8008ffc <StartScastDMAStream+0xd0>
 8009072:	46c1      	mov	r9, r8
		}
	}
	
	if (srcM == dstM)
 8009074:	42b7      	cmp	r7, r6
 8009076:	d112      	bne.n	800909e <StartScastDMAStream+0x172>
		port = dstP;
	else
		port = FindRoute(srcM, dstM);
	
	/* Setup my own DMA stream */
	SetupDMAStreams(direction, count, timeout, srcP, port);
 8009078:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800907a:	9300      	str	r3, [sp, #0]
 800907c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800907e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8009080:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8009082:	4648      	mov	r0, r9
 8009084:	f7ff fbee 	bl	8008864 <SetupDMAStreams>
	
	// Store my own streams to EEPROM
	if (stored) {		
 8009088:	465b      	mov	r3, fp
 800908a:	2b00      	cmp	r3, #0
 800908c:	d10d      	bne.n	80090aa <StartScastDMAStream+0x17e>
		SaveEEstreams(direction, count, timeout, srcP, port, 0, 0, 0, 0);
	}
	
	
	return result;
}
 800908e:	2000      	movs	r0, #0
 8009090:	b011      	add	sp, #68	; 0x44
 8009092:	bcf0      	pop	{r4, r5, r6, r7}
 8009094:	46bb      	mov	fp, r7
 8009096:	46b2      	mov	sl, r6
 8009098:	46a9      	mov	r9, r5
 800909a:	46a0      	mov	r8, r4
 800909c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		port = FindRoute(srcM, dstM);
 800909e:	0031      	movs	r1, r6
 80090a0:	0038      	movs	r0, r7
 80090a2:	f7fa fb87 	bl	80037b4 <FindRoute>
 80090a6:	900e      	str	r0, [sp, #56]	; 0x38
 80090a8:	e7e6      	b.n	8009078 <StartScastDMAStream+0x14c>
		SaveEEstreams(direction, count, timeout, srcP, port, 0, 0, 0, 0);
 80090aa:	2300      	movs	r3, #0
 80090ac:	9304      	str	r3, [sp, #16]
 80090ae:	9303      	str	r3, [sp, #12]
 80090b0:	9302      	str	r3, [sp, #8]
 80090b2:	9301      	str	r3, [sp, #4]
 80090b4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80090b6:	9300      	str	r3, [sp, #0]
 80090b8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80090ba:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80090bc:	991b      	ldr	r1, [sp, #108]	; 0x6c
 80090be:	4648      	mov	r0, r9
 80090c0:	f7fa f840 	bl	8003144 <SaveEEstreams>
 80090c4:	e7e3      	b.n	800908e <StartScastDMAStream+0x162>
 80090c6:	46c0      	nop			; (mov r8, r8)
 80090c8:	20000b04 	.word	0x20000b04
 80090cc:	2000641f 	.word	0x2000641f
 80090d0:	200009d0 	.word	0x200009d0

080090d4 <BackEndTask>:

/*-----------------------------------------------------------*/

/* BackEndTask function */
void BackEndTask(void * argument)
{
 80090d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80090d6:	46de      	mov	lr, fp
 80090d8:	4657      	mov	r7, sl
 80090da:	464e      	mov	r6, r9
 80090dc:	4645      	mov	r5, r8
 80090de:	b5e0      	push	{r5, r6, r7, lr}
 80090e0:	b089      	sub	sp, #36	; 0x24
	int packetStart = 0, packetEnd = 0, packetLength = 0, parseStart = 0;
 80090e2:	2300      	movs	r3, #0
 80090e4:	9301      	str	r3, [sp, #4]
				UARTRxBufIndex[port-1] = (packetEnd+1);			// Set buffer pointer after the CRC byte 
				++rejectedMsg;							
			}	
			
			/* C. If DMA stopped due to communication errors, restart again */
			if (MsgDMAStopped[port-1] == true) {
 80090e6:	4bbc      	ldr	r3, [pc, #752]	; (80093d8 <BackEndTask+0x304>)
 80090e8:	469b      	mov	fp, r3
 80090ea:	e16d      	b.n	80093c8 <BackEndTask+0x2f4>
				for (int i=UARTRxBufIndex[port-1]; i<MSG_RX_BUF_SIZE ; i++)
 80090ec:	9504      	str	r5, [sp, #16]
 80090ee:	9603      	str	r6, [sp, #12]
 80090f0:	7833      	ldrb	r3, [r6, #0]
 80090f2:	2b3f      	cmp	r3, #63	; 0x3f
 80090f4:	dd00      	ble.n	80090f8 <BackEndTask+0x24>
 80090f6:	e190      	b.n	800941a <BackEndTask+0x346>
 80090f8:	001a      	movs	r2, r3
					if (i < (MSG_RX_BUF_SIZE-1) && UARTRxBuf[port-1][i] == 'H' && UARTRxBuf[port-1][i+1] == 'Z')	
 80090fa:	1c78      	adds	r0, r7, #1
 80090fc:	e183      	b.n	8009406 <BackEndTask+0x332>
					else if (i == (MSG_RX_BUF_SIZE-1) && UARTRxBuf[port-1][MSG_RX_BUF_SIZE-1] == 'H' && UARTRxBuf[port-1][0] == 'Z')	// HZ wrap around
 80090fe:	2a3f      	cmp	r2, #63	; 0x3f
 8009100:	d004      	beq.n	800910c <BackEndTask+0x38>
				for (int i=UARTRxBufIndex[port-1]; i<MSG_RX_BUF_SIZE ; i++)
 8009102:	3201      	adds	r2, #1
 8009104:	2a40      	cmp	r2, #64	; 0x40
 8009106:	d000      	beq.n	800910a <BackEndTask+0x36>
 8009108:	e17d      	b.n	8009406 <BackEndTask+0x332>
 800910a:	e186      	b.n	800941a <BackEndTask+0x346>
 800910c:	0039      	movs	r1, r7
					else if (i == (MSG_RX_BUF_SIZE-1) && UARTRxBuf[port-1][MSG_RX_BUF_SIZE-1] == 'H' && UARTRxBuf[port-1][0] == 'Z')	// HZ wrap around
 800910e:	5cba      	ldrb	r2, [r7, r2]
 8009110:	2a48      	cmp	r2, #72	; 0x48
 8009112:	d026      	beq.n	8009162 <BackEndTask+0x8e>
							if (BOS.disableCLI == false)
 8009114:	4ab1      	ldr	r2, [pc, #708]	; (80093dc <BackEndTask+0x308>)
 8009116:	7ed2      	ldrb	r2, [r2, #27]
 8009118:	2a00      	cmp	r2, #0
 800911a:	d02c      	beq.n	8009176 <BackEndTask+0xa2>
		for (port=1 ; port <= NumOfPorts; port++)
 800911c:	3501      	adds	r5, #1
 800911e:	3401      	adds	r4, #1
 8009120:	3740      	adds	r7, #64	; 0x40
 8009122:	3601      	adds	r6, #1
 8009124:	2d05      	cmp	r5, #5
 8009126:	d100      	bne.n	800912a <BackEndTask+0x56>
 8009128:	e14c      	b.n	80093c4 <BackEndTask+0x2f0>
 800912a:	1c6b      	adds	r3, r5, #1
 800912c:	b2db      	uxtb	r3, r3
 800912e:	469a      	mov	sl, r3
			if (portStatus[port] == MSG || portStatus[port] == FREE) 
 8009130:	9400      	str	r4, [sp, #0]
 8009132:	7863      	ldrb	r3, [r4, #1]
 8009134:	2b01      	cmp	r3, #1
 8009136:	d9d9      	bls.n	80090ec <BackEndTask+0x18>
			if (MsgDMAStopped[port-1] == true) {
 8009138:	465b      	mov	r3, fp
 800913a:	5d5b      	ldrb	r3, [r3, r5]
 800913c:	2b00      	cmp	r3, #0
 800913e:	d0ed      	beq.n	800911c <BackEndTask+0x48>
				MsgDMAStopped[port-1] = false;
 8009140:	4ba5      	ldr	r3, [pc, #660]	; (80093d8 <BackEndTask+0x304>)
 8009142:	18eb      	adds	r3, r5, r3
 8009144:	2200      	movs	r2, #0
 8009146:	701a      	strb	r2, [r3, #0]
				if (portStatus[port] == OVERRUN)	portStatus[port] = FREE;
 8009148:	9b00      	ldr	r3, [sp, #0]
 800914a:	785b      	ldrb	r3, [r3, #1]
 800914c:	2b05      	cmp	r3, #5
 800914e:	d100      	bne.n	8009152 <BackEndTask+0x7e>
 8009150:	e134      	b.n	80093bc <BackEndTask+0x2e8>
				HAL_UART_Receive_DMA(GetUart(port), (uint8_t *)&UARTRxBuf[port-1], MSG_RX_BUF_SIZE);
 8009152:	4650      	mov	r0, sl
 8009154:	f004 fda6 	bl	800dca4 <GetUart>
 8009158:	2240      	movs	r2, #64	; 0x40
 800915a:	0039      	movs	r1, r7
 800915c:	f009 ff02 	bl	8012f64 <HAL_UART_Receive_DMA>
 8009160:	e7dc      	b.n	800911c <BackEndTask+0x48>
					else if (i == (MSG_RX_BUF_SIZE-1) && UARTRxBuf[port-1][MSG_RX_BUF_SIZE-1] == 'H' && UARTRxBuf[port-1][0] == 'Z')	// HZ wrap around
 8009162:	783a      	ldrb	r2, [r7, #0]
 8009164:	2a5a      	cmp	r2, #90	; 0x5a
 8009166:	d1d5      	bne.n	8009114 <BackEndTask+0x40>
					packetLength = UARTRxBuf[port-1][1];
 8009168:	787b      	ldrb	r3, [r7, #1]
 800916a:	9302      	str	r3, [sp, #8]
					parseStart = 2;
 800916c:	233f      	movs	r3, #63	; 0x3f
 800916e:	9301      	str	r3, [sp, #4]
 8009170:	3b3d      	subs	r3, #61	; 0x3d
 8009172:	9305      	str	r3, [sp, #20]
 8009174:	e034      	b.n	80091e0 <BackEndTask+0x10c>
									if (UARTRxBuf[port-1][j] == 0xD && ((j < MSG_RX_BUF_SIZE-1 && UARTRxBuf[port-1][j+1] == 0) || (j == MSG_RX_BUF_SIZE-1 && UARTRxBuf[port-1][0] == 0) ) ) 
 8009176:	1c7a      	adds	r2, r7, #1
 8009178:	4694      	mov	ip, r2
 800917a:	e021      	b.n	80091c0 <BackEndTask+0xec>
 800917c:	2b3f      	cmp	r3, #63	; 0x3f
 800917e:	d11c      	bne.n	80091ba <BackEndTask+0xe6>
 8009180:	780a      	ldrb	r2, [r1, #0]
 8009182:	2a00      	cmp	r2, #0
 8009184:	d1ca      	bne.n	800911c <BackEndTask+0x48>
										UARTRxBuf[port-1][j] = 0;
 8009186:	9a04      	ldr	r2, [sp, #16]
 8009188:	0191      	lsls	r1, r2, #6
 800918a:	4a95      	ldr	r2, [pc, #596]	; (80093e0 <BackEndTask+0x30c>)
 800918c:	1852      	adds	r2, r2, r1
 800918e:	2100      	movs	r1, #0
 8009190:	54d1      	strb	r1, [r2, r3]
										UARTRxBufIndex[port-1] = j+1;		// Advance buffer index
 8009192:	3301      	adds	r3, #1
 8009194:	9a03      	ldr	r2, [sp, #12]
 8009196:	7013      	strb	r3, [r2, #0]
										portStatus[PcPort] = FREE;			// Free the previous CLI port 
 8009198:	4b92      	ldr	r3, [pc, #584]	; (80093e4 <BackEndTask+0x310>)
 800919a:	781a      	ldrb	r2, [r3, #0]
 800919c:	4892      	ldr	r0, [pc, #584]	; (80093e8 <BackEndTask+0x314>)
 800919e:	5481      	strb	r1, [r0, r2]
										portStatus[port] = CLI;					// Continue the CLI session on this port
 80091a0:	2203      	movs	r2, #3
 80091a2:	9900      	ldr	r1, [sp, #0]
 80091a4:	704a      	strb	r2, [r1, #1]
										PcPort = port;
 80091a6:	4652      	mov	r2, sl
 80091a8:	701a      	strb	r2, [r3, #0]
										xTaskNotifyGive(xCommandConsoleTaskHandle);		
 80091aa:	4b90      	ldr	r3, [pc, #576]	; (80093ec <BackEndTask+0x318>)
 80091ac:	6818      	ldr	r0, [r3, #0]
 80091ae:	2300      	movs	r3, #0
 80091b0:	2202      	movs	r2, #2
 80091b2:	2100      	movs	r1, #0
 80091b4:	f006 fb38 	bl	800f828 <xTaskGenericNotify>
										break;
 80091b8:	e7b0      	b.n	800911c <BackEndTask+0x48>
								for (int j=UARTRxBufIndex[port-1] ; j<MSG_RX_BUF_SIZE ; j++)
 80091ba:	3301      	adds	r3, #1
 80091bc:	2b40      	cmp	r3, #64	; 0x40
 80091be:	d0ad      	beq.n	800911c <BackEndTask+0x48>
									if (UARTRxBuf[port-1][j] == 0xD && ((j < MSG_RX_BUF_SIZE-1 && UARTRxBuf[port-1][j+1] == 0) || (j == MSG_RX_BUF_SIZE-1 && UARTRxBuf[port-1][0] == 0) ) ) 
 80091c0:	5cca      	ldrb	r2, [r1, r3]
 80091c2:	2a0d      	cmp	r2, #13
 80091c4:	d1f9      	bne.n	80091ba <BackEndTask+0xe6>
 80091c6:	2b3e      	cmp	r3, #62	; 0x3e
 80091c8:	dcd8      	bgt.n	800917c <BackEndTask+0xa8>
 80091ca:	4662      	mov	r2, ip
 80091cc:	5cd2      	ldrb	r2, [r2, r3]
 80091ce:	2a00      	cmp	r2, #0
 80091d0:	d0d9      	beq.n	8009186 <BackEndTask+0xb2>
								for (int j=UARTRxBufIndex[port-1] ; j<MSG_RX_BUF_SIZE ; j++)
 80091d2:	3301      	adds	r3, #1
 80091d4:	e7f4      	b.n	80091c0 <BackEndTask+0xec>
					packetLength = UARTRxBuf[port-1][MSG_RX_BUF_SIZE-1];
 80091d6:	233f      	movs	r3, #63	; 0x3f
 80091d8:	5cfb      	ldrb	r3, [r7, r3]
 80091da:	9302      	str	r3, [sp, #8]
					parseStart = 0;				
 80091dc:	2300      	movs	r3, #0
 80091de:	9305      	str	r3, [sp, #20]
						packetEnd = packetStart + (packetLength + 3);			// Packet length is counted from Dst to before CRC
 80091e0:	9b02      	ldr	r3, [sp, #8]
 80091e2:	3303      	adds	r3, #3
 80091e4:	4698      	mov	r8, r3
 80091e6:	9b01      	ldr	r3, [sp, #4]
 80091e8:	4443      	add	r3, r8
 80091ea:	4699      	mov	r9, r3
					packetEnd -= MSG_RX_BUF_SIZE;
 80091ec:	2340      	movs	r3, #64	; 0x40
 80091ee:	425b      	negs	r3, r3
 80091f0:	469c      	mov	ip, r3
 80091f2:	44e1      	add	r9, ip
 80091f4:	e131      	b.n	800945a <BackEndTask+0x386>
					packetLength = UARTRxBuf[port-1][0];
 80091f6:	783b      	ldrb	r3, [r7, #0]
 80091f8:	9302      	str	r3, [sp, #8]
					parseStart = 1;
 80091fa:	2301      	movs	r3, #1
 80091fc:	9305      	str	r3, [sp, #20]
 80091fe:	e7ef      	b.n	80091e0 <BackEndTask+0x10c>
					Delay_ms(1);
 8009200:	2001      	movs	r0, #1
 8009202:	f006 ff1b 	bl	801003c <HAL_Delay>
					if (packetStart < packetEnd) {
 8009206:	9b01      	ldr	r3, [sp, #4]
 8009208:	4599      	cmp	r9, r3
 800920a:	dd50      	ble.n	80092ae <BackEndTask+0x1da>
						memcpy(crcBuffer, &UARTRxBuf[port-1][packetStart], packetLength + 3);						
 800920c:	01a9      	lsls	r1, r5, #6
 800920e:	469c      	mov	ip, r3
 8009210:	4461      	add	r1, ip
 8009212:	4b73      	ldr	r3, [pc, #460]	; (80093e0 <BackEndTask+0x30c>)
 8009214:	469c      	mov	ip, r3
 8009216:	4461      	add	r1, ip
 8009218:	4642      	mov	r2, r8
 800921a:	4875      	ldr	r0, [pc, #468]	; (80093f0 <BackEndTask+0x31c>)
 800921c:	f00d f98a 	bl	8016534 <memcpy>
					crc8 = CalculateCRC8((uint32_t *)&crcBuffer, (packetLength + 3));						
 8009220:	9b02      	ldr	r3, [sp, #8]
 8009222:	1cd9      	adds	r1, r3, #3
 8009224:	4872      	ldr	r0, [pc, #456]	; (80093f0 <BackEndTask+0x31c>)
 8009226:	f003 fdc1 	bl	800cdac <CalculateCRC8>
 800922a:	4680      	mov	r8, r0
					memset(crcBuffer, 0, sizeof(crcBuffer));
 800922c:	2238      	movs	r2, #56	; 0x38
 800922e:	2100      	movs	r1, #0
 8009230:	486f      	ldr	r0, [pc, #444]	; (80093f0 <BackEndTask+0x31c>)
 8009232:	f00d f988 	bl	8016546 <memset>
					if (crc8 == UARTRxBuf[port-1][packetEnd])
 8009236:	9b04      	ldr	r3, [sp, #16]
 8009238:	019b      	lsls	r3, r3, #6
 800923a:	4a69      	ldr	r2, [pc, #420]	; (80093e0 <BackEndTask+0x30c>)
 800923c:	4694      	mov	ip, r2
 800923e:	4463      	add	r3, ip
 8009240:	464a      	mov	r2, r9
 8009242:	5c9b      	ldrb	r3, [r3, r2]
 8009244:	4543      	cmp	r3, r8
 8009246:	d000      	beq.n	800924a <BackEndTask+0x176>
 8009248:	e10f      	b.n	800946a <BackEndTask+0x396>
						portStatus[port] = MSG;
 800924a:	2301      	movs	r3, #1
 800924c:	9a00      	ldr	r2, [sp, #0]
 800924e:	7053      	strb	r3, [r2, #1]
						messageLength[port-1] = packetLength;	
 8009250:	4b68      	ldr	r3, [pc, #416]	; (80093f4 <BackEndTask+0x320>)
 8009252:	9a02      	ldr	r2, [sp, #8]
 8009254:	555a      	strb	r2, [r3, r5]
						if ((packetLength) <= (MSG_RX_BUF_SIZE-parseStart-1)) {
 8009256:	233f      	movs	r3, #63	; 0x3f
 8009258:	9905      	ldr	r1, [sp, #20]
 800925a:	1a5b      	subs	r3, r3, r1
 800925c:	4293      	cmp	r3, r2
 800925e:	db6b      	blt.n	8009338 <BackEndTask+0x264>
							memcpy(&cMessage[port-1][0], &UARTRxBuf[port-1][parseStart], packetLength);	
 8009260:	00e8      	lsls	r0, r5, #3
 8009262:	1b40      	subs	r0, r0, r5
 8009264:	00c0      	lsls	r0, r0, #3
 8009266:	4b64      	ldr	r3, [pc, #400]	; (80093f8 <BackEndTask+0x324>)
 8009268:	18c0      	adds	r0, r0, r3
 800926a:	01a9      	lsls	r1, r5, #6
 800926c:	9b05      	ldr	r3, [sp, #20]
 800926e:	469c      	mov	ip, r3
 8009270:	4461      	add	r1, ip
 8009272:	4b5b      	ldr	r3, [pc, #364]	; (80093e0 <BackEndTask+0x30c>)
 8009274:	18c9      	adds	r1, r1, r3
 8009276:	f00d f95d 	bl	8016534 <memcpy>
						if (packetStart < packetEnd) {
 800927a:	9b01      	ldr	r3, [sp, #4]
 800927c:	4599      	cmp	r9, r3
 800927e:	dc00      	bgt.n	8009282 <BackEndTask+0x1ae>
 8009280:	e081      	b.n	8009386 <BackEndTask+0x2b2>
								memset(&UARTRxBuf[port-1][packetStart], 0, (packetLength) + 4);                        
 8009282:	9a02      	ldr	r2, [sp, #8]
 8009284:	3204      	adds	r2, #4
 8009286:	01a8      	lsls	r0, r5, #6
 8009288:	469c      	mov	ip, r3
 800928a:	4460      	add	r0, ip
 800928c:	4b54      	ldr	r3, [pc, #336]	; (80093e0 <BackEndTask+0x30c>)
 800928e:	18c0      	adds	r0, r0, r3
 8009290:	2100      	movs	r1, #0
 8009292:	f00d f958 	bl	8016546 <memset>
						UARTRxBufIndex[port-1] = (packetEnd+1);			// Set buffer pointer after the CRC byte 
 8009296:	464b      	mov	r3, r9
 8009298:	3301      	adds	r3, #1
 800929a:	9a03      	ldr	r2, [sp, #12]
 800929c:	7013      	strb	r3, [r2, #0]
						++acceptedMsg;
 800929e:	4a57      	ldr	r2, [pc, #348]	; (80093fc <BackEndTask+0x328>)
 80092a0:	8813      	ldrh	r3, [r2, #0]
 80092a2:	3301      	adds	r3, #1
 80092a4:	8013      	strh	r3, [r2, #0]
						NotifyMessagingTask(port);	
 80092a6:	4650      	mov	r0, sl
 80092a8:	f7ff fbb4 	bl	8008a14 <NotifyMessagingTask>
						continue;		// Inspect the next port circular buffer
 80092ac:	e736      	b.n	800911c <BackEndTask+0x48>
						memcpy(crcBuffer, &UARTRxBuf[port-1][packetStart], MSG_RX_BUF_SIZE-packetStart);
 80092ae:	01a9      	lsls	r1, r5, #6
 80092b0:	2240      	movs	r2, #64	; 0x40
 80092b2:	9b01      	ldr	r3, [sp, #4]
 80092b4:	1ad0      	subs	r0, r2, r3
 80092b6:	9107      	str	r1, [sp, #28]
 80092b8:	469c      	mov	ip, r3
 80092ba:	4461      	add	r1, ip
 80092bc:	4b48      	ldr	r3, [pc, #288]	; (80093e0 <BackEndTask+0x30c>)
 80092be:	469c      	mov	ip, r3
 80092c0:	4461      	add	r1, ip
 80092c2:	9006      	str	r0, [sp, #24]
 80092c4:	0002      	movs	r2, r0
 80092c6:	484a      	ldr	r0, [pc, #296]	; (80093f0 <BackEndTask+0x31c>)
 80092c8:	f00d f934 	bl	8016534 <memcpy>
						memcpy(&crcBuffer[MSG_RX_BUF_SIZE-packetStart], &UARTRxBuf[port-1][0], (packetLength + 3) - (MSG_RX_BUF_SIZE-packetStart));
 80092cc:	4848      	ldr	r0, [pc, #288]	; (80093f0 <BackEndTask+0x31c>)
 80092ce:	9906      	ldr	r1, [sp, #24]
 80092d0:	468c      	mov	ip, r1
 80092d2:	4460      	add	r0, ip
 80092d4:	4643      	mov	r3, r8
 80092d6:	1a5a      	subs	r2, r3, r1
 80092d8:	9b07      	ldr	r3, [sp, #28]
 80092da:	0019      	movs	r1, r3
 80092dc:	4b40      	ldr	r3, [pc, #256]	; (80093e0 <BackEndTask+0x30c>)
 80092de:	469c      	mov	ip, r3
 80092e0:	4461      	add	r1, ip
 80092e2:	f00d f927 	bl	8016534 <memcpy>
					crc8 = CalculateCRC8((uint32_t *)&crcBuffer, (packetLength + 3));						
 80092e6:	9b02      	ldr	r3, [sp, #8]
 80092e8:	1cd9      	adds	r1, r3, #3
 80092ea:	4841      	ldr	r0, [pc, #260]	; (80093f0 <BackEndTask+0x31c>)
 80092ec:	f003 fd5e 	bl	800cdac <CalculateCRC8>
 80092f0:	4680      	mov	r8, r0
					memset(crcBuffer, 0, sizeof(crcBuffer));
 80092f2:	2238      	movs	r2, #56	; 0x38
 80092f4:	2100      	movs	r1, #0
 80092f6:	483e      	ldr	r0, [pc, #248]	; (80093f0 <BackEndTask+0x31c>)
 80092f8:	f00d f925 	bl	8016546 <memset>
					if (crc8 == UARTRxBuf[port-1][packetEnd])
 80092fc:	9b04      	ldr	r3, [sp, #16]
 80092fe:	019b      	lsls	r3, r3, #6
 8009300:	4a37      	ldr	r2, [pc, #220]	; (80093e0 <BackEndTask+0x30c>)
 8009302:	4694      	mov	ip, r2
 8009304:	4463      	add	r3, ip
 8009306:	464a      	mov	r2, r9
 8009308:	5c9b      	ldrb	r3, [r3, r2]
 800930a:	4543      	cmp	r3, r8
 800930c:	d09d      	beq.n	800924a <BackEndTask+0x176>
						memset(&UARTRxBuf[port-1][packetStart], 0, MSG_RX_BUF_SIZE-packetStart);
 800930e:	2240      	movs	r2, #64	; 0x40
 8009310:	9b01      	ldr	r3, [sp, #4]
 8009312:	1ad2      	subs	r2, r2, r3
 8009314:	4690      	mov	r8, r2
 8009316:	01a8      	lsls	r0, r5, #6
 8009318:	469c      	mov	ip, r3
 800931a:	4460      	add	r0, ip
 800931c:	4b30      	ldr	r3, [pc, #192]	; (80093e0 <BackEndTask+0x30c>)
 800931e:	18c0      	adds	r0, r0, r3
 8009320:	2100      	movs	r1, #0
 8009322:	f00d f910 	bl	8016546 <memset>
						memset(&UARTRxBuf[port-1][0], 0, ((packetLength) + 4) - (MSG_RX_BUF_SIZE-packetStart));
 8009326:	9a02      	ldr	r2, [sp, #8]
 8009328:	3204      	adds	r2, #4
 800932a:	4643      	mov	r3, r8
 800932c:	1ad2      	subs	r2, r2, r3
 800932e:	2100      	movs	r1, #0
 8009330:	0038      	movs	r0, r7
 8009332:	f00d f908 	bl	8016546 <memset>
 8009336:	e0a3      	b.n	8009480 <BackEndTask+0x3ac>
							memcpy(&cMessage[port-1][0], &UARTRxBuf[port-1][parseStart], MSG_RX_BUF_SIZE-parseStart);
 8009338:	00eb      	lsls	r3, r5, #3
 800933a:	1b5b      	subs	r3, r3, r5
 800933c:	00d9      	lsls	r1, r3, #3
 800933e:	01ab      	lsls	r3, r5, #6
 8009340:	2240      	movs	r2, #64	; 0x40
 8009342:	9805      	ldr	r0, [sp, #20]
 8009344:	1a12      	subs	r2, r2, r0
 8009346:	4690      	mov	r8, r2
 8009348:	4a2b      	ldr	r2, [pc, #172]	; (80093f8 <BackEndTask+0x324>)
 800934a:	0010      	movs	r0, r2
 800934c:	9104      	str	r1, [sp, #16]
 800934e:	468c      	mov	ip, r1
 8009350:	4460      	add	r0, ip
 8009352:	9a05      	ldr	r2, [sp, #20]
 8009354:	9300      	str	r3, [sp, #0]
 8009356:	469c      	mov	ip, r3
 8009358:	4462      	add	r2, ip
 800935a:	4b21      	ldr	r3, [pc, #132]	; (80093e0 <BackEndTask+0x30c>)
 800935c:	18d1      	adds	r1, r2, r3
 800935e:	4642      	mov	r2, r8
 8009360:	f00d f8e8 	bl	8016534 <memcpy>
							memcpy(&cMessage[port-1][MSG_RX_BUF_SIZE-parseStart], &UARTRxBuf[port-1][0], (packetLength)-(MSG_RX_BUF_SIZE-parseStart));	// wrap-around
 8009364:	9904      	ldr	r1, [sp, #16]
 8009366:	0008      	movs	r0, r1
 8009368:	4440      	add	r0, r8
 800936a:	4a23      	ldr	r2, [pc, #140]	; (80093f8 <BackEndTask+0x324>)
 800936c:	4694      	mov	ip, r2
 800936e:	4460      	add	r0, ip
 8009370:	9a02      	ldr	r2, [sp, #8]
 8009372:	4641      	mov	r1, r8
 8009374:	1a52      	subs	r2, r2, r1
 8009376:	9b00      	ldr	r3, [sp, #0]
 8009378:	0019      	movs	r1, r3
 800937a:	4b19      	ldr	r3, [pc, #100]	; (80093e0 <BackEndTask+0x30c>)
 800937c:	4698      	mov	r8, r3
 800937e:	4441      	add	r1, r8
 8009380:	f00d f8d8 	bl	8016534 <memcpy>
 8009384:	e779      	b.n	800927a <BackEndTask+0x1a6>
								memset(&UARTRxBuf[port-1][packetStart], 0, MSG_RX_BUF_SIZE-packetStart);
 8009386:	01ab      	lsls	r3, r5, #6
 8009388:	2240      	movs	r2, #64	; 0x40
 800938a:	9901      	ldr	r1, [sp, #4]
 800938c:	1a52      	subs	r2, r2, r1
 800938e:	4690      	mov	r8, r2
 8009390:	9300      	str	r3, [sp, #0]
 8009392:	0018      	movs	r0, r3
 8009394:	468c      	mov	ip, r1
 8009396:	4460      	add	r0, ip
 8009398:	4b11      	ldr	r3, [pc, #68]	; (80093e0 <BackEndTask+0x30c>)
 800939a:	18c0      	adds	r0, r0, r3
 800939c:	2100      	movs	r1, #0
 800939e:	f00d f8d2 	bl	8016546 <memset>
								memset(&UARTRxBuf[port-1][0], 0, ((packetLength) + 4) - (MSG_RX_BUF_SIZE-packetStart));
 80093a2:	9a02      	ldr	r2, [sp, #8]
 80093a4:	3204      	adds	r2, #4
 80093a6:	4641      	mov	r1, r8
 80093a8:	1a52      	subs	r2, r2, r1
 80093aa:	9b00      	ldr	r3, [sp, #0]
 80093ac:	490c      	ldr	r1, [pc, #48]	; (80093e0 <BackEndTask+0x30c>)
 80093ae:	468c      	mov	ip, r1
 80093b0:	4463      	add	r3, ip
 80093b2:	0018      	movs	r0, r3
 80093b4:	2100      	movs	r1, #0
 80093b6:	f00d f8c6 	bl	8016546 <memset>
 80093ba:	e76c      	b.n	8009296 <BackEndTask+0x1c2>
				if (portStatus[port] == OVERRUN)	portStatus[port] = FREE;
 80093bc:	2300      	movs	r3, #0
 80093be:	9a00      	ldr	r2, [sp, #0]
 80093c0:	7053      	strb	r3, [r2, #1]
 80093c2:	e6c6      	b.n	8009152 <BackEndTask+0x7e>
			}				
		}
		
		taskYIELD();
 80093c4:	f006 fcc0 	bl	800fd48 <vPortYield>
		for (port=1 ; port <= NumOfPorts; port++)
 80093c8:	4b07      	ldr	r3, [pc, #28]	; (80093e8 <BackEndTask+0x314>)
 80093ca:	4698      	mov	r8, r3
 80093cc:	4b0c      	ldr	r3, [pc, #48]	; (8009400 <BackEndTask+0x32c>)
	int packetStart = 0, packetEnd = 0, packetLength = 0, parseStart = 0;
 80093ce:	4f04      	ldr	r7, [pc, #16]	; (80093e0 <BackEndTask+0x30c>)
 80093d0:	2500      	movs	r5, #0
 80093d2:	4644      	mov	r4, r8
 80093d4:	001e      	movs	r6, r3
 80093d6:	e6a8      	b.n	800912a <BackEndTask+0x56>
 80093d8:	20000d4c 	.word	0x20000d4c
 80093dc:	20006368 	.word	0x20006368
 80093e0:	20000d54 	.word	0x20000d54
 80093e4:	2000055f 	.word	0x2000055f
 80093e8:	20000b80 	.word	0x20000b80
 80093ec:	20000f38 	.word	0x20000f38
 80093f0:	20000e9c 	.word	0x20000e9c
 80093f4:	200009c8 	.word	0x200009c8
 80093f8:	200007d8 	.word	0x200007d8
 80093fc:	20000fb0 	.word	0x20000fb0
 8009400:	20000e94 	.word	0x20000e94
				for (int i=UARTRxBufIndex[port-1]; i<MSG_RX_BUF_SIZE ; i++)
 8009404:	3201      	adds	r2, #1
					if (i < (MSG_RX_BUF_SIZE-1) && UARTRxBuf[port-1][i] == 'H' && UARTRxBuf[port-1][i+1] == 'Z')	
 8009406:	2a3e      	cmp	r2, #62	; 0x3e
 8009408:	dd00      	ble.n	800940c <BackEndTask+0x338>
 800940a:	e678      	b.n	80090fe <BackEndTask+0x2a>
 800940c:	5cb9      	ldrb	r1, [r7, r2]
 800940e:	2948      	cmp	r1, #72	; 0x48
 8009410:	d1f8      	bne.n	8009404 <BackEndTask+0x330>
 8009412:	5c81      	ldrb	r1, [r0, r2]
 8009414:	295a      	cmp	r1, #90	; 0x5a
 8009416:	d1f5      	bne.n	8009404 <BackEndTask+0x330>
 8009418:	9201      	str	r2, [sp, #4]
				if (packetStart == MSG_RX_BUF_SIZE-3) {
 800941a:	9b01      	ldr	r3, [sp, #4]
 800941c:	2b3d      	cmp	r3, #61	; 0x3d
 800941e:	d100      	bne.n	8009422 <BackEndTask+0x34e>
 8009420:	e6d9      	b.n	80091d6 <BackEndTask+0x102>
				} else if (packetStart == MSG_RX_BUF_SIZE-2) {
 8009422:	9b01      	ldr	r3, [sp, #4]
 8009424:	2b3e      	cmp	r3, #62	; 0x3e
 8009426:	d100      	bne.n	800942a <BackEndTask+0x356>
 8009428:	e6e5      	b.n	80091f6 <BackEndTask+0x122>
				} else if (packetStart == MSG_RX_BUF_SIZE-1) {
 800942a:	9b01      	ldr	r3, [sp, #4]
 800942c:	2b3f      	cmp	r3, #63	; 0x3f
 800942e:	d100      	bne.n	8009432 <BackEndTask+0x35e>
 8009430:	e69a      	b.n	8009168 <BackEndTask+0x94>
					packetLength = UARTRxBuf[port-1][packetStart+2];
 8009432:	9b04      	ldr	r3, [sp, #16]
 8009434:	019b      	lsls	r3, r3, #6
 8009436:	4a17      	ldr	r2, [pc, #92]	; (8009494 <BackEndTask+0x3c0>)
 8009438:	4694      	mov	ip, r2
 800943a:	4463      	add	r3, ip
 800943c:	9a01      	ldr	r2, [sp, #4]
 800943e:	4694      	mov	ip, r2
 8009440:	4463      	add	r3, ip
 8009442:	7899      	ldrb	r1, [r3, #2]
 8009444:	9102      	str	r1, [sp, #8]
					parseStart = packetStart+3;
 8009446:	0013      	movs	r3, r2
 8009448:	3203      	adds	r2, #3
 800944a:	9205      	str	r2, [sp, #20]
						packetEnd = packetStart + (packetLength + 3);			// Packet length is counted from Dst to before CRC
 800944c:	1cca      	adds	r2, r1, #3
 800944e:	4690      	mov	r8, r2
 8009450:	4443      	add	r3, r8
 8009452:	4699      	mov	r9, r3
				if (packetEnd > MSG_RX_BUF_SIZE-1)												// wrap-around
 8009454:	2b3f      	cmp	r3, #63	; 0x3f
 8009456:	dd00      	ble.n	800945a <BackEndTask+0x386>
 8009458:	e6c8      	b.n	80091ec <BackEndTask+0x118>
				if (packetStart != packetEnd)										// Non-empty packet
 800945a:	9b01      	ldr	r3, [sp, #4]
 800945c:	4599      	cmp	r9, r3
 800945e:	d000      	beq.n	8009462 <BackEndTask+0x38e>
 8009460:	e6ce      	b.n	8009200 <BackEndTask+0x12c>
				if (packetStart < packetEnd) {
 8009462:	9b01      	ldr	r3, [sp, #4]
 8009464:	4599      	cmp	r9, r3
 8009466:	dc00      	bgt.n	800946a <BackEndTask+0x396>
 8009468:	e751      	b.n	800930e <BackEndTask+0x23a>
						memset(&UARTRxBuf[port-1][packetStart], 0, (packetLength) + 4);                        
 800946a:	9a02      	ldr	r2, [sp, #8]
 800946c:	3204      	adds	r2, #4
 800946e:	01a8      	lsls	r0, r5, #6
 8009470:	9b01      	ldr	r3, [sp, #4]
 8009472:	469c      	mov	ip, r3
 8009474:	4460      	add	r0, ip
 8009476:	4b07      	ldr	r3, [pc, #28]	; (8009494 <BackEndTask+0x3c0>)
 8009478:	18c0      	adds	r0, r0, r3
 800947a:	2100      	movs	r1, #0
 800947c:	f00d f863 	bl	8016546 <memset>
				UARTRxBufIndex[port-1] = (packetEnd+1);			// Set buffer pointer after the CRC byte 
 8009480:	464b      	mov	r3, r9
 8009482:	3301      	adds	r3, #1
 8009484:	9a03      	ldr	r2, [sp, #12]
 8009486:	7013      	strb	r3, [r2, #0]
				++rejectedMsg;							
 8009488:	4a03      	ldr	r2, [pc, #12]	; (8009498 <BackEndTask+0x3c4>)
 800948a:	8813      	ldrh	r3, [r2, #0]
 800948c:	3301      	adds	r3, #1
 800948e:	8013      	strh	r3, [r2, #0]
 8009490:	e652      	b.n	8009138 <BackEndTask+0x64>
 8009492:	46c0      	nop			; (mov r8, r8)
 8009494:	20000d54 	.word	0x20000d54
 8009498:	2000114c 	.word	0x2000114c

0800949c <User_MessagingParser>:

{
	BOS_Status result = BOS_ERR_UnknownMessage;
	
	return result;
}
 800949c:	2001      	movs	r0, #1
 800949e:	4770      	bx	lr

080094a0 <PxMessagingTask>:
{
 80094a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80094a2:	46de      	mov	lr, fp
 80094a4:	4657      	mov	r7, sl
 80094a6:	464e      	mov	r6, r9
 80094a8:	4645      	mov	r5, r8
 80094aa:	b5e0      	push	{r5, r6, r7, lr}
 80094ac:	b097      	sub	sp, #92	; 0x5c
 80094ae:	2300      	movs	r3, #0
 80094b0:	9307      	str	r3, [sp, #28]
 80094b2:	930b      	str	r3, [sp, #44]	; 0x2c
	port = (int8_t)(unsigned) argument;
 80094b4:	b2c3      	uxtb	r3, r0
 80094b6:	9309      	str	r3, [sp, #36]	; 0x24
 80094b8:	27ff      	movs	r7, #255	; 0xff
 80094ba:	4007      	ands	r7, r0
		if (messageLength[port-1])
 80094bc:	1e7c      	subs	r4, r7, #1
 80094be:	00e3      	lsls	r3, r4, #3
 80094c0:	1b1b      	subs	r3, r3, r4
 80094c2:	00db      	lsls	r3, r3, #3
 80094c4:	930a      	str	r3, [sp, #40]	; 0x28
		memset(cMessage[port-1], 0, (size_t) messageLength[port-1]);
 80094c6:	4ada      	ldr	r2, [pc, #872]	; (8009830 <PxMessagingTask+0x390>)
 80094c8:	18d2      	adds	r2, r2, r3
 80094ca:	9205      	str	r2, [sp, #20]
 80094cc:	3b01      	subs	r3, #1
 80094ce:	930c      	str	r3, [sp, #48]	; 0x30
	BOS_Status result = BOS_OK; HAL_StatusTypeDef status = HAL_OK;
 80094d0:	2300      	movs	r3, #0
 80094d2:	930d      	str	r3, [sp, #52]	; 0x34
 80094d4:	2500      	movs	r5, #0
			if (cMessage[port-1][2]>>7) {
 80094d6:	00e3      	lsls	r3, r4, #3
 80094d8:	1b1b      	subs	r3, r3, r4
 80094da:	00db      	lsls	r3, r3, #3
 80094dc:	469a      	mov	sl, r3
 80094de:	0013      	movs	r3, r2
 80094e0:	9208      	str	r2, [sp, #32]
 80094e2:	3302      	adds	r3, #2
 80094e4:	469b      	mov	fp, r3
 80094e6:	4656      	mov	r6, sl
 80094e8:	46aa      	mov	sl, r5
 80094ea:	e024      	b.n	8009536 <PxMessagingTask+0x96>
				code = cMessage[port-1][3+shift];
 80094ec:	4ad0      	ldr	r2, [pc, #832]	; (8009830 <PxMessagingTask+0x390>)
 80094ee:	1992      	adds	r2, r2, r6
 80094f0:	18d3      	adds	r3, r2, r3
 80094f2:	78db      	ldrb	r3, [r3, #3]
 80094f4:	4699      	mov	r9, r3
 80094f6:	e049      	b.n	800958c <PxMessagingTask+0xec>
					indMode = IND_SHORT_BLINK;
 80094f8:	4bce      	ldr	r3, [pc, #824]	; (8009834 <PxMessagingTask+0x394>)
 80094fa:	2203      	movs	r2, #3
 80094fc:	701a      	strb	r2, [r3, #0]
					if (code == CODE_UPDATE) {		// Remote bootloader update
 80094fe:	464b      	mov	r3, r9
 8009500:	2b19      	cmp	r3, #25
 8009502:	d058      	beq.n	80095b6 <PxMessagingTask+0x116>
					} else if (code == CODE_UPDATE_VIA_PORT) {		// Remote 'via port' bootloader update
 8009504:	2b1a      	cmp	r3, #26
 8009506:	d060      	beq.n	80095ca <PxMessagingTask+0x12a>
		if (result == BOS_ERR_UnknownMessage) {
 8009508:	4653      	mov	r3, sl
 800950a:	2b01      	cmp	r3, #1
 800950c:	d101      	bne.n	8009512 <PxMessagingTask+0x72>
 800950e:	f001 faae 	bl	800aa6e <PxMessagingTask+0x15ce>
		memset(cMessage[port-1], 0, (size_t) messageLength[port-1]);
 8009512:	4dc9      	ldr	r5, [pc, #804]	; (8009838 <PxMessagingTask+0x398>)
 8009514:	5d2a      	ldrb	r2, [r5, r4]
 8009516:	2100      	movs	r1, #0
 8009518:	9805      	ldr	r0, [sp, #20]
 800951a:	f00d f814 	bl	8016546 <memset>
		messageLength[port-1] = 0;
 800951e:	2300      	movs	r3, #0
 8009520:	552b      	strb	r3, [r5, r4]
		if (portStatus[port] != STREAM && portStatus[port] != CLI && portStatus[port] != PORTBUTTON) {
 8009522:	4bc6      	ldr	r3, [pc, #792]	; (800983c <PxMessagingTask+0x39c>)
 8009524:	5ddb      	ldrb	r3, [r3, r7]
 8009526:	3b02      	subs	r3, #2
 8009528:	2b02      	cmp	r3, #2
 800952a:	d902      	bls.n	8009532 <PxMessagingTask+0x92>
			portStatus[port] = FREE;
 800952c:	4bc3      	ldr	r3, [pc, #780]	; (800983c <PxMessagingTask+0x39c>)
 800952e:	2200      	movs	r2, #0
 8009530:	55da      	strb	r2, [r3, r7]
		taskYIELD();
 8009532:	f006 fc09 	bl	800fd48 <vPortYield>
		ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8009536:	2101      	movs	r1, #1
 8009538:	4249      	negs	r1, r1
 800953a:	2001      	movs	r0, #1
 800953c:	f006 f928 	bl	800f790 <ulTaskNotifyTake>
		if (messageLength[port-1])
 8009540:	4bbd      	ldr	r3, [pc, #756]	; (8009838 <PxMessagingTask+0x398>)
 8009542:	5d19      	ldrb	r1, [r3, r4]
 8009544:	2900      	cmp	r1, #0
 8009546:	d0df      	beq.n	8009508 <PxMessagingTask+0x68>
			if (cMessage[port-1][2]>>7) {
 8009548:	465b      	mov	r3, fp
 800954a:	781a      	ldrb	r2, [r3, #0]
 800954c:	09d3      	lsrs	r3, r2, #7
 800954e:	48bc      	ldr	r0, [pc, #752]	; (8009840 <PxMessagingTask+0x3a0>)
 8009550:	7003      	strb	r3, [r0, #0]
			dst = cMessage[port-1][0]; 
 8009552:	4bb7      	ldr	r3, [pc, #732]	; (8009830 <PxMessagingTask+0x390>)
 8009554:	5cf3      	ldrb	r3, [r6, r3]
 8009556:	4698      	mov	r8, r3
			src = cMessage[port-1][1];	
 8009558:	9b08      	ldr	r3, [sp, #32]
 800955a:	785b      	ldrb	r3, [r3, #1]
 800955c:	9307      	str	r3, [sp, #28]
			if (cMessage[port-1][2] & 0x01) {						// 1st bit (LSB) Extended options - TODO handle extended options case
 800955e:	2301      	movs	r3, #1
 8009560:	4013      	ands	r3, r2
			shift = 0;
 8009562:	9306      	str	r3, [sp, #24]
			BOS.trace = (traceOptions_t)((cMessage[port-1][2]>>2)&0x03);	// 3rd-4th bits Trace 
 8009564:	4db7      	ldr	r5, [pc, #732]	; (8009844 <PxMessagingTask+0x3a4>)
 8009566:	0710      	lsls	r0, r2, #28
 8009568:	0f80      	lsrs	r0, r0, #30
 800956a:	71e8      	strb	r0, [r5, #7]
			BOS.response = (cMessage[port-1][2])&0x60;									// 6th-7th bits Response mode
 800956c:	2060      	movs	r0, #96	; 0x60
 800956e:	4010      	ands	r0, r2
 8009570:	71a8      	strb	r0, [r5, #6]
			if (extendCode == true) {		
 8009572:	0792      	lsls	r2, r2, #30
 8009574:	d5ba      	bpl.n	80094ec <PxMessagingTask+0x4c>
				code = ( ( (uint16_t) cMessage[port-1][4+shift] << 8 ) + cMessage[port-1][3+shift] );	
 8009576:	4aae      	ldr	r2, [pc, #696]	; (8009830 <PxMessagingTask+0x390>)
 8009578:	1992      	adds	r2, r2, r6
 800957a:	18d2      	adds	r2, r2, r3
 800957c:	7910      	ldrb	r0, [r2, #4]
 800957e:	0200      	lsls	r0, r0, #8
 8009580:	78d2      	ldrb	r2, [r2, #3]
 8009582:	1812      	adds	r2, r2, r0
 8009584:	b292      	uxth	r2, r2
 8009586:	4691      	mov	r9, r2
				++shift;
 8009588:	3301      	adds	r3, #1
 800958a:	9306      	str	r3, [sp, #24]
			if ( ( dst && (dst < BOS_MULTICAST) && (dst != myID) && (myID != 1) ) || 
 800958c:	4643      	mov	r3, r8
 800958e:	3b01      	subs	r3, #1
 8009590:	b2db      	uxtb	r3, r3
 8009592:	2bfc      	cmp	r3, #252	; 0xfc
 8009594:	d826      	bhi.n	80095e4 <PxMessagingTask+0x144>
 8009596:	4bac      	ldr	r3, [pc, #688]	; (8009848 <PxMessagingTask+0x3a8>)
 8009598:	781b      	ldrb	r3, [r3, #0]
 800959a:	4543      	cmp	r3, r8
 800959c:	d06d      	beq.n	800967a <PxMessagingTask+0x1da>
 800959e:	2b01      	cmp	r3, #1
 80095a0:	d101      	bne.n	80095a6 <PxMessagingTask+0x106>
 80095a2:	f001 fa92 	bl	800aaca <PxMessagingTask+0x162a>
				ForwardReceivedMessage(port);
 80095a6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80095a8:	f7ff fc32 	bl	8008e10 <ForwardReceivedMessage>
				if (BOS.trace)
 80095ac:	4ba5      	ldr	r3, [pc, #660]	; (8009844 <PxMessagingTask+0x3a4>)
 80095ae:	79db      	ldrb	r3, [r3, #7]
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d0a4      	beq.n	80094fe <PxMessagingTask+0x5e>
 80095b4:	e7a0      	b.n	80094f8 <PxMessagingTask+0x58>
						Delay_ms(100); remoteBootloaderUpdate(src, dst, port, 0);								
 80095b6:	2064      	movs	r0, #100	; 0x64
 80095b8:	f006 fd40 	bl	801003c <HAL_Delay>
 80095bc:	2300      	movs	r3, #0
 80095be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80095c0:	4641      	mov	r1, r8
 80095c2:	9807      	ldr	r0, [sp, #28]
 80095c4:	f7fa f9c4 	bl	8003950 <remoteBootloaderUpdate>
 80095c8:	e79e      	b.n	8009508 <PxMessagingTask+0x68>
						Delay_ms(100); remoteBootloaderUpdate(src, dst, port, cMessage[port-1][shift]);								
 80095ca:	2064      	movs	r0, #100	; 0x64
 80095cc:	f006 fd36 	bl	801003c <HAL_Delay>
 80095d0:	4b97      	ldr	r3, [pc, #604]	; (8009830 <PxMessagingTask+0x390>)
 80095d2:	199b      	adds	r3, r3, r6
 80095d4:	9a06      	ldr	r2, [sp, #24]
 80095d6:	5c9b      	ldrb	r3, [r3, r2]
 80095d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80095da:	4641      	mov	r1, r8
 80095dc:	9807      	ldr	r0, [sp, #28]
 80095de:	f7fa f9b7 	bl	8003950 <remoteBootloaderUpdate>
 80095e2:	e791      	b.n	8009508 <PxMessagingTask+0x68>
				if (dst == BOS_BROADCAST && cMessage[port-1][messageLength[port-1]-1] != bcastLastID) 
 80095e4:	4643      	mov	r3, r8
 80095e6:	2bff      	cmp	r3, #255	; 0xff
 80095e8:	d03c      	beq.n	8009664 <PxMessagingTask+0x1c4>
				if (dst == BOS_MULTICAST && cMessage[port-1][messageLength[port-1]-1] != bcastLastID) 
 80095ea:	2bfe      	cmp	r3, #254	; 0xfe
 80095ec:	d145      	bne.n	800967a <PxMessagingTask+0x1da>
 80095ee:	4b90      	ldr	r3, [pc, #576]	; (8009830 <PxMessagingTask+0x390>)
 80095f0:	199b      	adds	r3, r3, r6
 80095f2:	1859      	adds	r1, r3, r1
 80095f4:	3901      	subs	r1, #1
 80095f6:	780b      	ldrb	r3, [r1, #0]
 80095f8:	4a94      	ldr	r2, [pc, #592]	; (800984c <PxMessagingTask+0x3ac>)
 80095fa:	7812      	ldrb	r2, [r2, #0]
					result = BOS_ERR_MSG_Reflection;
 80095fc:	2103      	movs	r1, #3
 80095fe:	468a      	mov	sl, r1
				if (dst == BOS_MULTICAST && cMessage[port-1][messageLength[port-1]-1] != bcastLastID) 
 8009600:	429a      	cmp	r2, r3
 8009602:	d086      	beq.n	8009512 <PxMessagingTask+0x72>
					bcastID = bcastLastID = cMessage[port-1][messageLength[port-1]-1];			// Store bcastID 		
 8009604:	4a91      	ldr	r2, [pc, #580]	; (800984c <PxMessagingTask+0x3ac>)
 8009606:	7013      	strb	r3, [r2, #0]
 8009608:	4a91      	ldr	r2, [pc, #580]	; (8009850 <PxMessagingTask+0x3b0>)
 800960a:	7013      	strb	r3, [r2, #0]
					BroadcastReceivedMessage(BOS_MULTICAST, port);
 800960c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800960e:	20fe      	movs	r0, #254	; 0xfe
 8009610:	f7ff fc1e 	bl	8008e50 <BroadcastReceivedMessage>
					cMessage[port-1][messageLength[port-1]-1] = 0;								// Reset bcastID location 
 8009614:	4b88      	ldr	r3, [pc, #544]	; (8009838 <PxMessagingTask+0x398>)
 8009616:	5d19      	ldrb	r1, [r3, r4]
 8009618:	4b85      	ldr	r3, [pc, #532]	; (8009830 <PxMessagingTask+0x390>)
 800961a:	199b      	adds	r3, r3, r6
 800961c:	185b      	adds	r3, r3, r1
 800961e:	1e5a      	subs	r2, r3, #1
 8009620:	2000      	movs	r0, #0
 8009622:	7010      	strb	r0, [r2, #0]
					temp = cMessage[port-1][messageLength[port-1]-2];							// Number of members in this multicast group - TODO breaks when message is 14 length and padded
 8009624:	3b02      	subs	r3, #2
 8009626:	781a      	ldrb	r2, [r3, #0]
 8009628:	920b      	str	r2, [sp, #44]	; 0x2c
					for(i=0 ; i<temp ; i++)
 800962a:	2a00      	cmp	r2, #0
 800962c:	d101      	bne.n	8009632 <PxMessagingTask+0x192>
 800962e:	f001 fa3b 	bl	800aaa8 <PxMessagingTask+0x1608>
						if (myID == cMessage[port-1][messageLength[port-1]-2-temp+i]) {
 8009632:	4b85      	ldr	r3, [pc, #532]	; (8009848 <PxMessagingTask+0x3a8>)
 8009634:	781b      	ldrb	r3, [r3, #0]
 8009636:	469c      	mov	ip, r3
 8009638:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800963a:	18c8      	adds	r0, r1, r3
 800963c:	1a80      	subs	r0, r0, r2
 800963e:	3802      	subs	r0, #2
 8009640:	4b7b      	ldr	r3, [pc, #492]	; (8009830 <PxMessagingTask+0x390>)
 8009642:	18c0      	adds	r0, r0, r3
 8009644:	2300      	movs	r3, #0
 8009646:	4665      	mov	r5, ip
 8009648:	468c      	mov	ip, r1
 800964a:	0011      	movs	r1, r2
 800964c:	5cc2      	ldrb	r2, [r0, r3]
 800964e:	42aa      	cmp	r2, r5
 8009650:	d101      	bne.n	8009656 <PxMessagingTask+0x1b6>
 8009652:	f001 fa21 	bl	800aa98 <PxMessagingTask+0x15f8>
					for(i=0 ; i<temp ; i++)
 8009656:	3301      	adds	r3, #1
 8009658:	b2da      	uxtb	r2, r3
 800965a:	428a      	cmp	r2, r1
 800965c:	d3f6      	bcc.n	800964c <PxMessagingTask+0x1ac>
					result = BOS_ERR_WrongID;
 800965e:	2366      	movs	r3, #102	; 0x66
 8009660:	469a      	mov	sl, r3
 8009662:	e756      	b.n	8009512 <PxMessagingTask+0x72>
				if (dst == BOS_BROADCAST && cMessage[port-1][messageLength[port-1]-1] != bcastLastID) 
 8009664:	4b72      	ldr	r3, [pc, #456]	; (8009830 <PxMessagingTask+0x390>)
 8009666:	199b      	adds	r3, r3, r6
 8009668:	1859      	adds	r1, r3, r1
 800966a:	3901      	subs	r1, #1
 800966c:	780b      	ldrb	r3, [r1, #0]
 800966e:	4a77      	ldr	r2, [pc, #476]	; (800984c <PxMessagingTask+0x3ac>)
 8009670:	7812      	ldrb	r2, [r2, #0]
 8009672:	429a      	cmp	r2, r3
 8009674:	d115      	bne.n	80096a2 <PxMessagingTask+0x202>
					result = BOS_ERR_MSG_Reflection;
 8009676:	2303      	movs	r3, #3
 8009678:	469a      	mov	sl, r3
				if (result == BOS_OK)
 800967a:	4653      	mov	r3, sl
 800967c:	2b00      	cmp	r3, #0
 800967e:	d000      	beq.n	8009682 <PxMessagingTask+0x1e2>
 8009680:	e742      	b.n	8009508 <PxMessagingTask+0x68>
				shift += 4;
 8009682:	9d06      	ldr	r5, [sp, #24]
 8009684:	3504      	adds	r5, #4
				numOfParams = messageLength[port-1] - shift;
 8009686:	4b6c      	ldr	r3, [pc, #432]	; (8009838 <PxMessagingTask+0x398>)
 8009688:	5d19      	ldrb	r1, [r3, r4]
 800968a:	1b48      	subs	r0, r1, r5
 800968c:	b2c3      	uxtb	r3, r0
 800968e:	469a      	mov	sl, r3
					switch (code)
 8009690:	464b      	mov	r3, r9
 8009692:	2b23      	cmp	r3, #35	; 0x23
 8009694:	d901      	bls.n	800969a <PxMessagingTask+0x1fa>
 8009696:	f001 f9cc 	bl	800aa32 <PxMessagingTask+0x1592>
 800969a:	009b      	lsls	r3, r3, #2
 800969c:	4a6d      	ldr	r2, [pc, #436]	; (8009854 <PxMessagingTask+0x3b4>)
 800969e:	58d3      	ldr	r3, [r2, r3]
 80096a0:	469f      	mov	pc, r3
					bcastID = bcastLastID = cMessage[port-1][messageLength[port-1]-1];			// Store bcastID 		
 80096a2:	4a6a      	ldr	r2, [pc, #424]	; (800984c <PxMessagingTask+0x3ac>)
 80096a4:	7013      	strb	r3, [r2, #0]
 80096a6:	4a6a      	ldr	r2, [pc, #424]	; (8009850 <PxMessagingTask+0x3b0>)
 80096a8:	7013      	strb	r3, [r2, #0]
					BroadcastReceivedMessage(BOS_BROADCAST, port);
 80096aa:	9909      	ldr	r1, [sp, #36]	; 0x24
 80096ac:	20ff      	movs	r0, #255	; 0xff
 80096ae:	f7ff fbcf 	bl	8008e50 <BroadcastReceivedMessage>
					cMessage[port-1][messageLength[port-1]-1] = 0;								// Reset bcastID location 
 80096b2:	4b61      	ldr	r3, [pc, #388]	; (8009838 <PxMessagingTask+0x398>)
 80096b4:	5d1a      	ldrb	r2, [r3, r4]
 80096b6:	4b5e      	ldr	r3, [pc, #376]	; (8009830 <PxMessagingTask+0x390>)
 80096b8:	199b      	adds	r3, r3, r6
 80096ba:	189b      	adds	r3, r3, r2
 80096bc:	3b01      	subs	r3, #1
 80096be:	2200      	movs	r2, #0
 80096c0:	701a      	strb	r2, [r3, #0]
 80096c2:	e7da      	b.n	800967a <PxMessagingTask+0x1da>
							for (p=0 ; p<numOfParams ; p++) 
 80096c4:	4653      	mov	r3, sl
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d022      	beq.n	8009710 <PxMessagingTask+0x270>
								arrayPortsDir[src-1] |= (0x8000>>((cMessage[port-1][shift+p])-1));								
 80096ca:	9b07      	ldr	r3, [sp, #28]
 80096cc:	3b01      	subs	r3, #1
 80096ce:	469c      	mov	ip, r3
 80096d0:	005a      	lsls	r2, r3, #1
 80096d2:	4b61      	ldr	r3, [pc, #388]	; (8009858 <PxMessagingTask+0x3b8>)
 80096d4:	5ad3      	ldrh	r3, [r2, r3]
 80096d6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80096d8:	4690      	mov	r8, r2
 80096da:	4445      	add	r5, r8
 80096dc:	4a54      	ldr	r2, [pc, #336]	; (8009830 <PxMessagingTask+0x390>)
 80096de:	18ad      	adds	r5, r5, r2
 80096e0:	2200      	movs	r2, #0
 80096e2:	2080      	movs	r0, #128	; 0x80
 80096e4:	0200      	lsls	r0, r0, #8
 80096e6:	46a0      	mov	r8, r4
 80096e8:	4654      	mov	r4, sl
 80096ea:	46b1      	mov	r9, r6
 80096ec:	001e      	movs	r6, r3
 80096ee:	5ca9      	ldrb	r1, [r5, r2]
 80096f0:	3901      	subs	r1, #1
 80096f2:	0003      	movs	r3, r0
 80096f4:	410b      	asrs	r3, r1
 80096f6:	431e      	orrs	r6, r3
 80096f8:	b2b6      	uxth	r6, r6
							for (p=0 ; p<numOfParams ; p++) 
 80096fa:	3201      	adds	r2, #1
 80096fc:	b2d3      	uxtb	r3, r2
 80096fe:	42a3      	cmp	r3, r4
 8009700:	d3f5      	bcc.n	80096ee <PxMessagingTask+0x24e>
 8009702:	4644      	mov	r4, r8
 8009704:	0033      	movs	r3, r6
 8009706:	464e      	mov	r6, r9
 8009708:	4662      	mov	r2, ip
 800970a:	0050      	lsls	r0, r2, #1
 800970c:	4a52      	ldr	r2, [pc, #328]	; (8009858 <PxMessagingTask+0x3b8>)
 800970e:	5283      	strh	r3, [r0, r2]
							responseStatus = BOS_OK;
 8009710:	4b52      	ldr	r3, [pc, #328]	; (800985c <PxMessagingTask+0x3bc>)
 8009712:	2200      	movs	r2, #0
 8009714:	701a      	strb	r2, [r3, #0]
							break;		
 8009716:	2300      	movs	r3, #0
 8009718:	469a      	mov	sl, r3
 800971a:	e6fa      	b.n	8009512 <PxMessagingTask+0x72>
							indMode = IND_PING;	osDelay(10);
 800971c:	4b45      	ldr	r3, [pc, #276]	; (8009834 <PxMessagingTask+0x394>)
 800971e:	2201      	movs	r2, #1
 8009720:	701a      	strb	r2, [r3, #0]
 8009722:	200a      	movs	r0, #10
 8009724:	f004 fc0b 	bl	800df3e <osDelay>
							if (BOS.response == BOS_RESPONSE_ALL || BOS.response == BOS_RESPONSE_MSG)
 8009728:	4b46      	ldr	r3, [pc, #280]	; (8009844 <PxMessagingTask+0x3a4>)
 800972a:	799b      	ldrb	r3, [r3, #6]
 800972c:	2240      	movs	r2, #64	; 0x40
 800972e:	4393      	bics	r3, r2
 8009730:	2200      	movs	r2, #0
 8009732:	4692      	mov	sl, r2
 8009734:	2b20      	cmp	r3, #32
 8009736:	d000      	beq.n	800973a <PxMessagingTask+0x29a>
 8009738:	e6eb      	b.n	8009512 <PxMessagingTask+0x72>
								SendMessageToModule(src, CODE_PING_RESPONSE, 0);	
 800973a:	2102      	movs	r1, #2
 800973c:	9807      	ldr	r0, [sp, #28]
 800973e:	f7ff fbcf 	bl	8008ee0 <SendMessageToModule>
 8009742:	e6e6      	b.n	8009512 <PxMessagingTask+0x72>
							if (!moduleAlias[myID][0])
 8009744:	4b40      	ldr	r3, [pc, #256]	; (8009848 <PxMessagingTask+0x3a8>)
 8009746:	781a      	ldrb	r2, [r3, #0]
 8009748:	0093      	lsls	r3, r2, #2
 800974a:	189b      	adds	r3, r3, r2
 800974c:	005b      	lsls	r3, r3, #1
 800974e:	4a44      	ldr	r2, [pc, #272]	; (8009860 <PxMessagingTask+0x3c0>)
 8009750:	5c9b      	ldrb	r3, [r3, r2]
 8009752:	2b00      	cmp	r3, #0
 8009754:	d118      	bne.n	8009788 <PxMessagingTask+0x2e8>
								sprintf( ( char * ) pcUserMessage, "Hi from module %d\r\n", src);
 8009756:	9a07      	ldr	r2, [sp, #28]
 8009758:	4942      	ldr	r1, [pc, #264]	; (8009864 <PxMessagingTask+0x3c4>)
 800975a:	4843      	ldr	r0, [pc, #268]	; (8009868 <PxMessagingTask+0x3c8>)
 800975c:	f00c fffe 	bl	801675c <siprintf>
							writePxMutex(PcPort, pcUserMessage, strlen(pcUserMessage), cmd50ms, HAL_MAX_DELAY);
 8009760:	4d41      	ldr	r5, [pc, #260]	; (8009868 <PxMessagingTask+0x3c8>)
 8009762:	0028      	movs	r0, r5
 8009764:	f7f6 fcd8 	bl	8000118 <strlen>
 8009768:	b282      	uxth	r2, r0
 800976a:	4b40      	ldr	r3, [pc, #256]	; (800986c <PxMessagingTask+0x3cc>)
 800976c:	7818      	ldrb	r0, [r3, #0]
 800976e:	2301      	movs	r3, #1
 8009770:	425b      	negs	r3, r3
 8009772:	9300      	str	r3, [sp, #0]
 8009774:	3333      	adds	r3, #51	; 0x33
 8009776:	0029      	movs	r1, r5
 8009778:	f004 fab2 	bl	800dce0 <writePxMutex>
							responseStatus = BOS_OK;								
 800977c:	4b37      	ldr	r3, [pc, #220]	; (800985c <PxMessagingTask+0x3bc>)
 800977e:	2200      	movs	r2, #0
 8009780:	701a      	strb	r2, [r3, #0]
							break;
 8009782:	2300      	movs	r3, #0
 8009784:	469a      	mov	sl, r3
 8009786:	e6c4      	b.n	8009512 <PxMessagingTask+0x72>
								sprintf( ( char * ) pcUserMessage, "Hi from module %d (%s)\r\n", src, moduleAlias[src]);
 8009788:	230a      	movs	r3, #10
 800978a:	9907      	ldr	r1, [sp, #28]
 800978c:	434b      	muls	r3, r1
 800978e:	4a34      	ldr	r2, [pc, #208]	; (8009860 <PxMessagingTask+0x3c0>)
 8009790:	189b      	adds	r3, r3, r2
 8009792:	000a      	movs	r2, r1
 8009794:	4936      	ldr	r1, [pc, #216]	; (8009870 <PxMessagingTask+0x3d0>)
 8009796:	4834      	ldr	r0, [pc, #208]	; (8009868 <PxMessagingTask+0x3c8>)
 8009798:	f00c ffe0 	bl	801675c <siprintf>
 800979c:	e7e0      	b.n	8009760 <PxMessagingTask+0x2c0>
							IND_ON();
 800979e:	2180      	movs	r1, #128	; 0x80
 80097a0:	2090      	movs	r0, #144	; 0x90
 80097a2:	2201      	movs	r2, #1
 80097a4:	0109      	lsls	r1, r1, #4
 80097a6:	05c0      	lsls	r0, r0, #23
 80097a8:	f007 fd2a 	bl	8011200 <HAL_GPIO_WritePin>
							break;
 80097ac:	2300      	movs	r3, #0
 80097ae:	469a      	mov	sl, r3
 80097b0:	e6af      	b.n	8009512 <PxMessagingTask+0x72>
							IND_OFF();
 80097b2:	2180      	movs	r1, #128	; 0x80
 80097b4:	2090      	movs	r0, #144	; 0x90
 80097b6:	2200      	movs	r2, #0
 80097b8:	0109      	lsls	r1, r1, #4
 80097ba:	05c0      	lsls	r0, r0, #23
 80097bc:	f007 fd20 	bl	8011200 <HAL_GPIO_WritePin>
							break;
 80097c0:	2300      	movs	r3, #0
 80097c2:	469a      	mov	sl, r3
 80097c4:	e6a5      	b.n	8009512 <PxMessagingTask+0x72>
							IND_toggle();
 80097c6:	2180      	movs	r1, #128	; 0x80
 80097c8:	2090      	movs	r0, #144	; 0x90
 80097ca:	0109      	lsls	r1, r1, #4
 80097cc:	05c0      	lsls	r0, r0, #23
 80097ce:	f007 fd1d 	bl	801120c <HAL_GPIO_TogglePin>
							break;
 80097d2:	2300      	movs	r3, #0
 80097d4:	469a      	mov	sl, r3
 80097d6:	e69c      	b.n	8009512 <PxMessagingTask+0x72>
							neighbors[port-1][0] = ( (uint16_t) src << 8 ) + cMessage[port-1][2+shift];			/* Neighbor ID + Neighbor own port */
 80097d8:	4b26      	ldr	r3, [pc, #152]	; (8009874 <PxMessagingTask+0x3d4>)
 80097da:	469c      	mov	ip, r3
 80097dc:	00a3      	lsls	r3, r4, #2
 80097de:	4a14      	ldr	r2, [pc, #80]	; (8009830 <PxMessagingTask+0x390>)
 80097e0:	4691      	mov	r9, r2
 80097e2:	44b1      	add	r9, r6
 80097e4:	464a      	mov	r2, r9
 80097e6:	1950      	adds	r0, r2, r5
 80097e8:	7881      	ldrb	r1, [r0, #2]
 80097ea:	4688      	mov	r8, r1
 80097ec:	9907      	ldr	r1, [sp, #28]
 80097ee:	0209      	lsls	r1, r1, #8
 80097f0:	4441      	add	r1, r8
 80097f2:	4662      	mov	r2, ip
 80097f4:	5299      	strh	r1, [r3, r2]
							neighbors[port-1][1] = ( (uint16_t) cMessage[port-1][shift] << 8 ) + cMessage[port-1][1+shift];		/* Neighbor PN */
 80097f6:	4463      	add	r3, ip
 80097f8:	464a      	mov	r2, r9
 80097fa:	5d51      	ldrb	r1, [r2, r5]
 80097fc:	0209      	lsls	r1, r1, #8
 80097fe:	7842      	ldrb	r2, [r0, #1]
 8009800:	1852      	adds	r2, r2, r1
 8009802:	805a      	strh	r2, [r3, #2]
							messageParams[1] = (uint8_t) myPN;
 8009804:	4b1c      	ldr	r3, [pc, #112]	; (8009878 <PxMessagingTask+0x3d8>)
 8009806:	881b      	ldrh	r3, [r3, #0]
 8009808:	4a1c      	ldr	r2, [pc, #112]	; (800987c <PxMessagingTask+0x3dc>)
 800980a:	7053      	strb	r3, [r2, #1]
							messageParams[0] = (uint8_t) (myPN >> 8);	
 800980c:	0a1b      	lsrs	r3, r3, #8
 800980e:	7013      	strb	r3, [r2, #0]
							messageParams[2] = port;
 8009810:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8009812:	7095      	strb	r5, [r2, #2]
							osDelay(2);
 8009814:	2002      	movs	r0, #2
 8009816:	f004 fb92 	bl	800df3e <osDelay>
							SendMessageFromPort(port, 0, 0, CODE_HI_RESPONSE, 3);
 800981a:	2303      	movs	r3, #3
 800981c:	9300      	str	r3, [sp, #0]
 800981e:	3308      	adds	r3, #8
 8009820:	2200      	movs	r2, #0
 8009822:	2100      	movs	r1, #0
 8009824:	0028      	movs	r0, r5
 8009826:	f7ff f931 	bl	8008a8c <SendMessageFromPort>
							break;
 800982a:	2300      	movs	r3, #0
 800982c:	469a      	mov	sl, r3
 800982e:	e670      	b.n	8009512 <PxMessagingTask+0x72>
 8009830:	200007d8 	.word	0x200007d8
 8009834:	2000098a 	.word	0x2000098a
 8009838:	200009c8 	.word	0x200009c8
 800983c:	20000b80 	.word	0x20000b80
 8009840:	2000098b 	.word	0x2000098b
 8009844:	20006368 	.word	0x20006368
 8009848:	20000b04 	.word	0x20000b04
 800984c:	20000fb2 	.word	0x20000fb2
 8009850:	20000786 	.word	0x20000786
 8009854:	0801c1e8 	.word	0x0801c1e8
 8009858:	200068e4 	.word	0x200068e4
 800985c:	20000b98 	.word	0x20000b98
 8009860:	20000a00 	.word	0x20000a00
 8009864:	0801b10c 	.word	0x0801b10c
 8009868:	200010fc 	.word	0x200010fc
 800986c:	2000055f 	.word	0x2000055f
 8009870:	0801b120 	.word	0x0801b120
 8009874:	20000b08 	.word	0x20000b08
 8009878:	20000050 	.word	0x20000050
 800987c:	200009d0 	.word	0x200009d0
							neighbors[port-1][0] = ( (uint16_t) src << 8 ) + cMessage[port-1][2+shift];		/* Neighbor ID + Neighbor own port */
 8009880:	4bd7      	ldr	r3, [pc, #860]	; (8009be0 <PxMessagingTask+0x740>)
 8009882:	469c      	mov	ip, r3
 8009884:	00a3      	lsls	r3, r4, #2
 8009886:	4ad7      	ldr	r2, [pc, #860]	; (8009be4 <PxMessagingTask+0x744>)
 8009888:	4691      	mov	r9, r2
 800988a:	44b1      	add	r9, r6
 800988c:	464a      	mov	r2, r9
 800988e:	1950      	adds	r0, r2, r5
 8009890:	7881      	ldrb	r1, [r0, #2]
 8009892:	4688      	mov	r8, r1
 8009894:	9907      	ldr	r1, [sp, #28]
 8009896:	0209      	lsls	r1, r1, #8
 8009898:	4441      	add	r1, r8
 800989a:	4662      	mov	r2, ip
 800989c:	5299      	strh	r1, [r3, r2]
							neighbors[port-1][1] = ( (uint16_t) cMessage[port-1][shift] << 8 ) + cMessage[port-1][1+shift];		/* Neighbor PN */	
 800989e:	4463      	add	r3, ip
 80098a0:	464a      	mov	r2, r9
 80098a2:	5d51      	ldrb	r1, [r2, r5]
 80098a4:	0209      	lsls	r1, r1, #8
 80098a6:	7842      	ldrb	r2, [r0, #1]
 80098a8:	1852      	adds	r2, r2, r1
 80098aa:	805a      	strh	r2, [r3, #2]
							responseStatus = BOS_OK;
 80098ac:	4bce      	ldr	r3, [pc, #824]	; (8009be8 <PxMessagingTask+0x748>)
 80098ae:	2200      	movs	r2, #0
 80098b0:	701a      	strb	r2, [r3, #0]
							break;
 80098b2:	2300      	movs	r3, #0
 80098b4:	469a      	mov	sl, r3
 80098b6:	e62c      	b.n	8009512 <PxMessagingTask+0x72>
							ExploreNeighbors(port);	indMode = IND_TOPOLOGY;
 80098b8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80098ba:	f7f9 febb 	bl	8003634 <ExploreNeighbors>
 80098be:	4bcb      	ldr	r3, [pc, #812]	; (8009bec <PxMessagingTask+0x74c>)
 80098c0:	2202      	movs	r2, #2
 80098c2:	701a      	strb	r2, [r3, #0]
							osDelay(10); temp = 0;
 80098c4:	200a      	movs	r0, #10
 80098c6:	f004 fb3a 	bl	800df3e <osDelay>
							for (uint8_t p=1 ; p<=NumOfPorts ; p++)  
 80098ca:	4bc5      	ldr	r3, [pc, #788]	; (8009be0 <PxMessagingTask+0x740>)
 80098cc:	4698      	mov	r8, r3
 80098ce:	2501      	movs	r5, #1
							osDelay(10); temp = 0;
 80098d0:	2300      	movs	r3, #0
									messageParams[temp] = p;
 80098d2:	4642      	mov	r2, r8
 80098d4:	46a0      	mov	r8, r4
 80098d6:	46b1      	mov	r9, r6
 80098d8:	001e      	movs	r6, r3
 80098da:	0014      	movs	r4, r2
 80098dc:	e00f      	b.n	80098fe <PxMessagingTask+0x45e>
 80098de:	4bc4      	ldr	r3, [pc, #784]	; (8009bf0 <PxMessagingTask+0x750>)
 80098e0:	559d      	strb	r5, [r3, r6]
									memcpy(messageParams+temp+1, neighbors[p-1], (size_t)(4));
 80098e2:	1c70      	adds	r0, r6, #1
 80098e4:	469c      	mov	ip, r3
 80098e6:	4460      	add	r0, ip
 80098e8:	2204      	movs	r2, #4
 80098ea:	0021      	movs	r1, r4
 80098ec:	f00c fe22 	bl	8016534 <memcpy>
									temp += 5;		
 80098f0:	3605      	adds	r6, #5
 80098f2:	b2f6      	uxtb	r6, r6
							for (uint8_t p=1 ; p<=NumOfPorts ; p++)  
 80098f4:	3501      	adds	r5, #1
 80098f6:	b2ed      	uxtb	r5, r5
 80098f8:	3404      	adds	r4, #4
 80098fa:	2d06      	cmp	r5, #6
 80098fc:	d003      	beq.n	8009906 <PxMessagingTask+0x466>
								if (neighbors[p-1][0])
 80098fe:	8823      	ldrh	r3, [r4, #0]
 8009900:	2b00      	cmp	r3, #0
 8009902:	d0f7      	beq.n	80098f4 <PxMessagingTask+0x454>
 8009904:	e7eb      	b.n	80098de <PxMessagingTask+0x43e>
 8009906:	4644      	mov	r4, r8
 8009908:	0033      	movs	r3, r6
 800990a:	960b      	str	r6, [sp, #44]	; 0x2c
 800990c:	464e      	mov	r6, r9
							SendMessageToModule(src, CODE_EXPLORE_ADJ_RESPONSE, temp);
 800990e:	b29a      	uxth	r2, r3
 8009910:	210d      	movs	r1, #13
 8009912:	9807      	ldr	r0, [sp, #28]
 8009914:	f7ff fae4 	bl	8008ee0 <SendMessageToModule>
							break;
 8009918:	2300      	movs	r3, #0
 800991a:	469a      	mov	sl, r3
 800991c:	e5f9      	b.n	8009512 <PxMessagingTask+0x72>
							temp = numOfParams/5;
 800991e:	2105      	movs	r1, #5
 8009920:	4650      	mov	r0, sl
 8009922:	f7f6 fc15 	bl	8000150 <__udivsi3>
 8009926:	b2c2      	uxtb	r2, r0
 8009928:	920b      	str	r2, [sp, #44]	; 0x2c
							for (uint8_t k=0 ; k<temp ; k++)  {
 800992a:	4653      	mov	r3, sl
 800992c:	2b04      	cmp	r3, #4
 800992e:	d921      	bls.n	8009974 <PxMessagingTask+0x4d4>
 8009930:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009932:	1c4b      	adds	r3, r1, #1
 8009934:	195d      	adds	r5, r3, r5
 8009936:	4bab      	ldr	r3, [pc, #684]	; (8009be4 <PxMessagingTask+0x744>)
 8009938:	46a8      	mov	r8, r5
 800993a:	4498      	add	r8, r3
 800993c:	2500      	movs	r5, #0
								memcpy(&neighbors2[(cMessage[port-1][shift+k*5])-1][0], &cMessage[port-1][1+shift+k*5], (size_t)(4));
 800993e:	4bad      	ldr	r3, [pc, #692]	; (8009bf4 <PxMessagingTask+0x754>)
 8009940:	4699      	mov	r9, r3
 8009942:	4643      	mov	r3, r8
 8009944:	46a0      	mov	r8, r4
 8009946:	9706      	str	r7, [sp, #24]
 8009948:	0017      	movs	r7, r2
 800994a:	46b2      	mov	sl, r6
 800994c:	000e      	movs	r6, r1
 800994e:	001c      	movs	r4, r3
 8009950:	1ba3      	subs	r3, r4, r6
 8009952:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009954:	5c98      	ldrb	r0, [r3, r2]
 8009956:	3801      	subs	r0, #1
 8009958:	0080      	lsls	r0, r0, #2
 800995a:	4448      	add	r0, r9
 800995c:	2204      	movs	r2, #4
 800995e:	0021      	movs	r1, r4
 8009960:	f00c fde8 	bl	8016534 <memcpy>
							for (uint8_t k=0 ; k<temp ; k++)  {
 8009964:	3501      	adds	r5, #1
 8009966:	b2ed      	uxtb	r5, r5
 8009968:	3405      	adds	r4, #5
 800996a:	42af      	cmp	r7, r5
 800996c:	d8f0      	bhi.n	8009950 <PxMessagingTask+0x4b0>
 800996e:	4644      	mov	r4, r8
 8009970:	9f06      	ldr	r7, [sp, #24]
 8009972:	4656      	mov	r6, sl
							responseStatus = BOS_OK;
 8009974:	4b9c      	ldr	r3, [pc, #624]	; (8009be8 <PxMessagingTask+0x748>)
 8009976:	2200      	movs	r2, #0
 8009978:	701a      	strb	r2, [r3, #0]
							break;
 800997a:	2300      	movs	r3, #0
 800997c:	469a      	mov	sl, r3
 800997e:	e5c8      	b.n	8009512 <PxMessagingTask+0x72>
 8009980:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009982:	18eb      	adds	r3, r5, r3
 8009984:	3b01      	subs	r3, #1
 8009986:	4a97      	ldr	r2, [pc, #604]	; (8009be4 <PxMessagingTask+0x744>)
 8009988:	4699      	mov	r9, r3
 800998a:	4491      	add	r9, r2
							for (uint8_t k=0 ; k<temp ; k++)  {
 800998c:	2301      	movs	r3, #1
 800998e:	46a0      	mov	r8, r4
 8009990:	46b2      	mov	sl, r6
 8009992:	464e      	mov	r6, r9
 8009994:	46a9      	mov	r9, r5
 8009996:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8009998:	001c      	movs	r4, r3
 800999a:	e002      	b.n	80099a2 <PxMessagingTask+0x502>
							for (uint8_t p=1 ; p<=NumOfPorts ; p++) {
 800999c:	3401      	adds	r4, #1
 800999e:	2c06      	cmp	r4, #6
 80099a0:	d008      	beq.n	80099b4 <PxMessagingTask+0x514>
 80099a2:	b2e0      	uxtb	r0, r4
								if (p != port)	SwapUartPins(GetUart(p), cMessage[port-1][shift+p-1]); 
 80099a4:	42a8      	cmp	r0, r5
 80099a6:	d0f9      	beq.n	800999c <PxMessagingTask+0x4fc>
 80099a8:	f004 f97c 	bl	800dca4 <GetUart>
 80099ac:	5d31      	ldrb	r1, [r6, r4]
 80099ae:	f004 fa11 	bl	800ddd4 <SwapUartPins>
 80099b2:	e7f3      	b.n	800999c <PxMessagingTask+0x4fc>
 80099b4:	4644      	mov	r4, r8
 80099b6:	464d      	mov	r5, r9
 80099b8:	4656      	mov	r6, sl
							SwapUartPins(GetUart(port), cMessage[port-1][shift+MaxNumOfPorts]);
 80099ba:	9809      	ldr	r0, [sp, #36]	; 0x24
 80099bc:	f004 f972 	bl	800dca4 <GetUart>
 80099c0:	4b88      	ldr	r3, [pc, #544]	; (8009be4 <PxMessagingTask+0x744>)
 80099c2:	199b      	adds	r3, r3, r6
 80099c4:	195d      	adds	r5, r3, r5
 80099c6:	7aa9      	ldrb	r1, [r5, #10]
 80099c8:	f004 fa04 	bl	800ddd4 <SwapUartPins>
							break;
 80099cc:	2300      	movs	r3, #0
 80099ce:	469a      	mov	sl, r3
 80099d0:	e59f      	b.n	8009512 <PxMessagingTask+0x72>
							if (cMessage[port-1][shift] == 0)						/* Change my own ID */
 80099d2:	002a      	movs	r2, r5
 80099d4:	4b83      	ldr	r3, [pc, #524]	; (8009be4 <PxMessagingTask+0x744>)
 80099d6:	199b      	adds	r3, r3, r6
 80099d8:	5d5b      	ldrb	r3, [r3, r5]
 80099da:	469a      	mov	sl, r3
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d108      	bne.n	80099f2 <PxMessagingTask+0x552>
								myID = cMessage[port-1][1+shift];
 80099e0:	2238      	movs	r2, #56	; 0x38
 80099e2:	4362      	muls	r2, r4
 80099e4:	4b7f      	ldr	r3, [pc, #508]	; (8009be4 <PxMessagingTask+0x744>)
 80099e6:	189b      	adds	r3, r3, r2
 80099e8:	195d      	adds	r5, r3, r5
 80099ea:	786a      	ldrb	r2, [r5, #1]
 80099ec:	4b82      	ldr	r3, [pc, #520]	; (8009bf8 <PxMessagingTask+0x758>)
 80099ee:	701a      	strb	r2, [r3, #0]
 80099f0:	e58f      	b.n	8009512 <PxMessagingTask+0x72>
							else if (cMessage[port-1][shift] == 1) {		/* Change my neighbor's ID */
 80099f2:	2b01      	cmp	r3, #1
 80099f4:	d002      	beq.n	80099fc <PxMessagingTask+0x55c>
 80099f6:	2300      	movs	r3, #0
 80099f8:	469a      	mov	sl, r3
 80099fa:	e58a      	b.n	8009512 <PxMessagingTask+0x72>
								messageParams[0] = 0;											/* change own ID */
 80099fc:	497c      	ldr	r1, [pc, #496]	; (8009bf0 <PxMessagingTask+0x750>)
 80099fe:	2500      	movs	r5, #0
 8009a00:	700d      	strb	r5, [r1, #0]
								messageParams[1] = cMessage[port-1][1+shift];		/* The new ID */
 8009a02:	2038      	movs	r0, #56	; 0x38
 8009a04:	4360      	muls	r0, r4
 8009a06:	4b77      	ldr	r3, [pc, #476]	; (8009be4 <PxMessagingTask+0x744>)
 8009a08:	181b      	adds	r3, r3, r0
 8009a0a:	189b      	adds	r3, r3, r2
 8009a0c:	785a      	ldrb	r2, [r3, #1]
 8009a0e:	704a      	strb	r2, [r1, #1]
								SendMessageFromPort(cMessage[port-1][2+shift], 0, 0, CODE_MODULE_ID, 3);
 8009a10:	7898      	ldrb	r0, [r3, #2]
 8009a12:	2303      	movs	r3, #3
 8009a14:	9300      	str	r3, [sp, #0]
 8009a16:	330d      	adds	r3, #13
 8009a18:	002a      	movs	r2, r5
 8009a1a:	0029      	movs	r1, r5
 8009a1c:	f7ff f836 	bl	8008a8c <SendMessageFromPort>
 8009a20:	46aa      	mov	sl, r5
 8009a22:	e576      	b.n	8009512 <PxMessagingTask+0x72>
							if (longMessage) {
 8009a24:	4b75      	ldr	r3, [pc, #468]	; (8009bfc <PxMessagingTask+0x75c>)
 8009a26:	781b      	ldrb	r3, [r3, #0]
 8009a28:	4698      	mov	r8, r3
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d014      	beq.n	8009a58 <PxMessagingTask+0x5b8>
								memcpy(&longMessageScratchpad[0]+longMessageLastPtr, &cMessage[port-1][shift], (size_t) numOfParams );	
 8009a2e:	4b74      	ldr	r3, [pc, #464]	; (8009c00 <PxMessagingTask+0x760>)
 8009a30:	4699      	mov	r9, r3
 8009a32:	881b      	ldrh	r3, [r3, #0]
 8009a34:	4698      	mov	r8, r3
 8009a36:	4873      	ldr	r0, [pc, #460]	; (8009c04 <PxMessagingTask+0x764>)
 8009a38:	4440      	add	r0, r8
 8009a3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009a3c:	469c      	mov	ip, r3
 8009a3e:	4465      	add	r5, ip
 8009a40:	4968      	ldr	r1, [pc, #416]	; (8009be4 <PxMessagingTask+0x744>)
 8009a42:	1869      	adds	r1, r5, r1
 8009a44:	4652      	mov	r2, sl
 8009a46:	f00c fd75 	bl	8016534 <memcpy>
								longMessageLastPtr += numOfParams;
 8009a4a:	4645      	mov	r5, r8
 8009a4c:	4455      	add	r5, sl
 8009a4e:	464b      	mov	r3, r9
 8009a50:	801d      	strh	r5, [r3, #0]
 8009a52:	2300      	movs	r3, #0
 8009a54:	469a      	mov	sl, r3
 8009a56:	e55c      	b.n	8009512 <PxMessagingTask+0x72>
								memcpy(&longMessageScratchpad[0]+longMessageLastPtr, &cMessage[port-1][shift], (size_t) numOfParams );
 8009a58:	4b69      	ldr	r3, [pc, #420]	; (8009c00 <PxMessagingTask+0x760>)
 8009a5a:	881b      	ldrh	r3, [r3, #0]
 8009a5c:	4a69      	ldr	r2, [pc, #420]	; (8009c04 <PxMessagingTask+0x764>)
 8009a5e:	4691      	mov	r9, r2
 8009a60:	9306      	str	r3, [sp, #24]
 8009a62:	0018      	movs	r0, r3
 8009a64:	4448      	add	r0, r9
 8009a66:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009a68:	468c      	mov	ip, r1
 8009a6a:	4465      	add	r5, ip
 8009a6c:	495d      	ldr	r1, [pc, #372]	; (8009be4 <PxMessagingTask+0x744>)
 8009a6e:	1869      	adds	r1, r5, r1
 8009a70:	4652      	mov	r2, sl
 8009a72:	f00c fd5f 	bl	8016534 <memcpy>
								longMessageLastPtr += numOfParams;
 8009a76:	9b06      	ldr	r3, [sp, #24]
 8009a78:	4453      	add	r3, sl
 8009a7a:	b29d      	uxth	r5, r3
								N = (longMessageLastPtr / (MaxNumOfPorts+1)) / 2;
 8009a7c:	2116      	movs	r1, #22
 8009a7e:	0028      	movs	r0, r5
 8009a80:	f7f6 fb66 	bl	8000150 <__udivsi3>
 8009a84:	4b60      	ldr	r3, [pc, #384]	; (8009c08 <PxMessagingTask+0x768>)
 8009a86:	7018      	strb	r0, [r3, #0]
								memcpy(&array, &longMessageScratchpad, longMessageLastPtr);
 8009a88:	002a      	movs	r2, r5
 8009a8a:	4649      	mov	r1, r9
 8009a8c:	485f      	ldr	r0, [pc, #380]	; (8009c0c <PxMessagingTask+0x76c>)
 8009a8e:	f00c fd51 	bl	8016534 <memcpy>
								longMessageLastPtr = 0;
 8009a92:	2300      	movs	r3, #0
 8009a94:	4a5a      	ldr	r2, [pc, #360]	; (8009c00 <PxMessagingTask+0x760>)
 8009a96:	8013      	strh	r3, [r2, #0]
 8009a98:	46c2      	mov	sl, r8
 8009a9a:	e53a      	b.n	8009512 <PxMessagingTask+0x72>
							for (uint8_t k=0 ; k<temp ; k++)  {
 8009a9c:	2501      	movs	r5, #1
 8009a9e:	2300      	movs	r3, #0
								if (GetUart(p)->AdvancedInit.Swap == UART_ADVFEATURE_SWAP_ENABLE) {
 8009aa0:	2280      	movs	r2, #128	; 0x80
 8009aa2:	0212      	lsls	r2, r2, #8
 8009aa4:	4690      	mov	r8, r2
									messageParams[temp++] = p;
 8009aa6:	46a1      	mov	r9, r4
 8009aa8:	001c      	movs	r4, r3
 8009aaa:	e007      	b.n	8009abc <PxMessagingTask+0x61c>
 8009aac:	1c63      	adds	r3, r4, #1
 8009aae:	4a50      	ldr	r2, [pc, #320]	; (8009bf0 <PxMessagingTask+0x750>)
 8009ab0:	5515      	strb	r5, [r2, r4]
 8009ab2:	b2dc      	uxtb	r4, r3
								for (p=1 ; p<=NumOfPorts ; p++) {
 8009ab4:	3501      	adds	r5, #1
 8009ab6:	b2ed      	uxtb	r5, r5
 8009ab8:	2d06      	cmp	r5, #6
 8009aba:	d006      	beq.n	8009aca <PxMessagingTask+0x62a>
								if (GetUart(p)->AdvancedInit.Swap == UART_ADVFEATURE_SWAP_ENABLE) {
 8009abc:	0028      	movs	r0, r5
 8009abe:	f004 f8f1 	bl	800dca4 <GetUart>
 8009ac2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8009ac4:	4543      	cmp	r3, r8
 8009ac6:	d1f5      	bne.n	8009ab4 <PxMessagingTask+0x614>
 8009ac8:	e7f0      	b.n	8009aac <PxMessagingTask+0x60c>
 8009aca:	0023      	movs	r3, r4
 8009acc:	940b      	str	r4, [sp, #44]	; 0x2c
 8009ace:	464c      	mov	r4, r9
							SendMessageToModule(src, CODE_READ_PORT_DIR_RESPONSE, temp);
 8009ad0:	b29a      	uxth	r2, r3
 8009ad2:	2114      	movs	r1, #20
 8009ad4:	9807      	ldr	r0, [sp, #28]
 8009ad6:	f7ff fa03 	bl	8008ee0 <SendMessageToModule>
							break;
 8009ada:	2300      	movs	r3, #0
 8009adc:	469a      	mov	sl, r3
 8009ade:	e518      	b.n	8009512 <PxMessagingTask+0x72>
								temp32 = ( (uint32_t) cMessage[port-1][shift] << 24 ) + ( (uint32_t) cMessage[port-1][1+shift] << 16 ) + ( (uint32_t) cMessage[port-1][2+shift] << 8 ) + cMessage[port-1][3+shift];		
 8009ae0:	4b40      	ldr	r3, [pc, #256]	; (8009be4 <PxMessagingTask+0x744>)
 8009ae2:	199b      	adds	r3, r3, r6
 8009ae4:	5d5a      	ldrb	r2, [r3, r5]
 8009ae6:	0612      	lsls	r2, r2, #24
 8009ae8:	195b      	adds	r3, r3, r5
 8009aea:	78d9      	ldrb	r1, [r3, #3]
 8009aec:	1852      	adds	r2, r2, r1
 8009aee:	7859      	ldrb	r1, [r3, #1]
 8009af0:	0409      	lsls	r1, r1, #16
 8009af2:	1852      	adds	r2, r2, r1
 8009af4:	7899      	ldrb	r1, [r3, #2]
 8009af6:	0209      	lsls	r1, r1, #8
 8009af8:	4690      	mov	r8, r2
 8009afa:	4488      	add	r8, r1
								if (cMessage[port-1][4+shift] == 0xFF)					// All ports
 8009afc:	791b      	ldrb	r3, [r3, #4]
 8009afe:	2bff      	cmp	r3, #255	; 0xff
 8009b00:	d013      	beq.n	8009b2a <PxMessagingTask+0x68a>
									for (p=0 ; p<numOfParams ; p++) 
 8009b02:	4653      	mov	r3, sl
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d00e      	beq.n	8009b26 <PxMessagingTask+0x686>
 8009b08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009b0a:	469c      	mov	ip, r3
 8009b0c:	4465      	add	r5, ip
 8009b0e:	3504      	adds	r5, #4
 8009b10:	4b34      	ldr	r3, [pc, #208]	; (8009be4 <PxMessagingTask+0x744>)
 8009b12:	46a9      	mov	r9, r5
 8009b14:	4499      	add	r9, r3
 8009b16:	2500      	movs	r5, #0
 8009b18:	9406      	str	r4, [sp, #24]
 8009b1a:	0033      	movs	r3, r6
 8009b1c:	464e      	mov	r6, r9
 8009b1e:	46b9      	mov	r9, r7
 8009b20:	4657      	mov	r7, sl
 8009b22:	469a      	mov	sl, r3
 8009b24:	e012      	b.n	8009b4c <PxMessagingTask+0x6ac>
								temp = temp32 = 0;
 8009b26:	930b      	str	r3, [sp, #44]	; 0x2c
 8009b28:	e4f3      	b.n	8009512 <PxMessagingTask+0x72>
									for (p=1 ; p<=NumOfPorts ; p++) 
 8009b2a:	2501      	movs	r5, #1
										UpdateBaudrate(p, temp32); 
 8009b2c:	4641      	mov	r1, r8
 8009b2e:	0028      	movs	r0, r5
 8009b30:	f004 f946 	bl	800ddc0 <UpdateBaudrate>
									for (p=1 ; p<=NumOfPorts ; p++) 
 8009b34:	3501      	adds	r5, #1
 8009b36:	b2ed      	uxtb	r5, r5
 8009b38:	2d06      	cmp	r5, #6
 8009b3a:	d1f7      	bne.n	8009b2c <PxMessagingTask+0x68c>
								temp = temp32 = 0;
 8009b3c:	2300      	movs	r3, #0
 8009b3e:	930b      	str	r3, [sp, #44]	; 0x2c
 8009b40:	469a      	mov	sl, r3
 8009b42:	e4e6      	b.n	8009512 <PxMessagingTask+0x72>
									for (p=0 ; p<numOfParams ; p++) 
 8009b44:	3501      	adds	r5, #1
 8009b46:	b2eb      	uxtb	r3, r5
 8009b48:	42bb      	cmp	r3, r7
 8009b4a:	d208      	bcs.n	8009b5e <PxMessagingTask+0x6be>
										temp = cMessage[port-1][4+shift+p];
 8009b4c:	5d74      	ldrb	r4, [r6, r5]
										if (temp>0 && temp<=NumOfPorts)	{
 8009b4e:	1e63      	subs	r3, r4, #1
 8009b50:	2b04      	cmp	r3, #4
 8009b52:	d8f7      	bhi.n	8009b44 <PxMessagingTask+0x6a4>
											UpdateBaudrate(temp, temp32); 
 8009b54:	4641      	mov	r1, r8
 8009b56:	0020      	movs	r0, r4
 8009b58:	f004 f932 	bl	800ddc0 <UpdateBaudrate>
 8009b5c:	e7f2      	b.n	8009b44 <PxMessagingTask+0x6a4>
 8009b5e:	940b      	str	r4, [sp, #44]	; 0x2c
 8009b60:	9c06      	ldr	r4, [sp, #24]
 8009b62:	464f      	mov	r7, r9
 8009b64:	4656      	mov	r6, sl
 8009b66:	2300      	movs	r3, #0
 8009b68:	469a      	mov	sl, r3
 8009b6a:	e4d2      	b.n	8009512 <PxMessagingTask+0x72>
								SaveToRO();
 8009b6c:	f001 fbe0 	bl	800b330 <SaveToRO>
							SaveEEportsDir();
 8009b70:	f7f9 f8f8 	bl	8002d64 <SaveEEportsDir>
							indMode = IND_PING;
 8009b74:	4b1d      	ldr	r3, [pc, #116]	; (8009bec <PxMessagingTask+0x74c>)
 8009b76:	2201      	movs	r2, #1
 8009b78:	701a      	strb	r2, [r3, #0]
							break;
 8009b7a:	2300      	movs	r3, #0
 8009b7c:	469a      	mov	sl, r3
 8009b7e:	e4c8      	b.n	8009512 <PxMessagingTask+0x72>
							ClearEEportsDir();
 8009b80:	f7f9 f912 	bl	8002da8 <ClearEEportsDir>
							ClearROtopology();
 8009b84:	f001 fcf2 	bl	800b56c <ClearROtopology>
							osDelay(100);
 8009b88:	2064      	movs	r0, #100	; 0x64
 8009b8a:	f004 f9d8 	bl	800df3e <osDelay>
							indMode = IND_TOPOLOGY;
 8009b8e:	4b17      	ldr	r3, [pc, #92]	; (8009bec <PxMessagingTask+0x74c>)
 8009b90:	2202      	movs	r2, #2
 8009b92:	701a      	strb	r2, [r3, #0]
							break;
 8009b94:	2300      	movs	r3, #0
 8009b96:	469a      	mov	sl, r3
 8009b98:	e4bb      	b.n	8009512 <PxMessagingTask+0x72>
							pcOutputString = FreeRTOS_CLIGetOutputBuffer();
 8009b9a:	f004 faf3 	bl	800e184 <FreeRTOS_CLIGetOutputBuffer>
 8009b9e:	4681      	mov	r9, r0
							if (dst == BOS_BROADCAST)
 8009ba0:	4643      	mov	r3, r8
 8009ba2:	2bff      	cmp	r3, #255	; 0xff
 8009ba4:	d012      	beq.n	8009bcc <PxMessagingTask+0x72c>
							else if (dst == BOS_MULTICAST)
 8009ba6:	2bfe      	cmp	r3, #254	; 0xfe
 8009ba8:	d038      	beq.n	8009c1c <PxMessagingTask+0x77c>
								memcpy(cCLIString, &cMessage[port-1][shift], (size_t) numOfParams);
 8009baa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009bac:	469c      	mov	ip, r3
 8009bae:	4465      	add	r5, ip
 8009bb0:	490c      	ldr	r1, [pc, #48]	; (8009be4 <PxMessagingTask+0x744>)
 8009bb2:	1869      	adds	r1, r5, r1
 8009bb4:	4652      	mov	r2, sl
 8009bb6:	4816      	ldr	r0, [pc, #88]	; (8009c10 <PxMessagingTask+0x770>)
 8009bb8:	f00c fcbc 	bl	8016534 <memcpy>
								temp = PcPort; PcPort = port;
 8009bbc:	4d15      	ldr	r5, [pc, #84]	; (8009c14 <PxMessagingTask+0x774>)
								if (BOS.response == BOS_RESPONSE_ALL)
 8009bbe:	4b16      	ldr	r3, [pc, #88]	; (8009c18 <PxMessagingTask+0x778>)
 8009bc0:	469a      	mov	sl, r3
 8009bc2:	9406      	str	r4, [sp, #24]
 8009bc4:	46b8      	mov	r8, r7
 8009bc6:	464f      	mov	r7, r9
 8009bc8:	46b1      	mov	r9, r6
 8009bca:	e035      	b.n	8009c38 <PxMessagingTask+0x798>
								memcpy(cCLIString, &cMessage[port-1][shift], (size_t) (numOfParams-1));					// remove bcastID
 8009bcc:	4652      	mov	r2, sl
 8009bce:	3a01      	subs	r2, #1
 8009bd0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009bd2:	18e9      	adds	r1, r5, r3
 8009bd4:	4d03      	ldr	r5, [pc, #12]	; (8009be4 <PxMessagingTask+0x744>)
 8009bd6:	1949      	adds	r1, r1, r5
 8009bd8:	480d      	ldr	r0, [pc, #52]	; (8009c10 <PxMessagingTask+0x770>)
 8009bda:	f00c fcab 	bl	8016534 <memcpy>
 8009bde:	e7ed      	b.n	8009bbc <PxMessagingTask+0x71c>
 8009be0:	20000b08 	.word	0x20000b08
 8009be4:	200007d8 	.word	0x200007d8
 8009be8:	20000b98 	.word	0x20000b98
 8009bec:	2000098a 	.word	0x2000098a
 8009bf0:	200009d0 	.word	0x200009d0
 8009bf4:	20000b1c 	.word	0x20000b1c
 8009bf8:	20000b04 	.word	0x20000b04
 8009bfc:	2000098b 	.word	0x2000098b
 8009c00:	2000098c 	.word	0x2000098c
 8009c04:	20000fe8 	.word	0x20000fe8
 8009c08:	2000001c 	.word	0x2000001c
 8009c0c:	20000560 	.word	0x20000560
 8009c10:	20000fb4 	.word	0x20000fb4
 8009c14:	2000055f 	.word	0x2000055f
 8009c18:	20006368 	.word	0x20006368
								memcpy(cCLIString, &cMessage[port-1][shift], (size_t) (numOfParams-temp-2));		// remove bcastID + groupm members + group count
 8009c1c:	4653      	mov	r3, sl
 8009c1e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009c20:	1a9a      	subs	r2, r3, r2
 8009c22:	3a02      	subs	r2, #2
 8009c24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009c26:	18e9      	adds	r1, r5, r3
 8009c28:	4dd8      	ldr	r5, [pc, #864]	; (8009f8c <PxMessagingTask+0xaec>)
 8009c2a:	1949      	adds	r1, r1, r5
 8009c2c:	48d8      	ldr	r0, [pc, #864]	; (8009f90 <PxMessagingTask+0xaf0>)
 8009c2e:	f00c fc81 	bl	8016534 <memcpy>
 8009c32:	e7c3      	b.n	8009bbc <PxMessagingTask+0x71c>
							while( xReturned != pdFALSE );								
 8009c34:	2c00      	cmp	r4, #0
 8009c36:	d022      	beq.n	8009c7e <PxMessagingTask+0x7de>
								temp = PcPort; PcPort = port;
 8009c38:	782e      	ldrb	r6, [r5, #0]
 8009c3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c3c:	702b      	strb	r3, [r5, #0]
								xReturned = FreeRTOS_CLIProcessCommand( cCLIString, pcOutputString, configCOMMAND_INT_MAX_OUTPUT_SIZE );	
 8009c3e:	2299      	movs	r2, #153	; 0x99
 8009c40:	0092      	lsls	r2, r2, #2
 8009c42:	0039      	movs	r1, r7
 8009c44:	48d2      	ldr	r0, [pc, #840]	; (8009f90 <PxMessagingTask+0xaf0>)
 8009c46:	f004 fa13 	bl	800e070 <FreeRTOS_CLIProcessCommand>
 8009c4a:	0004      	movs	r4, r0
								PcPort = temp;
 8009c4c:	702e      	strb	r6, [r5, #0]
								if (BOS.response == BOS_RESPONSE_ALL)
 8009c4e:	4653      	mov	r3, sl
 8009c50:	799b      	ldrb	r3, [r3, #6]
 8009c52:	2b60      	cmp	r3, #96	; 0x60
 8009c54:	d1ee      	bne.n	8009c34 <PxMessagingTask+0x794>
									memcpy(messageParams, pcOutputString, strlen((char*) pcOutputString));
 8009c56:	0038      	movs	r0, r7
 8009c58:	f7f6 fa5e 	bl	8000118 <strlen>
 8009c5c:	0002      	movs	r2, r0
 8009c5e:	0039      	movs	r1, r7
 8009c60:	48cc      	ldr	r0, [pc, #816]	; (8009f94 <PxMessagingTask+0xaf4>)
 8009c62:	f00c fc67 	bl	8016534 <memcpy>
									SendMessageToModule(src, CODE_CLI_RESPONSE, strlen((char*) pcOutputString));
 8009c66:	0038      	movs	r0, r7
 8009c68:	f7f6 fa56 	bl	8000118 <strlen>
 8009c6c:	b282      	uxth	r2, r0
 8009c6e:	2118      	movs	r1, #24
 8009c70:	9807      	ldr	r0, [sp, #28]
 8009c72:	f7ff f935 	bl	8008ee0 <SendMessageToModule>
									osDelay(10); 
 8009c76:	200a      	movs	r0, #10
 8009c78:	f004 f961 	bl	800df3e <osDelay>
 8009c7c:	e7da      	b.n	8009c34 <PxMessagingTask+0x794>
 8009c7e:	9c06      	ldr	r4, [sp, #24]
 8009c80:	960b      	str	r6, [sp, #44]	; 0x2c
 8009c82:	4647      	mov	r7, r8
 8009c84:	464e      	mov	r6, r9
							memset( cCLIString, 0x00, cmdMAX_INPUT_SIZE );
 8009c86:	2232      	movs	r2, #50	; 0x32
 8009c88:	2100      	movs	r1, #0
 8009c8a:	48c1      	ldr	r0, [pc, #772]	; (8009f90 <PxMessagingTask+0xaf0>)
 8009c8c:	f00c fc5b 	bl	8016546 <memset>
							break;
 8009c90:	2300      	movs	r3, #0
 8009c92:	469a      	mov	sl, r3
 8009c94:	e43d      	b.n	8009512 <PxMessagingTask+0x72>
							pcOutputString = FreeRTOS_CLIGetOutputBuffer();
 8009c96:	f004 fa75 	bl	800e184 <FreeRTOS_CLIGetOutputBuffer>
 8009c9a:	4680      	mov	r8, r0
							memset( pcOutputString, 0x00, strlen((char*)pcOutputString) );
 8009c9c:	f7f6 fa3c 	bl	8000118 <strlen>
 8009ca0:	0002      	movs	r2, r0
 8009ca2:	2100      	movs	r1, #0
 8009ca4:	4640      	mov	r0, r8
 8009ca6:	f00c fc4e 	bl	8016546 <memset>
							if (longMessage) {
 8009caa:	4bbb      	ldr	r3, [pc, #748]	; (8009f98 <PxMessagingTask+0xaf8>)
 8009cac:	781b      	ldrb	r3, [r3, #0]
 8009cae:	4699      	mov	r9, r3
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d012      	beq.n	8009cda <PxMessagingTask+0x83a>
								memcpy(&pcOutputString[0]+longMessageLastPtr, &cMessage[port-1][shift], (size_t) numOfParams );
 8009cb4:	4bb9      	ldr	r3, [pc, #740]	; (8009f9c <PxMessagingTask+0xafc>)
 8009cb6:	4699      	mov	r9, r3
 8009cb8:	8818      	ldrh	r0, [r3, #0]
 8009cba:	4440      	add	r0, r8
 8009cbc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009cbe:	469c      	mov	ip, r3
 8009cc0:	4465      	add	r5, ip
 8009cc2:	49b2      	ldr	r1, [pc, #712]	; (8009f8c <PxMessagingTask+0xaec>)
 8009cc4:	1869      	adds	r1, r5, r1
 8009cc6:	4652      	mov	r2, sl
 8009cc8:	f00c fc34 	bl	8016534 <memcpy>
								longMessageLastPtr += numOfParams;
 8009ccc:	464b      	mov	r3, r9
 8009cce:	881d      	ldrh	r5, [r3, #0]
 8009cd0:	4455      	add	r5, sl
 8009cd2:	801d      	strh	r5, [r3, #0]
 8009cd4:	2300      	movs	r3, #0
 8009cd6:	469a      	mov	sl, r3
 8009cd8:	e41b      	b.n	8009512 <PxMessagingTask+0x72>
								memcpy(&pcOutputString[0]+longMessageLastPtr, &cMessage[port-1][shift], (size_t) numOfParams );
 8009cda:	4bb0      	ldr	r3, [pc, #704]	; (8009f9c <PxMessagingTask+0xafc>)
 8009cdc:	8818      	ldrh	r0, [r3, #0]
 8009cde:	4440      	add	r0, r8
 8009ce0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009ce2:	469c      	mov	ip, r3
 8009ce4:	4465      	add	r5, ip
 8009ce6:	49a9      	ldr	r1, [pc, #676]	; (8009f8c <PxMessagingTask+0xaec>)
 8009ce8:	1869      	adds	r1, r5, r1
 8009cea:	4652      	mov	r2, sl
 8009cec:	f00c fc22 	bl	8016534 <memcpy>
								longMessageLastPtr = 0;
 8009cf0:	2100      	movs	r1, #0
 8009cf2:	4baa      	ldr	r3, [pc, #680]	; (8009f9c <PxMessagingTask+0xafc>)
 8009cf4:	8019      	strh	r1, [r3, #0]
								responseStatus = BOS_OK;
 8009cf6:	4baa      	ldr	r3, [pc, #680]	; (8009fa0 <PxMessagingTask+0xb00>)
 8009cf8:	7019      	strb	r1, [r3, #0]
								xTaskNotify( ( xCommandConsoleTaskHandle ), 0, eNoAction );			// Notify the task without modifying its notification value
 8009cfa:	000b      	movs	r3, r1
 8009cfc:	000a      	movs	r2, r1
 8009cfe:	48a9      	ldr	r0, [pc, #676]	; (8009fa4 <PxMessagingTask+0xb04>)
 8009d00:	6800      	ldr	r0, [r0, #0]
 8009d02:	f005 fd91 	bl	800f828 <xTaskGenericNotify>
 8009d06:	46ca      	mov	sl, r9
 8009d08:	f7ff fc03 	bl	8009512 <PxMessagingTask+0x72>
								*((unsigned long *)0x20007FF0) = 0xDEADBEEF;   
 8009d0c:	4ba6      	ldr	r3, [pc, #664]	; (8009fa8 <PxMessagingTask+0xb08>)
 8009d0e:	4aa7      	ldr	r2, [pc, #668]	; (8009fac <PxMessagingTask+0xb0c>)
 8009d10:	601a      	str	r2, [r3, #0]
								indMode = IND_PING;
 8009d12:	4ba7      	ldr	r3, [pc, #668]	; (8009fb0 <PxMessagingTask+0xb10>)
 8009d14:	2201      	movs	r2, #1
 8009d16:	701a      	strb	r2, [r3, #0]
								osDelay(10);
 8009d18:	200a      	movs	r0, #10
 8009d1a:	f004 f910 	bl	800df3e <osDelay>
  __ASM volatile ("dsb 0xF":::"memory");
 8009d1e:	f3bf 8f4f 	dsb	sy
 8009d22:	4ba4      	ldr	r3, [pc, #656]	; (8009fb4 <PxMessagingTask+0xb14>)
 8009d24:	4aa4      	ldr	r2, [pc, #656]	; (8009fb8 <PxMessagingTask+0xb18>)
 8009d26:	60da      	str	r2, [r3, #12]
 8009d28:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 8009d2c:	46c0      	nop			; (mov r8, r8)
 8009d2e:	e7fd      	b.n	8009d2c <PxMessagingTask+0x88c>
								SendMessageFromPort(cMessage[port-1][shift], 0, 0, CODE_UPDATE, 0);
 8009d30:	4b96      	ldr	r3, [pc, #600]	; (8009f8c <PxMessagingTask+0xaec>)
 8009d32:	4698      	mov	r8, r3
 8009d34:	44b0      	add	r8, r6
 8009d36:	4643      	mov	r3, r8
 8009d38:	5d58      	ldrb	r0, [r3, r5]
 8009d3a:	2300      	movs	r3, #0
 8009d3c:	9300      	str	r3, [sp, #0]
 8009d3e:	3319      	adds	r3, #25
 8009d40:	2200      	movs	r2, #0
 8009d42:	2100      	movs	r1, #0
 8009d44:	f7fe fea2 	bl	8008a8c <SendMessageFromPort>
								osDelay(100);
 8009d48:	2064      	movs	r0, #100	; 0x64
 8009d4a:	f004 f8f8 	bl	800df3e <osDelay>
								remoteBootloaderUpdate(src, myID, port, cMessage[port-1][shift]);
 8009d4e:	4643      	mov	r3, r8
 8009d50:	5d5b      	ldrb	r3, [r3, r5]
 8009d52:	4a9a      	ldr	r2, [pc, #616]	; (8009fbc <PxMessagingTask+0xb1c>)
 8009d54:	7811      	ldrb	r1, [r2, #0]
 8009d56:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009d58:	9807      	ldr	r0, [sp, #28]
 8009d5a:	f7f9 fdf9 	bl	8003950 <remoteBootloaderUpdate>
								break;
 8009d5e:	2300      	movs	r3, #0
 8009d60:	469a      	mov	sl, r3
 8009d62:	f7ff fbd6 	bl	8009512 <PxMessagingTask+0x72>
							temp = cMessage[port-1][11+shift];
 8009d66:	46a8      	mov	r8, r5
 8009d68:	230b      	movs	r3, #11
 8009d6a:	4699      	mov	r9, r3
 8009d6c:	44a9      	add	r9, r5
							if (numOfParams == 15)	temp = cMessage[port-1][13+shift];							
 8009d6e:	4653      	mov	r3, sl
 8009d70:	2b0f      	cmp	r3, #15
 8009d72:	d011      	beq.n	8009d98 <PxMessagingTask+0x8f8>
							temp = cMessage[port-1][11+shift];
 8009d74:	2238      	movs	r2, #56	; 0x38
 8009d76:	4362      	muls	r2, r4
 8009d78:	4b84      	ldr	r3, [pc, #528]	; (8009f8c <PxMessagingTask+0xaec>)
 8009d7a:	189b      	adds	r3, r3, r2
 8009d7c:	464a      	mov	r2, r9
 8009d7e:	5c9b      	ldrb	r3, [r3, r2]
 8009d80:	9306      	str	r3, [sp, #24]
							if (numOfParams == 17)	temp = cMessage[port-1][15+shift];
 8009d82:	4653      	mov	r3, sl
 8009d84:	2b11      	cmp	r3, #17
 8009d86:	d10e      	bne.n	8009da6 <PxMessagingTask+0x906>
 8009d88:	2238      	movs	r2, #56	; 0x38
 8009d8a:	4362      	muls	r2, r4
 8009d8c:	4b7f      	ldr	r3, [pc, #508]	; (8009f8c <PxMessagingTask+0xaec>)
 8009d8e:	189b      	adds	r3, r3, r2
 8009d90:	4443      	add	r3, r8
 8009d92:	7bdb      	ldrb	r3, [r3, #15]
 8009d94:	9306      	str	r3, [sp, #24]
 8009d96:	e006      	b.n	8009da6 <PxMessagingTask+0x906>
							if (numOfParams == 15)	temp = cMessage[port-1][13+shift];							
 8009d98:	2238      	movs	r2, #56	; 0x38
 8009d9a:	4362      	muls	r2, r4
 8009d9c:	4b7b      	ldr	r3, [pc, #492]	; (8009f8c <PxMessagingTask+0xaec>)
 8009d9e:	189b      	adds	r3, r3, r2
 8009da0:	195d      	adds	r5, r3, r5
 8009da2:	7b6b      	ldrb	r3, [r5, #13]
 8009da4:	9306      	str	r3, [sp, #24]
								count = ( (uint32_t) cMessage[port-1][shift] << 24 ) + ( (uint32_t) cMessage[port-1][1+shift] << 16 ) + ( (uint32_t) cMessage[port-1][2+shift] << 8 ) + cMessage[port-1][3+shift];
 8009da6:	4643      	mov	r3, r8
 8009da8:	1c58      	adds	r0, r3, #1
 8009daa:	900b      	str	r0, [sp, #44]	; 0x2c
 8009dac:	1c9d      	adds	r5, r3, #2
 8009dae:	950f      	str	r5, [sp, #60]	; 0x3c
 8009db0:	1cd9      	adds	r1, r3, #3
 8009db2:	9110      	str	r1, [sp, #64]	; 0x40
 8009db4:	4b75      	ldr	r3, [pc, #468]	; (8009f8c <PxMessagingTask+0xaec>)
 8009db6:	199b      	adds	r3, r3, r6
 8009db8:	4642      	mov	r2, r8
 8009dba:	5c9a      	ldrb	r2, [r3, r2]
 8009dbc:	0612      	lsls	r2, r2, #24
 8009dbe:	5c59      	ldrb	r1, [r3, r1]
 8009dc0:	1852      	adds	r2, r2, r1
 8009dc2:	5c19      	ldrb	r1, [r3, r0]
 8009dc4:	0409      	lsls	r1, r1, #16
 8009dc6:	1852      	adds	r2, r2, r1
 8009dc8:	5d59      	ldrb	r1, [r3, r5]
 8009dca:	0209      	lsls	r1, r1, #8
 8009dcc:	1852      	adds	r2, r2, r1
 8009dce:	920e      	str	r2, [sp, #56]	; 0x38
								timeout = ( (uint32_t) cMessage[port-1][4+shift] << 24 ) + ( (uint32_t) cMessage[port-1][5+shift] << 16 ) + ( (uint32_t) cMessage[port-1][6+shift] << 8 ) + cMessage[port-1][7+shift];									
 8009dd0:	4642      	mov	r2, r8
 8009dd2:	3204      	adds	r2, #4
 8009dd4:	9211      	str	r2, [sp, #68]	; 0x44
 8009dd6:	2105      	movs	r1, #5
 8009dd8:	4441      	add	r1, r8
 8009dda:	468c      	mov	ip, r1
 8009ddc:	4641      	mov	r1, r8
 8009dde:	3106      	adds	r1, #6
 8009de0:	4640      	mov	r0, r8
 8009de2:	3007      	adds	r0, #7
 8009de4:	5c9d      	ldrb	r5, [r3, r2]
 8009de6:	062d      	lsls	r5, r5, #24
 8009de8:	4662      	mov	r2, ip
 8009dea:	5c9a      	ldrb	r2, [r3, r2]
 8009dec:	0412      	lsls	r2, r2, #16
 8009dee:	18aa      	adds	r2, r5, r2
 8009df0:	5c1d      	ldrb	r5, [r3, r0]
 8009df2:	1952      	adds	r2, r2, r5
 8009df4:	5c5d      	ldrb	r5, [r3, r1]
 8009df6:	022d      	lsls	r5, r5, #8
 8009df8:	1955      	adds	r5, r2, r5
							if (temp == false)
 8009dfa:	9b06      	ldr	r3, [sp, #24]
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d15b      	bne.n	8009eb8 <PxMessagingTask+0xa18>
								if (cMessage[port-1][9+shift] && cMessage[port-1][10+shift])
 8009e00:	4b62      	ldr	r3, [pc, #392]	; (8009f8c <PxMessagingTask+0xaec>)
 8009e02:	199b      	adds	r3, r3, r6
 8009e04:	4443      	add	r3, r8
 8009e06:	7a5b      	ldrb	r3, [r3, #9]
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d007      	beq.n	8009e1c <PxMessagingTask+0x97c>
 8009e0c:	2138      	movs	r1, #56	; 0x38
 8009e0e:	4361      	muls	r1, r4
 8009e10:	4a5e      	ldr	r2, [pc, #376]	; (8009f8c <PxMessagingTask+0xaec>)
 8009e12:	1852      	adds	r2, r2, r1
 8009e14:	4442      	add	r2, r8
 8009e16:	7a91      	ldrb	r1, [r2, #10]
 8009e18:	2900      	cmp	r1, #0
 8009e1a:	d123      	bne.n	8009e64 <PxMessagingTask+0x9c4>
								if (cMessage[port-1][11+shift] && cMessage[port-1][12+shift])
 8009e1c:	4b5b      	ldr	r3, [pc, #364]	; (8009f8c <PxMessagingTask+0xaec>)
 8009e1e:	199b      	adds	r3, r3, r6
 8009e20:	464a      	mov	r2, r9
 8009e22:	5c9b      	ldrb	r3, [r3, r2]
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d007      	beq.n	8009e38 <PxMessagingTask+0x998>
 8009e28:	2138      	movs	r1, #56	; 0x38
 8009e2a:	4361      	muls	r1, r4
 8009e2c:	4a57      	ldr	r2, [pc, #348]	; (8009f8c <PxMessagingTask+0xaec>)
 8009e2e:	1852      	adds	r2, r2, r1
 8009e30:	4442      	add	r2, r8
 8009e32:	7b11      	ldrb	r1, [r2, #12]
 8009e34:	2900      	cmp	r1, #0
 8009e36:	d121      	bne.n	8009e7c <PxMessagingTask+0x9dc>
								if (cMessage[port-1][13+shift] && cMessage[port-1][14+shift])
 8009e38:	4b54      	ldr	r3, [pc, #336]	; (8009f8c <PxMessagingTask+0xaec>)
 8009e3a:	199b      	adds	r3, r3, r6
 8009e3c:	4443      	add	r3, r8
 8009e3e:	7b5b      	ldrb	r3, [r3, #13]
 8009e40:	930b      	str	r3, [sp, #44]	; 0x2c
 8009e42:	469a      	mov	sl, r3
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d101      	bne.n	8009e4c <PxMessagingTask+0x9ac>
 8009e48:	f7ff fb63 	bl	8009512 <PxMessagingTask+0x72>
 8009e4c:	2238      	movs	r2, #56	; 0x38
 8009e4e:	4362      	muls	r2, r4
 8009e50:	4b4e      	ldr	r3, [pc, #312]	; (8009f8c <PxMessagingTask+0xaec>)
 8009e52:	189b      	adds	r3, r3, r2
 8009e54:	4443      	add	r3, r8
 8009e56:	7b9b      	ldrb	r3, [r3, #14]
 8009e58:	469a      	mov	sl, r3
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d11a      	bne.n	8009e94 <PxMessagingTask+0x9f4>
 8009e5e:	930b      	str	r3, [sp, #44]	; 0x2c
 8009e60:	f7ff fb57 	bl	8009512 <PxMessagingTask+0x72>
									SetupDMAStreams(cMessage[port-1][8+shift], count, timeout, cMessage[port-1][9+shift], cMessage[port-1][10+shift]);
 8009e64:	2038      	movs	r0, #56	; 0x38
 8009e66:	4360      	muls	r0, r4
 8009e68:	4a48      	ldr	r2, [pc, #288]	; (8009f8c <PxMessagingTask+0xaec>)
 8009e6a:	1812      	adds	r2, r2, r0
 8009e6c:	4442      	add	r2, r8
 8009e6e:	7a10      	ldrb	r0, [r2, #8]
 8009e70:	9100      	str	r1, [sp, #0]
 8009e72:	002a      	movs	r2, r5
 8009e74:	990e      	ldr	r1, [sp, #56]	; 0x38
 8009e76:	f7fe fcf5 	bl	8008864 <SetupDMAStreams>
 8009e7a:	e7cf      	b.n	8009e1c <PxMessagingTask+0x97c>
									SetupDMAStreams(cMessage[port-1][8+shift], count, timeout, cMessage[port-1][11+shift], cMessage[port-1][12+shift]);
 8009e7c:	2038      	movs	r0, #56	; 0x38
 8009e7e:	4360      	muls	r0, r4
 8009e80:	4a42      	ldr	r2, [pc, #264]	; (8009f8c <PxMessagingTask+0xaec>)
 8009e82:	1812      	adds	r2, r2, r0
 8009e84:	4442      	add	r2, r8
 8009e86:	7a10      	ldrb	r0, [r2, #8]
 8009e88:	9100      	str	r1, [sp, #0]
 8009e8a:	002a      	movs	r2, r5
 8009e8c:	990e      	ldr	r1, [sp, #56]	; 0x38
 8009e8e:	f7fe fce9 	bl	8008864 <SetupDMAStreams>
 8009e92:	e7d1      	b.n	8009e38 <PxMessagingTask+0x998>
									SetupDMAStreams(cMessage[port-1][8+shift], count, timeout, cMessage[port-1][13+shift], cMessage[port-1][14+shift]);
 8009e94:	2238      	movs	r2, #56	; 0x38
 8009e96:	4362      	muls	r2, r4
 8009e98:	4b3c      	ldr	r3, [pc, #240]	; (8009f8c <PxMessagingTask+0xaec>)
 8009e9a:	189b      	adds	r3, r3, r2
 8009e9c:	4443      	add	r3, r8
 8009e9e:	7a18      	ldrb	r0, [r3, #8]
 8009ea0:	4653      	mov	r3, sl
 8009ea2:	9300      	str	r3, [sp, #0]
 8009ea4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009ea6:	002a      	movs	r2, r5
 8009ea8:	990e      	ldr	r1, [sp, #56]	; 0x38
 8009eaa:	f7fe fcdb 	bl	8008864 <SetupDMAStreams>
 8009eae:	9b06      	ldr	r3, [sp, #24]
 8009eb0:	930b      	str	r3, [sp, #44]	; 0x2c
 8009eb2:	469a      	mov	sl, r3
 8009eb4:	f7ff fb2d 	bl	8009512 <PxMessagingTask+0x72>
 8009eb8:	4663      	mov	r3, ip
 8009eba:	9305      	str	r3, [sp, #20]
 8009ebc:	9106      	str	r1, [sp, #24]
 8009ebe:	4683      	mov	fp, r0
 8009ec0:	4655      	mov	r5, sl
								EE_WriteVariable(_EE_DMA_STREAM_BASE, cMessage[port-1][8+shift]);			/* Direction */
 8009ec2:	2338      	movs	r3, #56	; 0x38
 8009ec4:	4363      	muls	r3, r4
 8009ec6:	4e31      	ldr	r6, [pc, #196]	; (8009f8c <PxMessagingTask+0xaec>)
 8009ec8:	18f6      	adds	r6, r6, r3
 8009eca:	4647      	mov	r7, r8
 8009ecc:	19f7      	adds	r7, r6, r7
 8009ece:	7a39      	ldrb	r1, [r7, #8]
 8009ed0:	20e4      	movs	r0, #228	; 0xe4
 8009ed2:	f7fd fb01 	bl	80074d8 <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE+1, ( (uint16_t) cMessage[port-1][shift] << 8 ) + cMessage[port-1][1+shift]);			/* Count high half-word */
 8009ed6:	4643      	mov	r3, r8
 8009ed8:	5cf3      	ldrb	r3, [r6, r3]
 8009eda:	021b      	lsls	r3, r3, #8
 8009edc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009ede:	5cb1      	ldrb	r1, [r6, r2]
 8009ee0:	18c9      	adds	r1, r1, r3
 8009ee2:	b289      	uxth	r1, r1
 8009ee4:	20e5      	movs	r0, #229	; 0xe5
 8009ee6:	f7fd faf7 	bl	80074d8 <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE+2, ( (uint16_t) cMessage[port-1][2+shift] << 8 ) + cMessage[port-1][3+shift]);			/* Count low half-word */
 8009eea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009eec:	5cf3      	ldrb	r3, [r6, r3]
 8009eee:	021b      	lsls	r3, r3, #8
 8009ef0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009ef2:	5cb1      	ldrb	r1, [r6, r2]
 8009ef4:	18c9      	adds	r1, r1, r3
 8009ef6:	b289      	uxth	r1, r1
 8009ef8:	20e6      	movs	r0, #230	; 0xe6
 8009efa:	f7fd faed 	bl	80074d8 <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE+3, ( (uint16_t) cMessage[port-1][4+shift] << 8 ) + cMessage[port-1][5+shift]);			/* Timeout high half-word */
 8009efe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009f00:	5cf3      	ldrb	r3, [r6, r3]
 8009f02:	021b      	lsls	r3, r3, #8
 8009f04:	9a05      	ldr	r2, [sp, #20]
 8009f06:	5cb1      	ldrb	r1, [r6, r2]
 8009f08:	18c9      	adds	r1, r1, r3
 8009f0a:	b289      	uxth	r1, r1
 8009f0c:	20e7      	movs	r0, #231	; 0xe7
 8009f0e:	f7fd fae3 	bl	80074d8 <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE+4, ( (uint16_t) cMessage[port-1][6+shift] << 8 ) + cMessage[port-1][7+shift]);			/* Timeout low half-word */
 8009f12:	9b06      	ldr	r3, [sp, #24]
 8009f14:	5cf3      	ldrb	r3, [r6, r3]
 8009f16:	021b      	lsls	r3, r3, #8
 8009f18:	465a      	mov	r2, fp
 8009f1a:	5cb1      	ldrb	r1, [r6, r2]
 8009f1c:	18c9      	adds	r1, r1, r3
 8009f1e:	b289      	uxth	r1, r1
 8009f20:	20e8      	movs	r0, #232	; 0xe8
 8009f22:	f7fd fad9 	bl	80074d8 <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE+5, ( (uint16_t) cMessage[port-1][9+shift] << 8 ) + cMessage[port-1][10+shift]);			/* src1 | dst1 */
 8009f26:	7a7b      	ldrb	r3, [r7, #9]
 8009f28:	021b      	lsls	r3, r3, #8
 8009f2a:	7ab9      	ldrb	r1, [r7, #10]
 8009f2c:	18c9      	adds	r1, r1, r3
 8009f2e:	b289      	uxth	r1, r1
 8009f30:	20e9      	movs	r0, #233	; 0xe9
 8009f32:	f7fd fad1 	bl	80074d8 <EE_WriteVariable>
								if (numOfParams == 19)
 8009f36:	2d13      	cmp	r5, #19
 8009f38:	d00a      	beq.n	8009f50 <PxMessagingTask+0xab0>
								if (numOfParams == 21)
 8009f3a:	2d15      	cmp	r5, #21
 8009f3c:	d017      	beq.n	8009f6e <PxMessagingTask+0xace>
  __ASM volatile ("dsb 0xF":::"memory");
 8009f3e:	f3bf 8f4f 	dsb	sy
 8009f42:	4b1c      	ldr	r3, [pc, #112]	; (8009fb4 <PxMessagingTask+0xb14>)
 8009f44:	4a1c      	ldr	r2, [pc, #112]	; (8009fb8 <PxMessagingTask+0xb18>)
 8009f46:	60da      	str	r2, [r3, #12]
 8009f48:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 8009f4c:	46c0      	nop			; (mov r8, r8)
 8009f4e:	e7fd      	b.n	8009f4c <PxMessagingTask+0xaac>
									EE_WriteVariable(_EE_DMA_STREAM_BASE+6, ( (uint16_t) cMessage[port-1][11+shift] << 8 ) + cMessage[port-1][12+shift]);			/* src2 | dst2 */
 8009f50:	2338      	movs	r3, #56	; 0x38
 8009f52:	4363      	muls	r3, r4
 8009f54:	4c0d      	ldr	r4, [pc, #52]	; (8009f8c <PxMessagingTask+0xaec>)
 8009f56:	18e4      	adds	r4, r4, r3
 8009f58:	464b      	mov	r3, r9
 8009f5a:	5ce3      	ldrb	r3, [r4, r3]
 8009f5c:	021b      	lsls	r3, r3, #8
 8009f5e:	4444      	add	r4, r8
 8009f60:	7b21      	ldrb	r1, [r4, #12]
 8009f62:	18c9      	adds	r1, r1, r3
 8009f64:	b289      	uxth	r1, r1
 8009f66:	20ea      	movs	r0, #234	; 0xea
 8009f68:	f7fd fab6 	bl	80074d8 <EE_WriteVariable>
								if (numOfParams == 21)
 8009f6c:	e7e7      	b.n	8009f3e <PxMessagingTask+0xa9e>
									EE_WriteVariable(_EE_DMA_STREAM_BASE+7, ( (uint16_t) cMessage[port-1][13+shift] << 8 ) + cMessage[port-1][14+shift]);			/* src3 | dst3 */
 8009f6e:	2338      	movs	r3, #56	; 0x38
 8009f70:	435c      	muls	r4, r3
 8009f72:	4b06      	ldr	r3, [pc, #24]	; (8009f8c <PxMessagingTask+0xaec>)
 8009f74:	191b      	adds	r3, r3, r4
 8009f76:	4443      	add	r3, r8
 8009f78:	7b5a      	ldrb	r2, [r3, #13]
 8009f7a:	0212      	lsls	r2, r2, #8
 8009f7c:	7b99      	ldrb	r1, [r3, #14]
 8009f7e:	1889      	adds	r1, r1, r2
 8009f80:	b289      	uxth	r1, r1
 8009f82:	20eb      	movs	r0, #235	; 0xeb
 8009f84:	f7fd faa8 	bl	80074d8 <EE_WriteVariable>
 8009f88:	e7d9      	b.n	8009f3e <PxMessagingTask+0xa9e>
 8009f8a:	46c0      	nop			; (mov r8, r8)
 8009f8c:	200007d8 	.word	0x200007d8
 8009f90:	20000fb4 	.word	0x20000fb4
 8009f94:	200009d0 	.word	0x200009d0
 8009f98:	2000098b 	.word	0x2000098b
 8009f9c:	2000098c 	.word	0x2000098c
 8009fa0:	20000b98 	.word	0x20000b98
 8009fa4:	20000f38 	.word	0x20000f38
 8009fa8:	20007ff0 	.word	0x20007ff0
 8009fac:	deadbeef 	.word	0xdeadbeef
 8009fb0:	2000098a 	.word	0x2000098a
 8009fb4:	e000ed00 	.word	0xe000ed00
 8009fb8:	05fa0004 	.word	0x05fa0004
 8009fbc:	20000b04 	.word	0x20000b04
							StartScastDMAStream(cMessage[port-1][9+shift], myID, cMessage[port-1][11+shift], cMessage[port-1][10+shift], cMessage[port-1][8+shift], count, timeout, cMessage[port-1][12+shift]);
 8009fc0:	49f2      	ldr	r1, [pc, #968]	; (800a38c <PxMessagingTask+0xeec>)
 8009fc2:	1989      	adds	r1, r1, r6
 8009fc4:	194b      	adds	r3, r1, r5
 8009fc6:	7a9a      	ldrb	r2, [r3, #10]
 8009fc8:	4691      	mov	r9, r2
 8009fca:	7ada      	ldrb	r2, [r3, #11]
 8009fcc:	4690      	mov	r8, r2
 8009fce:	4af0      	ldr	r2, [pc, #960]	; (800a390 <PxMessagingTask+0xef0>)
 8009fd0:	7812      	ldrb	r2, [r2, #0]
 8009fd2:	4694      	mov	ip, r2
 8009fd4:	7a5a      	ldrb	r2, [r3, #9]
 8009fd6:	9206      	str	r2, [sp, #24]
 8009fd8:	7b1a      	ldrb	r2, [r3, #12]
 8009fda:	1e50      	subs	r0, r2, #1
 8009fdc:	4182      	sbcs	r2, r0
 8009fde:	9203      	str	r2, [sp, #12]
							timeout = ( (uint32_t) cMessage[port-1][4+shift] << 24 ) + ( (uint32_t) cMessage[port-1][5+shift] << 16 ) + ( (uint32_t) cMessage[port-1][6+shift] << 8 ) + cMessage[port-1][7+shift];
 8009fe0:	791a      	ldrb	r2, [r3, #4]
 8009fe2:	0612      	lsls	r2, r2, #24
 8009fe4:	4692      	mov	sl, r2
 8009fe6:	795a      	ldrb	r2, [r3, #5]
 8009fe8:	0412      	lsls	r2, r2, #16
 8009fea:	4452      	add	r2, sl
 8009fec:	79d8      	ldrb	r0, [r3, #7]
 8009fee:	4682      	mov	sl, r0
 8009ff0:	4452      	add	r2, sl
 8009ff2:	7998      	ldrb	r0, [r3, #6]
 8009ff4:	0200      	lsls	r0, r0, #8
 8009ff6:	4682      	mov	sl, r0
 8009ff8:	4452      	add	r2, sl
							StartScastDMAStream(cMessage[port-1][9+shift], myID, cMessage[port-1][11+shift], cMessage[port-1][10+shift], cMessage[port-1][8+shift], count, timeout, cMessage[port-1][12+shift]);
 8009ffa:	9202      	str	r2, [sp, #8]
							count = ( (uint32_t) cMessage[port-1][shift] << 24 ) + ( (uint32_t) cMessage[port-1][1+shift] << 16 ) + ( (uint32_t) cMessage[port-1][2+shift] << 8 ) + cMessage[port-1][3+shift];
 8009ffc:	5d4a      	ldrb	r2, [r1, r5]
 8009ffe:	0612      	lsls	r2, r2, #24
 800a000:	78d9      	ldrb	r1, [r3, #3]
 800a002:	1852      	adds	r2, r2, r1
 800a004:	7859      	ldrb	r1, [r3, #1]
 800a006:	0409      	lsls	r1, r1, #16
 800a008:	1852      	adds	r2, r2, r1
 800a00a:	7899      	ldrb	r1, [r3, #2]
 800a00c:	0209      	lsls	r1, r1, #8
 800a00e:	1852      	adds	r2, r2, r1
							StartScastDMAStream(cMessage[port-1][9+shift], myID, cMessage[port-1][11+shift], cMessage[port-1][10+shift], cMessage[port-1][8+shift], count, timeout, cMessage[port-1][12+shift]);
 800a010:	9201      	str	r2, [sp, #4]
 800a012:	7a1b      	ldrb	r3, [r3, #8]
 800a014:	9300      	str	r3, [sp, #0]
 800a016:	464b      	mov	r3, r9
 800a018:	4642      	mov	r2, r8
 800a01a:	4661      	mov	r1, ip
 800a01c:	9806      	ldr	r0, [sp, #24]
 800a01e:	f7fe ff85 	bl	8008f2c <StartScastDMAStream>
							break;								
 800a022:	2300      	movs	r3, #0
 800a024:	469a      	mov	sl, r3
 800a026:	f7ff fa74 	bl	8009512 <PxMessagingTask+0x72>
							 if	(cMessage[port-1][shift]==REMOTE_MEMORY_ADD)											// request for a memory address
 800a02a:	4bd8      	ldr	r3, [pc, #864]	; (800a38c <PxMessagingTask+0xeec>)
 800a02c:	199b      	adds	r3, r3, r6
 800a02e:	5d5b      	ldrb	r3, [r3, r5]
 800a030:	469a      	mov	sl, r3
 800a032:	2b00      	cmp	r3, #0
 800a034:	d000      	beq.n	800a038 <PxMessagingTask+0xb98>
 800a036:	e07f      	b.n	800a138 <PxMessagingTask+0xc98>
									temp32 = ( (uint32_t) cMessage[port-1][2+shift] << 24 ) + ( (uint32_t) cMessage[port-1][3+shift] << 16 ) + ( (uint32_t) cMessage[port-1][4+shift] << 8 ) + cMessage[port-1][5+shift];				
 800a038:	2238      	movs	r2, #56	; 0x38
 800a03a:	4362      	muls	r2, r4
 800a03c:	4bd3      	ldr	r3, [pc, #844]	; (800a38c <PxMessagingTask+0xeec>)
 800a03e:	189b      	adds	r3, r3, r2
 800a040:	195d      	adds	r5, r3, r5
 800a042:	78ab      	ldrb	r3, [r5, #2]
 800a044:	061b      	lsls	r3, r3, #24
 800a046:	78ea      	ldrb	r2, [r5, #3]
 800a048:	0412      	lsls	r2, r2, #16
 800a04a:	189b      	adds	r3, r3, r2
 800a04c:	796a      	ldrb	r2, [r5, #5]
 800a04e:	189b      	adds	r3, r3, r2
 800a050:	792a      	ldrb	r2, [r5, #4]
 800a052:	0212      	lsls	r2, r2, #8
 800a054:	189b      	adds	r3, r3, r2
									switch (cMessage[port-1][1+shift])											// requested format
 800a056:	786a      	ldrb	r2, [r5, #1]
 800a058:	3a01      	subs	r2, #1
 800a05a:	b2d1      	uxtb	r1, r2
 800a05c:	2907      	cmp	r1, #7
 800a05e:	d901      	bls.n	800a064 <PxMessagingTask+0xbc4>
 800a060:	f7ff fa52 	bl	8009508 <PxMessagingTask+0x68>
 800a064:	b2d2      	uxtb	r2, r2
 800a066:	0092      	lsls	r2, r2, #2
 800a068:	49ca      	ldr	r1, [pc, #808]	; (800a394 <PxMessagingTask+0xef4>)
 800a06a:	588a      	ldr	r2, [r1, r2]
 800a06c:	4697      	mov	pc, r2
											messageParams[0] = *(__IO uint8_t *)temp32; 
 800a06e:	781a      	ldrb	r2, [r3, #0]
 800a070:	4bc9      	ldr	r3, [pc, #804]	; (800a398 <PxMessagingTask+0xef8>)
 800a072:	701a      	strb	r2, [r3, #0]
											SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 1); break;
 800a074:	2201      	movs	r2, #1
 800a076:	211f      	movs	r1, #31
 800a078:	9807      	ldr	r0, [sp, #28]
 800a07a:	f7fe ff31 	bl	8008ee0 <SendMessageToModule>
 800a07e:	f7ff fa48 	bl	8009512 <PxMessagingTask+0x72>
											messageParams[0] = *(__IO int8_t *)temp32; 
 800a082:	781a      	ldrb	r2, [r3, #0]
 800a084:	4bc4      	ldr	r3, [pc, #784]	; (800a398 <PxMessagingTask+0xef8>)
 800a086:	701a      	strb	r2, [r3, #0]
											SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 1); break;
 800a088:	2201      	movs	r2, #1
 800a08a:	211f      	movs	r1, #31
 800a08c:	9807      	ldr	r0, [sp, #28]
 800a08e:	f7fe ff27 	bl	8008ee0 <SendMessageToModule>
 800a092:	f7ff fa3e 	bl	8009512 <PxMessagingTask+0x72>
											messageParams[0] = (uint8_t)((*(__IO uint16_t *)temp32)>>0); messageParams[1] = (uint8_t)((*(__IO uint16_t *)temp32)>>8);  
 800a096:	8819      	ldrh	r1, [r3, #0]
 800a098:	4abf      	ldr	r2, [pc, #764]	; (800a398 <PxMessagingTask+0xef8>)
 800a09a:	7011      	strb	r1, [r2, #0]
 800a09c:	881b      	ldrh	r3, [r3, #0]
 800a09e:	0a1b      	lsrs	r3, r3, #8
 800a0a0:	7053      	strb	r3, [r2, #1]
											SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 2); break;
 800a0a2:	2202      	movs	r2, #2
 800a0a4:	211f      	movs	r1, #31
 800a0a6:	9807      	ldr	r0, [sp, #28]
 800a0a8:	f7fe ff1a 	bl	8008ee0 <SendMessageToModule>
 800a0ac:	f7ff fa31 	bl	8009512 <PxMessagingTask+0x72>
											messageParams[0] = (uint8_t)((*(__IO int16_t *)temp32)>>0); messageParams[1] = (uint8_t)((*(__IO int16_t *)temp32)>>8); 
 800a0b0:	8819      	ldrh	r1, [r3, #0]
 800a0b2:	4ab9      	ldr	r2, [pc, #740]	; (800a398 <PxMessagingTask+0xef8>)
 800a0b4:	7011      	strb	r1, [r2, #0]
 800a0b6:	881b      	ldrh	r3, [r3, #0]
 800a0b8:	b21b      	sxth	r3, r3
 800a0ba:	121b      	asrs	r3, r3, #8
 800a0bc:	7053      	strb	r3, [r2, #1]
											SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 2); break;
 800a0be:	2202      	movs	r2, #2
 800a0c0:	211f      	movs	r1, #31
 800a0c2:	9807      	ldr	r0, [sp, #28]
 800a0c4:	f7fe ff0c 	bl	8008ee0 <SendMessageToModule>
 800a0c8:	f7ff fa23 	bl	8009512 <PxMessagingTask+0x72>
											messageParams[0] = (uint8_t)((*(__IO uint32_t *)temp32)>>0); messageParams[1] = (uint8_t)((*(__IO uint32_t *)temp32)>>8); 
 800a0cc:	6819      	ldr	r1, [r3, #0]
 800a0ce:	4ab2      	ldr	r2, [pc, #712]	; (800a398 <PxMessagingTask+0xef8>)
 800a0d0:	7011      	strb	r1, [r2, #0]
 800a0d2:	6819      	ldr	r1, [r3, #0]
 800a0d4:	0a09      	lsrs	r1, r1, #8
 800a0d6:	7051      	strb	r1, [r2, #1]
											messageParams[2] = (uint8_t)((*(__IO uint32_t *)temp32)>>16); messageParams[3] = (uint8_t)((*(__IO uint32_t *)temp32)>>24); 
 800a0d8:	6819      	ldr	r1, [r3, #0]
 800a0da:	0c09      	lsrs	r1, r1, #16
 800a0dc:	7091      	strb	r1, [r2, #2]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	0e1b      	lsrs	r3, r3, #24
 800a0e2:	70d3      	strb	r3, [r2, #3]
											SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 4); break;
 800a0e4:	2204      	movs	r2, #4
 800a0e6:	211f      	movs	r1, #31
 800a0e8:	9807      	ldr	r0, [sp, #28]
 800a0ea:	f7fe fef9 	bl	8008ee0 <SendMessageToModule>
 800a0ee:	f7ff fa10 	bl	8009512 <PxMessagingTask+0x72>
											messageParams[0] = (uint8_t)((*(__IO int32_t *)temp32)>>0); messageParams[1] = (uint8_t)((*(__IO int32_t *)temp32)>>8); 
 800a0f2:	6819      	ldr	r1, [r3, #0]
 800a0f4:	4aa8      	ldr	r2, [pc, #672]	; (800a398 <PxMessagingTask+0xef8>)
 800a0f6:	7011      	strb	r1, [r2, #0]
 800a0f8:	6819      	ldr	r1, [r3, #0]
 800a0fa:	1209      	asrs	r1, r1, #8
 800a0fc:	7051      	strb	r1, [r2, #1]
											messageParams[2] = (uint8_t)((*(__IO int32_t *)temp32)>>16); messageParams[3] = (uint8_t)((*(__IO int32_t *)temp32)>>24);
 800a0fe:	6819      	ldr	r1, [r3, #0]
 800a100:	1409      	asrs	r1, r1, #16
 800a102:	7091      	strb	r1, [r2, #2]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	161b      	asrs	r3, r3, #24
 800a108:	70d3      	strb	r3, [r2, #3]
											SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 4); break;										
 800a10a:	2204      	movs	r2, #4
 800a10c:	211f      	movs	r1, #31
 800a10e:	9807      	ldr	r0, [sp, #28]
 800a110:	f7fe fee6 	bl	8008ee0 <SendMessageToModule>
 800a114:	f7ff f9fd 	bl	8009512 <PxMessagingTask+0x72>
											messageParams[0] = *(__IO uint8_t *)(temp32+0); messageParams[1] = *(__IO uint8_t *)(temp32+1); 
 800a118:	7819      	ldrb	r1, [r3, #0]
 800a11a:	4a9f      	ldr	r2, [pc, #636]	; (800a398 <PxMessagingTask+0xef8>)
 800a11c:	7011      	strb	r1, [r2, #0]
 800a11e:	7859      	ldrb	r1, [r3, #1]
 800a120:	7051      	strb	r1, [r2, #1]
											messageParams[2] = *(__IO uint8_t *)(temp32+2); messageParams[3] = *(__IO uint8_t *)(temp32+3); 
 800a122:	7899      	ldrb	r1, [r3, #2]
 800a124:	7091      	strb	r1, [r2, #2]
 800a126:	78db      	ldrb	r3, [r3, #3]
 800a128:	70d3      	strb	r3, [r2, #3]
											SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 8); break;	// You cannot bitwise floats	
 800a12a:	2208      	movs	r2, #8
 800a12c:	211f      	movs	r1, #31
 800a12e:	9807      	ldr	r0, [sp, #28]
 800a130:	f7fe fed6 	bl	8008ee0 <SendMessageToModule>
 800a134:	f7ff f9ed 	bl	8009512 <PxMessagingTask+0x72>
								else if(cMessage[port-1][shift]==REMOTE_MODULE_PARAM)			// request for a Module param
 800a138:	2b02      	cmp	r3, #2
 800a13a:	d01d      	beq.n	800a178 <PxMessagingTask+0xcd8>
								else if(cMessage[port-1][shift]>=REMOTE_BOS_VAR)			// request for a BOS var
 800a13c:	d801      	bhi.n	800a142 <PxMessagingTask+0xca2>
 800a13e:	f000 fca3 	bl	800aa88 <PxMessagingTask+0x15e8>
									messageParams[0] = BOS_var_reg[cMessage[port-1][shift]-REMOTE_BOS_VAR-1]&0x000F;					// send variable format (lower 4 bits)
 800a142:	001d      	movs	r5, r3
 800a144:	3d04      	subs	r5, #4
 800a146:	00ad      	lsls	r5, r5, #2
 800a148:	4b94      	ldr	r3, [pc, #592]	; (800a39c <PxMessagingTask+0xefc>)
 800a14a:	58ea      	ldr	r2, [r5, r3]
 800a14c:	250f      	movs	r5, #15
 800a14e:	4015      	ands	r5, r2
 800a150:	46aa      	mov	sl, r5
 800a152:	4b91      	ldr	r3, [pc, #580]	; (800a398 <PxMessagingTask+0xef8>)
 800a154:	701d      	strb	r5, [r3, #0]
									if (messageParams[0] == 0) {																					// Variable does not exist
 800a156:	d100      	bne.n	800a15a <PxMessagingTask+0xcba>
 800a158:	e0af      	b.n	800a2ba <PxMessagingTask+0xe1a>
										temp32 = (BOS_var_reg[cMessage[port-1][shift]-REMOTE_BOS_VAR-1]>>16) + SRAM_BASE;
 800a15a:	0c12      	lsrs	r2, r2, #16
 800a15c:	2380      	movs	r3, #128	; 0x80
 800a15e:	059b      	lsls	r3, r3, #22
 800a160:	18d3      	adds	r3, r2, r3
										switch (messageParams[0])											// requested format
 800a162:	3d01      	subs	r5, #1
 800a164:	b2e9      	uxtb	r1, r5
 800a166:	2907      	cmp	r1, #7
 800a168:	d901      	bls.n	800a16e <PxMessagingTask+0xcce>
 800a16a:	f000 fc7c 	bl	800aa66 <PxMessagingTask+0x15c6>
 800a16e:	b2ed      	uxtb	r5, r5
 800a170:	00ad      	lsls	r5, r5, #2
 800a172:	498b      	ldr	r1, [pc, #556]	; (800a3a0 <PxMessagingTask+0xf00>)
 800a174:	5949      	ldr	r1, [r1, r5]
 800a176:	468f      	mov	pc, r1
									cMessage[port-1][messageLength[port-1]-1] = 0;		 // adding string termination
 800a178:	4b84      	ldr	r3, [pc, #528]	; (800a38c <PxMessagingTask+0xeec>)
 800a17a:	2038      	movs	r0, #56	; 0x38
 800a17c:	4360      	muls	r0, r4
 800a17e:	1818      	adds	r0, r3, r0
 800a180:	1841      	adds	r1, r0, r1
 800a182:	3901      	subs	r1, #1
 800a184:	2000      	movs	r0, #0
 800a186:	7008      	strb	r0, [r1, #0]
									temp=IsModuleParameter((char *)&cMessage[port-1][1+shift]);          // extrating module parameter
 800a188:	1c68      	adds	r0, r5, #1
 800a18a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a18c:	4694      	mov	ip, r2
 800a18e:	4460      	add	r0, ip
 800a190:	18c0      	adds	r0, r0, r3
 800a192:	f7f9 f9fd 	bl	8003590 <IsModuleParameter>
 800a196:	1e05      	subs	r5, r0, #0
 800a198:	900b      	str	r0, [sp, #44]	; 0x2c
									if (temp == 0) {																					// Parameter does not exist
 800a19a:	d013      	beq.n	800a1c4 <PxMessagingTask+0xd24>
										temp32 = (uint32_t) modParam[temp-1].paramPtr;
 800a19c:	3d01      	subs	r5, #1
 800a19e:	4a81      	ldr	r2, [pc, #516]	; (800a3a4 <PxMessagingTask+0xf04>)
 800a1a0:	230c      	movs	r3, #12
 800a1a2:	435d      	muls	r5, r3
 800a1a4:	58ab      	ldr	r3, [r5, r2]
										messageParams[0] = modParam[temp-1].paramFormat;
 800a1a6:	1952      	adds	r2, r2, r5
 800a1a8:	7912      	ldrb	r2, [r2, #4]
 800a1aa:	497b      	ldr	r1, [pc, #492]	; (800a398 <PxMessagingTask+0xef8>)
 800a1ac:	700a      	strb	r2, [r1, #0]
									switch (messageParams[0])											// requested format
 800a1ae:	3a01      	subs	r2, #1
 800a1b0:	b2d1      	uxtb	r1, r2
 800a1b2:	2907      	cmp	r1, #7
 800a1b4:	d901      	bls.n	800a1ba <PxMessagingTask+0xd1a>
 800a1b6:	f000 fc52 	bl	800aa5e <PxMessagingTask+0x15be>
 800a1ba:	b2d2      	uxtb	r2, r2
 800a1bc:	0092      	lsls	r2, r2, #2
 800a1be:	497a      	ldr	r1, [pc, #488]	; (800a3a8 <PxMessagingTask+0xf08>)
 800a1c0:	588a      	ldr	r2, [r1, r2]
 800a1c2:	4697      	mov	pc, r2
									SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 1);							
 800a1c4:	2201      	movs	r2, #1
 800a1c6:	211f      	movs	r1, #31
 800a1c8:	9807      	ldr	r0, [sp, #28]
 800a1ca:	f7fe fe89 	bl	8008ee0 <SendMessageToModule>
 800a1ce:	46aa      	mov	sl, r5
 800a1d0:	f7ff f99f 	bl	8009512 <PxMessagingTask+0x72>
											messageParams[1] = *(__IO uint8_t *)temp32; 
 800a1d4:	781a      	ldrb	r2, [r3, #0]
 800a1d6:	4b70      	ldr	r3, [pc, #448]	; (800a398 <PxMessagingTask+0xef8>)
 800a1d8:	705a      	strb	r2, [r3, #1]
											SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 2); break;
 800a1da:	2202      	movs	r2, #2
 800a1dc:	211f      	movs	r1, #31
 800a1de:	9807      	ldr	r0, [sp, #28]
 800a1e0:	f7fe fe7e 	bl	8008ee0 <SendMessageToModule>
 800a1e4:	2300      	movs	r3, #0
 800a1e6:	469a      	mov	sl, r3
 800a1e8:	f7ff f993 	bl	8009512 <PxMessagingTask+0x72>
											messageParams[1] = *(__IO int8_t *)temp32; 
 800a1ec:	781a      	ldrb	r2, [r3, #0]
 800a1ee:	4b6a      	ldr	r3, [pc, #424]	; (800a398 <PxMessagingTask+0xef8>)
 800a1f0:	705a      	strb	r2, [r3, #1]
											SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 2); break;
 800a1f2:	2202      	movs	r2, #2
 800a1f4:	211f      	movs	r1, #31
 800a1f6:	9807      	ldr	r0, [sp, #28]
 800a1f8:	f7fe fe72 	bl	8008ee0 <SendMessageToModule>
 800a1fc:	2300      	movs	r3, #0
 800a1fe:	469a      	mov	sl, r3
 800a200:	f7ff f987 	bl	8009512 <PxMessagingTask+0x72>
											messageParams[1] = (uint8_t)((*(__IO uint16_t *)temp32)>>0); messageParams[2] = (uint8_t)((*(__IO uint16_t *)temp32)>>8); 
 800a204:	8819      	ldrh	r1, [r3, #0]
 800a206:	4a64      	ldr	r2, [pc, #400]	; (800a398 <PxMessagingTask+0xef8>)
 800a208:	7051      	strb	r1, [r2, #1]
 800a20a:	881b      	ldrh	r3, [r3, #0]
 800a20c:	0a1b      	lsrs	r3, r3, #8
 800a20e:	7093      	strb	r3, [r2, #2]
											SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 3); break;
 800a210:	2203      	movs	r2, #3
 800a212:	211f      	movs	r1, #31
 800a214:	9807      	ldr	r0, [sp, #28]
 800a216:	f7fe fe63 	bl	8008ee0 <SendMessageToModule>
 800a21a:	2300      	movs	r3, #0
 800a21c:	469a      	mov	sl, r3
 800a21e:	f7ff f978 	bl	8009512 <PxMessagingTask+0x72>
											messageParams[1] = (uint8_t)((*(__IO int16_t *)temp32)>>0); messageParams[2] = (uint8_t)((*(__IO int16_t *)temp32)>>8); 
 800a222:	8819      	ldrh	r1, [r3, #0]
 800a224:	4a5c      	ldr	r2, [pc, #368]	; (800a398 <PxMessagingTask+0xef8>)
 800a226:	7051      	strb	r1, [r2, #1]
 800a228:	881b      	ldrh	r3, [r3, #0]
 800a22a:	b21b      	sxth	r3, r3
 800a22c:	121b      	asrs	r3, r3, #8
 800a22e:	7093      	strb	r3, [r2, #2]
											SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 3); break;
 800a230:	2203      	movs	r2, #3
 800a232:	211f      	movs	r1, #31
 800a234:	9807      	ldr	r0, [sp, #28]
 800a236:	f7fe fe53 	bl	8008ee0 <SendMessageToModule>
 800a23a:	2300      	movs	r3, #0
 800a23c:	469a      	mov	sl, r3
 800a23e:	f7ff f968 	bl	8009512 <PxMessagingTask+0x72>
											messageParams[1] = (uint8_t)((*(__IO uint32_t *)temp32)>>0); messageParams[2] = (uint8_t)((*(__IO uint32_t *)temp32)>>8); 
 800a242:	6819      	ldr	r1, [r3, #0]
 800a244:	4a54      	ldr	r2, [pc, #336]	; (800a398 <PxMessagingTask+0xef8>)
 800a246:	7051      	strb	r1, [r2, #1]
 800a248:	6819      	ldr	r1, [r3, #0]
 800a24a:	0a09      	lsrs	r1, r1, #8
 800a24c:	7091      	strb	r1, [r2, #2]
											messageParams[3] = (uint8_t)((*(__IO uint32_t *)temp32)>>16); messageParams[4] = (uint8_t)((*(__IO uint32_t *)temp32)>>24); 
 800a24e:	6819      	ldr	r1, [r3, #0]
 800a250:	0c09      	lsrs	r1, r1, #16
 800a252:	70d1      	strb	r1, [r2, #3]
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	0e1b      	lsrs	r3, r3, #24
 800a258:	7113      	strb	r3, [r2, #4]
											SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 5); break;
 800a25a:	2205      	movs	r2, #5
 800a25c:	211f      	movs	r1, #31
 800a25e:	9807      	ldr	r0, [sp, #28]
 800a260:	f7fe fe3e 	bl	8008ee0 <SendMessageToModule>
 800a264:	2300      	movs	r3, #0
 800a266:	469a      	mov	sl, r3
 800a268:	f7ff f953 	bl	8009512 <PxMessagingTask+0x72>
											messageParams[1] = (uint8_t)((*(__IO int32_t *)temp32)>>0); messageParams[2] = (uint8_t)((*(__IO int32_t *)temp32)>>8); 
 800a26c:	6819      	ldr	r1, [r3, #0]
 800a26e:	4a4a      	ldr	r2, [pc, #296]	; (800a398 <PxMessagingTask+0xef8>)
 800a270:	7051      	strb	r1, [r2, #1]
 800a272:	6819      	ldr	r1, [r3, #0]
 800a274:	1209      	asrs	r1, r1, #8
 800a276:	7091      	strb	r1, [r2, #2]
											messageParams[3] = (uint8_t)((*(__IO int32_t *)temp32)>>16); messageParams[4] = (uint8_t)((*(__IO int32_t *)temp32)>>24);
 800a278:	6819      	ldr	r1, [r3, #0]
 800a27a:	1409      	asrs	r1, r1, #16
 800a27c:	70d1      	strb	r1, [r2, #3]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	161b      	asrs	r3, r3, #24
 800a282:	7113      	strb	r3, [r2, #4]
											SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 5); break;										
 800a284:	2205      	movs	r2, #5
 800a286:	211f      	movs	r1, #31
 800a288:	9807      	ldr	r0, [sp, #28]
 800a28a:	f7fe fe29 	bl	8008ee0 <SendMessageToModule>
 800a28e:	2300      	movs	r3, #0
 800a290:	469a      	mov	sl, r3
 800a292:	f7ff f93e 	bl	8009512 <PxMessagingTask+0x72>
											messageParams[1] = *(__IO uint8_t *)(temp32+0); messageParams[2] = *(__IO uint8_t *)(temp32+1);  
 800a296:	7819      	ldrb	r1, [r3, #0]
 800a298:	4a3f      	ldr	r2, [pc, #252]	; (800a398 <PxMessagingTask+0xef8>)
 800a29a:	7051      	strb	r1, [r2, #1]
 800a29c:	7859      	ldrb	r1, [r3, #1]
 800a29e:	7091      	strb	r1, [r2, #2]
											messageParams[3] = *(__IO uint8_t *)(temp32+2); messageParams[4] = *(__IO uint8_t *)(temp32+3);  			// You cannot bitwise floats	
 800a2a0:	7899      	ldrb	r1, [r3, #2]
 800a2a2:	70d1      	strb	r1, [r2, #3]
 800a2a4:	78db      	ldrb	r3, [r3, #3]
 800a2a6:	7113      	strb	r3, [r2, #4]
											SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 9); break;			
 800a2a8:	2209      	movs	r2, #9
 800a2aa:	211f      	movs	r1, #31
 800a2ac:	9807      	ldr	r0, [sp, #28]
 800a2ae:	f7fe fe17 	bl	8008ee0 <SendMessageToModule>
 800a2b2:	2300      	movs	r3, #0
 800a2b4:	469a      	mov	sl, r3
 800a2b6:	f7ff f92c 	bl	8009512 <PxMessagingTask+0x72>
										SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 1);							
 800a2ba:	2201      	movs	r2, #1
 800a2bc:	211f      	movs	r1, #31
 800a2be:	9807      	ldr	r0, [sp, #28]
 800a2c0:	f7fe fe0e 	bl	8008ee0 <SendMessageToModule>
 800a2c4:	f7ff f925 	bl	8009512 <PxMessagingTask+0x72>
												messageParams[1] = *(__IO uint8_t *)temp32; 
 800a2c8:	781a      	ldrb	r2, [r3, #0]
 800a2ca:	4b33      	ldr	r3, [pc, #204]	; (800a398 <PxMessagingTask+0xef8>)
 800a2cc:	705a      	strb	r2, [r3, #1]
												SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 2); break;
 800a2ce:	2202      	movs	r2, #2
 800a2d0:	211f      	movs	r1, #31
 800a2d2:	9807      	ldr	r0, [sp, #28]
 800a2d4:	f7fe fe04 	bl	8008ee0 <SendMessageToModule>
 800a2d8:	2300      	movs	r3, #0
 800a2da:	469a      	mov	sl, r3
 800a2dc:	f7ff f919 	bl	8009512 <PxMessagingTask+0x72>
												messageParams[1] = *(__IO int8_t *)temp32; 
 800a2e0:	781a      	ldrb	r2, [r3, #0]
 800a2e2:	4b2d      	ldr	r3, [pc, #180]	; (800a398 <PxMessagingTask+0xef8>)
 800a2e4:	705a      	strb	r2, [r3, #1]
												SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 2); break;
 800a2e6:	2202      	movs	r2, #2
 800a2e8:	211f      	movs	r1, #31
 800a2ea:	9807      	ldr	r0, [sp, #28]
 800a2ec:	f7fe fdf8 	bl	8008ee0 <SendMessageToModule>
 800a2f0:	2300      	movs	r3, #0
 800a2f2:	469a      	mov	sl, r3
 800a2f4:	f7ff f90d 	bl	8009512 <PxMessagingTask+0x72>
												messageParams[1] = (uint8_t)((*(__IO uint16_t *)temp32)>>0); messageParams[2] = (uint8_t)((*(__IO uint16_t *)temp32)>>8); 
 800a2f8:	8819      	ldrh	r1, [r3, #0]
 800a2fa:	4a27      	ldr	r2, [pc, #156]	; (800a398 <PxMessagingTask+0xef8>)
 800a2fc:	7051      	strb	r1, [r2, #1]
 800a2fe:	881b      	ldrh	r3, [r3, #0]
 800a300:	0a1b      	lsrs	r3, r3, #8
 800a302:	7093      	strb	r3, [r2, #2]
												SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 3); break;
 800a304:	2203      	movs	r2, #3
 800a306:	211f      	movs	r1, #31
 800a308:	9807      	ldr	r0, [sp, #28]
 800a30a:	f7fe fde9 	bl	8008ee0 <SendMessageToModule>
 800a30e:	2300      	movs	r3, #0
 800a310:	469a      	mov	sl, r3
 800a312:	f7ff f8fe 	bl	8009512 <PxMessagingTask+0x72>
												messageParams[1] = (uint8_t)((*(__IO int16_t *)temp32)>>0); messageParams[2] = (uint8_t)((*(__IO int16_t *)temp32)>>8); 
 800a316:	8819      	ldrh	r1, [r3, #0]
 800a318:	4a1f      	ldr	r2, [pc, #124]	; (800a398 <PxMessagingTask+0xef8>)
 800a31a:	7051      	strb	r1, [r2, #1]
 800a31c:	881b      	ldrh	r3, [r3, #0]
 800a31e:	b21b      	sxth	r3, r3
 800a320:	121b      	asrs	r3, r3, #8
 800a322:	7093      	strb	r3, [r2, #2]
												SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 3); break;
 800a324:	2203      	movs	r2, #3
 800a326:	211f      	movs	r1, #31
 800a328:	9807      	ldr	r0, [sp, #28]
 800a32a:	f7fe fdd9 	bl	8008ee0 <SendMessageToModule>
 800a32e:	2300      	movs	r3, #0
 800a330:	469a      	mov	sl, r3
 800a332:	f7ff f8ee 	bl	8009512 <PxMessagingTask+0x72>
												messageParams[1] = (uint8_t)((*(__IO uint32_t *)temp32)>>0); messageParams[2] = (uint8_t)((*(__IO uint32_t *)temp32)>>8); 
 800a336:	6819      	ldr	r1, [r3, #0]
 800a338:	4a17      	ldr	r2, [pc, #92]	; (800a398 <PxMessagingTask+0xef8>)
 800a33a:	7051      	strb	r1, [r2, #1]
 800a33c:	6819      	ldr	r1, [r3, #0]
 800a33e:	0a09      	lsrs	r1, r1, #8
 800a340:	7091      	strb	r1, [r2, #2]
												messageParams[3] = (uint8_t)((*(__IO uint32_t *)temp32)>>16); messageParams[4] = (uint8_t)((*(__IO uint32_t *)temp32)>>24); 
 800a342:	6819      	ldr	r1, [r3, #0]
 800a344:	0c09      	lsrs	r1, r1, #16
 800a346:	70d1      	strb	r1, [r2, #3]
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	0e1b      	lsrs	r3, r3, #24
 800a34c:	7113      	strb	r3, [r2, #4]
												SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 5); break;
 800a34e:	2205      	movs	r2, #5
 800a350:	211f      	movs	r1, #31
 800a352:	9807      	ldr	r0, [sp, #28]
 800a354:	f7fe fdc4 	bl	8008ee0 <SendMessageToModule>
 800a358:	2300      	movs	r3, #0
 800a35a:	469a      	mov	sl, r3
 800a35c:	f7ff f8d9 	bl	8009512 <PxMessagingTask+0x72>
												messageParams[1] = (uint8_t)((*(__IO int32_t *)temp32)>>0); messageParams[2] = (uint8_t)((*(__IO int32_t *)temp32)>>8); 
 800a360:	6819      	ldr	r1, [r3, #0]
 800a362:	4a0d      	ldr	r2, [pc, #52]	; (800a398 <PxMessagingTask+0xef8>)
 800a364:	7051      	strb	r1, [r2, #1]
 800a366:	6819      	ldr	r1, [r3, #0]
 800a368:	1209      	asrs	r1, r1, #8
 800a36a:	7091      	strb	r1, [r2, #2]
												messageParams[3] = (uint8_t)((*(__IO int32_t *)temp32)>>16); messageParams[4] = (uint8_t)((*(__IO int32_t *)temp32)>>24);
 800a36c:	6819      	ldr	r1, [r3, #0]
 800a36e:	1409      	asrs	r1, r1, #16
 800a370:	70d1      	strb	r1, [r2, #3]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	161b      	asrs	r3, r3, #24
 800a376:	7113      	strb	r3, [r2, #4]
												SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 5); break;										
 800a378:	2205      	movs	r2, #5
 800a37a:	211f      	movs	r1, #31
 800a37c:	9807      	ldr	r0, [sp, #28]
 800a37e:	f7fe fdaf 	bl	8008ee0 <SendMessageToModule>
 800a382:	2300      	movs	r3, #0
 800a384:	469a      	mov	sl, r3
 800a386:	f7ff f8c4 	bl	8009512 <PxMessagingTask+0x72>
 800a38a:	46c0      	nop			; (mov r8, r8)
 800a38c:	200007d8 	.word	0x200007d8
 800a390:	20000b04 	.word	0x20000b04
 800a394:	0801c278 	.word	0x0801c278
 800a398:	200009d0 	.word	0x200009d0
 800a39c:	200062f0 	.word	0x200062f0
 800a3a0:	0801c298 	.word	0x0801c298
 800a3a4:	20000088 	.word	0x20000088
 800a3a8:	0801c2b8 	.word	0x0801c2b8
												messageParams[1] = *(__IO uint8_t *)(temp32+0); messageParams[2] = *(__IO uint8_t *)(temp32+1); 
 800a3ac:	7819      	ldrb	r1, [r3, #0]
 800a3ae:	4bd8      	ldr	r3, [pc, #864]	; (800a710 <PxMessagingTask+0x1270>)
 800a3b0:	7059      	strb	r1, [r3, #1]
 800a3b2:	49d8      	ldr	r1, [pc, #864]	; (800a714 <PxMessagingTask+0x1274>)
 800a3b4:	1851      	adds	r1, r2, r1
 800a3b6:	7809      	ldrb	r1, [r1, #0]
 800a3b8:	7099      	strb	r1, [r3, #2]
												messageParams[3] = *(__IO uint8_t *)(temp32+2); messageParams[4] = *(__IO uint8_t *)(temp32+3);  			// You cannot bitwise floats	
 800a3ba:	49d7      	ldr	r1, [pc, #860]	; (800a718 <PxMessagingTask+0x1278>)
 800a3bc:	1851      	adds	r1, r2, r1
 800a3be:	7809      	ldrb	r1, [r1, #0]
 800a3c0:	70d9      	strb	r1, [r3, #3]
 800a3c2:	49d6      	ldr	r1, [pc, #856]	; (800a71c <PxMessagingTask+0x127c>)
 800a3c4:	468c      	mov	ip, r1
 800a3c6:	4462      	add	r2, ip
 800a3c8:	7812      	ldrb	r2, [r2, #0]
 800a3ca:	711a      	strb	r2, [r3, #4]
												SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 9); break;			
 800a3cc:	2209      	movs	r2, #9
 800a3ce:	211f      	movs	r1, #31
 800a3d0:	9807      	ldr	r0, [sp, #28]
 800a3d2:	f7fe fd85 	bl	8008ee0 <SendMessageToModule>
 800a3d6:	2300      	movs	r3, #0
 800a3d8:	469a      	mov	sl, r3
 800a3da:	f7ff f89a 	bl	8009512 <PxMessagingTask+0x72>
							if (remoteBuffer == REMOTE_BOS_VAR || remoteBuffer == REMOTE_MODULE_PARAM)				// We requested a BOS variable or module param
 800a3de:	4bd0      	ldr	r3, [pc, #832]	; (800a720 <PxMessagingTask+0x1280>)
 800a3e0:	681a      	ldr	r2, [r3, #0]
 800a3e2:	685b      	ldr	r3, [r3, #4]
 800a3e4:	2002      	movs	r0, #2
 800a3e6:	4240      	negs	r0, r0
 800a3e8:	17c1      	asrs	r1, r0, #31
 800a3ea:	1812      	adds	r2, r2, r0
 800a3ec:	414b      	adcs	r3, r1
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d00a      	beq.n	800a408 <PxMessagingTask+0xf68>
							if (responseStatus != BOS_ERR_REMOTE_READ_NO_VAR)	responseStatus = BOS_OK;
 800a3f2:	4bcc      	ldr	r3, [pc, #816]	; (800a724 <PxMessagingTask+0x1284>)
 800a3f4:	781b      	ldrb	r3, [r3, #0]
 800a3f6:	2b10      	cmp	r3, #16
 800a3f8:	d100      	bne.n	800a3fc <PxMessagingTask+0xf5c>
 800a3fa:	e349      	b.n	800aa90 <PxMessagingTask+0x15f0>
 800a3fc:	2500      	movs	r5, #0
 800a3fe:	4bc9      	ldr	r3, [pc, #804]	; (800a724 <PxMessagingTask+0x1284>)
 800a400:	701d      	strb	r5, [r3, #0]
 800a402:	46aa      	mov	sl, r5
 800a404:	f7ff f885 	bl	8009512 <PxMessagingTask+0x72>
							if (remoteBuffer == REMOTE_BOS_VAR || remoteBuffer == REMOTE_MODULE_PARAM)				// We requested a BOS variable or module param
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d101      	bne.n	800a410 <PxMessagingTask+0xf70>
 800a40c:	2a01      	cmp	r2, #1
 800a40e:	d8f0      	bhi.n	800a3f2 <PxMessagingTask+0xf52>
								remoteVarFormat = (varFormat_t) cMessage[port-1][shift];
 800a410:	2138      	movs	r1, #56	; 0x38
 800a412:	4361      	muls	r1, r4
 800a414:	4ac4      	ldr	r2, [pc, #784]	; (800a728 <PxMessagingTask+0x1288>)
 800a416:	1852      	adds	r2, r2, r1
 800a418:	5d52      	ldrb	r2, [r2, r5]
 800a41a:	4692      	mov	sl, r2
 800a41c:	4ac3      	ldr	r2, [pc, #780]	; (800a72c <PxMessagingTask+0x128c>)
 800a41e:	4651      	mov	r1, sl
 800a420:	7011      	strb	r1, [r2, #0]
								switch (cMessage[port-1][shift])											// Remote format
 800a422:	2908      	cmp	r1, #8
 800a424:	d8e5      	bhi.n	800a3f2 <PxMessagingTask+0xf52>
 800a426:	008a      	lsls	r2, r1, #2
 800a428:	49c1      	ldr	r1, [pc, #772]	; (800a730 <PxMessagingTask+0x1290>)
 800a42a:	588a      	ldr	r2, [r1, r2]
 800a42c:	4697      	mov	pc, r2
										responseStatus = BOS_ERR_REMOTE_READ_NO_VAR; break;
 800a42e:	4bbd      	ldr	r3, [pc, #756]	; (800a724 <PxMessagingTask+0x1284>)
 800a430:	2210      	movs	r2, #16
 800a432:	701a      	strb	r2, [r3, #0]
							if (responseStatus != BOS_ERR_REMOTE_READ_NO_VAR)	responseStatus = BOS_OK;
 800a434:	f7ff f86d 	bl	8009512 <PxMessagingTask+0x72>
										remoteBuffer = cMessage[port-1][1+shift]; break;
 800a438:	4ab9      	ldr	r2, [pc, #740]	; (800a720 <PxMessagingTask+0x1280>)
 800a43a:	2038      	movs	r0, #56	; 0x38
 800a43c:	4360      	muls	r0, r4
 800a43e:	49ba      	ldr	r1, [pc, #744]	; (800a728 <PxMessagingTask+0x1288>)
 800a440:	1809      	adds	r1, r1, r0
 800a442:	1949      	adds	r1, r1, r5
 800a444:	784b      	ldrb	r3, [r1, #1]
 800a446:	6013      	str	r3, [r2, #0]
 800a448:	2300      	movs	r3, #0
 800a44a:	6053      	str	r3, [r2, #4]
 800a44c:	e7d1      	b.n	800a3f2 <PxMessagingTask+0xf52>
										remoteBuffer = (int8_t)cMessage[port-1][1+shift]; break;
 800a44e:	4ab4      	ldr	r2, [pc, #720]	; (800a720 <PxMessagingTask+0x1280>)
 800a450:	2038      	movs	r0, #56	; 0x38
 800a452:	4360      	muls	r0, r4
 800a454:	49b4      	ldr	r1, [pc, #720]	; (800a728 <PxMessagingTask+0x1288>)
 800a456:	1809      	adds	r1, r1, r0
 800a458:	1949      	adds	r1, r1, r5
 800a45a:	2301      	movs	r3, #1
 800a45c:	56cb      	ldrsb	r3, [r1, r3]
 800a45e:	6013      	str	r3, [r2, #0]
 800a460:	17db      	asrs	r3, r3, #31
 800a462:	6053      	str	r3, [r2, #4]
 800a464:	e7c5      	b.n	800a3f2 <PxMessagingTask+0xf52>
										remoteBuffer = ((uint16_t)cMessage[port-1][1+shift]<<0) + ((uint16_t)cMessage[port-1][2+shift]<<8); break;
 800a466:	4aae      	ldr	r2, [pc, #696]	; (800a720 <PxMessagingTask+0x1280>)
 800a468:	2038      	movs	r0, #56	; 0x38
 800a46a:	4360      	muls	r0, r4
 800a46c:	49ae      	ldr	r1, [pc, #696]	; (800a728 <PxMessagingTask+0x1288>)
 800a46e:	1809      	adds	r1, r1, r0
 800a470:	1949      	adds	r1, r1, r5
 800a472:	788b      	ldrb	r3, [r1, #2]
 800a474:	021b      	lsls	r3, r3, #8
 800a476:	7849      	ldrb	r1, [r1, #1]
 800a478:	185b      	adds	r3, r3, r1
 800a47a:	6013      	str	r3, [r2, #0]
 800a47c:	17db      	asrs	r3, r3, #31
 800a47e:	6053      	str	r3, [r2, #4]
 800a480:	e7b7      	b.n	800a3f2 <PxMessagingTask+0xf52>
										remoteBuffer = ((int16_t)cMessage[port-1][1+shift]<<0) + ((int16_t)cMessage[port-1][2+shift]<<8); break;
 800a482:	4aa7      	ldr	r2, [pc, #668]	; (800a720 <PxMessagingTask+0x1280>)
 800a484:	2038      	movs	r0, #56	; 0x38
 800a486:	4360      	muls	r0, r4
 800a488:	49a7      	ldr	r1, [pc, #668]	; (800a728 <PxMessagingTask+0x1288>)
 800a48a:	1809      	adds	r1, r1, r0
 800a48c:	1949      	adds	r1, r1, r5
 800a48e:	788b      	ldrb	r3, [r1, #2]
 800a490:	021b      	lsls	r3, r3, #8
 800a492:	7849      	ldrb	r1, [r1, #1]
 800a494:	185b      	adds	r3, r3, r1
 800a496:	6013      	str	r3, [r2, #0]
 800a498:	17db      	asrs	r3, r3, #31
 800a49a:	6053      	str	r3, [r2, #4]
 800a49c:	e7a9      	b.n	800a3f2 <PxMessagingTask+0xf52>
										remoteBuffer = ((uint32_t)cMessage[port-1][1+shift]<<0) + ((uint32_t)cMessage[port-1][2+shift]<<8) + ((uint32_t)cMessage[port-1][3+shift]<<16) + ((uint32_t)cMessage[port-1][4+shift]<<24); break;
 800a49e:	4aa0      	ldr	r2, [pc, #640]	; (800a720 <PxMessagingTask+0x1280>)
 800a4a0:	2038      	movs	r0, #56	; 0x38
 800a4a2:	4360      	muls	r0, r4
 800a4a4:	49a0      	ldr	r1, [pc, #640]	; (800a728 <PxMessagingTask+0x1288>)
 800a4a6:	1809      	adds	r1, r1, r0
 800a4a8:	1949      	adds	r1, r1, r5
 800a4aa:	788b      	ldrb	r3, [r1, #2]
 800a4ac:	021b      	lsls	r3, r3, #8
 800a4ae:	78c8      	ldrb	r0, [r1, #3]
 800a4b0:	0400      	lsls	r0, r0, #16
 800a4b2:	181b      	adds	r3, r3, r0
 800a4b4:	7848      	ldrb	r0, [r1, #1]
 800a4b6:	181b      	adds	r3, r3, r0
 800a4b8:	7909      	ldrb	r1, [r1, #4]
 800a4ba:	0609      	lsls	r1, r1, #24
 800a4bc:	185b      	adds	r3, r3, r1
 800a4be:	6013      	str	r3, [r2, #0]
 800a4c0:	2300      	movs	r3, #0
 800a4c2:	6053      	str	r3, [r2, #4]
 800a4c4:	e795      	b.n	800a3f2 <PxMessagingTask+0xf52>
										remoteBuffer = ((int32_t)cMessage[port-1][1+shift]<<0) + ((int32_t)cMessage[port-1][2+shift]<<8) + ((int32_t)cMessage[port-1][3+shift]<<16) + ((int32_t)cMessage[port-1][4+shift]<<24); break;									
 800a4c6:	4a96      	ldr	r2, [pc, #600]	; (800a720 <PxMessagingTask+0x1280>)
 800a4c8:	2038      	movs	r0, #56	; 0x38
 800a4ca:	4360      	muls	r0, r4
 800a4cc:	4996      	ldr	r1, [pc, #600]	; (800a728 <PxMessagingTask+0x1288>)
 800a4ce:	1809      	adds	r1, r1, r0
 800a4d0:	1949      	adds	r1, r1, r5
 800a4d2:	788b      	ldrb	r3, [r1, #2]
 800a4d4:	021b      	lsls	r3, r3, #8
 800a4d6:	7848      	ldrb	r0, [r1, #1]
 800a4d8:	181b      	adds	r3, r3, r0
 800a4da:	78c8      	ldrb	r0, [r1, #3]
 800a4dc:	0400      	lsls	r0, r0, #16
 800a4de:	181b      	adds	r3, r3, r0
 800a4e0:	7909      	ldrb	r1, [r1, #4]
 800a4e2:	0609      	lsls	r1, r1, #24
 800a4e4:	185b      	adds	r3, r3, r1
 800a4e6:	6013      	str	r3, [r2, #0]
 800a4e8:	17db      	asrs	r3, r3, #31
 800a4ea:	6053      	str	r3, [r2, #4]
 800a4ec:	e781      	b.n	800a3f2 <PxMessagingTask+0xf52>
										remoteBuffer = ((uint32_t)cMessage[port-1][1+shift]<<0) + ((uint32_t)cMessage[port-1][2+shift]<<8) + ((uint32_t)cMessage[port-1][3+shift]<<16) + ((uint32_t)cMessage[port-1][4+shift]<<24); break;
 800a4ee:	4a8c      	ldr	r2, [pc, #560]	; (800a720 <PxMessagingTask+0x1280>)
 800a4f0:	2038      	movs	r0, #56	; 0x38
 800a4f2:	4360      	muls	r0, r4
 800a4f4:	498c      	ldr	r1, [pc, #560]	; (800a728 <PxMessagingTask+0x1288>)
 800a4f6:	1809      	adds	r1, r1, r0
 800a4f8:	1949      	adds	r1, r1, r5
 800a4fa:	788b      	ldrb	r3, [r1, #2]
 800a4fc:	021b      	lsls	r3, r3, #8
 800a4fe:	78c8      	ldrb	r0, [r1, #3]
 800a500:	0400      	lsls	r0, r0, #16
 800a502:	181b      	adds	r3, r3, r0
 800a504:	7848      	ldrb	r0, [r1, #1]
 800a506:	181b      	adds	r3, r3, r0
 800a508:	7909      	ldrb	r1, [r1, #4]
 800a50a:	0609      	lsls	r1, r1, #24
 800a50c:	185b      	adds	r3, r3, r1
 800a50e:	6013      	str	r3, [r2, #0]
 800a510:	2300      	movs	r3, #0
 800a512:	6053      	str	r3, [r2, #4]
 800a514:	e76d      	b.n	800a3f2 <PxMessagingTask+0xf52>
							responseStatus = BOS_OK;		// Initialize response
 800a516:	4b83      	ldr	r3, [pc, #524]	; (800a724 <PxMessagingTask+0x1284>)
 800a518:	2200      	movs	r2, #0
 800a51a:	701a      	strb	r2, [r3, #0]
							if(cMessage[port-1][shift])			// request for a BOS var
 800a51c:	46a8      	mov	r8, r5
 800a51e:	4b82      	ldr	r3, [pc, #520]	; (800a728 <PxMessagingTask+0x1288>)
 800a520:	199b      	adds	r3, r3, r6
 800a522:	5d5b      	ldrb	r3, [r3, r5]
 800a524:	2b00      	cmp	r3, #0
 800a526:	d100      	bne.n	800a52a <PxMessagingTask+0x108a>
 800a528:	e12e      	b.n	800a788 <PxMessagingTask+0x12e8>
								if(cMessage[port-1][shift] <= MAX_BOS_VARS)
 800a52a:	2b1e      	cmp	r3, #30
 800a52c:	d900      	bls.n	800a530 <PxMessagingTask+0x1090>
 800a52e:	e113      	b.n	800a758 <PxMessagingTask+0x12b8>
									temp32 = (BOS_var_reg[cMessage[port-1][shift]-1]>>16) + SRAM_BASE;				// Get var memory addres
 800a530:	1e5d      	subs	r5, r3, #1
 800a532:	00aa      	lsls	r2, r5, #2
 800a534:	4b7f      	ldr	r3, [pc, #508]	; (800a734 <PxMessagingTask+0x1294>)
 800a536:	58d2      	ldr	r2, [r2, r3]
 800a538:	0c13      	lsrs	r3, r2, #16
 800a53a:	2180      	movs	r1, #128	; 0x80
 800a53c:	0589      	lsls	r1, r1, #22
 800a53e:	468c      	mov	ip, r1
 800a540:	4463      	add	r3, ip
									switch (cMessage[port-1][1+shift])											// requested format
 800a542:	2101      	movs	r1, #1
 800a544:	4441      	add	r1, r8
 800a546:	4689      	mov	r9, r1
 800a548:	2038      	movs	r0, #56	; 0x38
 800a54a:	4360      	muls	r0, r4
 800a54c:	4976      	ldr	r1, [pc, #472]	; (800a728 <PxMessagingTask+0x1288>)
 800a54e:	1809      	adds	r1, r1, r0
 800a550:	4648      	mov	r0, r9
 800a552:	5c09      	ldrb	r1, [r1, r0]
 800a554:	468a      	mov	sl, r1
 800a556:	3901      	subs	r1, #1
 800a558:	b2c8      	uxtb	r0, r1
 800a55a:	2807      	cmp	r0, #7
 800a55c:	d80d      	bhi.n	800a57a <PxMessagingTask+0x10da>
 800a55e:	b2c9      	uxtb	r1, r1
 800a560:	0089      	lsls	r1, r1, #2
 800a562:	4875      	ldr	r0, [pc, #468]	; (800a738 <PxMessagingTask+0x1298>)
 800a564:	5841      	ldr	r1, [r0, r1]
 800a566:	468f      	mov	pc, r1
											if ((BOS_var_reg[cMessage[port-1][shift]-1]&0x000F) == 0) {		// Variable does not exist																															
 800a568:	0712      	lsls	r2, r2, #28
 800a56a:	d022      	beq.n	800a5b2 <PxMessagingTask+0x1112>
												*(__IO uint8_t *)temp32 = cMessage[port-1][2+shift];					
 800a56c:	2138      	movs	r1, #56	; 0x38
 800a56e:	4361      	muls	r1, r4
 800a570:	4a6d      	ldr	r2, [pc, #436]	; (800a728 <PxMessagingTask+0x1288>)
 800a572:	1852      	adds	r2, r2, r1
 800a574:	4442      	add	r2, r8
 800a576:	7892      	ldrb	r2, [r2, #2]
 800a578:	701a      	strb	r2, [r3, #0]
									if ( (BOS_var_reg[cMessage[port-1][shift]-1] & 0x000F) != cMessage[port-1][1+shift] ) {		
 800a57a:	2338      	movs	r3, #56	; 0x38
 800a57c:	4363      	muls	r3, r4
 800a57e:	4a6a      	ldr	r2, [pc, #424]	; (800a728 <PxMessagingTask+0x1288>)
 800a580:	18d2      	adds	r2, r2, r3
 800a582:	4643      	mov	r3, r8
 800a584:	5cd3      	ldrb	r3, [r2, r3]
 800a586:	3b01      	subs	r3, #1
 800a588:	0098      	lsls	r0, r3, #2
 800a58a:	496a      	ldr	r1, [pc, #424]	; (800a734 <PxMessagingTask+0x1294>)
 800a58c:	5841      	ldr	r1, [r0, r1]
 800a58e:	4648      	mov	r0, r9
 800a590:	5c12      	ldrb	r2, [r2, r0]
 800a592:	200f      	movs	r0, #15
 800a594:	4008      	ands	r0, r1
 800a596:	4290      	cmp	r0, r2
 800a598:	d100      	bne.n	800a59c <PxMessagingTask+0x10fc>
 800a59a:	e0e0      	b.n	800a75e <PxMessagingTask+0x12be>
										BOS_var_reg[cMessage[port-1][shift]-1] &= (0xFFF0+cMessage[port-1][1+shift]);
 800a59c:	009b      	lsls	r3, r3, #2
 800a59e:	4867      	ldr	r0, [pc, #412]	; (800a73c <PxMessagingTask+0x129c>)
 800a5a0:	4684      	mov	ip, r0
 800a5a2:	4462      	add	r2, ip
 800a5a4:	400a      	ands	r2, r1
 800a5a6:	4963      	ldr	r1, [pc, #396]	; (800a734 <PxMessagingTask+0x1294>)
 800a5a8:	505a      	str	r2, [r3, r1]
										responseStatus = BOS_ERR_LOCAL_FORMAT_UPDATED;
 800a5aa:	4b5e      	ldr	r3, [pc, #376]	; (800a724 <PxMessagingTask+0x1284>)
 800a5ac:	2214      	movs	r2, #20
 800a5ae:	701a      	strb	r2, [r3, #0]
 800a5b0:	e0d5      	b.n	800a75e <PxMessagingTask+0x12be>
												temp32 = (uint32_t)malloc(sizeof(uint8_t));							// Create a new one
 800a5b2:	2001      	movs	r0, #1
 800a5b4:	f00b ff9c 	bl	80164f0 <malloc>
 800a5b8:	1e03      	subs	r3, r0, #0
												if (temp32 != 0) {
 800a5ba:	d005      	beq.n	800a5c8 <PxMessagingTask+0x1128>
													BOS_var_reg[cMessage[port-1][shift]-1] = ((temp32-SRAM_BASE)<<16) + cMessage[port-1][1+shift];
 800a5bc:	00ad      	lsls	r5, r5, #2
 800a5be:	0400      	lsls	r0, r0, #16
 800a5c0:	4450      	add	r0, sl
 800a5c2:	4a5c      	ldr	r2, [pc, #368]	; (800a734 <PxMessagingTask+0x1294>)
 800a5c4:	50a8      	str	r0, [r5, r2]
 800a5c6:	e7d1      	b.n	800a56c <PxMessagingTask+0x10cc>
													responseStatus = BOS_ERR_REMOTE_WRITE_MEM_FULL;
 800a5c8:	4b56      	ldr	r3, [pc, #344]	; (800a724 <PxMessagingTask+0x1284>)
 800a5ca:	2212      	movs	r2, #18
 800a5cc:	701a      	strb	r2, [r3, #0]
											if (responseStatus != BOS_ERR_REMOTE_WRITE_MEM_FULL)			// Write remote value
 800a5ce:	e7d4      	b.n	800a57a <PxMessagingTask+0x10da>
											if ((BOS_var_reg[cMessage[port-1][shift]-1]&0x000F) == 0) {		// Variable does not exist																															
 800a5d0:	0712      	lsls	r2, r2, #28
 800a5d2:	d008      	beq.n	800a5e6 <PxMessagingTask+0x1146>
												*(__IO int8_t *)temp32 = (int8_t)cMessage[port-1][2+shift];		
 800a5d4:	2138      	movs	r1, #56	; 0x38
 800a5d6:	4361      	muls	r1, r4
 800a5d8:	4a53      	ldr	r2, [pc, #332]	; (800a728 <PxMessagingTask+0x1288>)
 800a5da:	1852      	adds	r2, r2, r1
 800a5dc:	4442      	add	r2, r8
 800a5de:	7892      	ldrb	r2, [r2, #2]
 800a5e0:	b252      	sxtb	r2, r2
 800a5e2:	701a      	strb	r2, [r3, #0]
 800a5e4:	e7c9      	b.n	800a57a <PxMessagingTask+0x10da>
												temp32 = (uint32_t)malloc(sizeof(int8_t));							// Create a new one
 800a5e6:	2001      	movs	r0, #1
 800a5e8:	f00b ff82 	bl	80164f0 <malloc>
 800a5ec:	1e03      	subs	r3, r0, #0
												if (temp32 != 0) {
 800a5ee:	d100      	bne.n	800a5f2 <PxMessagingTask+0x1152>
 800a5f0:	e25e      	b.n	800aab0 <PxMessagingTask+0x1610>
													BOS_var_reg[cMessage[port-1][shift]-1] = ((temp32-SRAM_BASE)<<16) + cMessage[port-1][1+shift];
 800a5f2:	00ad      	lsls	r5, r5, #2
 800a5f4:	0400      	lsls	r0, r0, #16
 800a5f6:	3002      	adds	r0, #2
 800a5f8:	4a4e      	ldr	r2, [pc, #312]	; (800a734 <PxMessagingTask+0x1294>)
 800a5fa:	50a8      	str	r0, [r5, r2]
 800a5fc:	e7ea      	b.n	800a5d4 <PxMessagingTask+0x1134>
											if ((BOS_var_reg[cMessage[port-1][shift]-1]&0x000F) == 0) {		// Variable does not exist																															
 800a5fe:	0712      	lsls	r2, r2, #28
 800a600:	d00b      	beq.n	800a61a <PxMessagingTask+0x117a>
												*(__IO uint16_t *)temp32 = ((uint16_t)cMessage[port-1][2+shift]<<0) + ((uint16_t)cMessage[port-1][3+shift]<<8);					
 800a602:	2138      	movs	r1, #56	; 0x38
 800a604:	4361      	muls	r1, r4
 800a606:	4a48      	ldr	r2, [pc, #288]	; (800a728 <PxMessagingTask+0x1288>)
 800a608:	1852      	adds	r2, r2, r1
 800a60a:	4442      	add	r2, r8
 800a60c:	78d1      	ldrb	r1, [r2, #3]
 800a60e:	0209      	lsls	r1, r1, #8
 800a610:	7892      	ldrb	r2, [r2, #2]
 800a612:	1852      	adds	r2, r2, r1
 800a614:	b292      	uxth	r2, r2
 800a616:	801a      	strh	r2, [r3, #0]
 800a618:	e7af      	b.n	800a57a <PxMessagingTask+0x10da>
												temp32 = (uint32_t)malloc(sizeof(uint16_t));						// Create a new one
 800a61a:	2002      	movs	r0, #2
 800a61c:	f00b ff68 	bl	80164f0 <malloc>
 800a620:	1e03      	subs	r3, r0, #0
												if (temp32 != 0) {
 800a622:	d100      	bne.n	800a626 <PxMessagingTask+0x1186>
 800a624:	e244      	b.n	800aab0 <PxMessagingTask+0x1610>
													BOS_var_reg[cMessage[port-1][shift]-1] = ((temp32-SRAM_BASE)<<16) + cMessage[port-1][1+shift];
 800a626:	00ad      	lsls	r5, r5, #2
 800a628:	0400      	lsls	r0, r0, #16
 800a62a:	3003      	adds	r0, #3
 800a62c:	4a41      	ldr	r2, [pc, #260]	; (800a734 <PxMessagingTask+0x1294>)
 800a62e:	50a8      	str	r0, [r5, r2]
 800a630:	e7e7      	b.n	800a602 <PxMessagingTask+0x1162>
											if ((BOS_var_reg[cMessage[port-1][shift]-1]&0x000F) == 0) {		// Variable does not exist																															
 800a632:	0712      	lsls	r2, r2, #28
 800a634:	d00b      	beq.n	800a64e <PxMessagingTask+0x11ae>
												*(__IO int16_t *)temp32 = ((int16_t)cMessage[port-1][2+shift]<<0) + ((int16_t)cMessage[port-1][3+shift]<<8);					
 800a636:	2138      	movs	r1, #56	; 0x38
 800a638:	4361      	muls	r1, r4
 800a63a:	4a3b      	ldr	r2, [pc, #236]	; (800a728 <PxMessagingTask+0x1288>)
 800a63c:	1852      	adds	r2, r2, r1
 800a63e:	4442      	add	r2, r8
 800a640:	78d1      	ldrb	r1, [r2, #3]
 800a642:	0209      	lsls	r1, r1, #8
 800a644:	7892      	ldrb	r2, [r2, #2]
 800a646:	1852      	adds	r2, r2, r1
 800a648:	b212      	sxth	r2, r2
 800a64a:	801a      	strh	r2, [r3, #0]
 800a64c:	e795      	b.n	800a57a <PxMessagingTask+0x10da>
												temp32 = (uint32_t)malloc(sizeof(int16_t));							// Create a new one
 800a64e:	2002      	movs	r0, #2
 800a650:	f00b ff4e 	bl	80164f0 <malloc>
 800a654:	1e03      	subs	r3, r0, #0
												if (temp32 != 0) {
 800a656:	d100      	bne.n	800a65a <PxMessagingTask+0x11ba>
 800a658:	e22a      	b.n	800aab0 <PxMessagingTask+0x1610>
													BOS_var_reg[cMessage[port-1][shift]-1] = ((temp32-SRAM_BASE)<<16) + cMessage[port-1][1+shift];
 800a65a:	00ad      	lsls	r5, r5, #2
 800a65c:	0400      	lsls	r0, r0, #16
 800a65e:	3004      	adds	r0, #4
 800a660:	4a34      	ldr	r2, [pc, #208]	; (800a734 <PxMessagingTask+0x1294>)
 800a662:	50a8      	str	r0, [r5, r2]
 800a664:	e7e7      	b.n	800a636 <PxMessagingTask+0x1196>
											if ((BOS_var_reg[cMessage[port-1][shift]-1]&0x000F) == 0) {		// Variable does not exist																															
 800a666:	0712      	lsls	r2, r2, #28
 800a668:	d010      	beq.n	800a68c <PxMessagingTask+0x11ec>
												*(__IO uint32_t *)temp32 = ((uint32_t)cMessage[port-1][2+shift]<<0) + ((uint32_t)cMessage[port-1][3+shift]<<8) + ((uint32_t)cMessage[port-1][4+shift]<<16) + ((uint32_t)cMessage[port-1][5+shift]<<24);					
 800a66a:	2238      	movs	r2, #56	; 0x38
 800a66c:	4362      	muls	r2, r4
 800a66e:	492e      	ldr	r1, [pc, #184]	; (800a728 <PxMessagingTask+0x1288>)
 800a670:	1889      	adds	r1, r1, r2
 800a672:	4441      	add	r1, r8
 800a674:	78ca      	ldrb	r2, [r1, #3]
 800a676:	0212      	lsls	r2, r2, #8
 800a678:	7908      	ldrb	r0, [r1, #4]
 800a67a:	0400      	lsls	r0, r0, #16
 800a67c:	1812      	adds	r2, r2, r0
 800a67e:	7888      	ldrb	r0, [r1, #2]
 800a680:	1812      	adds	r2, r2, r0
 800a682:	7949      	ldrb	r1, [r1, #5]
 800a684:	0609      	lsls	r1, r1, #24
 800a686:	1852      	adds	r2, r2, r1
 800a688:	601a      	str	r2, [r3, #0]
 800a68a:	e776      	b.n	800a57a <PxMessagingTask+0x10da>
												temp32 = (uint32_t)malloc(sizeof(uint32_t));						// Create a new one
 800a68c:	2004      	movs	r0, #4
 800a68e:	f00b ff2f 	bl	80164f0 <malloc>
 800a692:	1e03      	subs	r3, r0, #0
												if (temp32 != 0) {
 800a694:	d100      	bne.n	800a698 <PxMessagingTask+0x11f8>
 800a696:	e20b      	b.n	800aab0 <PxMessagingTask+0x1610>
													BOS_var_reg[cMessage[port-1][shift]-1] = ((temp32-SRAM_BASE)<<16) + cMessage[port-1][1+shift];
 800a698:	00ad      	lsls	r5, r5, #2
 800a69a:	0400      	lsls	r0, r0, #16
 800a69c:	3005      	adds	r0, #5
 800a69e:	4a25      	ldr	r2, [pc, #148]	; (800a734 <PxMessagingTask+0x1294>)
 800a6a0:	50a8      	str	r0, [r5, r2]
 800a6a2:	e7e2      	b.n	800a66a <PxMessagingTask+0x11ca>
											if ((BOS_var_reg[cMessage[port-1][shift]-1]&0x000F) == 0) {		// Variable does not exist																															
 800a6a4:	0712      	lsls	r2, r2, #28
 800a6a6:	d010      	beq.n	800a6ca <PxMessagingTask+0x122a>
												*(__IO int32_t *)temp32 = ((int32_t)cMessage[port-1][2+shift]<<0) + ((int32_t)cMessage[port-1][3+shift]<<8) + ((int32_t)cMessage[port-1][4+shift]<<16) + ((int32_t)cMessage[port-1][5+shift]<<24);					
 800a6a8:	2238      	movs	r2, #56	; 0x38
 800a6aa:	4362      	muls	r2, r4
 800a6ac:	491e      	ldr	r1, [pc, #120]	; (800a728 <PxMessagingTask+0x1288>)
 800a6ae:	1889      	adds	r1, r1, r2
 800a6b0:	4441      	add	r1, r8
 800a6b2:	78ca      	ldrb	r2, [r1, #3]
 800a6b4:	0212      	lsls	r2, r2, #8
 800a6b6:	7888      	ldrb	r0, [r1, #2]
 800a6b8:	1812      	adds	r2, r2, r0
 800a6ba:	7908      	ldrb	r0, [r1, #4]
 800a6bc:	0400      	lsls	r0, r0, #16
 800a6be:	1812      	adds	r2, r2, r0
 800a6c0:	7949      	ldrb	r1, [r1, #5]
 800a6c2:	0609      	lsls	r1, r1, #24
 800a6c4:	1852      	adds	r2, r2, r1
 800a6c6:	601a      	str	r2, [r3, #0]
 800a6c8:	e757      	b.n	800a57a <PxMessagingTask+0x10da>
												temp32 = (uint32_t)malloc(sizeof(int32_t));							// Create a new one
 800a6ca:	2004      	movs	r0, #4
 800a6cc:	f00b ff10 	bl	80164f0 <malloc>
 800a6d0:	1e03      	subs	r3, r0, #0
												if (temp32 != 0) {
 800a6d2:	d100      	bne.n	800a6d6 <PxMessagingTask+0x1236>
 800a6d4:	e1ec      	b.n	800aab0 <PxMessagingTask+0x1610>
													BOS_var_reg[cMessage[port-1][shift]-1] = ((temp32-SRAM_BASE)<<16) + cMessage[port-1][1+shift];
 800a6d6:	00ad      	lsls	r5, r5, #2
 800a6d8:	0400      	lsls	r0, r0, #16
 800a6da:	3006      	adds	r0, #6
 800a6dc:	4a15      	ldr	r2, [pc, #84]	; (800a734 <PxMessagingTask+0x1294>)
 800a6de:	50a8      	str	r0, [r5, r2]
 800a6e0:	e7e2      	b.n	800a6a8 <PxMessagingTask+0x1208>
											if ((BOS_var_reg[cMessage[port-1][shift]-1]&0x000F) == 0) {		// Variable does not exist																															
 800a6e2:	0712      	lsls	r2, r2, #28
 800a6e4:	d02c      	beq.n	800a740 <PxMessagingTask+0x12a0>
												remoteBuffer = ((uint32_t)cMessage[port-1][2+shift]<<0) + ((uint32_t)cMessage[port-1][3+shift]<<8) + ((uint32_t)cMessage[port-1][4+shift]<<16) + ((uint32_t)cMessage[port-1][5+shift]<<24);
 800a6e6:	2238      	movs	r2, #56	; 0x38
 800a6e8:	4362      	muls	r2, r4
 800a6ea:	490f      	ldr	r1, [pc, #60]	; (800a728 <PxMessagingTask+0x1288>)
 800a6ec:	1889      	adds	r1, r1, r2
 800a6ee:	4441      	add	r1, r8
 800a6f0:	78ca      	ldrb	r2, [r1, #3]
 800a6f2:	0212      	lsls	r2, r2, #8
 800a6f4:	7908      	ldrb	r0, [r1, #4]
 800a6f6:	0400      	lsls	r0, r0, #16
 800a6f8:	1812      	adds	r2, r2, r0
 800a6fa:	7888      	ldrb	r0, [r1, #2]
 800a6fc:	1812      	adds	r2, r2, r0
 800a6fe:	7949      	ldrb	r1, [r1, #5]
 800a700:	0609      	lsls	r1, r1, #24
 800a702:	1852      	adds	r2, r2, r1
 800a704:	4906      	ldr	r1, [pc, #24]	; (800a720 <PxMessagingTask+0x1280>)
 800a706:	600a      	str	r2, [r1, #0]
 800a708:	2000      	movs	r0, #0
 800a70a:	6048      	str	r0, [r1, #4]
												*(float *)temp32 = *(float *)&remoteBuffer;																		
 800a70c:	601a      	str	r2, [r3, #0]
 800a70e:	e734      	b.n	800a57a <PxMessagingTask+0x10da>
 800a710:	200009d0 	.word	0x200009d0
 800a714:	20000001 	.word	0x20000001
 800a718:	20000002 	.word	0x20000002
 800a71c:	20000003 	.word	0x20000003
 800a720:	20000b90 	.word	0x20000b90
 800a724:	20000b98 	.word	0x20000b98
 800a728:	200007d8 	.word	0x200007d8
 800a72c:	20000070 	.word	0x20000070
 800a730:	0801c2d8 	.word	0x0801c2d8
 800a734:	200062f0 	.word	0x200062f0
 800a738:	0801c2fc 	.word	0x0801c2fc
 800a73c:	0000fff0 	.word	0x0000fff0
												temp32 = (uint32_t)malloc(sizeof(float));								// Create a new one
 800a740:	2004      	movs	r0, #4
 800a742:	f00b fed5 	bl	80164f0 <malloc>
 800a746:	1e03      	subs	r3, r0, #0
												if (temp32 != 0) {
 800a748:	d100      	bne.n	800a74c <PxMessagingTask+0x12ac>
 800a74a:	e1b1      	b.n	800aab0 <PxMessagingTask+0x1610>
													BOS_var_reg[cMessage[port-1][shift]-1] = ((temp32-SRAM_BASE)<<16) + cMessage[port-1][1+shift];
 800a74c:	00ad      	lsls	r5, r5, #2
 800a74e:	0400      	lsls	r0, r0, #16
 800a750:	3007      	adds	r0, #7
 800a752:	4ae3      	ldr	r2, [pc, #908]	; (800aae0 <PxMessagingTask+0x1640>)
 800a754:	50a8      	str	r0, [r5, r2]
 800a756:	e7c6      	b.n	800a6e6 <PxMessagingTask+0x1246>
									responseStatus = BOS_ERR_REMOTE_WRITE_INDEX;		// BOS var index out of range
 800a758:	4be2      	ldr	r3, [pc, #904]	; (800aae4 <PxMessagingTask+0x1644>)
 800a75a:	2213      	movs	r2, #19
 800a75c:	701a      	strb	r2, [r3, #0]
							if (BOS.response == BOS_RESPONSE_ALL || BOS.response == BOS_RESPONSE_MSG) {
 800a75e:	4be2      	ldr	r3, [pc, #904]	; (800aae8 <PxMessagingTask+0x1648>)
 800a760:	799b      	ldrb	r3, [r3, #6]
 800a762:	2240      	movs	r2, #64	; 0x40
 800a764:	4393      	bics	r3, r2
 800a766:	2200      	movs	r2, #0
 800a768:	4692      	mov	sl, r2
 800a76a:	2b20      	cmp	r3, #32
 800a76c:	d001      	beq.n	800a772 <PxMessagingTask+0x12d2>
 800a76e:	f7fe fed0 	bl	8009512 <PxMessagingTask+0x72>
								messageParams[0] = responseStatus;
 800a772:	4bdc      	ldr	r3, [pc, #880]	; (800aae4 <PxMessagingTask+0x1644>)
 800a774:	781a      	ldrb	r2, [r3, #0]
 800a776:	4bdd      	ldr	r3, [pc, #884]	; (800aaec <PxMessagingTask+0x164c>)
 800a778:	701a      	strb	r2, [r3, #0]
								SendMessageToModule(src, CODE_WRITE_REMOTE_RESPONSE, 1);											
 800a77a:	2201      	movs	r2, #1
 800a77c:	2121      	movs	r1, #33	; 0x21
 800a77e:	9807      	ldr	r0, [sp, #28]
 800a780:	f7fe fbae 	bl	8008ee0 <SendMessageToModule>
 800a784:	f7fe fec5 	bl	8009512 <PxMessagingTask+0x72>
								temp32 = ( (uint32_t) cMessage[port-1][2+shift] << 24 ) + ( (uint32_t) cMessage[port-1][3+shift] << 16 ) + ( (uint32_t) cMessage[port-1][4+shift] << 8 ) + cMessage[port-1][5+shift];				
 800a788:	2238      	movs	r2, #56	; 0x38
 800a78a:	4362      	muls	r2, r4
 800a78c:	4bd8      	ldr	r3, [pc, #864]	; (800aaf0 <PxMessagingTask+0x1650>)
 800a78e:	189b      	adds	r3, r3, r2
 800a790:	195d      	adds	r5, r3, r5
 800a792:	78ab      	ldrb	r3, [r5, #2]
 800a794:	061b      	lsls	r3, r3, #24
 800a796:	78ea      	ldrb	r2, [r5, #3]
 800a798:	0412      	lsls	r2, r2, #16
 800a79a:	189b      	adds	r3, r3, r2
 800a79c:	796a      	ldrb	r2, [r5, #5]
 800a79e:	189b      	adds	r3, r3, r2
 800a7a0:	792d      	ldrb	r5, [r5, #4]
 800a7a2:	022d      	lsls	r5, r5, #8
 800a7a4:	195d      	adds	r5, r3, r5
								if ( temp32 >= SRAM_BASE && temp32 < (SRAM_BASE+SRAM_SIZE) )			// SRAM
 800a7a6:	23e0      	movs	r3, #224	; 0xe0
 800a7a8:	061b      	lsls	r3, r3, #24
 800a7aa:	18ea      	adds	r2, r5, r3
 800a7ac:	2380      	movs	r3, #128	; 0x80
 800a7ae:	021b      	lsls	r3, r3, #8
 800a7b0:	429a      	cmp	r2, r3
 800a7b2:	d26e      	bcs.n	800a892 <PxMessagingTask+0x13f2>
									switch (cMessage[port-1][1+shift])															// Requested format
 800a7b4:	2238      	movs	r2, #56	; 0x38
 800a7b6:	4362      	muls	r2, r4
 800a7b8:	4bcd      	ldr	r3, [pc, #820]	; (800aaf0 <PxMessagingTask+0x1650>)
 800a7ba:	189b      	adds	r3, r3, r2
 800a7bc:	4443      	add	r3, r8
 800a7be:	785b      	ldrb	r3, [r3, #1]
 800a7c0:	3b01      	subs	r3, #1
 800a7c2:	b2da      	uxtb	r2, r3
 800a7c4:	2a07      	cmp	r2, #7
 800a7c6:	d8ca      	bhi.n	800a75e <PxMessagingTask+0x12be>
 800a7c8:	b2db      	uxtb	r3, r3
 800a7ca:	009b      	lsls	r3, r3, #2
 800a7cc:	4ac9      	ldr	r2, [pc, #804]	; (800aaf4 <PxMessagingTask+0x1654>)
 800a7ce:	58d3      	ldr	r3, [r2, r3]
 800a7d0:	469f      	mov	pc, r3
											*(__IO uint8_t *)temp32 = cMessage[port-1][6+shift]; break;
 800a7d2:	2238      	movs	r2, #56	; 0x38
 800a7d4:	4362      	muls	r2, r4
 800a7d6:	4bc6      	ldr	r3, [pc, #792]	; (800aaf0 <PxMessagingTask+0x1650>)
 800a7d8:	189b      	adds	r3, r3, r2
 800a7da:	4443      	add	r3, r8
 800a7dc:	799b      	ldrb	r3, [r3, #6]
 800a7de:	702b      	strb	r3, [r5, #0]
 800a7e0:	e7bd      	b.n	800a75e <PxMessagingTask+0x12be>
											*(__IO int8_t *)temp32 = (int8_t)cMessage[port-1][6+shift]; break;
 800a7e2:	2238      	movs	r2, #56	; 0x38
 800a7e4:	4362      	muls	r2, r4
 800a7e6:	4bc2      	ldr	r3, [pc, #776]	; (800aaf0 <PxMessagingTask+0x1650>)
 800a7e8:	189b      	adds	r3, r3, r2
 800a7ea:	4443      	add	r3, r8
 800a7ec:	799b      	ldrb	r3, [r3, #6]
 800a7ee:	b25b      	sxtb	r3, r3
 800a7f0:	702b      	strb	r3, [r5, #0]
 800a7f2:	e7b4      	b.n	800a75e <PxMessagingTask+0x12be>
											*(__IO uint16_t *)temp32 = ((uint16_t)cMessage[port-1][6+shift]<<0) + ((uint16_t)cMessage[port-1][7+shift]<<8);	break;
 800a7f4:	2238      	movs	r2, #56	; 0x38
 800a7f6:	4362      	muls	r2, r4
 800a7f8:	4bbd      	ldr	r3, [pc, #756]	; (800aaf0 <PxMessagingTask+0x1650>)
 800a7fa:	189b      	adds	r3, r3, r2
 800a7fc:	4443      	add	r3, r8
 800a7fe:	79da      	ldrb	r2, [r3, #7]
 800a800:	0212      	lsls	r2, r2, #8
 800a802:	799b      	ldrb	r3, [r3, #6]
 800a804:	189b      	adds	r3, r3, r2
 800a806:	b29b      	uxth	r3, r3
 800a808:	802b      	strh	r3, [r5, #0]
 800a80a:	e7a8      	b.n	800a75e <PxMessagingTask+0x12be>
											*(__IO int16_t *)temp32 = ((int16_t)cMessage[port-1][6+shift]<<0) + ((int16_t)cMessage[port-1][7+shift]<<8);	break;
 800a80c:	2238      	movs	r2, #56	; 0x38
 800a80e:	4362      	muls	r2, r4
 800a810:	4bb7      	ldr	r3, [pc, #732]	; (800aaf0 <PxMessagingTask+0x1650>)
 800a812:	189b      	adds	r3, r3, r2
 800a814:	4443      	add	r3, r8
 800a816:	79da      	ldrb	r2, [r3, #7]
 800a818:	0212      	lsls	r2, r2, #8
 800a81a:	799b      	ldrb	r3, [r3, #6]
 800a81c:	189b      	adds	r3, r3, r2
 800a81e:	b21b      	sxth	r3, r3
 800a820:	802b      	strh	r3, [r5, #0]
 800a822:	e79c      	b.n	800a75e <PxMessagingTask+0x12be>
											*(__IO uint32_t *)temp32 = ((uint32_t)cMessage[port-1][6+shift]<<0) + ((uint32_t)cMessage[port-1][7+shift]<<8) + ((uint32_t)cMessage[port-1][8+shift]<<16) + ((uint32_t)cMessage[port-1][9+shift]<<24); break;
 800a824:	2338      	movs	r3, #56	; 0x38
 800a826:	4363      	muls	r3, r4
 800a828:	4ab1      	ldr	r2, [pc, #708]	; (800aaf0 <PxMessagingTask+0x1650>)
 800a82a:	18d2      	adds	r2, r2, r3
 800a82c:	4442      	add	r2, r8
 800a82e:	79d3      	ldrb	r3, [r2, #7]
 800a830:	021b      	lsls	r3, r3, #8
 800a832:	7a11      	ldrb	r1, [r2, #8]
 800a834:	0409      	lsls	r1, r1, #16
 800a836:	185b      	adds	r3, r3, r1
 800a838:	7991      	ldrb	r1, [r2, #6]
 800a83a:	185b      	adds	r3, r3, r1
 800a83c:	7a52      	ldrb	r2, [r2, #9]
 800a83e:	0612      	lsls	r2, r2, #24
 800a840:	189b      	adds	r3, r3, r2
 800a842:	602b      	str	r3, [r5, #0]
 800a844:	e78b      	b.n	800a75e <PxMessagingTask+0x12be>
											*(__IO int32_t *)temp32 = ((int32_t)cMessage[port-1][6+shift]<<0) + ((int32_t)cMessage[port-1][7+shift]<<8) + ((int32_t)cMessage[port-1][8+shift]<<16) + ((int32_t)cMessage[port-1][9+shift]<<24); break; 									
 800a846:	2338      	movs	r3, #56	; 0x38
 800a848:	4363      	muls	r3, r4
 800a84a:	4aa9      	ldr	r2, [pc, #676]	; (800aaf0 <PxMessagingTask+0x1650>)
 800a84c:	18d2      	adds	r2, r2, r3
 800a84e:	4442      	add	r2, r8
 800a850:	79d3      	ldrb	r3, [r2, #7]
 800a852:	021b      	lsls	r3, r3, #8
 800a854:	7991      	ldrb	r1, [r2, #6]
 800a856:	185b      	adds	r3, r3, r1
 800a858:	7a11      	ldrb	r1, [r2, #8]
 800a85a:	0409      	lsls	r1, r1, #16
 800a85c:	185b      	adds	r3, r3, r1
 800a85e:	7a52      	ldrb	r2, [r2, #9]
 800a860:	0612      	lsls	r2, r2, #24
 800a862:	189b      	adds	r3, r3, r2
 800a864:	602b      	str	r3, [r5, #0]
 800a866:	e77a      	b.n	800a75e <PxMessagingTask+0x12be>
											remoteBuffer = ((uint32_t)cMessage[port-1][6+shift]<<0) + ((uint32_t)cMessage[port-1][7+shift]<<8) + ((uint32_t)cMessage[port-1][8+shift]<<16) + ((uint32_t)cMessage[port-1][9+shift]<<24);
 800a868:	2338      	movs	r3, #56	; 0x38
 800a86a:	4363      	muls	r3, r4
 800a86c:	4aa0      	ldr	r2, [pc, #640]	; (800aaf0 <PxMessagingTask+0x1650>)
 800a86e:	18d2      	adds	r2, r2, r3
 800a870:	4442      	add	r2, r8
 800a872:	79d3      	ldrb	r3, [r2, #7]
 800a874:	021b      	lsls	r3, r3, #8
 800a876:	7a11      	ldrb	r1, [r2, #8]
 800a878:	0409      	lsls	r1, r1, #16
 800a87a:	185b      	adds	r3, r3, r1
 800a87c:	7991      	ldrb	r1, [r2, #6]
 800a87e:	185b      	adds	r3, r3, r1
 800a880:	7a52      	ldrb	r2, [r2, #9]
 800a882:	0612      	lsls	r2, r2, #24
 800a884:	189b      	adds	r3, r3, r2
 800a886:	4a9c      	ldr	r2, [pc, #624]	; (800aaf8 <PxMessagingTask+0x1658>)
 800a888:	6013      	str	r3, [r2, #0]
 800a88a:	2100      	movs	r1, #0
 800a88c:	6051      	str	r1, [r2, #4]
											*(float *)temp32 = *(float *)&remoteBuffer;	break;
 800a88e:	602b      	str	r3, [r5, #0]
 800a890:	e765      	b.n	800a75e <PxMessagingTask+0x12be>
								else if ( temp32 >= FLASH_BASE && temp32 < (FLASH_BASE+FLASH_SIZE) )			// Flash
 800a892:	2280      	movs	r2, #128	; 0x80
 800a894:	0292      	lsls	r2, r2, #10
 800a896:	23f8      	movs	r3, #248	; 0xf8
 800a898:	061b      	lsls	r3, r3, #24
 800a89a:	18eb      	adds	r3, r5, r3
 800a89c:	4293      	cmp	r3, r2
 800a89e:	d303      	bcc.n	800a8a8 <PxMessagingTask+0x1408>
									responseStatus = BOS_ERR_REMOTE_WRITE_ADDRESS;
 800a8a0:	4b90      	ldr	r3, [pc, #576]	; (800aae4 <PxMessagingTask+0x1644>)
 800a8a2:	2215      	movs	r2, #21
 800a8a4:	701a      	strb	r2, [r3, #0]
 800a8a6:	e75a      	b.n	800a75e <PxMessagingTask+0x12be>
									HAL_FLASH_Unlock();
 800a8a8:	f006 fa82 	bl	8010db0 <HAL_FLASH_Unlock>
									if (code == CODE_WRITE_REMOTE_FORCE)
 800a8ac:	464b      	mov	r3, r9
 800a8ae:	2b22      	cmp	r3, #34	; 0x22
 800a8b0:	d012      	beq.n	800a8d8 <PxMessagingTask+0x1438>
									if (responseStatus == BOS_OK)
 800a8b2:	4b8c      	ldr	r3, [pc, #560]	; (800aae4 <PxMessagingTask+0x1644>)
 800a8b4:	781b      	ldrb	r3, [r3, #0]
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d129      	bne.n	800a90e <PxMessagingTask+0x146e>
										switch (cMessage[port-1][1+shift])															// Requested format
 800a8ba:	2238      	movs	r2, #56	; 0x38
 800a8bc:	4362      	muls	r2, r4
 800a8be:	4b8c      	ldr	r3, [pc, #560]	; (800aaf0 <PxMessagingTask+0x1650>)
 800a8c0:	189b      	adds	r3, r3, r2
 800a8c2:	4443      	add	r3, r8
 800a8c4:	785b      	ldrb	r3, [r3, #1]
 800a8c6:	3b01      	subs	r3, #1
 800a8c8:	b2da      	uxtb	r2, r3
 800a8ca:	2a07      	cmp	r2, #7
 800a8cc:	d81f      	bhi.n	800a90e <PxMessagingTask+0x146e>
 800a8ce:	b2db      	uxtb	r3, r3
 800a8d0:	009b      	lsls	r3, r3, #2
 800a8d2:	4a8a      	ldr	r2, [pc, #552]	; (800aafc <PxMessagingTask+0x165c>)
 800a8d4:	58d3      	ldr	r3, [r2, r3]
 800a8d6:	469f      	mov	pc, r3
										erase.TypeErase = FLASH_TYPEERASE_PAGES;
 800a8d8:	2300      	movs	r3, #0
 800a8da:	9313      	str	r3, [sp, #76]	; 0x4c
										erase.PageAddress = temp32;
 800a8dc:	9514      	str	r5, [sp, #80]	; 0x50
										erase.NbPages = 1;
 800a8de:	3301      	adds	r3, #1
 800a8e0:	9315      	str	r3, [sp, #84]	; 0x54
										status = HAL_FLASHEx_Erase(&erase, &eraseError);
 800a8e2:	a912      	add	r1, sp, #72	; 0x48
 800a8e4:	a813      	add	r0, sp, #76	; 0x4c
 800a8e6:	f006 fb39 	bl	8010f5c <HAL_FLASHEx_Erase>
 800a8ea:	900d      	str	r0, [sp, #52]	; 0x34
										if (status != HAL_OK || eraseError != 0xFFFFFFFF) responseStatus = BOS_ERR_REMOTE_WRITE_FLASH;							
 800a8ec:	2800      	cmp	r0, #0
 800a8ee:	d102      	bne.n	800a8f6 <PxMessagingTask+0x1456>
 800a8f0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a8f2:	3301      	adds	r3, #1
 800a8f4:	d0dd      	beq.n	800a8b2 <PxMessagingTask+0x1412>
 800a8f6:	4b7b      	ldr	r3, [pc, #492]	; (800aae4 <PxMessagingTask+0x1644>)
 800a8f8:	2216      	movs	r2, #22
 800a8fa:	701a      	strb	r2, [r3, #0]
 800a8fc:	e7d9      	b.n	800a8b2 <PxMessagingTask+0x1412>
												if (*(__IO uint16_t *)temp32 != 0xFFFF) {
 800a8fe:	882b      	ldrh	r3, [r5, #0]
 800a900:	b29b      	uxth	r3, r3
 800a902:	4a7f      	ldr	r2, [pc, #508]	; (800ab00 <PxMessagingTask+0x1660>)
 800a904:	4293      	cmp	r3, r2
 800a906:	d00c      	beq.n	800a922 <PxMessagingTask+0x1482>
													responseStatus = BOS_ERR_REMOTE_WRITE_FLASH; break;
 800a908:	4b76      	ldr	r3, [pc, #472]	; (800aae4 <PxMessagingTask+0x1644>)
 800a90a:	2216      	movs	r2, #22
 800a90c:	701a      	strb	r2, [r3, #0]
									HAL_FLASH_Lock();
 800a90e:	f006 fa63 	bl	8010dd8 <HAL_FLASH_Lock>
									if (status != HAL_OK)	responseStatus = BOS_ERR_REMOTE_WRITE_FLASH;
 800a912:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a914:	2b00      	cmp	r3, #0
 800a916:	d100      	bne.n	800a91a <PxMessagingTask+0x147a>
 800a918:	e721      	b.n	800a75e <PxMessagingTask+0x12be>
 800a91a:	4b72      	ldr	r3, [pc, #456]	; (800aae4 <PxMessagingTask+0x1644>)
 800a91c:	2216      	movs	r2, #22
 800a91e:	701a      	strb	r2, [r3, #0]
 800a920:	e71d      	b.n	800a75e <PxMessagingTask+0x12be>
													remoteBuffer = cMessage[port-1][6+shift]; status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, temp32, remoteBuffer); break;
 800a922:	2238      	movs	r2, #56	; 0x38
 800a924:	4362      	muls	r2, r4
 800a926:	4b72      	ldr	r3, [pc, #456]	; (800aaf0 <PxMessagingTask+0x1650>)
 800a928:	189b      	adds	r3, r3, r2
 800a92a:	4443      	add	r3, r8
 800a92c:	799a      	ldrb	r2, [r3, #6]
 800a92e:	2300      	movs	r3, #0
 800a930:	4971      	ldr	r1, [pc, #452]	; (800aaf8 <PxMessagingTask+0x1658>)
 800a932:	600a      	str	r2, [r1, #0]
 800a934:	604b      	str	r3, [r1, #4]
 800a936:	0029      	movs	r1, r5
 800a938:	2001      	movs	r0, #1
 800a93a:	f006 fa85 	bl	8010e48 <HAL_FLASH_Program>
 800a93e:	900d      	str	r0, [sp, #52]	; 0x34
 800a940:	e7e5      	b.n	800a90e <PxMessagingTask+0x146e>
												if (*(__IO uint16_t *)temp32 != 0xFFFF) {
 800a942:	882b      	ldrh	r3, [r5, #0]
 800a944:	b29b      	uxth	r3, r3
 800a946:	4a6e      	ldr	r2, [pc, #440]	; (800ab00 <PxMessagingTask+0x1660>)
 800a948:	4293      	cmp	r3, r2
 800a94a:	d003      	beq.n	800a954 <PxMessagingTask+0x14b4>
													responseStatus = BOS_ERR_REMOTE_WRITE_FLASH; break;
 800a94c:	4b65      	ldr	r3, [pc, #404]	; (800aae4 <PxMessagingTask+0x1644>)
 800a94e:	2216      	movs	r2, #22
 800a950:	701a      	strb	r2, [r3, #0]
 800a952:	e7dc      	b.n	800a90e <PxMessagingTask+0x146e>
													remoteBuffer = ((uint16_t)cMessage[port-1][6+shift]<<0) + ((uint16_t)cMessage[port-1][7+shift]<<8);
 800a954:	2238      	movs	r2, #56	; 0x38
 800a956:	4362      	muls	r2, r4
 800a958:	4b65      	ldr	r3, [pc, #404]	; (800aaf0 <PxMessagingTask+0x1650>)
 800a95a:	189b      	adds	r3, r3, r2
 800a95c:	4443      	add	r3, r8
 800a95e:	79da      	ldrb	r2, [r3, #7]
 800a960:	0212      	lsls	r2, r2, #8
 800a962:	799b      	ldrb	r3, [r3, #6]
 800a964:	18d2      	adds	r2, r2, r3
 800a966:	2300      	movs	r3, #0
 800a968:	4963      	ldr	r1, [pc, #396]	; (800aaf8 <PxMessagingTask+0x1658>)
 800a96a:	600a      	str	r2, [r1, #0]
 800a96c:	604b      	str	r3, [r1, #4]
													status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, temp32, remoteBuffer); break;
 800a96e:	0029      	movs	r1, r5
 800a970:	2001      	movs	r0, #1
 800a972:	f006 fa69 	bl	8010e48 <HAL_FLASH_Program>
 800a976:	900d      	str	r0, [sp, #52]	; 0x34
 800a978:	e7c9      	b.n	800a90e <PxMessagingTask+0x146e>
												if (*(__IO uint32_t *)temp32 != 0xFFFFFFFF) {
 800a97a:	682b      	ldr	r3, [r5, #0]
 800a97c:	3301      	adds	r3, #1
 800a97e:	d003      	beq.n	800a988 <PxMessagingTask+0x14e8>
													responseStatus = BOS_ERR_REMOTE_WRITE_FLASH; break;
 800a980:	4b58      	ldr	r3, [pc, #352]	; (800aae4 <PxMessagingTask+0x1644>)
 800a982:	2216      	movs	r2, #22
 800a984:	701a      	strb	r2, [r3, #0]
 800a986:	e7c2      	b.n	800a90e <PxMessagingTask+0x146e>
													remoteBuffer = ((uint32_t)cMessage[port-1][6+shift]<<0) + ((uint32_t)cMessage[port-1][7+shift]<<8) + ((uint32_t)cMessage[port-1][8+shift]<<16) + ((uint32_t)cMessage[port-1][9+shift]<<24); 
 800a988:	2238      	movs	r2, #56	; 0x38
 800a98a:	4362      	muls	r2, r4
 800a98c:	4b58      	ldr	r3, [pc, #352]	; (800aaf0 <PxMessagingTask+0x1650>)
 800a98e:	189b      	adds	r3, r3, r2
 800a990:	4443      	add	r3, r8
 800a992:	79da      	ldrb	r2, [r3, #7]
 800a994:	0212      	lsls	r2, r2, #8
 800a996:	7a19      	ldrb	r1, [r3, #8]
 800a998:	0409      	lsls	r1, r1, #16
 800a99a:	1852      	adds	r2, r2, r1
 800a99c:	7999      	ldrb	r1, [r3, #6]
 800a99e:	1852      	adds	r2, r2, r1
 800a9a0:	7a5b      	ldrb	r3, [r3, #9]
 800a9a2:	061b      	lsls	r3, r3, #24
 800a9a4:	18d2      	adds	r2, r2, r3
 800a9a6:	2300      	movs	r3, #0
 800a9a8:	4953      	ldr	r1, [pc, #332]	; (800aaf8 <PxMessagingTask+0x1658>)
 800a9aa:	600a      	str	r2, [r1, #0]
 800a9ac:	604b      	str	r3, [r1, #4]
													status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, temp32, remoteBuffer); break;
 800a9ae:	0029      	movs	r1, r5
 800a9b0:	2002      	movs	r0, #2
 800a9b2:	f006 fa49 	bl	8010e48 <HAL_FLASH_Program>
 800a9b6:	900d      	str	r0, [sp, #52]	; 0x34
 800a9b8:	e7a9      	b.n	800a90e <PxMessagingTask+0x146e>
												if (*(__IO uint32_t *)temp32 != 0xFFFFFFFF) {
 800a9ba:	682b      	ldr	r3, [r5, #0]
 800a9bc:	3301      	adds	r3, #1
 800a9be:	d003      	beq.n	800a9c8 <PxMessagingTask+0x1528>
													responseStatus = BOS_ERR_REMOTE_WRITE_FLASH; break;
 800a9c0:	4b48      	ldr	r3, [pc, #288]	; (800aae4 <PxMessagingTask+0x1644>)
 800a9c2:	2216      	movs	r2, #22
 800a9c4:	701a      	strb	r2, [r3, #0]
 800a9c6:	e7a2      	b.n	800a90e <PxMessagingTask+0x146e>
													remoteBuffer = ((uint32_t)cMessage[port-1][6+shift]<<0) + ((uint32_t)cMessage[port-1][7+shift]<<8) + ((uint32_t)cMessage[port-1][8+shift]<<16) + ((uint32_t)cMessage[port-1][9+shift]<<24);
 800a9c8:	2238      	movs	r2, #56	; 0x38
 800a9ca:	4362      	muls	r2, r4
 800a9cc:	4b48      	ldr	r3, [pc, #288]	; (800aaf0 <PxMessagingTask+0x1650>)
 800a9ce:	189b      	adds	r3, r3, r2
 800a9d0:	4443      	add	r3, r8
 800a9d2:	79da      	ldrb	r2, [r3, #7]
 800a9d4:	0212      	lsls	r2, r2, #8
 800a9d6:	7a19      	ldrb	r1, [r3, #8]
 800a9d8:	0409      	lsls	r1, r1, #16
 800a9da:	1852      	adds	r2, r2, r1
 800a9dc:	7999      	ldrb	r1, [r3, #6]
 800a9de:	1852      	adds	r2, r2, r1
 800a9e0:	7a5b      	ldrb	r3, [r3, #9]
 800a9e2:	061b      	lsls	r3, r3, #24
 800a9e4:	18d2      	adds	r2, r2, r3
 800a9e6:	2300      	movs	r3, #0
 800a9e8:	4943      	ldr	r1, [pc, #268]	; (800aaf8 <PxMessagingTask+0x1658>)
 800a9ea:	600a      	str	r2, [r1, #0]
 800a9ec:	604b      	str	r3, [r1, #4]
													status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, temp32, remoteBuffer); break;
 800a9ee:	0029      	movs	r1, r5
 800a9f0:	2003      	movs	r0, #3
 800a9f2:	f006 fa29 	bl	8010e48 <HAL_FLASH_Program>
 800a9f6:	900d      	str	r0, [sp, #52]	; 0x34
 800a9f8:	e789      	b.n	800a90e <PxMessagingTask+0x146e>
							responseStatus = (BOS_Status) cMessage[port-1][shift];
 800a9fa:	4b3d      	ldr	r3, [pc, #244]	; (800aaf0 <PxMessagingTask+0x1650>)
 800a9fc:	199b      	adds	r3, r3, r6
 800a9fe:	5d5a      	ldrb	r2, [r3, r5]
 800aa00:	4b38      	ldr	r3, [pc, #224]	; (800aae4 <PxMessagingTask+0x1644>)
 800aa02:	701a      	strb	r2, [r3, #0]
							break;	
 800aa04:	2300      	movs	r3, #0
 800aa06:	469a      	mov	sl, r3
 800aa08:	f7fe fd83 	bl	8009512 <PxMessagingTask+0x72>
							writePxMutex(cMessage[port-1][shift], (char *)&cMessage[port-1][shift+1], numOfParams-1, 10, 10);
 800aa0c:	4652      	mov	r2, sl
 800aa0e:	3a01      	subs	r2, #1
 800aa10:	b292      	uxth	r2, r2
 800aa12:	1c69      	adds	r1, r5, #1
 800aa14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aa16:	469c      	mov	ip, r3
 800aa18:	4461      	add	r1, ip
 800aa1a:	4b35      	ldr	r3, [pc, #212]	; (800aaf0 <PxMessagingTask+0x1650>)
 800aa1c:	18c9      	adds	r1, r1, r3
 800aa1e:	199b      	adds	r3, r3, r6
 800aa20:	5d58      	ldrb	r0, [r3, r5]
 800aa22:	230a      	movs	r3, #10
 800aa24:	9300      	str	r3, [sp, #0]
 800aa26:	f003 f95b 	bl	800dce0 <writePxMutex>
							break;
 800aa2a:	2300      	movs	r3, #0
 800aa2c:	469a      	mov	sl, r3
 800aa2e:	f7fe fd70 	bl	8009512 <PxMessagingTask+0x72>
							result = (BOS_Status) User_MessagingParser(code, port, src, dst, shift);			
 800aa32:	9500      	str	r5, [sp, #0]
 800aa34:	4643      	mov	r3, r8
 800aa36:	9a07      	ldr	r2, [sp, #28]
 800aa38:	9909      	ldr	r1, [sp, #36]	; 0x24
 800aa3a:	4648      	mov	r0, r9
 800aa3c:	f7fe fd2e 	bl	800949c <User_MessagingParser>
 800aa40:	4682      	mov	sl, r0
							if (result == BOS_ERR_UnknownMessage) {
 800aa42:	2801      	cmp	r0, #1
 800aa44:	d001      	beq.n	800aa4a <PxMessagingTask+0x15aa>
 800aa46:	f7fe fd64 	bl	8009512 <PxMessagingTask+0x72>
								result = (BOS_Status) Module_MessagingTask(code, port, src, dst, shift);
 800aa4a:	9500      	str	r5, [sp, #0]
 800aa4c:	4643      	mov	r3, r8
 800aa4e:	9a07      	ldr	r2, [sp, #28]
 800aa50:	9909      	ldr	r1, [sp, #36]	; 0x24
 800aa52:	4648      	mov	r0, r9
 800aa54:	f001 f8b8 	bl	800bbc8 <Module_MessagingTask>
 800aa58:	4682      	mov	sl, r0
 800aa5a:	f7fe fd55 	bl	8009508 <PxMessagingTask+0x68>
										messageParams[0] = modParam[temp-1].paramFormat;
 800aa5e:	2300      	movs	r3, #0
 800aa60:	469a      	mov	sl, r3
 800aa62:	f7fe fd51 	bl	8009508 <PxMessagingTask+0x68>
										temp32 = (BOS_var_reg[cMessage[port-1][shift]-REMOTE_BOS_VAR-1]>>16) + SRAM_BASE;
 800aa66:	2300      	movs	r3, #0
 800aa68:	469a      	mov	sl, r3
 800aa6a:	f7fe fd4d 	bl	8009508 <PxMessagingTask+0x68>
			SendMessageToModule(src, CODE_UNKNOWN_MESSAGE, 0);
 800aa6e:	2200      	movs	r2, #0
 800aa70:	2100      	movs	r1, #0
 800aa72:	9807      	ldr	r0, [sp, #28]
 800aa74:	f7fe fa34 	bl	8008ee0 <SendMessageToModule>
			result = BOS_OK;			
 800aa78:	2300      	movs	r3, #0
 800aa7a:	469a      	mov	sl, r3
 800aa7c:	f7fe fd49 	bl	8009512 <PxMessagingTask+0x72>
 800aa80:	2300      	movs	r3, #0
 800aa82:	469a      	mov	sl, r3
 800aa84:	f7fe fd45 	bl	8009512 <PxMessagingTask+0x72>
									}
 800aa88:	2300      	movs	r3, #0
 800aa8a:	469a      	mov	sl, r3
 800aa8c:	f7fe fd41 	bl	8009512 <PxMessagingTask+0x72>
 800aa90:	2300      	movs	r3, #0
 800aa92:	469a      	mov	sl, r3
 800aa94:	f7fe fd3d 	bl	8009512 <PxMessagingTask+0x72>
 800aa98:	4661      	mov	r1, ip
				shift += 4;
 800aa9a:	9d06      	ldr	r5, [sp, #24]
 800aa9c:	3504      	adds	r5, #4
				numOfParams = messageLength[port-1] - shift;
 800aa9e:	1b48      	subs	r0, r1, r5
 800aaa0:	b2c3      	uxtb	r3, r0
 800aaa2:	469a      	mov	sl, r3
				if (result == BOS_OK)
 800aaa4:	f7fe fdf4 	bl	8009690 <PxMessagingTask+0x1f0>
					result = BOS_ERR_WrongID;
 800aaa8:	2366      	movs	r3, #102	; 0x66
 800aaaa:	469a      	mov	sl, r3
		if (result == BOS_ERR_UnknownMessage) {
 800aaac:	f7fe fd31 	bl	8009512 <PxMessagingTask+0x72>
									if ( (BOS_var_reg[cMessage[port-1][shift]-1] & 0x000F) != cMessage[port-1][1+shift] ) {		
 800aab0:	2338      	movs	r3, #56	; 0x38
 800aab2:	4363      	muls	r3, r4
 800aab4:	4a0e      	ldr	r2, [pc, #56]	; (800aaf0 <PxMessagingTask+0x1650>)
 800aab6:	18d2      	adds	r2, r2, r3
 800aab8:	4643      	mov	r3, r8
 800aaba:	5cd3      	ldrb	r3, [r2, r3]
 800aabc:	3b01      	subs	r3, #1
 800aabe:	0098      	lsls	r0, r3, #2
 800aac0:	4907      	ldr	r1, [pc, #28]	; (800aae0 <PxMessagingTask+0x1640>)
 800aac2:	5841      	ldr	r1, [r0, r1]
 800aac4:	4648      	mov	r0, r9
 800aac6:	5c12      	ldrb	r2, [r2, r0]
 800aac8:	e568      	b.n	800a59c <PxMessagingTask+0x10fc>
					 ( dst && (dst < BOS_MULTICAST) && (dst != myID) && (myID == 1) && (code != CODE_MODULE_ID) ) )
 800aaca:	4543      	cmp	r3, r8
 800aacc:	d101      	bne.n	800aad2 <PxMessagingTask+0x1632>
 800aace:	f7fe fdd4 	bl	800967a <PxMessagingTask+0x1da>
 800aad2:	464b      	mov	r3, r9
 800aad4:	2b10      	cmp	r3, #16
 800aad6:	d001      	beq.n	800aadc <PxMessagingTask+0x163c>
 800aad8:	f7fe fd65 	bl	80095a6 <PxMessagingTask+0x106>
 800aadc:	f7fe fdcd 	bl	800967a <PxMessagingTask+0x1da>
 800aae0:	200062f0 	.word	0x200062f0
 800aae4:	20000b98 	.word	0x20000b98
 800aae8:	20006368 	.word	0x20006368
 800aaec:	200009d0 	.word	0x200009d0
 800aaf0:	200007d8 	.word	0x200007d8
 800aaf4:	0801c31c 	.word	0x0801c31c
 800aaf8:	20000b90 	.word	0x20000b90
 800aafc:	0801c33c 	.word	0x0801c33c
 800ab00:	0000ffff 	.word	0x0000ffff

0800ab04 <rangeModParamCommand>:
}

/*-----------------------------------------------------------*/

static portBASE_TYPE rangeModParamCommand( int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString )
{
 800ab04:	b510      	push	{r4, lr}
 800ab06:	1e04      	subs	r4, r0, #0

  /* Remove compile time warnings about unused parameters, and check the
  write buffer is not NULL.  NOTE - for simplicity, this example assumes the
  write buffer length is adequate, so does not check for buffer overflows. */
  ( void ) xWriteBufferLen;
  configASSERT( pcWriteBuffer );
 800ab08:	d00b      	beq.n	800ab22 <rangeModParamCommand+0x1e>

  sprintf( ( char * ) pcWriteBuffer, ( char * ) pcDistanceVerboseMsg, h08r6_range);
 800ab0a:	4b07      	ldr	r3, [pc, #28]	; (800ab28 <rangeModParamCommand+0x24>)
 800ab0c:	6818      	ldr	r0, [r3, #0]
 800ab0e:	f7f7 ff41 	bl	8002994 <__aeabi_f2d>
 800ab12:	0002      	movs	r2, r0
 800ab14:	000b      	movs	r3, r1
 800ab16:	4905      	ldr	r1, [pc, #20]	; (800ab2c <rangeModParamCommand+0x28>)
 800ab18:	0020      	movs	r0, r4
 800ab1a:	f00b fe1f 	bl	801675c <siprintf>

  /* There is no more data to return after this single string, so return pdFALSE. */
  return pdFALSE;
}
 800ab1e:	2000      	movs	r0, #0
 800ab20:	bd10      	pop	{r4, pc}
  configASSERT( pcWriteBuffer );
 800ab22:	b672      	cpsid	i
 800ab24:	e7fe      	b.n	800ab24 <rangeModParamCommand+0x20>
 800ab26:	46c0      	nop			; (mov r8, r8)
 800ab28:	20001158 	.word	0x20001158
 800ab2c:	0801c35c 	.word	0x0801c35c

0800ab30 <CheckForEnterKey>:
{	
 800ab30:	b510      	push	{r4, lr}
 800ab32:	b082      	sub	sp, #8
		if (UARTRxBuf[PcPort-1][chr] == '\r') {
 800ab34:	4b10      	ldr	r3, [pc, #64]	; (800ab78 <CheckForEnterKey+0x48>)
 800ab36:	781c      	ldrb	r4, [r3, #0]
 800ab38:	3c01      	subs	r4, #1
 800ab3a:	01a1      	lsls	r1, r4, #6
 800ab3c:	4b0f      	ldr	r3, [pc, #60]	; (800ab7c <CheckForEnterKey+0x4c>)
 800ab3e:	18c9      	adds	r1, r1, r3
 800ab40:	2300      	movs	r3, #0
 800ab42:	0018      	movs	r0, r3
 800ab44:	5cca      	ldrb	r2, [r1, r3]
 800ab46:	2a0d      	cmp	r2, #13
 800ab48:	d003      	beq.n	800ab52 <CheckForEnterKey+0x22>
	for (uint8_t chr=0 ; chr<MSG_RX_BUF_SIZE ; chr++)
 800ab4a:	3301      	adds	r3, #1
 800ab4c:	2b40      	cmp	r3, #64	; 0x40
 800ab4e:	d1f8      	bne.n	800ab42 <CheckForEnterKey+0x12>
 800ab50:	e00f      	b.n	800ab72 <CheckForEnterKey+0x42>
			UARTRxBuf[PcPort-1][chr] = 0;
 800ab52:	01a4      	lsls	r4, r4, #6
 800ab54:	4b09      	ldr	r3, [pc, #36]	; (800ab7c <CheckForEnterKey+0x4c>)
 800ab56:	191c      	adds	r4, r3, r4
 800ab58:	2300      	movs	r3, #0
 800ab5a:	5423      	strb	r3, [r4, r0]
			startMeasurementRanging = STOP_MEASUREMENT_RANGING;
 800ab5c:	4a08      	ldr	r2, [pc, #32]	; (800ab80 <CheckForEnterKey+0x50>)
 800ab5e:	7013      	strb	r3, [r2, #0]
			tofMode = REQ_IDLE;		// Stop the streaming task
 800ab60:	4a08      	ldr	r2, [pc, #32]	; (800ab84 <CheckForEnterKey+0x54>)
 800ab62:	7013      	strb	r3, [r2, #0]
			xTimerStop( xTimerTof, 0 ); // Stop any running timeout timer
 800ab64:	4a08      	ldr	r2, [pc, #32]	; (800ab88 <CheckForEnterKey+0x58>)
 800ab66:	6810      	ldr	r0, [r2, #0]
 800ab68:	9300      	str	r3, [sp, #0]
 800ab6a:	2200      	movs	r2, #0
 800ab6c:	2103      	movs	r1, #3
 800ab6e:	f004 ff4d 	bl	800fa0c <xTimerGenericCommand>
}
 800ab72:	b002      	add	sp, #8
 800ab74:	bd10      	pop	{r4, pc}
 800ab76:	46c0      	nop			; (mov r8, r8)
 800ab78:	2000055f 	.word	0x2000055f
 800ab7c:	20000d54 	.word	0x20000d54
 800ab80:	20001160 	.word	0x20001160
 800ab84:	200064b4 	.word	0x200064b4
 800ab88:	20001168 	.word	0x20001168

0800ab8c <SendMeasurementResult>:
{
 800ab8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ab8e:	46c6      	mov	lr, r8
 800ab90:	b500      	push	{lr}
 800ab92:	b086      	sub	sp, #24
 800ab94:	0004      	movs	r4, r0
 800ab96:	1c0d      	adds	r5, r1, #0
 800ab98:	9202      	str	r2, [sp, #8]
 800ab9a:	9303      	str	r3, [sp, #12]
  pcOutputString = FreeRTOS_CLIGetOutputBuffer();
 800ab9c:	f003 faf2 	bl	800e184 <FreeRTOS_CLIGetOutputBuffer>
 800aba0:	0007      	movs	r7, r0
  if (UNIT_MEASUREMENT_CM == h08r6UnitMeasurement)
 800aba2:	4baa      	ldr	r3, [pc, #680]	; (800ae4c <SendMeasurementResult+0x2c0>)
 800aba4:	781e      	ldrb	r6, [r3, #0]
 800aba6:	2e01      	cmp	r6, #1
 800aba8:	d012      	beq.n	800abd0 <SendMeasurementResult+0x44>
  else if (UNIT_MEASUREMENT_INCH == h08r6UnitMeasurement)
 800abaa:	2e02      	cmp	r6, #2
 800abac:	d016      	beq.n	800abdc <SendMeasurementResult+0x50>
  tempData = ConvertCurrentUnit(distance);
 800abae:	9505      	str	r5, [sp, #20]
	if (request != REQ_SAMPLE_VERBOSE_CLI && request != REQ_STREAM_VERBOSE_PORT_CLI)
 800abb0:	2c03      	cmp	r4, #3
 800abb2:	d100      	bne.n	800abb6 <SendMeasurementResult+0x2a>
 800abb4:	e13d      	b.n	800ae32 <SendMeasurementResult+0x2a6>
 800abb6:	2c06      	cmp	r4, #6
 800abb8:	d11b      	bne.n	800abf2 <SendMeasurementResult+0x66>
	if (tofState == REQ_TIMEOUT)
 800abba:	4ba5      	ldr	r3, [pc, #660]	; (800ae50 <SendMeasurementResult+0x2c4>)
 800abbc:	781b      	ldrb	r3, [r3, #0]
 800abbe:	2b0b      	cmp	r3, #11
 800abc0:	d100      	bne.n	800abc4 <SendMeasurementResult+0x38>
 800abc2:	e107      	b.n	800add4 <SendMeasurementResult+0x248>
  switch(request)
 800abc4:	2c10      	cmp	r4, #16
 800abc6:	d872      	bhi.n	800acae <SendMeasurementResult+0x122>
 800abc8:	00a3      	lsls	r3, r4, #2
 800abca:	4aa2      	ldr	r2, [pc, #648]	; (800ae54 <SendMeasurementResult+0x2c8>)
 800abcc:	58d3      	ldr	r3, [r2, r3]
 800abce:	469f      	mov	pc, r3
    temp = distance / 10;
 800abd0:	49a1      	ldr	r1, [pc, #644]	; (800ae58 <SendMeasurementResult+0x2cc>)
 800abd2:	1c28      	adds	r0, r5, #0
 800abd4:	f7f5 fede 	bl	8000994 <__aeabi_fdiv>
 800abd8:	1c05      	adds	r5, r0, #0
 800abda:	e7e8      	b.n	800abae <SendMeasurementResult+0x22>
    temp = distance / 25.4; /* 1mm = (1/25.4)″ = 0.03937007874″ */
 800abdc:	1c28      	adds	r0, r5, #0
 800abde:	f7f7 fed9 	bl	8002994 <__aeabi_f2d>
 800abe2:	4a9e      	ldr	r2, [pc, #632]	; (800ae5c <SendMeasurementResult+0x2d0>)
 800abe4:	4b9e      	ldr	r3, [pc, #632]	; (800ae60 <SendMeasurementResult+0x2d4>)
 800abe6:	f7f6 fc45 	bl	8001474 <__aeabi_ddiv>
 800abea:	f7f7 ff1b 	bl	8002a24 <__aeabi_d2f>
 800abee:	1c05      	adds	r5, r0, #0
 800abf0:	e7dd      	b.n	800abae <SendMeasurementResult+0x22>
		strUnit = malloc(6*sizeof(char));
 800abf2:	2006      	movs	r0, #6
 800abf4:	f00b fc7c 	bl	80164f0 <malloc>
 800abf8:	4680      	mov	r8, r0
		memset(strUnit, 0, (6*sizeof(char)));
 800abfa:	2206      	movs	r2, #6
 800abfc:	2100      	movs	r1, #0
 800abfe:	f00b fca2 	bl	8016546 <memset>
		if (UNIT_MEASUREMENT_MM == h08r6UnitMeasurement)
 800ac02:	2e00      	cmp	r6, #0
 800ac04:	d015      	beq.n	800ac32 <SendMeasurementResult+0xa6>
		else if (UNIT_MEASUREMENT_CM == h08r6UnitMeasurement)
 800ac06:	2e01      	cmp	r6, #1
 800ac08:	d01a      	beq.n	800ac40 <SendMeasurementResult+0xb4>
		else if (UNIT_MEASUREMENT_INCH == h08r6UnitMeasurement)
 800ac0a:	2e02      	cmp	r6, #2
 800ac0c:	d01f      	beq.n	800ac4e <SendMeasurementResult+0xc2>
  if (tempData >= h08r6MaxRange)
 800ac0e:	1c29      	adds	r1, r5, #0
 800ac10:	4b94      	ldr	r3, [pc, #592]	; (800ae64 <SendMeasurementResult+0x2d8>)
 800ac12:	6818      	ldr	r0, [r3, #0]
 800ac14:	f7f5 fc6c 	bl	80004f0 <__aeabi_fcmple>
 800ac18:	2800      	cmp	r0, #0
 800ac1a:	d029      	beq.n	800ac70 <SendMeasurementResult+0xe4>
    switch(request)
 800ac1c:	2c04      	cmp	r4, #4
 800ac1e:	d100      	bne.n	800ac22 <SendMeasurementResult+0x96>
 800ac20:	e103      	b.n	800ae2a <SendMeasurementResult+0x29e>
 800ac22:	d91b      	bls.n	800ac5c <SendMeasurementResult+0xd0>
 800ac24:	2c05      	cmp	r4, #5
 800ac26:	d100      	bne.n	800ac2a <SendMeasurementResult+0x9e>
 800ac28:	e101      	b.n	800ae2e <SendMeasurementResult+0x2a2>
 800ac2a:	2c07      	cmp	r4, #7
 800ac2c:	d120      	bne.n	800ac70 <SendMeasurementResult+0xe4>
 800ac2e:	240a      	movs	r4, #10
 800ac30:	e017      	b.n	800ac62 <SendMeasurementResult+0xd6>
			sprintf( ( char * ) strUnit, "mm");
 800ac32:	4b8d      	ldr	r3, [pc, #564]	; (800ae68 <SendMeasurementResult+0x2dc>)
 800ac34:	881a      	ldrh	r2, [r3, #0]
 800ac36:	4641      	mov	r1, r8
 800ac38:	800a      	strh	r2, [r1, #0]
 800ac3a:	789b      	ldrb	r3, [r3, #2]
 800ac3c:	708b      	strb	r3, [r1, #2]
 800ac3e:	e7e6      	b.n	800ac0e <SendMeasurementResult+0x82>
			sprintf( ( char * ) strUnit, "cm");
 800ac40:	4b8a      	ldr	r3, [pc, #552]	; (800ae6c <SendMeasurementResult+0x2e0>)
 800ac42:	881a      	ldrh	r2, [r3, #0]
 800ac44:	4641      	mov	r1, r8
 800ac46:	800a      	strh	r2, [r1, #0]
 800ac48:	789b      	ldrb	r3, [r3, #2]
 800ac4a:	708b      	strb	r3, [r1, #2]
 800ac4c:	e7df      	b.n	800ac0e <SendMeasurementResult+0x82>
			sprintf( ( char * ) strUnit, "inch");
 800ac4e:	4b88      	ldr	r3, [pc, #544]	; (800ae70 <SendMeasurementResult+0x2e4>)
 800ac50:	4642      	mov	r2, r8
 800ac52:	6819      	ldr	r1, [r3, #0]
 800ac54:	6011      	str	r1, [r2, #0]
 800ac56:	791b      	ldrb	r3, [r3, #4]
 800ac58:	7113      	strb	r3, [r2, #4]
 800ac5a:	e7d8      	b.n	800ac0e <SendMeasurementResult+0x82>
    switch(request)
 800ac5c:	2c02      	cmp	r4, #2
 800ac5e:	d107      	bne.n	800ac70 <SendMeasurementResult+0xe4>
        request = REQ_OUT_RANGE_CLI;
 800ac60:	2409      	movs	r4, #9
  switch(request)
 800ac62:	2c10      	cmp	r4, #16
 800ac64:	d900      	bls.n	800ac68 <SendMeasurementResult+0xdc>
 800ac66:	e0b1      	b.n	800adcc <SendMeasurementResult+0x240>
 800ac68:	00a3      	lsls	r3, r4, #2
 800ac6a:	4a82      	ldr	r2, [pc, #520]	; (800ae74 <SendMeasurementResult+0x2e8>)
 800ac6c:	58d3      	ldr	r3, [r2, r3]
 800ac6e:	469f      	mov	pc, r3
	if (tofState == REQ_TIMEOUT)
 800ac70:	4b77      	ldr	r3, [pc, #476]	; (800ae50 <SendMeasurementResult+0x2c4>)
 800ac72:	781b      	ldrb	r3, [r3, #0]
 800ac74:	2b0b      	cmp	r3, #11
 800ac76:	d1a5      	bne.n	800abc4 <SendMeasurementResult+0x38>
 800ac78:	e0e0      	b.n	800ae3c <SendMeasurementResult+0x2b0>
      sprintf( ( char * ) pcOutputString, ( char * ) pcDistanceMsg, strUnit, tempData);
 800ac7a:	1c28      	adds	r0, r5, #0
 800ac7c:	f7f7 fe8a 	bl	8002994 <__aeabi_f2d>
 800ac80:	9000      	str	r0, [sp, #0]
 800ac82:	9101      	str	r1, [sp, #4]
 800ac84:	4642      	mov	r2, r8
 800ac86:	497c      	ldr	r1, [pc, #496]	; (800ae78 <SendMeasurementResult+0x2ec>)
 800ac88:	0038      	movs	r0, r7
 800ac8a:	f00b fd67 	bl	801675c <siprintf>
      writePxMutex(PcPort, (char *)pcOutputString, strlen((char *)pcOutputString), cmd500ms, HAL_MAX_DELAY);
 800ac8e:	0038      	movs	r0, r7
 800ac90:	f7f5 fa42 	bl	8000118 <strlen>
 800ac94:	23fa      	movs	r3, #250	; 0xfa
 800ac96:	b282      	uxth	r2, r0
 800ac98:	4978      	ldr	r1, [pc, #480]	; (800ae7c <SendMeasurementResult+0x2f0>)
 800ac9a:	7808      	ldrb	r0, [r1, #0]
 800ac9c:	2101      	movs	r1, #1
 800ac9e:	4249      	negs	r1, r1
 800aca0:	9100      	str	r1, [sp, #0]
 800aca2:	005b      	lsls	r3, r3, #1
 800aca4:	0039      	movs	r1, r7
 800aca6:	f003 f81b 	bl	800dce0 <writePxMutex>
			CheckForEnterKey();
 800acaa:	f7ff ff41 	bl	800ab30 <CheckForEnterKey>
	if (request != REQ_SAMPLE_VERBOSE_CLI && request != REQ_STREAM_VERBOSE_PORT_CLI){
 800acae:	2c03      	cmp	r4, #3
 800acb0:	d000      	beq.n	800acb4 <SendMeasurementResult+0x128>
 800acb2:	e0b6      	b.n	800ae22 <SendMeasurementResult+0x296>
}
 800acb4:	b006      	add	sp, #24
 800acb6:	bc80      	pop	{r7}
 800acb8:	46b8      	mov	r8, r7
 800acba:	bdf0      	pop	{r4, r5, r6, r7, pc}
      sprintf( ( char * ) pcOutputString, ( char * ) pcDistanceVerboseMsg, tempData);
 800acbc:	1c28      	adds	r0, r5, #0
 800acbe:	f7f7 fe69 	bl	8002994 <__aeabi_f2d>
 800acc2:	0002      	movs	r2, r0
 800acc4:	000b      	movs	r3, r1
 800acc6:	496e      	ldr	r1, [pc, #440]	; (800ae80 <SendMeasurementResult+0x2f4>)
 800acc8:	0038      	movs	r0, r7
 800acca:	f00b fd47 	bl	801675c <siprintf>
      writePxMutex(PcPort, (char *)pcOutputString, strlen((char *)pcOutputString), cmd500ms, HAL_MAX_DELAY);
 800acce:	0038      	movs	r0, r7
 800acd0:	f7f5 fa22 	bl	8000118 <strlen>
 800acd4:	23fa      	movs	r3, #250	; 0xfa
 800acd6:	b282      	uxth	r2, r0
 800acd8:	4968      	ldr	r1, [pc, #416]	; (800ae7c <SendMeasurementResult+0x2f0>)
 800acda:	7808      	ldrb	r0, [r1, #0]
 800acdc:	2101      	movs	r1, #1
 800acde:	4249      	negs	r1, r1
 800ace0:	9100      	str	r1, [sp, #0]
 800ace2:	005b      	lsls	r3, r3, #1
 800ace4:	0039      	movs	r1, r7
 800ace6:	f002 fffb 	bl	800dce0 <writePxMutex>
			CheckForEnterKey();
 800acea:	f7ff ff21 	bl	800ab30 <CheckForEnterKey>
      break;
 800acee:	e7de      	b.n	800acae <SendMeasurementResult+0x122>
			if (module==myID){
 800acf0:	4b64      	ldr	r3, [pc, #400]	; (800ae84 <SendMeasurementResult+0x2f8>)
 800acf2:	781b      	ldrb	r3, [r3, #0]
 800acf4:	9a02      	ldr	r2, [sp, #8]
 800acf6:	4293      	cmp	r3, r2
 800acf8:	d011      	beq.n	800ad1e <SendMeasurementResult+0x192>
					   messageParams[0]=port;
 800acfa:	4b63      	ldr	r3, [pc, #396]	; (800ae88 <SendMeasurementResult+0x2fc>)
 800acfc:	9a03      	ldr	r2, [sp, #12]
 800acfe:	701a      	strb	r2, [r3, #0]
					   messageParams[1] = *((__IO uint8_t *)(&tempData)+3);
 800ad00:	aa05      	add	r2, sp, #20
 800ad02:	78d1      	ldrb	r1, [r2, #3]
 800ad04:	7059      	strb	r1, [r3, #1]
				   	   messageParams[2] = *((__IO uint8_t *)(&tempData)+2);
 800ad06:	7891      	ldrb	r1, [r2, #2]
 800ad08:	7099      	strb	r1, [r3, #2]
					   messageParams[3] = *((__IO uint8_t *)(&tempData)+1);
 800ad0a:	7851      	ldrb	r1, [r2, #1]
 800ad0c:	70d9      	strb	r1, [r3, #3]
					   messageParams[4] = *((__IO uint8_t *)(&tempData)+0);
 800ad0e:	7812      	ldrb	r2, [r2, #0]
 800ad10:	711a      	strb	r2, [r3, #4]
					   SendMessageToModule(module, CODE_PORT_FORWARD, sizeof(float)+1);
 800ad12:	2205      	movs	r2, #5
 800ad14:	2123      	movs	r1, #35	; 0x23
 800ad16:	9802      	ldr	r0, [sp, #8]
 800ad18:	f7fe f8e2 	bl	8008ee0 <SendMessageToModule>
 800ad1c:	e7c7      	b.n	800acae <SendMeasurementResult+0x122>
						temp[0] = *((__IO uint8_t *)(&tempData)+3);
 800ad1e:	ab05      	add	r3, sp, #20
 800ad20:	78da      	ldrb	r2, [r3, #3]
 800ad22:	495a      	ldr	r1, [pc, #360]	; (800ae8c <SendMeasurementResult+0x300>)
 800ad24:	700a      	strb	r2, [r1, #0]
						temp[1] = *((__IO uint8_t *)(&tempData)+2);
 800ad26:	789a      	ldrb	r2, [r3, #2]
 800ad28:	704a      	strb	r2, [r1, #1]
						temp[2] = *((__IO uint8_t *)(&tempData)+1);
 800ad2a:	785a      	ldrb	r2, [r3, #1]
 800ad2c:	708a      	strb	r2, [r1, #2]
						temp[3] = *((__IO uint8_t *)(&tempData)+0);
 800ad2e:	781b      	ldrb	r3, [r3, #0]
 800ad30:	70cb      	strb	r3, [r1, #3]
						writePxMutex(port, (char *)&temp, 4*sizeof(uint8_t), 10, 10);
 800ad32:	230a      	movs	r3, #10
 800ad34:	9300      	str	r3, [sp, #0]
 800ad36:	2204      	movs	r2, #4
 800ad38:	9803      	ldr	r0, [sp, #12]
 800ad3a:	f002 ffd1 	bl	800dce0 <writePxMutex>
 800ad3e:	e7b6      	b.n	800acae <SendMeasurementResult+0x122>
      memset(buffer, 0, sizeof(float));
 800ad40:	2204      	movs	r2, #4
 800ad42:	2100      	movs	r1, #0
 800ad44:	980c      	ldr	r0, [sp, #48]	; 0x30
 800ad46:	f00b fbfe 	bl	8016546 <memset>
      memcpy((void *)&buffer[stream_index], &tempData, sizeof(float));		
 800ad4a:	4b51      	ldr	r3, [pc, #324]	; (800ae90 <SendMeasurementResult+0x304>)
 800ad4c:	7818      	ldrb	r0, [r3, #0]
 800ad4e:	0080      	lsls	r0, r0, #2
 800ad50:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ad52:	469c      	mov	ip, r3
 800ad54:	4460      	add	r0, ip
 800ad56:	2204      	movs	r2, #4
 800ad58:	a905      	add	r1, sp, #20
 800ad5a:	f00b fbeb 	bl	8016534 <memcpy>
      break;
 800ad5e:	e035      	b.n	800adcc <SendMeasurementResult+0x240>
      strcpy( ( char * ) pcOutputString, ( char * ) pcOutMaxRange);
 800ad60:	2206      	movs	r2, #6
 800ad62:	494c      	ldr	r1, [pc, #304]	; (800ae94 <SendMeasurementResult+0x308>)
 800ad64:	0038      	movs	r0, r7
 800ad66:	f00b fbe5 	bl	8016534 <memcpy>
      writePxMutex(PcPort, (char *)pcOutputString, strlen((char *)pcOutputString), cmd500ms, HAL_MAX_DELAY);
 800ad6a:	0038      	movs	r0, r7
 800ad6c:	f7f5 f9d4 	bl	8000118 <strlen>
 800ad70:	23fa      	movs	r3, #250	; 0xfa
 800ad72:	b282      	uxth	r2, r0
 800ad74:	4941      	ldr	r1, [pc, #260]	; (800ae7c <SendMeasurementResult+0x2f0>)
 800ad76:	7808      	ldrb	r0, [r1, #0]
 800ad78:	2101      	movs	r1, #1
 800ad7a:	4249      	negs	r1, r1
 800ad7c:	9100      	str	r1, [sp, #0]
 800ad7e:	005b      	lsls	r3, r3, #1
 800ad80:	0039      	movs	r1, r7
 800ad82:	f002 ffad 	bl	800dce0 <writePxMutex>
			CheckForEnterKey();
 800ad86:	f7ff fed3 	bl	800ab30 <CheckForEnterKey>
      break;
 800ad8a:	e01f      	b.n	800adcc <SendMeasurementResult+0x240>
      SendMessageFromPort(port, myID, module, CODE_H08R6_MAX_RANGE, 0);
 800ad8c:	239a      	movs	r3, #154	; 0x9a
 800ad8e:	4a3d      	ldr	r2, [pc, #244]	; (800ae84 <SendMeasurementResult+0x2f8>)
 800ad90:	7811      	ldrb	r1, [r2, #0]
 800ad92:	2200      	movs	r2, #0
 800ad94:	9200      	str	r2, [sp, #0]
 800ad96:	33ff      	adds	r3, #255	; 0xff
 800ad98:	9a02      	ldr	r2, [sp, #8]
 800ad9a:	9803      	ldr	r0, [sp, #12]
 800ad9c:	f7fd fe76 	bl	8008a8c <SendMessageFromPort>
      break;
 800ada0:	e014      	b.n	800adcc <SendMeasurementResult+0x240>
      strcpy( ( char * ) pcOutputString, ( char * ) pcOutTimeout);
 800ada2:	220a      	movs	r2, #10
 800ada4:	493c      	ldr	r1, [pc, #240]	; (800ae98 <SendMeasurementResult+0x30c>)
 800ada6:	0038      	movs	r0, r7
 800ada8:	f00b fbc4 	bl	8016534 <memcpy>
      writePxMutex(PcPort, (char *)pcOutputString, strlen((char *)pcOutputString), cmd500ms, HAL_MAX_DELAY);
 800adac:	0038      	movs	r0, r7
 800adae:	f7f5 f9b3 	bl	8000118 <strlen>
 800adb2:	23fa      	movs	r3, #250	; 0xfa
 800adb4:	b282      	uxth	r2, r0
 800adb6:	4931      	ldr	r1, [pc, #196]	; (800ae7c <SendMeasurementResult+0x2f0>)
 800adb8:	7808      	ldrb	r0, [r1, #0]
 800adba:	2101      	movs	r1, #1
 800adbc:	4249      	negs	r1, r1
 800adbe:	9100      	str	r1, [sp, #0]
 800adc0:	005b      	lsls	r3, r3, #1
 800adc2:	0039      	movs	r1, r7
 800adc4:	f002 ff8c 	bl	800dce0 <writePxMutex>
			CheckForEnterKey();
 800adc8:	f7ff feb2 	bl	800ab30 <CheckForEnterKey>
		free(strUnit);
 800adcc:	4640      	mov	r0, r8
 800adce:	f00b fb99 	bl	8016504 <free>
}
 800add2:	e76f      	b.n	800acb4 <SendMeasurementResult+0x128>
      sprintf( ( char * ) pcOutputString, ( char * ) pcDistanceVerboseMsg, 0);
 800add4:	2200      	movs	r2, #0
 800add6:	492a      	ldr	r1, [pc, #168]	; (800ae80 <SendMeasurementResult+0x2f4>)
 800add8:	0038      	movs	r0, r7
 800adda:	f00b fcbf 	bl	801675c <siprintf>
      writePxMutex(PcPort, (char *)pcOutputString, strlen((char *)pcOutputString), cmd500ms, HAL_MAX_DELAY);
 800adde:	0038      	movs	r0, r7
 800ade0:	f7f5 f99a 	bl	8000118 <strlen>
 800ade4:	23fa      	movs	r3, #250	; 0xfa
 800ade6:	b282      	uxth	r2, r0
 800ade8:	4924      	ldr	r1, [pc, #144]	; (800ae7c <SendMeasurementResult+0x2f0>)
 800adea:	7808      	ldrb	r0, [r1, #0]
 800adec:	2101      	movs	r1, #1
 800adee:	4249      	negs	r1, r1
 800adf0:	9100      	str	r1, [sp, #0]
 800adf2:	005b      	lsls	r3, r3, #1
 800adf4:	0039      	movs	r1, r7
 800adf6:	f002 ff73 	bl	800dce0 <writePxMutex>
			CheckForEnterKey();
 800adfa:	f7ff fe99 	bl	800ab30 <CheckForEnterKey>
      break;
 800adfe:	e7e5      	b.n	800adcc <SendMeasurementResult+0x240>
      memset(buffer, 0, sizeof(float));
 800ae00:	2204      	movs	r2, #4
 800ae02:	2100      	movs	r1, #0
 800ae04:	980c      	ldr	r0, [sp, #48]	; 0x30
 800ae06:	f00b fb9e 	bl	8016546 <memset>
      break;
 800ae0a:	e7df      	b.n	800adcc <SendMeasurementResult+0x240>
      SendMessageFromPort(port, myID, module, CODE_H08R6_TIMEOUT, 0);
 800ae0c:	239c      	movs	r3, #156	; 0x9c
 800ae0e:	4a1d      	ldr	r2, [pc, #116]	; (800ae84 <SendMeasurementResult+0x2f8>)
 800ae10:	7811      	ldrb	r1, [r2, #0]
 800ae12:	2200      	movs	r2, #0
 800ae14:	9200      	str	r2, [sp, #0]
 800ae16:	33ff      	adds	r3, #255	; 0xff
 800ae18:	9a02      	ldr	r2, [sp, #8]
 800ae1a:	9803      	ldr	r0, [sp, #12]
 800ae1c:	f7fd fe36 	bl	8008a8c <SendMessageFromPort>
      break;
 800ae20:	e7d4      	b.n	800adcc <SendMeasurementResult+0x240>
	if (request != REQ_SAMPLE_VERBOSE_CLI && request != REQ_STREAM_VERBOSE_PORT_CLI){
 800ae22:	2c06      	cmp	r4, #6
 800ae24:	d100      	bne.n	800ae28 <SendMeasurementResult+0x29c>
 800ae26:	e745      	b.n	800acb4 <SendMeasurementResult+0x128>
 800ae28:	e7d0      	b.n	800adcc <SendMeasurementResult+0x240>
    switch(request)
 800ae2a:	240a      	movs	r4, #10
 800ae2c:	e719      	b.n	800ac62 <SendMeasurementResult+0xd6>
        request = REQ_OUT_RANGE_CLI;
 800ae2e:	2409      	movs	r4, #9
 800ae30:	e717      	b.n	800ac62 <SendMeasurementResult+0xd6>
	if (tofState == REQ_TIMEOUT)
 800ae32:	4b07      	ldr	r3, [pc, #28]	; (800ae50 <SendMeasurementResult+0x2c4>)
 800ae34:	781b      	ldrb	r3, [r3, #0]
 800ae36:	2b0b      	cmp	r3, #11
 800ae38:	d000      	beq.n	800ae3c <SendMeasurementResult+0x2b0>
 800ae3a:	e73f      	b.n	800acbc <SendMeasurementResult+0x130>
    switch(request)
 800ae3c:	2c08      	cmp	r4, #8
 800ae3e:	d900      	bls.n	800ae42 <SendMeasurementResult+0x2b6>
 800ae40:	e6c0      	b.n	800abc4 <SendMeasurementResult+0x38>
 800ae42:	00a3      	lsls	r3, r4, #2
 800ae44:	4a15      	ldr	r2, [pc, #84]	; (800ae9c <SendMeasurementResult+0x310>)
 800ae46:	58d3      	ldr	r3, [r2, r3]
 800ae48:	469f      	mov	pc, r3
 800ae4a:	46c0      	nop			; (mov r8, r8)
 800ae4c:	20001154 	.word	0x20001154
 800ae50:	2000659c 	.word	0x2000659c
 800ae54:	0801c3a0 	.word	0x0801c3a0
 800ae58:	41200000 	.word	0x41200000
 800ae5c:	66666666 	.word	0x66666666
 800ae60:	40396666 	.word	0x40396666
 800ae64:	20000084 	.word	0x20000084
 800ae68:	0801c364 	.word	0x0801c364
 800ae6c:	0801c368 	.word	0x0801c368
 800ae70:	0801c36c 	.word	0x0801c36c
 800ae74:	0801c3e4 	.word	0x0801c3e4
 800ae78:	0801c374 	.word	0x0801c374
 800ae7c:	2000055f 	.word	0x2000055f
 800ae80:	0801c35c 	.word	0x0801c35c
 800ae84:	20000b04 	.word	0x20000b04
 800ae88:	200009d0 	.word	0x200009d0
 800ae8c:	20001164 	.word	0x20001164
 800ae90:	20001161 	.word	0x20001161
 800ae94:	0801c38c 	.word	0x0801c38c
 800ae98:	0801c394 	.word	0x0801c394
 800ae9c:	0801c428 	.word	0x0801c428

0800aea0 <Vl53l0xUnitsCommand>:
{
 800aea0:	b530      	push	{r4, r5, lr}
 800aea2:	b083      	sub	sp, #12
 800aea4:	0004      	movs	r4, r0
 800aea6:	0010      	movs	r0, r2
  portBASE_TYPE xParameterStringLength1 = 0;
 800aea8:	2300      	movs	r3, #0
 800aeaa:	9301      	str	r3, [sp, #4]
  configASSERT( pcWriteBuffer );
 800aeac:	2c00      	cmp	r4, #0
 800aeae:	d01e      	beq.n	800aeee <Vl53l0xUnitsCommand+0x4e>
  pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 800aeb0:	aa01      	add	r2, sp, #4
 800aeb2:	2101      	movs	r1, #1
 800aeb4:	f003 f96a 	bl	800e18c <FreeRTOS_CLIGetParameter>
 800aeb8:	0005      	movs	r5, r0
  if (!strncmp((const char *)pcParameterString1, "mm", 2))
 800aeba:	2202      	movs	r2, #2
 800aebc:	491b      	ldr	r1, [pc, #108]	; (800af2c <Vl53l0xUnitsCommand+0x8c>)
 800aebe:	f00b fc90 	bl	80167e2 <strncmp>
 800aec2:	2800      	cmp	r0, #0
 800aec4:	d015      	beq.n	800aef2 <Vl53l0xUnitsCommand+0x52>
  else if (!strncmp((const char *)pcParameterString1, "cm", 2))
 800aec6:	2202      	movs	r2, #2
 800aec8:	4919      	ldr	r1, [pc, #100]	; (800af30 <Vl53l0xUnitsCommand+0x90>)
 800aeca:	0028      	movs	r0, r5
 800aecc:	f00b fc89 	bl	80167e2 <strncmp>
 800aed0:	2800      	cmp	r0, #0
 800aed2:	d019      	beq.n	800af08 <Vl53l0xUnitsCommand+0x68>
  else if (!strncmp((const char *)pcParameterString1, "inch", 4))
 800aed4:	2204      	movs	r2, #4
 800aed6:	4917      	ldr	r1, [pc, #92]	; (800af34 <Vl53l0xUnitsCommand+0x94>)
 800aed8:	0028      	movs	r0, r5
 800aeda:	f00b fc82 	bl	80167e2 <strncmp>
 800aede:	2800      	cmp	r0, #0
 800aee0:	d01b      	beq.n	800af1a <Vl53l0xUnitsCommand+0x7a>
    strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrongParam );
 800aee2:	2213      	movs	r2, #19
 800aee4:	4914      	ldr	r1, [pc, #80]	; (800af38 <Vl53l0xUnitsCommand+0x98>)
 800aee6:	0020      	movs	r0, r4
 800aee8:	f00b fb24 	bl	8016534 <memcpy>
 800aeec:	e009      	b.n	800af02 <Vl53l0xUnitsCommand+0x62>
  configASSERT( pcWriteBuffer );
 800aeee:	b672      	cpsid	i
 800aef0:	e7fe      	b.n	800aef0 <Vl53l0xUnitsCommand+0x50>
    h08r6UnitMeasurement = UNIT_MEASUREMENT_MM;
 800aef2:	4b12      	ldr	r3, [pc, #72]	; (800af3c <Vl53l0xUnitsCommand+0x9c>)
 800aef4:	2200      	movs	r2, #0
 800aef6:	701a      	strb	r2, [r3, #0]
    strcpy( ( char * ) pcWriteBuffer, ( char * ) "Used measurement unit: mm\r\n" );
 800aef8:	321c      	adds	r2, #28
 800aefa:	4911      	ldr	r1, [pc, #68]	; (800af40 <Vl53l0xUnitsCommand+0xa0>)
 800aefc:	0020      	movs	r0, r4
 800aefe:	f00b fb19 	bl	8016534 <memcpy>
}
 800af02:	2000      	movs	r0, #0
 800af04:	b003      	add	sp, #12
 800af06:	bd30      	pop	{r4, r5, pc}
    h08r6UnitMeasurement = UNIT_MEASUREMENT_CM;
 800af08:	4b0c      	ldr	r3, [pc, #48]	; (800af3c <Vl53l0xUnitsCommand+0x9c>)
 800af0a:	2201      	movs	r2, #1
 800af0c:	701a      	strb	r2, [r3, #0]
    strcpy( ( char * ) pcWriteBuffer, ( char * ) "Used measurement unit: cm\r\n" );
 800af0e:	321b      	adds	r2, #27
 800af10:	490c      	ldr	r1, [pc, #48]	; (800af44 <Vl53l0xUnitsCommand+0xa4>)
 800af12:	0020      	movs	r0, r4
 800af14:	f00b fb0e 	bl	8016534 <memcpy>
  if (H08R6_ERR_WrongParams == result)
 800af18:	e7f3      	b.n	800af02 <Vl53l0xUnitsCommand+0x62>
    h08r6UnitMeasurement = UNIT_MEASUREMENT_INCH;
 800af1a:	4b08      	ldr	r3, [pc, #32]	; (800af3c <Vl53l0xUnitsCommand+0x9c>)
 800af1c:	2202      	movs	r2, #2
 800af1e:	701a      	strb	r2, [r3, #0]
    strcpy( ( char * ) pcWriteBuffer, ( char * ) "Used measurement unit: inch\r\n" );
 800af20:	321c      	adds	r2, #28
 800af22:	4909      	ldr	r1, [pc, #36]	; (800af48 <Vl53l0xUnitsCommand+0xa8>)
 800af24:	0020      	movs	r0, r4
 800af26:	f00b fb05 	bl	8016534 <memcpy>
  if (H08R6_ERR_WrongParams == result)
 800af2a:	e7ea      	b.n	800af02 <Vl53l0xUnitsCommand+0x62>
 800af2c:	0801c364 	.word	0x0801c364
 800af30:	0801c368 	.word	0x0801c368
 800af34:	0801c36c 	.word	0x0801c36c
 800af38:	0801a5b4 	.word	0x0801a5b4
 800af3c:	20001154 	.word	0x20001154
 800af40:	0801c44c 	.word	0x0801c44c
 800af44:	0801c468 	.word	0x0801c468
 800af48:	0801c484 	.word	0x0801c484

0800af4c <GetMeasurementResult>:
{
 800af4c:	b500      	push	{lr}
 800af4e:	b089      	sub	sp, #36	; 0x24
  status = VL53L0X_GetRangingMeasurementData(&vl53l0x_HandleDevice, &measurementResult);
 800af50:	a901      	add	r1, sp, #4
 800af52:	4808      	ldr	r0, [pc, #32]	; (800af74 <GetMeasurementResult+0x28>)
 800af54:	f008 fffc 	bl	8013f50 <VL53L0X_GetRangingMeasurementData>
	if (VL53L0X_ERROR_NONE == status) {
 800af58:	2800      	cmp	r0, #0
 800af5a:	d002      	beq.n	800af62 <GetMeasurementResult+0x16>
		return 0;
 800af5c:	2000      	movs	r0, #0
}
 800af5e:	b009      	add	sp, #36	; 0x24
 800af60:	bd00      	pop	{pc}
		status = VL53L0X_ClearInterruptMask(&vl53l0x_HandleDevice, 0);
 800af62:	2100      	movs	r1, #0
 800af64:	4803      	ldr	r0, [pc, #12]	; (800af74 <GetMeasurementResult+0x28>)
 800af66:	f009 fa2a 	bl	80143be <VL53L0X_ClearInterruptMask>
		return (float)measurementResult.RangeMilliMeter;
 800af6a:	ab01      	add	r3, sp, #4
 800af6c:	8918      	ldrh	r0, [r3, #8]
 800af6e:	f7f5 fedb 	bl	8000d28 <__aeabi_ui2f>
 800af72:	e7f4      	b.n	800af5e <GetMeasurementResult+0x12>
 800af74:	20006684 	.word	0x20006684

0800af78 <ToFTask>:
{
 800af78:	b570      	push	{r4, r5, r6, lr}
 800af7a:	b082      	sub	sp, #8
		if (tofState == REQ_MEASUREMENT_READY || (HAL_GetTick()-t0) >= tofPeriod)
 800af7c:	4c2c      	ldr	r4, [pc, #176]	; (800b030 <ToFTask+0xb8>)
			switch (tofMode)
 800af7e:	4e2d      	ldr	r6, [pc, #180]	; (800b034 <ToFTask+0xbc>)
			t0 = HAL_GetTick();			// Reset the timer
 800af80:	4d2d      	ldr	r5, [pc, #180]	; (800b038 <ToFTask+0xc0>)
 800af82:	e020      	b.n	800afc6 <ToFTask+0x4e>
		if (tofState == REQ_MEASUREMENT_READY || (HAL_GetTick()-t0) >= tofPeriod)
 800af84:	f005 f854 	bl	8010030 <HAL_GetTick>
 800af88:	4b2b      	ldr	r3, [pc, #172]	; (800b038 <ToFTask+0xc0>)
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	1ac0      	subs	r0, r0, r3
 800af8e:	4b2b      	ldr	r3, [pc, #172]	; (800b03c <ToFTask+0xc4>)
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	4298      	cmp	r0, r3
 800af94:	d312      	bcc.n	800afbc <ToFTask+0x44>
 800af96:	e019      	b.n	800afcc <ToFTask+0x54>
			switch (tofMode)
 800af98:	2b08      	cmp	r3, #8
 800af9a:	d10c      	bne.n	800afb6 <ToFTask+0x3e>
					h08r6_range = GetMeasurementResult();
 800af9c:	f7ff ffd6 	bl	800af4c <GetMeasurementResult>
 800afa0:	1c01      	adds	r1, r0, #0
 800afa2:	4b27      	ldr	r3, [pc, #156]	; (800b040 <ToFTask+0xc8>)
 800afa4:	6018      	str	r0, [r3, #0]
					SendMeasurementResult(REQ_STREAM_MEMORY, h08r6_range, 0, 0, tofBuffer);		
 800afa6:	4b27      	ldr	r3, [pc, #156]	; (800b044 <ToFTask+0xcc>)
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	9300      	str	r3, [sp, #0]
 800afac:	2300      	movs	r3, #0
 800afae:	2200      	movs	r2, #0
 800afb0:	2008      	movs	r0, #8
 800afb2:	f7ff fdeb 	bl	800ab8c <SendMeasurementResult>
			t0 = HAL_GetTick();			// Reset the timer
 800afb6:	f005 f83b 	bl	8010030 <HAL_GetTick>
 800afba:	6028      	str	r0, [r5, #0]
		tofState = REQ_IDLE;
 800afbc:	4b1c      	ldr	r3, [pc, #112]	; (800b030 <ToFTask+0xb8>)
 800afbe:	2200      	movs	r2, #0
 800afc0:	701a      	strb	r2, [r3, #0]
		taskYIELD();
 800afc2:	f004 fec1 	bl	800fd48 <vPortYield>
		if (tofState == REQ_MEASUREMENT_READY || (HAL_GetTick()-t0) >= tofPeriod)
 800afc6:	7823      	ldrb	r3, [r4, #0]
 800afc8:	2b0c      	cmp	r3, #12
 800afca:	d1db      	bne.n	800af84 <ToFTask+0xc>
			switch (tofMode)
 800afcc:	7833      	ldrb	r3, [r6, #0]
 800afce:	2b07      	cmp	r3, #7
 800afd0:	d01e      	beq.n	800b010 <ToFTask+0x98>
 800afd2:	d8e1      	bhi.n	800af98 <ToFTask+0x20>
 800afd4:	2b05      	cmp	r3, #5
 800afd6:	d00e      	beq.n	800aff6 <ToFTask+0x7e>
 800afd8:	2b06      	cmp	r3, #6
 800afda:	d1ec      	bne.n	800afb6 <ToFTask+0x3e>
					h08r6_range = GetMeasurementResult();
 800afdc:	f7ff ffb6 	bl	800af4c <GetMeasurementResult>
 800afe0:	1c01      	adds	r1, r0, #0
 800afe2:	4b17      	ldr	r3, [pc, #92]	; (800b040 <ToFTask+0xc8>)
 800afe4:	6018      	str	r0, [r3, #0]
					SendMeasurementResult(REQ_STREAM_VERBOSE_PORT_CLI, h08r6_range, 0, PcPort, NULL);		
 800afe6:	4b18      	ldr	r3, [pc, #96]	; (800b048 <ToFTask+0xd0>)
 800afe8:	781b      	ldrb	r3, [r3, #0]
 800afea:	2200      	movs	r2, #0
 800afec:	9200      	str	r2, [sp, #0]
 800afee:	2006      	movs	r0, #6
 800aff0:	f7ff fdcc 	bl	800ab8c <SendMeasurementResult>
					break;
 800aff4:	e7df      	b.n	800afb6 <ToFTask+0x3e>
					h08r6_range = GetMeasurementResult();
 800aff6:	f7ff ffa9 	bl	800af4c <GetMeasurementResult>
 800affa:	1c01      	adds	r1, r0, #0
 800affc:	4b10      	ldr	r3, [pc, #64]	; (800b040 <ToFTask+0xc8>)
 800affe:	6018      	str	r0, [r3, #0]
					SendMeasurementResult(REQ_STREAM_PORT_CLI, h08r6_range, 0, PcPort, NULL);		
 800b000:	4b11      	ldr	r3, [pc, #68]	; (800b048 <ToFTask+0xd0>)
 800b002:	781b      	ldrb	r3, [r3, #0]
 800b004:	2200      	movs	r2, #0
 800b006:	9200      	str	r2, [sp, #0]
 800b008:	2005      	movs	r0, #5
 800b00a:	f7ff fdbf 	bl	800ab8c <SendMeasurementResult>
					break;
 800b00e:	e7d2      	b.n	800afb6 <ToFTask+0x3e>
					h08r6_range = GetMeasurementResult();
 800b010:	f7ff ff9c 	bl	800af4c <GetMeasurementResult>
 800b014:	1c01      	adds	r1, r0, #0
 800b016:	4b0a      	ldr	r3, [pc, #40]	; (800b040 <ToFTask+0xc8>)
 800b018:	6018      	str	r0, [r3, #0]
					SendMeasurementResult(REQ_STREAM_PORT_ARR, h08r6_range, tofModule, tofPort, NULL);		
 800b01a:	4b0c      	ldr	r3, [pc, #48]	; (800b04c <ToFTask+0xd4>)
 800b01c:	781b      	ldrb	r3, [r3, #0]
 800b01e:	4a0c      	ldr	r2, [pc, #48]	; (800b050 <ToFTask+0xd8>)
 800b020:	7812      	ldrb	r2, [r2, #0]
 800b022:	2000      	movs	r0, #0
 800b024:	9000      	str	r0, [sp, #0]
 800b026:	3007      	adds	r0, #7
 800b028:	f7ff fdb0 	bl	800ab8c <SendMeasurementResult>
					break;
 800b02c:	e7c3      	b.n	800afb6 <ToFTask+0x3e>
 800b02e:	46c0      	nop			; (mov r8, r8)
 800b030:	2000659c 	.word	0x2000659c
 800b034:	200064b4 	.word	0x200064b4
 800b038:	20006610 	.word	0x20006610
 800b03c:	20006440 	.word	0x20006440
 800b040:	20001158 	.word	0x20001158
 800b044:	200067e4 	.word	0x200067e4
 800b048:	2000055f 	.word	0x2000055f
 800b04c:	200067e8 	.word	0x200067e8
 800b050:	2000643c 	.word	0x2000643c

0800b054 <SetMeasurementMode>:
{
 800b054:	b570      	push	{r4, r5, r6, lr}
 800b056:	b082      	sub	sp, #8
 800b058:	000d      	movs	r5, r1
 800b05a:	0014      	movs	r4, r2
  if (VL53L0x_MODE_SINGLE == mode)
 800b05c:	2800      	cmp	r0, #0
 800b05e:	d00b      	beq.n	800b078 <SetMeasurementMode+0x24>
  else if (VL53L0x_MODE_CONTINUOUS == mode)
 800b060:	2801      	cmp	r0, #1
 800b062:	d016      	beq.n	800b092 <SetMeasurementMode+0x3e>
  else if (VL53L0x_MODE_CONTINUOUS_TIMED == mode)
 800b064:	2802      	cmp	r0, #2
 800b066:	d01a      	beq.n	800b09e <SetMeasurementMode+0x4a>
  if ((timeout > 0) && (timeout < 0xFFFFFFFF))
 800b068:	1e53      	subs	r3, r2, #1
 800b06a:	3303      	adds	r3, #3
 800b06c:	d927      	bls.n	800b0be <SetMeasurementMode+0x6a>
    VL53L0X_StartMeasurement(&vl53l0x_HandleDevice);
 800b06e:	4824      	ldr	r0, [pc, #144]	; (800b100 <SetMeasurementMode+0xac>)
 800b070:	f009 f892 	bl	8014198 <VL53L0X_StartMeasurement>
 800b074:	2600      	movs	r6, #0
 800b076:	e009      	b.n	800b08c <SetMeasurementMode+0x38>
    status = VL53L0X_SetDeviceMode(&vl53l0x_HandleDevice, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 800b078:	2100      	movs	r1, #0
 800b07a:	4821      	ldr	r0, [pc, #132]	; (800b100 <SetMeasurementMode+0xac>)
 800b07c:	f008 fc0a 	bl	8013894 <VL53L0X_SetDeviceMode>
 800b080:	0006      	movs	r6, r0
  if ((timeout > 0) && (timeout < 0xFFFFFFFF))
 800b082:	1e63      	subs	r3, r4, #1
 800b084:	3303      	adds	r3, #3
 800b086:	d91b      	bls.n	800b0c0 <SetMeasurementMode+0x6c>
  if (status == VL53L0X_ERROR_NONE)
 800b088:	2e00      	cmp	r6, #0
 800b08a:	d0f0      	beq.n	800b06e <SetMeasurementMode+0x1a>
}
 800b08c:	0030      	movs	r0, r6
 800b08e:	b002      	add	sp, #8
 800b090:	bd70      	pop	{r4, r5, r6, pc}
    status = VL53L0X_SetDeviceMode(&vl53l0x_HandleDevice, VL53L0X_DEVICEMODE_CONTINUOUS_RANGING);
 800b092:	2101      	movs	r1, #1
 800b094:	481a      	ldr	r0, [pc, #104]	; (800b100 <SetMeasurementMode+0xac>)
 800b096:	f008 fbfd 	bl	8013894 <VL53L0X_SetDeviceMode>
 800b09a:	0006      	movs	r6, r0
 800b09c:	e7f1      	b.n	800b082 <SetMeasurementMode+0x2e>
      status = VL53L0X_SetDeviceMode(&vl53l0x_HandleDevice, VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING);
 800b09e:	2103      	movs	r1, #3
 800b0a0:	4817      	ldr	r0, [pc, #92]	; (800b100 <SetMeasurementMode+0xac>)
 800b0a2:	f008 fbf7 	bl	8013894 <VL53L0X_SetDeviceMode>
 800b0a6:	1e06      	subs	r6, r0, #0
    if(VL53L0X_ERROR_NONE == status)
 800b0a8:	d003      	beq.n	800b0b2 <SetMeasurementMode+0x5e>
  if ((timeout > 0) && (timeout < 0xFFFFFFFF))
 800b0aa:	1e63      	subs	r3, r4, #1
 800b0ac:	3303      	adds	r3, #3
 800b0ae:	d8ed      	bhi.n	800b08c <SetMeasurementMode+0x38>
 800b0b0:	e006      	b.n	800b0c0 <SetMeasurementMode+0x6c>
      status = VL53L0X_SetInterMeasurementPeriodMilliSeconds(&vl53l0x_HandleDevice, period);
 800b0b2:	0029      	movs	r1, r5
 800b0b4:	4812      	ldr	r0, [pc, #72]	; (800b100 <SetMeasurementMode+0xac>)
 800b0b6:	f008 fcd6 	bl	8013a66 <VL53L0X_SetInterMeasurementPeriodMilliSeconds>
 800b0ba:	0006      	movs	r6, r0
 800b0bc:	e7e1      	b.n	800b082 <SetMeasurementMode+0x2e>
  VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800b0be:	2600      	movs	r6, #0
    xTimerTof = xTimerCreate( "Timeout Measurement", pdMS_TO_TICKS(timeout), pdFALSE, ( void * ) TIMERID_TIMEOUT_MEASUREMENT, HandleTimeout );
 800b0c0:	0160      	lsls	r0, r4, #5
 800b0c2:	1b00      	subs	r0, r0, r4
 800b0c4:	0080      	lsls	r0, r0, #2
 800b0c6:	1900      	adds	r0, r0, r4
 800b0c8:	00c0      	lsls	r0, r0, #3
 800b0ca:	21fa      	movs	r1, #250	; 0xfa
 800b0cc:	0089      	lsls	r1, r1, #2
 800b0ce:	f7f5 f83f 	bl	8000150 <__udivsi3>
 800b0d2:	0001      	movs	r1, r0
 800b0d4:	4b0b      	ldr	r3, [pc, #44]	; (800b104 <SetMeasurementMode+0xb0>)
 800b0d6:	9300      	str	r3, [sp, #0]
 800b0d8:	23ff      	movs	r3, #255	; 0xff
 800b0da:	2200      	movs	r2, #0
 800b0dc:	480a      	ldr	r0, [pc, #40]	; (800b108 <SetMeasurementMode+0xb4>)
 800b0de:	f004 fc75 	bl	800f9cc <xTimerCreate>
 800b0e2:	0004      	movs	r4, r0
 800b0e4:	4b09      	ldr	r3, [pc, #36]	; (800b10c <SetMeasurementMode+0xb8>)
 800b0e6:	6018      	str	r0, [r3, #0]
    xTimerStart( xTimerTof, portMAX_DELAY );
 800b0e8:	f003 fee4 	bl	800eeb4 <xTaskGetTickCount>
 800b0ec:	0002      	movs	r2, r0
 800b0ee:	2301      	movs	r3, #1
 800b0f0:	425b      	negs	r3, r3
 800b0f2:	9300      	str	r3, [sp, #0]
 800b0f4:	2300      	movs	r3, #0
 800b0f6:	2101      	movs	r1, #1
 800b0f8:	0020      	movs	r0, r4
 800b0fa:	f004 fc87 	bl	800fa0c <xTimerGenericCommand>
 800b0fe:	e7c3      	b.n	800b088 <SetMeasurementMode+0x34>
 800b100:	20006684 	.word	0x20006684
 800b104:	0800b111 	.word	0x0800b111
 800b108:	0801c4a4 	.word	0x0801c4a4
 800b10c:	20001168 	.word	0x20001168

0800b110 <HandleTimeout>:
{
 800b110:	b510      	push	{r4, lr}
  tid = ( uint32_t ) pvTimerGetTimerID( xTimerTof );
 800b112:	4b06      	ldr	r3, [pc, #24]	; (800b12c <HandleTimeout+0x1c>)
 800b114:	6818      	ldr	r0, [r3, #0]
 800b116:	f004 fdb5 	bl	800fc84 <pvTimerGetTimerID>
  if (TIMERID_TIMEOUT_MEASUREMENT == tid)
 800b11a:	28ff      	cmp	r0, #255	; 0xff
 800b11c:	d000      	beq.n	800b120 <HandleTimeout+0x10>
}
 800b11e:	bd10      	pop	{r4, pc}
    startMeasurementRanging = STOP_MEASUREMENT_RANGING;
 800b120:	2300      	movs	r3, #0
 800b122:	4a03      	ldr	r2, [pc, #12]	; (800b130 <HandleTimeout+0x20>)
 800b124:	7013      	strb	r3, [r2, #0]
		tofMode = REQ_IDLE;		// Stop the streaming task
 800b126:	4a03      	ldr	r2, [pc, #12]	; (800b134 <HandleTimeout+0x24>)
 800b128:	7013      	strb	r3, [r2, #0]
}
 800b12a:	e7f8      	b.n	800b11e <HandleTimeout+0xe>
 800b12c:	20001168 	.word	0x20001168
 800b130:	20001160 	.word	0x20001160
 800b134:	200064b4 	.word	0x200064b4

0800b138 <SystemClock_Config>:
{
 800b138:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b13a:	b09b      	sub	sp, #108	; 0x6c
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800b13c:	2401      	movs	r4, #1
 800b13e:	940d      	str	r4, [sp, #52]	; 0x34
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800b140:	940e      	str	r4, [sp, #56]	; 0x38
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800b142:	9410      	str	r4, [sp, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = 16;
 800b144:	2310      	movs	r3, #16
 800b146:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800b148:	2702      	movs	r7, #2
 800b14a:	9716      	str	r7, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800b14c:	2680      	movs	r6, #128	; 0x80
 800b14e:	0276      	lsls	r6, r6, #9
 800b150:	9617      	str	r6, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800b152:	2380      	movs	r3, #128	; 0x80
 800b154:	035b      	lsls	r3, r3, #13
 800b156:	9318      	str	r3, [sp, #96]	; 0x60
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800b158:	2500      	movs	r5, #0
 800b15a:	9519      	str	r5, [sp, #100]	; 0x64
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 800b15c:	a80d      	add	r0, sp, #52	; 0x34
 800b15e:	f006 fe2d 	bl	8011dbc <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1);
 800b162:	2307      	movs	r3, #7
 800b164:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800b166:	970a      	str	r7, [sp, #40]	; 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800b168:	950b      	str	r5, [sp, #44]	; 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800b16a:	950c      	str	r5, [sp, #48]	; 0x30
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1);
 800b16c:	2101      	movs	r1, #1
 800b16e:	a809      	add	r0, sp, #36	; 0x24
 800b170:	f007 f8e8 	bl	8012344 <HAL_RCC_ClockConfig>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_USART3;
 800b174:	4b1a      	ldr	r3, [pc, #104]	; (800b1e0 <SystemClock_Config+0xa8>)
 800b176:	9302      	str	r3, [sp, #8]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800b178:	9504      	str	r5, [sp, #16]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800b17a:	9505      	str	r5, [sp, #20]
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800b17c:	9506      	str	r5, [sp, #24]
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 800b17e:	a802      	add	r0, sp, #8
 800b180:	f007 fa90 	bl	80126a4 <HAL_RCCEx_PeriphCLKConfig>
	__HAL_RCC_PWR_CLK_ENABLE();
 800b184:	4d17      	ldr	r5, [pc, #92]	; (800b1e4 <SystemClock_Config+0xac>)
 800b186:	69ea      	ldr	r2, [r5, #28]
 800b188:	2180      	movs	r1, #128	; 0x80
 800b18a:	0549      	lsls	r1, r1, #21
 800b18c:	430a      	orrs	r2, r1
 800b18e:	61ea      	str	r2, [r5, #28]
 800b190:	69eb      	ldr	r3, [r5, #28]
 800b192:	400b      	ands	r3, r1
 800b194:	9300      	str	r3, [sp, #0]
 800b196:	9b00      	ldr	r3, [sp, #0]
  HAL_PWR_EnableBkUpAccess();
 800b198:	f006 fe06 	bl	8011da8 <HAL_PWR_EnableBkUpAccess>
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800b19c:	9602      	str	r6, [sp, #8]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV32;
 800b19e:	23c0      	movs	r3, #192	; 0xc0
 800b1a0:	009b      	lsls	r3, r3, #2
 800b1a2:	9303      	str	r3, [sp, #12]
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 800b1a4:	a802      	add	r0, sp, #8
 800b1a6:	f007 fa7d 	bl	80126a4 <HAL_RCCEx_PeriphCLKConfig>
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800b1aa:	f007 fa57 	bl	801265c <HAL_RCC_GetHCLKFreq>
 800b1ae:	21fa      	movs	r1, #250	; 0xfa
 800b1b0:	0089      	lsls	r1, r1, #2
 800b1b2:	f7f4 ffcd 	bl	8000150 <__udivsi3>
 800b1b6:	f004 ffa3 	bl	8010100 <HAL_SYSTICK_Config>
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800b1ba:	2004      	movs	r0, #4
 800b1bc:	f004 ffbc 	bl	8010138 <HAL_SYSTICK_CLKSourceConfig>
	__SYSCFG_CLK_ENABLE();
 800b1c0:	69ab      	ldr	r3, [r5, #24]
 800b1c2:	4323      	orrs	r3, r4
 800b1c4:	61ab      	str	r3, [r5, #24]
 800b1c6:	69ab      	ldr	r3, [r5, #24]
 800b1c8:	401c      	ands	r4, r3
 800b1ca:	9401      	str	r4, [sp, #4]
 800b1cc:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800b1ce:	2001      	movs	r0, #1
 800b1d0:	2200      	movs	r2, #0
 800b1d2:	2100      	movs	r1, #0
 800b1d4:	4240      	negs	r0, r0
 800b1d6:	f004 ff4d 	bl	8010074 <HAL_NVIC_SetPriority>
}
 800b1da:	b01b      	add	sp, #108	; 0x6c
 800b1dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b1de:	46c0      	nop			; (mov r8, r8)
 800b1e0:	00040003 	.word	0x00040003
 800b1e4:	40021000 	.word	0x40021000

0800b1e8 <Module_Init>:
{
 800b1e8:	b510      	push	{r4, lr}
 800b1ea:	b086      	sub	sp, #24
  MX_USART1_UART_Init();
 800b1ec:	f002 fbcc 	bl	800d988 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800b1f0:	f002 fbe2 	bl	800d9b8 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800b1f4:	f002 fbf8 	bl	800d9e8 <MX_USART3_UART_Init>
  MX_USART5_UART_Init();
 800b1f8:	f002 fc0e 	bl	800da18 <MX_USART5_UART_Init>
  MX_USART6_UART_Init();
 800b1fc:	f002 fc24 	bl	800da48 <MX_USART6_UART_Init>
  handleNewReadyData = xEventGroupCreate();
 800b200:	f003 f888 	bl	800e314 <xEventGroupCreate>
 800b204:	4b43      	ldr	r3, [pc, #268]	; (800b314 <Module_Init+0x12c>)
 800b206:	6018      	str	r0, [r3, #0]
  MX_I2C_Init();
 800b208:	f001 ff84 	bl	800d114 <MX_I2C_Init>
  vl53l0x_HandleDevice.I2cDevAddr = 0x52;
 800b20c:	4c42      	ldr	r4, [pc, #264]	; (800b318 <Module_Init+0x130>)
 800b20e:	23ae      	movs	r3, #174	; 0xae
 800b210:	005b      	lsls	r3, r3, #1
 800b212:	2252      	movs	r2, #82	; 0x52
 800b214:	54e2      	strb	r2, [r4, r3]
  vl53l0x_HandleDevice.comms_type = 1; /* Using I2C communication */
 800b216:	235e      	movs	r3, #94	; 0x5e
 800b218:	33ff      	adds	r3, #255	; 0xff
 800b21a:	3a51      	subs	r2, #81	; 0x51
 800b21c:	54e2      	strb	r2, [r4, r3]
  vl53l0x_HandleDevice.comms_speed_khz = 100; /* 100kHz for I2C */
 800b21e:	3301      	adds	r3, #1
 800b220:	3263      	adds	r2, #99	; 0x63
 800b222:	52e2      	strh	r2, [r4, r3]
  vl53l0x_set_xshut_pin();
 800b224:	3a63      	subs	r2, #99	; 0x63
 800b226:	2101      	movs	r1, #1
 800b228:	483c      	ldr	r0, [pc, #240]	; (800b31c <Module_Init+0x134>)
 800b22a:	f005 ffe9 	bl	8011200 <HAL_GPIO_WritePin>
  Delay_us(100);
 800b22e:	2064      	movs	r0, #100	; 0x64
 800b230:	f002 fb86 	bl	800d940 <StartMicroDelay>
    status = VL53L0X_DataInit(&vl53l0x_HandleDevice);
 800b234:	0020      	movs	r0, r4
 800b236:	f008 fda1 	bl	8013d7c <VL53L0X_DataInit>
  if (status == VL53L0X_ERROR_NONE)
 800b23a:	2800      	cmp	r0, #0
 800b23c:	d00f      	beq.n	800b25e <Module_Init+0x76>
	xTaskCreate(ToFTask, (const char *) "ToFTask", (2*configMINIMAL_STACK_SIZE), NULL, osPriorityNormal-osPriorityIdle, &ToFHandle);	
 800b23e:	22a0      	movs	r2, #160	; 0xa0
 800b240:	2300      	movs	r3, #0
 800b242:	9303      	str	r3, [sp, #12]
 800b244:	9302      	str	r3, [sp, #8]
 800b246:	4b36      	ldr	r3, [pc, #216]	; (800b320 <Module_Init+0x138>)
 800b248:	9301      	str	r3, [sp, #4]
 800b24a:	2303      	movs	r3, #3
 800b24c:	9300      	str	r3, [sp, #0]
 800b24e:	2300      	movs	r3, #0
 800b250:	0052      	lsls	r2, r2, #1
 800b252:	4934      	ldr	r1, [pc, #208]	; (800b324 <Module_Init+0x13c>)
 800b254:	4834      	ldr	r0, [pc, #208]	; (800b328 <Module_Init+0x140>)
 800b256:	f003 fc93 	bl	800eb80 <xTaskGenericCreate>
}
 800b25a:	b006      	add	sp, #24
 800b25c:	bd10      	pop	{r4, pc}
    status = VL53L0X_StaticInit(&vl53l0x_HandleDevice);
 800b25e:	482e      	ldr	r0, [pc, #184]	; (800b318 <Module_Init+0x130>)
 800b260:	f009 f996 	bl	8014590 <VL53L0X_StaticInit>
  if(status == VL53L0X_ERROR_NONE)
 800b264:	2800      	cmp	r0, #0
 800b266:	d1ea      	bne.n	800b23e <Module_Init+0x56>
    status = VL53L0X_PerformRefSpadManagement(&vl53l0x_HandleDevice,
 800b268:	2211      	movs	r2, #17
 800b26a:	446a      	add	r2, sp
 800b26c:	a905      	add	r1, sp, #20
 800b26e:	482a      	ldr	r0, [pc, #168]	; (800b318 <Module_Init+0x130>)
 800b270:	f009 fa9f 	bl	80147b2 <VL53L0X_PerformRefSpadManagement>
  if (status == VL53L0X_ERROR_NONE)
 800b274:	2800      	cmp	r0, #0
 800b276:	d1e2      	bne.n	800b23e <Module_Init+0x56>
    status = VL53L0X_PerformRefCalibration(&vl53l0x_HandleDevice,
 800b278:	2213      	movs	r2, #19
 800b27a:	446a      	add	r2, sp
 800b27c:	2112      	movs	r1, #18
 800b27e:	4469      	add	r1, sp
 800b280:	4825      	ldr	r0, [pc, #148]	; (800b318 <Module_Init+0x130>)
 800b282:	f008 fe5f 	bl	8013f44 <VL53L0X_PerformRefCalibration>
  if (status == VL53L0X_ERROR_NONE)
 800b286:	2800      	cmp	r0, #0
 800b288:	d1d9      	bne.n	800b23e <Module_Init+0x56>
    status = VL53L0X_SetLimitCheckEnable(&vl53l0x_HandleDevice,
 800b28a:	2201      	movs	r2, #1
 800b28c:	2100      	movs	r1, #0
 800b28e:	4822      	ldr	r0, [pc, #136]	; (800b318 <Module_Init+0x130>)
 800b290:	f008 fc46 	bl	8013b20 <VL53L0X_SetLimitCheckEnable>
  if (status == VL53L0X_ERROR_NONE)
 800b294:	2800      	cmp	r0, #0
 800b296:	d1d2      	bne.n	800b23e <Module_Init+0x56>
    status = VL53L0X_SetLimitCheckEnable(&vl53l0x_HandleDevice,
 800b298:	2201      	movs	r2, #1
 800b29a:	2101      	movs	r1, #1
 800b29c:	481e      	ldr	r0, [pc, #120]	; (800b318 <Module_Init+0x130>)
 800b29e:	f008 fc3f 	bl	8013b20 <VL53L0X_SetLimitCheckEnable>
  if (status == VL53L0X_ERROR_NONE)
 800b2a2:	2800      	cmp	r0, #0
 800b2a4:	d1cb      	bne.n	800b23e <Module_Init+0x56>
    status = VL53L0X_SetLimitCheckValue(&vl53l0x_HandleDevice,
 800b2a6:	2280      	movs	r2, #128	; 0x80
 800b2a8:	01d2      	lsls	r2, r2, #7
 800b2aa:	2101      	movs	r1, #1
 800b2ac:	481a      	ldr	r0, [pc, #104]	; (800b318 <Module_Init+0x130>)
 800b2ae:	f008 fc91 	bl	8013bd4 <VL53L0X_SetLimitCheckValue>
  if (status == VL53L0X_ERROR_NONE)
 800b2b2:	2800      	cmp	r0, #0
 800b2b4:	d1c3      	bne.n	800b23e <Module_Init+0x56>
    status = VL53L0X_SetLimitCheckValue(&vl53l0x_HandleDevice,
 800b2b6:	2290      	movs	r2, #144	; 0x90
 800b2b8:	0352      	lsls	r2, r2, #13
 800b2ba:	2100      	movs	r1, #0
 800b2bc:	4816      	ldr	r0, [pc, #88]	; (800b318 <Module_Init+0x130>)
 800b2be:	f008 fc89 	bl	8013bd4 <VL53L0X_SetLimitCheckValue>
  if (status == VL53L0X_ERROR_NONE)
 800b2c2:	2800      	cmp	r0, #0
 800b2c4:	d1bb      	bne.n	800b23e <Module_Init+0x56>
    status = VL53L0X_SetMeasurementTimingBudgetMicroSeconds(&vl53l0x_HandleDevice, 200000);
 800b2c6:	4919      	ldr	r1, [pc, #100]	; (800b32c <Module_Init+0x144>)
 800b2c8:	4813      	ldr	r0, [pc, #76]	; (800b318 <Module_Init+0x130>)
 800b2ca:	f008 fb02 	bl	80138d2 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
  if(status == VL53L0X_ERROR_NONE)
 800b2ce:	2800      	cmp	r0, #0
 800b2d0:	d1b5      	bne.n	800b23e <Module_Init+0x56>
    status = VL53L0X_SetDeviceMode(&vl53l0x_HandleDevice, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 800b2d2:	2100      	movs	r1, #0
 800b2d4:	4810      	ldr	r0, [pc, #64]	; (800b318 <Module_Init+0x130>)
 800b2d6:	f008 fadd 	bl	8013894 <VL53L0X_SetDeviceMode>
  if (status == VL53L0X_ERROR_NONE)
 800b2da:	2800      	cmp	r0, #0
 800b2dc:	d1af      	bne.n	800b23e <Module_Init+0x56>
    VL53L0X_StartMeasurement(&vl53l0x_HandleDevice);
 800b2de:	4c0e      	ldr	r4, [pc, #56]	; (800b318 <Module_Init+0x130>)
 800b2e0:	0020      	movs	r0, r4
 800b2e2:	f008 ff59 	bl	8014198 <VL53L0X_StartMeasurement>
    status = VL53L0X_SetGpioConfig(&vl53l0x_HandleDevice,
 800b2e6:	2300      	movs	r3, #0
 800b2e8:	9300      	str	r3, [sp, #0]
 800b2ea:	3304      	adds	r3, #4
 800b2ec:	2200      	movs	r2, #0
 800b2ee:	2100      	movs	r1, #0
 800b2f0:	0020      	movs	r0, r4
 800b2f2:	f009 f8ac 	bl	801444e <VL53L0X_SetGpioConfig>
  if (VL53L0X_ERROR_NONE == status)
 800b2f6:	2800      	cmp	r0, #0
 800b2f8:	d1a1      	bne.n	800b23e <Module_Init+0x56>
    status = VL53L0X_SetInterruptThresholds(&vl53l0x_HandleDevice, 0, 60, 200);
 800b2fa:	23c8      	movs	r3, #200	; 0xc8
 800b2fc:	223c      	movs	r2, #60	; 0x3c
 800b2fe:	2100      	movs	r1, #0
 800b300:	4805      	ldr	r0, [pc, #20]	; (800b318 <Module_Init+0x130>)
 800b302:	f008 fed1 	bl	80140a8 <VL53L0X_SetInterruptThresholds>
  if(VL53L0X_ERROR_NONE == status)
 800b306:	2800      	cmp	r0, #0
 800b308:	d199      	bne.n	800b23e <Module_Init+0x56>
    status = VL53L0X_ClearInterruptMask(&vl53l0x_HandleDevice, 0);
 800b30a:	2100      	movs	r1, #0
 800b30c:	4802      	ldr	r0, [pc, #8]	; (800b318 <Module_Init+0x130>)
 800b30e:	f009 f856 	bl	80143be <VL53L0X_ClearInterruptMask>
 800b312:	e794      	b.n	800b23e <Module_Init+0x56>
 800b314:	2000115c 	.word	0x2000115c
 800b318:	20006684 	.word	0x20006684
 800b31c:	48000400 	.word	0x48000400
 800b320:	20001150 	.word	0x20001150
 800b324:	0801c4b8 	.word	0x0801c4b8
 800b328:	0800af79 	.word	0x0800af79
 800b32c:	00030d40 	.word	0x00030d40

0800b330 <SaveToRO>:
{
 800b330:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b332:	46de      	mov	lr, fp
 800b334:	4657      	mov	r7, sl
 800b336:	464e      	mov	r6, r9
 800b338:	4645      	mov	r5, r8
 800b33a:	b5e0      	push	{r5, r6, r7, lr}
 800b33c:	b089      	sub	sp, #36	; 0x24
	uint8_t snipBuffer[sizeof(snippet_t)+1] = {0};
 800b33e:	2300      	movs	r3, #0
 800b340:	9302      	str	r3, [sp, #8]
 800b342:	2211      	movs	r2, #17
 800b344:	2100      	movs	r1, #0
 800b346:	a803      	add	r0, sp, #12
 800b348:	f00b f8fd 	bl	8016546 <memset>
	HAL_FLASH_Unlock();
 800b34c:	f005 fd30 	bl	8010db0 <HAL_FLASH_Unlock>
	FLASH_PageErase(RO_START_ADDRESS);
 800b350:	487c      	ldr	r0, [pc, #496]	; (800b544 <SaveToRO+0x214>)
 800b352:	f005 fdf1 	bl	8010f38 <FLASH_PageErase>
	FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800b356:	487c      	ldr	r0, [pc, #496]	; (800b548 <SaveToRO+0x218>)
 800b358:	f005 fd48 	bl	8010dec <FLASH_WaitForLastOperation>
 800b35c:	9000      	str	r0, [sp, #0]
 800b35e:	9001      	str	r0, [sp, #4]
	if(FlashStatus != HAL_OK) {
 800b360:	2800      	cmp	r0, #0
 800b362:	d112      	bne.n	800b38a <SaveToRO+0x5a>
		CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800b364:	4a79      	ldr	r2, [pc, #484]	; (800b54c <SaveToRO+0x21c>)
 800b366:	6913      	ldr	r3, [r2, #16]
 800b368:	2102      	movs	r1, #2
 800b36a:	438b      	bics	r3, r1
 800b36c:	6113      	str	r3, [r2, #16]
	if (myID)
 800b36e:	4b78      	ldr	r3, [pc, #480]	; (800b550 <SaveToRO+0x220>)
 800b370:	781b      	ldrb	r3, [r3, #0]
 800b372:	2b00      	cmp	r3, #0
 800b374:	d115      	bne.n	800b3a2 <SaveToRO+0x72>
	for(uint8_t s=0 ; s<numOfRecordedSnippets ; s++) 
 800b376:	4b77      	ldr	r3, [pc, #476]	; (800b554 <SaveToRO+0x224>)
 800b378:	781b      	ldrb	r3, [r3, #0]
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d100      	bne.n	800b380 <SaveToRO+0x50>
 800b37e:	e0dd      	b.n	800b53c <SaveToRO+0x20c>
 800b380:	9d00      	ldr	r5, [sp, #0]
 800b382:	4e75      	ldr	r6, [pc, #468]	; (800b558 <SaveToRO+0x228>)
		if (snippets[s].cond.conditionType) 
 800b384:	4b75      	ldr	r3, [pc, #468]	; (800b55c <SaveToRO+0x22c>)
 800b386:	469a      	mov	sl, r3
 800b388:	e092      	b.n	800b4b0 <SaveToRO+0x180>
		return pFlash.ErrorCode;
 800b38a:	4b75      	ldr	r3, [pc, #468]	; (800b560 <SaveToRO+0x230>)
 800b38c:	69db      	ldr	r3, [r3, #28]
 800b38e:	b2db      	uxtb	r3, r3
 800b390:	9301      	str	r3, [sp, #4]
}
 800b392:	9801      	ldr	r0, [sp, #4]
 800b394:	b009      	add	sp, #36	; 0x24
 800b396:	bcf0      	pop	{r4, r5, r6, r7}
 800b398:	46bb      	mov	fp, r7
 800b39a:	46b2      	mov	sl, r6
 800b39c:	46a9      	mov	r9, r5
 800b39e:	46a0      	mov	r8, r4
 800b3a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		temp = (uint16_t) (N<<8) + myID;
 800b3a2:	4a70      	ldr	r2, [pc, #448]	; (800b564 <SaveToRO+0x234>)
 800b3a4:	7812      	ldrb	r2, [r2, #0]
 800b3a6:	0212      	lsls	r2, r2, #8
 800b3a8:	18d2      	adds	r2, r2, r3
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, RO_START_ADDRESS, temp);
 800b3aa:	b292      	uxth	r2, r2
 800b3ac:	2300      	movs	r3, #0
 800b3ae:	4965      	ldr	r1, [pc, #404]	; (800b544 <SaveToRO+0x214>)
 800b3b0:	2001      	movs	r0, #1
 800b3b2:	f005 fd49 	bl	8010e48 <HAL_FLASH_Program>
		FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800b3b6:	4864      	ldr	r0, [pc, #400]	; (800b548 <SaveToRO+0x218>)
 800b3b8:	f005 fd18 	bl	8010dec <FLASH_WaitForLastOperation>
		if (FlashStatus != HAL_OK) {
 800b3bc:	2800      	cmp	r0, #0
 800b3be:	d111      	bne.n	800b3e4 <SaveToRO+0xb4>
			CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800b3c0:	4a62      	ldr	r2, [pc, #392]	; (800b54c <SaveToRO+0x21c>)
 800b3c2:	6913      	ldr	r3, [r2, #16]
 800b3c4:	2101      	movs	r1, #1
 800b3c6:	438b      	bics	r3, r1
 800b3c8:	6113      	str	r3, [r2, #16]
		for(uint8_t i=1 ; i<=N ; i++)
 800b3ca:	4b66      	ldr	r3, [pc, #408]	; (800b564 <SaveToRO+0x234>)
 800b3cc:	781b      	ldrb	r3, [r3, #0]
 800b3ce:	2201      	movs	r2, #1
 800b3d0:	4691      	mov	r9, r2
	uint16_t add = 2, temp = 0;
 800b3d2:	2502      	movs	r5, #2
		for(uint8_t i=1 ; i<=N ; i++)
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	d0ce      	beq.n	800b376 <SaveToRO+0x46>
 800b3d8:	2316      	movs	r3, #22
 800b3da:	469b      	mov	fp, r3
 800b3dc:	4b62      	ldr	r3, [pc, #392]	; (800b568 <SaveToRO+0x238>)
 800b3de:	469a      	mov	sl, r3
				if (array[i-1][0]) {
 800b3e0:	4698      	mov	r8, r3
 800b3e2:	e02c      	b.n	800b43e <SaveToRO+0x10e>
			return pFlash.ErrorCode;
 800b3e4:	4b5e      	ldr	r3, [pc, #376]	; (800b560 <SaveToRO+0x230>)
 800b3e6:	69db      	ldr	r3, [r3, #28]
 800b3e8:	b2db      	uxtb	r3, r3
 800b3ea:	9301      	str	r3, [sp, #4]
 800b3ec:	e7d1      	b.n	800b392 <SaveToRO+0x62>
						return pFlash.ErrorCode;
 800b3ee:	4b5c      	ldr	r3, [pc, #368]	; (800b560 <SaveToRO+0x230>)
 800b3f0:	69db      	ldr	r3, [r3, #28]
 800b3f2:	b2db      	uxtb	r3, r3
 800b3f4:	9301      	str	r3, [sp, #4]
 800b3f6:	e7cc      	b.n	800b392 <SaveToRO+0x62>
			for(uint8_t j=0 ; j<=MaxNumOfPorts ; j++)
 800b3f8:	3402      	adds	r4, #2
 800b3fa:	42b4      	cmp	r4, r6
 800b3fc:	d017      	beq.n	800b42e <SaveToRO+0xfe>
				if (array[i-1][0]) {
 800b3fe:	4643      	mov	r3, r8
 800b400:	5afb      	ldrh	r3, [r7, r3]
 800b402:	2b00      	cmp	r3, #0
 800b404:	d0f8      	beq.n	800b3f8 <SaveToRO+0xc8>
					HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, RO_START_ADDRESS+add, array[i-1][j]);
 800b406:	8822      	ldrh	r2, [r4, #0]
 800b408:	4b4e      	ldr	r3, [pc, #312]	; (800b544 <SaveToRO+0x214>)
 800b40a:	18e9      	adds	r1, r5, r3
 800b40c:	2300      	movs	r3, #0
 800b40e:	2001      	movs	r0, #1
 800b410:	f005 fd1a 	bl	8010e48 <HAL_FLASH_Program>
					add += 2;
 800b414:	3502      	adds	r5, #2
 800b416:	b2ad      	uxth	r5, r5
					FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800b418:	484b      	ldr	r0, [pc, #300]	; (800b548 <SaveToRO+0x218>)
 800b41a:	f005 fce7 	bl	8010dec <FLASH_WaitForLastOperation>
					if (FlashStatus != HAL_OK) {
 800b41e:	2800      	cmp	r0, #0
 800b420:	d1e5      	bne.n	800b3ee <SaveToRO+0xbe>
						CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800b422:	4a4a      	ldr	r2, [pc, #296]	; (800b54c <SaveToRO+0x21c>)
 800b424:	6913      	ldr	r3, [r2, #16]
 800b426:	2101      	movs	r1, #1
 800b428:	438b      	bics	r3, r1
 800b42a:	6113      	str	r3, [r2, #16]
 800b42c:	e7e4      	b.n	800b3f8 <SaveToRO+0xc8>
		for(uint8_t i=1 ; i<=N ; i++)
 800b42e:	464b      	mov	r3, r9
 800b430:	3301      	adds	r3, #1
 800b432:	b2db      	uxtb	r3, r3
 800b434:	4699      	mov	r9, r3
 800b436:	4b4b      	ldr	r3, [pc, #300]	; (800b564 <SaveToRO+0x234>)
 800b438:	781b      	ldrb	r3, [r3, #0]
 800b43a:	454b      	cmp	r3, r9
 800b43c:	d39b      	bcc.n	800b376 <SaveToRO+0x46>
			for(uint8_t j=0 ; j<=MaxNumOfPorts ; j++)
 800b43e:	465e      	mov	r6, fp
 800b440:	464b      	mov	r3, r9
 800b442:	435e      	muls	r6, r3
 800b444:	0034      	movs	r4, r6
 800b446:	3c16      	subs	r4, #22
 800b448:	4454      	add	r4, sl
 800b44a:	4456      	add	r6, sl
				if (array[i-1][0]) {
 800b44c:	1e5f      	subs	r7, r3, #1
 800b44e:	465b      	mov	r3, fp
 800b450:	435f      	muls	r7, r3
 800b452:	e7d4      	b.n	800b3fe <SaveToRO+0xce>
					return pFlash.ErrorCode;
 800b454:	4b42      	ldr	r3, [pc, #264]	; (800b560 <SaveToRO+0x230>)
 800b456:	69db      	ldr	r3, [r3, #28]
 800b458:	b2db      	uxtb	r3, r3
 800b45a:	9301      	str	r3, [sp, #4]
 800b45c:	e799      	b.n	800b392 <SaveToRO+0x62>
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800b45e:	4643      	mov	r3, r8
 800b460:	691b      	ldr	r3, [r3, #16]
 800b462:	2201      	movs	r2, #1
 800b464:	4393      	bics	r3, r2
 800b466:	4642      	mov	r2, r8
 800b468:	6113      	str	r3, [r2, #16]
					currentAdd += 2;
 800b46a:	3602      	adds	r6, #2
			for(uint8_t j=0 ; j<((strlen(snippets[s].cmd)+1)/2) ; j++)
 800b46c:	3401      	adds	r4, #1
 800b46e:	b2e4      	uxtb	r4, r4
 800b470:	68ef      	ldr	r7, [r5, #12]
 800b472:	0038      	movs	r0, r7
 800b474:	f7f4 fe50 	bl	8000118 <strlen>
 800b478:	3001      	adds	r0, #1
 800b47a:	0840      	lsrs	r0, r0, #1
 800b47c:	4284      	cmp	r4, r0
 800b47e:	d210      	bcs.n	800b4a2 <SaveToRO+0x172>
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, currentAdd, *(uint16_t *)(snippets[s].cmd+j*2));
 800b480:	0063      	lsls	r3, r4, #1
 800b482:	5afa      	ldrh	r2, [r7, r3]
 800b484:	2300      	movs	r3, #0
 800b486:	0031      	movs	r1, r6
 800b488:	2001      	movs	r0, #1
 800b48a:	f005 fcdd 	bl	8010e48 <HAL_FLASH_Program>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800b48e:	4658      	mov	r0, fp
 800b490:	f005 fcac 	bl	8010dec <FLASH_WaitForLastOperation>
				if (FlashStatus != HAL_OK) {
 800b494:	2800      	cmp	r0, #0
 800b496:	d0e2      	beq.n	800b45e <SaveToRO+0x12e>
					return pFlash.ErrorCode;
 800b498:	4b31      	ldr	r3, [pc, #196]	; (800b560 <SaveToRO+0x230>)
 800b49a:	69db      	ldr	r3, [r3, #28]
 800b49c:	b2db      	uxtb	r3, r3
 800b49e:	9301      	str	r3, [sp, #4]
 800b4a0:	e777      	b.n	800b392 <SaveToRO+0x62>
 800b4a2:	464d      	mov	r5, r9
	for(uint8_t s=0 ; s<numOfRecordedSnippets ; s++) 
 800b4a4:	3501      	adds	r5, #1
 800b4a6:	b2ed      	uxtb	r5, r5
 800b4a8:	4b2a      	ldr	r3, [pc, #168]	; (800b554 <SaveToRO+0x224>)
 800b4aa:	781b      	ldrb	r3, [r3, #0]
 800b4ac:	42ab      	cmp	r3, r5
 800b4ae:	d945      	bls.n	800b53c <SaveToRO+0x20c>
		if (snippets[s].cond.conditionType) 
 800b4b0:	9500      	str	r5, [sp, #0]
 800b4b2:	00ab      	lsls	r3, r5, #2
 800b4b4:	195b      	adds	r3, r3, r5
 800b4b6:	009b      	lsls	r3, r3, #2
 800b4b8:	4652      	mov	r2, sl
 800b4ba:	5c9b      	ldrb	r3, [r3, r2]
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d0f1      	beq.n	800b4a4 <SaveToRO+0x174>
			snipBuffer[0] = 0xFE;		// A marker to separate Snippets
 800b4c0:	23fe      	movs	r3, #254	; 0xfe
 800b4c2:	aa02      	add	r2, sp, #8
 800b4c4:	7013      	strb	r3, [r2, #0]
			memcpy( (uint8_t *)&snipBuffer[1], (uint8_t *)&snippets[s], sizeof(snippet_t));
 800b4c6:	00a9      	lsls	r1, r5, #2
 800b4c8:	1949      	adds	r1, r1, r5
 800b4ca:	0089      	lsls	r1, r1, #2
 800b4cc:	4b23      	ldr	r3, [pc, #140]	; (800b55c <SaveToRO+0x22c>)
 800b4ce:	469c      	mov	ip, r3
 800b4d0:	4461      	add	r1, ip
 800b4d2:	2214      	movs	r2, #20
 800b4d4:	ab02      	add	r3, sp, #8
 800b4d6:	1c58      	adds	r0, r3, #1
 800b4d8:	f00b f82c 	bl	8016534 <memcpy>
			for(uint8_t j=0 ; j<(sizeof(snippet_t)/2) ; j++)
 800b4dc:	2314      	movs	r3, #20
 800b4de:	469b      	mov	fp, r3
 800b4e0:	44b3      	add	fp, r6
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, currentAdd, *(uint16_t *)&snipBuffer[j*2]);
 800b4e2:	ab02      	add	r3, sp, #8
 800b4e4:	1b9b      	subs	r3, r3, r6
 800b4e6:	4698      	mov	r8, r3
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800b4e8:	4b17      	ldr	r3, [pc, #92]	; (800b548 <SaveToRO+0x218>)
 800b4ea:	4699      	mov	r9, r3
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800b4ec:	4f17      	ldr	r7, [pc, #92]	; (800b54c <SaveToRO+0x21c>)
 800b4ee:	4644      	mov	r4, r8
 800b4f0:	46a8      	mov	r8, r5
 800b4f2:	465d      	mov	r5, fp
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, currentAdd, *(uint16_t *)&snipBuffer[j*2]);
 800b4f4:	5ba2      	ldrh	r2, [r4, r6]
 800b4f6:	2300      	movs	r3, #0
 800b4f8:	0031      	movs	r1, r6
 800b4fa:	2001      	movs	r0, #1
 800b4fc:	f005 fca4 	bl	8010e48 <HAL_FLASH_Program>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800b500:	4648      	mov	r0, r9
 800b502:	f005 fc73 	bl	8010dec <FLASH_WaitForLastOperation>
				if (FlashStatus != HAL_OK) {
 800b506:	2800      	cmp	r0, #0
 800b508:	d1a4      	bne.n	800b454 <SaveToRO+0x124>
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800b50a:	693b      	ldr	r3, [r7, #16]
 800b50c:	2201      	movs	r2, #1
 800b50e:	4393      	bics	r3, r2
 800b510:	613b      	str	r3, [r7, #16]
					currentAdd += 2;
 800b512:	3602      	adds	r6, #2
			for(uint8_t j=0 ; j<(sizeof(snippet_t)/2) ; j++)
 800b514:	42b5      	cmp	r5, r6
 800b516:	d1ed      	bne.n	800b4f4 <SaveToRO+0x1c4>
 800b518:	0004      	movs	r4, r0
 800b51a:	4645      	mov	r5, r8
			for(uint8_t j=0 ; j<((strlen(snippets[s].cmd)+1)/2) ; j++)
 800b51c:	9a00      	ldr	r2, [sp, #0]
 800b51e:	0093      	lsls	r3, r2, #2
 800b520:	4694      	mov	ip, r2
 800b522:	4463      	add	r3, ip
 800b524:	009b      	lsls	r3, r3, #2
 800b526:	4a0d      	ldr	r2, [pc, #52]	; (800b55c <SaveToRO+0x22c>)
 800b528:	4691      	mov	r9, r2
 800b52a:	4499      	add	r9, r3
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800b52c:	4b06      	ldr	r3, [pc, #24]	; (800b548 <SaveToRO+0x218>)
 800b52e:	469b      	mov	fp, r3
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800b530:	4b06      	ldr	r3, [pc, #24]	; (800b54c <SaveToRO+0x21c>)
 800b532:	4698      	mov	r8, r3
 800b534:	464b      	mov	r3, r9
 800b536:	46a9      	mov	r9, r5
 800b538:	001d      	movs	r5, r3
 800b53a:	e799      	b.n	800b470 <SaveToRO+0x140>
	HAL_FLASH_Lock();
 800b53c:	f005 fc4c 	bl	8010dd8 <HAL_FLASH_Lock>
	return result;
 800b540:	e727      	b.n	800b392 <SaveToRO+0x62>
 800b542:	46c0      	nop			; (mov r8, r8)
 800b544:	0801d800 	.word	0x0801d800
 800b548:	0000c350 	.word	0x0000c350
 800b54c:	40022000 	.word	0x40022000
 800b550:	20000b04 	.word	0x20000b04
 800b554:	20000ca3 	.word	0x20000ca3
 800b558:	0801dc00 	.word	0x0801dc00
 800b55c:	20006384 	.word	0x20006384
 800b560:	20006958 	.word	0x20006958
 800b564:	2000001c 	.word	0x2000001c
 800b568:	20000560 	.word	0x20000560

0800b56c <ClearROtopology>:
{
 800b56c:	b510      	push	{r4, lr}
	memset(array, 0, sizeof(array));
 800b56e:	4a07      	ldr	r2, [pc, #28]	; (800b58c <ClearROtopology+0x20>)
 800b570:	2100      	movs	r1, #0
 800b572:	4807      	ldr	r0, [pc, #28]	; (800b590 <ClearROtopology+0x24>)
 800b574:	f00a ffe7 	bl	8016546 <memset>
	N = 1; myID = 0;
 800b578:	4b06      	ldr	r3, [pc, #24]	; (800b594 <ClearROtopology+0x28>)
 800b57a:	2201      	movs	r2, #1
 800b57c:	701a      	strb	r2, [r3, #0]
 800b57e:	4b06      	ldr	r3, [pc, #24]	; (800b598 <ClearROtopology+0x2c>)
 800b580:	2200      	movs	r2, #0
 800b582:	701a      	strb	r2, [r3, #0]
	return SaveToRO();
 800b584:	f7ff fed4 	bl	800b330 <SaveToRO>
}
 800b588:	bd10      	pop	{r4, pc}
 800b58a:	46c0      	nop			; (mov r8, r8)
 800b58c:	00000226 	.word	0x00000226
 800b590:	20000560 	.word	0x20000560
 800b594:	2000001c 	.word	0x2000001c
 800b598:	20000b04 	.word	0x20000b04

0800b59c <RegisterModuleCLICommands>:
{
 800b59c:	b510      	push	{r4, lr}
  FreeRTOS_CLIRegisterCommand( &demoCommandDefinition);
 800b59e:	480b      	ldr	r0, [pc, #44]	; (800b5cc <RegisterModuleCLICommands+0x30>)
 800b5a0:	f002 fd4a 	bl	800e038 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &Vl53l0xSampleCommandDefinition);
 800b5a4:	480a      	ldr	r0, [pc, #40]	; (800b5d0 <RegisterModuleCLICommands+0x34>)
 800b5a6:	f002 fd47 	bl	800e038 <FreeRTOS_CLIRegisterCommand>
  FreeRTOS_CLIRegisterCommand( &Vl53l0xStreamCommandDefinition);
 800b5aa:	480a      	ldr	r0, [pc, #40]	; (800b5d4 <RegisterModuleCLICommands+0x38>)
 800b5ac:	f002 fd44 	bl	800e038 <FreeRTOS_CLIRegisterCommand>
  FreeRTOS_CLIRegisterCommand( &Vl53l0xStopCommandDefinition);
 800b5b0:	4809      	ldr	r0, [pc, #36]	; (800b5d8 <RegisterModuleCLICommands+0x3c>)
 800b5b2:	f002 fd41 	bl	800e038 <FreeRTOS_CLIRegisterCommand>
  FreeRTOS_CLIRegisterCommand( &Vl53l0xUnitsCommandDefinition);
 800b5b6:	4809      	ldr	r0, [pc, #36]	; (800b5dc <RegisterModuleCLICommands+0x40>)
 800b5b8:	f002 fd3e 	bl	800e038 <FreeRTOS_CLIRegisterCommand>
  FreeRTOS_CLIRegisterCommand( &Vl53l0xMaxCommandDefinition);
 800b5bc:	4808      	ldr	r0, [pc, #32]	; (800b5e0 <RegisterModuleCLICommands+0x44>)
 800b5be:	f002 fd3b 	bl	800e038 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &rangeModParamCommandDefinition);
 800b5c2:	4808      	ldr	r0, [pc, #32]	; (800b5e4 <RegisterModuleCLICommands+0x48>)
 800b5c4:	f002 fd38 	bl	800e038 <FreeRTOS_CLIRegisterCommand>
}
 800b5c8:	bd10      	pop	{r4, pc}
 800b5ca:	46c0      	nop			; (mov r8, r8)
 800b5cc:	0801ca24 	.word	0x0801ca24
 800b5d0:	0801c9e4 	.word	0x0801c9e4
 800b5d4:	0801ca04 	.word	0x0801ca04
 800b5d8:	0801c9f4 	.word	0x0801c9f4
 800b5dc:	0801ca14 	.word	0x0801ca14
 800b5e0:	0801c9d4 	.word	0x0801c9d4
 800b5e4:	0801ca34 	.word	0x0801ca34

0800b5e8 <GetPort>:
  if (huart->Instance == USART4)
 800b5e8:	6800      	ldr	r0, [r0, #0]
 800b5ea:	4b11      	ldr	r3, [pc, #68]	; (800b630 <GetPort+0x48>)
 800b5ec:	4298      	cmp	r0, r3
 800b5ee:	d015      	beq.n	800b61c <GetPort+0x34>
  else if (huart->Instance == USART2)
 800b5f0:	4b10      	ldr	r3, [pc, #64]	; (800b634 <GetPort+0x4c>)
 800b5f2:	4298      	cmp	r0, r3
 800b5f4:	d014      	beq.n	800b620 <GetPort+0x38>
  else if (huart->Instance == USART6)
 800b5f6:	4b10      	ldr	r3, [pc, #64]	; (800b638 <GetPort+0x50>)
 800b5f8:	4298      	cmp	r0, r3
 800b5fa:	d013      	beq.n	800b624 <GetPort+0x3c>
  else if (huart->Instance == USART3)
 800b5fc:	4b0f      	ldr	r3, [pc, #60]	; (800b63c <GetPort+0x54>)
 800b5fe:	4298      	cmp	r0, r3
 800b600:	d012      	beq.n	800b628 <GetPort+0x40>
  else if (huart->Instance == USART1)
 800b602:	4b0f      	ldr	r3, [pc, #60]	; (800b640 <GetPort+0x58>)
 800b604:	4298      	cmp	r0, r3
 800b606:	d011      	beq.n	800b62c <GetPort+0x44>
    return P6;
 800b608:	4b0e      	ldr	r3, [pc, #56]	; (800b644 <GetPort+0x5c>)
 800b60a:	469c      	mov	ip, r3
 800b60c:	4460      	add	r0, ip
 800b60e:	1e43      	subs	r3, r0, #1
 800b610:	4198      	sbcs	r0, r3
 800b612:	4240      	negs	r0, r0
 800b614:	2305      	movs	r3, #5
 800b616:	4398      	bics	r0, r3
 800b618:	3006      	adds	r0, #6
}
 800b61a:	4770      	bx	lr
    return P1;
 800b61c:	2001      	movs	r0, #1
 800b61e:	e7fc      	b.n	800b61a <GetPort+0x32>
    return P2;
 800b620:	2002      	movs	r0, #2
 800b622:	e7fa      	b.n	800b61a <GetPort+0x32>
    return P3;
 800b624:	2003      	movs	r0, #3
 800b626:	e7f8      	b.n	800b61a <GetPort+0x32>
    return P4;
 800b628:	2004      	movs	r0, #4
 800b62a:	e7f6      	b.n	800b61a <GetPort+0x32>
    return P5;
 800b62c:	2005      	movs	r0, #5
 800b62e:	e7f4      	b.n	800b61a <GetPort+0x32>
 800b630:	40004c00 	.word	0x40004c00
 800b634:	40004400 	.word	0x40004400
 800b638:	40011400 	.word	0x40011400
 800b63c:	40004800 	.word	0x40004800
 800b640:	40013800 	.word	0x40013800
 800b644:	bfffb000 	.word	0xbfffb000

0800b648 <Sample_ToF>:
{
 800b648:	b510      	push	{r4, lr}
	tofMode = REQ_SAMPLE;
 800b64a:	2401      	movs	r4, #1
 800b64c:	4b14      	ldr	r3, [pc, #80]	; (800b6a0 <Sample_ToF+0x58>)
 800b64e:	701c      	strb	r4, [r3, #0]
  SetMeasurementMode(VL53L0x_MODE_SINGLE, 0, 0);
 800b650:	2200      	movs	r2, #0
 800b652:	2100      	movs	r1, #0
 800b654:	2000      	movs	r0, #0
 800b656:	f7ff fcfd 	bl	800b054 <SetMeasurementMode>
	startMeasurementRanging = START_MEASUREMENT_RANGING;
 800b65a:	4b12      	ldr	r3, [pc, #72]	; (800b6a4 <Sample_ToF+0x5c>)
 800b65c:	701c      	strb	r4, [r3, #0]
	if (tofState == REQ_TIMEOUT) {
 800b65e:	4b12      	ldr	r3, [pc, #72]	; (800b6a8 <Sample_ToF+0x60>)
 800b660:	781b      	ldrb	r3, [r3, #0]
		return 0;
 800b662:	2000      	movs	r0, #0
	if (tofState == REQ_TIMEOUT) {
 800b664:	2b0b      	cmp	r3, #11
 800b666:	d100      	bne.n	800b66a <Sample_ToF+0x22>
}
 800b668:	bd10      	pop	{r4, pc}
		temp = GetMeasurementResult();
 800b66a:	f7ff fc6f 	bl	800af4c <GetMeasurementResult>
  if (UNIT_MEASUREMENT_CM == h08r6UnitMeasurement)
 800b66e:	4b0f      	ldr	r3, [pc, #60]	; (800b6ac <Sample_ToF+0x64>)
 800b670:	781b      	ldrb	r3, [r3, #0]
 800b672:	2b01      	cmp	r3, #1
 800b674:	d007      	beq.n	800b686 <Sample_ToF+0x3e>
  else if (UNIT_MEASUREMENT_INCH == h08r6UnitMeasurement)
 800b676:	2b02      	cmp	r3, #2
 800b678:	d009      	beq.n	800b68e <Sample_ToF+0x46>
		h08r6_range = ConvertCurrentUnit(temp);
 800b67a:	4b0d      	ldr	r3, [pc, #52]	; (800b6b0 <Sample_ToF+0x68>)
 800b67c:	6018      	str	r0, [r3, #0]
		tofState = REQ_IDLE;
 800b67e:	4b0a      	ldr	r3, [pc, #40]	; (800b6a8 <Sample_ToF+0x60>)
 800b680:	2200      	movs	r2, #0
 800b682:	701a      	strb	r2, [r3, #0]
		return h08r6_range;
 800b684:	e7f0      	b.n	800b668 <Sample_ToF+0x20>
    temp = distance / 10;
 800b686:	490b      	ldr	r1, [pc, #44]	; (800b6b4 <Sample_ToF+0x6c>)
 800b688:	f7f5 f984 	bl	8000994 <__aeabi_fdiv>
 800b68c:	e7f5      	b.n	800b67a <Sample_ToF+0x32>
    temp = distance / 25.4; /* 1mm = (1/25.4)″ = 0.03937007874″ */
 800b68e:	f7f7 f981 	bl	8002994 <__aeabi_f2d>
 800b692:	4a09      	ldr	r2, [pc, #36]	; (800b6b8 <Sample_ToF+0x70>)
 800b694:	4b09      	ldr	r3, [pc, #36]	; (800b6bc <Sample_ToF+0x74>)
 800b696:	f7f5 feed 	bl	8001474 <__aeabi_ddiv>
 800b69a:	f7f7 f9c3 	bl	8002a24 <__aeabi_d2f>
 800b69e:	e7ec      	b.n	800b67a <Sample_ToF+0x32>
 800b6a0:	200064b4 	.word	0x200064b4
 800b6a4:	20001160 	.word	0x20001160
 800b6a8:	2000659c 	.word	0x2000659c
 800b6ac:	20001154 	.word	0x20001154
 800b6b0:	20001158 	.word	0x20001158
 800b6b4:	41200000 	.word	0x41200000
 800b6b8:	66666666 	.word	0x66666666
 800b6bc:	40396666 	.word	0x40396666

0800b6c0 <Vl53l0xSampleCommand>:
{
 800b6c0:	b510      	push	{r4, lr}
 800b6c2:	b082      	sub	sp, #8
 800b6c4:	1e04      	subs	r4, r0, #0
  configASSERT( pcWriteBuffer );
 800b6c6:	d013      	beq.n	800b6f0 <Vl53l0xSampleCommand+0x30>
	Sample_ToF();
 800b6c8:	f7ff ffbe 	bl	800b648 <Sample_ToF>
  SendMeasurementResult(REQ_SAMPLE_CLI, h08r6_range, 0, PcPort, NULL);
 800b6cc:	4b09      	ldr	r3, [pc, #36]	; (800b6f4 <Vl53l0xSampleCommand+0x34>)
 800b6ce:	781b      	ldrb	r3, [r3, #0]
 800b6d0:	4a09      	ldr	r2, [pc, #36]	; (800b6f8 <Vl53l0xSampleCommand+0x38>)
 800b6d2:	6811      	ldr	r1, [r2, #0]
 800b6d4:	2200      	movs	r2, #0
 800b6d6:	9200      	str	r2, [sp, #0]
 800b6d8:	2002      	movs	r0, #2
 800b6da:	f7ff fa57 	bl	800ab8c <SendMeasurementResult>
  memset((char *) pcWriteBuffer, 0, configCOMMAND_INT_MAX_OUTPUT_SIZE);
 800b6de:	2299      	movs	r2, #153	; 0x99
 800b6e0:	0092      	lsls	r2, r2, #2
 800b6e2:	2100      	movs	r1, #0
 800b6e4:	0020      	movs	r0, r4
 800b6e6:	f00a ff2e 	bl	8016546 <memset>
}
 800b6ea:	2000      	movs	r0, #0
 800b6ec:	b002      	add	sp, #8
 800b6ee:	bd10      	pop	{r4, pc}
  configASSERT( pcWriteBuffer );
 800b6f0:	b672      	cpsid	i
 800b6f2:	e7fe      	b.n	800b6f2 <Vl53l0xSampleCommand+0x32>
 800b6f4:	2000055f 	.word	0x2000055f
 800b6f8:	20001158 	.word	0x20001158

0800b6fc <Vl53l0xMaxCommand>:
{
 800b6fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b6fe:	b083      	sub	sp, #12
 800b700:	1e04      	subs	r4, r0, #0
  configASSERT( pcWriteBuffer );
 800b702:	d04e      	beq.n	800b7a2 <Vl53l0xMaxCommand+0xa6>
	LastEnter=  UARTRxBufIndex[PcPort-1];
 800b704:	4e28      	ldr	r6, [pc, #160]	; (800b7a8 <Vl53l0xMaxCommand+0xac>)
 800b706:	7832      	ldrb	r2, [r6, #0]
 800b708:	4b28      	ldr	r3, [pc, #160]	; (800b7ac <Vl53l0xMaxCommand+0xb0>)
 800b70a:	189b      	adds	r3, r3, r2
 800b70c:	3b01      	subs	r3, #1
 800b70e:	781d      	ldrb	r5, [r3, #0]
	strcpy( ( char * ) pcWriteBuffer, ( char * ) pcStartMsg);
 800b710:	2268      	movs	r2, #104	; 0x68
 800b712:	4927      	ldr	r1, [pc, #156]	; (800b7b0 <Vl53l0xMaxCommand+0xb4>)
 800b714:	f00a ff0e 	bl	8016534 <memcpy>
	writePxMutex(PcPort, (char *)pcWriteBuffer, strlen((char *)pcWriteBuffer), cmd50ms, HAL_MAX_DELAY);
 800b718:	0020      	movs	r0, r4
 800b71a:	f7f4 fcfd 	bl	8000118 <strlen>
 800b71e:	b282      	uxth	r2, r0
 800b720:	7830      	ldrb	r0, [r6, #0]
 800b722:	2301      	movs	r3, #1
 800b724:	425b      	negs	r3, r3
 800b726:	9300      	str	r3, [sp, #0]
 800b728:	3333      	adds	r3, #51	; 0x33
 800b72a:	0021      	movs	r1, r4
 800b72c:	f002 fad8 	bl	800dce0 <writePxMutex>
	memset((char *) pcWriteBuffer, 0, strlen((char *)pcWriteBuffer));
 800b730:	0020      	movs	r0, r4
 800b732:	f7f4 fcf1 	bl	8000118 <strlen>
 800b736:	0002      	movs	r2, r0
 800b738:	2100      	movs	r1, #0
 800b73a:	0020      	movs	r0, r4
 800b73c:	f00a ff03 	bl	8016546 <memset>
	while(UARTRxBuf[PcPort-1][LastEnter+1]==0){Delay_ms(1);}
 800b740:	3501      	adds	r5, #1
 800b742:	7833      	ldrb	r3, [r6, #0]
 800b744:	3b01      	subs	r3, #1
 800b746:	019b      	lsls	r3, r3, #6
 800b748:	4a1a      	ldr	r2, [pc, #104]	; (800b7b4 <Vl53l0xMaxCommand+0xb8>)
 800b74a:	18d3      	adds	r3, r2, r3
 800b74c:	5d5b      	ldrb	r3, [r3, r5]
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d10b      	bne.n	800b76a <Vl53l0xMaxCommand+0x6e>
 800b752:	0017      	movs	r7, r2
 800b754:	4e14      	ldr	r6, [pc, #80]	; (800b7a8 <Vl53l0xMaxCommand+0xac>)
 800b756:	2001      	movs	r0, #1
 800b758:	f004 fc70 	bl	801003c <HAL_Delay>
 800b75c:	7833      	ldrb	r3, [r6, #0]
 800b75e:	3b01      	subs	r3, #1
 800b760:	019b      	lsls	r3, r3, #6
 800b762:	18fb      	adds	r3, r7, r3
 800b764:	5d5b      	ldrb	r3, [r3, r5]
 800b766:	2b00      	cmp	r3, #0
 800b768:	d0f5      	beq.n	800b756 <Vl53l0xMaxCommand+0x5a>
{
 800b76a:	250a      	movs	r5, #10
		h08r6_range += Sample_ToF();;
 800b76c:	4e12      	ldr	r6, [pc, #72]	; (800b7b8 <Vl53l0xMaxCommand+0xbc>)
 800b76e:	f7ff ff6b 	bl	800b648 <Sample_ToF>
 800b772:	6831      	ldr	r1, [r6, #0]
 800b774:	f7f4 ff72 	bl	800065c <__aeabi_fadd>
 800b778:	6030      	str	r0, [r6, #0]
	while(temp < 10)
 800b77a:	3d01      	subs	r5, #1
 800b77c:	b2ed      	uxtb	r5, r5
 800b77e:	2d00      	cmp	r5, #0
 800b780:	d1f5      	bne.n	800b76e <Vl53l0xMaxCommand+0x72>
	h08r6MaxRange = h08r6_range / (temp - 1);
 800b782:	490e      	ldr	r1, [pc, #56]	; (800b7bc <Vl53l0xMaxCommand+0xc0>)
 800b784:	f7f5 f906 	bl	8000994 <__aeabi_fdiv>
 800b788:	4b0d      	ldr	r3, [pc, #52]	; (800b7c0 <Vl53l0xMaxCommand+0xc4>)
 800b78a:	6018      	str	r0, [r3, #0]
	sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMaxDistanceMsg, h08r6MaxRange);
 800b78c:	f7f7 f902 	bl	8002994 <__aeabi_f2d>
 800b790:	0002      	movs	r2, r0
 800b792:	000b      	movs	r3, r1
 800b794:	490b      	ldr	r1, [pc, #44]	; (800b7c4 <Vl53l0xMaxCommand+0xc8>)
 800b796:	0020      	movs	r0, r4
 800b798:	f00a ffe0 	bl	801675c <siprintf>
}
 800b79c:	2000      	movs	r0, #0
 800b79e:	b003      	add	sp, #12
 800b7a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  configASSERT( pcWriteBuffer );
 800b7a2:	b672      	cpsid	i
 800b7a4:	e7fe      	b.n	800b7a4 <Vl53l0xMaxCommand+0xa8>
 800b7a6:	46c0      	nop			; (mov r8, r8)
 800b7a8:	2000055f 	.word	0x2000055f
 800b7ac:	20000e94 	.word	0x20000e94
 800b7b0:	0801c4c0 	.word	0x0801c4c0
 800b7b4:	20000d54 	.word	0x20000d54
 800b7b8:	20001158 	.word	0x20001158
 800b7bc:	41100000 	.word	0x41100000
 800b7c0:	20000084 	.word	0x20000084
 800b7c4:	0801c528 	.word	0x0801c528

0800b7c8 <Stream_ToF_Port>:
{
 800b7c8:	b570      	push	{r4, r5, r6, lr}
 800b7ca:	ac04      	add	r4, sp, #16
 800b7cc:	7825      	ldrb	r5, [r4, #0]
	if (!port && !module && verbose)
 800b7ce:	0014      	movs	r4, r2
 800b7d0:	431c      	orrs	r4, r3
 800b7d2:	d123      	bne.n	800b81c <Stream_ToF_Port+0x54>
 800b7d4:	2d00      	cmp	r5, #0
 800b7d6:	d003      	beq.n	800b7e0 <Stream_ToF_Port+0x18>
		tofMode = REQ_STREAM_VERBOSE_PORT_CLI;
 800b7d8:	4c15      	ldr	r4, [pc, #84]	; (800b830 <Stream_ToF_Port+0x68>)
 800b7da:	2506      	movs	r5, #6
 800b7dc:	7025      	strb	r5, [r4, #0]
 800b7de:	e002      	b.n	800b7e6 <Stream_ToF_Port+0x1e>
		tofMode = REQ_STREAM_PORT_CLI;
 800b7e0:	4c13      	ldr	r4, [pc, #76]	; (800b830 <Stream_ToF_Port+0x68>)
 800b7e2:	2505      	movs	r5, #5
 800b7e4:	7025      	strb	r5, [r4, #0]
	tofPeriod = period;
 800b7e6:	4c13      	ldr	r4, [pc, #76]	; (800b834 <Stream_ToF_Port+0x6c>)
 800b7e8:	6020      	str	r0, [r4, #0]
	tofTimeout = timeout;
 800b7ea:	4c13      	ldr	r4, [pc, #76]	; (800b838 <Stream_ToF_Port+0x70>)
 800b7ec:	6021      	str	r1, [r4, #0]
	tofPort = port;
 800b7ee:	4c13      	ldr	r4, [pc, #76]	; (800b83c <Stream_ToF_Port+0x74>)
 800b7f0:	7022      	strb	r2, [r4, #0]
	tofModule = module;
 800b7f2:	4a13      	ldr	r2, [pc, #76]	; (800b840 <Stream_ToF_Port+0x78>)
 800b7f4:	7013      	strb	r3, [r2, #0]
  if (0 == period)
 800b7f6:	2800      	cmp	r0, #0
 800b7f8:	d114      	bne.n	800b824 <Stream_ToF_Port+0x5c>
    SetMeasurementMode(VL53L0x_MODE_CONTINUOUS, 0, timeout);
 800b7fa:	000a      	movs	r2, r1
 800b7fc:	2100      	movs	r1, #0
 800b7fe:	3001      	adds	r0, #1
 800b800:	f7ff fc28 	bl	800b054 <SetMeasurementMode>
  startMeasurementRanging = START_MEASUREMENT_RANGING;
 800b804:	4b0f      	ldr	r3, [pc, #60]	; (800b844 <Stream_ToF_Port+0x7c>)
 800b806:	2201      	movs	r2, #1
 800b808:	701a      	strb	r2, [r3, #0]
	t0 = HAL_GetTick();
 800b80a:	f004 fc11 	bl	8010030 <HAL_GetTick>
 800b80e:	4b0e      	ldr	r3, [pc, #56]	; (800b848 <Stream_ToF_Port+0x80>)
 800b810:	6018      	str	r0, [r3, #0]
	h08r6_range = GetMeasurementResult();
 800b812:	f7ff fb9b 	bl	800af4c <GetMeasurementResult>
 800b816:	4b0d      	ldr	r3, [pc, #52]	; (800b84c <Stream_ToF_Port+0x84>)
 800b818:	6018      	str	r0, [r3, #0]
}
 800b81a:	bd70      	pop	{r4, r5, r6, pc}
		tofMode = REQ_STREAM_PORT_ARR;
 800b81c:	4c04      	ldr	r4, [pc, #16]	; (800b830 <Stream_ToF_Port+0x68>)
 800b81e:	2507      	movs	r5, #7
 800b820:	7025      	strb	r5, [r4, #0]
 800b822:	e7e0      	b.n	800b7e6 <Stream_ToF_Port+0x1e>
    SetMeasurementMode(VL53L0x_MODE_CONTINUOUS_TIMED, period, timeout);
 800b824:	000a      	movs	r2, r1
 800b826:	0001      	movs	r1, r0
 800b828:	2002      	movs	r0, #2
 800b82a:	f7ff fc13 	bl	800b054 <SetMeasurementMode>
 800b82e:	e7e9      	b.n	800b804 <Stream_ToF_Port+0x3c>
 800b830:	200064b4 	.word	0x200064b4
 800b834:	20006440 	.word	0x20006440
 800b838:	20006528 	.word	0x20006528
 800b83c:	200067e8 	.word	0x200067e8
 800b840:	2000643c 	.word	0x2000643c
 800b844:	20001160 	.word	0x20001160
 800b848:	20006610 	.word	0x20006610
 800b84c:	20001158 	.word	0x20001158

0800b850 <demoCommand>:
{
 800b850:	b530      	push	{r4, r5, lr}
 800b852:	b083      	sub	sp, #12
 800b854:	1e04      	subs	r4, r0, #0
	configASSERT( pcWriteBuffer );
 800b856:	d02e      	beq.n	800b8b6 <demoCommand+0x66>
	strcpy(( char * ) pcWriteBuffer, ( char * ) pcMessage);
 800b858:	2236      	movs	r2, #54	; 0x36
 800b85a:	4918      	ldr	r1, [pc, #96]	; (800b8bc <demoCommand+0x6c>)
 800b85c:	f00a fe6a 	bl	8016534 <memcpy>
	writePxMutex(PcPort, (char *)pcWriteBuffer, strlen((char *)pcWriteBuffer), cmd50ms, HAL_MAX_DELAY);
 800b860:	0020      	movs	r0, r4
 800b862:	f7f4 fc59 	bl	8000118 <strlen>
 800b866:	b282      	uxth	r2, r0
 800b868:	4b15      	ldr	r3, [pc, #84]	; (800b8c0 <demoCommand+0x70>)
 800b86a:	7818      	ldrb	r0, [r3, #0]
 800b86c:	2301      	movs	r3, #1
 800b86e:	425b      	negs	r3, r3
 800b870:	9300      	str	r3, [sp, #0]
 800b872:	3333      	adds	r3, #51	; 0x33
 800b874:	0021      	movs	r1, r4
 800b876:	f002 fa33 	bl	800dce0 <writePxMutex>
	Stream_ToF_Port(500, 10000, 0, 0, false);
 800b87a:	20fa      	movs	r0, #250	; 0xfa
 800b87c:	2300      	movs	r3, #0
 800b87e:	9300      	str	r3, [sp, #0]
 800b880:	2200      	movs	r2, #0
 800b882:	4910      	ldr	r1, [pc, #64]	; (800b8c4 <demoCommand+0x74>)
 800b884:	0040      	lsls	r0, r0, #1
 800b886:	f7ff ff9f 	bl	800b7c8 <Stream_ToF_Port>
	while(startMeasurementRanging != STOP_MEASUREMENT_RANGING){	Delay_ms(1); };
 800b88a:	4b0f      	ldr	r3, [pc, #60]	; (800b8c8 <demoCommand+0x78>)
 800b88c:	781b      	ldrb	r3, [r3, #0]
 800b88e:	2b00      	cmp	r3, #0
 800b890:	d006      	beq.n	800b8a0 <demoCommand+0x50>
 800b892:	4d0d      	ldr	r5, [pc, #52]	; (800b8c8 <demoCommand+0x78>)
 800b894:	2001      	movs	r0, #1
 800b896:	f004 fbd1 	bl	801003c <HAL_Delay>
 800b89a:	782b      	ldrb	r3, [r5, #0]
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d1f9      	bne.n	800b894 <demoCommand+0x44>
	memset((char *) pcWriteBuffer, 0, strlen((char *)pcWriteBuffer));
 800b8a0:	0020      	movs	r0, r4
 800b8a2:	f7f4 fc39 	bl	8000118 <strlen>
 800b8a6:	0002      	movs	r2, r0
 800b8a8:	2100      	movs	r1, #0
 800b8aa:	0020      	movs	r0, r4
 800b8ac:	f00a fe4b 	bl	8016546 <memset>
}
 800b8b0:	2000      	movs	r0, #0
 800b8b2:	b003      	add	sp, #12
 800b8b4:	bd30      	pop	{r4, r5, pc}
	configASSERT( pcWriteBuffer );
 800b8b6:	b672      	cpsid	i
 800b8b8:	e7fe      	b.n	800b8b8 <demoCommand+0x68>
 800b8ba:	46c0      	nop			; (mov r8, r8)
 800b8bc:	0801c548 	.word	0x0801c548
 800b8c0:	2000055f 	.word	0x2000055f
 800b8c4:	00002710 	.word	0x00002710
 800b8c8:	20001160 	.word	0x20001160

0800b8cc <Stream_ToF_Memory>:
{
 800b8cc:	b510      	push	{r4, lr}
	tofMode = REQ_STREAM_MEMORY;
 800b8ce:	4b11      	ldr	r3, [pc, #68]	; (800b914 <Stream_ToF_Memory+0x48>)
 800b8d0:	2408      	movs	r4, #8
 800b8d2:	701c      	strb	r4, [r3, #0]
	tofPeriod = period;
 800b8d4:	4b10      	ldr	r3, [pc, #64]	; (800b918 <Stream_ToF_Memory+0x4c>)
 800b8d6:	6018      	str	r0, [r3, #0]
	tofTimeout = timeout;
 800b8d8:	4b10      	ldr	r3, [pc, #64]	; (800b91c <Stream_ToF_Memory+0x50>)
 800b8da:	6019      	str	r1, [r3, #0]
	tofBuffer = buffer;
 800b8dc:	4b10      	ldr	r3, [pc, #64]	; (800b920 <Stream_ToF_Memory+0x54>)
 800b8de:	601a      	str	r2, [r3, #0]
  if (0 == period)
 800b8e0:	2800      	cmp	r0, #0
 800b8e2:	d110      	bne.n	800b906 <Stream_ToF_Memory+0x3a>
    SetMeasurementMode(VL53L0x_MODE_CONTINUOUS, 0, timeout);
 800b8e4:	000a      	movs	r2, r1
 800b8e6:	2100      	movs	r1, #0
 800b8e8:	3001      	adds	r0, #1
 800b8ea:	f7ff fbb3 	bl	800b054 <SetMeasurementMode>
  startMeasurementRanging = START_MEASUREMENT_RANGING;
 800b8ee:	4b0d      	ldr	r3, [pc, #52]	; (800b924 <Stream_ToF_Memory+0x58>)
 800b8f0:	2201      	movs	r2, #1
 800b8f2:	701a      	strb	r2, [r3, #0]
	t0 = HAL_GetTick();
 800b8f4:	f004 fb9c 	bl	8010030 <HAL_GetTick>
 800b8f8:	4b0b      	ldr	r3, [pc, #44]	; (800b928 <Stream_ToF_Memory+0x5c>)
 800b8fa:	6018      	str	r0, [r3, #0]
	h08r6_range = GetMeasurementResult();
 800b8fc:	f7ff fb26 	bl	800af4c <GetMeasurementResult>
 800b900:	4b0a      	ldr	r3, [pc, #40]	; (800b92c <Stream_ToF_Memory+0x60>)
 800b902:	6018      	str	r0, [r3, #0]
}
 800b904:	bd10      	pop	{r4, pc}
    SetMeasurementMode(VL53L0x_MODE_CONTINUOUS_TIMED, period, timeout);
 800b906:	000a      	movs	r2, r1
 800b908:	0001      	movs	r1, r0
 800b90a:	2002      	movs	r0, #2
 800b90c:	f7ff fba2 	bl	800b054 <SetMeasurementMode>
 800b910:	e7ed      	b.n	800b8ee <Stream_ToF_Memory+0x22>
 800b912:	46c0      	nop			; (mov r8, r8)
 800b914:	200064b4 	.word	0x200064b4
 800b918:	20006440 	.word	0x20006440
 800b91c:	20006528 	.word	0x20006528
 800b920:	200067e4 	.word	0x200067e4
 800b924:	20001160 	.word	0x20001160
 800b928:	20006610 	.word	0x20006610
 800b92c:	20001158 	.word	0x20001158

0800b930 <Vl53l0xStreamCommand>:
{
 800b930:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b932:	46d6      	mov	lr, sl
 800b934:	464f      	mov	r7, r9
 800b936:	4646      	mov	r6, r8
 800b938:	b5c0      	push	{r6, r7, lr}
 800b93a:	b086      	sub	sp, #24
 800b93c:	0004      	movs	r4, r0
 800b93e:	0016      	movs	r6, r2
  portBASE_TYPE xParameterStringLength1 = 0;
 800b940:	2300      	movs	r3, #0
 800b942:	9305      	str	r3, [sp, #20]
  portBASE_TYPE xParameterStringLength2 = 0;
 800b944:	9304      	str	r3, [sp, #16]
  portBASE_TYPE xParameterStringLength3 = 0;
 800b946:	9303      	str	r3, [sp, #12]
  portBASE_TYPE xParameterStringLength4 = 0;
 800b948:	9302      	str	r3, [sp, #8]
  configASSERT( pcWriteBuffer );
 800b94a:	2800      	cmp	r0, #0
 800b94c:	d048      	beq.n	800b9e0 <Vl53l0xStreamCommand+0xb0>
  pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 800b94e:	aa05      	add	r2, sp, #20
 800b950:	2101      	movs	r1, #1
 800b952:	0030      	movs	r0, r6
 800b954:	f002 fc1a 	bl	800e18c <FreeRTOS_CLIGetParameter>
 800b958:	4680      	mov	r8, r0
  pcParameterString2 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 2, &xParameterStringLength2);
 800b95a:	aa04      	add	r2, sp, #16
 800b95c:	2102      	movs	r1, #2
 800b95e:	0030      	movs	r0, r6
 800b960:	f002 fc14 	bl	800e18c <FreeRTOS_CLIGetParameter>
 800b964:	4681      	mov	r9, r0
  pcParameterString3 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 3, &xParameterStringLength3);
 800b966:	aa03      	add	r2, sp, #12
 800b968:	2103      	movs	r1, #3
 800b96a:	0030      	movs	r0, r6
 800b96c:	f002 fc0e 	bl	800e18c <FreeRTOS_CLIGetParameter>
 800b970:	0005      	movs	r5, r0
  pcParameterString4 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 4, &xParameterStringLength4);
 800b972:	aa02      	add	r2, sp, #8
 800b974:	2104      	movs	r1, #4
 800b976:	0030      	movs	r0, r6
 800b978:	f002 fc08 	bl	800e18c <FreeRTOS_CLIGetParameter>
 800b97c:	0007      	movs	r7, r0
  if (NULL != pcParameterString1)
 800b97e:	4643      	mov	r3, r8
 800b980:	2b00      	cmp	r3, #0
 800b982:	d02f      	beq.n	800b9e4 <Vl53l0xStreamCommand+0xb4>
    period = atoi( (char *)pcParameterString1);
 800b984:	4640      	mov	r0, r8
 800b986:	f00a fd82 	bl	801648e <atoi>
 800b98a:	4680      	mov	r8, r0
  Module_Status result = H08R6_OK;
 800b98c:	2300      	movs	r3, #0
 800b98e:	469a      	mov	sl, r3
  if (NULL != pcParameterString2)
 800b990:	464b      	mov	r3, r9
 800b992:	2b00      	cmp	r3, #0
 800b994:	d030      	beq.n	800b9f8 <Vl53l0xStreamCommand+0xc8>
    if (!strncmp((const char *)pcParameterString2, "inf", 3))
 800b996:	2203      	movs	r2, #3
 800b998:	494e      	ldr	r1, [pc, #312]	; (800bad4 <Vl53l0xStreamCommand+0x1a4>)
 800b99a:	4648      	mov	r0, r9
 800b99c:	f00a ff21 	bl	80167e2 <strncmp>
 800b9a0:	2800      	cmp	r0, #0
 800b9a2:	d124      	bne.n	800b9ee <Vl53l0xStreamCommand+0xbe>
      timeout = portMAX_DELAY;
 800b9a4:	2601      	movs	r6, #1
 800b9a6:	4276      	negs	r6, r6
	if (NULL != pcParameterString3 && !strncmp((const char *)pcParameterString3, "buffer", 6)) 
 800b9a8:	2d00      	cmp	r5, #0
 800b9aa:	d100      	bne.n	800b9ae <Vl53l0xStreamCommand+0x7e>
 800b9ac:	e08d      	b.n	800baca <Vl53l0xStreamCommand+0x19a>
 800b9ae:	2206      	movs	r2, #6
 800b9b0:	4949      	ldr	r1, [pc, #292]	; (800bad8 <Vl53l0xStreamCommand+0x1a8>)
 800b9b2:	0028      	movs	r0, r5
 800b9b4:	f00a ff15 	bl	80167e2 <strncmp>
 800b9b8:	2800      	cmp	r0, #0
 800b9ba:	d021      	beq.n	800ba00 <Vl53l0xStreamCommand+0xd0>
	else if (NULL != pcParameterString3 && NULL != pcParameterString4 && pcParameterString3[0] == 'p') 
 800b9bc:	2f00      	cmp	r7, #0
 800b9be:	d043      	beq.n	800ba48 <Vl53l0xStreamCommand+0x118>
 800b9c0:	2300      	movs	r3, #0
 800b9c2:	56eb      	ldrsb	r3, [r5, r3]
 800b9c4:	2b70      	cmp	r3, #112	; 0x70
 800b9c6:	d026      	beq.n	800ba16 <Vl53l0xStreamCommand+0xe6>
    strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageError);
 800b9c8:	2212      	movs	r2, #18
 800b9ca:	4944      	ldr	r1, [pc, #272]	; (800badc <Vl53l0xStreamCommand+0x1ac>)
 800b9cc:	0020      	movs	r0, r4
 800b9ce:	f00a fdb1 	bl	8016534 <memcpy>
}
 800b9d2:	2000      	movs	r0, #0
 800b9d4:	b006      	add	sp, #24
 800b9d6:	bce0      	pop	{r5, r6, r7}
 800b9d8:	46ba      	mov	sl, r7
 800b9da:	46b1      	mov	r9, r6
 800b9dc:	46a8      	mov	r8, r5
 800b9de:	bdf0      	pop	{r4, r5, r6, r7, pc}
  configASSERT( pcWriteBuffer );
 800b9e0:	b672      	cpsid	i
 800b9e2:	e7fe      	b.n	800b9e2 <Vl53l0xStreamCommand+0xb2>
    result = H08R6_ERR_WrongParams;
 800b9e4:	2305      	movs	r3, #5
 800b9e6:	469a      	mov	sl, r3
  uint32_t period = 0;
 800b9e8:	2300      	movs	r3, #0
 800b9ea:	4698      	mov	r8, r3
 800b9ec:	e7d0      	b.n	800b990 <Vl53l0xStreamCommand+0x60>
      timeout = atoi( (char *)pcParameterString2);
 800b9ee:	4648      	mov	r0, r9
 800b9f0:	f00a fd4d 	bl	801648e <atoi>
 800b9f4:	0006      	movs	r6, r0
 800b9f6:	e7d7      	b.n	800b9a8 <Vl53l0xStreamCommand+0x78>
    result = H08R6_ERR_WrongParams;
 800b9f8:	2305      	movs	r3, #5
 800b9fa:	469a      	mov	sl, r3
  uint32_t timeout = 0;
 800b9fc:	2600      	movs	r6, #0
 800b9fe:	e7d3      	b.n	800b9a8 <Vl53l0xStreamCommand+0x78>
		strcpy(( char * ) pcWriteBuffer, ( char * ) pcMessageBuffer);
 800ba00:	225d      	movs	r2, #93	; 0x5d
 800ba02:	4937      	ldr	r1, [pc, #220]	; (800bae0 <Vl53l0xStreamCommand+0x1b0>)
 800ba04:	0020      	movs	r0, r4
 800ba06:	f00a fd95 	bl	8016534 <memcpy>
		Stream_ToF_Memory(period, timeout, &h08r6_range);
 800ba0a:	4a36      	ldr	r2, [pc, #216]	; (800bae4 <Vl53l0xStreamCommand+0x1b4>)
 800ba0c:	0031      	movs	r1, r6
 800ba0e:	4640      	mov	r0, r8
 800ba10:	f7ff ff5c 	bl	800b8cc <Stream_ToF_Memory>
		return pdFALSE;
 800ba14:	e7dd      	b.n	800b9d2 <Vl53l0xStreamCommand+0xa2>
		port = ( uint8_t ) atol( ( char * ) pcParameterString3+1 );
 800ba16:	1c68      	adds	r0, r5, #1
 800ba18:	f00a fd3f 	bl	801649a <atol>
 800ba1c:	0005      	movs	r5, r0
		module = atoi( (char *)pcParameterString4);
 800ba1e:	0038      	movs	r0, r7
 800ba20:	f00a fd35 	bl	801648e <atoi>
 800ba24:	0007      	movs	r7, r0
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageModule, port, module);
 800ba26:	22ff      	movs	r2, #255	; 0xff
 800ba28:	0013      	movs	r3, r2
 800ba2a:	4003      	ands	r3, r0
 800ba2c:	402a      	ands	r2, r5
 800ba2e:	492e      	ldr	r1, [pc, #184]	; (800bae8 <Vl53l0xStreamCommand+0x1b8>)
 800ba30:	0020      	movs	r0, r4
 800ba32:	f00a fe93 	bl	801675c <siprintf>
		Stream_ToF_Port(period, timeout, port, module, false);
 800ba36:	b2fb      	uxtb	r3, r7
 800ba38:	b2ea      	uxtb	r2, r5
 800ba3a:	2100      	movs	r1, #0
 800ba3c:	9100      	str	r1, [sp, #0]
 800ba3e:	0031      	movs	r1, r6
 800ba40:	4640      	mov	r0, r8
 800ba42:	f7ff fec1 	bl	800b7c8 <Stream_ToF_Port>
		return pdFALSE;
 800ba46:	e7c4      	b.n	800b9d2 <Vl53l0xStreamCommand+0xa2>
		if (NULL != pcParameterString3 && !strncmp((const char *)pcParameterString3, "-v", 2)) {
 800ba48:	2202      	movs	r2, #2
 800ba4a:	4928      	ldr	r1, [pc, #160]	; (800baec <Vl53l0xStreamCommand+0x1bc>)
 800ba4c:	0028      	movs	r0, r5
 800ba4e:	f00a fec8 	bl	80167e2 <strncmp>
 800ba52:	2800      	cmp	r0, #0
 800ba54:	d030      	beq.n	800bab8 <Vl53l0xStreamCommand+0x188>
			strcpy(( char * ) pcWriteBuffer, ( char * ) pcMessageCLI);
 800ba56:	2225      	movs	r2, #37	; 0x25
 800ba58:	4925      	ldr	r1, [pc, #148]	; (800baf0 <Vl53l0xStreamCommand+0x1c0>)
 800ba5a:	0020      	movs	r0, r4
 800ba5c:	f00a fd6a 	bl	8016534 <memcpy>
			writePxMutex(PcPort, (char *)pcWriteBuffer, strlen((char *)pcWriteBuffer), cmd50ms, HAL_MAX_DELAY);
 800ba60:	0020      	movs	r0, r4
 800ba62:	f7f4 fb59 	bl	8000118 <strlen>
 800ba66:	b282      	uxth	r2, r0
 800ba68:	4b22      	ldr	r3, [pc, #136]	; (800baf4 <Vl53l0xStreamCommand+0x1c4>)
 800ba6a:	7818      	ldrb	r0, [r3, #0]
 800ba6c:	2301      	movs	r3, #1
 800ba6e:	425b      	negs	r3, r3
 800ba70:	9300      	str	r3, [sp, #0]
 800ba72:	3333      	adds	r3, #51	; 0x33
 800ba74:	0021      	movs	r1, r4
 800ba76:	f002 f933 	bl	800dce0 <writePxMutex>
			Stream_ToF_Port(period, timeout, 0, 0, false);
 800ba7a:	2300      	movs	r3, #0
 800ba7c:	9300      	str	r3, [sp, #0]
 800ba7e:	2200      	movs	r2, #0
 800ba80:	0031      	movs	r1, r6
 800ba82:	4640      	mov	r0, r8
 800ba84:	f7ff fea0 	bl	800b7c8 <Stream_ToF_Port>
		while(startMeasurementRanging != STOP_MEASUREMENT_RANGING){	Delay_ms(1); };
 800ba88:	4b1b      	ldr	r3, [pc, #108]	; (800baf8 <Vl53l0xStreamCommand+0x1c8>)
 800ba8a:	781b      	ldrb	r3, [r3, #0]
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	d006      	beq.n	800ba9e <Vl53l0xStreamCommand+0x16e>
 800ba90:	4d19      	ldr	r5, [pc, #100]	; (800baf8 <Vl53l0xStreamCommand+0x1c8>)
 800ba92:	2001      	movs	r0, #1
 800ba94:	f004 fad2 	bl	801003c <HAL_Delay>
 800ba98:	782b      	ldrb	r3, [r5, #0]
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d1f9      	bne.n	800ba92 <Vl53l0xStreamCommand+0x162>
		memset((char *) pcWriteBuffer, 0, strlen((char *)pcWriteBuffer));
 800ba9e:	0020      	movs	r0, r4
 800baa0:	f7f4 fb3a 	bl	8000118 <strlen>
 800baa4:	0002      	movs	r2, r0
 800baa6:	2100      	movs	r1, #0
 800baa8:	0020      	movs	r0, r4
 800baaa:	f00a fd4c 	bl	8016546 <memset>
  if (H08R6_ERR_WrongParams == result)
 800baae:	4653      	mov	r3, sl
 800bab0:	2b05      	cmp	r3, #5
 800bab2:	d000      	beq.n	800bab6 <Vl53l0xStreamCommand+0x186>
 800bab4:	e78d      	b.n	800b9d2 <Vl53l0xStreamCommand+0xa2>
 800bab6:	e787      	b.n	800b9c8 <Vl53l0xStreamCommand+0x98>
			Stream_ToF_Port(period, timeout, 0, 0, true);
 800bab8:	2301      	movs	r3, #1
 800baba:	9300      	str	r3, [sp, #0]
 800babc:	2300      	movs	r3, #0
 800babe:	2200      	movs	r2, #0
 800bac0:	0031      	movs	r1, r6
 800bac2:	4640      	mov	r0, r8
 800bac4:	f7ff fe80 	bl	800b7c8 <Stream_ToF_Port>
 800bac8:	e7de      	b.n	800ba88 <Vl53l0xStreamCommand+0x158>
	else if (NULL == pcParameterString4) 
 800baca:	2f00      	cmp	r7, #0
 800bacc:	d000      	beq.n	800bad0 <Vl53l0xStreamCommand+0x1a0>
 800bace:	e77b      	b.n	800b9c8 <Vl53l0xStreamCommand+0x98>
 800bad0:	e7c1      	b.n	800ba56 <Vl53l0xStreamCommand+0x126>
 800bad2:	46c0      	nop			; (mov r8, r8)
 800bad4:	0801c580 	.word	0x0801c580
 800bad8:	0801c584 	.word	0x0801c584
 800badc:	0801c64c 	.word	0x0801c64c
 800bae0:	0801c58c 	.word	0x0801c58c
 800bae4:	20001158 	.word	0x20001158
 800bae8:	0801c5ec 	.word	0x0801c5ec
 800baec:	0801c620 	.word	0x0801c620
 800baf0:	0801c624 	.word	0x0801c624
 800baf4:	2000055f 	.word	0x2000055f
 800baf8:	20001160 	.word	0x20001160

0800bafc <Stop_ToF>:
{
 800bafc:	b570      	push	{r4, r5, r6, lr}
 800bafe:	b088      	sub	sp, #32
  uint32_t StopCompleted = 0;
 800bb00:	2300      	movs	r3, #0
 800bb02:	9307      	str	r3, [sp, #28]
  VL53L0X_StopMeasurement(&vl53l0x_HandleDevice);
 800bb04:	481b      	ldr	r0, [pc, #108]	; (800bb74 <Stop_ToF+0x78>)
 800bb06:	f008 fbe7 	bl	80142d8 <VL53L0X_StopMeasurement>
  uint32_t loop = 0;
 800bb0a:	2400      	movs	r4, #0
    status = VL53L0X_GetStopCompletedStatus(&vl53l0x_HandleDevice, &StopCompleted);
 800bb0c:	4d19      	ldr	r5, [pc, #100]	; (800bb74 <Stop_ToF+0x78>)
    VL53L0X_PollingDelay(&vl53l0x_HandleDevice);
 800bb0e:	002e      	movs	r6, r5
    status = VL53L0X_GetStopCompletedStatus(&vl53l0x_HandleDevice, &StopCompleted);
 800bb10:	a907      	add	r1, sp, #28
 800bb12:	0028      	movs	r0, r5
 800bb14:	f008 fc0a 	bl	801432c <VL53L0X_GetStopCompletedStatus>
    if ((0 == StopCompleted) || (VL53L0X_ERROR_NONE != status))
 800bb18:	9b07      	ldr	r3, [sp, #28]
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	d00b      	beq.n	800bb36 <Stop_ToF+0x3a>
 800bb1e:	2800      	cmp	r0, #0
 800bb20:	d109      	bne.n	800bb36 <Stop_ToF+0x3a>
    loop++;
 800bb22:	3401      	adds	r4, #1
    VL53L0X_PollingDelay(&vl53l0x_HandleDevice);
 800bb24:	0030      	movs	r0, r6
 800bb26:	f00a fc90 	bl	801644a <VL53L0X_PollingDelay>
  } while (loop < VL53L0X_DEFAULT_MAX_LOOP);
 800bb2a:	23fa      	movs	r3, #250	; 0xfa
 800bb2c:	00db      	lsls	r3, r3, #3
 800bb2e:	429c      	cmp	r4, r3
 800bb30:	d1ee      	bne.n	800bb10 <Stop_ToF+0x14>
    result = H08R6_ERR_Timeout;
 800bb32:	2304      	movs	r3, #4
 800bb34:	e006      	b.n	800bb44 <Stop_ToF+0x48>
  if (loop >= VL53L0X_DEFAULT_MAX_LOOP)
 800bb36:	23fa      	movs	r3, #250	; 0xfa
 800bb38:	00db      	lsls	r3, r3, #3
 800bb3a:	429c      	cmp	r4, r3
 800bb3c:	d217      	bcs.n	800bb6e <Stop_ToF+0x72>
      result = H08R6_ERROR;
 800bb3e:	23ff      	movs	r3, #255	; 0xff
    if (VL53L0X_ERROR_NONE != status)
 800bb40:	2800      	cmp	r0, #0
 800bb42:	d002      	beq.n	800bb4a <Stop_ToF+0x4e>
}
 800bb44:	0018      	movs	r0, r3
 800bb46:	b008      	add	sp, #32
 800bb48:	bd70      	pop	{r4, r5, r6, pc}
      startMeasurementRanging = STOP_MEASUREMENT_RANGING;
 800bb4a:	2300      	movs	r3, #0
 800bb4c:	4a0a      	ldr	r2, [pc, #40]	; (800bb78 <Stop_ToF+0x7c>)
 800bb4e:	7013      	strb	r3, [r2, #0]
			tofMode = REQ_IDLE;		// Stop the streaming task
 800bb50:	4a0a      	ldr	r2, [pc, #40]	; (800bb7c <Stop_ToF+0x80>)
 800bb52:	7013      	strb	r3, [r2, #0]
      status = VL53L0X_GetRangingMeasurementData(&vl53l0x_HandleDevice, &measurementResult);
 800bb54:	4669      	mov	r1, sp
 800bb56:	4807      	ldr	r0, [pc, #28]	; (800bb74 <Stop_ToF+0x78>)
 800bb58:	f008 f9fa 	bl	8013f50 <VL53L0X_GetRangingMeasurementData>
  Module_Status result = H08R6_OK;
 800bb5c:	2300      	movs	r3, #0
      if(VL53L0X_ERROR_NONE == status)
 800bb5e:	2800      	cmp	r0, #0
 800bb60:	d1f0      	bne.n	800bb44 <Stop_ToF+0x48>
        status = VL53L0X_ClearInterruptMask(&vl53l0x_HandleDevice, 0);
 800bb62:	2100      	movs	r1, #0
 800bb64:	4803      	ldr	r0, [pc, #12]	; (800bb74 <Stop_ToF+0x78>)
 800bb66:	f008 fc2a 	bl	80143be <VL53L0X_ClearInterruptMask>
  Module_Status result = H08R6_OK;
 800bb6a:	2300      	movs	r3, #0
 800bb6c:	e7ea      	b.n	800bb44 <Stop_ToF+0x48>
    result = H08R6_ERR_Timeout;
 800bb6e:	2304      	movs	r3, #4
 800bb70:	e7e8      	b.n	800bb44 <Stop_ToF+0x48>
 800bb72:	46c0      	nop			; (mov r8, r8)
 800bb74:	20006684 	.word	0x20006684
 800bb78:	20001160 	.word	0x20001160
 800bb7c:	200064b4 	.word	0x200064b4

0800bb80 <Vl53l0xStopCommand>:
{
 800bb80:	b510      	push	{r4, lr}
 800bb82:	1e04      	subs	r4, r0, #0
  configASSERT( pcWriteBuffer );
 800bb84:	d00a      	beq.n	800bb9c <Vl53l0xStopCommand+0x1c>
  result = Stop_ToF();
 800bb86:	f7ff ffb9 	bl	800bafc <Stop_ToF>
  if (H08R6_OK == result)
 800bb8a:	2800      	cmp	r0, #0
 800bb8c:	d108      	bne.n	800bba0 <Vl53l0xStopCommand+0x20>
    strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK);
 800bb8e:	2220      	movs	r2, #32
 800bb90:	4906      	ldr	r1, [pc, #24]	; (800bbac <Vl53l0xStopCommand+0x2c>)
 800bb92:	0020      	movs	r0, r4
 800bb94:	f00a fcce 	bl	8016534 <memcpy>
}
 800bb98:	2000      	movs	r0, #0
 800bb9a:	bd10      	pop	{r4, pc}
  configASSERT( pcWriteBuffer );
 800bb9c:	b672      	cpsid	i
 800bb9e:	e7fe      	b.n	800bb9e <Vl53l0xStopCommand+0x1e>
    strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageError);
 800bba0:	222d      	movs	r2, #45	; 0x2d
 800bba2:	4903      	ldr	r1, [pc, #12]	; (800bbb0 <Vl53l0xStopCommand+0x30>)
 800bba4:	0020      	movs	r0, r4
 800bba6:	f00a fcc5 	bl	8016534 <memcpy>
 800bbaa:	e7f5      	b.n	800bb98 <Vl53l0xStopCommand+0x18>
 800bbac:	0801c660 	.word	0x0801c660
 800bbb0:	0801c680 	.word	0x0801c680

0800bbb4 <SetRangeUnit>:
  switch(input)
 800bbb4:	2802      	cmp	r0, #2
 800bbb6:	d803      	bhi.n	800bbc0 <SetRangeUnit+0xc>
      h08r6UnitMeasurement = input;
 800bbb8:	4b02      	ldr	r3, [pc, #8]	; (800bbc4 <SetRangeUnit+0x10>)
 800bbba:	7018      	strb	r0, [r3, #0]
  Module_Status result = H08R6_OK;
 800bbbc:	2000      	movs	r0, #0
}
 800bbbe:	4770      	bx	lr
      result = H08R6_ERROR;
 800bbc0:	20ff      	movs	r0, #255	; 0xff
 800bbc2:	e7fc      	b.n	800bbbe <SetRangeUnit+0xa>
 800bbc4:	20001154 	.word	0x20001154

0800bbc8 <Module_MessagingTask>:
{
 800bbc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bbca:	46ce      	mov	lr, r9
 800bbcc:	4647      	mov	r7, r8
 800bbce:	b580      	push	{r7, lr}
 800bbd0:	b083      	sub	sp, #12
 800bbd2:	000c      	movs	r4, r1
 800bbd4:	001d      	movs	r5, r3
 800bbd6:	ab0a      	add	r3, sp, #40	; 0x28
 800bbd8:	781a      	ldrb	r2, [r3, #0]
  switch (code)
 800bbda:	3891      	subs	r0, #145	; 0x91
 800bbdc:	38ff      	subs	r0, #255	; 0xff
 800bbde:	b283      	uxth	r3, r0
 800bbe0:	2b06      	cmp	r3, #6
 800bbe2:	d803      	bhi.n	800bbec <Module_MessagingTask+0x24>
 800bbe4:	0098      	lsls	r0, r3, #2
 800bbe6:	4b3d      	ldr	r3, [pc, #244]	; (800bcdc <Module_MessagingTask+0x114>)
 800bbe8:	581b      	ldr	r3, [r3, r0]
 800bbea:	469f      	mov	pc, r3
  Module_Status result = H08R6_OK;
 800bbec:	2001      	movs	r0, #1
 800bbee:	e070      	b.n	800bcd2 <Module_MessagingTask+0x10a>
      Sample_ToF();
 800bbf0:	f7ff fd2a 	bl	800b648 <Sample_ToF>
	  SendMeasurementResult(REQ_SAMPLE_ARR, h08r6_range, dst, port, NULL);
 800bbf4:	4b3a      	ldr	r3, [pc, #232]	; (800bce0 <Module_MessagingTask+0x118>)
 800bbf6:	6819      	ldr	r1, [r3, #0]
 800bbf8:	2300      	movs	r3, #0
 800bbfa:	9300      	str	r3, [sp, #0]
 800bbfc:	0023      	movs	r3, r4
 800bbfe:	002a      	movs	r2, r5
 800bc00:	2004      	movs	r0, #4
 800bc02:	f7fe ffc3 	bl	800ab8c <SendMeasurementResult>
  Module_Status result = H08R6_OK;
 800bc06:	2000      	movs	r0, #0
      break;
 800bc08:	e063      	b.n	800bcd2 <Module_MessagingTask+0x10a>
      period = ( (uint32_t) cMessage[port-1][3+shift] << 24 ) + ( (uint32_t) cMessage[port-1][2+shift] << 16 ) + ( (uint32_t) cMessage[port-1][1+shift] << 8 ) + cMessage[port-1][shift];
 800bc0a:	1e4b      	subs	r3, r1, #1
 800bc0c:	469c      	mov	ip, r3
	  timeout = ( (uint32_t) cMessage[port-1][7+shift] << 24 ) + ( (uint32_t) cMessage[port-1][6+shift] << 16 ) + ( (uint32_t) cMessage[port-1][5+shift] << 8 ) + cMessage[port-1][4+shift];
 800bc0e:	4b35      	ldr	r3, [pc, #212]	; (800bce4 <Module_MessagingTask+0x11c>)
 800bc10:	4699      	mov	r9, r3
 800bc12:	4663      	mov	r3, ip
 800bc14:	00db      	lsls	r3, r3, #3
 800bc16:	4661      	mov	r1, ip
 800bc18:	1a5f      	subs	r7, r3, r1
 800bc1a:	00ff      	lsls	r7, r7, #3
 800bc1c:	444f      	add	r7, r9
 800bc1e:	18b8      	adds	r0, r7, r2
 800bc20:	79c1      	ldrb	r1, [r0, #7]
 800bc22:	0609      	lsls	r1, r1, #24
 800bc24:	7986      	ldrb	r6, [r0, #6]
 800bc26:	0436      	lsls	r6, r6, #16
 800bc28:	46b0      	mov	r8, r6
 800bc2a:	4441      	add	r1, r8
 800bc2c:	7906      	ldrb	r6, [r0, #4]
 800bc2e:	46b0      	mov	r8, r6
 800bc30:	4441      	add	r1, r8
 800bc32:	7946      	ldrb	r6, [r0, #5]
 800bc34:	0236      	lsls	r6, r6, #8
 800bc36:	46b0      	mov	r8, r6
 800bc38:	4441      	add	r1, r8
      period = ( (uint32_t) cMessage[port-1][3+shift] << 24 ) + ( (uint32_t) cMessage[port-1][2+shift] << 16 ) + ( (uint32_t) cMessage[port-1][1+shift] << 8 ) + cMessage[port-1][shift];
 800bc3a:	78c6      	ldrb	r6, [r0, #3]
 800bc3c:	0636      	lsls	r6, r6, #24
 800bc3e:	46b0      	mov	r8, r6
 800bc40:	7880      	ldrb	r0, [r0, #2]
 800bc42:	0400      	lsls	r0, r0, #16
 800bc44:	4440      	add	r0, r8
 800bc46:	5cbf      	ldrb	r7, [r7, r2]
 800bc48:	19c0      	adds	r0, r0, r7
 800bc4a:	4666      	mov	r6, ip
 800bc4c:	1b9b      	subs	r3, r3, r6
 800bc4e:	00db      	lsls	r3, r3, #3
 800bc50:	444b      	add	r3, r9
 800bc52:	189a      	adds	r2, r3, r2
 800bc54:	7853      	ldrb	r3, [r2, #1]
 800bc56:	021b      	lsls	r3, r3, #8
 800bc58:	18c0      	adds	r0, r0, r3
      Stream_ToF_Port(period, timeout,port,dst, false);
 800bc5a:	2300      	movs	r3, #0
 800bc5c:	9300      	str	r3, [sp, #0]
 800bc5e:	002b      	movs	r3, r5
 800bc60:	0022      	movs	r2, r4
 800bc62:	f7ff fdb1 	bl	800b7c8 <Stream_ToF_Port>
  Module_Status result = H08R6_OK;
 800bc66:	2000      	movs	r0, #0
      break;
 800bc68:	e033      	b.n	800bcd2 <Module_MessagingTask+0x10a>
     period = ( (uint32_t) cMessage[port-1][3+shift] << 24 ) + ( (uint32_t) cMessage[port-1][2+shift] << 16 ) + ( (uint32_t) cMessage[port-1][1+shift] << 8 ) + cMessage[port-1][shift];
 800bc6a:	3c01      	subs	r4, #1
	 timeout = ( (uint32_t) cMessage[port-1][7+shift] << 24 ) + ( (uint32_t) cMessage[port-1][6+shift] << 16 ) + ( (uint32_t) cMessage[port-1][5+shift] << 8 ) + cMessage[port-1][4+shift];
 800bc6c:	4b1d      	ldr	r3, [pc, #116]	; (800bce4 <Module_MessagingTask+0x11c>)
 800bc6e:	00e5      	lsls	r5, r4, #3
 800bc70:	1b2e      	subs	r6, r5, r4
 800bc72:	00f6      	lsls	r6, r6, #3
 800bc74:	199e      	adds	r6, r3, r6
 800bc76:	18b7      	adds	r7, r6, r2
 800bc78:	79f9      	ldrb	r1, [r7, #7]
 800bc7a:	0609      	lsls	r1, r1, #24
 800bc7c:	79b8      	ldrb	r0, [r7, #6]
 800bc7e:	0400      	lsls	r0, r0, #16
 800bc80:	1809      	adds	r1, r1, r0
 800bc82:	7938      	ldrb	r0, [r7, #4]
 800bc84:	1809      	adds	r1, r1, r0
 800bc86:	7978      	ldrb	r0, [r7, #5]
 800bc88:	0200      	lsls	r0, r0, #8
 800bc8a:	1809      	adds	r1, r1, r0
     period = ( (uint32_t) cMessage[port-1][3+shift] << 24 ) + ( (uint32_t) cMessage[port-1][2+shift] << 16 ) + ( (uint32_t) cMessage[port-1][1+shift] << 8 ) + cMessage[port-1][shift];
 800bc8c:	78f8      	ldrb	r0, [r7, #3]
 800bc8e:	0600      	lsls	r0, r0, #24
 800bc90:	78bf      	ldrb	r7, [r7, #2]
 800bc92:	043f      	lsls	r7, r7, #16
 800bc94:	19c0      	adds	r0, r0, r7
 800bc96:	5cb6      	ldrb	r6, [r6, r2]
 800bc98:	1980      	adds	r0, r0, r6
 800bc9a:	1b2c      	subs	r4, r5, r4
 800bc9c:	00e4      	lsls	r4, r4, #3
 800bc9e:	191c      	adds	r4, r3, r4
 800bca0:	18a2      	adds	r2, r4, r2
 800bca2:	7853      	ldrb	r3, [r2, #1]
 800bca4:	021b      	lsls	r3, r3, #8
 800bca6:	18c0      	adds	r0, r0, r3
      Stream_ToF_Memory(period, timeout, &h08r6_range);
 800bca8:	4a0d      	ldr	r2, [pc, #52]	; (800bce0 <Module_MessagingTask+0x118>)
 800bcaa:	f7ff fe0f 	bl	800b8cc <Stream_ToF_Memory>
  Module_Status result = H08R6_OK;
 800bcae:	2000      	movs	r0, #0
      break;
 800bcb0:	e00f      	b.n	800bcd2 <Module_MessagingTask+0x10a>
      Stop_ToF();
 800bcb2:	f7ff ff23 	bl	800bafc <Stop_ToF>
  Module_Status result = H08R6_OK;
 800bcb6:	2000      	movs	r0, #0
      break;
 800bcb8:	e00b      	b.n	800bcd2 <Module_MessagingTask+0x10a>
      SetRangeUnit(cMessage[port-1][shift]);
 800bcba:	3c01      	subs	r4, #1
 800bcbc:	00e1      	lsls	r1, r4, #3
 800bcbe:	1b0c      	subs	r4, r1, r4
 800bcc0:	00e4      	lsls	r4, r4, #3
 800bcc2:	4b08      	ldr	r3, [pc, #32]	; (800bce4 <Module_MessagingTask+0x11c>)
 800bcc4:	191c      	adds	r4, r3, r4
 800bcc6:	5ca0      	ldrb	r0, [r4, r2]
 800bcc8:	f7ff ff74 	bl	800bbb4 <SetRangeUnit>
  Module_Status result = H08R6_OK;
 800bccc:	2000      	movs	r0, #0
      break;
 800bcce:	e000      	b.n	800bcd2 <Module_MessagingTask+0x10a>
  Module_Status result = H08R6_OK;
 800bcd0:	2000      	movs	r0, #0
}
 800bcd2:	b003      	add	sp, #12
 800bcd4:	bcc0      	pop	{r6, r7}
 800bcd6:	46b9      	mov	r9, r7
 800bcd8:	46b0      	mov	r8, r6
 800bcda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bcdc:	0801c6b0 	.word	0x0801c6b0
 800bce0:	20001158 	.word	0x20001158
 800bce4:	200007d8 	.word	0x200007d8

0800bce8 <DMA_MSG_RX_CH_Init>:
/*-----------------------------------------------------------*/

/* Initialize a messaging RX DMA channel 
*/
void DMA_MSG_RX_CH_Init(DMA_HandleTypeDef *hDMA, DMA_Channel_TypeDef *ch)
{
 800bce8:	b510      	push	{r4, lr}
	hDMA->Instance = ch;
 800bcea:	6001      	str	r1, [r0, #0]
	hDMA->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800bcec:	2300      	movs	r3, #0
 800bcee:	6043      	str	r3, [r0, #4]
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800bcf0:	6083      	str	r3, [r0, #8]
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 800bcf2:	2280      	movs	r2, #128	; 0x80
 800bcf4:	60c2      	str	r2, [r0, #12]
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800bcf6:	6103      	str	r3, [r0, #16]
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800bcf8:	6143      	str	r3, [r0, #20]
	hDMA->Init.Mode = DMA_CIRCULAR; 
 800bcfa:	3320      	adds	r3, #32
 800bcfc:	6183      	str	r3, [r0, #24]
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800bcfe:	2380      	movs	r3, #128	; 0x80
 800bd00:	019b      	lsls	r3, r3, #6
 800bd02:	61c3      	str	r3, [r0, #28]
	
	HAL_DMA_Init(hDMA);		
 800bd04:	f004 fb5c 	bl	80103c0 <HAL_DMA_Init>
}
 800bd08:	bd10      	pop	{r4, pc}

0800bd0a <DMA_MSG_TX_CH_Init>:
/*-----------------------------------------------------------*/

/* Initialize a messaging TX DMA channel 
*/
void DMA_MSG_TX_CH_Init(DMA_HandleTypeDef *hDMA, DMA_Channel_TypeDef *ch)
{
 800bd0a:	b510      	push	{r4, lr}
	hDMA->Instance = ch;
 800bd0c:	6001      	str	r1, [r0, #0]
	hDMA->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800bd0e:	2310      	movs	r3, #16
 800bd10:	6043      	str	r3, [r0, #4]
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800bd12:	2300      	movs	r3, #0
 800bd14:	6083      	str	r3, [r0, #8]
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 800bd16:	2280      	movs	r2, #128	; 0x80
 800bd18:	60c2      	str	r2, [r0, #12]
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800bd1a:	6103      	str	r3, [r0, #16]
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800bd1c:	6143      	str	r3, [r0, #20]
	hDMA->Init.Mode = DMA_NORMAL; 
 800bd1e:	6183      	str	r3, [r0, #24]
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800bd20:	2380      	movs	r3, #128	; 0x80
 800bd22:	019b      	lsls	r3, r3, #6
 800bd24:	61c3      	str	r3, [r0, #28]
	
	HAL_DMA_Init(hDMA);		
 800bd26:	f004 fb4b 	bl	80103c0 <HAL_DMA_Init>
}
 800bd2a:	bd10      	pop	{r4, pc}

0800bd2c <DMA_Init>:
{
 800bd2c:	b510      	push	{r4, lr}
 800bd2e:	b082      	sub	sp, #8
	__DMA1_CLK_ENABLE();
 800bd30:	4b1d      	ldr	r3, [pc, #116]	; (800bda8 <DMA_Init+0x7c>)
 800bd32:	6959      	ldr	r1, [r3, #20]
 800bd34:	2201      	movs	r2, #1
 800bd36:	4311      	orrs	r1, r2
 800bd38:	6159      	str	r1, [r3, #20]
 800bd3a:	6959      	ldr	r1, [r3, #20]
 800bd3c:	400a      	ands	r2, r1
 800bd3e:	9200      	str	r2, [sp, #0]
 800bd40:	9a00      	ldr	r2, [sp, #0]
	__DMA2_CLK_ENABLE();
 800bd42:	6959      	ldr	r1, [r3, #20]
 800bd44:	2202      	movs	r2, #2
 800bd46:	4311      	orrs	r1, r2
 800bd48:	6159      	str	r1, [r3, #20]
 800bd4a:	695b      	ldr	r3, [r3, #20]
 800bd4c:	401a      	ands	r2, r3
 800bd4e:	9201      	str	r2, [sp, #4]
 800bd50:	9b01      	ldr	r3, [sp, #4]
	DMA_MSG_RX_CH_Init(&msgRxDMA[0], DMA1_Channel1);
 800bd52:	4c16      	ldr	r4, [pc, #88]	; (800bdac <DMA_Init+0x80>)
 800bd54:	4916      	ldr	r1, [pc, #88]	; (800bdb0 <DMA_Init+0x84>)
 800bd56:	0020      	movs	r0, r4
 800bd58:	f7ff ffc6 	bl	800bce8 <DMA_MSG_RX_CH_Init>
	DMA_MSG_RX_CH_Init(&msgRxDMA[1], DMA1_Channel3);
 800bd5c:	0020      	movs	r0, r4
 800bd5e:	3038      	adds	r0, #56	; 0x38
 800bd60:	4914      	ldr	r1, [pc, #80]	; (800bdb4 <DMA_Init+0x88>)
 800bd62:	f7ff ffc1 	bl	800bce8 <DMA_MSG_RX_CH_Init>
	DMA_MSG_RX_CH_Init(&msgRxDMA[2], DMA1_Channel5);
 800bd66:	0020      	movs	r0, r4
 800bd68:	3070      	adds	r0, #112	; 0x70
 800bd6a:	4913      	ldr	r1, [pc, #76]	; (800bdb8 <DMA_Init+0x8c>)
 800bd6c:	f7ff ffbc 	bl	800bce8 <DMA_MSG_RX_CH_Init>
	DMA_MSG_RX_CH_Init(&msgRxDMA[3], DMA1_Channel6);
 800bd70:	0020      	movs	r0, r4
 800bd72:	30a8      	adds	r0, #168	; 0xa8
 800bd74:	4911      	ldr	r1, [pc, #68]	; (800bdbc <DMA_Init+0x90>)
 800bd76:	f7ff ffb7 	bl	800bce8 <DMA_MSG_RX_CH_Init>
	DMA_MSG_RX_CH_Init(&msgRxDMA[4], DMA2_Channel2);
 800bd7a:	0020      	movs	r0, r4
 800bd7c:	30e0      	adds	r0, #224	; 0xe0
 800bd7e:	4910      	ldr	r1, [pc, #64]	; (800bdc0 <DMA_Init+0x94>)
 800bd80:	f7ff ffb2 	bl	800bce8 <DMA_MSG_RX_CH_Init>
	DMA_MSG_TX_CH_Init(&msgTxDMA[0], DMA1_Channel2);
 800bd84:	4c0f      	ldr	r4, [pc, #60]	; (800bdc4 <DMA_Init+0x98>)
 800bd86:	4910      	ldr	r1, [pc, #64]	; (800bdc8 <DMA_Init+0x9c>)
 800bd88:	0020      	movs	r0, r4
 800bd8a:	f7ff ffbe 	bl	800bd0a <DMA_MSG_TX_CH_Init>
	DMA_MSG_TX_CH_Init(&msgTxDMA[1], DMA1_Channel4);
 800bd8e:	0020      	movs	r0, r4
 800bd90:	3038      	adds	r0, #56	; 0x38
 800bd92:	490e      	ldr	r1, [pc, #56]	; (800bdcc <DMA_Init+0xa0>)
 800bd94:	f7ff ffb9 	bl	800bd0a <DMA_MSG_TX_CH_Init>
	DMA_MSG_TX_CH_Init(&msgTxDMA[2], DMA1_Channel7);	
 800bd98:	0020      	movs	r0, r4
 800bd9a:	3070      	adds	r0, #112	; 0x70
 800bd9c:	490c      	ldr	r1, [pc, #48]	; (800bdd0 <DMA_Init+0xa4>)
 800bd9e:	f7ff ffb4 	bl	800bd0a <DMA_MSG_TX_CH_Init>
}
 800bda2:	b002      	add	sp, #8
 800bda4:	bd10      	pop	{r4, pc}
 800bda6:	46c0      	nop			; (mov r8, r8)
 800bda8:	40021000 	.word	0x40021000
 800bdac:	2000116c 	.word	0x2000116c
 800bdb0:	40020008 	.word	0x40020008
 800bdb4:	40020030 	.word	0x40020030
 800bdb8:	40020058 	.word	0x40020058
 800bdbc:	4002006c 	.word	0x4002006c
 800bdc0:	4002041c 	.word	0x4002041c
 800bdc4:	200012bc 	.word	0x200012bc
 800bdc8:	4002001c 	.word	0x4002001c
 800bdcc:	40020044 	.word	0x40020044
 800bdd0:	40020080 	.word	0x40020080

0800bdd4 <DMA_STREAM_CH_Init>:
/*-----------------------------------------------------------*/

/* Initialize a streaming DMA channel (RX only) 
*/
void DMA_STREAM_CH_Init(DMA_HandleTypeDef *hDMA, DMA_Channel_TypeDef *ch)
{
 800bdd4:	b510      	push	{r4, lr}
	hDMA->Instance = ch;
 800bdd6:	6001      	str	r1, [r0, #0]
	hDMA->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800bdd8:	2300      	movs	r3, #0
 800bdda:	6043      	str	r3, [r0, #4]
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800bddc:	6083      	str	r3, [r0, #8]
	hDMA->Init.MemInc = DMA_MINC_DISABLE;
 800bdde:	60c3      	str	r3, [r0, #12]
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800bde0:	6103      	str	r3, [r0, #16]
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800bde2:	6143      	str	r3, [r0, #20]
	hDMA->Init.Mode = DMA_CIRCULAR; 
 800bde4:	3320      	adds	r3, #32
 800bde6:	6183      	str	r3, [r0, #24]
	hDMA->Init.Priority = STREAM_DMA_PRIORITY;
 800bde8:	2380      	movs	r3, #128	; 0x80
 800bdea:	015b      	lsls	r3, r3, #5
 800bdec:	61c3      	str	r3, [r0, #28]
	
	HAL_DMA_Init(hDMA);		
 800bdee:	f004 fae7 	bl	80103c0 <HAL_DMA_Init>
}
 800bdf2:	bd10      	pop	{r4, pc}

0800bdf4 <SetupDMAInterrupts>:
/*-----------------------------------------------------------*/

/* Setup DMA interrupts  
*/
void SetupDMAInterrupts(DMA_HandleTypeDef *hDMA, uint8_t priority)
{
 800bdf4:	b510      	push	{r4, lr}
	switch ((uint32_t)hDMA->Instance)
 800bdf6:	6803      	ldr	r3, [r0, #0]
 800bdf8:	4821      	ldr	r0, [pc, #132]	; (800be80 <SetupDMAInterrupts+0x8c>)
 800bdfa:	4283      	cmp	r3, r0
 800bdfc:	d037      	beq.n	800be6e <SetupDMAInterrupts+0x7a>
 800bdfe:	d90e      	bls.n	800be1e <SetupDMAInterrupts+0x2a>
 800be00:	4820      	ldr	r0, [pc, #128]	; (800be84 <SetupDMAInterrupts+0x90>)
 800be02:	4283      	cmp	r3, r0
 800be04:	d033      	beq.n	800be6e <SetupDMAInterrupts+0x7a>
 800be06:	d919      	bls.n	800be3c <SetupDMAInterrupts+0x48>
 800be08:	481f      	ldr	r0, [pc, #124]	; (800be88 <SetupDMAInterrupts+0x94>)
 800be0a:	4283      	cmp	r3, r0
 800be0c:	d024      	beq.n	800be58 <SetupDMAInterrupts+0x64>
 800be0e:	d92b      	bls.n	800be68 <SetupDMAInterrupts+0x74>
 800be10:	4a1e      	ldr	r2, [pc, #120]	; (800be8c <SetupDMAInterrupts+0x98>)
 800be12:	4293      	cmp	r3, r2
 800be14:	d020      	beq.n	800be58 <SetupDMAInterrupts+0x64>
 800be16:	4a1e      	ldr	r2, [pc, #120]	; (800be90 <SetupDMAInterrupts+0x9c>)
 800be18:	4293      	cmp	r3, r2
 800be1a:	d01d      	beq.n	800be58 <SetupDMAInterrupts+0x64>
 800be1c:	e00d      	b.n	800be3a <SetupDMAInterrupts+0x46>
 800be1e:	4a1d      	ldr	r2, [pc, #116]	; (800be94 <SetupDMAInterrupts+0xa0>)
 800be20:	4293      	cmp	r3, r2
 800be22:	d107      	bne.n	800be34 <SetupDMAInterrupts+0x40>
	{
		case (uint32_t)DMA1_Channel1:
			HAL_NVIC_SetPriority(DMA1_Ch1_IRQn, priority, 0);
 800be24:	2200      	movs	r2, #0
 800be26:	2009      	movs	r0, #9
 800be28:	f004 f924 	bl	8010074 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(DMA1_Ch1_IRQn);	
 800be2c:	2009      	movs	r0, #9
 800be2e:	f004 f953 	bl	80100d8 <HAL_NVIC_EnableIRQ>
			break;
 800be32:	e002      	b.n	800be3a <SetupDMAInterrupts+0x46>
	switch ((uint32_t)hDMA->Instance)
 800be34:	4a18      	ldr	r2, [pc, #96]	; (800be98 <SetupDMAInterrupts+0xa4>)
 800be36:	4293      	cmp	r3, r2
 800be38:	d019      	beq.n	800be6e <SetupDMAInterrupts+0x7a>
			break;
		
		default:
			break;
	}			
}
 800be3a:	bd10      	pop	{r4, pc}
	switch ((uint32_t)hDMA->Instance)
 800be3c:	4817      	ldr	r0, [pc, #92]	; (800be9c <SetupDMAInterrupts+0xa8>)
 800be3e:	4283      	cmp	r3, r0
 800be40:	d00a      	beq.n	800be58 <SetupDMAInterrupts+0x64>
 800be42:	d903      	bls.n	800be4c <SetupDMAInterrupts+0x58>
 800be44:	4a16      	ldr	r2, [pc, #88]	; (800bea0 <SetupDMAInterrupts+0xac>)
 800be46:	4293      	cmp	r3, r2
 800be48:	d006      	beq.n	800be58 <SetupDMAInterrupts+0x64>
 800be4a:	e7f6      	b.n	800be3a <SetupDMAInterrupts+0x46>
 800be4c:	4a15      	ldr	r2, [pc, #84]	; (800bea4 <SetupDMAInterrupts+0xb0>)
 800be4e:	4293      	cmp	r3, r2
 800be50:	d002      	beq.n	800be58 <SetupDMAInterrupts+0x64>
 800be52:	4a15      	ldr	r2, [pc, #84]	; (800bea8 <SetupDMAInterrupts+0xb4>)
 800be54:	4293      	cmp	r3, r2
 800be56:	d1f0      	bne.n	800be3a <SetupDMAInterrupts+0x46>
			HAL_NVIC_SetPriority(DMA1_Ch4_7_DMA2_Ch3_5_IRQn, priority, 0);
 800be58:	2200      	movs	r2, #0
 800be5a:	200b      	movs	r0, #11
 800be5c:	f004 f90a 	bl	8010074 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(DMA1_Ch4_7_DMA2_Ch3_5_IRQn);			
 800be60:	200b      	movs	r0, #11
 800be62:	f004 f939 	bl	80100d8 <HAL_NVIC_EnableIRQ>
}
 800be66:	e7e8      	b.n	800be3a <SetupDMAInterrupts+0x46>
	switch ((uint32_t)hDMA->Instance)
 800be68:	4a10      	ldr	r2, [pc, #64]	; (800beac <SetupDMAInterrupts+0xb8>)
 800be6a:	4293      	cmp	r3, r2
 800be6c:	d1e5      	bne.n	800be3a <SetupDMAInterrupts+0x46>
			HAL_NVIC_SetPriority(DMA1_Ch2_3_DMA2_Ch1_2_IRQn, priority, 0);
 800be6e:	2200      	movs	r2, #0
 800be70:	200a      	movs	r0, #10
 800be72:	f004 f8ff 	bl	8010074 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(DMA1_Ch2_3_DMA2_Ch1_2_IRQn);				
 800be76:	200a      	movs	r0, #10
 800be78:	f004 f92e 	bl	80100d8 <HAL_NVIC_EnableIRQ>
			break;
 800be7c:	e7dd      	b.n	800be3a <SetupDMAInterrupts+0x46>
 800be7e:	46c0      	nop			; (mov r8, r8)
 800be80:	40020030 	.word	0x40020030
 800be84:	40020408 	.word	0x40020408
 800be88:	40020430 	.word	0x40020430
 800be8c:	40020444 	.word	0x40020444
 800be90:	40020458 	.word	0x40020458
 800be94:	40020008 	.word	0x40020008
 800be98:	4002001c 	.word	0x4002001c
 800be9c:	4002006c 	.word	0x4002006c
 800bea0:	40020080 	.word	0x40020080
 800bea4:	40020044 	.word	0x40020044
 800bea8:	40020058 	.word	0x40020058
 800beac:	4002041c 	.word	0x4002041c

0800beb0 <UnSetupDMAInterrupts>:
/*-----------------------------------------------------------*/

/* UnSetup DMA interrupts  
*/
void UnSetupDMAInterrupts(DMA_HandleTypeDef *hDMA)
{
 800beb0:	b510      	push	{r4, lr}
	switch ((uint32_t)hDMA->Instance)
 800beb2:	6803      	ldr	r3, [r0, #0]
 800beb4:	491b      	ldr	r1, [pc, #108]	; (800bf24 <UnSetupDMAInterrupts+0x74>)
 800beb6:	428b      	cmp	r3, r1
 800beb8:	d02f      	beq.n	800bf1a <UnSetupDMAInterrupts+0x6a>
 800beba:	d90e      	bls.n	800beda <UnSetupDMAInterrupts+0x2a>
 800bebc:	491a      	ldr	r1, [pc, #104]	; (800bf28 <UnSetupDMAInterrupts+0x78>)
 800bebe:	428b      	cmp	r3, r1
 800bec0:	d02b      	beq.n	800bf1a <UnSetupDMAInterrupts+0x6a>
 800bec2:	d915      	bls.n	800bef0 <UnSetupDMAInterrupts+0x40>
 800bec4:	4919      	ldr	r1, [pc, #100]	; (800bf2c <UnSetupDMAInterrupts+0x7c>)
 800bec6:	428b      	cmp	r3, r1
 800bec8:	d020      	beq.n	800bf0c <UnSetupDMAInterrupts+0x5c>
 800beca:	d923      	bls.n	800bf14 <UnSetupDMAInterrupts+0x64>
 800becc:	4a18      	ldr	r2, [pc, #96]	; (800bf30 <UnSetupDMAInterrupts+0x80>)
 800bece:	4293      	cmp	r3, r2
 800bed0:	d01c      	beq.n	800bf0c <UnSetupDMAInterrupts+0x5c>
 800bed2:	4a18      	ldr	r2, [pc, #96]	; (800bf34 <UnSetupDMAInterrupts+0x84>)
 800bed4:	4293      	cmp	r3, r2
 800bed6:	d019      	beq.n	800bf0c <UnSetupDMAInterrupts+0x5c>
 800bed8:	e009      	b.n	800beee <UnSetupDMAInterrupts+0x3e>
 800beda:	4a17      	ldr	r2, [pc, #92]	; (800bf38 <UnSetupDMAInterrupts+0x88>)
 800bedc:	4293      	cmp	r3, r2
 800bede:	d103      	bne.n	800bee8 <UnSetupDMAInterrupts+0x38>
	{
		case (uint32_t)DMA1_Channel1:
			HAL_NVIC_DisableIRQ(DMA1_Ch1_IRQn);	
 800bee0:	2009      	movs	r0, #9
 800bee2:	f004 f903 	bl	80100ec <HAL_NVIC_DisableIRQ>
			break;
 800bee6:	e002      	b.n	800beee <UnSetupDMAInterrupts+0x3e>
	switch ((uint32_t)hDMA->Instance)
 800bee8:	4a14      	ldr	r2, [pc, #80]	; (800bf3c <UnSetupDMAInterrupts+0x8c>)
 800beea:	4293      	cmp	r3, r2
 800beec:	d015      	beq.n	800bf1a <UnSetupDMAInterrupts+0x6a>
			break;
		
		default:
			break;
	}			
}
 800beee:	bd10      	pop	{r4, pc}
	switch ((uint32_t)hDMA->Instance)
 800bef0:	4913      	ldr	r1, [pc, #76]	; (800bf40 <UnSetupDMAInterrupts+0x90>)
 800bef2:	428b      	cmp	r3, r1
 800bef4:	d00a      	beq.n	800bf0c <UnSetupDMAInterrupts+0x5c>
 800bef6:	d903      	bls.n	800bf00 <UnSetupDMAInterrupts+0x50>
 800bef8:	4a12      	ldr	r2, [pc, #72]	; (800bf44 <UnSetupDMAInterrupts+0x94>)
 800befa:	4293      	cmp	r3, r2
 800befc:	d006      	beq.n	800bf0c <UnSetupDMAInterrupts+0x5c>
 800befe:	e7f6      	b.n	800beee <UnSetupDMAInterrupts+0x3e>
 800bf00:	4a11      	ldr	r2, [pc, #68]	; (800bf48 <UnSetupDMAInterrupts+0x98>)
 800bf02:	4293      	cmp	r3, r2
 800bf04:	d002      	beq.n	800bf0c <UnSetupDMAInterrupts+0x5c>
 800bf06:	4a11      	ldr	r2, [pc, #68]	; (800bf4c <UnSetupDMAInterrupts+0x9c>)
 800bf08:	4293      	cmp	r3, r2
 800bf0a:	d1f0      	bne.n	800beee <UnSetupDMAInterrupts+0x3e>
			HAL_NVIC_DisableIRQ(DMA1_Ch4_7_DMA2_Ch3_5_IRQn);			
 800bf0c:	200b      	movs	r0, #11
 800bf0e:	f004 f8ed 	bl	80100ec <HAL_NVIC_DisableIRQ>
}
 800bf12:	e7ec      	b.n	800beee <UnSetupDMAInterrupts+0x3e>
	switch ((uint32_t)hDMA->Instance)
 800bf14:	4a0e      	ldr	r2, [pc, #56]	; (800bf50 <UnSetupDMAInterrupts+0xa0>)
 800bf16:	4293      	cmp	r3, r2
 800bf18:	d1e9      	bne.n	800beee <UnSetupDMAInterrupts+0x3e>
			HAL_NVIC_DisableIRQ(DMA1_Ch2_3_DMA2_Ch1_2_IRQn);				
 800bf1a:	200a      	movs	r0, #10
 800bf1c:	f004 f8e6 	bl	80100ec <HAL_NVIC_DisableIRQ>
			break;
 800bf20:	e7e5      	b.n	800beee <UnSetupDMAInterrupts+0x3e>
 800bf22:	46c0      	nop			; (mov r8, r8)
 800bf24:	40020030 	.word	0x40020030
 800bf28:	40020408 	.word	0x40020408
 800bf2c:	40020430 	.word	0x40020430
 800bf30:	40020444 	.word	0x40020444
 800bf34:	40020458 	.word	0x40020458
 800bf38:	40020008 	.word	0x40020008
 800bf3c:	4002001c 	.word	0x4002001c
 800bf40:	4002006c 	.word	0x4002006c
 800bf44:	40020080 	.word	0x40020080
 800bf48:	40020044 	.word	0x40020044
 800bf4c:	40020058 	.word	0x40020058
 800bf50:	4002041c 	.word	0x4002041c

0800bf54 <DMA_MSG_TX_UnSetup>:
{	
 800bf54:	b510      	push	{r4, lr}
 800bf56:	0004      	movs	r4, r0
	UnSetupDMAInterrupts(huart->hdmatx);
 800bf58:	6e00      	ldr	r0, [r0, #96]	; 0x60
 800bf5a:	f7ff ffa9 	bl	800beb0 <UnSetupDMAInterrupts>
	huart->hdmatx->Parent = NULL;
 800bf5e:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800bf60:	2300      	movs	r3, #0
 800bf62:	6253      	str	r3, [r2, #36]	; 0x24
	huart->hdmatx = NULL;
 800bf64:	6623      	str	r3, [r4, #96]	; 0x60
}
 800bf66:	bd10      	pop	{r4, pc}

0800bf68 <RemapAndLinkDMAtoUARTRx>:
/*-----------------------------------------------------------*/

/* Remap and link the UART RX and DMA structs 
*/
void RemapAndLinkDMAtoUARTRx(UART_HandleTypeDef *huart, DMA_HandleTypeDef *hDMA)
{
 800bf68:	b570      	push	{r4, r5, r6, lr}
	// USART 1
	if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel1) {
 800bf6a:	6803      	ldr	r3, [r0, #0]
 800bf6c:	4ac3      	ldr	r2, [pc, #780]	; (800c27c <RemapAndLinkDMAtoUARTRx+0x314>)
 800bf6e:	4293      	cmp	r3, r2
 800bf70:	d03e      	beq.n	800bff0 <RemapAndLinkDMAtoUARTRx+0x88>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel2) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART1_RX);	
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART1_RX);	
	// USART 2	
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel1) {
 800bf72:	4ac3      	ldr	r2, [pc, #780]	; (800c280 <RemapAndLinkDMAtoUARTRx+0x318>)
 800bf74:	4293      	cmp	r3, r2
 800bf76:	d100      	bne.n	800bf7a <RemapAndLinkDMAtoUARTRx+0x12>
 800bf78:	e096      	b.n	800c0a8 <RemapAndLinkDMAtoUARTRx+0x140>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel2) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART2_RX);	
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART2_RX);	
	// USART 3	
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel1) {
 800bf7a:	4ac2      	ldr	r2, [pc, #776]	; (800c284 <RemapAndLinkDMAtoUARTRx+0x31c>)
 800bf7c:	4293      	cmp	r3, r2
 800bf7e:	d100      	bne.n	800bf82 <RemapAndLinkDMAtoUARTRx+0x1a>
 800bf80:	e0eb      	b.n	800c15a <RemapAndLinkDMAtoUARTRx+0x1f2>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel2) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART3_RX);	
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART3_RX);			
	// USART 4	
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel1) {
 800bf82:	4ac1      	ldr	r2, [pc, #772]	; (800c288 <RemapAndLinkDMAtoUARTRx+0x320>)
 800bf84:	4293      	cmp	r3, r2
 800bf86:	d100      	bne.n	800bf8a <RemapAndLinkDMAtoUARTRx+0x22>
 800bf88:	e141      	b.n	800c20e <RemapAndLinkDMAtoUARTRx+0x2a6>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel2) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART4_RX);	
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART4_RX);				
	// USART 5	
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel1) {
 800bf8a:	4ac0      	ldr	r2, [pc, #768]	; (800c28c <RemapAndLinkDMAtoUARTRx+0x324>)
 800bf8c:	4293      	cmp	r3, r2
 800bf8e:	d100      	bne.n	800bf92 <RemapAndLinkDMAtoUARTRx+0x2a>
 800bf90:	e1bd      	b.n	800c30e <RemapAndLinkDMAtoUARTRx+0x3a6>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel2) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART5_RX);	
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART5_RX);					
	// USART 6	
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel1) {
 800bf92:	4abf      	ldr	r2, [pc, #764]	; (800c290 <RemapAndLinkDMAtoUARTRx+0x328>)
 800bf94:	4293      	cmp	r3, r2
 800bf96:	d100      	bne.n	800bf9a <RemapAndLinkDMAtoUARTRx+0x32>
 800bf98:	e213      	b.n	800c3c2 <RemapAndLinkDMAtoUARTRx+0x45a>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel2) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART6_RX);	
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART6_RX);					
	// USART 7	
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel1) {
 800bf9a:	4abe      	ldr	r2, [pc, #760]	; (800c294 <RemapAndLinkDMAtoUARTRx+0x32c>)
 800bf9c:	4293      	cmp	r3, r2
 800bf9e:	d100      	bne.n	800bfa2 <RemapAndLinkDMAtoUARTRx+0x3a>
 800bfa0:	e269      	b.n	800c476 <RemapAndLinkDMAtoUARTRx+0x50e>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel2) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART7_RX);	
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART7_RX);				
	// USART 8	
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel1) {
 800bfa2:	4abd      	ldr	r2, [pc, #756]	; (800c298 <RemapAndLinkDMAtoUARTRx+0x330>)
 800bfa4:	4293      	cmp	r3, r2
 800bfa6:	d136      	bne.n	800c016 <RemapAndLinkDMAtoUARTRx+0xae>
 800bfa8:	680b      	ldr	r3, [r1, #0]
 800bfaa:	4abc      	ldr	r2, [pc, #752]	; (800c29c <RemapAndLinkDMAtoUARTRx+0x334>)
 800bfac:	4293      	cmp	r3, r2
 800bfae:	d100      	bne.n	800bfb2 <RemapAndLinkDMAtoUARTRx+0x4a>
 800bfb0:	e2bb      	b.n	800c52a <RemapAndLinkDMAtoUARTRx+0x5c2>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART8_RX);
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel3) {
 800bfb2:	4abb      	ldr	r2, [pc, #748]	; (800c2a0 <RemapAndLinkDMAtoUARTRx+0x338>)
 800bfb4:	4293      	cmp	r3, r2
 800bfb6:	d100      	bne.n	800bfba <RemapAndLinkDMAtoUARTRx+0x52>
 800bfb8:	e2c1      	b.n	800c53e <RemapAndLinkDMAtoUARTRx+0x5d6>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART8_RX);
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel5) {
 800bfba:	4aba      	ldr	r2, [pc, #744]	; (800c2a4 <RemapAndLinkDMAtoUARTRx+0x33c>)
 800bfbc:	4293      	cmp	r3, r2
 800bfbe:	d100      	bne.n	800bfc2 <RemapAndLinkDMAtoUARTRx+0x5a>
 800bfc0:	e2c9      	b.n	800c556 <RemapAndLinkDMAtoUARTRx+0x5ee>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART8_RX);		
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel6) {
 800bfc2:	4ab9      	ldr	r2, [pc, #740]	; (800c2a8 <RemapAndLinkDMAtoUARTRx+0x340>)
 800bfc4:	4293      	cmp	r3, r2
 800bfc6:	d100      	bne.n	800bfca <RemapAndLinkDMAtoUARTRx+0x62>
 800bfc8:	e2d1      	b.n	800c56e <RemapAndLinkDMAtoUARTRx+0x606>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART8_RX);	
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel2) {
 800bfca:	4ab8      	ldr	r2, [pc, #736]	; (800c2ac <RemapAndLinkDMAtoUARTRx+0x344>)
 800bfcc:	4293      	cmp	r3, r2
 800bfce:	d100      	bne.n	800bfd2 <RemapAndLinkDMAtoUARTRx+0x6a>
 800bfd0:	e2d9      	b.n	800c586 <RemapAndLinkDMAtoUARTRx+0x61e>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART8_RX);	
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel3) {
 800bfd2:	4ab7      	ldr	r2, [pc, #732]	; (800c2b0 <RemapAndLinkDMAtoUARTRx+0x348>)
 800bfd4:	4293      	cmp	r3, r2
 800bfd6:	d11e      	bne.n	800c016 <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART8_RX);					
 800bfd8:	4ab6      	ldr	r2, [pc, #728]	; (800c2b4 <RemapAndLinkDMAtoUARTRx+0x34c>)
 800bfda:	23a8      	movs	r3, #168	; 0xa8
 800bfdc:	58d4      	ldr	r4, [r2, r3]
 800bfde:	4db6      	ldr	r5, [pc, #728]	; (800c2b8 <RemapAndLinkDMAtoUARTRx+0x350>)
 800bfe0:	402c      	ands	r4, r5
 800bfe2:	50d4      	str	r4, [r2, r3]
 800bfe4:	58d5      	ldr	r5, [r2, r3]
 800bfe6:	24f0      	movs	r4, #240	; 0xf0
 800bfe8:	0124      	lsls	r4, r4, #4
 800bfea:	432c      	orrs	r4, r5
 800bfec:	50d4      	str	r4, [r2, r3]
 800bfee:	e012      	b.n	800c016 <RemapAndLinkDMAtoUARTRx+0xae>
	if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel1) {
 800bff0:	680b      	ldr	r3, [r1, #0]
 800bff2:	4aaa      	ldr	r2, [pc, #680]	; (800c29c <RemapAndLinkDMAtoUARTRx+0x334>)
 800bff4:	4293      	cmp	r3, r2
 800bff6:	d011      	beq.n	800c01c <RemapAndLinkDMAtoUARTRx+0xb4>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel3) {
 800bff8:	4aa9      	ldr	r2, [pc, #676]	; (800c2a0 <RemapAndLinkDMAtoUARTRx+0x338>)
 800bffa:	4293      	cmp	r3, r2
 800bffc:	d019      	beq.n	800c032 <RemapAndLinkDMAtoUARTRx+0xca>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel5) {
 800bffe:	4aa9      	ldr	r2, [pc, #676]	; (800c2a4 <RemapAndLinkDMAtoUARTRx+0x33c>)
 800c000:	4293      	cmp	r3, r2
 800c002:	d022      	beq.n	800c04a <RemapAndLinkDMAtoUARTRx+0xe2>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel6) {
 800c004:	4aa8      	ldr	r2, [pc, #672]	; (800c2a8 <RemapAndLinkDMAtoUARTRx+0x340>)
 800c006:	4293      	cmp	r3, r2
 800c008:	d02b      	beq.n	800c062 <RemapAndLinkDMAtoUARTRx+0xfa>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel2) {
 800c00a:	4aa8      	ldr	r2, [pc, #672]	; (800c2ac <RemapAndLinkDMAtoUARTRx+0x344>)
 800c00c:	4293      	cmp	r3, r2
 800c00e:	d034      	beq.n	800c07a <RemapAndLinkDMAtoUARTRx+0x112>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel3) {
 800c010:	4aa7      	ldr	r2, [pc, #668]	; (800c2b0 <RemapAndLinkDMAtoUARTRx+0x348>)
 800c012:	4293      	cmp	r3, r2
 800c014:	d03c      	beq.n	800c090 <RemapAndLinkDMAtoUARTRx+0x128>
	}		
	
	__HAL_LINKDMA(huart,hdmarx,*hDMA);	
 800c016:	6641      	str	r1, [r0, #100]	; 0x64
 800c018:	6248      	str	r0, [r1, #36]	; 0x24
}
 800c01a:	bd70      	pop	{r4, r5, r6, pc}
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART1_RX);
 800c01c:	4aa7      	ldr	r2, [pc, #668]	; (800c2bc <RemapAndLinkDMAtoUARTRx+0x354>)
 800c01e:	23a8      	movs	r3, #168	; 0xa8
 800c020:	58d4      	ldr	r4, [r2, r3]
 800c022:	250f      	movs	r5, #15
 800c024:	43ac      	bics	r4, r5
 800c026:	50d4      	str	r4, [r2, r3]
 800c028:	58d4      	ldr	r4, [r2, r3]
 800c02a:	3d07      	subs	r5, #7
 800c02c:	432c      	orrs	r4, r5
 800c02e:	50d4      	str	r4, [r2, r3]
 800c030:	e7f1      	b.n	800c016 <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART1_RX);
 800c032:	4aa2      	ldr	r2, [pc, #648]	; (800c2bc <RemapAndLinkDMAtoUARTRx+0x354>)
 800c034:	23a8      	movs	r3, #168	; 0xa8
 800c036:	58d4      	ldr	r4, [r2, r3]
 800c038:	4d9f      	ldr	r5, [pc, #636]	; (800c2b8 <RemapAndLinkDMAtoUARTRx+0x350>)
 800c03a:	402c      	ands	r4, r5
 800c03c:	50d4      	str	r4, [r2, r3]
 800c03e:	58d5      	ldr	r5, [r2, r3]
 800c040:	2480      	movs	r4, #128	; 0x80
 800c042:	0124      	lsls	r4, r4, #4
 800c044:	432c      	orrs	r4, r5
 800c046:	50d4      	str	r4, [r2, r3]
 800c048:	e7e5      	b.n	800c016 <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART1_RX);		
 800c04a:	4a9c      	ldr	r2, [pc, #624]	; (800c2bc <RemapAndLinkDMAtoUARTRx+0x354>)
 800c04c:	23a8      	movs	r3, #168	; 0xa8
 800c04e:	58d4      	ldr	r4, [r2, r3]
 800c050:	4d9b      	ldr	r5, [pc, #620]	; (800c2c0 <RemapAndLinkDMAtoUARTRx+0x358>)
 800c052:	402c      	ands	r4, r5
 800c054:	50d4      	str	r4, [r2, r3]
 800c056:	58d5      	ldr	r5, [r2, r3]
 800c058:	2480      	movs	r4, #128	; 0x80
 800c05a:	0324      	lsls	r4, r4, #12
 800c05c:	432c      	orrs	r4, r5
 800c05e:	50d4      	str	r4, [r2, r3]
 800c060:	e7d9      	b.n	800c016 <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART1_RX);	
 800c062:	4a96      	ldr	r2, [pc, #600]	; (800c2bc <RemapAndLinkDMAtoUARTRx+0x354>)
 800c064:	23a8      	movs	r3, #168	; 0xa8
 800c066:	58d4      	ldr	r4, [r2, r3]
 800c068:	4d96      	ldr	r5, [pc, #600]	; (800c2c4 <RemapAndLinkDMAtoUARTRx+0x35c>)
 800c06a:	402c      	ands	r4, r5
 800c06c:	50d4      	str	r4, [r2, r3]
 800c06e:	58d5      	ldr	r5, [r2, r3]
 800c070:	2480      	movs	r4, #128	; 0x80
 800c072:	0424      	lsls	r4, r4, #16
 800c074:	432c      	orrs	r4, r5
 800c076:	50d4      	str	r4, [r2, r3]
 800c078:	e7cd      	b.n	800c016 <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART1_RX);	
 800c07a:	4a8e      	ldr	r2, [pc, #568]	; (800c2b4 <RemapAndLinkDMAtoUARTRx+0x34c>)
 800c07c:	23a8      	movs	r3, #168	; 0xa8
 800c07e:	58d4      	ldr	r4, [r2, r3]
 800c080:	25f0      	movs	r5, #240	; 0xf0
 800c082:	43ac      	bics	r4, r5
 800c084:	50d4      	str	r4, [r2, r3]
 800c086:	58d4      	ldr	r4, [r2, r3]
 800c088:	3d70      	subs	r5, #112	; 0x70
 800c08a:	432c      	orrs	r4, r5
 800c08c:	50d4      	str	r4, [r2, r3]
 800c08e:	e7c2      	b.n	800c016 <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART1_RX);	
 800c090:	4a88      	ldr	r2, [pc, #544]	; (800c2b4 <RemapAndLinkDMAtoUARTRx+0x34c>)
 800c092:	23a8      	movs	r3, #168	; 0xa8
 800c094:	58d4      	ldr	r4, [r2, r3]
 800c096:	4d88      	ldr	r5, [pc, #544]	; (800c2b8 <RemapAndLinkDMAtoUARTRx+0x350>)
 800c098:	402c      	ands	r4, r5
 800c09a:	50d4      	str	r4, [r2, r3]
 800c09c:	58d5      	ldr	r5, [r2, r3]
 800c09e:	2480      	movs	r4, #128	; 0x80
 800c0a0:	0124      	lsls	r4, r4, #4
 800c0a2:	432c      	orrs	r4, r5
 800c0a4:	50d4      	str	r4, [r2, r3]
 800c0a6:	e7b6      	b.n	800c016 <RemapAndLinkDMAtoUARTRx+0xae>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel1) {
 800c0a8:	680b      	ldr	r3, [r1, #0]
 800c0aa:	4a7c      	ldr	r2, [pc, #496]	; (800c29c <RemapAndLinkDMAtoUARTRx+0x334>)
 800c0ac:	4293      	cmp	r3, r2
 800c0ae:	d01a      	beq.n	800c0e6 <RemapAndLinkDMAtoUARTRx+0x17e>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel3) {
 800c0b0:	4a7b      	ldr	r2, [pc, #492]	; (800c2a0 <RemapAndLinkDMAtoUARTRx+0x338>)
 800c0b2:	4293      	cmp	r3, r2
 800c0b4:	d022      	beq.n	800c0fc <RemapAndLinkDMAtoUARTRx+0x194>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel5) {
 800c0b6:	4a7b      	ldr	r2, [pc, #492]	; (800c2a4 <RemapAndLinkDMAtoUARTRx+0x33c>)
 800c0b8:	4293      	cmp	r3, r2
 800c0ba:	d02b      	beq.n	800c114 <RemapAndLinkDMAtoUARTRx+0x1ac>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel6) {
 800c0bc:	4a7a      	ldr	r2, [pc, #488]	; (800c2a8 <RemapAndLinkDMAtoUARTRx+0x340>)
 800c0be:	4293      	cmp	r3, r2
 800c0c0:	d034      	beq.n	800c12c <RemapAndLinkDMAtoUARTRx+0x1c4>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel2) {
 800c0c2:	4a7a      	ldr	r2, [pc, #488]	; (800c2ac <RemapAndLinkDMAtoUARTRx+0x344>)
 800c0c4:	4293      	cmp	r3, r2
 800c0c6:	d03d      	beq.n	800c144 <RemapAndLinkDMAtoUARTRx+0x1dc>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel3) {
 800c0c8:	4a79      	ldr	r2, [pc, #484]	; (800c2b0 <RemapAndLinkDMAtoUARTRx+0x348>)
 800c0ca:	4293      	cmp	r3, r2
 800c0cc:	d1a3      	bne.n	800c016 <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART2_RX);	
 800c0ce:	4a79      	ldr	r2, [pc, #484]	; (800c2b4 <RemapAndLinkDMAtoUARTRx+0x34c>)
 800c0d0:	23a8      	movs	r3, #168	; 0xa8
 800c0d2:	58d4      	ldr	r4, [r2, r3]
 800c0d4:	4d78      	ldr	r5, [pc, #480]	; (800c2b8 <RemapAndLinkDMAtoUARTRx+0x350>)
 800c0d6:	402c      	ands	r4, r5
 800c0d8:	50d4      	str	r4, [r2, r3]
 800c0da:	58d5      	ldr	r5, [r2, r3]
 800c0dc:	2490      	movs	r4, #144	; 0x90
 800c0de:	0124      	lsls	r4, r4, #4
 800c0e0:	432c      	orrs	r4, r5
 800c0e2:	50d4      	str	r4, [r2, r3]
 800c0e4:	e797      	b.n	800c016 <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART2_RX);
 800c0e6:	4a75      	ldr	r2, [pc, #468]	; (800c2bc <RemapAndLinkDMAtoUARTRx+0x354>)
 800c0e8:	23a8      	movs	r3, #168	; 0xa8
 800c0ea:	58d4      	ldr	r4, [r2, r3]
 800c0ec:	250f      	movs	r5, #15
 800c0ee:	43ac      	bics	r4, r5
 800c0f0:	50d4      	str	r4, [r2, r3]
 800c0f2:	58d4      	ldr	r4, [r2, r3]
 800c0f4:	3d06      	subs	r5, #6
 800c0f6:	432c      	orrs	r4, r5
 800c0f8:	50d4      	str	r4, [r2, r3]
 800c0fa:	e78c      	b.n	800c016 <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART2_RX);
 800c0fc:	4a6f      	ldr	r2, [pc, #444]	; (800c2bc <RemapAndLinkDMAtoUARTRx+0x354>)
 800c0fe:	23a8      	movs	r3, #168	; 0xa8
 800c100:	58d4      	ldr	r4, [r2, r3]
 800c102:	4d6d      	ldr	r5, [pc, #436]	; (800c2b8 <RemapAndLinkDMAtoUARTRx+0x350>)
 800c104:	402c      	ands	r4, r5
 800c106:	50d4      	str	r4, [r2, r3]
 800c108:	58d5      	ldr	r5, [r2, r3]
 800c10a:	2490      	movs	r4, #144	; 0x90
 800c10c:	0124      	lsls	r4, r4, #4
 800c10e:	432c      	orrs	r4, r5
 800c110:	50d4      	str	r4, [r2, r3]
 800c112:	e780      	b.n	800c016 <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART2_RX);		
 800c114:	4a69      	ldr	r2, [pc, #420]	; (800c2bc <RemapAndLinkDMAtoUARTRx+0x354>)
 800c116:	23a8      	movs	r3, #168	; 0xa8
 800c118:	58d4      	ldr	r4, [r2, r3]
 800c11a:	4d69      	ldr	r5, [pc, #420]	; (800c2c0 <RemapAndLinkDMAtoUARTRx+0x358>)
 800c11c:	402c      	ands	r4, r5
 800c11e:	50d4      	str	r4, [r2, r3]
 800c120:	58d5      	ldr	r5, [r2, r3]
 800c122:	2490      	movs	r4, #144	; 0x90
 800c124:	0324      	lsls	r4, r4, #12
 800c126:	432c      	orrs	r4, r5
 800c128:	50d4      	str	r4, [r2, r3]
 800c12a:	e774      	b.n	800c016 <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART2_RX);	
 800c12c:	4a63      	ldr	r2, [pc, #396]	; (800c2bc <RemapAndLinkDMAtoUARTRx+0x354>)
 800c12e:	23a8      	movs	r3, #168	; 0xa8
 800c130:	58d4      	ldr	r4, [r2, r3]
 800c132:	4d64      	ldr	r5, [pc, #400]	; (800c2c4 <RemapAndLinkDMAtoUARTRx+0x35c>)
 800c134:	402c      	ands	r4, r5
 800c136:	50d4      	str	r4, [r2, r3]
 800c138:	58d5      	ldr	r5, [r2, r3]
 800c13a:	2490      	movs	r4, #144	; 0x90
 800c13c:	0424      	lsls	r4, r4, #16
 800c13e:	432c      	orrs	r4, r5
 800c140:	50d4      	str	r4, [r2, r3]
 800c142:	e768      	b.n	800c016 <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART2_RX);	
 800c144:	4a5b      	ldr	r2, [pc, #364]	; (800c2b4 <RemapAndLinkDMAtoUARTRx+0x34c>)
 800c146:	23a8      	movs	r3, #168	; 0xa8
 800c148:	58d4      	ldr	r4, [r2, r3]
 800c14a:	25f0      	movs	r5, #240	; 0xf0
 800c14c:	43ac      	bics	r4, r5
 800c14e:	50d4      	str	r4, [r2, r3]
 800c150:	58d4      	ldr	r4, [r2, r3]
 800c152:	3d60      	subs	r5, #96	; 0x60
 800c154:	432c      	orrs	r4, r5
 800c156:	50d4      	str	r4, [r2, r3]
 800c158:	e75d      	b.n	800c016 <RemapAndLinkDMAtoUARTRx+0xae>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel1) {
 800c15a:	680b      	ldr	r3, [r1, #0]
 800c15c:	4a4f      	ldr	r2, [pc, #316]	; (800c29c <RemapAndLinkDMAtoUARTRx+0x334>)
 800c15e:	4293      	cmp	r3, r2
 800c160:	d01b      	beq.n	800c19a <RemapAndLinkDMAtoUARTRx+0x232>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel3) {
 800c162:	4a4f      	ldr	r2, [pc, #316]	; (800c2a0 <RemapAndLinkDMAtoUARTRx+0x338>)
 800c164:	4293      	cmp	r3, r2
 800c166:	d023      	beq.n	800c1b0 <RemapAndLinkDMAtoUARTRx+0x248>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel5) {
 800c168:	4a4e      	ldr	r2, [pc, #312]	; (800c2a4 <RemapAndLinkDMAtoUARTRx+0x33c>)
 800c16a:	4293      	cmp	r3, r2
 800c16c:	d02c      	beq.n	800c1c8 <RemapAndLinkDMAtoUARTRx+0x260>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel6) {
 800c16e:	4a4e      	ldr	r2, [pc, #312]	; (800c2a8 <RemapAndLinkDMAtoUARTRx+0x340>)
 800c170:	4293      	cmp	r3, r2
 800c172:	d035      	beq.n	800c1e0 <RemapAndLinkDMAtoUARTRx+0x278>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel2) {
 800c174:	4a4d      	ldr	r2, [pc, #308]	; (800c2ac <RemapAndLinkDMAtoUARTRx+0x344>)
 800c176:	4293      	cmp	r3, r2
 800c178:	d03e      	beq.n	800c1f8 <RemapAndLinkDMAtoUARTRx+0x290>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel3) {
 800c17a:	4a4d      	ldr	r2, [pc, #308]	; (800c2b0 <RemapAndLinkDMAtoUARTRx+0x348>)
 800c17c:	4293      	cmp	r3, r2
 800c17e:	d000      	beq.n	800c182 <RemapAndLinkDMAtoUARTRx+0x21a>
 800c180:	e749      	b.n	800c016 <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART3_RX);			
 800c182:	4a4c      	ldr	r2, [pc, #304]	; (800c2b4 <RemapAndLinkDMAtoUARTRx+0x34c>)
 800c184:	23a8      	movs	r3, #168	; 0xa8
 800c186:	58d4      	ldr	r4, [r2, r3]
 800c188:	4d4b      	ldr	r5, [pc, #300]	; (800c2b8 <RemapAndLinkDMAtoUARTRx+0x350>)
 800c18a:	402c      	ands	r4, r5
 800c18c:	50d4      	str	r4, [r2, r3]
 800c18e:	58d5      	ldr	r5, [r2, r3]
 800c190:	24a0      	movs	r4, #160	; 0xa0
 800c192:	0124      	lsls	r4, r4, #4
 800c194:	432c      	orrs	r4, r5
 800c196:	50d4      	str	r4, [r2, r3]
 800c198:	e73d      	b.n	800c016 <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART3_RX);
 800c19a:	4a48      	ldr	r2, [pc, #288]	; (800c2bc <RemapAndLinkDMAtoUARTRx+0x354>)
 800c19c:	23a8      	movs	r3, #168	; 0xa8
 800c19e:	58d4      	ldr	r4, [r2, r3]
 800c1a0:	250f      	movs	r5, #15
 800c1a2:	43ac      	bics	r4, r5
 800c1a4:	50d4      	str	r4, [r2, r3]
 800c1a6:	58d4      	ldr	r4, [r2, r3]
 800c1a8:	3d05      	subs	r5, #5
 800c1aa:	432c      	orrs	r4, r5
 800c1ac:	50d4      	str	r4, [r2, r3]
 800c1ae:	e732      	b.n	800c016 <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART3_RX);
 800c1b0:	4a42      	ldr	r2, [pc, #264]	; (800c2bc <RemapAndLinkDMAtoUARTRx+0x354>)
 800c1b2:	23a8      	movs	r3, #168	; 0xa8
 800c1b4:	58d4      	ldr	r4, [r2, r3]
 800c1b6:	4d40      	ldr	r5, [pc, #256]	; (800c2b8 <RemapAndLinkDMAtoUARTRx+0x350>)
 800c1b8:	402c      	ands	r4, r5
 800c1ba:	50d4      	str	r4, [r2, r3]
 800c1bc:	58d5      	ldr	r5, [r2, r3]
 800c1be:	24a0      	movs	r4, #160	; 0xa0
 800c1c0:	0124      	lsls	r4, r4, #4
 800c1c2:	432c      	orrs	r4, r5
 800c1c4:	50d4      	str	r4, [r2, r3]
 800c1c6:	e726      	b.n	800c016 <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART3_RX);		
 800c1c8:	4a3c      	ldr	r2, [pc, #240]	; (800c2bc <RemapAndLinkDMAtoUARTRx+0x354>)
 800c1ca:	23a8      	movs	r3, #168	; 0xa8
 800c1cc:	58d4      	ldr	r4, [r2, r3]
 800c1ce:	4d3c      	ldr	r5, [pc, #240]	; (800c2c0 <RemapAndLinkDMAtoUARTRx+0x358>)
 800c1d0:	402c      	ands	r4, r5
 800c1d2:	50d4      	str	r4, [r2, r3]
 800c1d4:	58d5      	ldr	r5, [r2, r3]
 800c1d6:	24a0      	movs	r4, #160	; 0xa0
 800c1d8:	0324      	lsls	r4, r4, #12
 800c1da:	432c      	orrs	r4, r5
 800c1dc:	50d4      	str	r4, [r2, r3]
 800c1de:	e71a      	b.n	800c016 <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART3_RX);	
 800c1e0:	4a36      	ldr	r2, [pc, #216]	; (800c2bc <RemapAndLinkDMAtoUARTRx+0x354>)
 800c1e2:	23a8      	movs	r3, #168	; 0xa8
 800c1e4:	58d4      	ldr	r4, [r2, r3]
 800c1e6:	4d37      	ldr	r5, [pc, #220]	; (800c2c4 <RemapAndLinkDMAtoUARTRx+0x35c>)
 800c1e8:	402c      	ands	r4, r5
 800c1ea:	50d4      	str	r4, [r2, r3]
 800c1ec:	58d5      	ldr	r5, [r2, r3]
 800c1ee:	24a0      	movs	r4, #160	; 0xa0
 800c1f0:	0424      	lsls	r4, r4, #16
 800c1f2:	432c      	orrs	r4, r5
 800c1f4:	50d4      	str	r4, [r2, r3]
 800c1f6:	e70e      	b.n	800c016 <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART3_RX);	
 800c1f8:	4a2e      	ldr	r2, [pc, #184]	; (800c2b4 <RemapAndLinkDMAtoUARTRx+0x34c>)
 800c1fa:	23a8      	movs	r3, #168	; 0xa8
 800c1fc:	58d4      	ldr	r4, [r2, r3]
 800c1fe:	25f0      	movs	r5, #240	; 0xf0
 800c200:	43ac      	bics	r4, r5
 800c202:	50d4      	str	r4, [r2, r3]
 800c204:	58d4      	ldr	r4, [r2, r3]
 800c206:	3d50      	subs	r5, #80	; 0x50
 800c208:	432c      	orrs	r4, r5
 800c20a:	50d4      	str	r4, [r2, r3]
 800c20c:	e703      	b.n	800c016 <RemapAndLinkDMAtoUARTRx+0xae>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel1) {
 800c20e:	680b      	ldr	r3, [r1, #0]
 800c210:	4a22      	ldr	r2, [pc, #136]	; (800c29c <RemapAndLinkDMAtoUARTRx+0x334>)
 800c212:	4293      	cmp	r3, r2
 800c214:	d01b      	beq.n	800c24e <RemapAndLinkDMAtoUARTRx+0x2e6>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel3) {
 800c216:	4a22      	ldr	r2, [pc, #136]	; (800c2a0 <RemapAndLinkDMAtoUARTRx+0x338>)
 800c218:	4293      	cmp	r3, r2
 800c21a:	d023      	beq.n	800c264 <RemapAndLinkDMAtoUARTRx+0x2fc>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel5) {
 800c21c:	4a21      	ldr	r2, [pc, #132]	; (800c2a4 <RemapAndLinkDMAtoUARTRx+0x33c>)
 800c21e:	4293      	cmp	r3, r2
 800c220:	d052      	beq.n	800c2c8 <RemapAndLinkDMAtoUARTRx+0x360>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel6) {
 800c222:	4a21      	ldr	r2, [pc, #132]	; (800c2a8 <RemapAndLinkDMAtoUARTRx+0x340>)
 800c224:	4293      	cmp	r3, r2
 800c226:	d05b      	beq.n	800c2e0 <RemapAndLinkDMAtoUARTRx+0x378>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel2) {
 800c228:	4a20      	ldr	r2, [pc, #128]	; (800c2ac <RemapAndLinkDMAtoUARTRx+0x344>)
 800c22a:	4293      	cmp	r3, r2
 800c22c:	d064      	beq.n	800c2f8 <RemapAndLinkDMAtoUARTRx+0x390>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel3) {
 800c22e:	4a20      	ldr	r2, [pc, #128]	; (800c2b0 <RemapAndLinkDMAtoUARTRx+0x348>)
 800c230:	4293      	cmp	r3, r2
 800c232:	d000      	beq.n	800c236 <RemapAndLinkDMAtoUARTRx+0x2ce>
 800c234:	e6ef      	b.n	800c016 <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART4_RX);				
 800c236:	4a1f      	ldr	r2, [pc, #124]	; (800c2b4 <RemapAndLinkDMAtoUARTRx+0x34c>)
 800c238:	23a8      	movs	r3, #168	; 0xa8
 800c23a:	58d4      	ldr	r4, [r2, r3]
 800c23c:	4d1e      	ldr	r5, [pc, #120]	; (800c2b8 <RemapAndLinkDMAtoUARTRx+0x350>)
 800c23e:	402c      	ands	r4, r5
 800c240:	50d4      	str	r4, [r2, r3]
 800c242:	58d5      	ldr	r5, [r2, r3]
 800c244:	24b0      	movs	r4, #176	; 0xb0
 800c246:	0124      	lsls	r4, r4, #4
 800c248:	432c      	orrs	r4, r5
 800c24a:	50d4      	str	r4, [r2, r3]
 800c24c:	e6e3      	b.n	800c016 <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART4_RX);
 800c24e:	4a1b      	ldr	r2, [pc, #108]	; (800c2bc <RemapAndLinkDMAtoUARTRx+0x354>)
 800c250:	23a8      	movs	r3, #168	; 0xa8
 800c252:	58d4      	ldr	r4, [r2, r3]
 800c254:	250f      	movs	r5, #15
 800c256:	43ac      	bics	r4, r5
 800c258:	50d4      	str	r4, [r2, r3]
 800c25a:	58d4      	ldr	r4, [r2, r3]
 800c25c:	3d04      	subs	r5, #4
 800c25e:	432c      	orrs	r4, r5
 800c260:	50d4      	str	r4, [r2, r3]
 800c262:	e6d8      	b.n	800c016 <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART4_RX);
 800c264:	4a15      	ldr	r2, [pc, #84]	; (800c2bc <RemapAndLinkDMAtoUARTRx+0x354>)
 800c266:	23a8      	movs	r3, #168	; 0xa8
 800c268:	58d4      	ldr	r4, [r2, r3]
 800c26a:	4d13      	ldr	r5, [pc, #76]	; (800c2b8 <RemapAndLinkDMAtoUARTRx+0x350>)
 800c26c:	402c      	ands	r4, r5
 800c26e:	50d4      	str	r4, [r2, r3]
 800c270:	58d5      	ldr	r5, [r2, r3]
 800c272:	24b0      	movs	r4, #176	; 0xb0
 800c274:	0124      	lsls	r4, r4, #4
 800c276:	432c      	orrs	r4, r5
 800c278:	50d4      	str	r4, [r2, r3]
 800c27a:	e6cc      	b.n	800c016 <RemapAndLinkDMAtoUARTRx+0xae>
 800c27c:	40013800 	.word	0x40013800
 800c280:	40004400 	.word	0x40004400
 800c284:	40004800 	.word	0x40004800
 800c288:	40004c00 	.word	0x40004c00
 800c28c:	40005000 	.word	0x40005000
 800c290:	40011400 	.word	0x40011400
 800c294:	40011800 	.word	0x40011800
 800c298:	40011c00 	.word	0x40011c00
 800c29c:	40020008 	.word	0x40020008
 800c2a0:	40020030 	.word	0x40020030
 800c2a4:	40020058 	.word	0x40020058
 800c2a8:	4002006c 	.word	0x4002006c
 800c2ac:	4002041c 	.word	0x4002041c
 800c2b0:	40020430 	.word	0x40020430
 800c2b4:	40020400 	.word	0x40020400
 800c2b8:	fffff0ff 	.word	0xfffff0ff
 800c2bc:	40020000 	.word	0x40020000
 800c2c0:	fff0ffff 	.word	0xfff0ffff
 800c2c4:	ff0fffff 	.word	0xff0fffff
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART4_RX);		
 800c2c8:	4ab4      	ldr	r2, [pc, #720]	; (800c59c <RemapAndLinkDMAtoUARTRx+0x634>)
 800c2ca:	23a8      	movs	r3, #168	; 0xa8
 800c2cc:	58d4      	ldr	r4, [r2, r3]
 800c2ce:	4db4      	ldr	r5, [pc, #720]	; (800c5a0 <RemapAndLinkDMAtoUARTRx+0x638>)
 800c2d0:	402c      	ands	r4, r5
 800c2d2:	50d4      	str	r4, [r2, r3]
 800c2d4:	58d5      	ldr	r5, [r2, r3]
 800c2d6:	24b0      	movs	r4, #176	; 0xb0
 800c2d8:	0324      	lsls	r4, r4, #12
 800c2da:	432c      	orrs	r4, r5
 800c2dc:	50d4      	str	r4, [r2, r3]
 800c2de:	e69a      	b.n	800c016 <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART4_RX);	
 800c2e0:	4aae      	ldr	r2, [pc, #696]	; (800c59c <RemapAndLinkDMAtoUARTRx+0x634>)
 800c2e2:	23a8      	movs	r3, #168	; 0xa8
 800c2e4:	58d4      	ldr	r4, [r2, r3]
 800c2e6:	4daf      	ldr	r5, [pc, #700]	; (800c5a4 <RemapAndLinkDMAtoUARTRx+0x63c>)
 800c2e8:	402c      	ands	r4, r5
 800c2ea:	50d4      	str	r4, [r2, r3]
 800c2ec:	58d5      	ldr	r5, [r2, r3]
 800c2ee:	24b0      	movs	r4, #176	; 0xb0
 800c2f0:	0424      	lsls	r4, r4, #16
 800c2f2:	432c      	orrs	r4, r5
 800c2f4:	50d4      	str	r4, [r2, r3]
 800c2f6:	e68e      	b.n	800c016 <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART4_RX);	
 800c2f8:	4aab      	ldr	r2, [pc, #684]	; (800c5a8 <RemapAndLinkDMAtoUARTRx+0x640>)
 800c2fa:	23a8      	movs	r3, #168	; 0xa8
 800c2fc:	58d4      	ldr	r4, [r2, r3]
 800c2fe:	25f0      	movs	r5, #240	; 0xf0
 800c300:	43ac      	bics	r4, r5
 800c302:	50d4      	str	r4, [r2, r3]
 800c304:	58d4      	ldr	r4, [r2, r3]
 800c306:	3d40      	subs	r5, #64	; 0x40
 800c308:	432c      	orrs	r4, r5
 800c30a:	50d4      	str	r4, [r2, r3]
 800c30c:	e683      	b.n	800c016 <RemapAndLinkDMAtoUARTRx+0xae>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel1) {
 800c30e:	680b      	ldr	r3, [r1, #0]
 800c310:	4aa6      	ldr	r2, [pc, #664]	; (800c5ac <RemapAndLinkDMAtoUARTRx+0x644>)
 800c312:	4293      	cmp	r3, r2
 800c314:	d01b      	beq.n	800c34e <RemapAndLinkDMAtoUARTRx+0x3e6>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel3) {
 800c316:	4aa6      	ldr	r2, [pc, #664]	; (800c5b0 <RemapAndLinkDMAtoUARTRx+0x648>)
 800c318:	4293      	cmp	r3, r2
 800c31a:	d023      	beq.n	800c364 <RemapAndLinkDMAtoUARTRx+0x3fc>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel5) {
 800c31c:	4aa5      	ldr	r2, [pc, #660]	; (800c5b4 <RemapAndLinkDMAtoUARTRx+0x64c>)
 800c31e:	4293      	cmp	r3, r2
 800c320:	d02c      	beq.n	800c37c <RemapAndLinkDMAtoUARTRx+0x414>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel6) {
 800c322:	4aa5      	ldr	r2, [pc, #660]	; (800c5b8 <RemapAndLinkDMAtoUARTRx+0x650>)
 800c324:	4293      	cmp	r3, r2
 800c326:	d035      	beq.n	800c394 <RemapAndLinkDMAtoUARTRx+0x42c>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel2) {
 800c328:	4aa4      	ldr	r2, [pc, #656]	; (800c5bc <RemapAndLinkDMAtoUARTRx+0x654>)
 800c32a:	4293      	cmp	r3, r2
 800c32c:	d03e      	beq.n	800c3ac <RemapAndLinkDMAtoUARTRx+0x444>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel3) {
 800c32e:	4aa4      	ldr	r2, [pc, #656]	; (800c5c0 <RemapAndLinkDMAtoUARTRx+0x658>)
 800c330:	4293      	cmp	r3, r2
 800c332:	d000      	beq.n	800c336 <RemapAndLinkDMAtoUARTRx+0x3ce>
 800c334:	e66f      	b.n	800c016 <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART5_RX);					
 800c336:	4a9c      	ldr	r2, [pc, #624]	; (800c5a8 <RemapAndLinkDMAtoUARTRx+0x640>)
 800c338:	23a8      	movs	r3, #168	; 0xa8
 800c33a:	58d4      	ldr	r4, [r2, r3]
 800c33c:	4da1      	ldr	r5, [pc, #644]	; (800c5c4 <RemapAndLinkDMAtoUARTRx+0x65c>)
 800c33e:	402c      	ands	r4, r5
 800c340:	50d4      	str	r4, [r2, r3]
 800c342:	58d5      	ldr	r5, [r2, r3]
 800c344:	24c0      	movs	r4, #192	; 0xc0
 800c346:	0124      	lsls	r4, r4, #4
 800c348:	432c      	orrs	r4, r5
 800c34a:	50d4      	str	r4, [r2, r3]
 800c34c:	e663      	b.n	800c016 <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART5_RX);
 800c34e:	4a93      	ldr	r2, [pc, #588]	; (800c59c <RemapAndLinkDMAtoUARTRx+0x634>)
 800c350:	23a8      	movs	r3, #168	; 0xa8
 800c352:	58d4      	ldr	r4, [r2, r3]
 800c354:	250f      	movs	r5, #15
 800c356:	43ac      	bics	r4, r5
 800c358:	50d4      	str	r4, [r2, r3]
 800c35a:	58d4      	ldr	r4, [r2, r3]
 800c35c:	3d03      	subs	r5, #3
 800c35e:	432c      	orrs	r4, r5
 800c360:	50d4      	str	r4, [r2, r3]
 800c362:	e658      	b.n	800c016 <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART5_RX);
 800c364:	4a8d      	ldr	r2, [pc, #564]	; (800c59c <RemapAndLinkDMAtoUARTRx+0x634>)
 800c366:	23a8      	movs	r3, #168	; 0xa8
 800c368:	58d4      	ldr	r4, [r2, r3]
 800c36a:	4d96      	ldr	r5, [pc, #600]	; (800c5c4 <RemapAndLinkDMAtoUARTRx+0x65c>)
 800c36c:	402c      	ands	r4, r5
 800c36e:	50d4      	str	r4, [r2, r3]
 800c370:	58d5      	ldr	r5, [r2, r3]
 800c372:	24c0      	movs	r4, #192	; 0xc0
 800c374:	0124      	lsls	r4, r4, #4
 800c376:	432c      	orrs	r4, r5
 800c378:	50d4      	str	r4, [r2, r3]
 800c37a:	e64c      	b.n	800c016 <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART5_RX);		
 800c37c:	4a87      	ldr	r2, [pc, #540]	; (800c59c <RemapAndLinkDMAtoUARTRx+0x634>)
 800c37e:	23a8      	movs	r3, #168	; 0xa8
 800c380:	58d4      	ldr	r4, [r2, r3]
 800c382:	4d87      	ldr	r5, [pc, #540]	; (800c5a0 <RemapAndLinkDMAtoUARTRx+0x638>)
 800c384:	402c      	ands	r4, r5
 800c386:	50d4      	str	r4, [r2, r3]
 800c388:	58d5      	ldr	r5, [r2, r3]
 800c38a:	24c0      	movs	r4, #192	; 0xc0
 800c38c:	0324      	lsls	r4, r4, #12
 800c38e:	432c      	orrs	r4, r5
 800c390:	50d4      	str	r4, [r2, r3]
 800c392:	e640      	b.n	800c016 <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART5_RX);	
 800c394:	4a81      	ldr	r2, [pc, #516]	; (800c59c <RemapAndLinkDMAtoUARTRx+0x634>)
 800c396:	23a8      	movs	r3, #168	; 0xa8
 800c398:	58d4      	ldr	r4, [r2, r3]
 800c39a:	4d82      	ldr	r5, [pc, #520]	; (800c5a4 <RemapAndLinkDMAtoUARTRx+0x63c>)
 800c39c:	402c      	ands	r4, r5
 800c39e:	50d4      	str	r4, [r2, r3]
 800c3a0:	58d5      	ldr	r5, [r2, r3]
 800c3a2:	24c0      	movs	r4, #192	; 0xc0
 800c3a4:	0424      	lsls	r4, r4, #16
 800c3a6:	432c      	orrs	r4, r5
 800c3a8:	50d4      	str	r4, [r2, r3]
 800c3aa:	e634      	b.n	800c016 <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART5_RX);	
 800c3ac:	4a7e      	ldr	r2, [pc, #504]	; (800c5a8 <RemapAndLinkDMAtoUARTRx+0x640>)
 800c3ae:	23a8      	movs	r3, #168	; 0xa8
 800c3b0:	58d4      	ldr	r4, [r2, r3]
 800c3b2:	25f0      	movs	r5, #240	; 0xf0
 800c3b4:	43ac      	bics	r4, r5
 800c3b6:	50d4      	str	r4, [r2, r3]
 800c3b8:	58d4      	ldr	r4, [r2, r3]
 800c3ba:	3d30      	subs	r5, #48	; 0x30
 800c3bc:	432c      	orrs	r4, r5
 800c3be:	50d4      	str	r4, [r2, r3]
 800c3c0:	e629      	b.n	800c016 <RemapAndLinkDMAtoUARTRx+0xae>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel1) {
 800c3c2:	680b      	ldr	r3, [r1, #0]
 800c3c4:	4a79      	ldr	r2, [pc, #484]	; (800c5ac <RemapAndLinkDMAtoUARTRx+0x644>)
 800c3c6:	4293      	cmp	r3, r2
 800c3c8:	d01b      	beq.n	800c402 <RemapAndLinkDMAtoUARTRx+0x49a>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel3) {
 800c3ca:	4a79      	ldr	r2, [pc, #484]	; (800c5b0 <RemapAndLinkDMAtoUARTRx+0x648>)
 800c3cc:	4293      	cmp	r3, r2
 800c3ce:	d023      	beq.n	800c418 <RemapAndLinkDMAtoUARTRx+0x4b0>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel5) {
 800c3d0:	4a78      	ldr	r2, [pc, #480]	; (800c5b4 <RemapAndLinkDMAtoUARTRx+0x64c>)
 800c3d2:	4293      	cmp	r3, r2
 800c3d4:	d02c      	beq.n	800c430 <RemapAndLinkDMAtoUARTRx+0x4c8>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel6) {
 800c3d6:	4a78      	ldr	r2, [pc, #480]	; (800c5b8 <RemapAndLinkDMAtoUARTRx+0x650>)
 800c3d8:	4293      	cmp	r3, r2
 800c3da:	d035      	beq.n	800c448 <RemapAndLinkDMAtoUARTRx+0x4e0>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel2) {
 800c3dc:	4a77      	ldr	r2, [pc, #476]	; (800c5bc <RemapAndLinkDMAtoUARTRx+0x654>)
 800c3de:	4293      	cmp	r3, r2
 800c3e0:	d03e      	beq.n	800c460 <RemapAndLinkDMAtoUARTRx+0x4f8>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel3) {
 800c3e2:	4a77      	ldr	r2, [pc, #476]	; (800c5c0 <RemapAndLinkDMAtoUARTRx+0x658>)
 800c3e4:	4293      	cmp	r3, r2
 800c3e6:	d000      	beq.n	800c3ea <RemapAndLinkDMAtoUARTRx+0x482>
 800c3e8:	e615      	b.n	800c016 <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART6_RX);					
 800c3ea:	4a6f      	ldr	r2, [pc, #444]	; (800c5a8 <RemapAndLinkDMAtoUARTRx+0x640>)
 800c3ec:	23a8      	movs	r3, #168	; 0xa8
 800c3ee:	58d4      	ldr	r4, [r2, r3]
 800c3f0:	4d74      	ldr	r5, [pc, #464]	; (800c5c4 <RemapAndLinkDMAtoUARTRx+0x65c>)
 800c3f2:	402c      	ands	r4, r5
 800c3f4:	50d4      	str	r4, [r2, r3]
 800c3f6:	58d5      	ldr	r5, [r2, r3]
 800c3f8:	24d0      	movs	r4, #208	; 0xd0
 800c3fa:	0124      	lsls	r4, r4, #4
 800c3fc:	432c      	orrs	r4, r5
 800c3fe:	50d4      	str	r4, [r2, r3]
 800c400:	e609      	b.n	800c016 <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART6_RX);
 800c402:	4a66      	ldr	r2, [pc, #408]	; (800c59c <RemapAndLinkDMAtoUARTRx+0x634>)
 800c404:	23a8      	movs	r3, #168	; 0xa8
 800c406:	58d4      	ldr	r4, [r2, r3]
 800c408:	250f      	movs	r5, #15
 800c40a:	43ac      	bics	r4, r5
 800c40c:	50d4      	str	r4, [r2, r3]
 800c40e:	58d4      	ldr	r4, [r2, r3]
 800c410:	3d02      	subs	r5, #2
 800c412:	432c      	orrs	r4, r5
 800c414:	50d4      	str	r4, [r2, r3]
 800c416:	e5fe      	b.n	800c016 <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART6_RX);
 800c418:	4a60      	ldr	r2, [pc, #384]	; (800c59c <RemapAndLinkDMAtoUARTRx+0x634>)
 800c41a:	23a8      	movs	r3, #168	; 0xa8
 800c41c:	58d4      	ldr	r4, [r2, r3]
 800c41e:	4d69      	ldr	r5, [pc, #420]	; (800c5c4 <RemapAndLinkDMAtoUARTRx+0x65c>)
 800c420:	402c      	ands	r4, r5
 800c422:	50d4      	str	r4, [r2, r3]
 800c424:	58d5      	ldr	r5, [r2, r3]
 800c426:	24d0      	movs	r4, #208	; 0xd0
 800c428:	0124      	lsls	r4, r4, #4
 800c42a:	432c      	orrs	r4, r5
 800c42c:	50d4      	str	r4, [r2, r3]
 800c42e:	e5f2      	b.n	800c016 <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART6_RX);		
 800c430:	4a5a      	ldr	r2, [pc, #360]	; (800c59c <RemapAndLinkDMAtoUARTRx+0x634>)
 800c432:	23a8      	movs	r3, #168	; 0xa8
 800c434:	58d4      	ldr	r4, [r2, r3]
 800c436:	4d5a      	ldr	r5, [pc, #360]	; (800c5a0 <RemapAndLinkDMAtoUARTRx+0x638>)
 800c438:	402c      	ands	r4, r5
 800c43a:	50d4      	str	r4, [r2, r3]
 800c43c:	58d5      	ldr	r5, [r2, r3]
 800c43e:	24d0      	movs	r4, #208	; 0xd0
 800c440:	0324      	lsls	r4, r4, #12
 800c442:	432c      	orrs	r4, r5
 800c444:	50d4      	str	r4, [r2, r3]
 800c446:	e5e6      	b.n	800c016 <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART6_RX);	
 800c448:	4a54      	ldr	r2, [pc, #336]	; (800c59c <RemapAndLinkDMAtoUARTRx+0x634>)
 800c44a:	23a8      	movs	r3, #168	; 0xa8
 800c44c:	58d4      	ldr	r4, [r2, r3]
 800c44e:	4d55      	ldr	r5, [pc, #340]	; (800c5a4 <RemapAndLinkDMAtoUARTRx+0x63c>)
 800c450:	402c      	ands	r4, r5
 800c452:	50d4      	str	r4, [r2, r3]
 800c454:	58d5      	ldr	r5, [r2, r3]
 800c456:	24d0      	movs	r4, #208	; 0xd0
 800c458:	0424      	lsls	r4, r4, #16
 800c45a:	432c      	orrs	r4, r5
 800c45c:	50d4      	str	r4, [r2, r3]
 800c45e:	e5da      	b.n	800c016 <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART6_RX);	
 800c460:	4a51      	ldr	r2, [pc, #324]	; (800c5a8 <RemapAndLinkDMAtoUARTRx+0x640>)
 800c462:	23a8      	movs	r3, #168	; 0xa8
 800c464:	58d4      	ldr	r4, [r2, r3]
 800c466:	25f0      	movs	r5, #240	; 0xf0
 800c468:	43ac      	bics	r4, r5
 800c46a:	50d4      	str	r4, [r2, r3]
 800c46c:	58d4      	ldr	r4, [r2, r3]
 800c46e:	3d20      	subs	r5, #32
 800c470:	432c      	orrs	r4, r5
 800c472:	50d4      	str	r4, [r2, r3]
 800c474:	e5cf      	b.n	800c016 <RemapAndLinkDMAtoUARTRx+0xae>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel1) {
 800c476:	680b      	ldr	r3, [r1, #0]
 800c478:	4a4c      	ldr	r2, [pc, #304]	; (800c5ac <RemapAndLinkDMAtoUARTRx+0x644>)
 800c47a:	4293      	cmp	r3, r2
 800c47c:	d01b      	beq.n	800c4b6 <RemapAndLinkDMAtoUARTRx+0x54e>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel3) {
 800c47e:	4a4c      	ldr	r2, [pc, #304]	; (800c5b0 <RemapAndLinkDMAtoUARTRx+0x648>)
 800c480:	4293      	cmp	r3, r2
 800c482:	d023      	beq.n	800c4cc <RemapAndLinkDMAtoUARTRx+0x564>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel5) {
 800c484:	4a4b      	ldr	r2, [pc, #300]	; (800c5b4 <RemapAndLinkDMAtoUARTRx+0x64c>)
 800c486:	4293      	cmp	r3, r2
 800c488:	d02c      	beq.n	800c4e4 <RemapAndLinkDMAtoUARTRx+0x57c>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel6) {
 800c48a:	4a4b      	ldr	r2, [pc, #300]	; (800c5b8 <RemapAndLinkDMAtoUARTRx+0x650>)
 800c48c:	4293      	cmp	r3, r2
 800c48e:	d035      	beq.n	800c4fc <RemapAndLinkDMAtoUARTRx+0x594>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel2) {
 800c490:	4a4a      	ldr	r2, [pc, #296]	; (800c5bc <RemapAndLinkDMAtoUARTRx+0x654>)
 800c492:	4293      	cmp	r3, r2
 800c494:	d03e      	beq.n	800c514 <RemapAndLinkDMAtoUARTRx+0x5ac>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel3) {
 800c496:	4a4a      	ldr	r2, [pc, #296]	; (800c5c0 <RemapAndLinkDMAtoUARTRx+0x658>)
 800c498:	4293      	cmp	r3, r2
 800c49a:	d000      	beq.n	800c49e <RemapAndLinkDMAtoUARTRx+0x536>
 800c49c:	e5bb      	b.n	800c016 <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART7_RX);				
 800c49e:	4a42      	ldr	r2, [pc, #264]	; (800c5a8 <RemapAndLinkDMAtoUARTRx+0x640>)
 800c4a0:	23a8      	movs	r3, #168	; 0xa8
 800c4a2:	58d4      	ldr	r4, [r2, r3]
 800c4a4:	4d47      	ldr	r5, [pc, #284]	; (800c5c4 <RemapAndLinkDMAtoUARTRx+0x65c>)
 800c4a6:	402c      	ands	r4, r5
 800c4a8:	50d4      	str	r4, [r2, r3]
 800c4aa:	58d5      	ldr	r5, [r2, r3]
 800c4ac:	24e0      	movs	r4, #224	; 0xe0
 800c4ae:	0124      	lsls	r4, r4, #4
 800c4b0:	432c      	orrs	r4, r5
 800c4b2:	50d4      	str	r4, [r2, r3]
 800c4b4:	e5af      	b.n	800c016 <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART7_RX);
 800c4b6:	4a39      	ldr	r2, [pc, #228]	; (800c59c <RemapAndLinkDMAtoUARTRx+0x634>)
 800c4b8:	23a8      	movs	r3, #168	; 0xa8
 800c4ba:	58d4      	ldr	r4, [r2, r3]
 800c4bc:	250f      	movs	r5, #15
 800c4be:	43ac      	bics	r4, r5
 800c4c0:	50d4      	str	r4, [r2, r3]
 800c4c2:	58d4      	ldr	r4, [r2, r3]
 800c4c4:	3d01      	subs	r5, #1
 800c4c6:	432c      	orrs	r4, r5
 800c4c8:	50d4      	str	r4, [r2, r3]
 800c4ca:	e5a4      	b.n	800c016 <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART7_RX);
 800c4cc:	4a33      	ldr	r2, [pc, #204]	; (800c59c <RemapAndLinkDMAtoUARTRx+0x634>)
 800c4ce:	23a8      	movs	r3, #168	; 0xa8
 800c4d0:	58d4      	ldr	r4, [r2, r3]
 800c4d2:	4d3c      	ldr	r5, [pc, #240]	; (800c5c4 <RemapAndLinkDMAtoUARTRx+0x65c>)
 800c4d4:	402c      	ands	r4, r5
 800c4d6:	50d4      	str	r4, [r2, r3]
 800c4d8:	58d5      	ldr	r5, [r2, r3]
 800c4da:	24e0      	movs	r4, #224	; 0xe0
 800c4dc:	0124      	lsls	r4, r4, #4
 800c4de:	432c      	orrs	r4, r5
 800c4e0:	50d4      	str	r4, [r2, r3]
 800c4e2:	e598      	b.n	800c016 <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART7_RX);		
 800c4e4:	4a2d      	ldr	r2, [pc, #180]	; (800c59c <RemapAndLinkDMAtoUARTRx+0x634>)
 800c4e6:	23a8      	movs	r3, #168	; 0xa8
 800c4e8:	58d4      	ldr	r4, [r2, r3]
 800c4ea:	4d2d      	ldr	r5, [pc, #180]	; (800c5a0 <RemapAndLinkDMAtoUARTRx+0x638>)
 800c4ec:	402c      	ands	r4, r5
 800c4ee:	50d4      	str	r4, [r2, r3]
 800c4f0:	58d5      	ldr	r5, [r2, r3]
 800c4f2:	24e0      	movs	r4, #224	; 0xe0
 800c4f4:	0324      	lsls	r4, r4, #12
 800c4f6:	432c      	orrs	r4, r5
 800c4f8:	50d4      	str	r4, [r2, r3]
 800c4fa:	e58c      	b.n	800c016 <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART7_RX);	
 800c4fc:	4a27      	ldr	r2, [pc, #156]	; (800c59c <RemapAndLinkDMAtoUARTRx+0x634>)
 800c4fe:	23a8      	movs	r3, #168	; 0xa8
 800c500:	58d4      	ldr	r4, [r2, r3]
 800c502:	4d28      	ldr	r5, [pc, #160]	; (800c5a4 <RemapAndLinkDMAtoUARTRx+0x63c>)
 800c504:	402c      	ands	r4, r5
 800c506:	50d4      	str	r4, [r2, r3]
 800c508:	58d5      	ldr	r5, [r2, r3]
 800c50a:	24e0      	movs	r4, #224	; 0xe0
 800c50c:	0424      	lsls	r4, r4, #16
 800c50e:	432c      	orrs	r4, r5
 800c510:	50d4      	str	r4, [r2, r3]
 800c512:	e580      	b.n	800c016 <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART7_RX);	
 800c514:	4a24      	ldr	r2, [pc, #144]	; (800c5a8 <RemapAndLinkDMAtoUARTRx+0x640>)
 800c516:	23a8      	movs	r3, #168	; 0xa8
 800c518:	58d4      	ldr	r4, [r2, r3]
 800c51a:	25f0      	movs	r5, #240	; 0xf0
 800c51c:	43ac      	bics	r4, r5
 800c51e:	50d4      	str	r4, [r2, r3]
 800c520:	58d4      	ldr	r4, [r2, r3]
 800c522:	3d10      	subs	r5, #16
 800c524:	432c      	orrs	r4, r5
 800c526:	50d4      	str	r4, [r2, r3]
 800c528:	e575      	b.n	800c016 <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART8_RX);
 800c52a:	4a1c      	ldr	r2, [pc, #112]	; (800c59c <RemapAndLinkDMAtoUARTRx+0x634>)
 800c52c:	23a8      	movs	r3, #168	; 0xa8
 800c52e:	58d5      	ldr	r5, [r2, r3]
 800c530:	260f      	movs	r6, #15
 800c532:	43b5      	bics	r5, r6
 800c534:	50d5      	str	r5, [r2, r3]
 800c536:	58d4      	ldr	r4, [r2, r3]
 800c538:	4334      	orrs	r4, r6
 800c53a:	50d4      	str	r4, [r2, r3]
 800c53c:	e56b      	b.n	800c016 <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART8_RX);
 800c53e:	4a17      	ldr	r2, [pc, #92]	; (800c59c <RemapAndLinkDMAtoUARTRx+0x634>)
 800c540:	23a8      	movs	r3, #168	; 0xa8
 800c542:	58d4      	ldr	r4, [r2, r3]
 800c544:	4d1f      	ldr	r5, [pc, #124]	; (800c5c4 <RemapAndLinkDMAtoUARTRx+0x65c>)
 800c546:	402c      	ands	r4, r5
 800c548:	50d4      	str	r4, [r2, r3]
 800c54a:	58d5      	ldr	r5, [r2, r3]
 800c54c:	24f0      	movs	r4, #240	; 0xf0
 800c54e:	0124      	lsls	r4, r4, #4
 800c550:	432c      	orrs	r4, r5
 800c552:	50d4      	str	r4, [r2, r3]
 800c554:	e55f      	b.n	800c016 <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART8_RX);		
 800c556:	4a11      	ldr	r2, [pc, #68]	; (800c59c <RemapAndLinkDMAtoUARTRx+0x634>)
 800c558:	23a8      	movs	r3, #168	; 0xa8
 800c55a:	58d4      	ldr	r4, [r2, r3]
 800c55c:	4d10      	ldr	r5, [pc, #64]	; (800c5a0 <RemapAndLinkDMAtoUARTRx+0x638>)
 800c55e:	402c      	ands	r4, r5
 800c560:	50d4      	str	r4, [r2, r3]
 800c562:	58d5      	ldr	r5, [r2, r3]
 800c564:	24f0      	movs	r4, #240	; 0xf0
 800c566:	0324      	lsls	r4, r4, #12
 800c568:	432c      	orrs	r4, r5
 800c56a:	50d4      	str	r4, [r2, r3]
 800c56c:	e553      	b.n	800c016 <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART8_RX);	
 800c56e:	4a0b      	ldr	r2, [pc, #44]	; (800c59c <RemapAndLinkDMAtoUARTRx+0x634>)
 800c570:	23a8      	movs	r3, #168	; 0xa8
 800c572:	58d4      	ldr	r4, [r2, r3]
 800c574:	4d0b      	ldr	r5, [pc, #44]	; (800c5a4 <RemapAndLinkDMAtoUARTRx+0x63c>)
 800c576:	402c      	ands	r4, r5
 800c578:	50d4      	str	r4, [r2, r3]
 800c57a:	58d5      	ldr	r5, [r2, r3]
 800c57c:	24f0      	movs	r4, #240	; 0xf0
 800c57e:	0424      	lsls	r4, r4, #16
 800c580:	432c      	orrs	r4, r5
 800c582:	50d4      	str	r4, [r2, r3]
 800c584:	e547      	b.n	800c016 <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART8_RX);	
 800c586:	4a08      	ldr	r2, [pc, #32]	; (800c5a8 <RemapAndLinkDMAtoUARTRx+0x640>)
 800c588:	23a8      	movs	r3, #168	; 0xa8
 800c58a:	58d5      	ldr	r5, [r2, r3]
 800c58c:	26f0      	movs	r6, #240	; 0xf0
 800c58e:	43b5      	bics	r5, r6
 800c590:	50d5      	str	r5, [r2, r3]
 800c592:	58d4      	ldr	r4, [r2, r3]
 800c594:	4334      	orrs	r4, r6
 800c596:	50d4      	str	r4, [r2, r3]
 800c598:	e53d      	b.n	800c016 <RemapAndLinkDMAtoUARTRx+0xae>
 800c59a:	46c0      	nop			; (mov r8, r8)
 800c59c:	40020000 	.word	0x40020000
 800c5a0:	fff0ffff 	.word	0xfff0ffff
 800c5a4:	ff0fffff 	.word	0xff0fffff
 800c5a8:	40020400 	.word	0x40020400
 800c5ac:	40020008 	.word	0x40020008
 800c5b0:	40020030 	.word	0x40020030
 800c5b4:	40020058 	.word	0x40020058
 800c5b8:	4002006c 	.word	0x4002006c
 800c5bc:	4002041c 	.word	0x4002041c
 800c5c0:	40020430 	.word	0x40020430
 800c5c4:	fffff0ff 	.word	0xfffff0ff

0800c5c8 <DMA_MSG_RX_Setup>:
{	
 800c5c8:	b570      	push	{r4, r5, r6, lr}
 800c5ca:	0004      	movs	r4, r0
 800c5cc:	000d      	movs	r5, r1
	RemapAndLinkDMAtoUARTRx(huart, hDMA);
 800c5ce:	f7ff fccb 	bl	800bf68 <RemapAndLinkDMAtoUARTRx>
	SetupDMAInterrupts(hDMA, MSG_DMA_INT_PRIORITY);
 800c5d2:	2100      	movs	r1, #0
 800c5d4:	0028      	movs	r0, r5
 800c5d6:	f7ff fc0d 	bl	800bdf4 <SetupDMAInterrupts>
	HAL_UART_Receive_DMA(huart, (uint8_t *)&UARTRxBuf[GetPort(huart)-1], MSG_RX_BUF_SIZE);			
 800c5da:	0020      	movs	r0, r4
 800c5dc:	f7ff f804 	bl	800b5e8 <GetPort>
 800c5e0:	1e41      	subs	r1, r0, #1
 800c5e2:	0189      	lsls	r1, r1, #6
 800c5e4:	4803      	ldr	r0, [pc, #12]	; (800c5f4 <DMA_MSG_RX_Setup+0x2c>)
 800c5e6:	1809      	adds	r1, r1, r0
 800c5e8:	2240      	movs	r2, #64	; 0x40
 800c5ea:	0020      	movs	r0, r4
 800c5ec:	f006 fcba 	bl	8012f64 <HAL_UART_Receive_DMA>
}
 800c5f0:	bd70      	pop	{r4, r5, r6, pc}
 800c5f2:	46c0      	nop			; (mov r8, r8)
 800c5f4:	20000d54 	.word	0x20000d54

0800c5f8 <SetupMessagingRxDMAs>:
{	
 800c5f8:	b510      	push	{r4, lr}
	if (portStatus[P1] == FREE)
 800c5fa:	4b17      	ldr	r3, [pc, #92]	; (800c658 <SetupMessagingRxDMAs+0x60>)
 800c5fc:	785b      	ldrb	r3, [r3, #1]
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	d010      	beq.n	800c624 <SetupMessagingRxDMAs+0x2c>
	if (portStatus[P2] == FREE)	
 800c602:	4b15      	ldr	r3, [pc, #84]	; (800c658 <SetupMessagingRxDMAs+0x60>)
 800c604:	789b      	ldrb	r3, [r3, #2]
 800c606:	2b00      	cmp	r3, #0
 800c608:	d011      	beq.n	800c62e <SetupMessagingRxDMAs+0x36>
	if (portStatus[P3] == FREE)
 800c60a:	4b13      	ldr	r3, [pc, #76]	; (800c658 <SetupMessagingRxDMAs+0x60>)
 800c60c:	78db      	ldrb	r3, [r3, #3]
 800c60e:	2b00      	cmp	r3, #0
 800c610:	d012      	beq.n	800c638 <SetupMessagingRxDMAs+0x40>
	if (portStatus[P4] == FREE)
 800c612:	4b11      	ldr	r3, [pc, #68]	; (800c658 <SetupMessagingRxDMAs+0x60>)
 800c614:	791b      	ldrb	r3, [r3, #4]
 800c616:	2b00      	cmp	r3, #0
 800c618:	d013      	beq.n	800c642 <SetupMessagingRxDMAs+0x4a>
	if (portStatus[P5] == FREE)
 800c61a:	4b0f      	ldr	r3, [pc, #60]	; (800c658 <SetupMessagingRxDMAs+0x60>)
 800c61c:	795b      	ldrb	r3, [r3, #5]
 800c61e:	2b00      	cmp	r3, #0
 800c620:	d014      	beq.n	800c64c <SetupMessagingRxDMAs+0x54>
}
 800c622:	bd10      	pop	{r4, pc}
		DMA_MSG_RX_Setup(P1uart, &msgRxDMA[0]);
 800c624:	490d      	ldr	r1, [pc, #52]	; (800c65c <SetupMessagingRxDMAs+0x64>)
 800c626:	480e      	ldr	r0, [pc, #56]	; (800c660 <SetupMessagingRxDMAs+0x68>)
 800c628:	f7ff ffce 	bl	800c5c8 <DMA_MSG_RX_Setup>
 800c62c:	e7e9      	b.n	800c602 <SetupMessagingRxDMAs+0xa>
		DMA_MSG_RX_Setup(P2uart, &msgRxDMA[1]);
 800c62e:	490d      	ldr	r1, [pc, #52]	; (800c664 <SetupMessagingRxDMAs+0x6c>)
 800c630:	480d      	ldr	r0, [pc, #52]	; (800c668 <SetupMessagingRxDMAs+0x70>)
 800c632:	f7ff ffc9 	bl	800c5c8 <DMA_MSG_RX_Setup>
 800c636:	e7e8      	b.n	800c60a <SetupMessagingRxDMAs+0x12>
		DMA_MSG_RX_Setup(P3uart, &msgRxDMA[2]);
 800c638:	490c      	ldr	r1, [pc, #48]	; (800c66c <SetupMessagingRxDMAs+0x74>)
 800c63a:	480d      	ldr	r0, [pc, #52]	; (800c670 <SetupMessagingRxDMAs+0x78>)
 800c63c:	f7ff ffc4 	bl	800c5c8 <DMA_MSG_RX_Setup>
 800c640:	e7e7      	b.n	800c612 <SetupMessagingRxDMAs+0x1a>
		DMA_MSG_RX_Setup(P4uart, &msgRxDMA[3]);
 800c642:	490c      	ldr	r1, [pc, #48]	; (800c674 <SetupMessagingRxDMAs+0x7c>)
 800c644:	480c      	ldr	r0, [pc, #48]	; (800c678 <SetupMessagingRxDMAs+0x80>)
 800c646:	f7ff ffbf 	bl	800c5c8 <DMA_MSG_RX_Setup>
 800c64a:	e7e6      	b.n	800c61a <SetupMessagingRxDMAs+0x22>
		DMA_MSG_RX_Setup(P5uart, &msgRxDMA[4]);
 800c64c:	490b      	ldr	r1, [pc, #44]	; (800c67c <SetupMessagingRxDMAs+0x84>)
 800c64e:	480c      	ldr	r0, [pc, #48]	; (800c680 <SetupMessagingRxDMAs+0x88>)
 800c650:	f7ff ffba 	bl	800c5c8 <DMA_MSG_RX_Setup>
}
 800c654:	e7e5      	b.n	800c622 <SetupMessagingRxDMAs+0x2a>
 800c656:	46c0      	nop			; (mov r8, r8)
 800c658:	20000b80 	.word	0x20000b80
 800c65c:	2000116c 	.word	0x2000116c
 800c660:	200064b8 	.word	0x200064b8
 800c664:	200011a4 	.word	0x200011a4
 800c668:	20006614 	.word	0x20006614
 800c66c:	200011dc 	.word	0x200011dc
 800c670:	200065a0 	.word	0x200065a0
 800c674:	20001214 	.word	0x20001214
 800c678:	20006444 	.word	0x20006444
 800c67c:	2000124c 	.word	0x2000124c
 800c680:	2000652c 	.word	0x2000652c

0800c684 <DMA_STREAM_Setup>:
{	
 800c684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c686:	0005      	movs	r5, r0
 800c688:	000f      	movs	r7, r1
 800c68a:	0016      	movs	r6, r2
	uint8_t port = GetPort(huartSrc);
 800c68c:	f7fe ffac 	bl	800b5e8 <GetPort>
	hDMA = &streamDMA[port-1];
 800c690:	3801      	subs	r0, #1
 800c692:	00c4      	lsls	r4, r0, #3
 800c694:	1a24      	subs	r4, r4, r0
 800c696:	00e4      	lsls	r4, r4, #3
 800c698:	4809      	ldr	r0, [pc, #36]	; (800c6c0 <DMA_STREAM_Setup+0x3c>)
 800c69a:	1824      	adds	r4, r4, r0
	RemapAndLinkDMAtoUARTRx(huartSrc, hDMA);
 800c69c:	0021      	movs	r1, r4
 800c69e:	0028      	movs	r0, r5
 800c6a0:	f7ff fc62 	bl	800bf68 <RemapAndLinkDMAtoUARTRx>
	SetupDMAInterrupts(hDMA, STREAM_DMA_INT_PRIORITY);
 800c6a4:	2101      	movs	r1, #1
 800c6a6:	0020      	movs	r0, r4
 800c6a8:	f7ff fba4 	bl	800bdf4 <SetupDMAInterrupts>
	huartSrc->State = HAL_UART_STATE_READY;
 800c6ac:	2369      	movs	r3, #105	; 0x69
 800c6ae:	2201      	movs	r2, #1
 800c6b0:	54ea      	strb	r2, [r5, r3]
	HAL_UART_Receive_DMA(huartSrc, (uint8_t *)(&(huartDst->Instance->TDR)), num);
 800c6b2:	6839      	ldr	r1, [r7, #0]
 800c6b4:	3128      	adds	r1, #40	; 0x28
 800c6b6:	0032      	movs	r2, r6
 800c6b8:	0028      	movs	r0, r5
 800c6ba:	f006 fc53 	bl	8012f64 <HAL_UART_Receive_DMA>
}
 800c6be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c6c0:	20001364 	.word	0x20001364

0800c6c4 <RemapAndLinkDMAtoUARTTx>:
/*-----------------------------------------------------------*/

/* Remap and link the UART TX and DMA structs 
*/
void RemapAndLinkDMAtoUARTTx(UART_HandleTypeDef *huart, DMA_HandleTypeDef *hDMA)
{
 800c6c4:	b570      	push	{r4, r5, r6, lr}
	// USART 1
	if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel2) {
 800c6c6:	6803      	ldr	r3, [r0, #0]
 800c6c8:	4ac3      	ldr	r2, [pc, #780]	; (800c9d8 <RemapAndLinkDMAtoUARTTx+0x314>)
 800c6ca:	4293      	cmp	r3, r2
 800c6cc:	d03e      	beq.n	800c74c <RemapAndLinkDMAtoUARTTx+0x88>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel4) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART1_TX);	
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel5) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART1_TX);	
	// USART 2	
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel2) {
 800c6ce:	4ac3      	ldr	r2, [pc, #780]	; (800c9dc <RemapAndLinkDMAtoUARTTx+0x318>)
 800c6d0:	4293      	cmp	r3, r2
 800c6d2:	d100      	bne.n	800c6d6 <RemapAndLinkDMAtoUARTTx+0x12>
 800c6d4:	e096      	b.n	800c804 <RemapAndLinkDMAtoUARTTx+0x140>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel4) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART2_TX);	
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel5) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART2_TX);	
	// USART 3	
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel2) {
 800c6d6:	4ac2      	ldr	r2, [pc, #776]	; (800c9e0 <RemapAndLinkDMAtoUARTTx+0x31c>)
 800c6d8:	4293      	cmp	r3, r2
 800c6da:	d100      	bne.n	800c6de <RemapAndLinkDMAtoUARTTx+0x1a>
 800c6dc:	e0eb      	b.n	800c8b6 <RemapAndLinkDMAtoUARTTx+0x1f2>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel4) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART3_TX);	
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel5) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART3_TX);			
	// USART 4	
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel2) {
 800c6de:	4ac1      	ldr	r2, [pc, #772]	; (800c9e4 <RemapAndLinkDMAtoUARTTx+0x320>)
 800c6e0:	4293      	cmp	r3, r2
 800c6e2:	d100      	bne.n	800c6e6 <RemapAndLinkDMAtoUARTTx+0x22>
 800c6e4:	e141      	b.n	800c96a <RemapAndLinkDMAtoUARTTx+0x2a6>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel4) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART4_TX);	
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel5) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART4_TX);				
	// USART 5	
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel2) {
 800c6e6:	4ac0      	ldr	r2, [pc, #768]	; (800c9e8 <RemapAndLinkDMAtoUARTTx+0x324>)
 800c6e8:	4293      	cmp	r3, r2
 800c6ea:	d100      	bne.n	800c6ee <RemapAndLinkDMAtoUARTTx+0x2a>
 800c6ec:	e1bd      	b.n	800ca6a <RemapAndLinkDMAtoUARTTx+0x3a6>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel4) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART5_TX);	
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel5) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART5_TX);					
	// USART 6	
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel2) {
 800c6ee:	4abf      	ldr	r2, [pc, #764]	; (800c9ec <RemapAndLinkDMAtoUARTTx+0x328>)
 800c6f0:	4293      	cmp	r3, r2
 800c6f2:	d100      	bne.n	800c6f6 <RemapAndLinkDMAtoUARTTx+0x32>
 800c6f4:	e213      	b.n	800cb1e <RemapAndLinkDMAtoUARTTx+0x45a>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel4) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART6_TX);	
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel5) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART6_TX);					
	// USART 7	
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel2) {
 800c6f6:	4abe      	ldr	r2, [pc, #760]	; (800c9f0 <RemapAndLinkDMAtoUARTTx+0x32c>)
 800c6f8:	4293      	cmp	r3, r2
 800c6fa:	d100      	bne.n	800c6fe <RemapAndLinkDMAtoUARTTx+0x3a>
 800c6fc:	e269      	b.n	800cbd2 <RemapAndLinkDMAtoUARTTx+0x50e>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel4) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART7_TX);	
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel5) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART7_TX);				
	// USART 8	
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel2) {
 800c6fe:	4abd      	ldr	r2, [pc, #756]	; (800c9f4 <RemapAndLinkDMAtoUARTTx+0x330>)
 800c700:	4293      	cmp	r3, r2
 800c702:	d136      	bne.n	800c772 <RemapAndLinkDMAtoUARTTx+0xae>
 800c704:	680b      	ldr	r3, [r1, #0]
 800c706:	4abc      	ldr	r2, [pc, #752]	; (800c9f8 <RemapAndLinkDMAtoUARTTx+0x334>)
 800c708:	4293      	cmp	r3, r2
 800c70a:	d100      	bne.n	800c70e <RemapAndLinkDMAtoUARTTx+0x4a>
 800c70c:	e2bb      	b.n	800cc86 <RemapAndLinkDMAtoUARTTx+0x5c2>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART8_TX);
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel4) {
 800c70e:	4abb      	ldr	r2, [pc, #748]	; (800c9fc <RemapAndLinkDMAtoUARTTx+0x338>)
 800c710:	4293      	cmp	r3, r2
 800c712:	d100      	bne.n	800c716 <RemapAndLinkDMAtoUARTTx+0x52>
 800c714:	e2c1      	b.n	800cc9a <RemapAndLinkDMAtoUARTTx+0x5d6>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART8_TX);
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel7) {
 800c716:	4aba      	ldr	r2, [pc, #744]	; (800ca00 <RemapAndLinkDMAtoUARTTx+0x33c>)
 800c718:	4293      	cmp	r3, r2
 800c71a:	d100      	bne.n	800c71e <RemapAndLinkDMAtoUARTTx+0x5a>
 800c71c:	e2c9      	b.n	800ccb2 <RemapAndLinkDMAtoUARTTx+0x5ee>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART8_TX);		
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel1) {
 800c71e:	4ab9      	ldr	r2, [pc, #740]	; (800ca04 <RemapAndLinkDMAtoUARTTx+0x340>)
 800c720:	4293      	cmp	r3, r2
 800c722:	d100      	bne.n	800c726 <RemapAndLinkDMAtoUARTTx+0x62>
 800c724:	e2d1      	b.n	800ccca <RemapAndLinkDMAtoUARTTx+0x606>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART8_TX);	
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel4) {
 800c726:	4ab8      	ldr	r2, [pc, #736]	; (800ca08 <RemapAndLinkDMAtoUARTTx+0x344>)
 800c728:	4293      	cmp	r3, r2
 800c72a:	d100      	bne.n	800c72e <RemapAndLinkDMAtoUARTTx+0x6a>
 800c72c:	e2d7      	b.n	800ccde <RemapAndLinkDMAtoUARTTx+0x61a>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART8_TX);	
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel5) {
 800c72e:	4ab7      	ldr	r2, [pc, #732]	; (800ca0c <RemapAndLinkDMAtoUARTTx+0x348>)
 800c730:	4293      	cmp	r3, r2
 800c732:	d11e      	bne.n	800c772 <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART8_TX);					
 800c734:	4ab6      	ldr	r2, [pc, #728]	; (800ca10 <RemapAndLinkDMAtoUARTTx+0x34c>)
 800c736:	23a8      	movs	r3, #168	; 0xa8
 800c738:	58d4      	ldr	r4, [r2, r3]
 800c73a:	4db6      	ldr	r5, [pc, #728]	; (800ca14 <RemapAndLinkDMAtoUARTTx+0x350>)
 800c73c:	402c      	ands	r4, r5
 800c73e:	50d4      	str	r4, [r2, r3]
 800c740:	58d5      	ldr	r5, [r2, r3]
 800c742:	24f0      	movs	r4, #240	; 0xf0
 800c744:	0324      	lsls	r4, r4, #12
 800c746:	432c      	orrs	r4, r5
 800c748:	50d4      	str	r4, [r2, r3]
 800c74a:	e012      	b.n	800c772 <RemapAndLinkDMAtoUARTTx+0xae>
	if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel2) {
 800c74c:	680b      	ldr	r3, [r1, #0]
 800c74e:	4aaa      	ldr	r2, [pc, #680]	; (800c9f8 <RemapAndLinkDMAtoUARTTx+0x334>)
 800c750:	4293      	cmp	r3, r2
 800c752:	d011      	beq.n	800c778 <RemapAndLinkDMAtoUARTTx+0xb4>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel4) {
 800c754:	4aa9      	ldr	r2, [pc, #676]	; (800c9fc <RemapAndLinkDMAtoUARTTx+0x338>)
 800c756:	4293      	cmp	r3, r2
 800c758:	d019      	beq.n	800c78e <RemapAndLinkDMAtoUARTTx+0xca>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel7) {
 800c75a:	4aa9      	ldr	r2, [pc, #676]	; (800ca00 <RemapAndLinkDMAtoUARTTx+0x33c>)
 800c75c:	4293      	cmp	r3, r2
 800c75e:	d022      	beq.n	800c7a6 <RemapAndLinkDMAtoUARTTx+0xe2>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel1) {
 800c760:	4aa8      	ldr	r2, [pc, #672]	; (800ca04 <RemapAndLinkDMAtoUARTTx+0x340>)
 800c762:	4293      	cmp	r3, r2
 800c764:	d02b      	beq.n	800c7be <RemapAndLinkDMAtoUARTTx+0xfa>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel4) {
 800c766:	4aa8      	ldr	r2, [pc, #672]	; (800ca08 <RemapAndLinkDMAtoUARTTx+0x344>)
 800c768:	4293      	cmp	r3, r2
 800c76a:	d033      	beq.n	800c7d4 <RemapAndLinkDMAtoUARTTx+0x110>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel5) {
 800c76c:	4aa7      	ldr	r2, [pc, #668]	; (800ca0c <RemapAndLinkDMAtoUARTTx+0x348>)
 800c76e:	4293      	cmp	r3, r2
 800c770:	d03c      	beq.n	800c7ec <RemapAndLinkDMAtoUARTTx+0x128>
	}		
	
	__HAL_LINKDMA(huart,hdmatx,*hDMA);	
 800c772:	6601      	str	r1, [r0, #96]	; 0x60
 800c774:	6248      	str	r0, [r1, #36]	; 0x24
}
 800c776:	bd70      	pop	{r4, r5, r6, pc}
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART1_TX);
 800c778:	4aa7      	ldr	r2, [pc, #668]	; (800ca18 <RemapAndLinkDMAtoUARTTx+0x354>)
 800c77a:	23a8      	movs	r3, #168	; 0xa8
 800c77c:	58d4      	ldr	r4, [r2, r3]
 800c77e:	25f0      	movs	r5, #240	; 0xf0
 800c780:	43ac      	bics	r4, r5
 800c782:	50d4      	str	r4, [r2, r3]
 800c784:	58d4      	ldr	r4, [r2, r3]
 800c786:	3d70      	subs	r5, #112	; 0x70
 800c788:	432c      	orrs	r4, r5
 800c78a:	50d4      	str	r4, [r2, r3]
 800c78c:	e7f1      	b.n	800c772 <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART1_TX);
 800c78e:	4aa2      	ldr	r2, [pc, #648]	; (800ca18 <RemapAndLinkDMAtoUARTTx+0x354>)
 800c790:	23a8      	movs	r3, #168	; 0xa8
 800c792:	58d4      	ldr	r4, [r2, r3]
 800c794:	4da1      	ldr	r5, [pc, #644]	; (800ca1c <RemapAndLinkDMAtoUARTTx+0x358>)
 800c796:	402c      	ands	r4, r5
 800c798:	50d4      	str	r4, [r2, r3]
 800c79a:	58d5      	ldr	r5, [r2, r3]
 800c79c:	2480      	movs	r4, #128	; 0x80
 800c79e:	0224      	lsls	r4, r4, #8
 800c7a0:	432c      	orrs	r4, r5
 800c7a2:	50d4      	str	r4, [r2, r3]
 800c7a4:	e7e5      	b.n	800c772 <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART1_TX);		
 800c7a6:	4a9c      	ldr	r2, [pc, #624]	; (800ca18 <RemapAndLinkDMAtoUARTTx+0x354>)
 800c7a8:	23a8      	movs	r3, #168	; 0xa8
 800c7aa:	58d4      	ldr	r4, [r2, r3]
 800c7ac:	4d9c      	ldr	r5, [pc, #624]	; (800ca20 <RemapAndLinkDMAtoUARTTx+0x35c>)
 800c7ae:	402c      	ands	r4, r5
 800c7b0:	50d4      	str	r4, [r2, r3]
 800c7b2:	58d5      	ldr	r5, [r2, r3]
 800c7b4:	2480      	movs	r4, #128	; 0x80
 800c7b6:	0524      	lsls	r4, r4, #20
 800c7b8:	432c      	orrs	r4, r5
 800c7ba:	50d4      	str	r4, [r2, r3]
 800c7bc:	e7d9      	b.n	800c772 <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART1_TX);	
 800c7be:	4a94      	ldr	r2, [pc, #592]	; (800ca10 <RemapAndLinkDMAtoUARTTx+0x34c>)
 800c7c0:	23a8      	movs	r3, #168	; 0xa8
 800c7c2:	58d4      	ldr	r4, [r2, r3]
 800c7c4:	250f      	movs	r5, #15
 800c7c6:	43ac      	bics	r4, r5
 800c7c8:	50d4      	str	r4, [r2, r3]
 800c7ca:	58d4      	ldr	r4, [r2, r3]
 800c7cc:	3d07      	subs	r5, #7
 800c7ce:	432c      	orrs	r4, r5
 800c7d0:	50d4      	str	r4, [r2, r3]
 800c7d2:	e7ce      	b.n	800c772 <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART1_TX);	
 800c7d4:	4a8e      	ldr	r2, [pc, #568]	; (800ca10 <RemapAndLinkDMAtoUARTTx+0x34c>)
 800c7d6:	23a8      	movs	r3, #168	; 0xa8
 800c7d8:	58d4      	ldr	r4, [r2, r3]
 800c7da:	4d90      	ldr	r5, [pc, #576]	; (800ca1c <RemapAndLinkDMAtoUARTTx+0x358>)
 800c7dc:	402c      	ands	r4, r5
 800c7de:	50d4      	str	r4, [r2, r3]
 800c7e0:	58d5      	ldr	r5, [r2, r3]
 800c7e2:	2480      	movs	r4, #128	; 0x80
 800c7e4:	0224      	lsls	r4, r4, #8
 800c7e6:	432c      	orrs	r4, r5
 800c7e8:	50d4      	str	r4, [r2, r3]
 800c7ea:	e7c2      	b.n	800c772 <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART1_TX);	
 800c7ec:	4a88      	ldr	r2, [pc, #544]	; (800ca10 <RemapAndLinkDMAtoUARTTx+0x34c>)
 800c7ee:	23a8      	movs	r3, #168	; 0xa8
 800c7f0:	58d4      	ldr	r4, [r2, r3]
 800c7f2:	4d88      	ldr	r5, [pc, #544]	; (800ca14 <RemapAndLinkDMAtoUARTTx+0x350>)
 800c7f4:	402c      	ands	r4, r5
 800c7f6:	50d4      	str	r4, [r2, r3]
 800c7f8:	58d5      	ldr	r5, [r2, r3]
 800c7fa:	2480      	movs	r4, #128	; 0x80
 800c7fc:	0324      	lsls	r4, r4, #12
 800c7fe:	432c      	orrs	r4, r5
 800c800:	50d4      	str	r4, [r2, r3]
 800c802:	e7b6      	b.n	800c772 <RemapAndLinkDMAtoUARTTx+0xae>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel2) {
 800c804:	680b      	ldr	r3, [r1, #0]
 800c806:	4a7c      	ldr	r2, [pc, #496]	; (800c9f8 <RemapAndLinkDMAtoUARTTx+0x334>)
 800c808:	4293      	cmp	r3, r2
 800c80a:	d01a      	beq.n	800c842 <RemapAndLinkDMAtoUARTTx+0x17e>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel4) {
 800c80c:	4a7b      	ldr	r2, [pc, #492]	; (800c9fc <RemapAndLinkDMAtoUARTTx+0x338>)
 800c80e:	4293      	cmp	r3, r2
 800c810:	d022      	beq.n	800c858 <RemapAndLinkDMAtoUARTTx+0x194>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel7) {
 800c812:	4a7b      	ldr	r2, [pc, #492]	; (800ca00 <RemapAndLinkDMAtoUARTTx+0x33c>)
 800c814:	4293      	cmp	r3, r2
 800c816:	d02b      	beq.n	800c870 <RemapAndLinkDMAtoUARTTx+0x1ac>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel1) {
 800c818:	4a7a      	ldr	r2, [pc, #488]	; (800ca04 <RemapAndLinkDMAtoUARTTx+0x340>)
 800c81a:	4293      	cmp	r3, r2
 800c81c:	d034      	beq.n	800c888 <RemapAndLinkDMAtoUARTTx+0x1c4>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel4) {
 800c81e:	4a7a      	ldr	r2, [pc, #488]	; (800ca08 <RemapAndLinkDMAtoUARTTx+0x344>)
 800c820:	4293      	cmp	r3, r2
 800c822:	d03c      	beq.n	800c89e <RemapAndLinkDMAtoUARTTx+0x1da>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel5) {
 800c824:	4a79      	ldr	r2, [pc, #484]	; (800ca0c <RemapAndLinkDMAtoUARTTx+0x348>)
 800c826:	4293      	cmp	r3, r2
 800c828:	d1a3      	bne.n	800c772 <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART2_TX);	
 800c82a:	4a79      	ldr	r2, [pc, #484]	; (800ca10 <RemapAndLinkDMAtoUARTTx+0x34c>)
 800c82c:	23a8      	movs	r3, #168	; 0xa8
 800c82e:	58d4      	ldr	r4, [r2, r3]
 800c830:	4d78      	ldr	r5, [pc, #480]	; (800ca14 <RemapAndLinkDMAtoUARTTx+0x350>)
 800c832:	402c      	ands	r4, r5
 800c834:	50d4      	str	r4, [r2, r3]
 800c836:	58d5      	ldr	r5, [r2, r3]
 800c838:	2490      	movs	r4, #144	; 0x90
 800c83a:	0324      	lsls	r4, r4, #12
 800c83c:	432c      	orrs	r4, r5
 800c83e:	50d4      	str	r4, [r2, r3]
 800c840:	e797      	b.n	800c772 <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART2_TX);
 800c842:	4a75      	ldr	r2, [pc, #468]	; (800ca18 <RemapAndLinkDMAtoUARTTx+0x354>)
 800c844:	23a8      	movs	r3, #168	; 0xa8
 800c846:	58d4      	ldr	r4, [r2, r3]
 800c848:	25f0      	movs	r5, #240	; 0xf0
 800c84a:	43ac      	bics	r4, r5
 800c84c:	50d4      	str	r4, [r2, r3]
 800c84e:	58d4      	ldr	r4, [r2, r3]
 800c850:	3d60      	subs	r5, #96	; 0x60
 800c852:	432c      	orrs	r4, r5
 800c854:	50d4      	str	r4, [r2, r3]
 800c856:	e78c      	b.n	800c772 <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART2_TX);
 800c858:	4a6f      	ldr	r2, [pc, #444]	; (800ca18 <RemapAndLinkDMAtoUARTTx+0x354>)
 800c85a:	23a8      	movs	r3, #168	; 0xa8
 800c85c:	58d4      	ldr	r4, [r2, r3]
 800c85e:	4d6f      	ldr	r5, [pc, #444]	; (800ca1c <RemapAndLinkDMAtoUARTTx+0x358>)
 800c860:	402c      	ands	r4, r5
 800c862:	50d4      	str	r4, [r2, r3]
 800c864:	58d5      	ldr	r5, [r2, r3]
 800c866:	2490      	movs	r4, #144	; 0x90
 800c868:	0224      	lsls	r4, r4, #8
 800c86a:	432c      	orrs	r4, r5
 800c86c:	50d4      	str	r4, [r2, r3]
 800c86e:	e780      	b.n	800c772 <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART2_TX);		
 800c870:	4a69      	ldr	r2, [pc, #420]	; (800ca18 <RemapAndLinkDMAtoUARTTx+0x354>)
 800c872:	23a8      	movs	r3, #168	; 0xa8
 800c874:	58d4      	ldr	r4, [r2, r3]
 800c876:	4d6a      	ldr	r5, [pc, #424]	; (800ca20 <RemapAndLinkDMAtoUARTTx+0x35c>)
 800c878:	402c      	ands	r4, r5
 800c87a:	50d4      	str	r4, [r2, r3]
 800c87c:	58d5      	ldr	r5, [r2, r3]
 800c87e:	2490      	movs	r4, #144	; 0x90
 800c880:	0524      	lsls	r4, r4, #20
 800c882:	432c      	orrs	r4, r5
 800c884:	50d4      	str	r4, [r2, r3]
 800c886:	e774      	b.n	800c772 <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART2_TX);	
 800c888:	4a61      	ldr	r2, [pc, #388]	; (800ca10 <RemapAndLinkDMAtoUARTTx+0x34c>)
 800c88a:	23a8      	movs	r3, #168	; 0xa8
 800c88c:	58d4      	ldr	r4, [r2, r3]
 800c88e:	250f      	movs	r5, #15
 800c890:	43ac      	bics	r4, r5
 800c892:	50d4      	str	r4, [r2, r3]
 800c894:	58d4      	ldr	r4, [r2, r3]
 800c896:	3d06      	subs	r5, #6
 800c898:	432c      	orrs	r4, r5
 800c89a:	50d4      	str	r4, [r2, r3]
 800c89c:	e769      	b.n	800c772 <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART2_TX);	
 800c89e:	4a5c      	ldr	r2, [pc, #368]	; (800ca10 <RemapAndLinkDMAtoUARTTx+0x34c>)
 800c8a0:	23a8      	movs	r3, #168	; 0xa8
 800c8a2:	58d4      	ldr	r4, [r2, r3]
 800c8a4:	4d5d      	ldr	r5, [pc, #372]	; (800ca1c <RemapAndLinkDMAtoUARTTx+0x358>)
 800c8a6:	402c      	ands	r4, r5
 800c8a8:	50d4      	str	r4, [r2, r3]
 800c8aa:	58d5      	ldr	r5, [r2, r3]
 800c8ac:	2490      	movs	r4, #144	; 0x90
 800c8ae:	0224      	lsls	r4, r4, #8
 800c8b0:	432c      	orrs	r4, r5
 800c8b2:	50d4      	str	r4, [r2, r3]
 800c8b4:	e75d      	b.n	800c772 <RemapAndLinkDMAtoUARTTx+0xae>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel2) {
 800c8b6:	680b      	ldr	r3, [r1, #0]
 800c8b8:	4a4f      	ldr	r2, [pc, #316]	; (800c9f8 <RemapAndLinkDMAtoUARTTx+0x334>)
 800c8ba:	4293      	cmp	r3, r2
 800c8bc:	d01b      	beq.n	800c8f6 <RemapAndLinkDMAtoUARTTx+0x232>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel4) {
 800c8be:	4a4f      	ldr	r2, [pc, #316]	; (800c9fc <RemapAndLinkDMAtoUARTTx+0x338>)
 800c8c0:	4293      	cmp	r3, r2
 800c8c2:	d023      	beq.n	800c90c <RemapAndLinkDMAtoUARTTx+0x248>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel7) {
 800c8c4:	4a4e      	ldr	r2, [pc, #312]	; (800ca00 <RemapAndLinkDMAtoUARTTx+0x33c>)
 800c8c6:	4293      	cmp	r3, r2
 800c8c8:	d02c      	beq.n	800c924 <RemapAndLinkDMAtoUARTTx+0x260>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel1) {
 800c8ca:	4a4e      	ldr	r2, [pc, #312]	; (800ca04 <RemapAndLinkDMAtoUARTTx+0x340>)
 800c8cc:	4293      	cmp	r3, r2
 800c8ce:	d035      	beq.n	800c93c <RemapAndLinkDMAtoUARTTx+0x278>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel4) {
 800c8d0:	4a4d      	ldr	r2, [pc, #308]	; (800ca08 <RemapAndLinkDMAtoUARTTx+0x344>)
 800c8d2:	4293      	cmp	r3, r2
 800c8d4:	d03d      	beq.n	800c952 <RemapAndLinkDMAtoUARTTx+0x28e>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel5) {
 800c8d6:	4a4d      	ldr	r2, [pc, #308]	; (800ca0c <RemapAndLinkDMAtoUARTTx+0x348>)
 800c8d8:	4293      	cmp	r3, r2
 800c8da:	d000      	beq.n	800c8de <RemapAndLinkDMAtoUARTTx+0x21a>
 800c8dc:	e749      	b.n	800c772 <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART3_TX);			
 800c8de:	4a4c      	ldr	r2, [pc, #304]	; (800ca10 <RemapAndLinkDMAtoUARTTx+0x34c>)
 800c8e0:	23a8      	movs	r3, #168	; 0xa8
 800c8e2:	58d4      	ldr	r4, [r2, r3]
 800c8e4:	4d4b      	ldr	r5, [pc, #300]	; (800ca14 <RemapAndLinkDMAtoUARTTx+0x350>)
 800c8e6:	402c      	ands	r4, r5
 800c8e8:	50d4      	str	r4, [r2, r3]
 800c8ea:	58d5      	ldr	r5, [r2, r3]
 800c8ec:	24a0      	movs	r4, #160	; 0xa0
 800c8ee:	0324      	lsls	r4, r4, #12
 800c8f0:	432c      	orrs	r4, r5
 800c8f2:	50d4      	str	r4, [r2, r3]
 800c8f4:	e73d      	b.n	800c772 <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART3_TX);
 800c8f6:	4a48      	ldr	r2, [pc, #288]	; (800ca18 <RemapAndLinkDMAtoUARTTx+0x354>)
 800c8f8:	23a8      	movs	r3, #168	; 0xa8
 800c8fa:	58d4      	ldr	r4, [r2, r3]
 800c8fc:	25f0      	movs	r5, #240	; 0xf0
 800c8fe:	43ac      	bics	r4, r5
 800c900:	50d4      	str	r4, [r2, r3]
 800c902:	58d4      	ldr	r4, [r2, r3]
 800c904:	3d50      	subs	r5, #80	; 0x50
 800c906:	432c      	orrs	r4, r5
 800c908:	50d4      	str	r4, [r2, r3]
 800c90a:	e732      	b.n	800c772 <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART3_TX);
 800c90c:	4a42      	ldr	r2, [pc, #264]	; (800ca18 <RemapAndLinkDMAtoUARTTx+0x354>)
 800c90e:	23a8      	movs	r3, #168	; 0xa8
 800c910:	58d4      	ldr	r4, [r2, r3]
 800c912:	4d42      	ldr	r5, [pc, #264]	; (800ca1c <RemapAndLinkDMAtoUARTTx+0x358>)
 800c914:	402c      	ands	r4, r5
 800c916:	50d4      	str	r4, [r2, r3]
 800c918:	58d5      	ldr	r5, [r2, r3]
 800c91a:	24a0      	movs	r4, #160	; 0xa0
 800c91c:	0224      	lsls	r4, r4, #8
 800c91e:	432c      	orrs	r4, r5
 800c920:	50d4      	str	r4, [r2, r3]
 800c922:	e726      	b.n	800c772 <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART3_TX);		
 800c924:	4a3c      	ldr	r2, [pc, #240]	; (800ca18 <RemapAndLinkDMAtoUARTTx+0x354>)
 800c926:	23a8      	movs	r3, #168	; 0xa8
 800c928:	58d4      	ldr	r4, [r2, r3]
 800c92a:	4d3d      	ldr	r5, [pc, #244]	; (800ca20 <RemapAndLinkDMAtoUARTTx+0x35c>)
 800c92c:	402c      	ands	r4, r5
 800c92e:	50d4      	str	r4, [r2, r3]
 800c930:	58d5      	ldr	r5, [r2, r3]
 800c932:	24a0      	movs	r4, #160	; 0xa0
 800c934:	0524      	lsls	r4, r4, #20
 800c936:	432c      	orrs	r4, r5
 800c938:	50d4      	str	r4, [r2, r3]
 800c93a:	e71a      	b.n	800c772 <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART3_TX);	
 800c93c:	4a34      	ldr	r2, [pc, #208]	; (800ca10 <RemapAndLinkDMAtoUARTTx+0x34c>)
 800c93e:	23a8      	movs	r3, #168	; 0xa8
 800c940:	58d4      	ldr	r4, [r2, r3]
 800c942:	250f      	movs	r5, #15
 800c944:	43ac      	bics	r4, r5
 800c946:	50d4      	str	r4, [r2, r3]
 800c948:	58d4      	ldr	r4, [r2, r3]
 800c94a:	3d05      	subs	r5, #5
 800c94c:	432c      	orrs	r4, r5
 800c94e:	50d4      	str	r4, [r2, r3]
 800c950:	e70f      	b.n	800c772 <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART3_TX);	
 800c952:	4a2f      	ldr	r2, [pc, #188]	; (800ca10 <RemapAndLinkDMAtoUARTTx+0x34c>)
 800c954:	23a8      	movs	r3, #168	; 0xa8
 800c956:	58d4      	ldr	r4, [r2, r3]
 800c958:	4d30      	ldr	r5, [pc, #192]	; (800ca1c <RemapAndLinkDMAtoUARTTx+0x358>)
 800c95a:	402c      	ands	r4, r5
 800c95c:	50d4      	str	r4, [r2, r3]
 800c95e:	58d5      	ldr	r5, [r2, r3]
 800c960:	24a0      	movs	r4, #160	; 0xa0
 800c962:	0224      	lsls	r4, r4, #8
 800c964:	432c      	orrs	r4, r5
 800c966:	50d4      	str	r4, [r2, r3]
 800c968:	e703      	b.n	800c772 <RemapAndLinkDMAtoUARTTx+0xae>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel2) {
 800c96a:	680b      	ldr	r3, [r1, #0]
 800c96c:	4a22      	ldr	r2, [pc, #136]	; (800c9f8 <RemapAndLinkDMAtoUARTTx+0x334>)
 800c96e:	4293      	cmp	r3, r2
 800c970:	d01b      	beq.n	800c9aa <RemapAndLinkDMAtoUARTTx+0x2e6>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel4) {
 800c972:	4a22      	ldr	r2, [pc, #136]	; (800c9fc <RemapAndLinkDMAtoUARTTx+0x338>)
 800c974:	4293      	cmp	r3, r2
 800c976:	d023      	beq.n	800c9c0 <RemapAndLinkDMAtoUARTTx+0x2fc>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel7) {
 800c978:	4a21      	ldr	r2, [pc, #132]	; (800ca00 <RemapAndLinkDMAtoUARTTx+0x33c>)
 800c97a:	4293      	cmp	r3, r2
 800c97c:	d052      	beq.n	800ca24 <RemapAndLinkDMAtoUARTTx+0x360>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel1) {
 800c97e:	4a21      	ldr	r2, [pc, #132]	; (800ca04 <RemapAndLinkDMAtoUARTTx+0x340>)
 800c980:	4293      	cmp	r3, r2
 800c982:	d05b      	beq.n	800ca3c <RemapAndLinkDMAtoUARTTx+0x378>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel4) {
 800c984:	4a20      	ldr	r2, [pc, #128]	; (800ca08 <RemapAndLinkDMAtoUARTTx+0x344>)
 800c986:	4293      	cmp	r3, r2
 800c988:	d063      	beq.n	800ca52 <RemapAndLinkDMAtoUARTTx+0x38e>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel5) {
 800c98a:	4a20      	ldr	r2, [pc, #128]	; (800ca0c <RemapAndLinkDMAtoUARTTx+0x348>)
 800c98c:	4293      	cmp	r3, r2
 800c98e:	d000      	beq.n	800c992 <RemapAndLinkDMAtoUARTTx+0x2ce>
 800c990:	e6ef      	b.n	800c772 <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART4_TX);				
 800c992:	4a1f      	ldr	r2, [pc, #124]	; (800ca10 <RemapAndLinkDMAtoUARTTx+0x34c>)
 800c994:	23a8      	movs	r3, #168	; 0xa8
 800c996:	58d4      	ldr	r4, [r2, r3]
 800c998:	4d1e      	ldr	r5, [pc, #120]	; (800ca14 <RemapAndLinkDMAtoUARTTx+0x350>)
 800c99a:	402c      	ands	r4, r5
 800c99c:	50d4      	str	r4, [r2, r3]
 800c99e:	58d5      	ldr	r5, [r2, r3]
 800c9a0:	24b0      	movs	r4, #176	; 0xb0
 800c9a2:	0324      	lsls	r4, r4, #12
 800c9a4:	432c      	orrs	r4, r5
 800c9a6:	50d4      	str	r4, [r2, r3]
 800c9a8:	e6e3      	b.n	800c772 <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART4_TX);
 800c9aa:	4a1b      	ldr	r2, [pc, #108]	; (800ca18 <RemapAndLinkDMAtoUARTTx+0x354>)
 800c9ac:	23a8      	movs	r3, #168	; 0xa8
 800c9ae:	58d4      	ldr	r4, [r2, r3]
 800c9b0:	25f0      	movs	r5, #240	; 0xf0
 800c9b2:	43ac      	bics	r4, r5
 800c9b4:	50d4      	str	r4, [r2, r3]
 800c9b6:	58d4      	ldr	r4, [r2, r3]
 800c9b8:	3d40      	subs	r5, #64	; 0x40
 800c9ba:	432c      	orrs	r4, r5
 800c9bc:	50d4      	str	r4, [r2, r3]
 800c9be:	e6d8      	b.n	800c772 <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART4_TX);
 800c9c0:	4a15      	ldr	r2, [pc, #84]	; (800ca18 <RemapAndLinkDMAtoUARTTx+0x354>)
 800c9c2:	23a8      	movs	r3, #168	; 0xa8
 800c9c4:	58d4      	ldr	r4, [r2, r3]
 800c9c6:	4d15      	ldr	r5, [pc, #84]	; (800ca1c <RemapAndLinkDMAtoUARTTx+0x358>)
 800c9c8:	402c      	ands	r4, r5
 800c9ca:	50d4      	str	r4, [r2, r3]
 800c9cc:	58d5      	ldr	r5, [r2, r3]
 800c9ce:	24b0      	movs	r4, #176	; 0xb0
 800c9d0:	0224      	lsls	r4, r4, #8
 800c9d2:	432c      	orrs	r4, r5
 800c9d4:	50d4      	str	r4, [r2, r3]
 800c9d6:	e6cc      	b.n	800c772 <RemapAndLinkDMAtoUARTTx+0xae>
 800c9d8:	40013800 	.word	0x40013800
 800c9dc:	40004400 	.word	0x40004400
 800c9e0:	40004800 	.word	0x40004800
 800c9e4:	40004c00 	.word	0x40004c00
 800c9e8:	40005000 	.word	0x40005000
 800c9ec:	40011400 	.word	0x40011400
 800c9f0:	40011800 	.word	0x40011800
 800c9f4:	40011c00 	.word	0x40011c00
 800c9f8:	4002001c 	.word	0x4002001c
 800c9fc:	40020044 	.word	0x40020044
 800ca00:	40020080 	.word	0x40020080
 800ca04:	40020408 	.word	0x40020408
 800ca08:	40020444 	.word	0x40020444
 800ca0c:	40020458 	.word	0x40020458
 800ca10:	40020400 	.word	0x40020400
 800ca14:	fff0ffff 	.word	0xfff0ffff
 800ca18:	40020000 	.word	0x40020000
 800ca1c:	ffff0fff 	.word	0xffff0fff
 800ca20:	f0ffffff 	.word	0xf0ffffff
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART4_TX);		
 800ca24:	4ab4      	ldr	r2, [pc, #720]	; (800ccf8 <RemapAndLinkDMAtoUARTTx+0x634>)
 800ca26:	23a8      	movs	r3, #168	; 0xa8
 800ca28:	58d4      	ldr	r4, [r2, r3]
 800ca2a:	4db4      	ldr	r5, [pc, #720]	; (800ccfc <RemapAndLinkDMAtoUARTTx+0x638>)
 800ca2c:	402c      	ands	r4, r5
 800ca2e:	50d4      	str	r4, [r2, r3]
 800ca30:	58d5      	ldr	r5, [r2, r3]
 800ca32:	24b0      	movs	r4, #176	; 0xb0
 800ca34:	0524      	lsls	r4, r4, #20
 800ca36:	432c      	orrs	r4, r5
 800ca38:	50d4      	str	r4, [r2, r3]
 800ca3a:	e69a      	b.n	800c772 <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART4_TX);	
 800ca3c:	4ab0      	ldr	r2, [pc, #704]	; (800cd00 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800ca3e:	23a8      	movs	r3, #168	; 0xa8
 800ca40:	58d4      	ldr	r4, [r2, r3]
 800ca42:	250f      	movs	r5, #15
 800ca44:	43ac      	bics	r4, r5
 800ca46:	50d4      	str	r4, [r2, r3]
 800ca48:	58d4      	ldr	r4, [r2, r3]
 800ca4a:	3d04      	subs	r5, #4
 800ca4c:	432c      	orrs	r4, r5
 800ca4e:	50d4      	str	r4, [r2, r3]
 800ca50:	e68f      	b.n	800c772 <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART4_TX);	
 800ca52:	4aab      	ldr	r2, [pc, #684]	; (800cd00 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800ca54:	23a8      	movs	r3, #168	; 0xa8
 800ca56:	58d4      	ldr	r4, [r2, r3]
 800ca58:	4daa      	ldr	r5, [pc, #680]	; (800cd04 <RemapAndLinkDMAtoUARTTx+0x640>)
 800ca5a:	402c      	ands	r4, r5
 800ca5c:	50d4      	str	r4, [r2, r3]
 800ca5e:	58d5      	ldr	r5, [r2, r3]
 800ca60:	24b0      	movs	r4, #176	; 0xb0
 800ca62:	0224      	lsls	r4, r4, #8
 800ca64:	432c      	orrs	r4, r5
 800ca66:	50d4      	str	r4, [r2, r3]
 800ca68:	e683      	b.n	800c772 <RemapAndLinkDMAtoUARTTx+0xae>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel2) {
 800ca6a:	680b      	ldr	r3, [r1, #0]
 800ca6c:	4aa6      	ldr	r2, [pc, #664]	; (800cd08 <RemapAndLinkDMAtoUARTTx+0x644>)
 800ca6e:	4293      	cmp	r3, r2
 800ca70:	d01b      	beq.n	800caaa <RemapAndLinkDMAtoUARTTx+0x3e6>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel4) {
 800ca72:	4aa6      	ldr	r2, [pc, #664]	; (800cd0c <RemapAndLinkDMAtoUARTTx+0x648>)
 800ca74:	4293      	cmp	r3, r2
 800ca76:	d023      	beq.n	800cac0 <RemapAndLinkDMAtoUARTTx+0x3fc>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel7) {
 800ca78:	4aa5      	ldr	r2, [pc, #660]	; (800cd10 <RemapAndLinkDMAtoUARTTx+0x64c>)
 800ca7a:	4293      	cmp	r3, r2
 800ca7c:	d02c      	beq.n	800cad8 <RemapAndLinkDMAtoUARTTx+0x414>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel1) {
 800ca7e:	4aa5      	ldr	r2, [pc, #660]	; (800cd14 <RemapAndLinkDMAtoUARTTx+0x650>)
 800ca80:	4293      	cmp	r3, r2
 800ca82:	d035      	beq.n	800caf0 <RemapAndLinkDMAtoUARTTx+0x42c>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel4) {
 800ca84:	4aa4      	ldr	r2, [pc, #656]	; (800cd18 <RemapAndLinkDMAtoUARTTx+0x654>)
 800ca86:	4293      	cmp	r3, r2
 800ca88:	d03d      	beq.n	800cb06 <RemapAndLinkDMAtoUARTTx+0x442>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel5) {
 800ca8a:	4aa4      	ldr	r2, [pc, #656]	; (800cd1c <RemapAndLinkDMAtoUARTTx+0x658>)
 800ca8c:	4293      	cmp	r3, r2
 800ca8e:	d000      	beq.n	800ca92 <RemapAndLinkDMAtoUARTTx+0x3ce>
 800ca90:	e66f      	b.n	800c772 <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART5_TX);					
 800ca92:	4a9b      	ldr	r2, [pc, #620]	; (800cd00 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800ca94:	23a8      	movs	r3, #168	; 0xa8
 800ca96:	58d4      	ldr	r4, [r2, r3]
 800ca98:	4da1      	ldr	r5, [pc, #644]	; (800cd20 <RemapAndLinkDMAtoUARTTx+0x65c>)
 800ca9a:	402c      	ands	r4, r5
 800ca9c:	50d4      	str	r4, [r2, r3]
 800ca9e:	58d5      	ldr	r5, [r2, r3]
 800caa0:	24c0      	movs	r4, #192	; 0xc0
 800caa2:	0324      	lsls	r4, r4, #12
 800caa4:	432c      	orrs	r4, r5
 800caa6:	50d4      	str	r4, [r2, r3]
 800caa8:	e663      	b.n	800c772 <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART5_TX);
 800caaa:	4a93      	ldr	r2, [pc, #588]	; (800ccf8 <RemapAndLinkDMAtoUARTTx+0x634>)
 800caac:	23a8      	movs	r3, #168	; 0xa8
 800caae:	58d4      	ldr	r4, [r2, r3]
 800cab0:	25f0      	movs	r5, #240	; 0xf0
 800cab2:	43ac      	bics	r4, r5
 800cab4:	50d4      	str	r4, [r2, r3]
 800cab6:	58d4      	ldr	r4, [r2, r3]
 800cab8:	3d30      	subs	r5, #48	; 0x30
 800caba:	432c      	orrs	r4, r5
 800cabc:	50d4      	str	r4, [r2, r3]
 800cabe:	e658      	b.n	800c772 <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART5_TX);
 800cac0:	4a8d      	ldr	r2, [pc, #564]	; (800ccf8 <RemapAndLinkDMAtoUARTTx+0x634>)
 800cac2:	23a8      	movs	r3, #168	; 0xa8
 800cac4:	58d4      	ldr	r4, [r2, r3]
 800cac6:	4d8f      	ldr	r5, [pc, #572]	; (800cd04 <RemapAndLinkDMAtoUARTTx+0x640>)
 800cac8:	402c      	ands	r4, r5
 800caca:	50d4      	str	r4, [r2, r3]
 800cacc:	58d5      	ldr	r5, [r2, r3]
 800cace:	24c0      	movs	r4, #192	; 0xc0
 800cad0:	0224      	lsls	r4, r4, #8
 800cad2:	432c      	orrs	r4, r5
 800cad4:	50d4      	str	r4, [r2, r3]
 800cad6:	e64c      	b.n	800c772 <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART5_TX);		
 800cad8:	4a87      	ldr	r2, [pc, #540]	; (800ccf8 <RemapAndLinkDMAtoUARTTx+0x634>)
 800cada:	23a8      	movs	r3, #168	; 0xa8
 800cadc:	58d4      	ldr	r4, [r2, r3]
 800cade:	4d87      	ldr	r5, [pc, #540]	; (800ccfc <RemapAndLinkDMAtoUARTTx+0x638>)
 800cae0:	402c      	ands	r4, r5
 800cae2:	50d4      	str	r4, [r2, r3]
 800cae4:	58d5      	ldr	r5, [r2, r3]
 800cae6:	24c0      	movs	r4, #192	; 0xc0
 800cae8:	0524      	lsls	r4, r4, #20
 800caea:	432c      	orrs	r4, r5
 800caec:	50d4      	str	r4, [r2, r3]
 800caee:	e640      	b.n	800c772 <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART5_TX);	
 800caf0:	4a83      	ldr	r2, [pc, #524]	; (800cd00 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800caf2:	23a8      	movs	r3, #168	; 0xa8
 800caf4:	58d4      	ldr	r4, [r2, r3]
 800caf6:	250f      	movs	r5, #15
 800caf8:	43ac      	bics	r4, r5
 800cafa:	50d4      	str	r4, [r2, r3]
 800cafc:	58d4      	ldr	r4, [r2, r3]
 800cafe:	3d03      	subs	r5, #3
 800cb00:	432c      	orrs	r4, r5
 800cb02:	50d4      	str	r4, [r2, r3]
 800cb04:	e635      	b.n	800c772 <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART5_TX);	
 800cb06:	4a7e      	ldr	r2, [pc, #504]	; (800cd00 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800cb08:	23a8      	movs	r3, #168	; 0xa8
 800cb0a:	58d4      	ldr	r4, [r2, r3]
 800cb0c:	4d7d      	ldr	r5, [pc, #500]	; (800cd04 <RemapAndLinkDMAtoUARTTx+0x640>)
 800cb0e:	402c      	ands	r4, r5
 800cb10:	50d4      	str	r4, [r2, r3]
 800cb12:	58d5      	ldr	r5, [r2, r3]
 800cb14:	24c0      	movs	r4, #192	; 0xc0
 800cb16:	0224      	lsls	r4, r4, #8
 800cb18:	432c      	orrs	r4, r5
 800cb1a:	50d4      	str	r4, [r2, r3]
 800cb1c:	e629      	b.n	800c772 <RemapAndLinkDMAtoUARTTx+0xae>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel2) {
 800cb1e:	680b      	ldr	r3, [r1, #0]
 800cb20:	4a79      	ldr	r2, [pc, #484]	; (800cd08 <RemapAndLinkDMAtoUARTTx+0x644>)
 800cb22:	4293      	cmp	r3, r2
 800cb24:	d01b      	beq.n	800cb5e <RemapAndLinkDMAtoUARTTx+0x49a>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel4) {
 800cb26:	4a79      	ldr	r2, [pc, #484]	; (800cd0c <RemapAndLinkDMAtoUARTTx+0x648>)
 800cb28:	4293      	cmp	r3, r2
 800cb2a:	d023      	beq.n	800cb74 <RemapAndLinkDMAtoUARTTx+0x4b0>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel7) {
 800cb2c:	4a78      	ldr	r2, [pc, #480]	; (800cd10 <RemapAndLinkDMAtoUARTTx+0x64c>)
 800cb2e:	4293      	cmp	r3, r2
 800cb30:	d02c      	beq.n	800cb8c <RemapAndLinkDMAtoUARTTx+0x4c8>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel1) {
 800cb32:	4a78      	ldr	r2, [pc, #480]	; (800cd14 <RemapAndLinkDMAtoUARTTx+0x650>)
 800cb34:	4293      	cmp	r3, r2
 800cb36:	d035      	beq.n	800cba4 <RemapAndLinkDMAtoUARTTx+0x4e0>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel4) {
 800cb38:	4a77      	ldr	r2, [pc, #476]	; (800cd18 <RemapAndLinkDMAtoUARTTx+0x654>)
 800cb3a:	4293      	cmp	r3, r2
 800cb3c:	d03d      	beq.n	800cbba <RemapAndLinkDMAtoUARTTx+0x4f6>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel5) {
 800cb3e:	4a77      	ldr	r2, [pc, #476]	; (800cd1c <RemapAndLinkDMAtoUARTTx+0x658>)
 800cb40:	4293      	cmp	r3, r2
 800cb42:	d000      	beq.n	800cb46 <RemapAndLinkDMAtoUARTTx+0x482>
 800cb44:	e615      	b.n	800c772 <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART6_TX);					
 800cb46:	4a6e      	ldr	r2, [pc, #440]	; (800cd00 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800cb48:	23a8      	movs	r3, #168	; 0xa8
 800cb4a:	58d4      	ldr	r4, [r2, r3]
 800cb4c:	4d74      	ldr	r5, [pc, #464]	; (800cd20 <RemapAndLinkDMAtoUARTTx+0x65c>)
 800cb4e:	402c      	ands	r4, r5
 800cb50:	50d4      	str	r4, [r2, r3]
 800cb52:	58d5      	ldr	r5, [r2, r3]
 800cb54:	24d0      	movs	r4, #208	; 0xd0
 800cb56:	0324      	lsls	r4, r4, #12
 800cb58:	432c      	orrs	r4, r5
 800cb5a:	50d4      	str	r4, [r2, r3]
 800cb5c:	e609      	b.n	800c772 <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART6_TX);
 800cb5e:	4a66      	ldr	r2, [pc, #408]	; (800ccf8 <RemapAndLinkDMAtoUARTTx+0x634>)
 800cb60:	23a8      	movs	r3, #168	; 0xa8
 800cb62:	58d4      	ldr	r4, [r2, r3]
 800cb64:	25f0      	movs	r5, #240	; 0xf0
 800cb66:	43ac      	bics	r4, r5
 800cb68:	50d4      	str	r4, [r2, r3]
 800cb6a:	58d4      	ldr	r4, [r2, r3]
 800cb6c:	3d20      	subs	r5, #32
 800cb6e:	432c      	orrs	r4, r5
 800cb70:	50d4      	str	r4, [r2, r3]
 800cb72:	e5fe      	b.n	800c772 <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART6_TX);
 800cb74:	4a60      	ldr	r2, [pc, #384]	; (800ccf8 <RemapAndLinkDMAtoUARTTx+0x634>)
 800cb76:	23a8      	movs	r3, #168	; 0xa8
 800cb78:	58d4      	ldr	r4, [r2, r3]
 800cb7a:	4d62      	ldr	r5, [pc, #392]	; (800cd04 <RemapAndLinkDMAtoUARTTx+0x640>)
 800cb7c:	402c      	ands	r4, r5
 800cb7e:	50d4      	str	r4, [r2, r3]
 800cb80:	58d5      	ldr	r5, [r2, r3]
 800cb82:	24d0      	movs	r4, #208	; 0xd0
 800cb84:	0224      	lsls	r4, r4, #8
 800cb86:	432c      	orrs	r4, r5
 800cb88:	50d4      	str	r4, [r2, r3]
 800cb8a:	e5f2      	b.n	800c772 <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART6_TX);		
 800cb8c:	4a5a      	ldr	r2, [pc, #360]	; (800ccf8 <RemapAndLinkDMAtoUARTTx+0x634>)
 800cb8e:	23a8      	movs	r3, #168	; 0xa8
 800cb90:	58d4      	ldr	r4, [r2, r3]
 800cb92:	4d5a      	ldr	r5, [pc, #360]	; (800ccfc <RemapAndLinkDMAtoUARTTx+0x638>)
 800cb94:	402c      	ands	r4, r5
 800cb96:	50d4      	str	r4, [r2, r3]
 800cb98:	58d5      	ldr	r5, [r2, r3]
 800cb9a:	24d0      	movs	r4, #208	; 0xd0
 800cb9c:	0524      	lsls	r4, r4, #20
 800cb9e:	432c      	orrs	r4, r5
 800cba0:	50d4      	str	r4, [r2, r3]
 800cba2:	e5e6      	b.n	800c772 <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART6_TX);	
 800cba4:	4a56      	ldr	r2, [pc, #344]	; (800cd00 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800cba6:	23a8      	movs	r3, #168	; 0xa8
 800cba8:	58d4      	ldr	r4, [r2, r3]
 800cbaa:	250f      	movs	r5, #15
 800cbac:	43ac      	bics	r4, r5
 800cbae:	50d4      	str	r4, [r2, r3]
 800cbb0:	58d4      	ldr	r4, [r2, r3]
 800cbb2:	3d02      	subs	r5, #2
 800cbb4:	432c      	orrs	r4, r5
 800cbb6:	50d4      	str	r4, [r2, r3]
 800cbb8:	e5db      	b.n	800c772 <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART6_TX);	
 800cbba:	4a51      	ldr	r2, [pc, #324]	; (800cd00 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800cbbc:	23a8      	movs	r3, #168	; 0xa8
 800cbbe:	58d4      	ldr	r4, [r2, r3]
 800cbc0:	4d50      	ldr	r5, [pc, #320]	; (800cd04 <RemapAndLinkDMAtoUARTTx+0x640>)
 800cbc2:	402c      	ands	r4, r5
 800cbc4:	50d4      	str	r4, [r2, r3]
 800cbc6:	58d5      	ldr	r5, [r2, r3]
 800cbc8:	24d0      	movs	r4, #208	; 0xd0
 800cbca:	0224      	lsls	r4, r4, #8
 800cbcc:	432c      	orrs	r4, r5
 800cbce:	50d4      	str	r4, [r2, r3]
 800cbd0:	e5cf      	b.n	800c772 <RemapAndLinkDMAtoUARTTx+0xae>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel2) {
 800cbd2:	680b      	ldr	r3, [r1, #0]
 800cbd4:	4a4c      	ldr	r2, [pc, #304]	; (800cd08 <RemapAndLinkDMAtoUARTTx+0x644>)
 800cbd6:	4293      	cmp	r3, r2
 800cbd8:	d01b      	beq.n	800cc12 <RemapAndLinkDMAtoUARTTx+0x54e>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel4) {
 800cbda:	4a4c      	ldr	r2, [pc, #304]	; (800cd0c <RemapAndLinkDMAtoUARTTx+0x648>)
 800cbdc:	4293      	cmp	r3, r2
 800cbde:	d023      	beq.n	800cc28 <RemapAndLinkDMAtoUARTTx+0x564>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel7) {
 800cbe0:	4a4b      	ldr	r2, [pc, #300]	; (800cd10 <RemapAndLinkDMAtoUARTTx+0x64c>)
 800cbe2:	4293      	cmp	r3, r2
 800cbe4:	d02c      	beq.n	800cc40 <RemapAndLinkDMAtoUARTTx+0x57c>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel1) {
 800cbe6:	4a4b      	ldr	r2, [pc, #300]	; (800cd14 <RemapAndLinkDMAtoUARTTx+0x650>)
 800cbe8:	4293      	cmp	r3, r2
 800cbea:	d035      	beq.n	800cc58 <RemapAndLinkDMAtoUARTTx+0x594>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel4) {
 800cbec:	4a4a      	ldr	r2, [pc, #296]	; (800cd18 <RemapAndLinkDMAtoUARTTx+0x654>)
 800cbee:	4293      	cmp	r3, r2
 800cbf0:	d03d      	beq.n	800cc6e <RemapAndLinkDMAtoUARTTx+0x5aa>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel5) {
 800cbf2:	4a4a      	ldr	r2, [pc, #296]	; (800cd1c <RemapAndLinkDMAtoUARTTx+0x658>)
 800cbf4:	4293      	cmp	r3, r2
 800cbf6:	d000      	beq.n	800cbfa <RemapAndLinkDMAtoUARTTx+0x536>
 800cbf8:	e5bb      	b.n	800c772 <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART7_TX);				
 800cbfa:	4a41      	ldr	r2, [pc, #260]	; (800cd00 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800cbfc:	23a8      	movs	r3, #168	; 0xa8
 800cbfe:	58d4      	ldr	r4, [r2, r3]
 800cc00:	4d47      	ldr	r5, [pc, #284]	; (800cd20 <RemapAndLinkDMAtoUARTTx+0x65c>)
 800cc02:	402c      	ands	r4, r5
 800cc04:	50d4      	str	r4, [r2, r3]
 800cc06:	58d5      	ldr	r5, [r2, r3]
 800cc08:	24e0      	movs	r4, #224	; 0xe0
 800cc0a:	0324      	lsls	r4, r4, #12
 800cc0c:	432c      	orrs	r4, r5
 800cc0e:	50d4      	str	r4, [r2, r3]
 800cc10:	e5af      	b.n	800c772 <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART7_TX);
 800cc12:	4a39      	ldr	r2, [pc, #228]	; (800ccf8 <RemapAndLinkDMAtoUARTTx+0x634>)
 800cc14:	23a8      	movs	r3, #168	; 0xa8
 800cc16:	58d4      	ldr	r4, [r2, r3]
 800cc18:	25f0      	movs	r5, #240	; 0xf0
 800cc1a:	43ac      	bics	r4, r5
 800cc1c:	50d4      	str	r4, [r2, r3]
 800cc1e:	58d4      	ldr	r4, [r2, r3]
 800cc20:	3d10      	subs	r5, #16
 800cc22:	432c      	orrs	r4, r5
 800cc24:	50d4      	str	r4, [r2, r3]
 800cc26:	e5a4      	b.n	800c772 <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART7_TX);
 800cc28:	4a33      	ldr	r2, [pc, #204]	; (800ccf8 <RemapAndLinkDMAtoUARTTx+0x634>)
 800cc2a:	23a8      	movs	r3, #168	; 0xa8
 800cc2c:	58d4      	ldr	r4, [r2, r3]
 800cc2e:	4d35      	ldr	r5, [pc, #212]	; (800cd04 <RemapAndLinkDMAtoUARTTx+0x640>)
 800cc30:	402c      	ands	r4, r5
 800cc32:	50d4      	str	r4, [r2, r3]
 800cc34:	58d5      	ldr	r5, [r2, r3]
 800cc36:	24e0      	movs	r4, #224	; 0xe0
 800cc38:	0224      	lsls	r4, r4, #8
 800cc3a:	432c      	orrs	r4, r5
 800cc3c:	50d4      	str	r4, [r2, r3]
 800cc3e:	e598      	b.n	800c772 <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART7_TX);		
 800cc40:	4a2d      	ldr	r2, [pc, #180]	; (800ccf8 <RemapAndLinkDMAtoUARTTx+0x634>)
 800cc42:	23a8      	movs	r3, #168	; 0xa8
 800cc44:	58d4      	ldr	r4, [r2, r3]
 800cc46:	4d2d      	ldr	r5, [pc, #180]	; (800ccfc <RemapAndLinkDMAtoUARTTx+0x638>)
 800cc48:	402c      	ands	r4, r5
 800cc4a:	50d4      	str	r4, [r2, r3]
 800cc4c:	58d5      	ldr	r5, [r2, r3]
 800cc4e:	24e0      	movs	r4, #224	; 0xe0
 800cc50:	0524      	lsls	r4, r4, #20
 800cc52:	432c      	orrs	r4, r5
 800cc54:	50d4      	str	r4, [r2, r3]
 800cc56:	e58c      	b.n	800c772 <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART7_TX);	
 800cc58:	4a29      	ldr	r2, [pc, #164]	; (800cd00 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800cc5a:	23a8      	movs	r3, #168	; 0xa8
 800cc5c:	58d4      	ldr	r4, [r2, r3]
 800cc5e:	250f      	movs	r5, #15
 800cc60:	43ac      	bics	r4, r5
 800cc62:	50d4      	str	r4, [r2, r3]
 800cc64:	58d4      	ldr	r4, [r2, r3]
 800cc66:	3d01      	subs	r5, #1
 800cc68:	432c      	orrs	r4, r5
 800cc6a:	50d4      	str	r4, [r2, r3]
 800cc6c:	e581      	b.n	800c772 <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART7_TX);	
 800cc6e:	4a24      	ldr	r2, [pc, #144]	; (800cd00 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800cc70:	23a8      	movs	r3, #168	; 0xa8
 800cc72:	58d4      	ldr	r4, [r2, r3]
 800cc74:	4d23      	ldr	r5, [pc, #140]	; (800cd04 <RemapAndLinkDMAtoUARTTx+0x640>)
 800cc76:	402c      	ands	r4, r5
 800cc78:	50d4      	str	r4, [r2, r3]
 800cc7a:	58d5      	ldr	r5, [r2, r3]
 800cc7c:	24e0      	movs	r4, #224	; 0xe0
 800cc7e:	0224      	lsls	r4, r4, #8
 800cc80:	432c      	orrs	r4, r5
 800cc82:	50d4      	str	r4, [r2, r3]
 800cc84:	e575      	b.n	800c772 <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART8_TX);
 800cc86:	4a1c      	ldr	r2, [pc, #112]	; (800ccf8 <RemapAndLinkDMAtoUARTTx+0x634>)
 800cc88:	23a8      	movs	r3, #168	; 0xa8
 800cc8a:	58d5      	ldr	r5, [r2, r3]
 800cc8c:	26f0      	movs	r6, #240	; 0xf0
 800cc8e:	43b5      	bics	r5, r6
 800cc90:	50d5      	str	r5, [r2, r3]
 800cc92:	58d4      	ldr	r4, [r2, r3]
 800cc94:	4334      	orrs	r4, r6
 800cc96:	50d4      	str	r4, [r2, r3]
 800cc98:	e56b      	b.n	800c772 <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART8_TX);
 800cc9a:	4a17      	ldr	r2, [pc, #92]	; (800ccf8 <RemapAndLinkDMAtoUARTTx+0x634>)
 800cc9c:	23a8      	movs	r3, #168	; 0xa8
 800cc9e:	58d4      	ldr	r4, [r2, r3]
 800cca0:	4d18      	ldr	r5, [pc, #96]	; (800cd04 <RemapAndLinkDMAtoUARTTx+0x640>)
 800cca2:	402c      	ands	r4, r5
 800cca4:	50d4      	str	r4, [r2, r3]
 800cca6:	58d5      	ldr	r5, [r2, r3]
 800cca8:	24f0      	movs	r4, #240	; 0xf0
 800ccaa:	0224      	lsls	r4, r4, #8
 800ccac:	432c      	orrs	r4, r5
 800ccae:	50d4      	str	r4, [r2, r3]
 800ccb0:	e55f      	b.n	800c772 <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART8_TX);		
 800ccb2:	4a11      	ldr	r2, [pc, #68]	; (800ccf8 <RemapAndLinkDMAtoUARTTx+0x634>)
 800ccb4:	23a8      	movs	r3, #168	; 0xa8
 800ccb6:	58d4      	ldr	r4, [r2, r3]
 800ccb8:	4d10      	ldr	r5, [pc, #64]	; (800ccfc <RemapAndLinkDMAtoUARTTx+0x638>)
 800ccba:	402c      	ands	r4, r5
 800ccbc:	50d4      	str	r4, [r2, r3]
 800ccbe:	58d5      	ldr	r5, [r2, r3]
 800ccc0:	24f0      	movs	r4, #240	; 0xf0
 800ccc2:	0524      	lsls	r4, r4, #20
 800ccc4:	432c      	orrs	r4, r5
 800ccc6:	50d4      	str	r4, [r2, r3]
 800ccc8:	e553      	b.n	800c772 <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART8_TX);	
 800ccca:	4a0d      	ldr	r2, [pc, #52]	; (800cd00 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800cccc:	23a8      	movs	r3, #168	; 0xa8
 800ccce:	58d5      	ldr	r5, [r2, r3]
 800ccd0:	260f      	movs	r6, #15
 800ccd2:	43b5      	bics	r5, r6
 800ccd4:	50d5      	str	r5, [r2, r3]
 800ccd6:	58d4      	ldr	r4, [r2, r3]
 800ccd8:	4334      	orrs	r4, r6
 800ccda:	50d4      	str	r4, [r2, r3]
 800ccdc:	e549      	b.n	800c772 <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART8_TX);	
 800ccde:	4a08      	ldr	r2, [pc, #32]	; (800cd00 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800cce0:	23a8      	movs	r3, #168	; 0xa8
 800cce2:	58d4      	ldr	r4, [r2, r3]
 800cce4:	4d07      	ldr	r5, [pc, #28]	; (800cd04 <RemapAndLinkDMAtoUARTTx+0x640>)
 800cce6:	402c      	ands	r4, r5
 800cce8:	50d4      	str	r4, [r2, r3]
 800ccea:	58d5      	ldr	r5, [r2, r3]
 800ccec:	24f0      	movs	r4, #240	; 0xf0
 800ccee:	0224      	lsls	r4, r4, #8
 800ccf0:	432c      	orrs	r4, r5
 800ccf2:	50d4      	str	r4, [r2, r3]
 800ccf4:	e53d      	b.n	800c772 <RemapAndLinkDMAtoUARTTx+0xae>
 800ccf6:	46c0      	nop			; (mov r8, r8)
 800ccf8:	40020000 	.word	0x40020000
 800ccfc:	f0ffffff 	.word	0xf0ffffff
 800cd00:	40020400 	.word	0x40020400
 800cd04:	ffff0fff 	.word	0xffff0fff
 800cd08:	4002001c 	.word	0x4002001c
 800cd0c:	40020044 	.word	0x40020044
 800cd10:	40020080 	.word	0x40020080
 800cd14:	40020408 	.word	0x40020408
 800cd18:	40020444 	.word	0x40020444
 800cd1c:	40020458 	.word	0x40020458
 800cd20:	fff0ffff 	.word	0xfff0ffff

0800cd24 <DMA_MSG_TX_Setup>:
{	
 800cd24:	b510      	push	{r4, lr}
	if (msgTxDMA[0].Parent == NULL)
 800cd26:	4b0d      	ldr	r3, [pc, #52]	; (800cd5c <DMA_MSG_TX_Setup+0x38>)
 800cd28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd2a:	2b00      	cmp	r3, #0
 800cd2c:	d012      	beq.n	800cd54 <DMA_MSG_TX_Setup+0x30>
	else if (msgTxDMA[1].Parent == NULL)
 800cd2e:	4b0b      	ldr	r3, [pc, #44]	; (800cd5c <DMA_MSG_TX_Setup+0x38>)
 800cd30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cd32:	2b00      	cmp	r3, #0
 800cd34:	d010      	beq.n	800cd58 <DMA_MSG_TX_Setup+0x34>
	else if (msgTxDMA[2].Parent == NULL)
 800cd36:	4a09      	ldr	r2, [pc, #36]	; (800cd5c <DMA_MSG_TX_Setup+0x38>)
 800cd38:	2394      	movs	r3, #148	; 0x94
 800cd3a:	58d3      	ldr	r3, [r2, r3]
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	d007      	beq.n	800cd50 <DMA_MSG_TX_Setup+0x2c>
	RemapAndLinkDMAtoUARTTx(huart, hDMA);
 800cd40:	0021      	movs	r1, r4
 800cd42:	f7ff fcbf 	bl	800c6c4 <RemapAndLinkDMAtoUARTTx>
	SetupDMAInterrupts(hDMA, MSG_DMA_INT_PRIORITY);
 800cd46:	2100      	movs	r1, #0
 800cd48:	0020      	movs	r0, r4
 800cd4a:	f7ff f853 	bl	800bdf4 <SetupDMAInterrupts>
}
 800cd4e:	bd10      	pop	{r4, pc}
		hDMA = &msgTxDMA[2];  
 800cd50:	4c03      	ldr	r4, [pc, #12]	; (800cd60 <DMA_MSG_TX_Setup+0x3c>)
 800cd52:	e7f5      	b.n	800cd40 <DMA_MSG_TX_Setup+0x1c>
		hDMA = &msgTxDMA[0];
 800cd54:	4c01      	ldr	r4, [pc, #4]	; (800cd5c <DMA_MSG_TX_Setup+0x38>)
 800cd56:	e7f3      	b.n	800cd40 <DMA_MSG_TX_Setup+0x1c>
		hDMA = &msgTxDMA[1];
 800cd58:	4c02      	ldr	r4, [pc, #8]	; (800cd64 <DMA_MSG_TX_Setup+0x40>)
 800cd5a:	e7f1      	b.n	800cd40 <DMA_MSG_TX_Setup+0x1c>
 800cd5c:	200012bc 	.word	0x200012bc
 800cd60:	2000132c 	.word	0x2000132c
 800cd64:	200012f4 	.word	0x200012f4

0800cd68 <CRC_Init>:
/*-----------------------------------------------------------*/
/* Hardware CRC ---------------------------------------------*/
/*-----------------------------------------------------------*/

void CRC_Init(void)
{
 800cd68:	b510      	push	{r4, lr}
  hcrc.Instance = CRC;
 800cd6a:	4807      	ldr	r0, [pc, #28]	; (800cd88 <CRC_Init+0x20>)
 800cd6c:	4b07      	ldr	r3, [pc, #28]	; (800cd8c <CRC_Init+0x24>)
 800cd6e:	6003      	str	r3, [r0, #0]
	hcrc.Init.CRCLength = CRC_POLYLENGTH_8B;		// Do not change this since it is used for message CRC8
 800cd70:	2310      	movs	r3, #16
 800cd72:	60c3      	str	r3, [r0, #12]
	hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;    
 800cd74:	2300      	movs	r3, #0
 800cd76:	7143      	strb	r3, [r0, #5]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800cd78:	7103      	strb	r3, [r0, #4]
	hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;    
 800cd7a:	6143      	str	r3, [r0, #20]
	hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;    
 800cd7c:	6183      	str	r3, [r0, #24]
	hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_WORDS;
 800cd7e:	3303      	adds	r3, #3
 800cd80:	6203      	str	r3, [r0, #32]
	HAL_CRC_Init(&hcrc);
 800cd82:	f003 fa4d 	bl	8010220 <HAL_CRC_Init>
}
 800cd86:	bd10      	pop	{r4, pc}
 800cd88:	200067ec 	.word	0x200067ec
 800cd8c:	40023000 	.word	0x40023000

0800cd90 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 800cd90:	b082      	sub	sp, #8
	/* Enable peripheral clock */
	__HAL_RCC_CRC_CLK_ENABLE();
 800cd92:	4a05      	ldr	r2, [pc, #20]	; (800cda8 <HAL_CRC_MspInit+0x18>)
 800cd94:	6951      	ldr	r1, [r2, #20]
 800cd96:	2340      	movs	r3, #64	; 0x40
 800cd98:	4319      	orrs	r1, r3
 800cd9a:	6151      	str	r1, [r2, #20]
 800cd9c:	6952      	ldr	r2, [r2, #20]
 800cd9e:	4013      	ands	r3, r2
 800cda0:	9301      	str	r3, [sp, #4]
 800cda2:	9b01      	ldr	r3, [sp, #4]
}
 800cda4:	b002      	add	sp, #8
 800cda6:	4770      	bx	lr
 800cda8:	40021000 	.word	0x40021000

0800cdac <CalculateCRC8>:
	/* Disable peripheral clock */
	__HAL_RCC_CRC_CLK_DISABLE();
}

uint8_t  CalculateCRC8(uint32_t pBuffer[], uint16_t size)
{
 800cdac:	b570      	push	{r4, r5, r6, lr}
 800cdae:	0004      	movs	r4, r0
 800cdb0:	000d      	movs	r5, r1
	uint8_t pTemp;
	//uint32_t crcBuffer[size]=*pData;
	/* check if the passed variables are null */
	if (NULL!=pBuffer && 0!=size)
 800cdb2:	2800      	cmp	r0, #0
 800cdb4:	d015      	beq.n	800cde2 <CalculateCRC8+0x36>
			pTemp=HAL_CRC_Accumulate(&hcrc, &pBuffer[(size/4)*4], 1);
		}
		return pTemp;
	}
	else
	return 0;
 800cdb6:	2000      	movs	r0, #0
	if (NULL!=pBuffer && 0!=size)
 800cdb8:	2900      	cmp	r1, #0
 800cdba:	d100      	bne.n	800cdbe <CalculateCRC8+0x12>
}
 800cdbc:	bd70      	pop	{r4, r5, r6, pc}
		pTemp=HAL_CRC_Calculate(&hcrc, pBuffer, size/4);
 800cdbe:	088e      	lsrs	r6, r1, #2
 800cdc0:	0032      	movs	r2, r6
 800cdc2:	0021      	movs	r1, r4
 800cdc4:	4808      	ldr	r0, [pc, #32]	; (800cde8 <CalculateCRC8+0x3c>)
 800cdc6:	f003 fa87 	bl	80102d8 <HAL_CRC_Calculate>
		if ((size%4)!=0)
 800cdca:	07ab      	lsls	r3, r5, #30
 800cdcc:	d101      	bne.n	800cdd2 <CalculateCRC8+0x26>
		pTemp=HAL_CRC_Calculate(&hcrc, pBuffer, size/4);
 800cdce:	b2c0      	uxtb	r0, r0
 800cdd0:	e7f4      	b.n	800cdbc <CalculateCRC8+0x10>
			pTemp=HAL_CRC_Accumulate(&hcrc, &pBuffer[(size/4)*4], 1);
 800cdd2:	0131      	lsls	r1, r6, #4
 800cdd4:	1861      	adds	r1, r4, r1
 800cdd6:	2201      	movs	r2, #1
 800cdd8:	4803      	ldr	r0, [pc, #12]	; (800cde8 <CalculateCRC8+0x3c>)
 800cdda:	f003 fa52 	bl	8010282 <HAL_CRC_Accumulate>
 800cdde:	b2c0      	uxtb	r0, r0
 800cde0:	e7ec      	b.n	800cdbc <CalculateCRC8+0x10>
	return 0;
 800cde2:	2000      	movs	r0, #0
 800cde4:	e7ea      	b.n	800cdbc <CalculateCRC8+0x10>
 800cde6:	46c0      	nop			; (mov r8, r8)
 800cde8:	200067ec 	.word	0x200067ec

0800cdec <IND_LED_Init>:
  IND_ToF_Init();
}

//-- Configure indicator LED
void IND_LED_Init(void)
{
 800cdec:	b500      	push	{lr}
 800cdee:	b087      	sub	sp, #28
	GPIO_InitTypeDef GPIO_InitStruct;

	GPIO_InitStruct.Pin = _IND_LED_PIN;
 800cdf0:	2380      	movs	r3, #128	; 0x80
 800cdf2:	011b      	lsls	r3, r3, #4
 800cdf4:	9301      	str	r3, [sp, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800cdf6:	2301      	movs	r3, #1
 800cdf8:	9302      	str	r3, [sp, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cdfa:	2300      	movs	r3, #0
 800cdfc:	9303      	str	r3, [sp, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800cdfe:	3303      	adds	r3, #3
 800ce00:	9304      	str	r3, [sp, #16]
	HAL_GPIO_Init(_IND_LED_PORT, &GPIO_InitStruct);
 800ce02:	2090      	movs	r0, #144	; 0x90
 800ce04:	a901      	add	r1, sp, #4
 800ce06:	05c0      	lsls	r0, r0, #23
 800ce08:	f004 f90a 	bl	8011020 <HAL_GPIO_Init>
}
 800ce0c:	b007      	add	sp, #28
 800ce0e:	bd00      	pop	{pc}

0800ce10 <IND_ToF_Init>:

//-- Configure indicator connection pins with VL53L0X ic
void IND_ToF_Init(void)
{
 800ce10:	b570      	push	{r4, r5, r6, lr}
 800ce12:	b086      	sub	sp, #24

  /**I2C2 GPIO Configuration
  PB13     ------> I2C2_SCL
  PB14     ------> I2C2_SDA
  */
  GPIO_InitStruct.Pin = _TOF_I2C2_SCL_PIN;
 800ce14:	2380      	movs	r3, #128	; 0x80
 800ce16:	019b      	lsls	r3, r3, #6
 800ce18:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800ce1a:	2312      	movs	r3, #18
 800ce1c:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800ce1e:	2501      	movs	r5, #1
 800ce20:	9503      	str	r5, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800ce22:	2603      	movs	r6, #3
 800ce24:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF5_I2C2;
 800ce26:	3b0d      	subs	r3, #13
 800ce28:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(_TOF_I2C2_SCL_PORT, &GPIO_InitStruct);
 800ce2a:	4c1f      	ldr	r4, [pc, #124]	; (800cea8 <IND_ToF_Init+0x98>)
 800ce2c:	a901      	add	r1, sp, #4
 800ce2e:	0020      	movs	r0, r4
 800ce30:	f004 f8f6 	bl	8011020 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = _TOF_I2C2_SDA_PIN;
 800ce34:	2380      	movs	r3, #128	; 0x80
 800ce36:	01db      	lsls	r3, r3, #7
 800ce38:	9301      	str	r3, [sp, #4]
  HAL_GPIO_Init(_TOF_I2C2_SDA_PORT, &GPIO_InitStruct);
 800ce3a:	a901      	add	r1, sp, #4
 800ce3c:	0020      	movs	r0, r4
 800ce3e:	f004 f8ef 	bl	8011020 <HAL_GPIO_Init>

  /* Peripheral clock enable */
  __HAL_RCC_I2C2_CLK_ENABLE();
 800ce42:	4a1a      	ldr	r2, [pc, #104]	; (800ceac <IND_ToF_Init+0x9c>)
 800ce44:	69d1      	ldr	r1, [r2, #28]
 800ce46:	2080      	movs	r0, #128	; 0x80
 800ce48:	03c0      	lsls	r0, r0, #15
 800ce4a:	4301      	orrs	r1, r0
 800ce4c:	61d1      	str	r1, [r2, #28]
 800ce4e:	69d3      	ldr	r3, [r2, #28]
 800ce50:	4003      	ands	r3, r0
 800ce52:	9300      	str	r3, [sp, #0]
 800ce54:	9b00      	ldr	r3, [sp, #0]
  /* I2C2 interrupt Init */
  HAL_NVIC_SetPriority(I2C2_IRQn, 1, 0);
 800ce56:	2200      	movs	r2, #0
 800ce58:	2101      	movs	r1, #1
 800ce5a:	2018      	movs	r0, #24
 800ce5c:	f003 f90a 	bl	8010074 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2C2_IRQn);
 800ce60:	2018      	movs	r0, #24
 800ce62:	f003 f939 	bl	80100d8 <HAL_NVIC_EnableIRQ>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(_TOF_XSHUT_PORT, _TOF_XSHUT_PIN, GPIO_PIN_RESET);
 800ce66:	2200      	movs	r2, #0
 800ce68:	2101      	movs	r1, #1
 800ce6a:	0020      	movs	r0, r4
 800ce6c:	f004 f9c8 	bl	8011200 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB2 - INT */
  GPIO_InitStruct.Pin = _TOF_INT_PIN;
 800ce70:	2304      	movs	r3, #4
 800ce72:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800ce74:	4b0e      	ldr	r3, [pc, #56]	; (800ceb0 <IND_ToF_Init+0xa0>)
 800ce76:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800ce78:	9503      	str	r5, [sp, #12]
  HAL_GPIO_Init(_TOF_INT_PORT, &GPIO_InitStruct);
 800ce7a:	a901      	add	r1, sp, #4
 800ce7c:	0020      	movs	r0, r4
 800ce7e:	f004 f8cf 	bl	8011020 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 1, 0);
 800ce82:	2200      	movs	r2, #0
 800ce84:	2101      	movs	r1, #1
 800ce86:	2006      	movs	r0, #6
 800ce88:	f003 f8f4 	bl	8010074 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 800ce8c:	2006      	movs	r0, #6
 800ce8e:	f003 f923 	bl	80100d8 <HAL_NVIC_EnableIRQ>

  /*Configure GPIO pin : PB0 or PB12 - XSHUT */
  GPIO_InitStruct.Pin = _TOF_XSHUT_PIN;
 800ce92:	9501      	str	r5, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800ce94:	9502      	str	r5, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800ce96:	9503      	str	r5, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800ce98:	9604      	str	r6, [sp, #16]
  HAL_GPIO_Init(_TOF_XSHUT_PORT, &GPIO_InitStruct);
 800ce9a:	a901      	add	r1, sp, #4
 800ce9c:	0020      	movs	r0, r4
 800ce9e:	f004 f8bf 	bl	8011020 <HAL_GPIO_Init>
}
 800cea2:	b006      	add	sp, #24
 800cea4:	bd70      	pop	{r4, r5, r6, pc}
 800cea6:	46c0      	nop			; (mov r8, r8)
 800cea8:	48000400 	.word	0x48000400
 800ceac:	40021000 	.word	0x40021000
 800ceb0:	10210000 	.word	0x10210000

0800ceb4 <GPIO_Init>:
{
 800ceb4:	b500      	push	{lr}
 800ceb6:	b087      	sub	sp, #28
  __GPIOC_CLK_ENABLE();
 800ceb8:	4b19      	ldr	r3, [pc, #100]	; (800cf20 <GPIO_Init+0x6c>)
 800ceba:	6959      	ldr	r1, [r3, #20]
 800cebc:	2080      	movs	r0, #128	; 0x80
 800cebe:	0300      	lsls	r0, r0, #12
 800cec0:	4301      	orrs	r1, r0
 800cec2:	6159      	str	r1, [r3, #20]
 800cec4:	695a      	ldr	r2, [r3, #20]
 800cec6:	4002      	ands	r2, r0
 800cec8:	9201      	str	r2, [sp, #4]
 800ceca:	9a01      	ldr	r2, [sp, #4]
  __GPIOA_CLK_ENABLE();
 800cecc:	6959      	ldr	r1, [r3, #20]
 800cece:	2080      	movs	r0, #128	; 0x80
 800ced0:	0280      	lsls	r0, r0, #10
 800ced2:	4301      	orrs	r1, r0
 800ced4:	6159      	str	r1, [r3, #20]
 800ced6:	695a      	ldr	r2, [r3, #20]
 800ced8:	4002      	ands	r2, r0
 800ceda:	9202      	str	r2, [sp, #8]
 800cedc:	9a02      	ldr	r2, [sp, #8]
  __GPIOD_CLK_ENABLE();
 800cede:	6959      	ldr	r1, [r3, #20]
 800cee0:	2080      	movs	r0, #128	; 0x80
 800cee2:	0340      	lsls	r0, r0, #13
 800cee4:	4301      	orrs	r1, r0
 800cee6:	6159      	str	r1, [r3, #20]
 800cee8:	695a      	ldr	r2, [r3, #20]
 800ceea:	4002      	ands	r2, r0
 800ceec:	9203      	str	r2, [sp, #12]
 800ceee:	9a03      	ldr	r2, [sp, #12]
	__GPIOB_CLK_ENABLE();
 800cef0:	6959      	ldr	r1, [r3, #20]
 800cef2:	2080      	movs	r0, #128	; 0x80
 800cef4:	02c0      	lsls	r0, r0, #11
 800cef6:	4301      	orrs	r1, r0
 800cef8:	6159      	str	r1, [r3, #20]
 800cefa:	695a      	ldr	r2, [r3, #20]
 800cefc:	4002      	ands	r2, r0
 800cefe:	9204      	str	r2, [sp, #16]
 800cf00:	9a04      	ldr	r2, [sp, #16]
	__GPIOF_CLK_ENABLE();		// for HSE and Boot0
 800cf02:	695a      	ldr	r2, [r3, #20]
 800cf04:	2180      	movs	r1, #128	; 0x80
 800cf06:	03c9      	lsls	r1, r1, #15
 800cf08:	430a      	orrs	r2, r1
 800cf0a:	615a      	str	r2, [r3, #20]
 800cf0c:	695b      	ldr	r3, [r3, #20]
 800cf0e:	400b      	ands	r3, r1
 800cf10:	9305      	str	r3, [sp, #20]
 800cf12:	9b05      	ldr	r3, [sp, #20]
	IND_LED_Init();
 800cf14:	f7ff ff6a 	bl	800cdec <IND_LED_Init>
  IND_ToF_Init();
 800cf18:	f7ff ff7a 	bl	800ce10 <IND_ToF_Init>
}
 800cf1c:	b007      	add	sp, #28
 800cf1e:	bd00      	pop	{pc}
 800cf20:	40021000 	.word	0x40021000

0800cf24 <GetPortGPIOs>:
/*-----------------------------------------------------------*/	

/* --- Get GPIO pins and ports of this array port
*/
BOS_Status GetPortGPIOs(uint8_t port, uint32_t *TX_Port, uint16_t *TX_Pin, uint32_t *RX_Port, uint16_t *RX_Pin)
{
 800cf24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf26:	000e      	movs	r6, r1
 800cf28:	0015      	movs	r5, r2
 800cf2a:	001f      	movs	r7, r3
	BOS_Status result = BOS_OK;
	
	/* Get port UART */
	UART_HandleTypeDef* huart = GetUart(port);
 800cf2c:	f000 feba 	bl	800dca4 <GetUart>
 800cf30:	0004      	movs	r4, r0
	
	if (huart == &huart1) 
 800cf32:	4824      	ldr	r0, [pc, #144]	; (800cfc4 <GetPortGPIOs+0xa0>)
 800cf34:	4284      	cmp	r4, r0
 800cf36:	d017      	beq.n	800cf68 <GetPortGPIOs+0x44>
		*RX_Port = (uint32_t)USART1_RX_PORT;
		*RX_Pin = USART1_RX_PIN;
#endif
	} 
#ifdef _Usart2	
	else if (huart == &huart2) 
 800cf38:	4b23      	ldr	r3, [pc, #140]	; (800cfc8 <GetPortGPIOs+0xa4>)
 800cf3a:	429c      	cmp	r4, r3
 800cf3c:	d021      	beq.n	800cf82 <GetPortGPIOs+0x5e>
		*RX_Port = (uint32_t)USART2_RX_PORT;
		*RX_Pin = USART2_RX_PIN;
	} 
#endif
#ifdef _Usart3	
	else if (huart == &huart3) 
 800cf3e:	4b23      	ldr	r3, [pc, #140]	; (800cfcc <GetPortGPIOs+0xa8>)
 800cf40:	429c      	cmp	r4, r3
 800cf42:	d029      	beq.n	800cf98 <GetPortGPIOs+0x74>
		*RX_Port = (uint32_t)USART4_RX_PORT;
		*RX_Pin = USART4_RX_PIN;
	} 
#endif
#ifdef _Usart5	
	else if (huart == &huart5) 
 800cf44:	4b22      	ldr	r3, [pc, #136]	; (800cfd0 <GetPortGPIOs+0xac>)
 800cf46:	429c      	cmp	r4, r3
 800cf48:	d032      	beq.n	800cfb0 <GetPortGPIOs+0x8c>
		*RX_Port = (uint32_t)USART5_RX_PORT;
		*RX_Pin = USART5_RX_PIN;
	} 
#endif
#ifdef _Usart6	
	else if (huart == &huart6) 
 800cf4a:	4b22      	ldr	r3, [pc, #136]	; (800cfd4 <GetPortGPIOs+0xb0>)
		*RX_Port = (uint32_t)USART8_RX_PORT;
		*RX_Pin = USART8_RX_PIN;
	} 
#endif
	else
		result = BOS_ERROR;	
 800cf4c:	20ff      	movs	r0, #255	; 0xff
	else if (huart == &huart6) 
 800cf4e:	429c      	cmp	r4, r3
 800cf50:	d116      	bne.n	800cf80 <GetPortGPIOs+0x5c>
		*TX_Port = (uint32_t)USART6_TX_PORT;
 800cf52:	2390      	movs	r3, #144	; 0x90
 800cf54:	05db      	lsls	r3, r3, #23
 800cf56:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART6_TX_PIN;
 800cf58:	2210      	movs	r2, #16
 800cf5a:	802a      	strh	r2, [r5, #0]
		*RX_Port = (uint32_t)USART6_RX_PORT;
 800cf5c:	603b      	str	r3, [r7, #0]
		*RX_Pin = USART6_RX_PIN;
 800cf5e:	2320      	movs	r3, #32
 800cf60:	9a06      	ldr	r2, [sp, #24]
 800cf62:	8013      	strh	r3, [r2, #0]
	BOS_Status result = BOS_OK;
 800cf64:	2000      	movs	r0, #0
 800cf66:	e00b      	b.n	800cf80 <GetPortGPIOs+0x5c>
		*TX_Port = (uint32_t)USART1_TX_PORT;
 800cf68:	2390      	movs	r3, #144	; 0x90
 800cf6a:	05db      	lsls	r3, r3, #23
 800cf6c:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART1_TX_PIN;
 800cf6e:	2280      	movs	r2, #128	; 0x80
 800cf70:	0092      	lsls	r2, r2, #2
 800cf72:	802a      	strh	r2, [r5, #0]
		*RX_Port = (uint32_t)USART1_RX_PORT;
 800cf74:	603b      	str	r3, [r7, #0]
		*RX_Pin = USART1_RX_PIN;
 800cf76:	2380      	movs	r3, #128	; 0x80
 800cf78:	00db      	lsls	r3, r3, #3
 800cf7a:	9a06      	ldr	r2, [sp, #24]
 800cf7c:	8013      	strh	r3, [r2, #0]
	BOS_Status result = BOS_OK;
 800cf7e:	2000      	movs	r0, #0
	
	return result;	
}
 800cf80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		*TX_Port = (uint32_t)USART2_TX_PORT;
 800cf82:	2390      	movs	r3, #144	; 0x90
 800cf84:	05db      	lsls	r3, r3, #23
 800cf86:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART2_TX_PIN;
 800cf88:	2204      	movs	r2, #4
 800cf8a:	802a      	strh	r2, [r5, #0]
		*RX_Port = (uint32_t)USART2_RX_PORT;
 800cf8c:	603b      	str	r3, [r7, #0]
		*RX_Pin = USART2_RX_PIN;
 800cf8e:	2308      	movs	r3, #8
 800cf90:	9a06      	ldr	r2, [sp, #24]
 800cf92:	8013      	strh	r3, [r2, #0]
	BOS_Status result = BOS_OK;
 800cf94:	2000      	movs	r0, #0
 800cf96:	e7f3      	b.n	800cf80 <GetPortGPIOs+0x5c>
		*TX_Port = (uint32_t)USART3_TX_PORT;
 800cf98:	4b0f      	ldr	r3, [pc, #60]	; (800cfd8 <GetPortGPIOs+0xb4>)
 800cf9a:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART3_TX_PIN;
 800cf9c:	2280      	movs	r2, #128	; 0x80
 800cf9e:	00d2      	lsls	r2, r2, #3
 800cfa0:	802a      	strh	r2, [r5, #0]
		*RX_Port = (uint32_t)USART3_RX_PORT;
 800cfa2:	603b      	str	r3, [r7, #0]
		*RX_Pin = USART3_RX_PIN;
 800cfa4:	2380      	movs	r3, #128	; 0x80
 800cfa6:	011b      	lsls	r3, r3, #4
 800cfa8:	9a06      	ldr	r2, [sp, #24]
 800cfaa:	8013      	strh	r3, [r2, #0]
	BOS_Status result = BOS_OK;
 800cfac:	2000      	movs	r0, #0
 800cfae:	e7e7      	b.n	800cf80 <GetPortGPIOs+0x5c>
		*TX_Port = (uint32_t)USART5_TX_PORT;
 800cfb0:	4b09      	ldr	r3, [pc, #36]	; (800cfd8 <GetPortGPIOs+0xb4>)
 800cfb2:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART5_TX_PIN;
 800cfb4:	2208      	movs	r2, #8
 800cfb6:	802a      	strh	r2, [r5, #0]
		*RX_Port = (uint32_t)USART5_RX_PORT;
 800cfb8:	603b      	str	r3, [r7, #0]
		*RX_Pin = USART5_RX_PIN;
 800cfba:	2310      	movs	r3, #16
 800cfbc:	9a06      	ldr	r2, [sp, #24]
 800cfbe:	8013      	strh	r3, [r2, #0]
	BOS_Status result = BOS_OK;
 800cfc0:	2000      	movs	r0, #0
 800cfc2:	e7dd      	b.n	800cf80 <GetPortGPIOs+0x5c>
 800cfc4:	2000652c 	.word	0x2000652c
 800cfc8:	20006614 	.word	0x20006614
 800cfcc:	20006444 	.word	0x20006444
 800cfd0:	200064b8 	.word	0x200064b8
 800cfd4:	200065a0 	.word	0x200065a0
 800cfd8:	48000400 	.word	0x48000400

0800cfdc <IsFactoryReset>:
{
 800cfdc:	b530      	push	{r4, r5, lr}
 800cfde:	b093      	sub	sp, #76	; 0x4c
  __GPIOA_CLK_ENABLE();
 800cfe0:	4b39      	ldr	r3, [pc, #228]	; (800d0c8 <IsFactoryReset+0xec>)
 800cfe2:	6959      	ldr	r1, [r3, #20]
 800cfe4:	2080      	movs	r0, #128	; 0x80
 800cfe6:	0280      	lsls	r0, r0, #10
 800cfe8:	4301      	orrs	r1, r0
 800cfea:	6159      	str	r1, [r3, #20]
 800cfec:	695a      	ldr	r2, [r3, #20]
 800cfee:	4002      	ands	r2, r0
 800cff0:	9203      	str	r2, [sp, #12]
 800cff2:	9a03      	ldr	r2, [sp, #12]
  __GPIOB_CLK_ENABLE();
 800cff4:	6959      	ldr	r1, [r3, #20]
 800cff6:	2080      	movs	r0, #128	; 0x80
 800cff8:	02c0      	lsls	r0, r0, #11
 800cffa:	4301      	orrs	r1, r0
 800cffc:	6159      	str	r1, [r3, #20]
 800cffe:	695a      	ldr	r2, [r3, #20]
 800d000:	4002      	ands	r2, r0
 800d002:	9204      	str	r2, [sp, #16]
 800d004:	9a04      	ldr	r2, [sp, #16]
  __GPIOC_CLK_ENABLE();
 800d006:	6959      	ldr	r1, [r3, #20]
 800d008:	2080      	movs	r0, #128	; 0x80
 800d00a:	0300      	lsls	r0, r0, #12
 800d00c:	4301      	orrs	r1, r0
 800d00e:	6159      	str	r1, [r3, #20]
 800d010:	695a      	ldr	r2, [r3, #20]
 800d012:	4002      	ands	r2, r0
 800d014:	9205      	str	r2, [sp, #20]
 800d016:	9a05      	ldr	r2, [sp, #20]
	__GPIOD_CLK_ENABLE();
 800d018:	695a      	ldr	r2, [r3, #20]
 800d01a:	2180      	movs	r1, #128	; 0x80
 800d01c:	0349      	lsls	r1, r1, #13
 800d01e:	430a      	orrs	r2, r1
 800d020:	615a      	str	r2, [r3, #20]
 800d022:	695b      	ldr	r3, [r3, #20]
 800d024:	400b      	ands	r3, r1
 800d026:	9306      	str	r3, [sp, #24]
 800d028:	9b06      	ldr	r3, [sp, #24]
	GetPortGPIOs(P1, &P1_TX_Port, &P1_TX_Pin, &P1_RX_Port, &P1_RX_Pin);
 800d02a:	ab08      	add	r3, sp, #32
 800d02c:	9300      	str	r3, [sp, #0]
 800d02e:	ab0b      	add	r3, sp, #44	; 0x2c
 800d030:	2222      	movs	r2, #34	; 0x22
 800d032:	446a      	add	r2, sp
 800d034:	a90c      	add	r1, sp, #48	; 0x30
 800d036:	2001      	movs	r0, #1
 800d038:	f7ff ff74 	bl	800cf24 <GetPortGPIOs>
	GetPortGPIOs(P_LAST, &P_last_TX_Port, &P_last_TX_Pin, &P_last_RX_Port, &P_last_RX_Pin);
 800d03c:	ac07      	add	r4, sp, #28
 800d03e:	9400      	str	r4, [sp, #0]
 800d040:	ab09      	add	r3, sp, #36	; 0x24
 800d042:	221e      	movs	r2, #30
 800d044:	446a      	add	r2, sp
 800d046:	a90a      	add	r1, sp, #40	; 0x28
 800d048:	2005      	movs	r0, #5
 800d04a:	f7ff ff6b 	bl	800cf24 <GetPortGPIOs>
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800d04e:	2301      	movs	r3, #1
 800d050:	930e      	str	r3, [sp, #56]	; 0x38
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d052:	2500      	movs	r5, #0
 800d054:	950f      	str	r5, [sp, #60]	; 0x3c
	GPIO_InitStruct.Pin = P1_TX_Pin;
 800d056:	466b      	mov	r3, sp
 800d058:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800d05a:	930d      	str	r3, [sp, #52]	; 0x34
	HAL_GPIO_Init((GPIO_TypeDef *)P1_TX_Port, &GPIO_InitStruct);
 800d05c:	a90d      	add	r1, sp, #52	; 0x34
 800d05e:	980c      	ldr	r0, [sp, #48]	; 0x30
 800d060:	f003 ffde 	bl	8011020 <HAL_GPIO_Init>
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800d064:	950e      	str	r5, [sp, #56]	; 0x38
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;	
 800d066:	2302      	movs	r3, #2
 800d068:	930f      	str	r3, [sp, #60]	; 0x3c
	GPIO_InitStruct.Pin = P_last_RX_Pin;
 800d06a:	8823      	ldrh	r3, [r4, #0]
 800d06c:	930d      	str	r3, [sp, #52]	; 0x34
	HAL_GPIO_Init((GPIO_TypeDef *)P_last_RX_Port, &GPIO_InitStruct);	
 800d06e:	a90d      	add	r1, sp, #52	; 0x34
 800d070:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d072:	f003 ffd5 	bl	8011020 <HAL_GPIO_Init>
	HAL_GPIO_WritePin((GPIO_TypeDef *)P1_TX_Port,P1_TX_Pin,GPIO_PIN_RESET);
 800d076:	466b      	mov	r3, sp
 800d078:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 800d07a:	2200      	movs	r2, #0
 800d07c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800d07e:	f004 f8bf 	bl	8011200 <HAL_GPIO_WritePin>
	Delay_ms_no_rtos(5);
 800d082:	2005      	movs	r0, #5
 800d084:	f000 fc6e 	bl	800d964 <StartMilliDelay>
	if (HAL_GPIO_ReadPin((GPIO_TypeDef *)P_last_RX_Port,P_last_RX_Pin) == RESET)
 800d088:	8821      	ldrh	r1, [r4, #0]
 800d08a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d08c:	f004 f8b2 	bl	80111f4 <HAL_GPIO_ReadPin>
 800d090:	2800      	cmp	r0, #0
 800d092:	d006      	beq.n	800d0a2 <IsFactoryReset+0xc6>
	*((unsigned long *)0x20007FF0) = 0xFFFFFFFF; 
 800d094:	4b0d      	ldr	r3, [pc, #52]	; (800d0cc <IsFactoryReset+0xf0>)
 800d096:	2201      	movs	r2, #1
 800d098:	4252      	negs	r2, r2
 800d09a:	601a      	str	r2, [r3, #0]
	return 0;
 800d09c:	2000      	movs	r0, #0
}
 800d09e:	b013      	add	sp, #76	; 0x4c
 800d0a0:	bd30      	pop	{r4, r5, pc}
		HAL_GPIO_WritePin((GPIO_TypeDef *)P1_TX_Port,P1_TX_Pin,GPIO_PIN_SET);
 800d0a2:	2322      	movs	r3, #34	; 0x22
 800d0a4:	446b      	add	r3, sp
 800d0a6:	8819      	ldrh	r1, [r3, #0]
 800d0a8:	2201      	movs	r2, #1
 800d0aa:	980c      	ldr	r0, [sp, #48]	; 0x30
 800d0ac:	f004 f8a8 	bl	8011200 <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(5);
 800d0b0:	2005      	movs	r0, #5
 800d0b2:	f000 fc57 	bl	800d964 <StartMilliDelay>
		if (HAL_GPIO_ReadPin((GPIO_TypeDef *)P_last_RX_Port,P_last_RX_Pin) == SET) {
 800d0b6:	ab07      	add	r3, sp, #28
 800d0b8:	8819      	ldrh	r1, [r3, #0]
 800d0ba:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d0bc:	f004 f89a 	bl	80111f4 <HAL_GPIO_ReadPin>
 800d0c0:	2801      	cmp	r0, #1
 800d0c2:	d1e7      	bne.n	800d094 <IsFactoryReset+0xb8>
 800d0c4:	e7eb      	b.n	800d09e <IsFactoryReset+0xc2>
 800d0c6:	46c0      	nop			; (mov r8, r8)
 800d0c8:	40021000 	.word	0x40021000
 800d0cc:	20007ff0 	.word	0x20007ff0

0800d0d0 <MX_I2C2_Init>:
  MX_I2C2_Init();
}

//-- Configure indicator LED
void MX_I2C2_Init(void)
{
 800d0d0:	b510      	push	{r4, lr}

  hi2c2.Instance = I2C2;
 800d0d2:	4c0d      	ldr	r4, [pc, #52]	; (800d108 <MX_I2C2_Init+0x38>)
 800d0d4:	4b0d      	ldr	r3, [pc, #52]	; (800d10c <MX_I2C2_Init+0x3c>)
 800d0d6:	6023      	str	r3, [r4, #0]
  /* hi2c2.Init.Timing = 0x2010091A; */ /* fast mode: 400 KHz */
  hi2c2.Init.Timing = 0x20303E5D; /* Standard mode: 100 KHz */
 800d0d8:	4b0d      	ldr	r3, [pc, #52]	; (800d110 <MX_I2C2_Init+0x40>)
 800d0da:	6063      	str	r3, [r4, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800d0dc:	2300      	movs	r3, #0
 800d0de:	60a3      	str	r3, [r4, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800d0e0:	2201      	movs	r2, #1
 800d0e2:	60e2      	str	r2, [r4, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800d0e4:	6123      	str	r3, [r4, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800d0e6:	6163      	str	r3, [r4, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800d0e8:	61a3      	str	r3, [r4, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800d0ea:	61e3      	str	r3, [r4, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800d0ec:	6223      	str	r3, [r4, #32]
  HAL_I2C_Init(&hi2c2);
 800d0ee:	0020      	movs	r0, r4
 800d0f0:	f004 f996 	bl	8011420 <HAL_I2C_Init>

    /**Configure Analogue filter
    */
  HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE);
 800d0f4:	2100      	movs	r1, #0
 800d0f6:	0020      	movs	r0, r4
 800d0f8:	f004 fdce 	bl	8011c98 <HAL_I2CEx_ConfigAnalogFilter>

    /**Configure Digital filter
    */
  HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0);
 800d0fc:	2100      	movs	r1, #0
 800d0fe:	0020      	movs	r0, r4
 800d100:	f004 fe0e 	bl	8011d20 <HAL_I2CEx_ConfigDigitalFilter>
}
 800d104:	bd10      	pop	{r4, pc}
 800d106:	46c0      	nop			; (mov r8, r8)
 800d108:	20006810 	.word	0x20006810
 800d10c:	40005800 	.word	0x40005800
 800d110:	20303e5d 	.word	0x20303e5d

0800d114 <MX_I2C_Init>:
{
 800d114:	b500      	push	{lr}
 800d116:	b087      	sub	sp, #28
  __GPIOC_CLK_ENABLE();
 800d118:	4b18      	ldr	r3, [pc, #96]	; (800d17c <MX_I2C_Init+0x68>)
 800d11a:	6959      	ldr	r1, [r3, #20]
 800d11c:	2080      	movs	r0, #128	; 0x80
 800d11e:	0300      	lsls	r0, r0, #12
 800d120:	4301      	orrs	r1, r0
 800d122:	6159      	str	r1, [r3, #20]
 800d124:	695a      	ldr	r2, [r3, #20]
 800d126:	4002      	ands	r2, r0
 800d128:	9201      	str	r2, [sp, #4]
 800d12a:	9a01      	ldr	r2, [sp, #4]
  __GPIOA_CLK_ENABLE();
 800d12c:	6959      	ldr	r1, [r3, #20]
 800d12e:	2080      	movs	r0, #128	; 0x80
 800d130:	0280      	lsls	r0, r0, #10
 800d132:	4301      	orrs	r1, r0
 800d134:	6159      	str	r1, [r3, #20]
 800d136:	695a      	ldr	r2, [r3, #20]
 800d138:	4002      	ands	r2, r0
 800d13a:	9202      	str	r2, [sp, #8]
 800d13c:	9a02      	ldr	r2, [sp, #8]
  __GPIOD_CLK_ENABLE();
 800d13e:	6959      	ldr	r1, [r3, #20]
 800d140:	2080      	movs	r0, #128	; 0x80
 800d142:	0340      	lsls	r0, r0, #13
 800d144:	4301      	orrs	r1, r0
 800d146:	6159      	str	r1, [r3, #20]
 800d148:	695a      	ldr	r2, [r3, #20]
 800d14a:	4002      	ands	r2, r0
 800d14c:	9203      	str	r2, [sp, #12]
 800d14e:	9a03      	ldr	r2, [sp, #12]
  __GPIOB_CLK_ENABLE();
 800d150:	6959      	ldr	r1, [r3, #20]
 800d152:	2080      	movs	r0, #128	; 0x80
 800d154:	02c0      	lsls	r0, r0, #11
 800d156:	4301      	orrs	r1, r0
 800d158:	6159      	str	r1, [r3, #20]
 800d15a:	695a      	ldr	r2, [r3, #20]
 800d15c:	4002      	ands	r2, r0
 800d15e:	9204      	str	r2, [sp, #16]
 800d160:	9a04      	ldr	r2, [sp, #16]
  __GPIOF_CLK_ENABLE();   // for HSE and Boot0
 800d162:	695a      	ldr	r2, [r3, #20]
 800d164:	2180      	movs	r1, #128	; 0x80
 800d166:	03c9      	lsls	r1, r1, #15
 800d168:	430a      	orrs	r2, r1
 800d16a:	615a      	str	r2, [r3, #20]
 800d16c:	695b      	ldr	r3, [r3, #20]
 800d16e:	400b      	ands	r3, r1
 800d170:	9305      	str	r3, [sp, #20]
 800d172:	9b05      	ldr	r3, [sp, #20]
  MX_I2C2_Init();
 800d174:	f7ff ffac 	bl	800d0d0 <MX_I2C2_Init>
}
 800d178:	b007      	add	sp, #28
 800d17a:	bd00      	pop	{pc}
 800d17c:	40021000 	.word	0x40021000

0800d180 <VL53L0X_write_multi>:

/**
* @brief Writes the supplied byte buffer to the device
*/
int32_t VL53L0X_write_multi(uint8_t address, uint8_t index, uint8_t  *pdata, int32_t count)
{
 800d180:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d182:	46c6      	mov	lr, r8
 800d184:	b500      	push	{lr}
 800d186:	b082      	sub	sp, #8
 800d188:	0006      	movs	r6, r0
 800d18a:	000f      	movs	r7, r1
 800d18c:	4690      	mov	r8, r2
 800d18e:	001c      	movs	r4, r3
  HAL_StatusTypeDef result = HAL_ERROR;
  uint8_t *buff;

  buff = (uint8_t *)malloc(sizeof(uint8_t)*(count + 1));
 800d190:	1c58      	adds	r0, r3, #1
 800d192:	f009 f9ad 	bl	80164f0 <malloc>
 800d196:	0005      	movs	r5, r0
  buff[0] = index;
 800d198:	7007      	strb	r7, [r0, #0]
  memcpy(&buff[1],pdata, sizeof(uint8_t)*count);
 800d19a:	3001      	adds	r0, #1
 800d19c:	0022      	movs	r2, r4
 800d19e:	4641      	mov	r1, r8
 800d1a0:	f009 f9c8 	bl	8016534 <memcpy>

  address &= 0xFE;
  result = HAL_I2C_Master_Transmit(&hi2c2, address, buff, (count + 1), HAL_MAX_DELAY);
 800d1a4:	3401      	adds	r4, #1
 800d1a6:	b2a3      	uxth	r3, r4
 800d1a8:	2201      	movs	r2, #1
 800d1aa:	0031      	movs	r1, r6
 800d1ac:	4391      	bics	r1, r2
 800d1ae:	3a02      	subs	r2, #2
 800d1b0:	9200      	str	r2, [sp, #0]
 800d1b2:	002a      	movs	r2, r5
 800d1b4:	4805      	ldr	r0, [pc, #20]	; (800d1cc <VL53L0X_write_multi+0x4c>)
 800d1b6:	f004 f991 	bl	80114dc <HAL_I2C_Master_Transmit>
 800d1ba:	0004      	movs	r4, r0

  free(buff);
 800d1bc:	0028      	movs	r0, r5
 800d1be:	f009 f9a1 	bl	8016504 <free>

  return (uint32_t)result;
}
 800d1c2:	0020      	movs	r0, r4
 800d1c4:	b002      	add	sp, #8
 800d1c6:	bc80      	pop	{r7}
 800d1c8:	46b8      	mov	r8, r7
 800d1ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d1cc:	20006810 	.word	0x20006810

0800d1d0 <VL53L0X_read_multi>:

/**
* @brief  Reads the requested number of bytes from the device
*/
int32_t VL53L0X_read_multi(uint8_t address,  uint8_t index, uint8_t  *pdata, int32_t count)
{
 800d1d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d1d2:	46c6      	mov	lr, r8
 800d1d4:	b500      	push	{lr}
 800d1d6:	b084      	sub	sp, #16
 800d1d8:	4690      	mov	r8, r2
 800d1da:	9302      	str	r3, [sp, #8]
 800d1dc:	220f      	movs	r2, #15
 800d1de:	446a      	add	r2, sp
 800d1e0:	7011      	strb	r1, [r2, #0]
  HAL_StatusTypeDef result = HAL_ERROR;

  address &= 0xFE;
 800d1e2:	2301      	movs	r3, #1
 800d1e4:	0006      	movs	r6, r0
 800d1e6:	439e      	bics	r6, r3
  result = HAL_I2C_Master_Transmit(&hi2c2, address, &index, 1, HAL_MAX_DELAY);
 800d1e8:	0031      	movs	r1, r6
 800d1ea:	4d0b      	ldr	r5, [pc, #44]	; (800d218 <VL53L0X_read_multi+0x48>)
 800d1ec:	2701      	movs	r7, #1
 800d1ee:	427f      	negs	r7, r7
 800d1f0:	9700      	str	r7, [sp, #0]
 800d1f2:	0028      	movs	r0, r5
 800d1f4:	f004 f972 	bl	80114dc <HAL_I2C_Master_Transmit>
 800d1f8:	0004      	movs	r4, r0

  address |= 0x01;
  result |= HAL_I2C_Master_Receive(&hi2c2, address, pdata, count, HAL_MAX_DELAY);
 800d1fa:	9b02      	ldr	r3, [sp, #8]
 800d1fc:	b29b      	uxth	r3, r3
 800d1fe:	2101      	movs	r1, #1
 800d200:	4331      	orrs	r1, r6
 800d202:	9700      	str	r7, [sp, #0]
 800d204:	4642      	mov	r2, r8
 800d206:	0028      	movs	r0, r5
 800d208:	f004 fa16 	bl	8011638 <HAL_I2C_Master_Receive>
 800d20c:	4320      	orrs	r0, r4

  return (uint32_t)result;
 800d20e:	b2c0      	uxtb	r0, r0
}
 800d210:	b004      	add	sp, #16
 800d212:	bc80      	pop	{r7}
 800d214:	46b8      	mov	r8, r7
 800d216:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d218:	20006810 	.word	0x20006810

0800d21c <VL53L0X_write_byte>:

/**
* @brief  Writes a single byte to the device
*/
int32_t VL53L0X_write_byte(uint8_t address,  uint8_t index, uint8_t data)
{
 800d21c:	b500      	push	{lr}
 800d21e:	b085      	sub	sp, #20
  HAL_StatusTypeDef result = HAL_ERROR;
  uint8_t buff[2];

  buff[0] = index;
 800d220:	466b      	mov	r3, sp
 800d222:	7319      	strb	r1, [r3, #12]
  buff[1] = data;
 800d224:	735a      	strb	r2, [r3, #13]

  address &= 0xFE;
  result = HAL_I2C_Master_Transmit(&hi2c2, address, buff, 2, HAL_MAX_DELAY);
 800d226:	2301      	movs	r3, #1
 800d228:	0001      	movs	r1, r0
 800d22a:	4399      	bics	r1, r3
 800d22c:	3b02      	subs	r3, #2
 800d22e:	9300      	str	r3, [sp, #0]
 800d230:	3303      	adds	r3, #3
 800d232:	aa03      	add	r2, sp, #12
 800d234:	4802      	ldr	r0, [pc, #8]	; (800d240 <VL53L0X_write_byte+0x24>)
 800d236:	f004 f951 	bl	80114dc <HAL_I2C_Master_Transmit>

  return (uint32_t)result;
}
 800d23a:	b005      	add	sp, #20
 800d23c:	bd00      	pop	{pc}
 800d23e:	46c0      	nop			; (mov r8, r8)
 800d240:	20006810 	.word	0x20006810

0800d244 <VL53L0X_write_word>:

/**
* @brief  Writes a single word (16-bit unsigned) to the device
*/
int32_t VL53L0X_write_word(uint8_t address,  uint8_t index, uint16_t  data)
{
 800d244:	b500      	push	{lr}
 800d246:	b085      	sub	sp, #20
 800d248:	0013      	movs	r3, r2
  HAL_StatusTypeDef result = HAL_ERROR;
  uint8_t buff[3];

  buff[0] = index;
 800d24a:	aa03      	add	r2, sp, #12
 800d24c:	7011      	strb	r1, [r2, #0]
  buff[1] = (data >> 8);
 800d24e:	0a19      	lsrs	r1, r3, #8
 800d250:	7051      	strb	r1, [r2, #1]
  buff[2] = data & 0xFF;
 800d252:	7093      	strb	r3, [r2, #2]

  address &= 0xFE;
  result = HAL_I2C_Master_Transmit(&hi2c2, address, buff, 3, HAL_MAX_DELAY);
 800d254:	2301      	movs	r3, #1
 800d256:	0001      	movs	r1, r0
 800d258:	4399      	bics	r1, r3
 800d25a:	3b02      	subs	r3, #2
 800d25c:	9300      	str	r3, [sp, #0]
 800d25e:	3304      	adds	r3, #4
 800d260:	4802      	ldr	r0, [pc, #8]	; (800d26c <VL53L0X_write_word+0x28>)
 800d262:	f004 f93b 	bl	80114dc <HAL_I2C_Master_Transmit>

  return (uint32_t)result;
}
 800d266:	b005      	add	sp, #20
 800d268:	bd00      	pop	{pc}
 800d26a:	46c0      	nop			; (mov r8, r8)
 800d26c:	20006810 	.word	0x20006810

0800d270 <VL53L0X_write_dword>:

/**
* @brief  Writes a single dword (32-bit unsigned) to the device
*/
int32_t VL53L0X_write_dword(uint8_t address, uint8_t index, uint32_t  data)
{
 800d270:	b500      	push	{lr}
 800d272:	b085      	sub	sp, #20
 800d274:	0013      	movs	r3, r2
  HAL_StatusTypeDef result = HAL_ERROR;
  uint8_t buff[5];

  buff[0] = index;
 800d276:	aa02      	add	r2, sp, #8
 800d278:	7011      	strb	r1, [r2, #0]
  buff[1] = (data >> 24);
 800d27a:	0e19      	lsrs	r1, r3, #24
 800d27c:	7051      	strb	r1, [r2, #1]
  buff[2] = (data >> 16);
 800d27e:	0c19      	lsrs	r1, r3, #16
 800d280:	7091      	strb	r1, [r2, #2]
  buff[3] = (data >> 8);
 800d282:	0a19      	lsrs	r1, r3, #8
 800d284:	70d1      	strb	r1, [r2, #3]
  buff[4] = data & 0xFF;
 800d286:	7113      	strb	r3, [r2, #4]

  address &= 0xFE;
  result = HAL_I2C_Master_Transmit(&hi2c2, address, buff, 5, HAL_MAX_DELAY);
 800d288:	2301      	movs	r3, #1
 800d28a:	0001      	movs	r1, r0
 800d28c:	4399      	bics	r1, r3
 800d28e:	3b02      	subs	r3, #2
 800d290:	9300      	str	r3, [sp, #0]
 800d292:	3306      	adds	r3, #6
 800d294:	4802      	ldr	r0, [pc, #8]	; (800d2a0 <VL53L0X_write_dword+0x30>)
 800d296:	f004 f921 	bl	80114dc <HAL_I2C_Master_Transmit>

  return (uint32_t)result;
}
 800d29a:	b005      	add	sp, #20
 800d29c:	bd00      	pop	{pc}
 800d29e:	46c0      	nop			; (mov r8, r8)
 800d2a0:	20006810 	.word	0x20006810

0800d2a4 <VL53L0X_read_byte>:

/**
* @brief  Reads a single byte from the device
*/
int32_t VL53L0X_read_byte(uint8_t address,  uint8_t index, uint8_t  *pdata)
{
 800d2a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d2a6:	46c6      	mov	lr, r8
 800d2a8:	b500      	push	{lr}
 800d2aa:	b084      	sub	sp, #16
 800d2ac:	4690      	mov	r8, r2
 800d2ae:	220f      	movs	r2, #15
 800d2b0:	446a      	add	r2, sp
 800d2b2:	7011      	strb	r1, [r2, #0]
  HAL_StatusTypeDef result = HAL_ERROR;

  address &= 0xFE;
 800d2b4:	2301      	movs	r3, #1
 800d2b6:	0005      	movs	r5, r0
 800d2b8:	439d      	bics	r5, r3
  result = HAL_I2C_Master_Transmit(&hi2c2, address, &index, 1, HAL_MAX_DELAY);
 800d2ba:	0029      	movs	r1, r5
 800d2bc:	4f0a      	ldr	r7, [pc, #40]	; (800d2e8 <VL53L0X_read_byte+0x44>)
 800d2be:	2601      	movs	r6, #1
 800d2c0:	4276      	negs	r6, r6
 800d2c2:	9600      	str	r6, [sp, #0]
 800d2c4:	0038      	movs	r0, r7
 800d2c6:	f004 f909 	bl	80114dc <HAL_I2C_Master_Transmit>
 800d2ca:	0004      	movs	r4, r0

  address |= 0x01;
  result |= HAL_I2C_Master_Receive(&hi2c2, address, pdata, 1, HAL_MAX_DELAY);
 800d2cc:	2101      	movs	r1, #1
 800d2ce:	4329      	orrs	r1, r5
 800d2d0:	9600      	str	r6, [sp, #0]
 800d2d2:	2301      	movs	r3, #1
 800d2d4:	4642      	mov	r2, r8
 800d2d6:	0038      	movs	r0, r7
 800d2d8:	f004 f9ae 	bl	8011638 <HAL_I2C_Master_Receive>
 800d2dc:	4320      	orrs	r0, r4

  return (uint32_t)result;
 800d2de:	b2c0      	uxtb	r0, r0
}
 800d2e0:	b004      	add	sp, #16
 800d2e2:	bc80      	pop	{r7}
 800d2e4:	46b8      	mov	r8, r7
 800d2e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d2e8:	20006810 	.word	0x20006810

0800d2ec <VL53L0X_read_word>:

/**
* @brief  Reads a single word (16-bit unsigned) from the device
*/
int32_t VL53L0X_read_word(uint8_t address,  uint8_t index, uint16_t *pdata)
{
 800d2ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d2ee:	46c6      	mov	lr, r8
 800d2f0:	b500      	push	{lr}
 800d2f2:	b086      	sub	sp, #24
 800d2f4:	0015      	movs	r5, r2
 800d2f6:	220f      	movs	r2, #15
 800d2f8:	446a      	add	r2, sp
 800d2fa:	7011      	strb	r1, [r2, #0]
  HAL_StatusTypeDef result = HAL_ERROR;
  uint8_t buff[2];

  address &= 0xFE;
 800d2fc:	2301      	movs	r3, #1
 800d2fe:	0006      	movs	r6, r0
 800d300:	439e      	bics	r6, r3
  result = HAL_I2C_Master_Transmit(&hi2c2, address, &index, 1, HAL_MAX_DELAY);
 800d302:	0031      	movs	r1, r6
 800d304:	4f0e      	ldr	r7, [pc, #56]	; (800d340 <VL53L0X_read_word+0x54>)
 800d306:	2401      	movs	r4, #1
 800d308:	4264      	negs	r4, r4
 800d30a:	9400      	str	r4, [sp, #0]
 800d30c:	0038      	movs	r0, r7
 800d30e:	f004 f8e5 	bl	80114dc <HAL_I2C_Master_Transmit>
 800d312:	4680      	mov	r8, r0

  address |= 0x01;
  result |= HAL_I2C_Master_Receive(&hi2c2, address, buff, 2, HAL_MAX_DELAY);
 800d314:	2101      	movs	r1, #1
 800d316:	4331      	orrs	r1, r6
 800d318:	9400      	str	r4, [sp, #0]
 800d31a:	2302      	movs	r3, #2
 800d31c:	aa05      	add	r2, sp, #20
 800d31e:	0038      	movs	r0, r7
 800d320:	f004 f98a 	bl	8011638 <HAL_I2C_Master_Receive>

  *pdata = buff[0];
 800d324:	466b      	mov	r3, sp
 800d326:	7d1a      	ldrb	r2, [r3, #20]
  *pdata <<= 8;
 800d328:	0212      	lsls	r2, r2, #8
  *pdata |= buff[1];
 800d32a:	7d5b      	ldrb	r3, [r3, #21]
 800d32c:	4313      	orrs	r3, r2
 800d32e:	802b      	strh	r3, [r5, #0]
  result |= HAL_I2C_Master_Receive(&hi2c2, address, buff, 2, HAL_MAX_DELAY);
 800d330:	4643      	mov	r3, r8
 800d332:	4303      	orrs	r3, r0

  return (uint32_t)result;
 800d334:	b2d8      	uxtb	r0, r3
}
 800d336:	b006      	add	sp, #24
 800d338:	bc80      	pop	{r7}
 800d33a:	46b8      	mov	r8, r7
 800d33c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d33e:	46c0      	nop			; (mov r8, r8)
 800d340:	20006810 	.word	0x20006810

0800d344 <VL53L0X_read_dword>:

/**
* @brief  Reads a single dword (32-bit unsigned) from the device
*/
int32_t VL53L0X_read_dword(uint8_t address, uint8_t index, uint32_t *pdata)
{
 800d344:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d346:	46ce      	mov	lr, r9
 800d348:	4647      	mov	r7, r8
 800d34a:	b580      	push	{r7, lr}
 800d34c:	b087      	sub	sp, #28
 800d34e:	0016      	movs	r6, r2
 800d350:	220f      	movs	r2, #15
 800d352:	446a      	add	r2, sp
 800d354:	7011      	strb	r1, [r2, #0]
  HAL_StatusTypeDef result = HAL_ERROR;
  uint8_t buff[4];

  address &= 0xFE;
 800d356:	2301      	movs	r3, #1
 800d358:	0007      	movs	r7, r0
 800d35a:	439f      	bics	r7, r3
  result = HAL_I2C_Master_Transmit(&hi2c2, address, &index, 1, HAL_MAX_DELAY);
 800d35c:	0039      	movs	r1, r7
 800d35e:	4b13      	ldr	r3, [pc, #76]	; (800d3ac <VL53L0X_read_dword+0x68>)
 800d360:	4698      	mov	r8, r3
 800d362:	2501      	movs	r5, #1
 800d364:	426d      	negs	r5, r5
 800d366:	9500      	str	r5, [sp, #0]
 800d368:	2301      	movs	r3, #1
 800d36a:	4640      	mov	r0, r8
 800d36c:	f004 f8b6 	bl	80114dc <HAL_I2C_Master_Transmit>
 800d370:	4681      	mov	r9, r0

  address |= 0x01;
  result |= HAL_I2C_Master_Receive(&hi2c2, address, buff, 4, HAL_MAX_DELAY);
 800d372:	ac05      	add	r4, sp, #20
 800d374:	2101      	movs	r1, #1
 800d376:	4339      	orrs	r1, r7
 800d378:	9500      	str	r5, [sp, #0]
 800d37a:	2304      	movs	r3, #4
 800d37c:	0022      	movs	r2, r4
 800d37e:	4640      	mov	r0, r8
 800d380:	f004 f95a 	bl	8011638 <HAL_I2C_Master_Receive>

  *pdata = buff[0];
 800d384:	7823      	ldrb	r3, [r4, #0]
  *pdata <<= 8;
 800d386:	021b      	lsls	r3, r3, #8
  *pdata |= buff[1];
 800d388:	7862      	ldrb	r2, [r4, #1]
 800d38a:	4313      	orrs	r3, r2
  *pdata <<= 8;
 800d38c:	021b      	lsls	r3, r3, #8
  *pdata |= buff[2];
 800d38e:	78a2      	ldrb	r2, [r4, #2]
 800d390:	4313      	orrs	r3, r2
  *pdata <<= 8;
 800d392:	021b      	lsls	r3, r3, #8
  *pdata |= buff[3];
 800d394:	78e2      	ldrb	r2, [r4, #3]
 800d396:	4313      	orrs	r3, r2
 800d398:	6033      	str	r3, [r6, #0]
  result |= HAL_I2C_Master_Receive(&hi2c2, address, buff, 4, HAL_MAX_DELAY);
 800d39a:	464b      	mov	r3, r9
 800d39c:	4303      	orrs	r3, r0

  return (uint32_t)result;
 800d39e:	b2d8      	uxtb	r0, r3
}
 800d3a0:	b007      	add	sp, #28
 800d3a2:	bcc0      	pop	{r6, r7}
 800d3a4:	46b9      	mov	r9, r7
 800d3a6:	46b0      	mov	r8, r6
 800d3a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d3aa:	46c0      	nop			; (mov r8, r8)
 800d3ac:	20006810 	.word	0x20006810

0800d3b0 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 800d3b0:	b510      	push	{r4, lr}
	
	HAL_IncTick();
 800d3b2:	f002 fe35 	bl	8010020 <HAL_IncTick>
  osSystickHandler();  
 800d3b6:	f000 fe35 	bl	800e024 <osSystickHandler>

}
 800d3ba:	bd10      	pop	{r4, pc}

0800d3bc <HardFault_Handler>:
* @brief This function handles Hard Fault error callback.
*/
void HardFault_Handler(void)
{
	/* Loop here */
	for(;;) {};  
 800d3bc:	e7fe      	b.n	800d3bc <HardFault_Handler>
	...

0800d3c0 <USART1_IRQHandler>:

/**
* @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
*/
void USART1_IRQHandler(void)
{
 800d3c0:	b510      	push	{r4, lr}
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
	
#if defined (_Usart1)		
  HAL_UART_IRQHandler(&huart1);
 800d3c2:	4802      	ldr	r0, [pc, #8]	; (800d3cc <USART1_IRQHandler+0xc>)
 800d3c4:	f006 f9e7 	bl	8013796 <HAL_UART_IRQHandler>
	
	/* If lHigherPriorityTaskWoken is now equal to pdTRUE, then a context
	switch should be performed before the interrupt exists.  That ensures the
	unblocked (higher priority) task is returned to immediately. */
	portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
}
 800d3c8:	bd10      	pop	{r4, pc}
 800d3ca:	46c0      	nop			; (mov r8, r8)
 800d3cc:	2000652c 	.word	0x2000652c

0800d3d0 <USART2_IRQHandler>:

/**
* @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
*/
void USART2_IRQHandler(void)
{
 800d3d0:	b510      	push	{r4, lr}
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
	
#if defined (_Usart2)	
  HAL_UART_IRQHandler(&huart2);
 800d3d2:	4802      	ldr	r0, [pc, #8]	; (800d3dc <USART2_IRQHandler+0xc>)
 800d3d4:	f006 f9df 	bl	8013796 <HAL_UART_IRQHandler>
	
	/* If lHigherPriorityTaskWoken is now equal to pdTRUE, then a context
	switch should be performed before the interrupt exists.  That ensures the
	unblocked (higher priority) task is returned to immediately. */
	portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
}
 800d3d8:	bd10      	pop	{r4, pc}
 800d3da:	46c0      	nop			; (mov r8, r8)
 800d3dc:	20006614 	.word	0x20006614

0800d3e0 <USART3_8_IRQHandler>:

/**
* @brief This function handles USART3 to USART8 global interrupts / USART3 wake-up interrupt through EXTI line 28.
*/
void USART3_8_IRQHandler(void)
{
 800d3e0:	b510      	push	{r4, lr}
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
	
#if defined (_Usart3)
	HAL_UART_IRQHandler(&huart3);
 800d3e2:	4805      	ldr	r0, [pc, #20]	; (800d3f8 <USART3_8_IRQHandler+0x18>)
 800d3e4:	f006 f9d7 	bl	8013796 <HAL_UART_IRQHandler>
#endif
#if defined (_Usart4)
	HAL_UART_IRQHandler(&huart4);
#endif
#if defined (_Usart5)
	HAL_UART_IRQHandler(&huart5);
 800d3e8:	4804      	ldr	r0, [pc, #16]	; (800d3fc <USART3_8_IRQHandler+0x1c>)
 800d3ea:	f006 f9d4 	bl	8013796 <HAL_UART_IRQHandler>
#endif
#if defined (_Usart6)
	HAL_UART_IRQHandler(&huart6);
 800d3ee:	4804      	ldr	r0, [pc, #16]	; (800d400 <USART3_8_IRQHandler+0x20>)
 800d3f0:	f006 f9d1 	bl	8013796 <HAL_UART_IRQHandler>

	/* If lHigherPriorityTaskWoken is now equal to pdTRUE, then a context
	switch should be performed before the interrupt exists.  That ensures the
	unblocked (higher priority) task is returned to immediately. */
	portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
}
 800d3f4:	bd10      	pop	{r4, pc}
 800d3f6:	46c0      	nop			; (mov r8, r8)
 800d3f8:	20006444 	.word	0x20006444
 800d3fc:	200064b8 	.word	0x200064b8
 800d400:	200065a0 	.word	0x200065a0

0800d404 <DMA1_Ch1_IRQHandler>:

/**
* @brief This function handles DMA1 channel 1 interrupt (Uplink DMA 1).
*/
void DMA1_Ch1_IRQHandler(void)
{
 800d404:	b510      	push	{r4, lr}
	/* Streaming or messaging DMA on P1 */
	DMA_IRQHandler(P1);
 800d406:	2001      	movs	r0, #1
 800d408:	f7f9 ff82 	bl	8007310 <DMA_IRQHandler>
	
}
 800d40c:	bd10      	pop	{r4, pc}
	...

0800d410 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler>:

/**
* @brief This function handles DMA1 channel 2 to 3 and DMA2 channel 1 to 2 interrupts.
*/
void DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler(void)
{
 800d410:	b510      	push	{r4, lr}
	/* Streaming or messaging DMA on P5 */
	if (HAL_DMA_GET_IT_SOURCE(DMA2,DMA_ISR_GIF2) == SET) {
 800d412:	4b0c      	ldr	r3, [pc, #48]	; (800d444 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x34>)
 800d414:	681b      	ldr	r3, [r3, #0]
 800d416:	06db      	lsls	r3, r3, #27
 800d418:	d40b      	bmi.n	800d432 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x22>
		DMA_IRQHandler(P5);
	/* Streaming or messaging DMA on P2 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF3) == SET) {
 800d41a:	4b0b      	ldr	r3, [pc, #44]	; (800d448 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x38>)
 800d41c:	681b      	ldr	r3, [r3, #0]
 800d41e:	05db      	lsls	r3, r3, #23
 800d420:	d40b      	bmi.n	800d43a <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x2a>
		DMA_IRQHandler(P2);
	/* TX messaging DMA 0 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF2) == SET) {
 800d422:	4b09      	ldr	r3, [pc, #36]	; (800d448 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x38>)
 800d424:	681b      	ldr	r3, [r3, #0]
 800d426:	06db      	lsls	r3, r3, #27
 800d428:	d506      	bpl.n	800d438 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x28>
		HAL_DMA_IRQHandler(&msgTxDMA[0]);
 800d42a:	4808      	ldr	r0, [pc, #32]	; (800d44c <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x3c>)
 800d42c:	f003 f850 	bl	80104d0 <HAL_DMA_IRQHandler>
	}
}
 800d430:	e002      	b.n	800d438 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x28>
		DMA_IRQHandler(P5);
 800d432:	2005      	movs	r0, #5
 800d434:	f7f9 ff6c 	bl	8007310 <DMA_IRQHandler>
}
 800d438:	bd10      	pop	{r4, pc}
		DMA_IRQHandler(P2);
 800d43a:	2002      	movs	r0, #2
 800d43c:	f7f9 ff68 	bl	8007310 <DMA_IRQHandler>
 800d440:	e7fa      	b.n	800d438 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x28>
 800d442:	46c0      	nop			; (mov r8, r8)
 800d444:	40020400 	.word	0x40020400
 800d448:	40020000 	.word	0x40020000
 800d44c:	200012bc 	.word	0x200012bc

0800d450 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler>:

/**
* @brief This function handles DMA1 channel 4 to 7 and DMA2 channel 3 to 5 interrupts.
*/
void DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler(void)
{
 800d450:	b510      	push	{r4, lr}
	/* Streaming or messaging DMA on P3 */
	if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF5) == SET) {
 800d452:	4b14      	ldr	r3, [pc, #80]	; (800d4a4 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x54>)
 800d454:	681b      	ldr	r3, [r3, #0]
 800d456:	03db      	lsls	r3, r3, #15
 800d458:	d413      	bmi.n	800d482 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x32>
		DMA_IRQHandler(P3);
	/* Streaming or messaging DMA on P4 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF6) == SET) {
 800d45a:	4b12      	ldr	r3, [pc, #72]	; (800d4a4 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x54>)
 800d45c:	681b      	ldr	r3, [r3, #0]
 800d45e:	02db      	lsls	r3, r3, #11
 800d460:	d413      	bmi.n	800d48a <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x3a>
		DMA_IRQHandler(P4);
	/* Streaming or messaging DMA on P6 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA2,DMA_ISR_GIF3) == SET) {
 800d462:	4b11      	ldr	r3, [pc, #68]	; (800d4a8 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x58>)
 800d464:	681b      	ldr	r3, [r3, #0]
 800d466:	05db      	lsls	r3, r3, #23
 800d468:	d413      	bmi.n	800d492 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x42>
		DMA_IRQHandler(P6);
	/* TX messaging DMA 1 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF4) == SET) {
 800d46a:	4b0e      	ldr	r3, [pc, #56]	; (800d4a4 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x54>)
 800d46c:	681b      	ldr	r3, [r3, #0]
 800d46e:	04db      	lsls	r3, r3, #19
 800d470:	d413      	bmi.n	800d49a <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x4a>
		HAL_DMA_IRQHandler(&msgTxDMA[1]);
	/* TX messaging DMA 2 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF7) == SET) {
 800d472:	4b0c      	ldr	r3, [pc, #48]	; (800d4a4 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x54>)
 800d474:	681b      	ldr	r3, [r3, #0]
 800d476:	01db      	lsls	r3, r3, #7
 800d478:	d506      	bpl.n	800d488 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x38>
		HAL_DMA_IRQHandler(&msgTxDMA[2]);
 800d47a:	480c      	ldr	r0, [pc, #48]	; (800d4ac <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x5c>)
 800d47c:	f003 f828 	bl	80104d0 <HAL_DMA_IRQHandler>
	}
}
 800d480:	e002      	b.n	800d488 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x38>
		DMA_IRQHandler(P3);
 800d482:	2003      	movs	r0, #3
 800d484:	f7f9 ff44 	bl	8007310 <DMA_IRQHandler>
}
 800d488:	bd10      	pop	{r4, pc}
		DMA_IRQHandler(P4);
 800d48a:	2004      	movs	r0, #4
 800d48c:	f7f9 ff40 	bl	8007310 <DMA_IRQHandler>
 800d490:	e7fa      	b.n	800d488 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x38>
		DMA_IRQHandler(P6);
 800d492:	2006      	movs	r0, #6
 800d494:	f7f9 ff3c 	bl	8007310 <DMA_IRQHandler>
 800d498:	e7f6      	b.n	800d488 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x38>
		HAL_DMA_IRQHandler(&msgTxDMA[1]);
 800d49a:	4805      	ldr	r0, [pc, #20]	; (800d4b0 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x60>)
 800d49c:	f003 f818 	bl	80104d0 <HAL_DMA_IRQHandler>
 800d4a0:	e7f2      	b.n	800d488 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x38>
 800d4a2:	46c0      	nop			; (mov r8, r8)
 800d4a4:	40020000 	.word	0x40020000
 800d4a8:	40020400 	.word	0x40020400
 800d4ac:	2000132c 	.word	0x2000132c
 800d4b0:	200012f4 	.word	0x200012f4

0800d4b4 <HAL_UART_TxCpltCallback>:

/*-----------------------------------------------------------*/

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800d4b4:	b510      	push	{r4, lr}
 800d4b6:	b082      	sub	sp, #8
 800d4b8:	0004      	movs	r4, r0
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
 800d4ba:	2300      	movs	r3, #0
 800d4bc:	9301      	str	r3, [sp, #4]
	
	/* TX DMAs are shared so unsetup them here to be reused */
	if(huart->hdmatx != NULL)
 800d4be:	6e03      	ldr	r3, [r0, #96]	; 0x60
 800d4c0:	2b00      	cmp	r3, #0
 800d4c2:	d001      	beq.n	800d4c8 <HAL_UART_TxCpltCallback+0x14>
		DMA_MSG_TX_UnSetup(huart);
 800d4c4:	f7fe fd46 	bl	800bf54 <DMA_MSG_TX_UnSetup>

	/* Give back the mutex. */
	xSemaphoreGiveFromISR( PxTxSemaphoreHandle[GetPort(huart)], &( xHigherPriorityTaskWoken ) );
 800d4c8:	0020      	movs	r0, r4
 800d4ca:	f7fe f88d 	bl	800b5e8 <GetPort>
 800d4ce:	0080      	lsls	r0, r0, #2
 800d4d0:	4b03      	ldr	r3, [pc, #12]	; (800d4e0 <HAL_UART_TxCpltCallback+0x2c>)
 800d4d2:	58c0      	ldr	r0, [r0, r3]
 800d4d4:	a901      	add	r1, sp, #4
 800d4d6:	f001 f94b 	bl	800e770 <xQueueGiveFromISR>
}
 800d4da:	b002      	add	sp, #8
 800d4dc:	bd10      	pop	{r4, pc}
 800d4de:	46c0      	nop			; (mov r8, r8)
 800d4e0:	200063e8 	.word	0x200063e8

0800d4e4 <HAL_UART_ErrorCallback>:

/*-----------------------------------------------------------*/

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800d4e4:	b510      	push	{r4, lr}
 800d4e6:	0004      	movs	r4, r0
	/* Loop here */
	//for(;;) {};

  /* Set the UART state ready to be able to start the process again */
  huart->State = HAL_UART_STATE_READY;
 800d4e8:	2369      	movs	r3, #105	; 0x69
 800d4ea:	2201      	movs	r2, #1
 800d4ec:	54c2      	strb	r2, [r0, r3]
	
	/* Resume streaming DMA for this UART port */
	uint8_t port = GetPort(huart);
 800d4ee:	f7fe f87b 	bl	800b5e8 <GetPort>
	if (portStatus[port] == STREAM) {
 800d4f2:	4b0c      	ldr	r3, [pc, #48]	; (800d524 <HAL_UART_ErrorCallback+0x40>)
 800d4f4:	5c1b      	ldrb	r3, [r3, r0]
 800d4f6:	2b02      	cmp	r3, #2
 800d4f8:	d005      	beq.n	800d506 <HAL_UART_ErrorCallback+0x22>
		HAL_UART_Receive_DMA(huart, (uint8_t *)(&(dmaStreamDst[port-1]->Instance->TDR)), huart->hdmarx->Instance->CNDTR);	
	/* Or parse the circular buffer and restart messaging DMA for this port */
	} else {
		MsgDMAStopped[port-1] = true;		// Set a flag here and let the backend task restart DMA after parsing the buffer	
 800d4fa:	4b0b      	ldr	r3, [pc, #44]	; (800d528 <HAL_UART_ErrorCallback+0x44>)
 800d4fc:	1818      	adds	r0, r3, r0
 800d4fe:	3801      	subs	r0, #1
 800d500:	2301      	movs	r3, #1
 800d502:	7003      	strb	r3, [r0, #0]
	}	
}
 800d504:	bd10      	pop	{r4, pc}
		HAL_UART_Receive_DMA(huart, (uint8_t *)(&(dmaStreamDst[port-1]->Instance->TDR)), huart->hdmarx->Instance->CNDTR);	
 800d506:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d508:	681b      	ldr	r3, [r3, #0]
 800d50a:	685a      	ldr	r2, [r3, #4]
 800d50c:	b292      	uxth	r2, r2
 800d50e:	1e43      	subs	r3, r0, #1
 800d510:	009b      	lsls	r3, r3, #2
 800d512:	4906      	ldr	r1, [pc, #24]	; (800d52c <HAL_UART_ErrorCallback+0x48>)
 800d514:	585b      	ldr	r3, [r3, r1]
 800d516:	6819      	ldr	r1, [r3, #0]
 800d518:	3128      	adds	r1, #40	; 0x28
 800d51a:	0020      	movs	r0, r4
 800d51c:	f005 fd22 	bl	8012f64 <HAL_UART_Receive_DMA>
 800d520:	e7f0      	b.n	800d504 <HAL_UART_ErrorCallback+0x20>
 800d522:	46c0      	nop			; (mov r8, r8)
 800d524:	20000b80 	.word	0x20000b80
 800d528:	20000d4c 	.word	0x20000d4c
 800d52c:	20000ee8 	.word	0x20000ee8

0800d530 <HAL_UART_RxCpltCallback>:

/*-----------------------------------------------------------*/

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800d530:	b510      	push	{r4, lr}
 800d532:	0004      	movs	r4, r0
	// Check only ports in messaging mode
	if (portStatus[GetPort(huart)] == FREE || portStatus[GetPort(huart)] == MSG)
 800d534:	f7fe f858 	bl	800b5e8 <GetPort>
 800d538:	4b13      	ldr	r3, [pc, #76]	; (800d588 <HAL_UART_RxCpltCallback+0x58>)
 800d53a:	5c1b      	ldrb	r3, [r3, r0]
 800d53c:	2b00      	cmp	r3, #0
 800d53e:	d006      	beq.n	800d54e <HAL_UART_RxCpltCallback+0x1e>
 800d540:	0020      	movs	r0, r4
 800d542:	f7fe f851 	bl	800b5e8 <GetPort>
 800d546:	4b10      	ldr	r3, [pc, #64]	; (800d588 <HAL_UART_RxCpltCallback+0x58>)
 800d548:	5c1b      	ldrb	r3, [r3, r0]
 800d54a:	2b01      	cmp	r3, #1
 800d54c:	d11a      	bne.n	800d584 <HAL_UART_RxCpltCallback+0x54>
	{
		// Circular buffer is full. Set a global persistant flag via BOS events and a temporary flag via portStatus.
		BOS.overrun = GetPort(huart);
 800d54e:	0020      	movs	r0, r4
 800d550:	f7fe f84a 	bl	800b5e8 <GetPort>
 800d554:	4b0d      	ldr	r3, [pc, #52]	; (800d58c <HAL_UART_RxCpltCallback+0x5c>)
 800d556:	7698      	strb	r0, [r3, #26]
		portStatus[GetPort(huart)] = OVERRUN;
 800d558:	0020      	movs	r0, r4
 800d55a:	f7fe f845 	bl	800b5e8 <GetPort>
 800d55e:	4b0a      	ldr	r3, [pc, #40]	; (800d588 <HAL_UART_RxCpltCallback+0x58>)
 800d560:	2205      	movs	r2, #5
 800d562:	541a      	strb	r2, [r3, r0]
		// Reset the circular RX buffer index
		UARTRxBufIndex[GetPort(huart)-1] = 0;
 800d564:	0020      	movs	r0, r4
 800d566:	f7fe f83f 	bl	800b5e8 <GetPort>
 800d56a:	4b09      	ldr	r3, [pc, #36]	; (800d590 <HAL_UART_RxCpltCallback+0x60>)
 800d56c:	181b      	adds	r3, r3, r0
 800d56e:	3b01      	subs	r3, #1
 800d570:	2200      	movs	r2, #0
 800d572:	701a      	strb	r2, [r3, #0]
		// Set a port-specific flag here and let the backend task restart DMA
		MsgDMAStopped[GetPort(huart)-1] = true;	
 800d574:	0020      	movs	r0, r4
 800d576:	f7fe f837 	bl	800b5e8 <GetPort>
 800d57a:	4b06      	ldr	r3, [pc, #24]	; (800d594 <HAL_UART_RxCpltCallback+0x64>)
 800d57c:	181b      	adds	r3, r3, r0
 800d57e:	3b01      	subs	r3, #1
 800d580:	2201      	movs	r2, #1
 800d582:	701a      	strb	r2, [r3, #0]
	}
}
 800d584:	bd10      	pop	{r4, pc}
 800d586:	46c0      	nop			; (mov r8, r8)
 800d588:	20000b80 	.word	0x20000b80
 800d58c:	20006368 	.word	0x20006368
 800d590:	20000e94 	.word	0x20000e94
 800d594:	20000d4c 	.word	0x20000d4c

0800d598 <EXTI2_3_IRQHandler>:

/**
* @brief This function handles EXTI line 2 and 3 interrupts.
*/
void EXTI2_3_IRQHandler(void)
{
 800d598:	b510      	push	{r4, lr}
  portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;

  HAL_GPIO_EXTI_IRQHandler(_TOF_INT_PIN);
 800d59a:	2004      	movs	r0, #4
 800d59c:	f003 fe3c 	bl	8011218 <HAL_GPIO_EXTI_IRQHandler>

	// Set a data ready flag
  tofState = REQ_MEASUREMENT_READY;
 800d5a0:	4b01      	ldr	r3, [pc, #4]	; (800d5a8 <EXTI2_3_IRQHandler+0x10>)
 800d5a2:	220c      	movs	r2, #12
 800d5a4:	701a      	strb	r2, [r3, #0]

  /* If lHigherPriorityTaskWoken is now equal to pdTRUE, then a context
  switch should be performed before the interrupt exists.  That ensures the
  unblocked (higher priority) task is returned to immediately. */
  portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
}
 800d5a6:	bd10      	pop	{r4, pc}
 800d5a8:	2000659c 	.word	0x2000659c

0800d5ac <I2C2_IRQHandler>:

/**
* @brief This function handles I2C2 global interrupt.
*/
void I2C2_IRQHandler(void)
{
 800d5ac:	b510      	push	{r4, lr}
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;

  if (hi2c2.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 800d5ae:	4b07      	ldr	r3, [pc, #28]	; (800d5cc <I2C2_IRQHandler+0x20>)
 800d5b0:	681b      	ldr	r3, [r3, #0]
 800d5b2:	699a      	ldr	r2, [r3, #24]
 800d5b4:	23e0      	movs	r3, #224	; 0xe0
 800d5b6:	00db      	lsls	r3, r3, #3
 800d5b8:	421a      	tst	r2, r3
 800d5ba:	d003      	beq.n	800d5c4 <I2C2_IRQHandler+0x18>
    HAL_I2C_ER_IRQHandler(&hi2c2);
 800d5bc:	4803      	ldr	r0, [pc, #12]	; (800d5cc <I2C2_IRQHandler+0x20>)
 800d5be:	f004 fb35 	bl	8011c2c <HAL_I2C_ER_IRQHandler>

	/* If lHigherPriorityTaskWoken is now equal to pdTRUE, then a context
	switch should be performed before the interrupt exists.  That ensures the
	unblocked (higher priority) task is returned to immediately. */
	portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
}
 800d5c2:	bd10      	pop	{r4, pc}
    HAL_I2C_EV_IRQHandler(&hi2c2);
 800d5c4:	4801      	ldr	r0, [pc, #4]	; (800d5cc <I2C2_IRQHandler+0x20>)
 800d5c6:	f004 f8e9 	bl	801179c <HAL_I2C_EV_IRQHandler>
}
 800d5ca:	e7fa      	b.n	800d5c2 <I2C2_IRQHandler+0x16>
 800d5cc:	20006810 	.word	0x20006810

0800d5d0 <HAL_I2C_MasterRxCpltCallback>:
/*-----------------------------------------------------------*/

void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{

}
 800d5d0:	4770      	bx	lr

0800d5d2 <vApplicationStackOverflowHook>:
	( void ) pxTask;

	/* Run time stack overflow checking is performed if
	configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2.  This hook
	function is called if a stack overflow is detected. */
	taskDISABLE_INTERRUPTS();
 800d5d2:	b672      	cpsid	i
	for( ;; );
 800d5d4:	e7fe      	b.n	800d5d4 <vApplicationStackOverflowHook+0x2>

0800d5d6 <vApplicationMallocFailedHook>:
	demo application.  If heap_1.c or heap_2.c are used, then the size of the
	heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
	FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
	to query the size of free heap space that remains (although it does not
	provide information on how the remaining heap might be fragmented). */
	taskDISABLE_INTERRUPTS();
 800d5d6:	b672      	cpsid	i
	for( ;; );
 800d5d8:	e7fe      	b.n	800d5d8 <vApplicationMallocFailedHook+0x2>
	...

0800d5dc <RTC_CalendarConfig>:
/*-----------------------------------------------------------*/

/* --- First time-configuration of the internal real-time clock.
*/
BOS_Status RTC_CalendarConfig(void)
{
 800d5dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d5de:	46ce      	mov	lr, r9
 800d5e0:	4647      	mov	r7, r8
 800d5e2:	b580      	push	{r7, lr}
 800d5e4:	b08f      	sub	sp, #60	; 0x3c
 800d5e6:	2500      	movs	r5, #0
  RTC_DateTypeDef sdatestructure;
  RTC_TimeTypeDef stimestructure;	
	uint8_t month, day, year, seconds, minutes, hours; 
	char comDate[] = __DATE__, comTime[] = __TIME__;
 800d5e8:	ac05      	add	r4, sp, #20
 800d5ea:	4b34      	ldr	r3, [pc, #208]	; (800d6bc <RTC_CalendarConfig+0xe0>)
 800d5ec:	0022      	movs	r2, r4
 800d5ee:	cb43      	ldmia	r3!, {r0, r1, r6}
 800d5f0:	c243      	stmia	r2!, {r0, r1, r6}
 800d5f2:	aa02      	add	r2, sp, #8
 800d5f4:	4b32      	ldr	r3, [pc, #200]	; (800d6c0 <RTC_CalendarConfig+0xe4>)
 800d5f6:	cb03      	ldmia	r3!, {r0, r1}
 800d5f8:	c203      	stmia	r2!, {r0, r1}
 800d5fa:	781b      	ldrb	r3, [r3, #0]
 800d5fc:	7013      	strb	r3, [r2, #0]
	
	/* Get compile date */
  year = atoi(comDate + 9);		// only last 2 digits
 800d5fe:	2015      	movs	r0, #21
 800d600:	ab02      	add	r3, sp, #8
 800d602:	469c      	mov	ip, r3
 800d604:	4460      	add	r0, ip
 800d606:	f008 ff42 	bl	801648e <atoi>
 800d60a:	b2c3      	uxtb	r3, r0
 800d60c:	4699      	mov	r9, r3
  *(comDate + 6) = 0;
 800d60e:	71a5      	strb	r5, [r4, #6]
  day = atoi(comDate + 4);
 800d610:	a806      	add	r0, sp, #24
 800d612:	f008 ff3c 	bl	801648e <atoi>
 800d616:	b2c3      	uxtb	r3, r0
 800d618:	4698      	mov	r8, r3
  *(comDate + 3) = 0;
 800d61a:	70e5      	strb	r5, [r4, #3]
  for (uint8_t i = 0; i < 12; i++)
 800d61c:	4e29      	ldr	r6, [pc, #164]	; (800d6c4 <RTC_CalendarConfig+0xe8>)
  *(comDate + 3) = 0;
 800d61e:	2401      	movs	r4, #1
 800d620:	e003      	b.n	800d62a <RTC_CalendarConfig+0x4e>
  for (uint8_t i = 0; i < 12; i++)
 800d622:	3401      	adds	r4, #1
 800d624:	3604      	adds	r6, #4
 800d626:	2c0d      	cmp	r4, #13
 800d628:	d007      	beq.n	800d63a <RTC_CalendarConfig+0x5e>
  {
    if (!strcmp(comDate, monthStringAbreviated[i]))	
 800d62a:	6831      	ldr	r1, [r6, #0]
 800d62c:	a805      	add	r0, sp, #20
 800d62e:	f7f2 fd69 	bl	8000104 <strcmp>
 800d632:	2800      	cmp	r0, #0
 800d634:	d1f5      	bne.n	800d622 <RTC_CalendarConfig+0x46>
			month = i + 1;
 800d636:	b2e5      	uxtb	r5, r4
 800d638:	e7f3      	b.n	800d622 <RTC_CalendarConfig+0x46>
  }

	/* Get compile time */
	seconds = atoi(comTime + 6);
 800d63a:	ab02      	add	r3, sp, #8
 800d63c:	1d98      	adds	r0, r3, #6
 800d63e:	f008 ff26 	bl	801648e <atoi>
 800d642:	9001      	str	r0, [sp, #4]
	*(comDate + 5) = 0;
 800d644:	af05      	add	r7, sp, #20
 800d646:	2400      	movs	r4, #0
 800d648:	717c      	strb	r4, [r7, #5]
	minutes = atoi(comTime + 3);
 800d64a:	ab02      	add	r3, sp, #8
 800d64c:	1cd8      	adds	r0, r3, #3
 800d64e:	f008 ff1e 	bl	801648e <atoi>
 800d652:	0006      	movs	r6, r0
	*(comDate + 2) = 0;
 800d654:	70bc      	strb	r4, [r7, #2]
	hours = atoi(comTime);
 800d656:	a802      	add	r0, sp, #8
 800d658:	f008 ff19 	bl	801648e <atoi>
 800d65c:	0007      	movs	r7, r0
	
  /* Set Date */
  sdatestructure.Year = year;
 800d65e:	a90d      	add	r1, sp, #52	; 0x34
 800d660:	464b      	mov	r3, r9
 800d662:	70cb      	strb	r3, [r1, #3]
  sdatestructure.Month = month;
 800d664:	704d      	strb	r5, [r1, #1]
  sdatestructure.Date = day;
 800d666:	4643      	mov	r3, r8
 800d668:	708b      	strb	r3, [r1, #2]
  sdatestructure.WeekDay = RTC_WEEKDAY_MONDAY;		// Todo - Calculate weekday later
 800d66a:	2301      	movs	r3, #1
 800d66c:	700b      	strb	r3, [r1, #0]
  
  if(HAL_RTC_SetDate(&RtcHandle,&sdatestructure,RTC_FORMAT_BIN) != HAL_OK)
 800d66e:	2200      	movs	r2, #0
 800d670:	4815      	ldr	r0, [pc, #84]	; (800d6c8 <RTC_CalendarConfig+0xec>)
 800d672:	f005 f9cd 	bl	8012a10 <HAL_RTC_SetDate>
 800d676:	2800      	cmp	r0, #0
 800d678:	d11c      	bne.n	800d6b4 <RTC_CalendarConfig+0xd8>
		return BOS_ERROR;

  /* Set Time */
  stimestructure.Hours = hours;
 800d67a:	a908      	add	r1, sp, #32
 800d67c:	700f      	strb	r7, [r1, #0]
  stimestructure.Minutes = minutes;
 800d67e:	704e      	strb	r6, [r1, #1]
  stimestructure.Seconds = seconds;
 800d680:	9b01      	ldr	r3, [sp, #4]
 800d682:	708b      	strb	r3, [r1, #2]
  stimestructure.TimeFormat = RTC_HOURFORMAT12_AM;	BOS.hourformat = 24;
 800d684:	2300      	movs	r3, #0
 800d686:	720b      	strb	r3, [r1, #8]
 800d688:	4a10      	ldr	r2, [pc, #64]	; (800d6cc <RTC_CalendarConfig+0xf0>)
 800d68a:	3018      	adds	r0, #24
 800d68c:	7350      	strb	r0, [r2, #13]
  stimestructure.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800d68e:	60cb      	str	r3, [r1, #12]
  stimestructure.StoreOperation = RTC_STOREOPERATION_RESET;
 800d690:	610b      	str	r3, [r1, #16]
	
  if (HAL_RTC_SetTime(&RtcHandle, &stimestructure, RTC_FORMAT_BIN) != HAL_OK)
 800d692:	2200      	movs	r2, #0
 800d694:	480c      	ldr	r0, [pc, #48]	; (800d6c8 <RTC_CalendarConfig+0xec>)
 800d696:	f005 f93b 	bl	8012910 <HAL_RTC_SetTime>
 800d69a:	1e04      	subs	r4, r0, #0
 800d69c:	d10c      	bne.n	800d6b8 <RTC_CalendarConfig+0xdc>
		return BOS_ERROR;

  /* Writes a data in a RTC Backup data Register1 */
  HAL_RTCEx_BKUPWrite(&RtcHandle, RTC_BKP_DR1, 0x32F2);
 800d69e:	4a0c      	ldr	r2, [pc, #48]	; (800d6d0 <RTC_CalendarConfig+0xf4>)
 800d6a0:	2101      	movs	r1, #1
 800d6a2:	4809      	ldr	r0, [pc, #36]	; (800d6c8 <RTC_CalendarConfig+0xec>)
 800d6a4:	f005 fa78 	bl	8012b98 <HAL_RTCEx_BKUPWrite>
	
	return BOS_OK;
}
 800d6a8:	0020      	movs	r0, r4
 800d6aa:	b00f      	add	sp, #60	; 0x3c
 800d6ac:	bcc0      	pop	{r6, r7}
 800d6ae:	46b9      	mov	r9, r7
 800d6b0:	46b0      	mov	r8, r6
 800d6b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BOS_ERROR;
 800d6b4:	24ff      	movs	r4, #255	; 0xff
 800d6b6:	e7f7      	b.n	800d6a8 <RTC_CalendarConfig+0xcc>
		return BOS_ERROR;
 800d6b8:	24ff      	movs	r4, #255	; 0xff
 800d6ba:	e7f5      	b.n	800d6a8 <RTC_CalendarConfig+0xcc>
 800d6bc:	08019c44 	.word	0x08019c44
 800d6c0:	08019c68 	.word	0x08019c68
 800d6c4:	20000020 	.word	0x20000020
 800d6c8:	2000684c 	.word	0x2000684c
 800d6cc:	20006368 	.word	0x20006368
 800d6d0:	000032f2 	.word	0x000032f2

0800d6d4 <RTC_Init>:
{
 800d6d4:	b510      	push	{r4, lr}
  __HAL_RCC_RTC_ENABLE();
 800d6d6:	4a1c      	ldr	r2, [pc, #112]	; (800d748 <RTC_Init+0x74>)
 800d6d8:	6a11      	ldr	r1, [r2, #32]
 800d6da:	2380      	movs	r3, #128	; 0x80
 800d6dc:	021b      	lsls	r3, r3, #8
 800d6de:	430b      	orrs	r3, r1
 800d6e0:	6213      	str	r3, [r2, #32]
	RtcHandle.Instance = RTC; 
 800d6e2:	481a      	ldr	r0, [pc, #104]	; (800d74c <RTC_Init+0x78>)
 800d6e4:	4b1a      	ldr	r3, [pc, #104]	; (800d750 <RTC_Init+0x7c>)
 800d6e6:	6003      	str	r3, [r0, #0]
  RtcHandle.Init.HourFormat = RTC_HOURFORMAT_24;
 800d6e8:	2300      	movs	r3, #0
 800d6ea:	6043      	str	r3, [r0, #4]
  RtcHandle.Init.AsynchPrediv = 124;
 800d6ec:	227c      	movs	r2, #124	; 0x7c
 800d6ee:	6082      	str	r2, [r0, #8]
  RtcHandle.Init.SynchPrediv = 1999;
 800d6f0:	4a18      	ldr	r2, [pc, #96]	; (800d754 <RTC_Init+0x80>)
 800d6f2:	60c2      	str	r2, [r0, #12]
  RtcHandle.Init.OutPut = RTC_OUTPUT_DISABLE;
 800d6f4:	6103      	str	r3, [r0, #16]
  RtcHandle.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800d6f6:	6143      	str	r3, [r0, #20]
  RtcHandle.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800d6f8:	6183      	str	r3, [r0, #24]
	if (HAL_RTC_Init(&RtcHandle) != HAL_OK)	return BOS_ERROR;
 800d6fa:	f005 f8ab 	bl	8012854 <HAL_RTC_Init>
 800d6fe:	1e04      	subs	r4, r0, #0
 800d700:	d11f      	bne.n	800d742 <RTC_Init+0x6e>
  if (HAL_RTCEx_BKUPRead(&RtcHandle, RTC_BKP_DR1) != 0x32F2)
 800d702:	2101      	movs	r1, #1
 800d704:	4811      	ldr	r0, [pc, #68]	; (800d74c <RTC_Init+0x78>)
 800d706:	f005 fa4d 	bl	8012ba4 <HAL_RTCEx_BKUPRead>
 800d70a:	4b13      	ldr	r3, [pc, #76]	; (800d758 <RTC_Init+0x84>)
 800d70c:	4298      	cmp	r0, r3
 800d70e:	d10e      	bne.n	800d72e <RTC_Init+0x5a>
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_PORRST) != RESET)
 800d710:	4b0d      	ldr	r3, [pc, #52]	; (800d748 <RTC_Init+0x74>)
 800d712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d714:	011b      	lsls	r3, r3, #4
 800d716:	d502      	bpl.n	800d71e <RTC_Init+0x4a>
			bootStatus = POWER_ON_BOOT;
 800d718:	4b10      	ldr	r3, [pc, #64]	; (800d75c <RTC_Init+0x88>)
 800d71a:	2200      	movs	r2, #0
 800d71c:	701a      	strb	r2, [r3, #0]
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_PINRST) != RESET)
 800d71e:	4b0a      	ldr	r3, [pc, #40]	; (800d748 <RTC_Init+0x74>)
 800d720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d722:	015b      	lsls	r3, r3, #5
 800d724:	d505      	bpl.n	800d732 <RTC_Init+0x5e>
			bootStatus = RESET_BOOT;
 800d726:	4b0d      	ldr	r3, [pc, #52]	; (800d75c <RTC_Init+0x88>)
 800d728:	2201      	movs	r2, #1
 800d72a:	701a      	strb	r2, [r3, #0]
 800d72c:	e001      	b.n	800d732 <RTC_Init+0x5e>
    RTC_CalendarConfig();
 800d72e:	f7ff ff55 	bl	800d5dc <RTC_CalendarConfig>
  __HAL_RCC_CLEAR_RESET_FLAGS();	
 800d732:	4a05      	ldr	r2, [pc, #20]	; (800d748 <RTC_Init+0x74>)
 800d734:	6a51      	ldr	r1, [r2, #36]	; 0x24
 800d736:	2380      	movs	r3, #128	; 0x80
 800d738:	045b      	lsls	r3, r3, #17
 800d73a:	430b      	orrs	r3, r1
 800d73c:	6253      	str	r3, [r2, #36]	; 0x24
}
 800d73e:	0020      	movs	r0, r4
 800d740:	bd10      	pop	{r4, pc}
	if (HAL_RTC_Init(&RtcHandle) != HAL_OK)	return BOS_ERROR;
 800d742:	24ff      	movs	r4, #255	; 0xff
 800d744:	e7fb      	b.n	800d73e <RTC_Init+0x6a>
 800d746:	46c0      	nop			; (mov r8, r8)
 800d748:	40021000 	.word	0x40021000
 800d74c:	2000684c 	.word	0x2000684c
 800d750:	40002800 	.word	0x40002800
 800d754:	000007cf 	.word	0x000007cf
 800d758:	000032f2 	.word	0x000032f2
 800d75c:	200014b4 	.word	0x200014b4

0800d760 <BOS_CalendarConfig>:

/* --- BOS internal real-time clock and calendar configuration.
*/
BOS_Status BOS_CalendarConfig(uint8_t month, uint8_t day, uint16_t year, uint8_t weekday, uint8_t seconds, \
															uint8_t minutes, uint8_t hours, uint8_t AMPM, int8_t daylightsaving)
{
 800d760:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d762:	46c6      	mov	lr, r8
 800d764:	b500      	push	{lr}
 800d766:	b086      	sub	sp, #24
 800d768:	ac0c      	add	r4, sp, #48	; 0x30
 800d76a:	7827      	ldrb	r7, [r4, #0]
 800d76c:	ac0d      	add	r4, sp, #52	; 0x34
 800d76e:	7824      	ldrb	r4, [r4, #0]
 800d770:	46a0      	mov	r8, r4
 800d772:	ac0e      	add	r4, sp, #56	; 0x38
 800d774:	7825      	ldrb	r5, [r4, #0]
 800d776:	ac0f      	add	r4, sp, #60	; 0x3c
 800d778:	7826      	ldrb	r6, [r4, #0]
  RTC_DateTypeDef sdatestructure;
  RTC_TimeTypeDef stimestructure;	
	
  /* Set Date */
  sdatestructure.Year = year-2000;
 800d77a:	ac05      	add	r4, sp, #20
 800d77c:	3230      	adds	r2, #48	; 0x30
 800d77e:	70e2      	strb	r2, [r4, #3]
  sdatestructure.Month = month;
 800d780:	7060      	strb	r0, [r4, #1]
  sdatestructure.Date = day;
 800d782:	70a1      	strb	r1, [r4, #2]
  sdatestructure.WeekDay = weekday;		// Todo - Calculate weekday later
 800d784:	7023      	strb	r3, [r4, #0]
  
  if(HAL_RTC_SetDate(&RtcHandle,&sdatestructure,RTC_FORMAT_BIN) != HAL_OK)
 800d786:	2200      	movs	r2, #0
 800d788:	0021      	movs	r1, r4
 800d78a:	481f      	ldr	r0, [pc, #124]	; (800d808 <BOS_CalendarConfig+0xa8>)
 800d78c:	f005 f940 	bl	8012a10 <HAL_RTC_SetDate>
 800d790:	2800      	cmp	r0, #0
 800d792:	d134      	bne.n	800d7fe <BOS_CalendarConfig+0x9e>
		return BOS_ERROR;

  /* Set Time */
  stimestructure.Hours = hours;
 800d794:	466b      	mov	r3, sp
 800d796:	701d      	strb	r5, [r3, #0]
  stimestructure.Minutes = minutes;
 800d798:	4642      	mov	r2, r8
 800d79a:	705a      	strb	r2, [r3, #1]
  stimestructure.Seconds = seconds; 
 800d79c:	709f      	strb	r7, [r3, #2]
	stimestructure.StoreOperation = RTC_STOREOPERATION_RESET;		// Todo - Use this to make sure user does not change daylight settings again
 800d79e:	2300      	movs	r3, #0
 800d7a0:	9304      	str	r3, [sp, #16]
//	else if (daylightsaving == DAYLIGHT_SUB1H)
//		stimestructure.DayLightSaving = RTC_DAYLIGHTSAVING_SUB1H;
	
	if (hours > 12)	BOS.hourformat = 24;
	
	if (AMPM == RTC_AM) {
 800d7a2:	2e01      	cmp	r6, #1
 800d7a4:	d01e      	beq.n	800d7e4 <BOS_CalendarConfig+0x84>
		stimestructure.TimeFormat = RTC_HOURFORMAT12_AM;
		BOS.hourformat = 12;
	} else if (AMPM == RTC_PM) {
 800d7a6:	2e02      	cmp	r6, #2
 800d7a8:	d022      	beq.n	800d7f0 <BOS_CalendarConfig+0x90>
		stimestructure.TimeFormat = RTC_HOURFORMAT12_PM;
		BOS.hourformat = 12;
	} else
		BOS.hourformat = 24;
 800d7aa:	4b18      	ldr	r3, [pc, #96]	; (800d80c <BOS_CalendarConfig+0xac>)
 800d7ac:	2218      	movs	r2, #24
 800d7ae:	735a      	strb	r2, [r3, #13]
	
  if (HAL_RTC_SetTime(&RtcHandle, &stimestructure, RTC_FORMAT_BIN) != HAL_OK)
 800d7b0:	2200      	movs	r2, #0
 800d7b2:	4669      	mov	r1, sp
 800d7b4:	4814      	ldr	r0, [pc, #80]	; (800d808 <BOS_CalendarConfig+0xa8>)
 800d7b6:	f005 f8ab 	bl	8012910 <HAL_RTC_SetTime>
 800d7ba:	1e04      	subs	r4, r0, #0
 800d7bc:	d121      	bne.n	800d802 <BOS_CalendarConfig+0xa2>
		return BOS_ERROR;
	
	/* Save RTC hourformat and daylightsaving to EEPROM */
	EE_WriteVariable(_EE_PARAMS_RTC, ((uint16_t)BOS.hourformat<<8) | (uint16_t)BOS.buttons.minInterClickTime);
 800d7be:	4a13      	ldr	r2, [pc, #76]	; (800d80c <BOS_CalendarConfig+0xac>)
 800d7c0:	7b53      	ldrb	r3, [r2, #13]
 800d7c2:	021b      	lsls	r3, r3, #8
 800d7c4:	7911      	ldrb	r1, [r2, #4]
 800d7c6:	4319      	orrs	r1, r3
 800d7c8:	208d      	movs	r0, #141	; 0x8d
 800d7ca:	0040      	lsls	r0, r0, #1
 800d7cc:	f7f9 fe84 	bl	80074d8 <EE_WriteVariable>

  /* Writes a data in a RTC Backup data Register1 */
  HAL_RTCEx_BKUPWrite(&RtcHandle, RTC_BKP_DR1, 0x32F2);
 800d7d0:	4a0f      	ldr	r2, [pc, #60]	; (800d810 <BOS_CalendarConfig+0xb0>)
 800d7d2:	2101      	movs	r1, #1
 800d7d4:	480c      	ldr	r0, [pc, #48]	; (800d808 <BOS_CalendarConfig+0xa8>)
 800d7d6:	f005 f9df 	bl	8012b98 <HAL_RTCEx_BKUPWrite>
	
	return BOS_OK;
}
 800d7da:	0020      	movs	r0, r4
 800d7dc:	b006      	add	sp, #24
 800d7de:	bc80      	pop	{r7}
 800d7e0:	46b8      	mov	r8, r7
 800d7e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		stimestructure.TimeFormat = RTC_HOURFORMAT12_AM;
 800d7e4:	466a      	mov	r2, sp
 800d7e6:	7213      	strb	r3, [r2, #8]
		BOS.hourformat = 12;
 800d7e8:	4b08      	ldr	r3, [pc, #32]	; (800d80c <BOS_CalendarConfig+0xac>)
 800d7ea:	220c      	movs	r2, #12
 800d7ec:	735a      	strb	r2, [r3, #13]
 800d7ee:	e7df      	b.n	800d7b0 <BOS_CalendarConfig+0x50>
		stimestructure.TimeFormat = RTC_HOURFORMAT12_PM;
 800d7f0:	2340      	movs	r3, #64	; 0x40
 800d7f2:	466a      	mov	r2, sp
 800d7f4:	7213      	strb	r3, [r2, #8]
		BOS.hourformat = 12;
 800d7f6:	4b05      	ldr	r3, [pc, #20]	; (800d80c <BOS_CalendarConfig+0xac>)
 800d7f8:	220c      	movs	r2, #12
 800d7fa:	735a      	strb	r2, [r3, #13]
 800d7fc:	e7d8      	b.n	800d7b0 <BOS_CalendarConfig+0x50>
		return BOS_ERROR;
 800d7fe:	24ff      	movs	r4, #255	; 0xff
 800d800:	e7eb      	b.n	800d7da <BOS_CalendarConfig+0x7a>
		return BOS_ERROR;
 800d802:	24ff      	movs	r4, #255	; 0xff
 800d804:	e7e9      	b.n	800d7da <BOS_CalendarConfig+0x7a>
 800d806:	46c0      	nop			; (mov r8, r8)
 800d808:	2000684c 	.word	0x2000684c
 800d80c:	20006368 	.word	0x20006368
 800d810:	000032f2 	.word	0x000032f2

0800d814 <GetTimeDate>:
/*-----------------------------------------------------------*/

/* --- Get current RTC time and date.
*/
void GetTimeDate(void)
{
 800d814:	b530      	push	{r4, r5, lr}
 800d816:	b089      	sub	sp, #36	; 0x24
	RTC_DateTypeDef sdatestructureget;
  RTC_TimeTypeDef stimestructureget;
	
  HAL_RTC_GetTime(&RtcHandle, &stimestructureget, RTC_FORMAT_BIN);
 800d818:	4d16      	ldr	r5, [pc, #88]	; (800d874 <GetTimeDate+0x60>)
 800d81a:	2200      	movs	r2, #0
 800d81c:	a902      	add	r1, sp, #8
 800d81e:	0028      	movs	r0, r5
 800d820:	f005 f972 	bl	8012b08 <HAL_RTC_GetTime>
  HAL_RTC_GetDate(&RtcHandle, &sdatestructureget, RTC_FORMAT_BIN);
 800d824:	ac07      	add	r4, sp, #28
 800d826:	2200      	movs	r2, #0
 800d828:	0021      	movs	r1, r4
 800d82a:	0028      	movs	r0, r5
 800d82c:	f005 f992 	bl	8012b54 <HAL_RTC_GetDate>
	
	BOS.time.ampm = (stimestructureget.TimeFormat >> 7) + 1;
 800d830:	4b11      	ldr	r3, [pc, #68]	; (800d878 <GetTimeDate+0x64>)
 800d832:	aa02      	add	r2, sp, #8
 800d834:	7a12      	ldrb	r2, [r2, #8]
 800d836:	09d2      	lsrs	r2, r2, #7
 800d838:	3201      	adds	r2, #1
 800d83a:	74da      	strb	r2, [r3, #19]
	BOS.time.msec = stimestructureget.SubSeconds / 2;
 800d83c:	9a03      	ldr	r2, [sp, #12]
 800d83e:	9201      	str	r2, [sp, #4]
 800d840:	0852      	lsrs	r2, r2, #1
 800d842:	81da      	strh	r2, [r3, #14]
	BOS.time.seconds = stimestructureget.Seconds;
 800d844:	aa02      	add	r2, sp, #8
 800d846:	7892      	ldrb	r2, [r2, #2]
 800d848:	741a      	strb	r2, [r3, #16]
	BOS.time.minutes = stimestructureget.Minutes;
 800d84a:	aa02      	add	r2, sp, #8
 800d84c:	7852      	ldrb	r2, [r2, #1]
 800d84e:	745a      	strb	r2, [r3, #17]
	BOS.time.hours = stimestructureget.Hours;
 800d850:	aa02      	add	r2, sp, #8
 800d852:	7812      	ldrb	r2, [r2, #0]
 800d854:	749a      	strb	r2, [r3, #18]
	BOS.date.day = sdatestructureget.Date;
 800d856:	78a2      	ldrb	r2, [r4, #2]
 800d858:	755a      	strb	r2, [r3, #21]
	BOS.date.month = sdatestructureget.Month;
 800d85a:	7862      	ldrb	r2, [r4, #1]
 800d85c:	759a      	strb	r2, [r3, #22]
	BOS.date.weekday = sdatestructureget.WeekDay;
 800d85e:	7822      	ldrb	r2, [r4, #0]
 800d860:	751a      	strb	r2, [r3, #20]
	BOS.date.year = sdatestructureget.Year + 2000;
 800d862:	78e2      	ldrb	r2, [r4, #3]
 800d864:	21fa      	movs	r1, #250	; 0xfa
 800d866:	00c9      	lsls	r1, r1, #3
 800d868:	468c      	mov	ip, r1
 800d86a:	4462      	add	r2, ip
 800d86c:	831a      	strh	r2, [r3, #24]
}
 800d86e:	b009      	add	sp, #36	; 0x24
 800d870:	bd30      	pop	{r4, r5, pc}
 800d872:	46c0      	nop			; (mov r8, r8)
 800d874:	2000684c 	.word	0x2000684c
 800d878:	20006368 	.word	0x20006368

0800d87c <TIM_USEC_Init>:


/*  Micro-seconds timebase init function - TIM14 (16-bit)
*/
void TIM_USEC_Init(void)
{
 800d87c:	b530      	push	{r4, r5, lr}
 800d87e:	b085      	sub	sp, #20
  TIM_MasterConfigTypeDef sMasterConfig;
	
	/* Peripheral clock enable */
	__TIM14_CLK_ENABLE();
 800d880:	4a12      	ldr	r2, [pc, #72]	; (800d8cc <TIM_USEC_Init+0x50>)
 800d882:	69d1      	ldr	r1, [r2, #28]
 800d884:	2080      	movs	r0, #128	; 0x80
 800d886:	0040      	lsls	r0, r0, #1
 800d888:	4301      	orrs	r1, r0
 800d88a:	61d1      	str	r1, [r2, #28]
 800d88c:	69d3      	ldr	r3, [r2, #28]
 800d88e:	4003      	ands	r3, r0
 800d890:	9301      	str	r3, [sp, #4]
 800d892:	9b01      	ldr	r3, [sp, #4]

	/* Peripheral configuration */
  htim14.Instance = TIM14;
 800d894:	4c0e      	ldr	r4, [pc, #56]	; (800d8d0 <TIM_USEC_Init+0x54>)
 800d896:	4b0f      	ldr	r3, [pc, #60]	; (800d8d4 <TIM_USEC_Init+0x58>)
 800d898:	6023      	str	r3, [r4, #0]
  htim14.Init.Prescaler = HAL_RCC_GetPCLK1Freq()/1000000;
 800d89a:	f004 fef3 	bl	8012684 <HAL_RCC_GetPCLK1Freq>
 800d89e:	490e      	ldr	r1, [pc, #56]	; (800d8d8 <TIM_USEC_Init+0x5c>)
 800d8a0:	f7f2 fc56 	bl	8000150 <__udivsi3>
 800d8a4:	6060      	str	r0, [r4, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800d8a6:	2500      	movs	r5, #0
 800d8a8:	60a5      	str	r5, [r4, #8]
  htim14.Init.Period = 0xFFFF;
 800d8aa:	4b0c      	ldr	r3, [pc, #48]	; (800d8dc <TIM_USEC_Init+0x60>)
 800d8ac:	60e3      	str	r3, [r4, #12]
  HAL_TIM_Base_Init(&htim14);
 800d8ae:	0020      	movs	r0, r4
 800d8b0:	f005 f9fa 	bl	8012ca8 <HAL_TIM_Base_Init>

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800d8b4:	9502      	str	r5, [sp, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800d8b6:	9503      	str	r5, [sp, #12]
  HAL_TIMEx_MasterConfigSynchronization(&htim14, &sMasterConfig);
 800d8b8:	a902      	add	r1, sp, #8
 800d8ba:	0020      	movs	r0, r4
 800d8bc:	f005 fa0e 	bl	8012cdc <HAL_TIMEx_MasterConfigSynchronization>
	
	HAL_TIM_Base_Start(&htim14);
 800d8c0:	0020      	movs	r0, r4
 800d8c2:	f005 f976 	bl	8012bb2 <HAL_TIM_Base_Start>
}
 800d8c6:	b005      	add	sp, #20
 800d8c8:	bd30      	pop	{r4, r5, pc}
 800d8ca:	46c0      	nop			; (mov r8, r8)
 800d8cc:	40021000 	.word	0x40021000
 800d8d0:	200068a8 	.word	0x200068a8
 800d8d4:	40002000 	.word	0x40002000
 800d8d8:	000f4240 	.word	0x000f4240
 800d8dc:	0000ffff 	.word	0x0000ffff

0800d8e0 <TIM_MSEC_Init>:
/*-----------------------------------------------------------*/

/*  Milli-seconds timebase init function - TIM15 (16-bit)
*/
void TIM_MSEC_Init(void)
{
 800d8e0:	b530      	push	{r4, r5, lr}
 800d8e2:	b085      	sub	sp, #20
  TIM_MasterConfigTypeDef sMasterConfig;
	
	/* Peripheral clock enable */
	__TIM15_CLK_ENABLE();
 800d8e4:	4a12      	ldr	r2, [pc, #72]	; (800d930 <TIM_MSEC_Init+0x50>)
 800d8e6:	6991      	ldr	r1, [r2, #24]
 800d8e8:	2080      	movs	r0, #128	; 0x80
 800d8ea:	0240      	lsls	r0, r0, #9
 800d8ec:	4301      	orrs	r1, r0
 800d8ee:	6191      	str	r1, [r2, #24]
 800d8f0:	6993      	ldr	r3, [r2, #24]
 800d8f2:	4003      	ands	r3, r0
 800d8f4:	9301      	str	r3, [sp, #4]
 800d8f6:	9b01      	ldr	r3, [sp, #4]

	/* Peripheral configuration */
  htim15.Instance = TIM15;
 800d8f8:	4c0e      	ldr	r4, [pc, #56]	; (800d934 <TIM_MSEC_Init+0x54>)
 800d8fa:	4b0f      	ldr	r3, [pc, #60]	; (800d938 <TIM_MSEC_Init+0x58>)
 800d8fc:	6023      	str	r3, [r4, #0]
  htim15.Init.Prescaler = HAL_RCC_GetPCLK1Freq()/1000;
 800d8fe:	f004 fec1 	bl	8012684 <HAL_RCC_GetPCLK1Freq>
 800d902:	21fa      	movs	r1, #250	; 0xfa
 800d904:	0089      	lsls	r1, r1, #2
 800d906:	f7f2 fc23 	bl	8000150 <__udivsi3>
 800d90a:	6060      	str	r0, [r4, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800d90c:	2500      	movs	r5, #0
 800d90e:	60a5      	str	r5, [r4, #8]
  htim15.Init.Period = 0xFFFF;
 800d910:	4b0a      	ldr	r3, [pc, #40]	; (800d93c <TIM_MSEC_Init+0x5c>)
 800d912:	60e3      	str	r3, [r4, #12]
  HAL_TIM_Base_Init(&htim15);
 800d914:	0020      	movs	r0, r4
 800d916:	f005 f9c7 	bl	8012ca8 <HAL_TIM_Base_Init>

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800d91a:	9502      	str	r5, [sp, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800d91c:	9503      	str	r5, [sp, #12]
  HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig);
 800d91e:	a902      	add	r1, sp, #8
 800d920:	0020      	movs	r0, r4
 800d922:	f005 f9db 	bl	8012cdc <HAL_TIMEx_MasterConfigSynchronization>
	
	HAL_TIM_Base_Start(&htim15);
 800d926:	0020      	movs	r0, r4
 800d928:	f005 f943 	bl	8012bb2 <HAL_TIM_Base_Start>
}
 800d92c:	b005      	add	sp, #20
 800d92e:	bd30      	pop	{r4, r5, pc}
 800d930:	40021000 	.word	0x40021000
 800d934:	2000686c 	.word	0x2000686c
 800d938:	40014000 	.word	0x40014000
 800d93c:	0000ffff 	.word	0x0000ffff

0800d940 <StartMicroDelay>:
/*-----------------------------------------------------------*/

/* --- Load and start micro-second delay counter --- 
*/
void StartMicroDelay(uint16_t Delay)
{
 800d940:	b510      	push	{r4, lr}
 800d942:	0004      	movs	r4, r0
	uint32_t t0=0;

	portENTER_CRITICAL();
 800d944:	f002 fa0c 	bl	800fd60 <vPortEnterCritical>
	
	if (Delay)
 800d948:	2c00      	cmp	r4, #0
 800d94a:	d006      	beq.n	800d95a <StartMicroDelay+0x1a>
	{
		t0 = htim14.Instance->CNT;
 800d94c:	4b04      	ldr	r3, [pc, #16]	; (800d960 <StartMicroDelay+0x20>)
 800d94e:	681a      	ldr	r2, [r3, #0]
 800d950:	6a51      	ldr	r1, [r2, #36]	; 0x24

		while(htim14.Instance->CNT - t0 <= Delay) {};
 800d952:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800d954:	1a5b      	subs	r3, r3, r1
 800d956:	42a3      	cmp	r3, r4
 800d958:	d9fb      	bls.n	800d952 <StartMicroDelay+0x12>
	}
	
	portEXIT_CRITICAL();
 800d95a:	f002 fa0d 	bl	800fd78 <vPortExitCritical>
}
 800d95e:	bd10      	pop	{r4, pc}
 800d960:	200068a8 	.word	0x200068a8

0800d964 <StartMilliDelay>:
/*-----------------------------------------------------------*/

/* --- Load and start milli-second delay counter --- 
*/
void StartMilliDelay(uint16_t Delay)
{
 800d964:	b510      	push	{r4, lr}
 800d966:	0004      	movs	r4, r0
	uint32_t t0=0;
	
	portENTER_CRITICAL();
 800d968:	f002 f9fa 	bl	800fd60 <vPortEnterCritical>
	
	if (Delay)
 800d96c:	2c00      	cmp	r4, #0
 800d96e:	d006      	beq.n	800d97e <StartMilliDelay+0x1a>
	{
		t0 = htim15.Instance->CNT;
 800d970:	4b04      	ldr	r3, [pc, #16]	; (800d984 <StartMilliDelay+0x20>)
 800d972:	681a      	ldr	r2, [r3, #0]
 800d974:	6a51      	ldr	r1, [r2, #36]	; 0x24

		while(htim15.Instance->CNT - t0 <= Delay) {};
 800d976:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800d978:	1a5b      	subs	r3, r3, r1
 800d97a:	42a3      	cmp	r3, r4
 800d97c:	d9fb      	bls.n	800d976 <StartMilliDelay+0x12>
	}
	
	portEXIT_CRITICAL();
 800d97e:	f002 f9fb 	bl	800fd78 <vPortExitCritical>
}
 800d982:	bd10      	pop	{r4, pc}
 800d984:	2000686c 	.word	0x2000686c

0800d988 <MX_USART1_UART_Init>:

#ifdef P08R6
/* USART1 init function */
#ifdef _Usart1
void MX_USART1_UART_Init(void)
{
 800d988:	b510      	push	{r4, lr}
  huart1.Instance = USART1;
 800d98a:	4809      	ldr	r0, [pc, #36]	; (800d9b0 <MX_USART1_UART_Init+0x28>)
 800d98c:	4b09      	ldr	r3, [pc, #36]	; (800d9b4 <MX_USART1_UART_Init+0x2c>)
 800d98e:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800d990:	23e1      	movs	r3, #225	; 0xe1
 800d992:	031b      	lsls	r3, r3, #12
 800d994:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800d996:	2300      	movs	r3, #0
 800d998:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800d99a:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800d99c:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800d99e:	220c      	movs	r2, #12
 800d9a0:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800d9a2:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800d9a4:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800d9a6:	6203      	str	r3, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800d9a8:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart1);
 800d9aa:	f005 fe1b 	bl	80135e4 <HAL_UART_Init>
	#if _P5pol_reversed
		huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart1.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
	  HAL_UART_Init(&huart1);
	#endif	
}
 800d9ae:	bd10      	pop	{r4, pc}
 800d9b0:	2000652c 	.word	0x2000652c
 800d9b4:	40013800 	.word	0x40013800

0800d9b8 <MX_USART2_UART_Init>:
#endif

/* USART2 init function */
#ifdef _Usart2
void MX_USART2_UART_Init(void)
{
 800d9b8:	b510      	push	{r4, lr}
  huart2.Instance = USART2;
 800d9ba:	4809      	ldr	r0, [pc, #36]	; (800d9e0 <MX_USART2_UART_Init+0x28>)
 800d9bc:	4b09      	ldr	r3, [pc, #36]	; (800d9e4 <MX_USART2_UART_Init+0x2c>)
 800d9be:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800d9c0:	23e1      	movs	r3, #225	; 0xe1
 800d9c2:	031b      	lsls	r3, r3, #12
 800d9c4:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800d9c6:	2300      	movs	r3, #0
 800d9c8:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800d9ca:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800d9cc:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800d9ce:	220c      	movs	r2, #12
 800d9d0:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800d9d2:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800d9d4:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800d9d6:	6203      	str	r3, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800d9d8:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart2);
 800d9da:	f005 fe03 	bl	80135e4 <HAL_UART_Init>
	#if _P2pol_reversed
		huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart2.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
		HAL_UART_Init(&huart2);
	#endif	
}
 800d9de:	bd10      	pop	{r4, pc}
 800d9e0:	20006614 	.word	0x20006614
 800d9e4:	40004400 	.word	0x40004400

0800d9e8 <MX_USART3_UART_Init>:
#endif

/* USART3 init function */
#ifdef _Usart3
void MX_USART3_UART_Init(void)
{
 800d9e8:	b510      	push	{r4, lr}
  huart3.Instance = USART3;
 800d9ea:	4809      	ldr	r0, [pc, #36]	; (800da10 <MX_USART3_UART_Init+0x28>)
 800d9ec:	4b09      	ldr	r3, [pc, #36]	; (800da14 <MX_USART3_UART_Init+0x2c>)
 800d9ee:	6003      	str	r3, [r0, #0]
  huart3.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800d9f0:	23e1      	movs	r3, #225	; 0xe1
 800d9f2:	031b      	lsls	r3, r3, #12
 800d9f4:	6043      	str	r3, [r0, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800d9f6:	2300      	movs	r3, #0
 800d9f8:	6083      	str	r3, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800d9fa:	60c3      	str	r3, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800d9fc:	6103      	str	r3, [r0, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800d9fe:	220c      	movs	r2, #12
 800da00:	6142      	str	r2, [r0, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800da02:	6183      	str	r3, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800da04:	61c3      	str	r3, [r0, #28]
  huart3.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800da06:	6203      	str	r3, [r0, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800da08:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart3);
 800da0a:	f005 fdeb 	bl	80135e4 <HAL_UART_Init>
	#if _P4pol_reversed
		huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart3.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
	  HAL_UART_Init(&huart3);
	#endif	
}
 800da0e:	bd10      	pop	{r4, pc}
 800da10:	20006444 	.word	0x20006444
 800da14:	40004800 	.word	0x40004800

0800da18 <MX_USART5_UART_Init>:
#endif

/* USART5 init function */
#ifdef _Usart5
void MX_USART5_UART_Init(void)
{
 800da18:	b510      	push	{r4, lr}
  huart5.Instance = USART5;
 800da1a:	4809      	ldr	r0, [pc, #36]	; (800da40 <MX_USART5_UART_Init+0x28>)
 800da1c:	4b09      	ldr	r3, [pc, #36]	; (800da44 <MX_USART5_UART_Init+0x2c>)
 800da1e:	6003      	str	r3, [r0, #0]
  huart5.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800da20:	23e1      	movs	r3, #225	; 0xe1
 800da22:	031b      	lsls	r3, r3, #12
 800da24:	6043      	str	r3, [r0, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800da26:	2300      	movs	r3, #0
 800da28:	6083      	str	r3, [r0, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 800da2a:	60c3      	str	r3, [r0, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800da2c:	6103      	str	r3, [r0, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 800da2e:	220c      	movs	r2, #12
 800da30:	6142      	str	r2, [r0, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800da32:	6183      	str	r3, [r0, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 800da34:	61c3      	str	r3, [r0, #28]
  huart5.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800da36:	6203      	str	r3, [r0, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800da38:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart5);
 800da3a:	f005 fdd3 	bl	80135e4 <HAL_UART_Init>
	#if _P1pol_reversed	
		huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart5.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
	  HAL_UART_Init(&huart5);
	#endif	
}
 800da3e:	bd10      	pop	{r4, pc}
 800da40:	200064b8 	.word	0x200064b8
 800da44:	40005000 	.word	0x40005000

0800da48 <MX_USART6_UART_Init>:
#endif

/* USART6 init function */
#ifdef _Usart6
void MX_USART6_UART_Init(void)
{
 800da48:	b510      	push	{r4, lr}
  huart6.Instance = USART6;
 800da4a:	4809      	ldr	r0, [pc, #36]	; (800da70 <MX_USART6_UART_Init+0x28>)
 800da4c:	4b09      	ldr	r3, [pc, #36]	; (800da74 <MX_USART6_UART_Init+0x2c>)
 800da4e:	6003      	str	r3, [r0, #0]
  huart6.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800da50:	23e1      	movs	r3, #225	; 0xe1
 800da52:	031b      	lsls	r3, r3, #12
 800da54:	6043      	str	r3, [r0, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800da56:	2300      	movs	r3, #0
 800da58:	6083      	str	r3, [r0, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800da5a:	60c3      	str	r3, [r0, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800da5c:	6103      	str	r3, [r0, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800da5e:	220c      	movs	r2, #12
 800da60:	6142      	str	r2, [r0, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800da62:	6183      	str	r3, [r0, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800da64:	61c3      	str	r3, [r0, #28]
  huart6.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800da66:	6203      	str	r3, [r0, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800da68:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart6);
 800da6a:	f005 fdbb 	bl	80135e4 <HAL_UART_Init>
	#if _P3pol_reversed	
		huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart6.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
	  HAL_UART_Init(&huart6);
	#endif	
}
 800da6e:	bd10      	pop	{r4, pc}
 800da70:	200065a0 	.word	0x200065a0
 800da74:	40011400 	.word	0x40011400

0800da78 <HAL_UART_MspInit>:
	#endif	
}
#endif
#endif
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800da78:	b5f0      	push	{r4, r5, r6, r7, lr}
 800da7a:	46ce      	mov	lr, r9
 800da7c:	4647      	mov	r7, r8
 800da7e:	b580      	push	{r7, lr}
 800da80:	b08b      	sub	sp, #44	; 0x2c

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 800da82:	6803      	ldr	r3, [r0, #0]
 800da84:	4a7f      	ldr	r2, [pc, #508]	; (800dc84 <HAL_UART_MspInit+0x20c>)
 800da86:	4293      	cmp	r3, r2
 800da88:	d015      	beq.n	800dab6 <HAL_UART_MspInit+0x3e>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART1_IRQn);
	#endif
  }
  else if(huart->Instance==USART2)
 800da8a:	4a7f      	ldr	r2, [pc, #508]	; (800dc88 <HAL_UART_MspInit+0x210>)
 800da8c:	4293      	cmp	r3, r2
 800da8e:	d040      	beq.n	800db12 <HAL_UART_MspInit+0x9a>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART2_IRQn);
	#endif
  }
  else if(huart->Instance==USART3)
 800da90:	4a7e      	ldr	r2, [pc, #504]	; (800dc8c <HAL_UART_MspInit+0x214>)
 800da92:	4293      	cmp	r3, r2
 800da94:	d069      	beq.n	800db6a <HAL_UART_MspInit+0xf2>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
	#endif
  }
  else if(huart->Instance==USART4)
 800da96:	4a7e      	ldr	r2, [pc, #504]	; (800dc90 <HAL_UART_MspInit+0x218>)
 800da98:	4293      	cmp	r3, r2
 800da9a:	d007      	beq.n	800daac <HAL_UART_MspInit+0x34>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
	#endif
  }
  else if(huart->Instance==USART5)
 800da9c:	4a7d      	ldr	r2, [pc, #500]	; (800dc94 <HAL_UART_MspInit+0x21c>)
 800da9e:	4293      	cmp	r3, r2
 800daa0:	d100      	bne.n	800daa4 <HAL_UART_MspInit+0x2c>
 800daa2:	e092      	b.n	800dbca <HAL_UART_MspInit+0x152>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
	#endif
  }
  else if(huart->Instance==USART6)
 800daa4:	4a7c      	ldr	r2, [pc, #496]	; (800dc98 <HAL_UART_MspInit+0x220>)
 800daa6:	4293      	cmp	r3, r2
 800daa8:	d100      	bne.n	800daac <HAL_UART_MspInit+0x34>
 800daaa:	e0bc      	b.n	800dc26 <HAL_UART_MspInit+0x1ae>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
	#endif
  }
}
 800daac:	b00b      	add	sp, #44	; 0x2c
 800daae:	bcc0      	pop	{r6, r7}
 800dab0:	46b9      	mov	r9, r7
 800dab2:	46b0      	mov	r8, r6
 800dab4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __USART1_CLK_ENABLE();
 800dab6:	4a79      	ldr	r2, [pc, #484]	; (800dc9c <HAL_UART_MspInit+0x224>)
 800dab8:	6991      	ldr	r1, [r2, #24]
 800daba:	2080      	movs	r0, #128	; 0x80
 800dabc:	01c0      	lsls	r0, r0, #7
 800dabe:	4301      	orrs	r1, r0
 800dac0:	6191      	str	r1, [r2, #24]
 800dac2:	6993      	ldr	r3, [r2, #24]
 800dac4:	4003      	ands	r3, r0
 800dac6:	9300      	str	r3, [sp, #0]
 800dac8:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = USART1_TX_PIN; 
 800daca:	2380      	movs	r3, #128	; 0x80
 800dacc:	009b      	lsls	r3, r3, #2
 800dace:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800dad0:	2702      	movs	r7, #2
 800dad2:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800dad4:	2401      	movs	r4, #1
 800dad6:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800dad8:	2603      	movs	r6, #3
 800dada:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Alternate = USART1_AF;	
 800dadc:	9409      	str	r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(USART1_TX_PORT, &GPIO_InitStruct);
 800dade:	2590      	movs	r5, #144	; 0x90
 800dae0:	05ed      	lsls	r5, r5, #23
 800dae2:	a905      	add	r1, sp, #20
 800dae4:	0028      	movs	r0, r5
 800dae6:	f003 fa9b 	bl	8011020 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART1_RX_PIN;  
 800daea:	2380      	movs	r3, #128	; 0x80
 800daec:	00db      	lsls	r3, r3, #3
 800daee:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800daf0:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800daf2:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800daf4:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Alternate = USART1_AF;
 800daf6:	9409      	str	r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(USART1_RX_PORT, &GPIO_InitStruct);
 800daf8:	a905      	add	r1, sp, #20
 800dafa:	0028      	movs	r0, r5
 800dafc:	f003 fa90 	bl	8011020 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 800db00:	2200      	movs	r2, #0
 800db02:	2101      	movs	r1, #1
 800db04:	201b      	movs	r0, #27
 800db06:	f002 fab5 	bl	8010074 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800db0a:	201b      	movs	r0, #27
 800db0c:	f002 fae4 	bl	80100d8 <HAL_NVIC_EnableIRQ>
 800db10:	e7cc      	b.n	800daac <HAL_UART_MspInit+0x34>
    __USART2_CLK_ENABLE();
 800db12:	4a62      	ldr	r2, [pc, #392]	; (800dc9c <HAL_UART_MspInit+0x224>)
 800db14:	69d1      	ldr	r1, [r2, #28]
 800db16:	2080      	movs	r0, #128	; 0x80
 800db18:	0280      	lsls	r0, r0, #10
 800db1a:	4301      	orrs	r1, r0
 800db1c:	61d1      	str	r1, [r2, #28]
 800db1e:	69d3      	ldr	r3, [r2, #28]
 800db20:	4003      	ands	r3, r0
 800db22:	9301      	str	r3, [sp, #4]
 800db24:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = USART2_TX_PIN; 
 800db26:	2304      	movs	r3, #4
 800db28:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800db2a:	2702      	movs	r7, #2
 800db2c:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800db2e:	2401      	movs	r4, #1
 800db30:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800db32:	2603      	movs	r6, #3
 800db34:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Alternate = USART2_AF;	
 800db36:	9409      	str	r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(USART2_TX_PORT, &GPIO_InitStruct);
 800db38:	2590      	movs	r5, #144	; 0x90
 800db3a:	05ed      	lsls	r5, r5, #23
 800db3c:	a905      	add	r1, sp, #20
 800db3e:	0028      	movs	r0, r5
 800db40:	f003 fa6e 	bl	8011020 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART2_RX_PIN;  
 800db44:	2308      	movs	r3, #8
 800db46:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800db48:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800db4a:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800db4c:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Alternate = USART2_AF;
 800db4e:	9409      	str	r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(USART2_RX_PORT, &GPIO_InitStruct);
 800db50:	a905      	add	r1, sp, #20
 800db52:	0028      	movs	r0, r5
 800db54:	f003 fa64 	bl	8011020 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 800db58:	2200      	movs	r2, #0
 800db5a:	2101      	movs	r1, #1
 800db5c:	201c      	movs	r0, #28
 800db5e:	f002 fa89 	bl	8010074 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800db62:	201c      	movs	r0, #28
 800db64:	f002 fab8 	bl	80100d8 <HAL_NVIC_EnableIRQ>
 800db68:	e7a0      	b.n	800daac <HAL_UART_MspInit+0x34>
    __USART3_CLK_ENABLE();
 800db6a:	4a4c      	ldr	r2, [pc, #304]	; (800dc9c <HAL_UART_MspInit+0x224>)
 800db6c:	69d1      	ldr	r1, [r2, #28]
 800db6e:	2080      	movs	r0, #128	; 0x80
 800db70:	02c0      	lsls	r0, r0, #11
 800db72:	4301      	orrs	r1, r0
 800db74:	61d1      	str	r1, [r2, #28]
 800db76:	69d3      	ldr	r3, [r2, #28]
 800db78:	4003      	ands	r3, r0
 800db7a:	9302      	str	r3, [sp, #8]
 800db7c:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = USART3_TX_PIN; 
 800db7e:	2380      	movs	r3, #128	; 0x80
 800db80:	00db      	lsls	r3, r3, #3
 800db82:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800db84:	2302      	movs	r3, #2
 800db86:	4698      	mov	r8, r3
 800db88:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800db8a:	2701      	movs	r7, #1
 800db8c:	9707      	str	r7, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800db8e:	2603      	movs	r6, #3
 800db90:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Alternate = USART3_AF;	
 800db92:	2504      	movs	r5, #4
 800db94:	9509      	str	r5, [sp, #36]	; 0x24
    HAL_GPIO_Init(USART3_TX_PORT, &GPIO_InitStruct);
 800db96:	4c42      	ldr	r4, [pc, #264]	; (800dca0 <HAL_UART_MspInit+0x228>)
 800db98:	a905      	add	r1, sp, #20
 800db9a:	0020      	movs	r0, r4
 800db9c:	f003 fa40 	bl	8011020 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART3_RX_PIN;  
 800dba0:	2380      	movs	r3, #128	; 0x80
 800dba2:	011b      	lsls	r3, r3, #4
 800dba4:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800dba6:	4643      	mov	r3, r8
 800dba8:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800dbaa:	9707      	str	r7, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800dbac:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Alternate = USART3_AF;
 800dbae:	9509      	str	r5, [sp, #36]	; 0x24
    HAL_GPIO_Init(USART3_RX_PORT, &GPIO_InitStruct);
 800dbb0:	a905      	add	r1, sp, #20
 800dbb2:	0020      	movs	r0, r4
 800dbb4:	f003 fa34 	bl	8011020 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
 800dbb8:	2200      	movs	r2, #0
 800dbba:	2101      	movs	r1, #1
 800dbbc:	201d      	movs	r0, #29
 800dbbe:	f002 fa59 	bl	8010074 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
 800dbc2:	201d      	movs	r0, #29
 800dbc4:	f002 fa88 	bl	80100d8 <HAL_NVIC_EnableIRQ>
 800dbc8:	e770      	b.n	800daac <HAL_UART_MspInit+0x34>
    __USART5_CLK_ENABLE();
 800dbca:	4a34      	ldr	r2, [pc, #208]	; (800dc9c <HAL_UART_MspInit+0x224>)
 800dbcc:	69d1      	ldr	r1, [r2, #28]
 800dbce:	2080      	movs	r0, #128	; 0x80
 800dbd0:	0340      	lsls	r0, r0, #13
 800dbd2:	4301      	orrs	r1, r0
 800dbd4:	61d1      	str	r1, [r2, #28]
 800dbd6:	69d3      	ldr	r3, [r2, #28]
 800dbd8:	4003      	ands	r3, r0
 800dbda:	9303      	str	r3, [sp, #12]
 800dbdc:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = USART5_TX_PIN; 
 800dbde:	2308      	movs	r3, #8
 800dbe0:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800dbe2:	3b06      	subs	r3, #6
 800dbe4:	4698      	mov	r8, r3
 800dbe6:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800dbe8:	2701      	movs	r7, #1
 800dbea:	9707      	str	r7, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800dbec:	2603      	movs	r6, #3
 800dbee:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Alternate = USART5_AF;	
 800dbf0:	2504      	movs	r5, #4
 800dbf2:	9509      	str	r5, [sp, #36]	; 0x24
    HAL_GPIO_Init(USART5_TX_PORT, &GPIO_InitStruct);
 800dbf4:	4c2a      	ldr	r4, [pc, #168]	; (800dca0 <HAL_UART_MspInit+0x228>)
 800dbf6:	a905      	add	r1, sp, #20
 800dbf8:	0020      	movs	r0, r4
 800dbfa:	f003 fa11 	bl	8011020 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART5_RX_PIN;  
 800dbfe:	2310      	movs	r3, #16
 800dc00:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800dc02:	4643      	mov	r3, r8
 800dc04:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800dc06:	9707      	str	r7, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800dc08:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Alternate = USART5_AF;
 800dc0a:	9509      	str	r5, [sp, #36]	; 0x24
    HAL_GPIO_Init(USART5_RX_PORT, &GPIO_InitStruct);
 800dc0c:	a905      	add	r1, sp, #20
 800dc0e:	0020      	movs	r0, r4
 800dc10:	f003 fa06 	bl	8011020 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
 800dc14:	2200      	movs	r2, #0
 800dc16:	2101      	movs	r1, #1
 800dc18:	201d      	movs	r0, #29
 800dc1a:	f002 fa2b 	bl	8010074 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
 800dc1e:	201d      	movs	r0, #29
 800dc20:	f002 fa5a 	bl	80100d8 <HAL_NVIC_EnableIRQ>
 800dc24:	e742      	b.n	800daac <HAL_UART_MspInit+0x34>
    __USART6_CLK_ENABLE();
 800dc26:	4b1d      	ldr	r3, [pc, #116]	; (800dc9c <HAL_UART_MspInit+0x224>)
 800dc28:	699a      	ldr	r2, [r3, #24]
 800dc2a:	2420      	movs	r4, #32
 800dc2c:	4322      	orrs	r2, r4
 800dc2e:	619a      	str	r2, [r3, #24]
 800dc30:	699b      	ldr	r3, [r3, #24]
 800dc32:	4023      	ands	r3, r4
 800dc34:	9304      	str	r3, [sp, #16]
 800dc36:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = USART6_TX_PIN; 
 800dc38:	2310      	movs	r3, #16
 800dc3a:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800dc3c:	3b0e      	subs	r3, #14
 800dc3e:	4699      	mov	r9, r3
 800dc40:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800dc42:	3b01      	subs	r3, #1
 800dc44:	4698      	mov	r8, r3
 800dc46:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800dc48:	2703      	movs	r7, #3
 800dc4a:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Alternate = USART6_AF;	
 800dc4c:	2605      	movs	r6, #5
 800dc4e:	9609      	str	r6, [sp, #36]	; 0x24
    HAL_GPIO_Init(USART6_TX_PORT, &GPIO_InitStruct);
 800dc50:	2590      	movs	r5, #144	; 0x90
 800dc52:	05ed      	lsls	r5, r5, #23
 800dc54:	a905      	add	r1, sp, #20
 800dc56:	0028      	movs	r0, r5
 800dc58:	f003 f9e2 	bl	8011020 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART6_RX_PIN;  
 800dc5c:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800dc5e:	464b      	mov	r3, r9
 800dc60:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800dc62:	4643      	mov	r3, r8
 800dc64:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800dc66:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Alternate = USART6_AF;
 800dc68:	9609      	str	r6, [sp, #36]	; 0x24
    HAL_GPIO_Init(USART6_RX_PORT, &GPIO_InitStruct);
 800dc6a:	a905      	add	r1, sp, #20
 800dc6c:	0028      	movs	r0, r5
 800dc6e:	f003 f9d7 	bl	8011020 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
 800dc72:	2200      	movs	r2, #0
 800dc74:	2101      	movs	r1, #1
 800dc76:	201d      	movs	r0, #29
 800dc78:	f002 f9fc 	bl	8010074 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
 800dc7c:	201d      	movs	r0, #29
 800dc7e:	f002 fa2b 	bl	80100d8 <HAL_NVIC_EnableIRQ>
}
 800dc82:	e713      	b.n	800daac <HAL_UART_MspInit+0x34>
 800dc84:	40013800 	.word	0x40013800
 800dc88:	40004400 	.word	0x40004400
 800dc8c:	40004800 	.word	0x40004800
 800dc90:	40004c00 	.word	0x40004c00
 800dc94:	40005000 	.word	0x40005000
 800dc98:	40011400 	.word	0x40011400
 800dc9c:	40021000 	.word	0x40021000
 800dca0:	48000400 	.word	0x48000400

0800dca4 <GetUart>:

/* --- Get the UART for a given port. 
*/
UART_HandleTypeDef* GetUart(uint8_t port)
{
	switch (port)
 800dca4:	2805      	cmp	r0, #5
 800dca6:	d80b      	bhi.n	800dcc0 <GetUart+0x1c>
 800dca8:	0080      	lsls	r0, r0, #2
 800dcaa:	4b07      	ldr	r3, [pc, #28]	; (800dcc8 <GetUart+0x24>)
 800dcac:	581b      	ldr	r3, [r3, r0]
 800dcae:	469f      	mov	pc, r3
		case P4 :
			return P4uart;
	#endif
	#ifdef _P5
		case P5 :
			return P5uart;
 800dcb0:	4806      	ldr	r0, [pc, #24]	; (800dccc <GetUart+0x28>)
			return P10uart;
	#endif
		default:
			return 0;
	}		
}
 800dcb2:	4770      	bx	lr
			return P3uart;
 800dcb4:	4806      	ldr	r0, [pc, #24]	; (800dcd0 <GetUart+0x2c>)
 800dcb6:	e7fc      	b.n	800dcb2 <GetUart+0xe>
			return P4uart;
 800dcb8:	4806      	ldr	r0, [pc, #24]	; (800dcd4 <GetUart+0x30>)
 800dcba:	e7fa      	b.n	800dcb2 <GetUart+0xe>
			return P5uart;
 800dcbc:	4806      	ldr	r0, [pc, #24]	; (800dcd8 <GetUart+0x34>)
 800dcbe:	e7f8      	b.n	800dcb2 <GetUart+0xe>
			return 0;
 800dcc0:	2000      	movs	r0, #0
 800dcc2:	e7f6      	b.n	800dcb2 <GetUart+0xe>
			return P1uart;	
 800dcc4:	4805      	ldr	r0, [pc, #20]	; (800dcdc <GetUart+0x38>)
 800dcc6:	e7f4      	b.n	800dcb2 <GetUart+0xe>
 800dcc8:	0801ca44 	.word	0x0801ca44
 800dccc:	20006614 	.word	0x20006614
 800dcd0:	200065a0 	.word	0x200065a0
 800dcd4:	20006444 	.word	0x20006444
 800dcd8:	2000652c 	.word	0x2000652c
 800dcdc:	200064b8 	.word	0x200064b8

0800dce0 <writePxMutex>:
{
 800dce0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dce2:	46ce      	mov	lr, r9
 800dce4:	b500      	push	{lr}
 800dce6:	b082      	sub	sp, #8
 800dce8:	0006      	movs	r6, r0
 800dcea:	000f      	movs	r7, r1
 800dcec:	4691      	mov	r9, r2
 800dcee:	9301      	str	r3, [sp, #4]
	if (GetUart(port) != NULL) {
 800dcf0:	f7ff ffd8 	bl	800dca4 <GetUart>
 800dcf4:	0005      	movs	r5, r0
	HAL_StatusTypeDef result = HAL_ERROR;
 800dcf6:	2401      	movs	r4, #1
	if (GetUart(port) != NULL) {
 800dcf8:	2800      	cmp	r0, #0
 800dcfa:	d016      	beq.n	800dd2a <writePxMutex+0x4a>
		if (osSemaphoreWait(PxTxSemaphoreHandle[port], mutexTimeout) == osOK) {
 800dcfc:	00b3      	lsls	r3, r6, #2
 800dcfe:	4a0d      	ldr	r2, [pc, #52]	; (800dd34 <writePxMutex+0x54>)
 800dd00:	5898      	ldr	r0, [r3, r2]
 800dd02:	9901      	ldr	r1, [sp, #4]
 800dd04:	f000 f93a 	bl	800df7c <osSemaphoreWait>
 800dd08:	2800      	cmp	r0, #0
 800dd0a:	d10e      	bne.n	800dd2a <writePxMutex+0x4a>
				result = HAL_UART_Transmit(GetUart(port), (uint8_t *)buffer, n, portTimeout);
 800dd0c:	9b08      	ldr	r3, [sp, #32]
 800dd0e:	464a      	mov	r2, r9
 800dd10:	0039      	movs	r1, r7
 800dd12:	0028      	movs	r0, r5
 800dd14:	f005 fbba 	bl	801348c <HAL_UART_Transmit>
 800dd18:	1e04      	subs	r4, r0, #0
			while( result != HAL_OK && result !=  HAL_TIMEOUT ) {
 800dd1a:	d001      	beq.n	800dd20 <writePxMutex+0x40>
 800dd1c:	2803      	cmp	r0, #3
 800dd1e:	d1f5      	bne.n	800dd0c <writePxMutex+0x2c>
			osSemaphoreRelease(PxTxSemaphoreHandle[port]);
 800dd20:	00b6      	lsls	r6, r6, #2
 800dd22:	4b04      	ldr	r3, [pc, #16]	; (800dd34 <writePxMutex+0x54>)
 800dd24:	58f0      	ldr	r0, [r6, r3]
 800dd26:	f000 f957 	bl	800dfd8 <osSemaphoreRelease>
}
 800dd2a:	0020      	movs	r0, r4
 800dd2c:	b002      	add	sp, #8
 800dd2e:	bc80      	pop	{r7}
 800dd30:	46b9      	mov	r9, r7
 800dd32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dd34:	200063e8 	.word	0x200063e8

0800dd38 <writePxITMutex>:
{
 800dd38:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dd3a:	b083      	sub	sp, #12
 800dd3c:	0004      	movs	r4, r0
 800dd3e:	9101      	str	r1, [sp, #4]
 800dd40:	0017      	movs	r7, r2
 800dd42:	001d      	movs	r5, r3
	if (GetUart(port) != NULL) {	
 800dd44:	f7ff ffae 	bl	800dca4 <GetUart>
 800dd48:	0006      	movs	r6, r0
	HAL_StatusTypeDef result = HAL_ERROR; 
 800dd4a:	2001      	movs	r0, #1
	if (GetUart(port) != NULL) {	
 800dd4c:	2e00      	cmp	r6, #0
 800dd4e:	d009      	beq.n	800dd64 <writePxITMutex+0x2c>
		if (osSemaphoreWait(PxTxSemaphoreHandle[port], mutexTimeout) == osOK) {
 800dd50:	00a4      	lsls	r4, r4, #2
 800dd52:	4b08      	ldr	r3, [pc, #32]	; (800dd74 <writePxITMutex+0x3c>)
 800dd54:	58e0      	ldr	r0, [r4, r3]
 800dd56:	0029      	movs	r1, r5
 800dd58:	f000 f910 	bl	800df7c <osSemaphoreWait>
 800dd5c:	0003      	movs	r3, r0
	HAL_StatusTypeDef result = HAL_ERROR; 
 800dd5e:	2001      	movs	r0, #1
		if (osSemaphoreWait(PxTxSemaphoreHandle[port], mutexTimeout) == osOK) {
 800dd60:	2b00      	cmp	r3, #0
 800dd62:	d001      	beq.n	800dd68 <writePxITMutex+0x30>
}
 800dd64:	b003      	add	sp, #12
 800dd66:	bdf0      	pop	{r4, r5, r6, r7, pc}
			result = HAL_UART_Transmit_IT(GetUart(port), (uint8_t *)buffer, n);
 800dd68:	003a      	movs	r2, r7
 800dd6a:	9901      	ldr	r1, [sp, #4]
 800dd6c:	0030      	movs	r0, r6
 800dd6e:	f004 fff8 	bl	8012d62 <HAL_UART_Transmit_IT>
 800dd72:	e7f7      	b.n	800dd64 <writePxITMutex+0x2c>
 800dd74:	200063e8 	.word	0x200063e8

0800dd78 <writePxDMAMutex>:
{
 800dd78:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dd7a:	b083      	sub	sp, #12
 800dd7c:	0004      	movs	r4, r0
 800dd7e:	9101      	str	r1, [sp, #4]
 800dd80:	0017      	movs	r7, r2
 800dd82:	001d      	movs	r5, r3
	UART_HandleTypeDef* hUart = GetUart(port);
 800dd84:	f7ff ff8e 	bl	800dca4 <GetUart>
 800dd88:	0006      	movs	r6, r0
	HAL_StatusTypeDef result = HAL_ERROR; 
 800dd8a:	2001      	movs	r0, #1
	if (hUart != NULL) {	
 800dd8c:	2e00      	cmp	r6, #0
 800dd8e:	d009      	beq.n	800dda4 <writePxDMAMutex+0x2c>
		if (osSemaphoreWait(PxTxSemaphoreHandle[port], mutexTimeout) == osOK) {
 800dd90:	00a4      	lsls	r4, r4, #2
 800dd92:	4b0a      	ldr	r3, [pc, #40]	; (800ddbc <writePxDMAMutex+0x44>)
 800dd94:	58e0      	ldr	r0, [r4, r3]
 800dd96:	0029      	movs	r1, r5
 800dd98:	f000 f8f0 	bl	800df7c <osSemaphoreWait>
 800dd9c:	0003      	movs	r3, r0
	HAL_StatusTypeDef result = HAL_ERROR; 
 800dd9e:	2001      	movs	r0, #1
		if (osSemaphoreWait(PxTxSemaphoreHandle[port], mutexTimeout) == osOK) {
 800dda0:	2b00      	cmp	r3, #0
 800dda2:	d001      	beq.n	800dda8 <writePxDMAMutex+0x30>
}
 800dda4:	b003      	add	sp, #12
 800dda6:	bdf0      	pop	{r4, r5, r6, r7, pc}
			DMA_MSG_TX_Setup(hUart);
 800dda8:	0030      	movs	r0, r6
 800ddaa:	f7fe ffbb 	bl	800cd24 <DMA_MSG_TX_Setup>
			result = HAL_UART_Transmit_DMA(hUart, (uint8_t *)buffer, n);
 800ddae:	003a      	movs	r2, r7
 800ddb0:	9901      	ldr	r1, [sp, #4]
 800ddb2:	0030      	movs	r0, r6
 800ddb4:	f005 f884 	bl	8012ec0 <HAL_UART_Transmit_DMA>
 800ddb8:	e7f4      	b.n	800dda4 <writePxDMAMutex+0x2c>
 800ddba:	46c0      	nop			; (mov r8, r8)
 800ddbc:	200063e8 	.word	0x200063e8

0800ddc0 <UpdateBaudrate>:
{
 800ddc0:	b510      	push	{r4, lr}
 800ddc2:	000c      	movs	r4, r1
	UART_HandleTypeDef *huart = GetUart(port);
 800ddc4:	f7ff ff6e 	bl	800dca4 <GetUart>
	huart->Init.BaudRate = baudrate;
 800ddc8:	6044      	str	r4, [r0, #4]
	HAL_UART_Init(huart);
 800ddca:	f005 fc0b 	bl	80135e4 <HAL_UART_Init>
}
 800ddce:	2000      	movs	r0, #0
 800ddd0:	bd10      	pop	{r4, pc}
	...

0800ddd4 <SwapUartPins>:
/*-----------------------------------------------------------*/

/* --- Swap UART pins ( NORMAL | REVERSED )--- 
*/
void SwapUartPins(UART_HandleTypeDef *huart, uint8_t direction)
{
 800ddd4:	b570      	push	{r4, r5, r6, lr}
 800ddd6:	1e04      	subs	r4, r0, #0
	if (huart != NULL) {
 800ddd8:	d003      	beq.n	800dde2 <SwapUartPins+0xe>
		if (direction == REVERSED) {
 800ddda:	2901      	cmp	r1, #1
 800dddc:	d002      	beq.n	800dde4 <SwapUartPins+0x10>
			arrayPortsDir[myID-1] |= (0x8000>>(GetPort(huart)-1));		/* Set bit to one */
			huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
			huart->AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
			HAL_UART_Init(huart);
		} else if (direction == NORMAL) {
 800ddde:	2900      	cmp	r1, #0
 800dde0:	d016      	beq.n	800de10 <SwapUartPins+0x3c>
			huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
			huart->AdvancedInit.Swap = UART_ADVFEATURE_SWAP_DISABLE;
			HAL_UART_Init(huart);		
		}
	}
}
 800dde2:	bd70      	pop	{r4, r5, r6, pc}
			arrayPortsDir[myID-1] |= (0x8000>>(GetPort(huart)-1));		/* Set bit to one */
 800dde4:	f7fd fc00 	bl	800b5e8 <GetPort>
 800dde8:	4b14      	ldr	r3, [pc, #80]	; (800de3c <SwapUartPins+0x68>)
 800ddea:	781b      	ldrb	r3, [r3, #0]
 800ddec:	3b01      	subs	r3, #1
 800ddee:	4d14      	ldr	r5, [pc, #80]	; (800de40 <SwapUartPins+0x6c>)
 800ddf0:	005b      	lsls	r3, r3, #1
 800ddf2:	3801      	subs	r0, #1
 800ddf4:	2180      	movs	r1, #128	; 0x80
 800ddf6:	0209      	lsls	r1, r1, #8
 800ddf8:	000a      	movs	r2, r1
 800ddfa:	4102      	asrs	r2, r0
 800ddfc:	5b58      	ldrh	r0, [r3, r5]
 800ddfe:	4302      	orrs	r2, r0
 800de00:	535a      	strh	r2, [r3, r5]
			huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 800de02:	2308      	movs	r3, #8
 800de04:	6263      	str	r3, [r4, #36]	; 0x24
			huart->AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 800de06:	6361      	str	r1, [r4, #52]	; 0x34
			HAL_UART_Init(huart);
 800de08:	0020      	movs	r0, r4
 800de0a:	f005 fbeb 	bl	80135e4 <HAL_UART_Init>
 800de0e:	e7e8      	b.n	800dde2 <SwapUartPins+0xe>
			arrayPortsDir[myID-1] &= (~(0x8000>>(GetPort(huart)-1)));		/* Set bit to zero */
 800de10:	f7fd fbea 	bl	800b5e8 <GetPort>
 800de14:	4b09      	ldr	r3, [pc, #36]	; (800de3c <SwapUartPins+0x68>)
 800de16:	781b      	ldrb	r3, [r3, #0]
 800de18:	3b01      	subs	r3, #1
 800de1a:	4d09      	ldr	r5, [pc, #36]	; (800de40 <SwapUartPins+0x6c>)
 800de1c:	005b      	lsls	r3, r3, #1
 800de1e:	3801      	subs	r0, #1
 800de20:	2180      	movs	r1, #128	; 0x80
 800de22:	0209      	lsls	r1, r1, #8
 800de24:	4101      	asrs	r1, r0
 800de26:	5b5a      	ldrh	r2, [r3, r5]
 800de28:	438a      	bics	r2, r1
 800de2a:	535a      	strh	r2, [r3, r5]
			huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 800de2c:	2308      	movs	r3, #8
 800de2e:	6263      	str	r3, [r4, #36]	; 0x24
			huart->AdvancedInit.Swap = UART_ADVFEATURE_SWAP_DISABLE;
 800de30:	2300      	movs	r3, #0
 800de32:	6363      	str	r3, [r4, #52]	; 0x34
			HAL_UART_Init(huart);		
 800de34:	0020      	movs	r0, r4
 800de36:	f005 fbd5 	bl	80135e4 <HAL_UART_Init>
}
 800de3a:	e7d2      	b.n	800dde2 <SwapUartPins+0xe>
 800de3c:	20000b04 	.word	0x20000b04
 800de40:	200068e4 	.word	0x200068e4

0800de44 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800de44:	4816      	ldr	r0, [pc, #88]	; (800dea0 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 800de46:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800de48:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800de4a:	e003      	b.n	800de54 <LoopCopyDataInit>

0800de4c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800de4c:	4b15      	ldr	r3, [pc, #84]	; (800dea4 <LoopForever+0x8>)
  ldr r3, [r3, r1]
 800de4e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800de50:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800de52:	3104      	adds	r1, #4

0800de54 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800de54:	4814      	ldr	r0, [pc, #80]	; (800dea8 <LoopForever+0xc>)
  ldr r3, =_edata
 800de56:	4b15      	ldr	r3, [pc, #84]	; (800deac <LoopForever+0x10>)
  adds r2, r0, r1
 800de58:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800de5a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800de5c:	d3f6      	bcc.n	800de4c <CopyDataInit>
  ldr r2, =_sbss
 800de5e:	4a14      	ldr	r2, [pc, #80]	; (800deb0 <LoopForever+0x14>)
  b LoopFillZerobss
 800de60:	e002      	b.n	800de68 <LoopFillZerobss>

0800de62 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800de62:	2300      	movs	r3, #0
  str  r3, [r2]
 800de64:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800de66:	3204      	adds	r2, #4

0800de68 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 800de68:	4b12      	ldr	r3, [pc, #72]	; (800deb4 <LoopForever+0x18>)
  cmp r2, r3
 800de6a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800de6c:	d3f9      	bcc.n	800de62 <FillZerobss>

//------------------------------------------------------------------------------
// Modified Reset Handler for bootloader reboot (sourcer32@gmail.com)
	LDR        R0, =0x20007FF0  	// Address for RAM signature (STM32F09x)
 800de6e:	4812      	ldr	r0, [pc, #72]	; (800deb8 <LoopForever+0x1c>)
	LDR        R1, =0xDEADBEEF
 800de70:	4912      	ldr	r1, [pc, #72]	; (800debc <LoopForever+0x20>)
	LDR        R2, [R0, #0] 		// Read current
 800de72:	6802      	ldr	r2, [r0, #0]
	STR        R0, [R0, #0] 		// Invalidate
 800de74:	6000      	str	r0, [r0, #0]
	CMP        R2, R1
 800de76:	428a      	cmp	r2, r1
	BEQ        Reboot_Loader
 800de78:	d005      	beq.n	800de86 <Reboot_Loader>

// Normal startup path

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800de7a:	f000 f82b 	bl	800ded4 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800de7e:	f008 fb13 	bl	80164a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800de82:	f008 faf2 	bl	801646a <main>

0800de86 <Reboot_Loader>:

// Vector into System Loader
Reboot_Loader:
	LDR     R0, =0x40021018 	// RCC_APB2ENR (+0x18)
 800de86:	480e      	ldr	r0, [pc, #56]	; (800dec0 <LoopForever+0x24>)
	LDR     R1, =0x00000001 	// ENABLE SYSCFG CLOCK
 800de88:	490e      	ldr	r1, [pc, #56]	; (800dec4 <LoopForever+0x28>)
	STR     R1, [R0, #0]
 800de8a:	6001      	str	r1, [r0, #0]
	LDR     R0, =0x40010000 	// SYSCFG_CFGR1 (+0x00)
 800de8c:	480e      	ldr	r0, [pc, #56]	; (800dec8 <LoopForever+0x2c>)
	LDR     R1, =0x00000001 	// MAP ROM AT ZERO
 800de8e:	490d      	ldr	r1, [pc, #52]	; (800dec4 <LoopForever+0x28>)
	STR     R1, [R0, #0]
 800de90:	6001      	str	r1, [r0, #0]
	//                LDR     R0, =0x1FFFEC00 ; ROM BASE (STM32F03x)
	//                LDR     R0, =0x1FFFC400 ; ROM BASE (STM32F04x)
	//                LDR     R0, =0x1FFFEC00 ; ROM BASE (STM32F05x)
	//                LDR     R0, =0x1FFFC800 ; ROM BASE (STM32F07x)
	LDR     R0, =0x1FFFD800 	// ROM BASE (STM32F09x)
 800de92:	480e      	ldr	r0, [pc, #56]	; (800decc <LoopForever+0x30>)
	LDR     R1, [R0, #0]    	// SP @ +0
 800de94:	6801      	ldr	r1, [r0, #0]
	MOV     SP, R1
 800de96:	468d      	mov	sp, r1
	LDR     R0, [R0, #4]    	// PC @ +4
 800de98:	6840      	ldr	r0, [r0, #4]
	BX      R0
 800de9a:	4700      	bx	r0

0800de9c <LoopForever>:


LoopForever:
    b LoopForever
 800de9c:	e7fe      	b.n	800de9c <LoopForever>
 800de9e:	0000      	.short	0x0000
  ldr   r0, =_estack
 800dea0:	20008000 	.word	0x20008000
  ldr r3, =_sidata
 800dea4:	0801d1d8 	.word	0x0801d1d8
  ldr r0, =_sdata
 800dea8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800deac:	2000053c 	.word	0x2000053c
  ldr r2, =_sbss
 800deb0:	20000540 	.word	0x20000540
  ldr r3, = _ebss
 800deb4:	20006988 	.word	0x20006988
	LDR        R0, =0x20007FF0  	// Address for RAM signature (STM32F09x)
 800deb8:	20007ff0 	.word	0x20007ff0
	LDR        R1, =0xDEADBEEF
 800debc:	deadbeef 	.word	0xdeadbeef
	LDR     R0, =0x40021018 	// RCC_APB2ENR (+0x18)
 800dec0:	40021018 	.word	0x40021018
	LDR     R1, =0x00000001 	// ENABLE SYSCFG CLOCK
 800dec4:	00000001 	.word	0x00000001
	LDR     R0, =0x40010000 	// SYSCFG_CFGR1 (+0x00)
 800dec8:	40010000 	.word	0x40010000
	LDR     R0, =0x1FFFD800 	// ROM BASE (STM32F09x)
 800decc:	1fffd800 	.word	0x1fffd800

0800ded0 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800ded0:	e7fe      	b.n	800ded0 <ADC1_COMP_IRQHandler>
	...

0800ded4 <SystemInit>:
  */
void SystemInit(void)
{
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800ded4:	4b11      	ldr	r3, [pc, #68]	; (800df1c <SystemInit+0x48>)
 800ded6:	681a      	ldr	r2, [r3, #0]
 800ded8:	2101      	movs	r1, #1
 800deda:	430a      	orrs	r2, r1
 800dedc:	601a      	str	r2, [r3, #0]
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80C;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80C;
 800dede:	685a      	ldr	r2, [r3, #4]
 800dee0:	480f      	ldr	r0, [pc, #60]	; (800df20 <SystemInit+0x4c>)
 800dee2:	4002      	ands	r2, r0
 800dee4:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800dee6:	681a      	ldr	r2, [r3, #0]
 800dee8:	480e      	ldr	r0, [pc, #56]	; (800df24 <SystemInit+0x50>)
 800deea:	4002      	ands	r2, r0
 800deec:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800deee:	681a      	ldr	r2, [r3, #0]
 800def0:	480d      	ldr	r0, [pc, #52]	; (800df28 <SystemInit+0x54>)
 800def2:	4002      	ands	r2, r0
 800def4:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFF;
 800def6:	685a      	ldr	r2, [r3, #4]
 800def8:	480c      	ldr	r0, [pc, #48]	; (800df2c <SystemInit+0x58>)
 800defa:	4002      	ands	r2, r0
 800defc:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 800defe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800df00:	200f      	movs	r0, #15
 800df02:	4382      	bics	r2, r0
 800df04:	62da      	str	r2, [r3, #44]	; 0x2c
#elif defined (STM32F071xB)
  /* Reset USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFCEAC;
#elif defined (STM32F091xC) || defined (STM32F098xx)
  /* Reset USART3SW[1:0], USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFF0FEAC;
 800df06:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800df08:	4809      	ldr	r0, [pc, #36]	; (800df30 <SystemInit+0x5c>)
 800df0a:	4002      	ands	r2, r0
 800df0c:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFE;
 800df0e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800df10:	438a      	bics	r2, r1
 800df12:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800df14:	2200      	movs	r2, #0
 800df16:	609a      	str	r2, [r3, #8]

}
 800df18:	4770      	bx	lr
 800df1a:	46c0      	nop			; (mov r8, r8)
 800df1c:	40021000 	.word	0x40021000
 800df20:	08ffb80c 	.word	0x08ffb80c
 800df24:	fef6ffff 	.word	0xfef6ffff
 800df28:	fffbffff 	.word	0xfffbffff
 800df2c:	ffc0ffff 	.word	0xffc0ffff
 800df30:	fff0feac 	.word	0xfff0feac

0800df34 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800df34:	b510      	push	{r4, lr}
  vTaskStartScheduler();
 800df36:	f000 ff89 	bl	800ee4c <vTaskStartScheduler>
  
  return osOK;
}
 800df3a:	2000      	movs	r0, #0
 800df3c:	bd10      	pop	{r4, pc}

0800df3e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800df3e:	b510      	push	{r4, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800df40:	2800      	cmp	r0, #0
 800df42:	d100      	bne.n	800df46 <osDelay+0x8>
 800df44:	3001      	adds	r0, #1
 800df46:	f001 f8c9 	bl	800f0dc <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800df4a:	2000      	movs	r0, #0
 800df4c:	bd10      	pop	{r4, pc}

0800df4e <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{
 800df4e:	b510      	push	{r4, lr}
 800df50:	0008      	movs	r0, r1
  (void) semaphore_def;
  osSemaphoreId sema;
  
  if (count == 1) {
 800df52:	2901      	cmp	r1, #1
 800df54:	d005      	beq.n	800df62 <osSemaphoreCreate+0x14>
    vSemaphoreCreateBinary(sema);
    return sema;
  }

#if (configUSE_COUNTING_SEMAPHORES == 1 )	
  return xSemaphoreCreateCounting(count, 0);
 800df56:	2100      	movs	r1, #0
 800df58:	f000 fb12 	bl	800e580 <xQueueCreateCountingSemaphore>
 800df5c:	0004      	movs	r4, r0
#else
  return NULL;
#endif
}
 800df5e:	0020      	movs	r0, r4
 800df60:	bd10      	pop	{r4, pc}
    vSemaphoreCreateBinary(sema);
 800df62:	2203      	movs	r2, #3
 800df64:	2100      	movs	r1, #0
 800df66:	f000 fae6 	bl	800e536 <xQueueGenericCreate>
 800df6a:	1e04      	subs	r4, r0, #0
 800df6c:	d0f7      	beq.n	800df5e <osSemaphoreCreate+0x10>
 800df6e:	2300      	movs	r3, #0
 800df70:	2200      	movs	r2, #0
 800df72:	2100      	movs	r1, #0
 800df74:	f000 fb18 	bl	800e5a8 <xQueueGenericSend>
 800df78:	e7f1      	b.n	800df5e <osSemaphoreCreate+0x10>
	...

0800df7c <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800df7c:	b500      	push	{lr}
 800df7e:	b083      	sub	sp, #12
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800df80:	2300      	movs	r3, #0
 800df82:	9301      	str	r3, [sp, #4]
  
  
  if (semaphore_id == NULL) {
 800df84:	2800      	cmp	r0, #0
 800df86:	d020      	beq.n	800dfca <osSemaphoreWait+0x4e>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800df88:	f3ef 8305 	mrs	r3, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 800df8c:	2b00      	cmp	r3, #0
 800df8e:	d00e      	beq.n	800dfae <osSemaphoreWait+0x32>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800df90:	aa01      	add	r2, sp, #4
 800df92:	2100      	movs	r1, #0
 800df94:	f000 fcd3 	bl	800e93e <xQueueReceiveFromISR>
 800df98:	2801      	cmp	r0, #1
 800df9a:	d118      	bne.n	800dfce <osSemaphoreWait+0x52>
      return osErrorOS;
    }
	portEND_SWITCHING_ISR(taskWoken);
 800df9c:	9801      	ldr	r0, [sp, #4]
 800df9e:	2800      	cmp	r0, #0
 800dfa0:	d011      	beq.n	800dfc6 <osSemaphoreWait+0x4a>
 800dfa2:	4b0c      	ldr	r3, [pc, #48]	; (800dfd4 <osSemaphoreWait+0x58>)
 800dfa4:	2280      	movs	r2, #128	; 0x80
 800dfa6:	0552      	lsls	r2, r2, #21
 800dfa8:	601a      	str	r2, [r3, #0]
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
    return osErrorOS;
  }
  
  return osOK;
 800dfaa:	2000      	movs	r0, #0
 800dfac:	e00b      	b.n	800dfc6 <osSemaphoreWait+0x4a>
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800dfae:	2300      	movs	r3, #0
 800dfb0:	000a      	movs	r2, r1
 800dfb2:	2100      	movs	r1, #0
 800dfb4:	f000 fc18 	bl	800e7e8 <xQueueGenericReceive>
    return osErrorOS;
 800dfb8:	3801      	subs	r0, #1
 800dfba:	4243      	negs	r3, r0
 800dfbc:	4158      	adcs	r0, r3
 800dfbe:	4240      	negs	r0, r0
 800dfc0:	23fe      	movs	r3, #254	; 0xfe
 800dfc2:	4398      	bics	r0, r3
 800dfc4:	30ff      	adds	r0, #255	; 0xff
}
 800dfc6:	b003      	add	sp, #12
 800dfc8:	bd00      	pop	{pc}
    return osErrorParameter;
 800dfca:	2080      	movs	r0, #128	; 0x80
 800dfcc:	e7fb      	b.n	800dfc6 <osSemaphoreWait+0x4a>
      return osErrorOS;
 800dfce:	20ff      	movs	r0, #255	; 0xff
 800dfd0:	e7f9      	b.n	800dfc6 <osSemaphoreWait+0x4a>
 800dfd2:	46c0      	nop			; (mov r8, r8)
 800dfd4:	e000ed04 	.word	0xe000ed04

0800dfd8 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800dfd8:	b510      	push	{r4, lr}
 800dfda:	b082      	sub	sp, #8
  osStatus result = osOK;
  portBASE_TYPE taskWoken = pdFALSE;
 800dfdc:	2300      	movs	r3, #0
 800dfde:	9301      	str	r3, [sp, #4]
 800dfe0:	f3ef 8405 	mrs	r4, IPSR
  
  
  if (inHandlerMode()) {
 800dfe4:	2c00      	cmp	r4, #0
 800dfe6:	d00d      	beq.n	800e004 <osSemaphoreRelease+0x2c>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800dfe8:	a901      	add	r1, sp, #4
 800dfea:	f000 fbc1 	bl	800e770 <xQueueGiveFromISR>
 800dfee:	2801      	cmp	r0, #1
 800dff0:	d113      	bne.n	800e01a <osSemaphoreRelease+0x42>
  osStatus result = osOK;
 800dff2:	2400      	movs	r4, #0
      return osErrorOS;
    }
    portEND_SWITCHING_ISR(taskWoken);
 800dff4:	9b01      	ldr	r3, [sp, #4]
 800dff6:	2b00      	cmp	r3, #0
 800dff8:	d00c      	beq.n	800e014 <osSemaphoreRelease+0x3c>
 800dffa:	4b09      	ldr	r3, [pc, #36]	; (800e020 <osSemaphoreRelease+0x48>)
 800dffc:	2280      	movs	r2, #128	; 0x80
 800dffe:	0552      	lsls	r2, r2, #21
 800e000:	601a      	str	r2, [r3, #0]
 800e002:	e007      	b.n	800e014 <osSemaphoreRelease+0x3c>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800e004:	2300      	movs	r3, #0
 800e006:	2200      	movs	r2, #0
 800e008:	2100      	movs	r1, #0
 800e00a:	f000 facd 	bl	800e5a8 <xQueueGenericSend>
 800e00e:	2801      	cmp	r0, #1
 800e010:	d000      	beq.n	800e014 <osSemaphoreRelease+0x3c>
      result = osErrorOS;
 800e012:	24ff      	movs	r4, #255	; 0xff
    }
  }
  
  return result;
}
 800e014:	0020      	movs	r0, r4
 800e016:	b002      	add	sp, #8
 800e018:	bd10      	pop	{r4, pc}
      return osErrorOS;
 800e01a:	24ff      	movs	r4, #255	; 0xff
 800e01c:	e7fa      	b.n	800e014 <osSemaphoreRelease+0x3c>
 800e01e:	46c0      	nop			; (mov r8, r8)
 800e020:	e000ed04 	.word	0xe000ed04

0800e024 <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 800e024:	b510      	push	{r4, lr}

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800e026:	f001 fa4d 	bl	800f4c4 <xTaskGetSchedulerState>
 800e02a:	2801      	cmp	r0, #1
 800e02c:	d100      	bne.n	800e030 <osSystickHandler+0xc>
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 800e02e:	bd10      	pop	{r4, pc}
    xPortSysTickHandler();
 800e030:	f001 fedc 	bl	800fdec <xPortSysTickHandler>
}
 800e034:	e7fb      	b.n	800e02e <osSystickHandler+0xa>
	...

0800e038 <FreeRTOS_CLIRegisterCommand>:
static int8_t cOutputBuffer[ configCOMMAND_INT_MAX_OUTPUT_SIZE ];

/*-----------------------------------------------------------*/

portBASE_TYPE FreeRTOS_CLIRegisterCommand( const CLI_Command_Definition_t * const pxCommandToRegister )
{
 800e038:	b570      	push	{r4, r5, r6, lr}
 800e03a:	1e05      	subs	r5, r0, #0
static CLI_Definition_List_Item_t *pxLastCommandInList = &xRegisteredCommands;
CLI_Definition_List_Item_t *pxNewListItem;
portBASE_TYPE xReturn = pdFAIL;

	/* Check the parameter is not NULL. */
	configASSERT( pxCommandToRegister );
 800e03c:	d011      	beq.n	800e062 <FreeRTOS_CLIRegisterCommand+0x2a>

	/* Create a new list item that will reference the command being registered. */
	pxNewListItem = ( CLI_Definition_List_Item_t * ) pvPortMalloc( sizeof( CLI_Definition_List_Item_t ) );
 800e03e:	2008      	movs	r0, #8
 800e040:	f001 ff10 	bl	800fe64 <pvPortMalloc>
 800e044:	1e04      	subs	r4, r0, #0
	configASSERT( pxNewListItem );
 800e046:	d00e      	beq.n	800e066 <FreeRTOS_CLIRegisterCommand+0x2e>

	if( pxNewListItem != NULL )
	{
		taskENTER_CRITICAL();
 800e048:	f001 fe8a 	bl	800fd60 <vPortEnterCritical>
		{
			/* Reference the command being registered from the newly created
			list item. */
			pxNewListItem->pxCommandLineDefinition = pxCommandToRegister;
 800e04c:	6025      	str	r5, [r4, #0]

			/* The new list item will get added to the end of the list, so
			pxNext has nowhere to point. */
			pxNewListItem->pxNext = NULL;
 800e04e:	2300      	movs	r3, #0
 800e050:	6063      	str	r3, [r4, #4]

			/* Add the newly created list item to the end of the already existing
			list. */
			pxLastCommandInList->pxNext = pxNewListItem;
 800e052:	4b06      	ldr	r3, [pc, #24]	; (800e06c <FreeRTOS_CLIRegisterCommand+0x34>)
 800e054:	681a      	ldr	r2, [r3, #0]
 800e056:	6054      	str	r4, [r2, #4]

			/* Set the end of list marker to the new list item. */
			pxLastCommandInList = pxNewListItem;
 800e058:	601c      	str	r4, [r3, #0]
		}
		taskEXIT_CRITICAL();
 800e05a:	f001 fe8d 	bl	800fd78 <vPortExitCritical>

		xReturn = pdPASS;
	}

	return xReturn;
}
 800e05e:	2001      	movs	r0, #1
 800e060:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( pxCommandToRegister );
 800e062:	b672      	cpsid	i
 800e064:	e7fe      	b.n	800e064 <FreeRTOS_CLIRegisterCommand+0x2c>
	configASSERT( pxNewListItem );
 800e066:	b672      	cpsid	i
 800e068:	e7fe      	b.n	800e068 <FreeRTOS_CLIRegisterCommand+0x30>
 800e06a:	46c0      	nop			; (mov r8, r8)
 800e06c:	20000098 	.word	0x20000098

0800e070 <FreeRTOS_CLIProcessCommand>:
/*-----------------------------------------------------------*/

portBASE_TYPE FreeRTOS_CLIProcessCommand( const int8_t * const pcCommandInput, int8_t * pcWriteBuffer, size_t xWriteBufferLen  )
{
 800e070:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e072:	46de      	mov	lr, fp
 800e074:	4657      	mov	r7, sl
 800e076:	464e      	mov	r6, r9
 800e078:	4645      	mov	r5, r8
 800e07a:	b5e0      	push	{r5, r6, r7, lr}
 800e07c:	b083      	sub	sp, #12
 800e07e:	0006      	movs	r6, r0
 800e080:	4689      	mov	r9, r1
 800e082:	9201      	str	r2, [sp, #4]
size_t xCommandStringLength;

	/* Note:  This function is not re-entrant.  It must not be called from more
	than one task. */

	if( pxCommand == NULL )
 800e084:	4b3b      	ldr	r3, [pc, #236]	; (800e174 <FreeRTOS_CLIProcessCommand+0x104>)
 800e086:	681b      	ldr	r3, [r3, #0]
 800e088:	2b00      	cmp	r3, #0
 800e08a:	d012      	beq.n	800e0b2 <FreeRTOS_CLIProcessCommand+0x42>
		pxCommand = NULL;
	}
	else if( pxCommand != NULL )
	{
		/* Call the callback function that is registered to this command. */
		xReturn = pxCommand->pxCommandLineDefinition->pxCommandInterpreter( pcWriteBuffer, xWriteBufferLen, pcCommandInput );
 800e08c:	681b      	ldr	r3, [r3, #0]
 800e08e:	689b      	ldr	r3, [r3, #8]
 800e090:	0032      	movs	r2, r6
 800e092:	9901      	ldr	r1, [sp, #4]
 800e094:	4648      	mov	r0, r9
 800e096:	4798      	blx	r3
 800e098:	1e05      	subs	r5, r0, #0

		/* If xReturn is pdFALSE, then no further strings will be returned
		after this one, and	pxCommand can be reset to NULL ready to search
		for the next entered command. */
		if( xReturn == pdFALSE )
 800e09a:	d102      	bne.n	800e0a2 <FreeRTOS_CLIProcessCommand+0x32>
		{
			pxCommand = NULL;
 800e09c:	4b35      	ldr	r3, [pc, #212]	; (800e174 <FreeRTOS_CLIProcessCommand+0x104>)
 800e09e:	2200      	movs	r2, #0
 800e0a0:	601a      	str	r2, [r3, #0]
		strncpy( ( char * ) pcWriteBuffer, ( const char * ) "Command not recognised.  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
		xReturn = pdFALSE;
	}

	return xReturn;
}
 800e0a2:	0028      	movs	r0, r5
 800e0a4:	b003      	add	sp, #12
 800e0a6:	bcf0      	pop	{r4, r5, r6, r7}
 800e0a8:	46bb      	mov	fp, r7
 800e0aa:	46b2      	mov	sl, r6
 800e0ac:	46a9      	mov	r9, r5
 800e0ae:	46a0      	mov	r8, r4
 800e0b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 800e0b2:	4c31      	ldr	r4, [pc, #196]	; (800e178 <FreeRTOS_CLIProcessCommand+0x108>)
 800e0b4:	4b2f      	ldr	r3, [pc, #188]	; (800e174 <FreeRTOS_CLIProcessCommand+0x104>)
 800e0b6:	601c      	str	r4, [r3, #0]
			if( ( pcCommandInput[ xCommandStringLength ] == ' ' ) || ( pcCommandInput[ xCommandStringLength ] == 0x00 ) )
 800e0b8:	2320      	movs	r3, #32
 800e0ba:	469a      	mov	sl, r3
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 800e0bc:	4b2d      	ldr	r3, [pc, #180]	; (800e174 <FreeRTOS_CLIProcessCommand+0x104>)
 800e0be:	469b      	mov	fp, r3
 800e0c0:	e00a      	b.n	800e0d8 <FreeRTOS_CLIProcessCommand+0x68>
				if( strncmp( ( const char * ) pcCommandInput, ( const char * ) pcRegisteredCommandString, xCommandStringLength ) == 0 )
 800e0c2:	0029      	movs	r1, r5
 800e0c4:	0030      	movs	r0, r6
 800e0c6:	f008 fb8c 	bl	80167e2 <strncmp>
 800e0ca:	1e05      	subs	r5, r0, #0
 800e0cc:	d012      	beq.n	800e0f4 <FreeRTOS_CLIProcessCommand+0x84>
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 800e0ce:	6864      	ldr	r4, [r4, #4]
 800e0d0:	465b      	mov	r3, fp
 800e0d2:	601c      	str	r4, [r3, #0]
 800e0d4:	2c00      	cmp	r4, #0
 800e0d6:	d015      	beq.n	800e104 <FreeRTOS_CLIProcessCommand+0x94>
			pcRegisteredCommandString = pxCommand->pxCommandLineDefinition->pcCommand;
 800e0d8:	6827      	ldr	r7, [r4, #0]
 800e0da:	683d      	ldr	r5, [r7, #0]
			xCommandStringLength = strlen( ( const char * ) pcRegisteredCommandString );
 800e0dc:	0028      	movs	r0, r5
 800e0de:	f7f2 f81b 	bl	8000118 <strlen>
 800e0e2:	0002      	movs	r2, r0
			if( ( pcCommandInput[ xCommandStringLength ] == ' ' ) || ( pcCommandInput[ xCommandStringLength ] == 0x00 ) )
 800e0e4:	5c33      	ldrb	r3, [r6, r0]
 800e0e6:	4651      	mov	r1, sl
 800e0e8:	438b      	bics	r3, r1
 800e0ea:	b259      	sxtb	r1, r3
 800e0ec:	4688      	mov	r8, r1
 800e0ee:	2b00      	cmp	r3, #0
 800e0f0:	d1ed      	bne.n	800e0ce <FreeRTOS_CLIProcessCommand+0x5e>
 800e0f2:	e7e6      	b.n	800e0c2 <FreeRTOS_CLIProcessCommand+0x52>
					if( pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters >= 0 )
 800e0f4:	7b3f      	ldrb	r7, [r7, #12]
 800e0f6:	b27f      	sxtb	r7, r7
 800e0f8:	2f00      	cmp	r7, #0
 800e0fa:	da0a      	bge.n	800e112 <FreeRTOS_CLIProcessCommand+0xa2>
	if( ( pxCommand != NULL ) && ( xReturn == pdFALSE ) )
 800e0fc:	4b1d      	ldr	r3, [pc, #116]	; (800e174 <FreeRTOS_CLIProcessCommand+0x104>)
 800e0fe:	681b      	ldr	r3, [r3, #0]
 800e100:	2b00      	cmp	r3, #0
 800e102:	d1c3      	bne.n	800e08c <FreeRTOS_CLIProcessCommand+0x1c>
		strncpy( ( char * ) pcWriteBuffer, ( const char * ) "Command not recognised.  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
 800e104:	9a01      	ldr	r2, [sp, #4]
 800e106:	491d      	ldr	r1, [pc, #116]	; (800e17c <FreeRTOS_CLIProcessCommand+0x10c>)
 800e108:	4648      	mov	r0, r9
 800e10a:	f008 fb7b 	bl	8016804 <strncpy>
		xReturn = pdFALSE;
 800e10e:	2500      	movs	r5, #0
	return xReturn;
 800e110:	e7c7      	b.n	800e0a2 <FreeRTOS_CLIProcessCommand+0x32>
{
int8_t cParameters = 0;
portBASE_TYPE xLastCharacterWasSpace = pdFALSE;

	/* Count the number of space delimited words in pcCommandString. */
	while( *pcCommandString != 0x00 )
 800e112:	2300      	movs	r3, #0
 800e114:	56f3      	ldrsb	r3, [r6, r3]
 800e116:	2b00      	cmp	r3, #0
 800e118:	d02a      	beq.n	800e170 <FreeRTOS_CLIProcessCommand+0x100>
 800e11a:	0034      	movs	r4, r6
portBASE_TYPE xLastCharacterWasSpace = pdFALSE;
 800e11c:	0002      	movs	r2, r0
				xLastCharacterWasSpace = pdTRUE;
			}
		}
		else
		{
			xLastCharacterWasSpace = pdFALSE;
 800e11e:	0001      	movs	r1, r0
				xLastCharacterWasSpace = pdTRUE;
 800e120:	2001      	movs	r0, #1
 800e122:	e00b      	b.n	800e13c <FreeRTOS_CLIProcessCommand+0xcc>
			if( xLastCharacterWasSpace != pdTRUE )
 800e124:	2a01      	cmp	r2, #1
 800e126:	d004      	beq.n	800e132 <FreeRTOS_CLIProcessCommand+0xc2>
				cParameters++;
 800e128:	4643      	mov	r3, r8
 800e12a:	3301      	adds	r3, #1
 800e12c:	b25b      	sxtb	r3, r3
 800e12e:	4698      	mov	r8, r3
				xLastCharacterWasSpace = pdTRUE;
 800e130:	0002      	movs	r2, r0
		}

		pcCommandString++;
 800e132:	3401      	adds	r4, #1
	while( *pcCommandString != 0x00 )
 800e134:	2300      	movs	r3, #0
 800e136:	56e3      	ldrsb	r3, [r4, r3]
 800e138:	2b00      	cmp	r3, #0
 800e13a:	d003      	beq.n	800e144 <FreeRTOS_CLIProcessCommand+0xd4>
		if( ( *pcCommandString ) == ' ' )
 800e13c:	2b20      	cmp	r3, #32
 800e13e:	d0f1      	beq.n	800e124 <FreeRTOS_CLIProcessCommand+0xb4>
			xLastCharacterWasSpace = pdFALSE;
 800e140:	000a      	movs	r2, r1
 800e142:	e7f6      	b.n	800e132 <FreeRTOS_CLIProcessCommand+0xc2>
	}

	/* If the command string ended with spaces, then there will have been too
	many parameters counted. */
	if( xLastCharacterWasSpace == pdTRUE )
 800e144:	2a01      	cmp	r2, #1
 800e146:	d00e      	beq.n	800e166 <FreeRTOS_CLIProcessCommand+0xf6>
	if( ( pxCommand != NULL ) && ( xReturn == pdFALSE ) )
 800e148:	4b0a      	ldr	r3, [pc, #40]	; (800e174 <FreeRTOS_CLIProcessCommand+0x104>)
 800e14a:	681b      	ldr	r3, [r3, #0]
 800e14c:	2b00      	cmp	r3, #0
 800e14e:	d0d9      	beq.n	800e104 <FreeRTOS_CLIProcessCommand+0x94>
 800e150:	4547      	cmp	r7, r8
 800e152:	d09b      	beq.n	800e08c <FreeRTOS_CLIProcessCommand+0x1c>
		strncpy( ( char * ) pcWriteBuffer, "Incorrect command parameter(s).  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
 800e154:	9a01      	ldr	r2, [sp, #4]
 800e156:	490a      	ldr	r1, [pc, #40]	; (800e180 <FreeRTOS_CLIProcessCommand+0x110>)
 800e158:	4648      	mov	r0, r9
 800e15a:	f008 fb53 	bl	8016804 <strncpy>
		pxCommand = NULL;
 800e15e:	4b05      	ldr	r3, [pc, #20]	; (800e174 <FreeRTOS_CLIProcessCommand+0x104>)
 800e160:	2200      	movs	r2, #0
 800e162:	601a      	str	r2, [r3, #0]
 800e164:	e79d      	b.n	800e0a2 <FreeRTOS_CLIProcessCommand+0x32>
	{
		cParameters--;
 800e166:	4643      	mov	r3, r8
 800e168:	3b01      	subs	r3, #1
 800e16a:	b25b      	sxtb	r3, r3
 800e16c:	4698      	mov	r8, r3
 800e16e:	e7eb      	b.n	800e148 <FreeRTOS_CLIProcessCommand+0xd8>
int8_t cParameters = 0;
 800e170:	4698      	mov	r8, r3
 800e172:	e7e9      	b.n	800e148 <FreeRTOS_CLIProcessCommand+0xd8>
 800e174:	20001720 	.word	0x20001720
 800e178:	2000009c 	.word	0x2000009c
 800e17c:	0801cab4 	.word	0x0801cab4
 800e180:	0801ca5c 	.word	0x0801ca5c

0800e184 <FreeRTOS_CLIGetOutputBuffer>:
}
 800e184:	4800      	ldr	r0, [pc, #0]	; (800e188 <FreeRTOS_CLIGetOutputBuffer+0x4>)
 800e186:	4770      	bx	lr
 800e188:	200014b8 	.word	0x200014b8

0800e18c <FreeRTOS_CLIGetParameter>:
{
 800e18c:	b510      	push	{r4, lr}
	*pxParameterStringLength = 0;
 800e18e:	2300      	movs	r3, #0
 800e190:	6013      	str	r3, [r2, #0]
unsigned portBASE_TYPE uxParametersFound = 0;
 800e192:	2400      	movs	r4, #0
	while( uxParametersFound < uxWantedParameter )
 800e194:	e00d      	b.n	800e1b2 <FreeRTOS_CLIGetParameter+0x26>
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) == ' ' ) )
 800e196:	2300      	movs	r3, #0
 800e198:	56c3      	ldrsb	r3, [r0, r3]
 800e19a:	2b20      	cmp	r3, #32
 800e19c:	d104      	bne.n	800e1a8 <FreeRTOS_CLIGetParameter+0x1c>
			pcCommandString++;
 800e19e:	3001      	adds	r0, #1
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) == ' ' ) )
 800e1a0:	2300      	movs	r3, #0
 800e1a2:	56c3      	ldrsb	r3, [r0, r3]
 800e1a4:	2b20      	cmp	r3, #32
 800e1a6:	d0fa      	beq.n	800e19e <FreeRTOS_CLIGetParameter+0x12>
		if( *pcCommandString != 0x00 )
 800e1a8:	2b00      	cmp	r3, #0
 800e1aa:	d029      	beq.n	800e200 <FreeRTOS_CLIGetParameter+0x74>
			uxParametersFound++;
 800e1ac:	3401      	adds	r4, #1
			if( uxParametersFound == uxWantedParameter )
 800e1ae:	42a1      	cmp	r1, r4
 800e1b0:	d00f      	beq.n	800e1d2 <FreeRTOS_CLIGetParameter+0x46>
	while( uxParametersFound < uxWantedParameter )
 800e1b2:	428c      	cmp	r4, r1
 800e1b4:	d026      	beq.n	800e204 <FreeRTOS_CLIGetParameter+0x78>
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800e1b6:	2300      	movs	r3, #0
 800e1b8:	56c3      	ldrsb	r3, [r0, r3]
 800e1ba:	2b00      	cmp	r3, #0
 800e1bc:	d006      	beq.n	800e1cc <FreeRTOS_CLIGetParameter+0x40>
 800e1be:	2b20      	cmp	r3, #32
 800e1c0:	d0e9      	beq.n	800e196 <FreeRTOS_CLIGetParameter+0xa>
			pcCommandString++;
 800e1c2:	3001      	adds	r0, #1
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800e1c4:	2300      	movs	r3, #0
 800e1c6:	56c3      	ldrsb	r3, [r0, r3]
 800e1c8:	2b00      	cmp	r3, #0
 800e1ca:	d1f8      	bne.n	800e1be <FreeRTOS_CLIGetParameter+0x32>
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) == ' ' ) )
 800e1cc:	2300      	movs	r3, #0
 800e1ce:	56c3      	ldrsb	r3, [r0, r3]
 800e1d0:	e7ea      	b.n	800e1a8 <FreeRTOS_CLIGetParameter+0x1c>
				while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800e1d2:	2300      	movs	r3, #0
 800e1d4:	56c3      	ldrsb	r3, [r0, r3]
 800e1d6:	0001      	movs	r1, r0
 800e1d8:	2b00      	cmp	r3, #0
 800e1da:	d00f      	beq.n	800e1fc <FreeRTOS_CLIGetParameter+0x70>
 800e1dc:	2b20      	cmp	r3, #32
 800e1de:	d007      	beq.n	800e1f0 <FreeRTOS_CLIGetParameter+0x64>
					( *pxParameterStringLength )++;
 800e1e0:	6813      	ldr	r3, [r2, #0]
 800e1e2:	3301      	adds	r3, #1
 800e1e4:	6013      	str	r3, [r2, #0]
					pcCommandString++;
 800e1e6:	3101      	adds	r1, #1
				while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800e1e8:	2300      	movs	r3, #0
 800e1ea:	56cb      	ldrsb	r3, [r1, r3]
 800e1ec:	2b00      	cmp	r3, #0
 800e1ee:	d1f5      	bne.n	800e1dc <FreeRTOS_CLIGetParameter+0x50>
				if( *pxParameterStringLength == 0 )
 800e1f0:	6813      	ldr	r3, [r2, #0]
					pcReturn = NULL;
 800e1f2:	1e5a      	subs	r2, r3, #1
 800e1f4:	4193      	sbcs	r3, r2
 800e1f6:	425b      	negs	r3, r3
 800e1f8:	4018      	ands	r0, r3
 800e1fa:	e004      	b.n	800e206 <FreeRTOS_CLIGetParameter+0x7a>
 800e1fc:	2000      	movs	r0, #0
 800e1fe:	e002      	b.n	800e206 <FreeRTOS_CLIGetParameter+0x7a>
const int8_t *pcReturn = NULL;
 800e200:	2000      	movs	r0, #0
 800e202:	e000      	b.n	800e206 <FreeRTOS_CLIGetParameter+0x7a>
 800e204:	2000      	movs	r0, #0
}
 800e206:	bd10      	pop	{r4, pc}

0800e208 <prvHelpCommand>:
{
 800e208:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e20a:	46c6      	mov	lr, r8
 800e20c:	b500      	push	{lr}
 800e20e:	b082      	sub	sp, #8
 800e210:	0005      	movs	r5, r0
 800e212:	000c      	movs	r4, r1
 800e214:	0010      	movs	r0, r2
portBASE_TYPE xParameterStringLength1 = 0;
 800e216:	2300      	movs	r3, #0
 800e218:	9301      	str	r3, [sp, #4]
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 800e21a:	aa01      	add	r2, sp, #4
 800e21c:	2101      	movs	r1, #1
 800e21e:	f7ff ffb5 	bl	800e18c <FreeRTOS_CLIGetParameter>
	if (pcParameterString1 != NULL && !strncmp((const char *)pcParameterString1, "params", 6))
 800e222:	2800      	cmp	r0, #0
 800e224:	d02a      	beq.n	800e27c <prvHelpCommand+0x74>
 800e226:	2206      	movs	r2, #6
 800e228:	4932      	ldr	r1, [pc, #200]	; (800e2f4 <prvHelpCommand+0xec>)
 800e22a:	f008 fada 	bl	80167e2 <strncmp>
 800e22e:	1e06      	subs	r6, r0, #0
 800e230:	d14b      	bne.n	800e2ca <prvHelpCommand+0xc2>
		if( str == NumOfParamsHelpStrings )
 800e232:	4b31      	ldr	r3, [pc, #196]	; (800e2f8 <prvHelpCommand+0xf0>)
 800e234:	781b      	ldrb	r3, [r3, #0]
 800e236:	2b07      	cmp	r3, #7
 800e238:	d015      	beq.n	800e266 <prvHelpCommand+0x5e>
		strncpy( ( char * ) pcWriteBuffer, ( const char * )pcParamsHelpString[str++], xWriteBufferLen );
 800e23a:	1c5a      	adds	r2, r3, #1
 800e23c:	b2d2      	uxtb	r2, r2
 800e23e:	4690      	mov	r8, r2
 800e240:	4a2d      	ldr	r2, [pc, #180]	; (800e2f8 <prvHelpCommand+0xf0>)
 800e242:	4641      	mov	r1, r8
 800e244:	7011      	strb	r1, [r2, #0]
 800e246:	009b      	lsls	r3, r3, #2
 800e248:	4a2c      	ldr	r2, [pc, #176]	; (800e2fc <prvHelpCommand+0xf4>)
 800e24a:	5899      	ldr	r1, [r3, r2]
 800e24c:	0022      	movs	r2, r4
 800e24e:	0028      	movs	r0, r5
 800e250:	f008 fad8 	bl	8016804 <strncpy>
			xReturn = pdTRUE;
 800e254:	2701      	movs	r7, #1
		if( str == NumOfParamsHelpStrings )
 800e256:	4643      	mov	r3, r8
 800e258:	2b07      	cmp	r3, #7
 800e25a:	d136      	bne.n	800e2ca <prvHelpCommand+0xc2>
			xReturn = pdFALSE; str = 0;
 800e25c:	4b26      	ldr	r3, [pc, #152]	; (800e2f8 <prvHelpCommand+0xf0>)
 800e25e:	2200      	movs	r2, #0
 800e260:	701a      	strb	r2, [r3, #0]
 800e262:	0037      	movs	r7, r6
 800e264:	e031      	b.n	800e2ca <prvHelpCommand+0xc2>
		strncpy( ( char * ) pcWriteBuffer, ( const char * )pcParamsHelpString[str++], xWriteBufferLen );
 800e266:	4b24      	ldr	r3, [pc, #144]	; (800e2f8 <prvHelpCommand+0xf0>)
 800e268:	2201      	movs	r2, #1
 800e26a:	701a      	strb	r2, [r3, #0]
 800e26c:	4b23      	ldr	r3, [pc, #140]	; (800e2fc <prvHelpCommand+0xf4>)
 800e26e:	6819      	ldr	r1, [r3, #0]
 800e270:	0022      	movs	r2, r4
 800e272:	0028      	movs	r0, r5
 800e274:	f008 fac6 	bl	8016804 <strncpy>
			xReturn = pdTRUE;
 800e278:	2701      	movs	r7, #1
 800e27a:	e026      	b.n	800e2ca <prvHelpCommand+0xc2>
		if( pxCommand == NULL )
 800e27c:	4b20      	ldr	r3, [pc, #128]	; (800e300 <prvHelpCommand+0xf8>)
 800e27e:	681b      	ldr	r3, [r3, #0]
 800e280:	2b00      	cmp	r3, #0
 800e282:	d027      	beq.n	800e2d4 <prvHelpCommand+0xcc>
		if (counter > numOfBosCommands) {
 800e284:	4b1f      	ldr	r3, [pc, #124]	; (800e304 <prvHelpCommand+0xfc>)
 800e286:	781e      	ldrb	r6, [r3, #0]
 800e288:	4b1f      	ldr	r3, [pc, #124]	; (800e308 <prvHelpCommand+0x100>)
 800e28a:	781b      	ldrb	r3, [r3, #0]
 800e28c:	42b3      	cmp	r3, r6
 800e28e:	d228      	bcs.n	800e2e2 <prvHelpCommand+0xda>
			strncpy( 8 + ( char * ) pcWriteBuffer, ( const char * ) pxCommand->pxCommandLineDefinition->pcHelpString, xWriteBufferLen-8 );
 800e290:	0022      	movs	r2, r4
 800e292:	3a08      	subs	r2, #8
 800e294:	4b1a      	ldr	r3, [pc, #104]	; (800e300 <prvHelpCommand+0xf8>)
 800e296:	681b      	ldr	r3, [r3, #0]
 800e298:	681b      	ldr	r3, [r3, #0]
 800e29a:	6859      	ldr	r1, [r3, #4]
 800e29c:	0028      	movs	r0, r5
 800e29e:	3008      	adds	r0, #8
 800e2a0:	f008 fab0 	bl	8016804 <strncpy>
			strcpy(1 + ( char * ) pcWriteBuffer, ( char * ) modulePNstring[modulePN]);
 800e2a4:	1c68      	adds	r0, r5, #1
 800e2a6:	4919      	ldr	r1, [pc, #100]	; (800e30c <prvHelpCommand+0x104>)
 800e2a8:	f008 fa93 	bl	80167d2 <strcpy>
			pcWriteBuffer[0] = '('; pcWriteBuffer[6] = ')'; pcWriteBuffer[7] = ' ';
 800e2ac:	2328      	movs	r3, #40	; 0x28
 800e2ae:	702b      	strb	r3, [r5, #0]
 800e2b0:	3301      	adds	r3, #1
 800e2b2:	71ab      	strb	r3, [r5, #6]
 800e2b4:	3b09      	subs	r3, #9
 800e2b6:	71eb      	strb	r3, [r5, #7]
		pxCommand = pxCommand->pxNext;
 800e2b8:	4b11      	ldr	r3, [pc, #68]	; (800e300 <prvHelpCommand+0xf8>)
 800e2ba:	681a      	ldr	r2, [r3, #0]
 800e2bc:	6857      	ldr	r7, [r2, #4]
 800e2be:	601f      	str	r7, [r3, #0]
		counter++;
 800e2c0:	3601      	adds	r6, #1
 800e2c2:	4b10      	ldr	r3, [pc, #64]	; (800e304 <prvHelpCommand+0xfc>)
 800e2c4:	701e      	strb	r6, [r3, #0]
			xReturn = pdTRUE;
 800e2c6:	1e7b      	subs	r3, r7, #1
 800e2c8:	419f      	sbcs	r7, r3
}
 800e2ca:	0038      	movs	r0, r7
 800e2cc:	b002      	add	sp, #8
 800e2ce:	bc80      	pop	{r7}
 800e2d0:	46b8      	mov	r8, r7
 800e2d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
			pxCommand = &xRegisteredCommands;
 800e2d4:	4b0a      	ldr	r3, [pc, #40]	; (800e300 <prvHelpCommand+0xf8>)
 800e2d6:	4a0e      	ldr	r2, [pc, #56]	; (800e310 <prvHelpCommand+0x108>)
 800e2d8:	601a      	str	r2, [r3, #0]
			counter = 1;
 800e2da:	4b0a      	ldr	r3, [pc, #40]	; (800e304 <prvHelpCommand+0xfc>)
 800e2dc:	2201      	movs	r2, #1
 800e2de:	701a      	strb	r2, [r3, #0]
 800e2e0:	e7d0      	b.n	800e284 <prvHelpCommand+0x7c>
			strncpy( ( char * ) pcWriteBuffer, ( const char * ) pxCommand->pxCommandLineDefinition->pcHelpString, xWriteBufferLen );
 800e2e2:	4b07      	ldr	r3, [pc, #28]	; (800e300 <prvHelpCommand+0xf8>)
 800e2e4:	681b      	ldr	r3, [r3, #0]
 800e2e6:	681b      	ldr	r3, [r3, #0]
 800e2e8:	6859      	ldr	r1, [r3, #4]
 800e2ea:	0022      	movs	r2, r4
 800e2ec:	0028      	movs	r0, r5
 800e2ee:	f008 fa89 	bl	8016804 <strncpy>
 800e2f2:	e7e1      	b.n	800e2b8 <prvHelpCommand+0xb0>
 800e2f4:	0801ab5c 	.word	0x0801ab5c
 800e2f8:	20001728 	.word	0x20001728
 800e2fc:	20000054 	.word	0x20000054
 800e300:	20001724 	.word	0x20001724
 800e304:	2000171c 	.word	0x2000171c
 800e308:	200062ec 	.word	0x200062ec
 800e30c:	0801a042 	.word	0x0801a042
 800e310:	2000009c 	.word	0x2000009c

0800e314 <xEventGroupCreate>:
static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits );

/*-----------------------------------------------------------*/

EventGroupHandle_t xEventGroupCreate( void )
{
 800e314:	b510      	push	{r4, lr}
EventGroup_t *pxEventBits;

	pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) );
 800e316:	201c      	movs	r0, #28
 800e318:	f001 fda4 	bl	800fe64 <pvPortMalloc>
 800e31c:	1e04      	subs	r4, r0, #0
	if( pxEventBits != NULL )
 800e31e:	d003      	beq.n	800e328 <xEventGroupCreate+0x14>
	{
		pxEventBits->uxEventBits = 0;
 800e320:	2300      	movs	r3, #0
 800e322:	c008      	stmia	r0!, {r3}
		vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800e324:	f000 f802 	bl	800e32c <vListInitialise>
	{
		traceEVENT_GROUP_CREATE_FAILED();
	}

	return ( EventGroupHandle_t ) pxEventBits;
}
 800e328:	0020      	movs	r0, r4
 800e32a:	bd10      	pop	{r4, pc}

0800e32c <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e32c:	0003      	movs	r3, r0
 800e32e:	3308      	adds	r3, #8
 800e330:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800e332:	2201      	movs	r2, #1
 800e334:	4252      	negs	r2, r2
 800e336:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e338:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e33a:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800e33c:	2300      	movs	r3, #0
 800e33e:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800e340:	4770      	bx	lr

0800e342 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800e342:	2300      	movs	r3, #0
 800e344:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800e346:	4770      	bx	lr

0800e348 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 800e348:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800e34a:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800e34c:	689a      	ldr	r2, [r3, #8]
 800e34e:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800e350:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800e352:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800e354:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 800e356:	6803      	ldr	r3, [r0, #0]
 800e358:	3301      	adds	r3, #1
 800e35a:	6003      	str	r3, [r0, #0]
}
 800e35c:	4770      	bx	lr

0800e35e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e35e:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800e360:	680c      	ldr	r4, [r1, #0]
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e362:	0003      	movs	r3, r0
 800e364:	3308      	adds	r3, #8
	if( xValueOfInsertion == portMAX_DELAY )
 800e366:	1c62      	adds	r2, r4, #1
 800e368:	d00e      	beq.n	800e388 <vListInsert+0x2a>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e36a:	001a      	movs	r2, r3
 800e36c:	685b      	ldr	r3, [r3, #4]
 800e36e:	681d      	ldr	r5, [r3, #0]
 800e370:	42a5      	cmp	r5, r4
 800e372:	d9fa      	bls.n	800e36a <vListInsert+0xc>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800e374:	6853      	ldr	r3, [r2, #4]
 800e376:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800e378:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800e37a:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 800e37c:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800e37e:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 800e380:	6803      	ldr	r3, [r0, #0]
 800e382:	3301      	adds	r3, #1
 800e384:	6003      	str	r3, [r0, #0]
}
 800e386:	bd30      	pop	{r4, r5, pc}
		pxIterator = pxList->xListEnd.pxPrevious;
 800e388:	6902      	ldr	r2, [r0, #16]
 800e38a:	e7f3      	b.n	800e374 <vListInsert+0x16>

0800e38c <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800e38c:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800e38e:	6841      	ldr	r1, [r0, #4]
 800e390:	6882      	ldr	r2, [r0, #8]
 800e392:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800e394:	6841      	ldr	r1, [r0, #4]
 800e396:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800e398:	685a      	ldr	r2, [r3, #4]
 800e39a:	4282      	cmp	r2, r0
 800e39c:	d005      	beq.n	800e3aa <uxListRemove+0x1e>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800e39e:	2200      	movs	r2, #0
 800e3a0:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800e3a2:	681a      	ldr	r2, [r3, #0]
 800e3a4:	1e50      	subs	r0, r2, #1
 800e3a6:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
 800e3a8:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800e3aa:	6882      	ldr	r2, [r0, #8]
 800e3ac:	605a      	str	r2, [r3, #4]
 800e3ae:	e7f6      	b.n	800e39e <uxListRemove+0x12>

0800e3b0 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800e3b0:	b570      	push	{r4, r5, r6, lr}
 800e3b2:	0004      	movs	r4, r0
 800e3b4:	0015      	movs	r5, r2
BaseType_t xReturn = pdFALSE;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800e3b6:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800e3b8:	2a00      	cmp	r2, #0
 800e3ba:	d10d      	bne.n	800e3d8 <prvCopyDataToQueue+0x28>
BaseType_t xReturn = pdFALSE;
 800e3bc:	2000      	movs	r0, #0
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e3be:	6823      	ldr	r3, [r4, #0]
 800e3c0:	2b00      	cmp	r3, #0
 800e3c2:	d003      	beq.n	800e3cc <prvCopyDataToQueue+0x1c>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	++( pxQueue->uxMessagesWaiting );
 800e3c4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e3c6:	3301      	adds	r3, #1
 800e3c8:	63a3      	str	r3, [r4, #56]	; 0x38

	return xReturn;
}
 800e3ca:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800e3cc:	6860      	ldr	r0, [r4, #4]
 800e3ce:	f001 f8c7 	bl	800f560 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 800e3d2:	2300      	movs	r3, #0
 800e3d4:	6063      	str	r3, [r4, #4]
 800e3d6:	e7f5      	b.n	800e3c4 <prvCopyDataToQueue+0x14>
	else if( xPosition == queueSEND_TO_BACK )
 800e3d8:	2d00      	cmp	r5, #0
 800e3da:	d10e      	bne.n	800e3fa <prvCopyDataToQueue+0x4a>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800e3dc:	6880      	ldr	r0, [r0, #8]
 800e3de:	f008 f8a9 	bl	8016534 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800e3e2:	68a3      	ldr	r3, [r4, #8]
 800e3e4:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800e3e6:	4694      	mov	ip, r2
 800e3e8:	4463      	add	r3, ip
 800e3ea:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
 800e3ec:	0028      	movs	r0, r5
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e3ee:	6862      	ldr	r2, [r4, #4]
 800e3f0:	4293      	cmp	r3, r2
 800e3f2:	d3e7      	bcc.n	800e3c4 <prvCopyDataToQueue+0x14>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800e3f4:	6823      	ldr	r3, [r4, #0]
 800e3f6:	60a3      	str	r3, [r4, #8]
 800e3f8:	e7e4      	b.n	800e3c4 <prvCopyDataToQueue+0x14>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e3fa:	68c0      	ldr	r0, [r0, #12]
 800e3fc:	f008 f89a 	bl	8016534 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800e400:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e402:	425a      	negs	r2, r3
 800e404:	68e1      	ldr	r1, [r4, #12]
 800e406:	1acb      	subs	r3, r1, r3
 800e408:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e40a:	6821      	ldr	r1, [r4, #0]
 800e40c:	428b      	cmp	r3, r1
 800e40e:	d203      	bcs.n	800e418 <prvCopyDataToQueue+0x68>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800e410:	6863      	ldr	r3, [r4, #4]
 800e412:	469c      	mov	ip, r3
 800e414:	4462      	add	r2, ip
 800e416:	60e2      	str	r2, [r4, #12]
BaseType_t xReturn = pdFALSE;
 800e418:	2000      	movs	r0, #0
		if( xPosition == queueOVERWRITE )
 800e41a:	2d02      	cmp	r5, #2
 800e41c:	d1d2      	bne.n	800e3c4 <prvCopyDataToQueue+0x14>
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e41e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e420:	2b00      	cmp	r3, #0
 800e422:	d0cf      	beq.n	800e3c4 <prvCopyDataToQueue+0x14>
				--( pxQueue->uxMessagesWaiting );
 800e424:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e426:	3b01      	subs	r3, #1
 800e428:	63a3      	str	r3, [r4, #56]	; 0x38
 800e42a:	e7cb      	b.n	800e3c4 <prvCopyDataToQueue+0x14>

0800e42c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800e42c:	b510      	push	{r4, lr}
 800e42e:	0003      	movs	r3, r0
 800e430:	0008      	movs	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800e432:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e434:	2a00      	cmp	r2, #0
 800e436:	d00a      	beq.n	800e44e <prvCopyDataFromQueue+0x22>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800e438:	68d9      	ldr	r1, [r3, #12]
 800e43a:	1889      	adds	r1, r1, r2
 800e43c:	60d9      	str	r1, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800e43e:	685c      	ldr	r4, [r3, #4]
 800e440:	42a1      	cmp	r1, r4
 800e442:	d301      	bcc.n	800e448 <prvCopyDataFromQueue+0x1c>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800e444:	6819      	ldr	r1, [r3, #0]
 800e446:	60d9      	str	r1, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800e448:	68d9      	ldr	r1, [r3, #12]
 800e44a:	f008 f873 	bl	8016534 <memcpy>
	}
}
 800e44e:	bd10      	pop	{r4, pc}

0800e450 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800e450:	b570      	push	{r4, r5, r6, lr}
 800e452:	0004      	movs	r4, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800e454:	f001 fc84 	bl	800fd60 <vPortEnterCritical>
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 800e458:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800e45a:	2b00      	cmp	r3, #0
 800e45c:	dd13      	ble.n	800e486 <prvUnlockQueue+0x36>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e45e:	0025      	movs	r5, r4
 800e460:	3524      	adds	r5, #36	; 0x24
 800e462:	e007      	b.n	800e474 <prvUnlockQueue+0x24>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						vTaskMissedYield();
 800e464:	f001 f828 	bl	800f4b8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
 800e468:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800e46a:	3b01      	subs	r3, #1
 800e46c:	64a3      	str	r3, [r4, #72]	; 0x48
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 800e46e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800e470:	2b00      	cmp	r3, #0
 800e472:	dd08      	ble.n	800e486 <prvUnlockQueue+0x36>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e474:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e476:	2b00      	cmp	r3, #0
 800e478:	d005      	beq.n	800e486 <prvUnlockQueue+0x36>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e47a:	0028      	movs	r0, r5
 800e47c:	f000 ff9a 	bl	800f3b4 <xTaskRemoveFromEventList>
 800e480:	2800      	cmp	r0, #0
 800e482:	d0f1      	beq.n	800e468 <prvUnlockQueue+0x18>
 800e484:	e7ee      	b.n	800e464 <prvUnlockQueue+0x14>
		}

		pxQueue->xTxLock = queueUNLOCKED;
 800e486:	2301      	movs	r3, #1
 800e488:	425b      	negs	r3, r3
 800e48a:	64a3      	str	r3, [r4, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
 800e48c:	f001 fc74 	bl	800fd78 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800e490:	f001 fc66 	bl	800fd60 <vPortEnterCritical>
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 800e494:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800e496:	2b00      	cmp	r3, #0
 800e498:	dd13      	ble.n	800e4c2 <prvUnlockQueue+0x72>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e49a:	0025      	movs	r5, r4
 800e49c:	3510      	adds	r5, #16
 800e49e:	e007      	b.n	800e4b0 <prvUnlockQueue+0x60>
				{
					vTaskMissedYield();
 800e4a0:	f001 f80a 	bl	800f4b8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--( pxQueue->xRxLock );
 800e4a4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800e4a6:	3b01      	subs	r3, #1
 800e4a8:	6463      	str	r3, [r4, #68]	; 0x44
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 800e4aa:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800e4ac:	2b00      	cmp	r3, #0
 800e4ae:	dd08      	ble.n	800e4c2 <prvUnlockQueue+0x72>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e4b0:	6923      	ldr	r3, [r4, #16]
 800e4b2:	2b00      	cmp	r3, #0
 800e4b4:	d005      	beq.n	800e4c2 <prvUnlockQueue+0x72>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e4b6:	0028      	movs	r0, r5
 800e4b8:	f000 ff7c 	bl	800f3b4 <xTaskRemoveFromEventList>
 800e4bc:	2800      	cmp	r0, #0
 800e4be:	d0f1      	beq.n	800e4a4 <prvUnlockQueue+0x54>
 800e4c0:	e7ee      	b.n	800e4a0 <prvUnlockQueue+0x50>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
 800e4c2:	2301      	movs	r3, #1
 800e4c4:	425b      	negs	r3, r3
 800e4c6:	6463      	str	r3, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800e4c8:	f001 fc56 	bl	800fd78 <vPortExitCritical>
}
 800e4cc:	bd70      	pop	{r4, r5, r6, pc}

0800e4ce <xQueueGenericReset>:
{
 800e4ce:	b570      	push	{r4, r5, r6, lr}
 800e4d0:	0004      	movs	r4, r0
 800e4d2:	000d      	movs	r5, r1
	configASSERT( pxQueue );
 800e4d4:	2800      	cmp	r0, #0
 800e4d6:	d01a      	beq.n	800e50e <xQueueGenericReset+0x40>
	taskENTER_CRITICAL();
 800e4d8:	f001 fc42 	bl	800fd60 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800e4dc:	6822      	ldr	r2, [r4, #0]
 800e4de:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800e4e0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800e4e2:	434b      	muls	r3, r1
 800e4e4:	18d0      	adds	r0, r2, r3
 800e4e6:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800e4e8:	2000      	movs	r0, #0
 800e4ea:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800e4ec:	60a2      	str	r2, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800e4ee:	1a5b      	subs	r3, r3, r1
 800e4f0:	18d3      	adds	r3, r2, r3
 800e4f2:	60e3      	str	r3, [r4, #12]
		pxQueue->xRxLock = queueUNLOCKED;
 800e4f4:	2301      	movs	r3, #1
 800e4f6:	425b      	negs	r3, r3
 800e4f8:	6463      	str	r3, [r4, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
 800e4fa:	64a3      	str	r3, [r4, #72]	; 0x48
		if( xNewQueue == pdFALSE )
 800e4fc:	2d00      	cmp	r5, #0
 800e4fe:	d111      	bne.n	800e524 <xQueueGenericReset+0x56>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e500:	6923      	ldr	r3, [r4, #16]
 800e502:	2b00      	cmp	r3, #0
 800e504:	d105      	bne.n	800e512 <xQueueGenericReset+0x44>
	taskEXIT_CRITICAL();
 800e506:	f001 fc37 	bl	800fd78 <vPortExitCritical>
}
 800e50a:	2001      	movs	r0, #1
 800e50c:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( pxQueue );
 800e50e:	b672      	cpsid	i
 800e510:	e7fe      	b.n	800e510 <xQueueGenericReset+0x42>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 800e512:	0020      	movs	r0, r4
 800e514:	3010      	adds	r0, #16
 800e516:	f000 ff4d 	bl	800f3b4 <xTaskRemoveFromEventList>
 800e51a:	2801      	cmp	r0, #1
 800e51c:	d1f3      	bne.n	800e506 <xQueueGenericReset+0x38>
					queueYIELD_IF_USING_PREEMPTION();
 800e51e:	f001 fc13 	bl	800fd48 <vPortYield>
 800e522:	e7f0      	b.n	800e506 <xQueueGenericReset+0x38>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800e524:	0020      	movs	r0, r4
 800e526:	3010      	adds	r0, #16
 800e528:	f7ff ff00 	bl	800e32c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800e52c:	0020      	movs	r0, r4
 800e52e:	3024      	adds	r0, #36	; 0x24
 800e530:	f7ff fefc 	bl	800e32c <vListInitialise>
 800e534:	e7e7      	b.n	800e506 <xQueueGenericReset+0x38>

0800e536 <xQueueGenericCreate>:
{
 800e536:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e538:	0005      	movs	r5, r0
 800e53a:	000e      	movs	r6, r1
 800e53c:	0017      	movs	r7, r2
	configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e53e:	2800      	cmp	r0, #0
 800e540:	d101      	bne.n	800e546 <xQueueGenericCreate+0x10>
 800e542:	b672      	cpsid	i
 800e544:	e7fe      	b.n	800e544 <xQueueGenericCreate+0xe>
	if( uxItemSize == ( UBaseType_t ) 0 )
 800e546:	2900      	cmp	r1, #0
 800e548:	d013      	beq.n	800e572 <xQueueGenericCreate+0x3c>
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e54a:	0008      	movs	r0, r1
 800e54c:	4368      	muls	r0, r5
	pcAllocatedBuffer = ( int8_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800e54e:	3055      	adds	r0, #85	; 0x55
 800e550:	f001 fc88 	bl	800fe64 <pvPortMalloc>
 800e554:	0004      	movs	r4, r0
			pxNewQueue->pcHead = pcAllocatedBuffer + sizeof( Queue_t );
 800e556:	3054      	adds	r0, #84	; 0x54
	if( pcAllocatedBuffer != NULL )
 800e558:	2c00      	cmp	r4, #0
 800e55a:	d00f      	beq.n	800e57c <xQueueGenericCreate+0x46>
 800e55c:	6020      	str	r0, [r4, #0]
		pxNewQueue->uxLength = uxQueueLength;
 800e55e:	63e5      	str	r5, [r4, #60]	; 0x3c
		pxNewQueue->uxItemSize = uxItemSize;
 800e560:	6426      	str	r6, [r4, #64]	; 0x40
		( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800e562:	2101      	movs	r1, #1
 800e564:	0020      	movs	r0, r4
 800e566:	f7ff ffb2 	bl	800e4ce <xQueueGenericReset>
			pxNewQueue->ucQueueType = ucQueueType;
 800e56a:	2350      	movs	r3, #80	; 0x50
 800e56c:	54e7      	strb	r7, [r4, r3]
}
 800e56e:	0020      	movs	r0, r4
 800e570:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	pcAllocatedBuffer = ( int8_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800e572:	2054      	movs	r0, #84	; 0x54
 800e574:	f001 fc76 	bl	800fe64 <pvPortMalloc>
 800e578:	1e04      	subs	r4, r0, #0
	if( pcAllocatedBuffer != NULL )
 800e57a:	d1ef      	bne.n	800e55c <xQueueGenericCreate+0x26>
	configASSERT( xReturn );
 800e57c:	b672      	cpsid	i
 800e57e:	e7fe      	b.n	800e57e <xQueueGenericCreate+0x48>

0800e580 <xQueueCreateCountingSemaphore>:
	{
 800e580:	b510      	push	{r4, lr}
 800e582:	000c      	movs	r4, r1
		configASSERT( uxMaxCount != 0 );
 800e584:	2800      	cmp	r0, #0
 800e586:	d101      	bne.n	800e58c <xQueueCreateCountingSemaphore+0xc>
 800e588:	b672      	cpsid	i
 800e58a:	e7fe      	b.n	800e58a <xQueueCreateCountingSemaphore+0xa>
		configASSERT( uxInitialCount <= uxMaxCount );
 800e58c:	4288      	cmp	r0, r1
 800e58e:	d201      	bcs.n	800e594 <xQueueCreateCountingSemaphore+0x14>
 800e590:	b672      	cpsid	i
 800e592:	e7fe      	b.n	800e592 <xQueueCreateCountingSemaphore+0x12>
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800e594:	2202      	movs	r2, #2
 800e596:	2100      	movs	r1, #0
 800e598:	f7ff ffcd 	bl	800e536 <xQueueGenericCreate>
		if( xHandle != NULL )
 800e59c:	2800      	cmp	r0, #0
 800e59e:	d001      	beq.n	800e5a4 <xQueueCreateCountingSemaphore+0x24>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800e5a0:	6384      	str	r4, [r0, #56]	; 0x38
	}
 800e5a2:	bd10      	pop	{r4, pc}
		configASSERT( xHandle );
 800e5a4:	b672      	cpsid	i
 800e5a6:	e7fe      	b.n	800e5a6 <xQueueCreateCountingSemaphore+0x26>

0800e5a8 <xQueueGenericSend>:
{
 800e5a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e5aa:	46ce      	mov	lr, r9
 800e5ac:	4647      	mov	r7, r8
 800e5ae:	b580      	push	{r7, lr}
 800e5b0:	b085      	sub	sp, #20
 800e5b2:	0004      	movs	r4, r0
 800e5b4:	000e      	movs	r6, r1
 800e5b6:	9201      	str	r2, [sp, #4]
 800e5b8:	001d      	movs	r5, r3
	configASSERT( pxQueue );
 800e5ba:	2800      	cmp	r0, #0
 800e5bc:	d008      	beq.n	800e5d0 <xQueueGenericSend+0x28>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e5be:	2900      	cmp	r1, #0
 800e5c0:	d008      	beq.n	800e5d4 <xQueueGenericSend+0x2c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e5c2:	2d02      	cmp	r5, #2
 800e5c4:	d10b      	bne.n	800e5de <xQueueGenericSend+0x36>
 800e5c6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800e5c8:	2b01      	cmp	r3, #1
 800e5ca:	d008      	beq.n	800e5de <xQueueGenericSend+0x36>
 800e5cc:	b672      	cpsid	i
 800e5ce:	e7fe      	b.n	800e5ce <xQueueGenericSend+0x26>
	configASSERT( pxQueue );
 800e5d0:	b672      	cpsid	i
 800e5d2:	e7fe      	b.n	800e5d2 <xQueueGenericSend+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e5d4:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800e5d6:	2b00      	cmp	r3, #0
 800e5d8:	d0f3      	beq.n	800e5c2 <xQueueGenericSend+0x1a>
 800e5da:	b672      	cpsid	i
 800e5dc:	e7fe      	b.n	800e5dc <xQueueGenericSend+0x34>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e5de:	f000 ff71 	bl	800f4c4 <xTaskGetSchedulerState>
 800e5e2:	2800      	cmp	r0, #0
 800e5e4:	d104      	bne.n	800e5f0 <xQueueGenericSend+0x48>
 800e5e6:	9b01      	ldr	r3, [sp, #4]
 800e5e8:	2b00      	cmp	r3, #0
 800e5ea:	d005      	beq.n	800e5f8 <xQueueGenericSend+0x50>
 800e5ec:	b672      	cpsid	i
 800e5ee:	e7fe      	b.n	800e5ee <xQueueGenericSend+0x46>
 800e5f0:	2700      	movs	r7, #0
		prvLockQueue( pxQueue );
 800e5f2:	2300      	movs	r3, #0
 800e5f4:	4698      	mov	r8, r3
 800e5f6:	e033      	b.n	800e660 <xQueueGenericSend+0xb8>
 800e5f8:	2700      	movs	r7, #0
 800e5fa:	e7fa      	b.n	800e5f2 <xQueueGenericSend+0x4a>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e5fc:	002a      	movs	r2, r5
 800e5fe:	0031      	movs	r1, r6
 800e600:	0020      	movs	r0, r4
 800e602:	f7ff fed5 	bl	800e3b0 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e606:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e608:	2b00      	cmp	r3, #0
 800e60a:	d109      	bne.n	800e620 <xQueueGenericSend+0x78>
					else if( xYieldRequired != pdFALSE )
 800e60c:	2800      	cmp	r0, #0
 800e60e:	d110      	bne.n	800e632 <xQueueGenericSend+0x8a>
				taskEXIT_CRITICAL();
 800e610:	f001 fbb2 	bl	800fd78 <vPortExitCritical>
				return pdPASS;
 800e614:	2001      	movs	r0, #1
}
 800e616:	b005      	add	sp, #20
 800e618:	bcc0      	pop	{r6, r7}
 800e61a:	46b9      	mov	r9, r7
 800e61c:	46b0      	mov	r8, r6
 800e61e:	bdf0      	pop	{r4, r5, r6, r7, pc}
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
 800e620:	0020      	movs	r0, r4
 800e622:	3024      	adds	r0, #36	; 0x24
 800e624:	f000 fec6 	bl	800f3b4 <xTaskRemoveFromEventList>
 800e628:	2801      	cmp	r0, #1
 800e62a:	d1f1      	bne.n	800e610 <xQueueGenericSend+0x68>
							queueYIELD_IF_USING_PREEMPTION();
 800e62c:	f001 fb8c 	bl	800fd48 <vPortYield>
 800e630:	e7ee      	b.n	800e610 <xQueueGenericSend+0x68>
						queueYIELD_IF_USING_PREEMPTION();
 800e632:	f001 fb89 	bl	800fd48 <vPortYield>
 800e636:	e7eb      	b.n	800e610 <xQueueGenericSend+0x68>
					taskEXIT_CRITICAL();
 800e638:	f001 fb9e 	bl	800fd78 <vPortExitCritical>
					return errQUEUE_FULL;
 800e63c:	2000      	movs	r0, #0
 800e63e:	e7ea      	b.n	800e616 <xQueueGenericSend+0x6e>
					vTaskSetTimeOutState( &xTimeOut );
 800e640:	a802      	add	r0, sp, #8
 800e642:	f000 fef7 	bl	800f434 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e646:	e018      	b.n	800e67a <xQueueGenericSend+0xd2>
		prvLockQueue( pxQueue );
 800e648:	4643      	mov	r3, r8
 800e64a:	6463      	str	r3, [r4, #68]	; 0x44
 800e64c:	e01e      	b.n	800e68c <xQueueGenericSend+0xe4>
 800e64e:	4643      	mov	r3, r8
 800e650:	64a3      	str	r3, [r4, #72]	; 0x48
 800e652:	e01e      	b.n	800e692 <xQueueGenericSend+0xea>
				prvUnlockQueue( pxQueue );
 800e654:	0020      	movs	r0, r4
 800e656:	f7ff fefb 	bl	800e450 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e65a:	f000 fccb 	bl	800eff4 <xTaskResumeAll>
 800e65e:	2701      	movs	r7, #1
		taskENTER_CRITICAL();
 800e660:	f001 fb7e 	bl	800fd60 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e664:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e666:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800e668:	4293      	cmp	r3, r2
 800e66a:	d3c7      	bcc.n	800e5fc <xQueueGenericSend+0x54>
 800e66c:	2d02      	cmp	r5, #2
 800e66e:	d0c5      	beq.n	800e5fc <xQueueGenericSend+0x54>
				if( xTicksToWait == ( TickType_t ) 0 )
 800e670:	9b01      	ldr	r3, [sp, #4]
 800e672:	2b00      	cmp	r3, #0
 800e674:	d0e0      	beq.n	800e638 <xQueueGenericSend+0x90>
				else if( xEntryTimeSet == pdFALSE )
 800e676:	2f00      	cmp	r7, #0
 800e678:	d0e2      	beq.n	800e640 <xQueueGenericSend+0x98>
		taskEXIT_CRITICAL();
 800e67a:	f001 fb7d 	bl	800fd78 <vPortExitCritical>
		vTaskSuspendAll();
 800e67e:	f000 fc11 	bl	800eea4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e682:	f001 fb6d 	bl	800fd60 <vPortEnterCritical>
 800e686:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800e688:	3301      	adds	r3, #1
 800e68a:	d0dd      	beq.n	800e648 <xQueueGenericSend+0xa0>
 800e68c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800e68e:	3301      	adds	r3, #1
 800e690:	d0dd      	beq.n	800e64e <xQueueGenericSend+0xa6>
 800e692:	f001 fb71 	bl	800fd78 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e696:	a901      	add	r1, sp, #4
 800e698:	a802      	add	r0, sp, #8
 800e69a:	f000 fedb 	bl	800f454 <xTaskCheckForTimeOut>
 800e69e:	2800      	cmp	r0, #0
 800e6a0:	d117      	bne.n	800e6d2 <xQueueGenericSend+0x12a>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e6a2:	f001 fb5d 	bl	800fd60 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800e6a6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e6a8:	4699      	mov	r9, r3
 800e6aa:	6be7      	ldr	r7, [r4, #60]	; 0x3c
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800e6ac:	f001 fb64 	bl	800fd78 <vPortExitCritical>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800e6b0:	45b9      	cmp	r9, r7
 800e6b2:	d1cf      	bne.n	800e654 <xQueueGenericSend+0xac>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800e6b4:	0020      	movs	r0, r4
 800e6b6:	3010      	adds	r0, #16
 800e6b8:	9901      	ldr	r1, [sp, #4]
 800e6ba:	f000 fe3d 	bl	800f338 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800e6be:	0020      	movs	r0, r4
 800e6c0:	f7ff fec6 	bl	800e450 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800e6c4:	f000 fc96 	bl	800eff4 <xTaskResumeAll>
 800e6c8:	2800      	cmp	r0, #0
 800e6ca:	d1c8      	bne.n	800e65e <xQueueGenericSend+0xb6>
					portYIELD_WITHIN_API();
 800e6cc:	f001 fb3c 	bl	800fd48 <vPortYield>
 800e6d0:	e7c5      	b.n	800e65e <xQueueGenericSend+0xb6>
			prvUnlockQueue( pxQueue );
 800e6d2:	0020      	movs	r0, r4
 800e6d4:	f7ff febc 	bl	800e450 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e6d8:	f000 fc8c 	bl	800eff4 <xTaskResumeAll>
			return errQUEUE_FULL;
 800e6dc:	2000      	movs	r0, #0
 800e6de:	e79a      	b.n	800e616 <xQueueGenericSend+0x6e>

0800e6e0 <xQueueGenericSendFromISR>:
{
 800e6e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e6e2:	b083      	sub	sp, #12
 800e6e4:	0004      	movs	r4, r0
 800e6e6:	000d      	movs	r5, r1
 800e6e8:	0017      	movs	r7, r2
 800e6ea:	001e      	movs	r6, r3
	configASSERT( pxQueue );
 800e6ec:	2800      	cmp	r0, #0
 800e6ee:	d008      	beq.n	800e702 <xQueueGenericSendFromISR+0x22>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e6f0:	2900      	cmp	r1, #0
 800e6f2:	d008      	beq.n	800e706 <xQueueGenericSendFromISR+0x26>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e6f4:	2e02      	cmp	r6, #2
 800e6f6:	d12d      	bne.n	800e754 <xQueueGenericSendFromISR+0x74>
 800e6f8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800e6fa:	2b01      	cmp	r3, #1
 800e6fc:	d019      	beq.n	800e732 <xQueueGenericSendFromISR+0x52>
 800e6fe:	b672      	cpsid	i
 800e700:	e7fe      	b.n	800e700 <xQueueGenericSendFromISR+0x20>
	configASSERT( pxQueue );
 800e702:	b672      	cpsid	i
 800e704:	e7fe      	b.n	800e704 <xQueueGenericSendFromISR+0x24>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e706:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800e708:	2b00      	cmp	r3, #0
 800e70a:	d0f3      	beq.n	800e6f4 <xQueueGenericSendFromISR+0x14>
 800e70c:	b672      	cpsid	i
 800e70e:	e7fe      	b.n	800e70e <xQueueGenericSendFromISR+0x2e>
			xReturn = pdPASS;
 800e710:	2501      	movs	r5, #1
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e712:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e714:	2b00      	cmp	r3, #0
 800e716:	d025      	beq.n	800e764 <xQueueGenericSendFromISR+0x84>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e718:	0020      	movs	r0, r4
 800e71a:	3024      	adds	r0, #36	; 0x24
 800e71c:	f000 fe4a 	bl	800f3b4 <xTaskRemoveFromEventList>
 800e720:	2800      	cmp	r0, #0
 800e722:	d01f      	beq.n	800e764 <xQueueGenericSendFromISR+0x84>
							if( pxHigherPriorityTaskWoken != NULL )
 800e724:	2f00      	cmp	r7, #0
 800e726:	d002      	beq.n	800e72e <xQueueGenericSendFromISR+0x4e>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800e728:	2301      	movs	r3, #1
 800e72a:	603b      	str	r3, [r7, #0]
 800e72c:	e01a      	b.n	800e764 <xQueueGenericSendFromISR+0x84>
			xReturn = pdPASS;
 800e72e:	2501      	movs	r5, #1
 800e730:	e018      	b.n	800e764 <xQueueGenericSendFromISR+0x84>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e732:	f001 fb31 	bl	800fd98 <ulSetInterruptMaskFromISR>
 800e736:	9001      	str	r0, [sp, #4]
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e738:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e73a:	0032      	movs	r2, r6
 800e73c:	0029      	movs	r1, r5
 800e73e:	0020      	movs	r0, r4
 800e740:	f7ff fe36 	bl	800e3b0 <prvCopyDataToQueue>
			if( pxQueue->xTxLock == queueUNLOCKED )
 800e744:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800e746:	3301      	adds	r3, #1
 800e748:	d0e2      	beq.n	800e710 <xQueueGenericSendFromISR+0x30>
				++( pxQueue->xTxLock );
 800e74a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800e74c:	3301      	adds	r3, #1
 800e74e:	64a3      	str	r3, [r4, #72]	; 0x48
			xReturn = pdPASS;
 800e750:	2501      	movs	r5, #1
 800e752:	e007      	b.n	800e764 <xQueueGenericSendFromISR+0x84>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e754:	f001 fb20 	bl	800fd98 <ulSetInterruptMaskFromISR>
 800e758:	9001      	str	r0, [sp, #4]
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e75a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e75c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800e75e:	4293      	cmp	r3, r2
 800e760:	d3eb      	bcc.n	800e73a <xQueueGenericSendFromISR+0x5a>
			xReturn = errQUEUE_FULL;
 800e762:	2500      	movs	r5, #0
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800e764:	9801      	ldr	r0, [sp, #4]
 800e766:	f001 fb1c 	bl	800fda2 <vClearInterruptMaskFromISR>
}
 800e76a:	0028      	movs	r0, r5
 800e76c:	b003      	add	sp, #12
 800e76e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e770 <xQueueGiveFromISR>:
{
 800e770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e772:	0004      	movs	r4, r0
 800e774:	000e      	movs	r6, r1
	configASSERT( pxQueue );
 800e776:	2800      	cmp	r0, #0
 800e778:	d004      	beq.n	800e784 <xQueueGiveFromISR+0x14>
	configASSERT( pxQueue->uxItemSize == 0 );
 800e77a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800e77c:	2b00      	cmp	r3, #0
 800e77e:	d003      	beq.n	800e788 <xQueueGiveFromISR+0x18>
 800e780:	b672      	cpsid	i
 800e782:	e7fe      	b.n	800e782 <xQueueGiveFromISR+0x12>
	configASSERT( pxQueue );
 800e784:	b672      	cpsid	i
 800e786:	e7fe      	b.n	800e786 <xQueueGiveFromISR+0x16>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 800e788:	6803      	ldr	r3, [r0, #0]
 800e78a:	2b00      	cmp	r3, #0
 800e78c:	d016      	beq.n	800e7bc <xQueueGiveFromISR+0x4c>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e78e:	f001 fb03 	bl	800fd98 <ulSetInterruptMaskFromISR>
 800e792:	0007      	movs	r7, r0
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
 800e794:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			xReturn = errQUEUE_FULL;
 800e796:	2500      	movs	r5, #0
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
 800e798:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800e79a:	4293      	cmp	r3, r2
 800e79c:	d209      	bcs.n	800e7b2 <xQueueGiveFromISR+0x42>
			++( pxQueue->uxMessagesWaiting );
 800e79e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e7a0:	3301      	adds	r3, #1
 800e7a2:	63a3      	str	r3, [r4, #56]	; 0x38
			if( pxQueue->xTxLock == queueUNLOCKED )
 800e7a4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800e7a6:	3301      	adds	r3, #1
 800e7a8:	d00d      	beq.n	800e7c6 <xQueueGiveFromISR+0x56>
				++( pxQueue->xTxLock );
 800e7aa:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800e7ac:	3301      	adds	r3, #1
 800e7ae:	64a3      	str	r3, [r4, #72]	; 0x48
			xReturn = pdPASS;
 800e7b0:	2501      	movs	r5, #1
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800e7b2:	0038      	movs	r0, r7
 800e7b4:	f001 faf5 	bl	800fda2 <vClearInterruptMaskFromISR>
}
 800e7b8:	0028      	movs	r0, r5
 800e7ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 800e7bc:	6843      	ldr	r3, [r0, #4]
 800e7be:	2b00      	cmp	r3, #0
 800e7c0:	d0e5      	beq.n	800e78e <xQueueGiveFromISR+0x1e>
 800e7c2:	b672      	cpsid	i
 800e7c4:	e7fe      	b.n	800e7c4 <xQueueGiveFromISR+0x54>
			xReturn = pdPASS;
 800e7c6:	3501      	adds	r5, #1
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e7c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e7ca:	2b00      	cmp	r3, #0
 800e7cc:	d0f1      	beq.n	800e7b2 <xQueueGiveFromISR+0x42>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e7ce:	0020      	movs	r0, r4
 800e7d0:	3024      	adds	r0, #36	; 0x24
 800e7d2:	f000 fdef 	bl	800f3b4 <xTaskRemoveFromEventList>
 800e7d6:	2800      	cmp	r0, #0
 800e7d8:	d0eb      	beq.n	800e7b2 <xQueueGiveFromISR+0x42>
							if( pxHigherPriorityTaskWoken != NULL )
 800e7da:	2e00      	cmp	r6, #0
 800e7dc:	d002      	beq.n	800e7e4 <xQueueGiveFromISR+0x74>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800e7de:	2301      	movs	r3, #1
 800e7e0:	6033      	str	r3, [r6, #0]
 800e7e2:	e7e6      	b.n	800e7b2 <xQueueGiveFromISR+0x42>
			xReturn = pdPASS;
 800e7e4:	2501      	movs	r5, #1
 800e7e6:	e7e4      	b.n	800e7b2 <xQueueGiveFromISR+0x42>

0800e7e8 <xQueueGenericReceive>:
{
 800e7e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e7ea:	46c6      	mov	lr, r8
 800e7ec:	b500      	push	{lr}
 800e7ee:	b084      	sub	sp, #16
 800e7f0:	0004      	movs	r4, r0
 800e7f2:	000d      	movs	r5, r1
 800e7f4:	9201      	str	r2, [sp, #4]
 800e7f6:	4698      	mov	r8, r3
	configASSERT( pxQueue );
 800e7f8:	2800      	cmp	r0, #0
 800e7fa:	d00a      	beq.n	800e812 <xQueueGenericReceive+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e7fc:	2900      	cmp	r1, #0
 800e7fe:	d00a      	beq.n	800e816 <xQueueGenericReceive+0x2e>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e800:	f000 fe60 	bl	800f4c4 <xTaskGetSchedulerState>
 800e804:	2800      	cmp	r0, #0
 800e806:	d10b      	bne.n	800e820 <xQueueGenericReceive+0x38>
 800e808:	9b01      	ldr	r3, [sp, #4]
 800e80a:	2b00      	cmp	r3, #0
 800e80c:	d00b      	beq.n	800e826 <xQueueGenericReceive+0x3e>
 800e80e:	b672      	cpsid	i
 800e810:	e7fe      	b.n	800e810 <xQueueGenericReceive+0x28>
	configASSERT( pxQueue );
 800e812:	b672      	cpsid	i
 800e814:	e7fe      	b.n	800e814 <xQueueGenericReceive+0x2c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e816:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800e818:	2b00      	cmp	r3, #0
 800e81a:	d0f1      	beq.n	800e800 <xQueueGenericReceive+0x18>
 800e81c:	b672      	cpsid	i
 800e81e:	e7fe      	b.n	800e81e <xQueueGenericReceive+0x36>
 800e820:	2700      	movs	r7, #0
		prvLockQueue( pxQueue );
 800e822:	2600      	movs	r6, #0
 800e824:	e04d      	b.n	800e8c2 <xQueueGenericReceive+0xda>
 800e826:	2700      	movs	r7, #0
 800e828:	e7fb      	b.n	800e822 <xQueueGenericReceive+0x3a>
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 800e82a:	68e7      	ldr	r7, [r4, #12]
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e82c:	0029      	movs	r1, r5
 800e82e:	0020      	movs	r0, r4
 800e830:	f7ff fdfc 	bl	800e42c <prvCopyDataFromQueue>
				if( xJustPeeking == pdFALSE )
 800e834:	4643      	mov	r3, r8
 800e836:	2b00      	cmp	r3, #0
 800e838:	d11c      	bne.n	800e874 <xQueueGenericReceive+0x8c>
					--( pxQueue->uxMessagesWaiting );
 800e83a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e83c:	3b01      	subs	r3, #1
 800e83e:	63a3      	str	r3, [r4, #56]	; 0x38
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e840:	6823      	ldr	r3, [r4, #0]
 800e842:	2b00      	cmp	r3, #0
 800e844:	d009      	beq.n	800e85a <xQueueGenericReceive+0x72>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e846:	6923      	ldr	r3, [r4, #16]
 800e848:	2b00      	cmp	r3, #0
 800e84a:	d10a      	bne.n	800e862 <xQueueGenericReceive+0x7a>
				taskEXIT_CRITICAL();
 800e84c:	f001 fa94 	bl	800fd78 <vPortExitCritical>
				return pdPASS;
 800e850:	2001      	movs	r0, #1
}
 800e852:	b004      	add	sp, #16
 800e854:	bc80      	pop	{r7}
 800e856:	46b8      	mov	r8, r7
 800e858:	bdf0      	pop	{r4, r5, r6, r7, pc}
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800e85a:	f000 ff8b 	bl	800f774 <pvTaskIncrementMutexHeldCount>
 800e85e:	6060      	str	r0, [r4, #4]
 800e860:	e7f1      	b.n	800e846 <xQueueGenericReceive+0x5e>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 800e862:	0020      	movs	r0, r4
 800e864:	3010      	adds	r0, #16
 800e866:	f000 fda5 	bl	800f3b4 <xTaskRemoveFromEventList>
 800e86a:	2801      	cmp	r0, #1
 800e86c:	d1ee      	bne.n	800e84c <xQueueGenericReceive+0x64>
							queueYIELD_IF_USING_PREEMPTION();
 800e86e:	f001 fa6b 	bl	800fd48 <vPortYield>
 800e872:	e7eb      	b.n	800e84c <xQueueGenericReceive+0x64>
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 800e874:	60e7      	str	r7, [r4, #12]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e876:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e878:	2b00      	cmp	r3, #0
 800e87a:	d0e7      	beq.n	800e84c <xQueueGenericReceive+0x64>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e87c:	0020      	movs	r0, r4
 800e87e:	3024      	adds	r0, #36	; 0x24
 800e880:	f000 fd98 	bl	800f3b4 <xTaskRemoveFromEventList>
 800e884:	2800      	cmp	r0, #0
 800e886:	d0e1      	beq.n	800e84c <xQueueGenericReceive+0x64>
							queueYIELD_IF_USING_PREEMPTION();
 800e888:	f001 fa5e 	bl	800fd48 <vPortYield>
 800e88c:	e7de      	b.n	800e84c <xQueueGenericReceive+0x64>
					taskEXIT_CRITICAL();
 800e88e:	f001 fa73 	bl	800fd78 <vPortExitCritical>
					return errQUEUE_EMPTY;
 800e892:	2000      	movs	r0, #0
 800e894:	e7dd      	b.n	800e852 <xQueueGenericReceive+0x6a>
					vTaskSetTimeOutState( &xTimeOut );
 800e896:	a802      	add	r0, sp, #8
 800e898:	f000 fdcc 	bl	800f434 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e89c:	e01b      	b.n	800e8d6 <xQueueGenericReceive+0xee>
		prvLockQueue( pxQueue );
 800e89e:	6466      	str	r6, [r4, #68]	; 0x44
 800e8a0:	e022      	b.n	800e8e8 <xQueueGenericReceive+0x100>
 800e8a2:	64a6      	str	r6, [r4, #72]	; 0x48
 800e8a4:	e023      	b.n	800e8ee <xQueueGenericReceive+0x106>
						taskENTER_CRITICAL();
 800e8a6:	f001 fa5b 	bl	800fd60 <vPortEnterCritical>
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800e8aa:	6860      	ldr	r0, [r4, #4]
 800e8ac:	f000 fe1a 	bl	800f4e4 <vTaskPriorityInherit>
						taskEXIT_CRITICAL();
 800e8b0:	f001 fa62 	bl	800fd78 <vPortExitCritical>
 800e8b4:	e02d      	b.n	800e912 <xQueueGenericReceive+0x12a>
				prvUnlockQueue( pxQueue );
 800e8b6:	0020      	movs	r0, r4
 800e8b8:	f7ff fdca 	bl	800e450 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e8bc:	f000 fb9a 	bl	800eff4 <xTaskResumeAll>
 800e8c0:	2701      	movs	r7, #1
		taskENTER_CRITICAL();
 800e8c2:	f001 fa4d 	bl	800fd60 <vPortEnterCritical>
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e8c6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e8c8:	2b00      	cmp	r3, #0
 800e8ca:	d1ae      	bne.n	800e82a <xQueueGenericReceive+0x42>
				if( xTicksToWait == ( TickType_t ) 0 )
 800e8cc:	9b01      	ldr	r3, [sp, #4]
 800e8ce:	2b00      	cmp	r3, #0
 800e8d0:	d0dd      	beq.n	800e88e <xQueueGenericReceive+0xa6>
				else if( xEntryTimeSet == pdFALSE )
 800e8d2:	2f00      	cmp	r7, #0
 800e8d4:	d0df      	beq.n	800e896 <xQueueGenericReceive+0xae>
		taskEXIT_CRITICAL();
 800e8d6:	f001 fa4f 	bl	800fd78 <vPortExitCritical>
		vTaskSuspendAll();
 800e8da:	f000 fae3 	bl	800eea4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e8de:	f001 fa3f 	bl	800fd60 <vPortEnterCritical>
 800e8e2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800e8e4:	3301      	adds	r3, #1
 800e8e6:	d0da      	beq.n	800e89e <xQueueGenericReceive+0xb6>
 800e8e8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800e8ea:	3301      	adds	r3, #1
 800e8ec:	d0d9      	beq.n	800e8a2 <xQueueGenericReceive+0xba>
 800e8ee:	f001 fa43 	bl	800fd78 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e8f2:	a901      	add	r1, sp, #4
 800e8f4:	a802      	add	r0, sp, #8
 800e8f6:	f000 fdad 	bl	800f454 <xTaskCheckForTimeOut>
 800e8fa:	2800      	cmp	r0, #0
 800e8fc:	d118      	bne.n	800e930 <xQueueGenericReceive+0x148>
	taskENTER_CRITICAL();
 800e8fe:	f001 fa2f 	bl	800fd60 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800e902:	6ba7      	ldr	r7, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
 800e904:	f001 fa38 	bl	800fd78 <vPortExitCritical>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e908:	2f00      	cmp	r7, #0
 800e90a:	d1d4      	bne.n	800e8b6 <xQueueGenericReceive+0xce>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e90c:	6823      	ldr	r3, [r4, #0]
 800e90e:	2b00      	cmp	r3, #0
 800e910:	d0c9      	beq.n	800e8a6 <xQueueGenericReceive+0xbe>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800e912:	0020      	movs	r0, r4
 800e914:	3024      	adds	r0, #36	; 0x24
 800e916:	9901      	ldr	r1, [sp, #4]
 800e918:	f000 fd0e 	bl	800f338 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800e91c:	0020      	movs	r0, r4
 800e91e:	f7ff fd97 	bl	800e450 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800e922:	f000 fb67 	bl	800eff4 <xTaskResumeAll>
 800e926:	2800      	cmp	r0, #0
 800e928:	d1ca      	bne.n	800e8c0 <xQueueGenericReceive+0xd8>
					portYIELD_WITHIN_API();
 800e92a:	f001 fa0d 	bl	800fd48 <vPortYield>
 800e92e:	e7c7      	b.n	800e8c0 <xQueueGenericReceive+0xd8>
			prvUnlockQueue( pxQueue );
 800e930:	0020      	movs	r0, r4
 800e932:	f7ff fd8d 	bl	800e450 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e936:	f000 fb5d 	bl	800eff4 <xTaskResumeAll>
			return errQUEUE_EMPTY;
 800e93a:	2000      	movs	r0, #0
 800e93c:	e789      	b.n	800e852 <xQueueGenericReceive+0x6a>

0800e93e <xQueueReceiveFromISR>:
{
 800e93e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e940:	46c6      	mov	lr, r8
 800e942:	b500      	push	{lr}
 800e944:	0004      	movs	r4, r0
 800e946:	000f      	movs	r7, r1
 800e948:	0016      	movs	r6, r2
	configASSERT( pxQueue );
 800e94a:	2800      	cmp	r0, #0
 800e94c:	d00f      	beq.n	800e96e <xQueueReceiveFromISR+0x30>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e94e:	2900      	cmp	r1, #0
 800e950:	d00f      	beq.n	800e972 <xQueueReceiveFromISR+0x34>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e952:	f001 fa21 	bl	800fd98 <ulSetInterruptMaskFromISR>
 800e956:	4680      	mov	r8, r0
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e958:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			xReturn = pdFAIL;
 800e95a:	2500      	movs	r5, #0
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e95c:	2b00      	cmp	r3, #0
 800e95e:	d10d      	bne.n	800e97c <xQueueReceiveFromISR+0x3e>
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800e960:	4640      	mov	r0, r8
 800e962:	f001 fa1e 	bl	800fda2 <vClearInterruptMaskFromISR>
}
 800e966:	0028      	movs	r0, r5
 800e968:	bc80      	pop	{r7}
 800e96a:	46b8      	mov	r8, r7
 800e96c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	configASSERT( pxQueue );
 800e96e:	b672      	cpsid	i
 800e970:	e7fe      	b.n	800e970 <xQueueReceiveFromISR+0x32>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e972:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800e974:	2b00      	cmp	r3, #0
 800e976:	d0ec      	beq.n	800e952 <xQueueReceiveFromISR+0x14>
 800e978:	b672      	cpsid	i
 800e97a:	e7fe      	b.n	800e97a <xQueueReceiveFromISR+0x3c>
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e97c:	0039      	movs	r1, r7
 800e97e:	0020      	movs	r0, r4
 800e980:	f7ff fd54 	bl	800e42c <prvCopyDataFromQueue>
			--( pxQueue->uxMessagesWaiting );
 800e984:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e986:	3b01      	subs	r3, #1
 800e988:	63a3      	str	r3, [r4, #56]	; 0x38
			if( pxQueue->xRxLock == queueUNLOCKED )
 800e98a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800e98c:	3301      	adds	r3, #1
 800e98e:	d004      	beq.n	800e99a <xQueueReceiveFromISR+0x5c>
				++( pxQueue->xRxLock );
 800e990:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800e992:	3301      	adds	r3, #1
 800e994:	6463      	str	r3, [r4, #68]	; 0x44
			xReturn = pdPASS;
 800e996:	2501      	movs	r5, #1
 800e998:	e7e2      	b.n	800e960 <xQueueReceiveFromISR+0x22>
 800e99a:	3501      	adds	r5, #1
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e99c:	6923      	ldr	r3, [r4, #16]
 800e99e:	2b00      	cmp	r3, #0
 800e9a0:	d0de      	beq.n	800e960 <xQueueReceiveFromISR+0x22>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e9a2:	0020      	movs	r0, r4
 800e9a4:	3010      	adds	r0, #16
 800e9a6:	f000 fd05 	bl	800f3b4 <xTaskRemoveFromEventList>
 800e9aa:	2800      	cmp	r0, #0
 800e9ac:	d0d8      	beq.n	800e960 <xQueueReceiveFromISR+0x22>
						if( pxHigherPriorityTaskWoken != NULL )
 800e9ae:	2e00      	cmp	r6, #0
 800e9b0:	d002      	beq.n	800e9b8 <xQueueReceiveFromISR+0x7a>
							*pxHigherPriorityTaskWoken = pdTRUE;
 800e9b2:	2301      	movs	r3, #1
 800e9b4:	6033      	str	r3, [r6, #0]
 800e9b6:	e7d3      	b.n	800e960 <xQueueReceiveFromISR+0x22>
			xReturn = pdPASS;
 800e9b8:	2501      	movs	r5, #1
 800e9ba:	e7d1      	b.n	800e960 <xQueueReceiveFromISR+0x22>

0800e9bc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800e9bc:	b510      	push	{r4, lr}
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e9be:	4a08      	ldr	r2, [pc, #32]	; (800e9e0 <vQueueAddToRegistry+0x24>)
 800e9c0:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800e9c2:	6814      	ldr	r4, [r2, #0]
 800e9c4:	2c00      	cmp	r4, #0
 800e9c6:	d004      	beq.n	800e9d2 <vQueueAddToRegistry+0x16>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e9c8:	3301      	adds	r3, #1
 800e9ca:	3208      	adds	r2, #8
 800e9cc:	2b08      	cmp	r3, #8
 800e9ce:	d1f8      	bne.n	800e9c2 <vQueueAddToRegistry+0x6>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800e9d0:	bd10      	pop	{r4, pc}
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800e9d2:	4a03      	ldr	r2, [pc, #12]	; (800e9e0 <vQueueAddToRegistry+0x24>)
 800e9d4:	00db      	lsls	r3, r3, #3
 800e9d6:	5099      	str	r1, [r3, r2]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800e9d8:	18d3      	adds	r3, r2, r3
 800e9da:	6058      	str	r0, [r3, #4]
				break;
 800e9dc:	e7f8      	b.n	800e9d0 <vQueueAddToRegistry+0x14>
 800e9de:	46c0      	nop			; (mov r8, r8)
 800e9e0:	20006918 	.word	0x20006918

0800e9e4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait )
	{
 800e9e4:	b570      	push	{r4, r5, r6, lr}
 800e9e6:	0004      	movs	r4, r0
 800e9e8:	000d      	movs	r5, r1
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800e9ea:	f001 f9b9 	bl	800fd60 <vPortEnterCritical>
 800e9ee:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800e9f0:	3301      	adds	r3, #1
 800e9f2:	d00b      	beq.n	800ea0c <vQueueWaitForMessageRestricted+0x28>
 800e9f4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800e9f6:	3301      	adds	r3, #1
 800e9f8:	d00b      	beq.n	800ea12 <vQueueWaitForMessageRestricted+0x2e>
 800e9fa:	f001 f9bd 	bl	800fd78 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800e9fe:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800ea00:	2b00      	cmp	r3, #0
 800ea02:	d009      	beq.n	800ea18 <vQueueWaitForMessageRestricted+0x34>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800ea04:	0020      	movs	r0, r4
 800ea06:	f7ff fd23 	bl	800e450 <prvUnlockQueue>
	}
 800ea0a:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
 800ea0c:	2300      	movs	r3, #0
 800ea0e:	6463      	str	r3, [r4, #68]	; 0x44
 800ea10:	e7f0      	b.n	800e9f4 <vQueueWaitForMessageRestricted+0x10>
 800ea12:	2300      	movs	r3, #0
 800ea14:	64a3      	str	r3, [r4, #72]	; 0x48
 800ea16:	e7f0      	b.n	800e9fa <vQueueWaitForMessageRestricted+0x16>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ea18:	0020      	movs	r0, r4
 800ea1a:	3024      	adds	r0, #36	; 0x24
 800ea1c:	0029      	movs	r1, r5
 800ea1e:	f000 fcaf 	bl	800f380 <vTaskPlaceOnEventListRestricted>
 800ea22:	e7ef      	b.n	800ea04 <vQueueWaitForMessageRestricted+0x20>

0800ea24 <prvListTaskWithinSingleList>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	static UBaseType_t prvListTaskWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
	{
 800ea24:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ea26:	46de      	mov	lr, fp
 800ea28:	4657      	mov	r7, sl
 800ea2a:	464e      	mov	r6, r9
 800ea2c:	4645      	mov	r5, r8
 800ea2e:	b5e0      	push	{r5, r6, r7, lr}
 800ea30:	0004      	movs	r4, r0
	volatile TCB_t *pxNextTCB, *pxFirstTCB;
	UBaseType_t uxTask = 0;

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 800ea32:	680b      	ldr	r3, [r1, #0]
 800ea34:	469b      	mov	fp, r3
 800ea36:	2b00      	cmp	r3, #0
 800ea38:	d045      	beq.n	800eac6 <prvListTaskWithinSingleList+0xa2>
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
 800ea3a:	684b      	ldr	r3, [r1, #4]
 800ea3c:	685b      	ldr	r3, [r3, #4]
 800ea3e:	604b      	str	r3, [r1, #4]
 800ea40:	2008      	movs	r0, #8
 800ea42:	4684      	mov	ip, r0
 800ea44:	448c      	add	ip, r1
 800ea46:	4563      	cmp	r3, ip
 800ea48:	d007      	beq.n	800ea5a <prvListTaskWithinSingleList+0x36>
 800ea4a:	684b      	ldr	r3, [r1, #4]
 800ea4c:	68db      	ldr	r3, [r3, #12]
 800ea4e:	4698      	mov	r8, r3
	UBaseType_t uxTask = 0;
 800ea50:	2300      	movs	r3, #0
 800ea52:	469b      	mov	fp, r3
					be reported as being in the Blocked state. */
					if( eState == eSuspended )
					{
						if( listLIST_ITEM_CONTAINER( &( pxNextTCB->xEventListItem ) ) != NULL )
						{
							pxTaskStatusArray[ uxTask ].eCurrentState = eBlocked;
 800ea54:	3302      	adds	r3, #2
 800ea56:	4699      	mov	r9, r3
 800ea58:	e01c      	b.n	800ea94 <prvListTaskWithinSingleList+0x70>
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
 800ea5a:	68cb      	ldr	r3, [r1, #12]
 800ea5c:	604b      	str	r3, [r1, #4]
 800ea5e:	e7f4      	b.n	800ea4a <prvListTaskWithinSingleList+0x26>
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
 800ea60:	685b      	ldr	r3, [r3, #4]
 800ea62:	604b      	str	r3, [r1, #4]
 800ea64:	e01b      	b.n	800ea9e <prvListTaskWithinSingleList+0x7a>
							pxTaskStatusArray[ uxTask ].eCurrentState = eBlocked;
 800ea66:	4648      	mov	r0, r9
 800ea68:	7320      	strb	r0, [r4, #12]
				}
				#endif /* INCLUDE_vTaskSuspend */

				#if ( configUSE_MUTEXES == 1 )
				{
					pxTaskStatusArray[ uxTask ].uxBasePriority = pxNextTCB->uxBasePriority;
 800ea6a:	6cdd      	ldr	r5, [r3, #76]	; 0x4c
 800ea6c:	6175      	str	r5, [r6, #20]
				}
				#endif

				#if ( configGENERATE_RUN_TIME_STATS == 1 )
				{
					pxTaskStatusArray[ uxTask ].ulRunTimeCounter = pxNextTCB->ulRunTimeCounter;
 800ea6e:	6d5d      	ldr	r5, [r3, #84]	; 0x54
 800ea70:	61b5      	str	r5, [r6, #24]
				{
					pxTaskStatusArray[ uxTask ].usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxNextTCB->pxEndOfStack );
				}
				#else
				{
					pxTaskStatusArray[ uxTask ].usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxNextTCB->pxStack );
 800ea72:	6b1f      	ldr	r7, [r3, #48]	; 0x30

	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
	uint32_t ulCount = 0U;

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800ea74:	783d      	ldrb	r5, [r7, #0]
 800ea76:	2da5      	cmp	r5, #165	; 0xa5
 800ea78:	d123      	bne.n	800eac2 <prvListTaskWithinSingleList+0x9e>
	uint32_t ulCount = 0U;
 800ea7a:	2500      	movs	r5, #0
		{
			pucStackByte -= portSTACK_GROWTH;
			ulCount++;
 800ea7c:	3501      	adds	r5, #1
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800ea7e:	5d78      	ldrb	r0, [r7, r5]
 800ea80:	28a5      	cmp	r0, #165	; 0xa5
 800ea82:	d0fb      	beq.n	800ea7c <prvListTaskWithinSingleList+0x58>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 800ea84:	08ad      	lsrs	r5, r5, #2

		return ( uint16_t ) ulCount;
 800ea86:	83b5      	strh	r5, [r6, #28]
				uxTask++;
 800ea88:	2001      	movs	r0, #1
 800ea8a:	4682      	mov	sl, r0
 800ea8c:	44d3      	add	fp, sl
			} while( pxNextTCB != pxFirstTCB );
 800ea8e:	3420      	adds	r4, #32
 800ea90:	4598      	cmp	r8, r3
 800ea92:	d018      	beq.n	800eac6 <prvListTaskWithinSingleList+0xa2>
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
 800ea94:	684b      	ldr	r3, [r1, #4]
 800ea96:	685b      	ldr	r3, [r3, #4]
 800ea98:	604b      	str	r3, [r1, #4]
 800ea9a:	459c      	cmp	ip, r3
 800ea9c:	d0e0      	beq.n	800ea60 <prvListTaskWithinSingleList+0x3c>
 800ea9e:	684b      	ldr	r3, [r1, #4]
 800eaa0:	68db      	ldr	r3, [r3, #12]
				pxTaskStatusArray[ uxTask ].xHandle = ( TaskHandle_t ) pxNextTCB;
 800eaa2:	0026      	movs	r6, r4
 800eaa4:	6023      	str	r3, [r4, #0]
				pxTaskStatusArray[ uxTask ].pcTaskName = ( const char * ) &( pxNextTCB->pcTaskName [ 0 ] );
 800eaa6:	001d      	movs	r5, r3
 800eaa8:	3534      	adds	r5, #52	; 0x34
 800eaaa:	6065      	str	r5, [r4, #4]
				pxTaskStatusArray[ uxTask ].xTaskNumber = pxNextTCB->uxTCBNumber;
 800eaac:	6c5d      	ldr	r5, [r3, #68]	; 0x44
 800eaae:	60a5      	str	r5, [r4, #8]
				pxTaskStatusArray[ uxTask ].eCurrentState = eState;
 800eab0:	7322      	strb	r2, [r4, #12]
				pxTaskStatusArray[ uxTask ].uxCurrentPriority = pxNextTCB->uxPriority;
 800eab2:	6add      	ldr	r5, [r3, #44]	; 0x2c
 800eab4:	6125      	str	r5, [r4, #16]
					if( eState == eSuspended )
 800eab6:	2a03      	cmp	r2, #3
 800eab8:	d1d7      	bne.n	800ea6a <prvListTaskWithinSingleList+0x46>
						if( listLIST_ITEM_CONTAINER( &( pxNextTCB->xEventListItem ) ) != NULL )
 800eaba:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 800eabc:	2d00      	cmp	r5, #0
 800eabe:	d1d2      	bne.n	800ea66 <prvListTaskWithinSingleList+0x42>
 800eac0:	e7d3      	b.n	800ea6a <prvListTaskWithinSingleList+0x46>
	uint32_t ulCount = 0U;
 800eac2:	2500      	movs	r5, #0
 800eac4:	e7de      	b.n	800ea84 <prvListTaskWithinSingleList+0x60>
	}
 800eac6:	4658      	mov	r0, fp
 800eac8:	bcf0      	pop	{r4, r5, r6, r7}
 800eaca:	46bb      	mov	fp, r7
 800eacc:	46b2      	mov	sl, r6
 800eace:	46a9      	mov	r9, r5
 800ead0:	46a0      	mov	r8, r4
 800ead2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ead4 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ead4:	4b08      	ldr	r3, [pc, #32]	; (800eaf8 <prvResetNextTaskUnblockTime+0x24>)
 800ead6:	681b      	ldr	r3, [r3, #0]
 800ead8:	681b      	ldr	r3, [r3, #0]
 800eada:	2b00      	cmp	r3, #0
 800eadc:	d104      	bne.n	800eae8 <prvResetNextTaskUnblockTime+0x14>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800eade:	4b07      	ldr	r3, [pc, #28]	; (800eafc <prvResetNextTaskUnblockTime+0x28>)
 800eae0:	2201      	movs	r2, #1
 800eae2:	4252      	negs	r2, r2
 800eae4:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
	}
}
 800eae6:	4770      	bx	lr
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800eae8:	4b03      	ldr	r3, [pc, #12]	; (800eaf8 <prvResetNextTaskUnblockTime+0x24>)
 800eaea:	681b      	ldr	r3, [r3, #0]
 800eaec:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
 800eaee:	68db      	ldr	r3, [r3, #12]
 800eaf0:	685a      	ldr	r2, [r3, #4]
 800eaf2:	4b02      	ldr	r3, [pc, #8]	; (800eafc <prvResetNextTaskUnblockTime+0x28>)
 800eaf4:	601a      	str	r2, [r3, #0]
}
 800eaf6:	e7f6      	b.n	800eae6 <prvResetNextTaskUnblockTime+0x12>
 800eaf8:	20001730 	.word	0x20001730
 800eafc:	200000a4 	.word	0x200000a4

0800eb00 <prvAddCurrentTaskToDelayedList>:
{
 800eb00:	b510      	push	{r4, lr}
 800eb02:	0004      	movs	r4, r0
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 800eb04:	4b0e      	ldr	r3, [pc, #56]	; (800eb40 <prvAddCurrentTaskToDelayedList+0x40>)
 800eb06:	681b      	ldr	r3, [r3, #0]
 800eb08:	6058      	str	r0, [r3, #4]
	if( xTimeToWake < xTickCount )
 800eb0a:	4b0e      	ldr	r3, [pc, #56]	; (800eb44 <prvAddCurrentTaskToDelayedList+0x44>)
 800eb0c:	681b      	ldr	r3, [r3, #0]
 800eb0e:	4283      	cmp	r3, r0
 800eb10:	d907      	bls.n	800eb22 <prvAddCurrentTaskToDelayedList+0x22>
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 800eb12:	4b0d      	ldr	r3, [pc, #52]	; (800eb48 <prvAddCurrentTaskToDelayedList+0x48>)
 800eb14:	6818      	ldr	r0, [r3, #0]
 800eb16:	4b0a      	ldr	r3, [pc, #40]	; (800eb40 <prvAddCurrentTaskToDelayedList+0x40>)
 800eb18:	6819      	ldr	r1, [r3, #0]
 800eb1a:	3104      	adds	r1, #4
 800eb1c:	f7ff fc1f 	bl	800e35e <vListInsert>
}
 800eb20:	bd10      	pop	{r4, pc}
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 800eb22:	4b0a      	ldr	r3, [pc, #40]	; (800eb4c <prvAddCurrentTaskToDelayedList+0x4c>)
 800eb24:	6818      	ldr	r0, [r3, #0]
 800eb26:	4b06      	ldr	r3, [pc, #24]	; (800eb40 <prvAddCurrentTaskToDelayedList+0x40>)
 800eb28:	6819      	ldr	r1, [r3, #0]
 800eb2a:	3104      	adds	r1, #4
 800eb2c:	f7ff fc17 	bl	800e35e <vListInsert>
		if( xTimeToWake < xNextTaskUnblockTime )
 800eb30:	4b07      	ldr	r3, [pc, #28]	; (800eb50 <prvAddCurrentTaskToDelayedList+0x50>)
 800eb32:	681b      	ldr	r3, [r3, #0]
 800eb34:	42a3      	cmp	r3, r4
 800eb36:	d9f3      	bls.n	800eb20 <prvAddCurrentTaskToDelayedList+0x20>
			xNextTaskUnblockTime = xTimeToWake;
 800eb38:	4b05      	ldr	r3, [pc, #20]	; (800eb50 <prvAddCurrentTaskToDelayedList+0x50>)
 800eb3a:	601c      	str	r4, [r3, #0]
}
 800eb3c:	e7f0      	b.n	800eb20 <prvAddCurrentTaskToDelayedList+0x20>
 800eb3e:	46c0      	nop			; (mov r8, r8)
 800eb40:	2000172c 	.word	0x2000172c
 800eb44:	2000184c 	.word	0x2000184c
 800eb48:	20001734 	.word	0x20001734
 800eb4c:	20001730 	.word	0x20001730
 800eb50:	200000a4 	.word	0x200000a4

0800eb54 <prvWriteNameToBuffer>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
	{
 800eb54:	b510      	push	{r4, lr}
 800eb56:	0004      	movs	r4, r0
	BaseType_t x;

		/* Start by copying the entire string. */
		strcpy( pcBuffer, pcTaskName );
 800eb58:	f007 fe3b 	bl	80167d2 <strcpy>

		/* Pad the end of the string with spaces to ensure columns line up when
		printed out. */
		for( x = strlen( pcBuffer ); x < ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 800eb5c:	0020      	movs	r0, r4
 800eb5e:	f7f1 fadb 	bl	8000118 <strlen>
 800eb62:	280b      	cmp	r0, #11
 800eb64:	dc08      	bgt.n	800eb78 <prvWriteNameToBuffer+0x24>
 800eb66:	1823      	adds	r3, r4, r0
 800eb68:	0021      	movs	r1, r4
 800eb6a:	310c      	adds	r1, #12
		{
			pcBuffer[ x ] = ' ';
 800eb6c:	2220      	movs	r2, #32
 800eb6e:	701a      	strb	r2, [r3, #0]
		for( x = strlen( pcBuffer ); x < ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 800eb70:	3301      	adds	r3, #1
 800eb72:	428b      	cmp	r3, r1
 800eb74:	d1fb      	bne.n	800eb6e <prvWriteNameToBuffer+0x1a>
 800eb76:	200c      	movs	r0, #12
		}

		/* Terminate. */
		pcBuffer[ x ] = 0x00;
 800eb78:	1820      	adds	r0, r4, r0
 800eb7a:	2300      	movs	r3, #0
 800eb7c:	7003      	strb	r3, [r0, #0]

		/* Return the new end of string. */
		return &( pcBuffer[ x ] );
	}
 800eb7e:	bd10      	pop	{r4, pc}

0800eb80 <xTaskGenericCreate>:
{
 800eb80:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eb82:	46de      	mov	lr, fp
 800eb84:	4657      	mov	r7, sl
 800eb86:	464e      	mov	r6, r9
 800eb88:	4645      	mov	r5, r8
 800eb8a:	b5e0      	push	{r5, r6, r7, lr}
 800eb8c:	b083      	sub	sp, #12
 800eb8e:	9001      	str	r0, [sp, #4]
 800eb90:	4688      	mov	r8, r1
 800eb92:	0017      	movs	r7, r2
 800eb94:	469a      	mov	sl, r3
 800eb96:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800eb98:	9d0e      	ldr	r5, [sp, #56]	; 0x38
	configASSERT( pxTaskCode );
 800eb9a:	2800      	cmp	r0, #0
 800eb9c:	d003      	beq.n	800eba6 <xTaskGenericCreate+0x26>
	configASSERT( ( ( uxPriority & ( UBaseType_t ) ( ~portPRIVILEGE_BIT ) ) < ( UBaseType_t ) configMAX_PRIORITIES ) );
 800eb9e:	2e06      	cmp	r6, #6
 800eba0:	d903      	bls.n	800ebaa <xTaskGenericCreate+0x2a>
 800eba2:	b672      	cpsid	i
 800eba4:	e7fe      	b.n	800eba4 <xTaskGenericCreate+0x24>
	configASSERT( pxTaskCode );
 800eba6:	b672      	cpsid	i
 800eba8:	e7fe      	b.n	800eba8 <xTaskGenericCreate+0x28>
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ebaa:	2d00      	cmp	r5, #0
 800ebac:	d05b      	beq.n	800ec66 <xTaskGenericCreate+0xe6>
			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 800ebae:	2060      	movs	r0, #96	; 0x60
 800ebb0:	f001 f958 	bl	800fe64 <pvPortMalloc>
 800ebb4:	1e04      	subs	r4, r0, #0
			if( pxNewTCB != NULL )
 800ebb6:	d064      	beq.n	800ec82 <xTaskGenericCreate+0x102>
				pxNewTCB->pxStack = pxStack;
 800ebb8:	6305      	str	r5, [r0, #48]	; 0x30
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
 800ebba:	00ba      	lsls	r2, r7, #2
 800ebbc:	21a5      	movs	r1, #165	; 0xa5
 800ebbe:	0028      	movs	r0, r5
 800ebc0:	f007 fcc1 	bl	8016546 <memset>
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
 800ebc4:	4b5e      	ldr	r3, [pc, #376]	; (800ed40 <xTaskGenericCreate+0x1c0>)
 800ebc6:	18fd      	adds	r5, r7, r3
 800ebc8:	00ad      	lsls	r5, r5, #2
 800ebca:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800ebcc:	469c      	mov	ip, r3
 800ebce:	4465      	add	r5, ip
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800ebd0:	2307      	movs	r3, #7
 800ebd2:	439d      	bics	r5, r3
 800ebd4:	46a9      	mov	r9, r5
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ebd6:	2300      	movs	r3, #0
		pxTCB->pcTaskName[ x ] = pcName[ x ];
 800ebd8:	0021      	movs	r1, r4
 800ebda:	3134      	adds	r1, #52	; 0x34
 800ebdc:	4642      	mov	r2, r8
 800ebde:	5cd2      	ldrb	r2, [r2, r3]
 800ebe0:	54ca      	strb	r2, [r1, r3]
		if( pcName[ x ] == 0x00 )
 800ebe2:	2a00      	cmp	r2, #0
 800ebe4:	d002      	beq.n	800ebec <xTaskGenericCreate+0x6c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ebe6:	3301      	adds	r3, #1
 800ebe8:	2b0d      	cmp	r3, #13
 800ebea:	d1f7      	bne.n	800ebdc <xTaskGenericCreate+0x5c>
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ebec:	2340      	movs	r3, #64	; 0x40
 800ebee:	2200      	movs	r2, #0
 800ebf0:	54e2      	strb	r2, [r4, r3]
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800ebf2:	0035      	movs	r5, r6
 800ebf4:	2e06      	cmp	r6, #6
 800ebf6:	d900      	bls.n	800ebfa <xTaskGenericCreate+0x7a>
 800ebf8:	2506      	movs	r5, #6
	pxTCB->uxPriority = uxPriority;
 800ebfa:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxTCB->uxBasePriority = uxPriority;
 800ebfc:	64e5      	str	r5, [r4, #76]	; 0x4c
		pxTCB->uxMutexesHeld = 0;
 800ebfe:	2700      	movs	r7, #0
 800ec00:	6527      	str	r7, [r4, #80]	; 0x50
	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
 800ec02:	1d23      	adds	r3, r4, #4
 800ec04:	469b      	mov	fp, r3
 800ec06:	0018      	movs	r0, r3
 800ec08:	f7ff fb9b 	bl	800e342 <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
 800ec0c:	0020      	movs	r0, r4
 800ec0e:	3018      	adds	r0, #24
 800ec10:	f7ff fb97 	bl	800e342 <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
 800ec14:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ec16:	2307      	movs	r3, #7
 800ec18:	1b5b      	subs	r3, r3, r5
 800ec1a:	61a3      	str	r3, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
 800ec1c:	6264      	str	r4, [r4, #36]	; 0x24
		pxTCB->ulRunTimeCounter = 0UL;
 800ec1e:	6567      	str	r7, [r4, #84]	; 0x54
		pxTCB->ulNotifiedValue = 0;
 800ec20:	65a7      	str	r7, [r4, #88]	; 0x58
		pxTCB->eNotifyState = eNotWaitingNotification;
 800ec22:	235c      	movs	r3, #92	; 0x5c
 800ec24:	54e7      	strb	r7, [r4, r3]
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ec26:	4652      	mov	r2, sl
 800ec28:	9901      	ldr	r1, [sp, #4]
 800ec2a:	4648      	mov	r0, r9
 800ec2c:	f001 f850 	bl	800fcd0 <pxPortInitialiseStack>
 800ec30:	6020      	str	r0, [r4, #0]
		if( ( void * ) pxCreatedTask != NULL )
 800ec32:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ec34:	2b00      	cmp	r3, #0
 800ec36:	d000      	beq.n	800ec3a <xTaskGenericCreate+0xba>
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ec38:	601c      	str	r4, [r3, #0]
		taskENTER_CRITICAL();
 800ec3a:	f001 f891 	bl	800fd60 <vPortEnterCritical>
			uxCurrentNumberOfTasks++;
 800ec3e:	4a41      	ldr	r2, [pc, #260]	; (800ed44 <xTaskGenericCreate+0x1c4>)
 800ec40:	6813      	ldr	r3, [r2, #0]
 800ec42:	3301      	adds	r3, #1
 800ec44:	6013      	str	r3, [r2, #0]
			if( pxCurrentTCB == NULL )
 800ec46:	4b40      	ldr	r3, [pc, #256]	; (800ed48 <xTaskGenericCreate+0x1c8>)
 800ec48:	681b      	ldr	r3, [r3, #0]
 800ec4a:	2b00      	cmp	r3, #0
 800ec4c:	d01d      	beq.n	800ec8a <xTaskGenericCreate+0x10a>
				if( xSchedulerRunning == pdFALSE )
 800ec4e:	4b3f      	ldr	r3, [pc, #252]	; (800ed4c <xTaskGenericCreate+0x1cc>)
 800ec50:	681b      	ldr	r3, [r3, #0]
 800ec52:	2b00      	cmp	r3, #0
 800ec54:	d11e      	bne.n	800ec94 <xTaskGenericCreate+0x114>
					if( pxCurrentTCB->uxPriority <= uxPriority )
 800ec56:	4b3c      	ldr	r3, [pc, #240]	; (800ed48 <xTaskGenericCreate+0x1c8>)
 800ec58:	681b      	ldr	r3, [r3, #0]
 800ec5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec5c:	42b3      	cmp	r3, r6
 800ec5e:	d819      	bhi.n	800ec94 <xTaskGenericCreate+0x114>
						pxCurrentTCB = pxNewTCB;
 800ec60:	4b39      	ldr	r3, [pc, #228]	; (800ed48 <xTaskGenericCreate+0x1c8>)
 800ec62:	601c      	str	r4, [r3, #0]
 800ec64:	e016      	b.n	800ec94 <xTaskGenericCreate+0x114>
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ec66:	0090      	lsls	r0, r2, #2
 800ec68:	f001 f8fc 	bl	800fe64 <pvPortMalloc>
 800ec6c:	1e05      	subs	r5, r0, #0
		if( pxStack != NULL )
 800ec6e:	d19e      	bne.n	800ebae <xTaskGenericCreate+0x2e>
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800ec70:	2001      	movs	r0, #1
 800ec72:	4240      	negs	r0, r0
}
 800ec74:	b003      	add	sp, #12
 800ec76:	bcf0      	pop	{r4, r5, r6, r7}
 800ec78:	46bb      	mov	fp, r7
 800ec7a:	46b2      	mov	sl, r6
 800ec7c:	46a9      	mov	r9, r5
 800ec7e:	46a0      	mov	r8, r4
 800ec80:	bdf0      	pop	{r4, r5, r6, r7, pc}
				vPortFree( pxStack );
 800ec82:	0028      	movs	r0, r5
 800ec84:	f001 f980 	bl	800ff88 <vPortFree>
	if( pxNewTCB != NULL )
 800ec88:	e7f2      	b.n	800ec70 <xTaskGenericCreate+0xf0>
				pxCurrentTCB =  pxNewTCB;
 800ec8a:	4b2f      	ldr	r3, [pc, #188]	; (800ed48 <xTaskGenericCreate+0x1c8>)
 800ec8c:	601c      	str	r4, [r3, #0]
				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ec8e:	6813      	ldr	r3, [r2, #0]
 800ec90:	2b01      	cmp	r3, #1
 800ec92:	d023      	beq.n	800ecdc <xTaskGenericCreate+0x15c>
			uxTaskNumber++;
 800ec94:	4a2e      	ldr	r2, [pc, #184]	; (800ed50 <xTaskGenericCreate+0x1d0>)
 800ec96:	6813      	ldr	r3, [r2, #0]
 800ec98:	3301      	adds	r3, #1
 800ec9a:	6013      	str	r3, [r2, #0]
				pxNewTCB->uxTCBNumber = uxTaskNumber;
 800ec9c:	6463      	str	r3, [r4, #68]	; 0x44
			prvAddTaskToReadyList( pxNewTCB );
 800ec9e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800eca0:	4a2c      	ldr	r2, [pc, #176]	; (800ed54 <xTaskGenericCreate+0x1d4>)
 800eca2:	6812      	ldr	r2, [r2, #0]
 800eca4:	4293      	cmp	r3, r2
 800eca6:	d901      	bls.n	800ecac <xTaskGenericCreate+0x12c>
 800eca8:	4a2a      	ldr	r2, [pc, #168]	; (800ed54 <xTaskGenericCreate+0x1d4>)
 800ecaa:	6013      	str	r3, [r2, #0]
 800ecac:	0098      	lsls	r0, r3, #2
 800ecae:	18c0      	adds	r0, r0, r3
 800ecb0:	0080      	lsls	r0, r0, #2
 800ecb2:	4b29      	ldr	r3, [pc, #164]	; (800ed58 <xTaskGenericCreate+0x1d8>)
 800ecb4:	18c0      	adds	r0, r0, r3
 800ecb6:	4659      	mov	r1, fp
 800ecb8:	f7ff fb46 	bl	800e348 <vListInsertEnd>
		taskEXIT_CRITICAL();
 800ecbc:	f001 f85c 	bl	800fd78 <vPortExitCritical>
		if( xSchedulerRunning != pdFALSE )
 800ecc0:	4b22      	ldr	r3, [pc, #136]	; (800ed4c <xTaskGenericCreate+0x1cc>)
 800ecc2:	681b      	ldr	r3, [r3, #0]
			xReturn = pdPASS;
 800ecc4:	2001      	movs	r0, #1
		if( xSchedulerRunning != pdFALSE )
 800ecc6:	2b00      	cmp	r3, #0
 800ecc8:	d0d4      	beq.n	800ec74 <xTaskGenericCreate+0xf4>
			if( pxCurrentTCB->uxPriority < uxPriority )
 800ecca:	4b1f      	ldr	r3, [pc, #124]	; (800ed48 <xTaskGenericCreate+0x1c8>)
 800eccc:	681b      	ldr	r3, [r3, #0]
 800ecce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ecd0:	42b3      	cmp	r3, r6
 800ecd2:	d2cf      	bcs.n	800ec74 <xTaskGenericCreate+0xf4>
				taskYIELD_IF_USING_PREEMPTION();
 800ecd4:	f001 f838 	bl	800fd48 <vPortYield>
			xReturn = pdPASS;
 800ecd8:	2001      	movs	r0, #1
 800ecda:	e7cb      	b.n	800ec74 <xTaskGenericCreate+0xf4>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800ecdc:	4d1e      	ldr	r5, [pc, #120]	; (800ed58 <xTaskGenericCreate+0x1d8>)
 800ecde:	0028      	movs	r0, r5
 800ece0:	f7ff fb24 	bl	800e32c <vListInitialise>
 800ece4:	0028      	movs	r0, r5
 800ece6:	3014      	adds	r0, #20
 800ece8:	f7ff fb20 	bl	800e32c <vListInitialise>
 800ecec:	0028      	movs	r0, r5
 800ecee:	3028      	adds	r0, #40	; 0x28
 800ecf0:	f7ff fb1c 	bl	800e32c <vListInitialise>
 800ecf4:	0028      	movs	r0, r5
 800ecf6:	303c      	adds	r0, #60	; 0x3c
 800ecf8:	f7ff fb18 	bl	800e32c <vListInitialise>
 800ecfc:	0028      	movs	r0, r5
 800ecfe:	3050      	adds	r0, #80	; 0x50
 800ed00:	f7ff fb14 	bl	800e32c <vListInitialise>
 800ed04:	0028      	movs	r0, r5
 800ed06:	3064      	adds	r0, #100	; 0x64
 800ed08:	f7ff fb10 	bl	800e32c <vListInitialise>
 800ed0c:	0028      	movs	r0, r5
 800ed0e:	3078      	adds	r0, #120	; 0x78
 800ed10:	f7ff fb0c 	bl	800e32c <vListInitialise>
	vListInitialise( &xDelayedTaskList1 );
 800ed14:	4f11      	ldr	r7, [pc, #68]	; (800ed5c <xTaskGenericCreate+0x1dc>)
 800ed16:	0038      	movs	r0, r7
 800ed18:	f7ff fb08 	bl	800e32c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800ed1c:	4d10      	ldr	r5, [pc, #64]	; (800ed60 <xTaskGenericCreate+0x1e0>)
 800ed1e:	0028      	movs	r0, r5
 800ed20:	f7ff fb04 	bl	800e32c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ed24:	480f      	ldr	r0, [pc, #60]	; (800ed64 <xTaskGenericCreate+0x1e4>)
 800ed26:	f7ff fb01 	bl	800e32c <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 800ed2a:	480f      	ldr	r0, [pc, #60]	; (800ed68 <xTaskGenericCreate+0x1e8>)
 800ed2c:	f7ff fafe 	bl	800e32c <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 800ed30:	480e      	ldr	r0, [pc, #56]	; (800ed6c <xTaskGenericCreate+0x1ec>)
 800ed32:	f7ff fafb 	bl	800e32c <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 800ed36:	4b0e      	ldr	r3, [pc, #56]	; (800ed70 <xTaskGenericCreate+0x1f0>)
 800ed38:	601f      	str	r7, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ed3a:	4b0e      	ldr	r3, [pc, #56]	; (800ed74 <xTaskGenericCreate+0x1f4>)
 800ed3c:	601d      	str	r5, [r3, #0]
}
 800ed3e:	e7a9      	b.n	800ec94 <xTaskGenericCreate+0x114>
 800ed40:	3fffffff 	.word	0x3fffffff
 800ed44:	200017c8 	.word	0x200017c8
 800ed48:	2000172c 	.word	0x2000172c
 800ed4c:	20001820 	.word	0x20001820
 800ed50:	200017d4 	.word	0x200017d4
 800ed54:	200017dc 	.word	0x200017dc
 800ed58:	20001738 	.word	0x20001738
 800ed5c:	200017e0 	.word	0x200017e0
 800ed60:	200017f4 	.word	0x200017f4
 800ed64:	2000180c 	.word	0x2000180c
 800ed68:	20001838 	.word	0x20001838
 800ed6c:	20001824 	.word	0x20001824
 800ed70:	20001730 	.word	0x20001730
 800ed74:	20001734 	.word	0x20001734

0800ed78 <uxTaskPriorityGet>:
	{
 800ed78:	b510      	push	{r4, lr}
 800ed7a:	0004      	movs	r4, r0
		taskENTER_CRITICAL();
 800ed7c:	f000 fff0 	bl	800fd60 <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTask );
 800ed80:	2c00      	cmp	r4, #0
 800ed82:	d004      	beq.n	800ed8e <uxTaskPriorityGet+0x16>
			uxReturn = pxTCB->uxPriority;
 800ed84:	6ae4      	ldr	r4, [r4, #44]	; 0x2c
		taskEXIT_CRITICAL();
 800ed86:	f000 fff7 	bl	800fd78 <vPortExitCritical>
	}
 800ed8a:	0020      	movs	r0, r4
 800ed8c:	bd10      	pop	{r4, pc}
			pxTCB = prvGetTCBFromHandle( xTask );
 800ed8e:	4b01      	ldr	r3, [pc, #4]	; (800ed94 <uxTaskPriorityGet+0x1c>)
 800ed90:	681c      	ldr	r4, [r3, #0]
 800ed92:	e7f7      	b.n	800ed84 <uxTaskPriorityGet+0xc>
 800ed94:	2000172c 	.word	0x2000172c

0800ed98 <vTaskPrioritySet>:
	{
 800ed98:	b570      	push	{r4, r5, r6, lr}
 800ed9a:	0004      	movs	r4, r0
 800ed9c:	000d      	movs	r5, r1
		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 800ed9e:	2906      	cmp	r1, #6
 800eda0:	d901      	bls.n	800eda6 <vTaskPrioritySet+0xe>
 800eda2:	b672      	cpsid	i
 800eda4:	e7fe      	b.n	800eda4 <vTaskPrioritySet+0xc>
		taskENTER_CRITICAL();
 800eda6:	f000 ffdb 	bl	800fd60 <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTask );
 800edaa:	2c00      	cmp	r4, #0
 800edac:	d00e      	beq.n	800edcc <vTaskPrioritySet+0x34>
				uxCurrentBasePriority = pxTCB->uxBasePriority;
 800edae:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
			if( uxCurrentBasePriority != uxNewPriority )
 800edb0:	428d      	cmp	r5, r1
 800edb2:	d027      	beq.n	800ee04 <vTaskPrioritySet+0x6c>
				if( uxNewPriority > uxCurrentBasePriority )
 800edb4:	d90d      	bls.n	800edd2 <vTaskPrioritySet+0x3a>
					if( pxTCB != pxCurrentTCB )
 800edb6:	4b22      	ldr	r3, [pc, #136]	; (800ee40 <vTaskPrioritySet+0xa8>)
 800edb8:	681b      	ldr	r3, [r3, #0]
 800edba:	42a3      	cmp	r3, r4
 800edbc:	d025      	beq.n	800ee0a <vTaskPrioritySet+0x72>
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 800edbe:	4b20      	ldr	r3, [pc, #128]	; (800ee40 <vTaskPrioritySet+0xa8>)
 800edc0:	681b      	ldr	r3, [r3, #0]
 800edc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800edc4:	2600      	movs	r6, #0
 800edc6:	429d      	cmp	r5, r3
 800edc8:	4176      	adcs	r6, r6
 800edca:	e007      	b.n	800eddc <vTaskPrioritySet+0x44>
			pxTCB = prvGetTCBFromHandle( xTask );
 800edcc:	4b1c      	ldr	r3, [pc, #112]	; (800ee40 <vTaskPrioritySet+0xa8>)
 800edce:	681c      	ldr	r4, [r3, #0]
 800edd0:	e7ed      	b.n	800edae <vTaskPrioritySet+0x16>
				else if( pxTCB == pxCurrentTCB )
 800edd2:	4b1b      	ldr	r3, [pc, #108]	; (800ee40 <vTaskPrioritySet+0xa8>)
 800edd4:	681e      	ldr	r6, [r3, #0]
 800edd6:	1b36      	subs	r6, r6, r4
							xYieldRequired = pdTRUE;
 800edd8:	4273      	negs	r3, r6
 800edda:	415e      	adcs	r6, r3
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800eddc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 800edde:	4291      	cmp	r1, r2
 800ede0:	d015      	beq.n	800ee0e <vTaskPrioritySet+0x76>
					pxTCB->uxBasePriority = uxNewPriority;
 800ede2:	64e5      	str	r5, [r4, #76]	; 0x4c
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ede4:	69a3      	ldr	r3, [r4, #24]
 800ede6:	2b00      	cmp	r3, #0
 800ede8:	db02      	blt.n	800edf0 <vTaskPrioritySet+0x58>
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800edea:	2307      	movs	r3, #7
 800edec:	1b5d      	subs	r5, r3, r5
 800edee:	61a5      	str	r5, [r4, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
 800edf0:	0093      	lsls	r3, r2, #2
 800edf2:	189b      	adds	r3, r3, r2
 800edf4:	009b      	lsls	r3, r3, #2
 800edf6:	4a13      	ldr	r2, [pc, #76]	; (800ee44 <vTaskPrioritySet+0xac>)
 800edf8:	189b      	adds	r3, r3, r2
 800edfa:	6962      	ldr	r2, [r4, #20]
 800edfc:	429a      	cmp	r2, r3
 800edfe:	d008      	beq.n	800ee12 <vTaskPrioritySet+0x7a>
				if( xYieldRequired == pdTRUE )
 800ee00:	2e01      	cmp	r6, #1
 800ee02:	d01a      	beq.n	800ee3a <vTaskPrioritySet+0xa2>
		taskEXIT_CRITICAL();
 800ee04:	f000 ffb8 	bl	800fd78 <vPortExitCritical>
	}
 800ee08:	bd70      	pop	{r4, r5, r6, pc}
	BaseType_t xYieldRequired = pdFALSE;
 800ee0a:	2600      	movs	r6, #0
 800ee0c:	e7e6      	b.n	800eddc <vTaskPrioritySet+0x44>
						pxTCB->uxPriority = uxNewPriority;
 800ee0e:	62e5      	str	r5, [r4, #44]	; 0x2c
 800ee10:	e7e7      	b.n	800ede2 <vTaskPrioritySet+0x4a>
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800ee12:	1d25      	adds	r5, r4, #4
 800ee14:	0028      	movs	r0, r5
 800ee16:	f7ff fab9 	bl	800e38c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ee1a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800ee1c:	4a0a      	ldr	r2, [pc, #40]	; (800ee48 <vTaskPrioritySet+0xb0>)
 800ee1e:	6812      	ldr	r2, [r2, #0]
 800ee20:	4293      	cmp	r3, r2
 800ee22:	d901      	bls.n	800ee28 <vTaskPrioritySet+0x90>
 800ee24:	4a08      	ldr	r2, [pc, #32]	; (800ee48 <vTaskPrioritySet+0xb0>)
 800ee26:	6013      	str	r3, [r2, #0]
 800ee28:	0098      	lsls	r0, r3, #2
 800ee2a:	18c0      	adds	r0, r0, r3
 800ee2c:	0080      	lsls	r0, r0, #2
 800ee2e:	4b05      	ldr	r3, [pc, #20]	; (800ee44 <vTaskPrioritySet+0xac>)
 800ee30:	18c0      	adds	r0, r0, r3
 800ee32:	0029      	movs	r1, r5
 800ee34:	f7ff fa88 	bl	800e348 <vListInsertEnd>
 800ee38:	e7e2      	b.n	800ee00 <vTaskPrioritySet+0x68>
					taskYIELD_IF_USING_PREEMPTION();
 800ee3a:	f000 ff85 	bl	800fd48 <vPortYield>
 800ee3e:	e7e1      	b.n	800ee04 <vTaskPrioritySet+0x6c>
 800ee40:	2000172c 	.word	0x2000172c
 800ee44:	20001738 	.word	0x20001738
 800ee48:	200017dc 	.word	0x200017dc

0800ee4c <vTaskStartScheduler>:
{
 800ee4c:	b500      	push	{lr}
 800ee4e:	b085      	sub	sp, #20
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
 800ee50:	2300      	movs	r3, #0
 800ee52:	9303      	str	r3, [sp, #12]
 800ee54:	9302      	str	r3, [sp, #8]
 800ee56:	9301      	str	r3, [sp, #4]
 800ee58:	9300      	str	r3, [sp, #0]
 800ee5a:	22a0      	movs	r2, #160	; 0xa0
 800ee5c:	490d      	ldr	r1, [pc, #52]	; (800ee94 <vTaskStartScheduler+0x48>)
 800ee5e:	480e      	ldr	r0, [pc, #56]	; (800ee98 <vTaskStartScheduler+0x4c>)
 800ee60:	f7ff fe8e 	bl	800eb80 <xTaskGenericCreate>
		if( xReturn == pdPASS )
 800ee64:	2801      	cmp	r0, #1
 800ee66:	d003      	beq.n	800ee70 <vTaskStartScheduler+0x24>
		configASSERT( xReturn );
 800ee68:	2800      	cmp	r0, #0
 800ee6a:	d110      	bne.n	800ee8e <vTaskStartScheduler+0x42>
 800ee6c:	b672      	cpsid	i
 800ee6e:	e7fe      	b.n	800ee6e <vTaskStartScheduler+0x22>
			xReturn = xTimerCreateTimerTask();
 800ee70:	f000 fd8c 	bl	800f98c <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 800ee74:	2801      	cmp	r0, #1
 800ee76:	d1f7      	bne.n	800ee68 <vTaskStartScheduler+0x1c>
		portDISABLE_INTERRUPTS();
 800ee78:	b672      	cpsid	i
		xSchedulerRunning = pdTRUE;
 800ee7a:	4b08      	ldr	r3, [pc, #32]	; (800ee9c <vTaskStartScheduler+0x50>)
 800ee7c:	2201      	movs	r2, #1
 800ee7e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800ee80:	4b07      	ldr	r3, [pc, #28]	; (800eea0 <vTaskStartScheduler+0x54>)
 800ee82:	2200      	movs	r2, #0
 800ee84:	601a      	str	r2, [r3, #0]
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800ee86:	f7f8 ff47 	bl	8007d18 <vMainConfigureTimerForRunTimeStats>
		if( xPortStartScheduler() != pdFALSE )
 800ee8a:	f000 ff33 	bl	800fcf4 <xPortStartScheduler>
}
 800ee8e:	b005      	add	sp, #20
 800ee90:	bd00      	pop	{pc}
 800ee92:	46c0      	nop			; (mov r8, r8)
 800ee94:	0801cb98 	.word	0x0801cb98
 800ee98:	0800f125 	.word	0x0800f125
 800ee9c:	20001820 	.word	0x20001820
 800eea0:	2000184c 	.word	0x2000184c

0800eea4 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 800eea4:	4a02      	ldr	r2, [pc, #8]	; (800eeb0 <vTaskSuspendAll+0xc>)
 800eea6:	6813      	ldr	r3, [r2, #0]
 800eea8:	3301      	adds	r3, #1
 800eeaa:	6013      	str	r3, [r2, #0]
}
 800eeac:	4770      	bx	lr
 800eeae:	46c0      	nop			; (mov r8, r8)
 800eeb0:	200017d0 	.word	0x200017d0

0800eeb4 <xTaskGetTickCount>:
		xTicks = xTickCount;
 800eeb4:	4b01      	ldr	r3, [pc, #4]	; (800eebc <xTaskGetTickCount+0x8>)
 800eeb6:	6818      	ldr	r0, [r3, #0]
}
 800eeb8:	4770      	bx	lr
 800eeba:	46c0      	nop			; (mov r8, r8)
 800eebc:	2000184c 	.word	0x2000184c

0800eec0 <xTaskGetTickCountFromISR>:
		xReturn = xTickCount;
 800eec0:	4b01      	ldr	r3, [pc, #4]	; (800eec8 <xTaskGetTickCountFromISR+0x8>)
 800eec2:	6818      	ldr	r0, [r3, #0]
}
 800eec4:	4770      	bx	lr
 800eec6:	46c0      	nop			; (mov r8, r8)
 800eec8:	2000184c 	.word	0x2000184c

0800eecc <xTaskIncrementTick>:
{
 800eecc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eece:	46ce      	mov	lr, r9
 800eed0:	b500      	push	{lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800eed2:	4b3d      	ldr	r3, [pc, #244]	; (800efc8 <xTaskIncrementTick+0xfc>)
 800eed4:	681b      	ldr	r3, [r3, #0]
 800eed6:	2b00      	cmp	r3, #0
 800eed8:	d167      	bne.n	800efaa <xTaskIncrementTick+0xde>
		++xTickCount;
 800eeda:	4b3c      	ldr	r3, [pc, #240]	; (800efcc <xTaskIncrementTick+0x100>)
 800eedc:	681a      	ldr	r2, [r3, #0]
 800eede:	3201      	adds	r2, #1
 800eee0:	601a      	str	r2, [r3, #0]
			const TickType_t xConstTickCount = xTickCount;
 800eee2:	681e      	ldr	r6, [r3, #0]
			if( xConstTickCount == ( TickType_t ) 0U )
 800eee4:	2e00      	cmp	r6, #0
 800eee6:	d112      	bne.n	800ef0e <xTaskIncrementTick+0x42>
				taskSWITCH_DELAYED_LISTS();
 800eee8:	4b39      	ldr	r3, [pc, #228]	; (800efd0 <xTaskIncrementTick+0x104>)
 800eeea:	681b      	ldr	r3, [r3, #0]
 800eeec:	681b      	ldr	r3, [r3, #0]
 800eeee:	2b00      	cmp	r3, #0
 800eef0:	d001      	beq.n	800eef6 <xTaskIncrementTick+0x2a>
 800eef2:	b672      	cpsid	i
 800eef4:	e7fe      	b.n	800eef4 <xTaskIncrementTick+0x28>
 800eef6:	4a36      	ldr	r2, [pc, #216]	; (800efd0 <xTaskIncrementTick+0x104>)
 800eef8:	6811      	ldr	r1, [r2, #0]
 800eefa:	4b36      	ldr	r3, [pc, #216]	; (800efd4 <xTaskIncrementTick+0x108>)
 800eefc:	6818      	ldr	r0, [r3, #0]
 800eefe:	6010      	str	r0, [r2, #0]
 800ef00:	6019      	str	r1, [r3, #0]
 800ef02:	4a35      	ldr	r2, [pc, #212]	; (800efd8 <xTaskIncrementTick+0x10c>)
 800ef04:	6813      	ldr	r3, [r2, #0]
 800ef06:	3301      	adds	r3, #1
 800ef08:	6013      	str	r3, [r2, #0]
 800ef0a:	f7ff fde3 	bl	800ead4 <prvResetNextTaskUnblockTime>
			if( xConstTickCount >= xNextTaskUnblockTime )
 800ef0e:	4b33      	ldr	r3, [pc, #204]	; (800efdc <xTaskIncrementTick+0x110>)
 800ef10:	681b      	ldr	r3, [r3, #0]
BaseType_t xSwitchRequired = pdFALSE;
 800ef12:	2400      	movs	r4, #0
			if( xConstTickCount >= xNextTaskUnblockTime )
 800ef14:	42b3      	cmp	r3, r6
 800ef16:	d80b      	bhi.n	800ef30 <xTaskIncrementTick+0x64>
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ef18:	4b2d      	ldr	r3, [pc, #180]	; (800efd0 <xTaskIncrementTick+0x104>)
 800ef1a:	681b      	ldr	r3, [r3, #0]
 800ef1c:	681b      	ldr	r3, [r3, #0]
 800ef1e:	2b00      	cmp	r3, #0
 800ef20:	d001      	beq.n	800ef26 <xTaskIncrementTick+0x5a>
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800ef22:	4d2b      	ldr	r5, [pc, #172]	; (800efd0 <xTaskIncrementTick+0x104>)
 800ef24:	e027      	b.n	800ef76 <xTaskIncrementTick+0xaa>
BaseType_t xSwitchRequired = pdFALSE;
 800ef26:	2400      	movs	r4, #0
						xNextTaskUnblockTime = portMAX_DELAY;
 800ef28:	4b2c      	ldr	r3, [pc, #176]	; (800efdc <xTaskIncrementTick+0x110>)
 800ef2a:	2201      	movs	r2, #1
 800ef2c:	4252      	negs	r2, r2
 800ef2e:	601a      	str	r2, [r3, #0]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800ef30:	4b2b      	ldr	r3, [pc, #172]	; (800efe0 <xTaskIncrementTick+0x114>)
 800ef32:	681b      	ldr	r3, [r3, #0]
 800ef34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ef36:	0093      	lsls	r3, r2, #2
 800ef38:	189b      	adds	r3, r3, r2
 800ef3a:	009b      	lsls	r3, r3, #2
 800ef3c:	4a29      	ldr	r2, [pc, #164]	; (800efe4 <xTaskIncrementTick+0x118>)
 800ef3e:	589b      	ldr	r3, [r3, r2]
 800ef40:	2b01      	cmp	r3, #1
 800ef42:	d937      	bls.n	800efb4 <xTaskIncrementTick+0xe8>
				xSwitchRequired = pdTRUE;
 800ef44:	2401      	movs	r4, #1
 800ef46:	e035      	b.n	800efb4 <xTaskIncrementTick+0xe8>
							xNextTaskUnblockTime = xItemValue;
 800ef48:	4a24      	ldr	r2, [pc, #144]	; (800efdc <xTaskIncrementTick+0x110>)
 800ef4a:	6013      	str	r3, [r2, #0]
							break;
 800ef4c:	e7f0      	b.n	800ef30 <xTaskIncrementTick+0x64>
						prvAddTaskToReadyList( pxTCB );
 800ef4e:	0098      	lsls	r0, r3, #2
 800ef50:	18c0      	adds	r0, r0, r3
 800ef52:	0080      	lsls	r0, r0, #2
 800ef54:	4b23      	ldr	r3, [pc, #140]	; (800efe4 <xTaskIncrementTick+0x118>)
 800ef56:	18c0      	adds	r0, r0, r3
 800ef58:	4649      	mov	r1, r9
 800ef5a:	f7ff f9f5 	bl	800e348 <vListInsertEnd>
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ef5e:	4b20      	ldr	r3, [pc, #128]	; (800efe0 <xTaskIncrementTick+0x114>)
 800ef60:	681b      	ldr	r3, [r3, #0]
 800ef62:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ef64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ef66:	429a      	cmp	r2, r3
 800ef68:	d300      	bcc.n	800ef6c <xTaskIncrementTick+0xa0>
								xSwitchRequired = pdTRUE;
 800ef6a:	2401      	movs	r4, #1
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ef6c:	4b18      	ldr	r3, [pc, #96]	; (800efd0 <xTaskIncrementTick+0x104>)
 800ef6e:	681b      	ldr	r3, [r3, #0]
 800ef70:	681b      	ldr	r3, [r3, #0]
 800ef72:	2b00      	cmp	r3, #0
 800ef74:	d0d8      	beq.n	800ef28 <xTaskIncrementTick+0x5c>
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800ef76:	682b      	ldr	r3, [r5, #0]
 800ef78:	68db      	ldr	r3, [r3, #12]
 800ef7a:	68df      	ldr	r7, [r3, #12]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
 800ef7c:	687b      	ldr	r3, [r7, #4]
						if( xConstTickCount < xItemValue )
 800ef7e:	429e      	cmp	r6, r3
 800ef80:	d3e2      	bcc.n	800ef48 <xTaskIncrementTick+0x7c>
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800ef82:	1d3b      	adds	r3, r7, #4
 800ef84:	4699      	mov	r9, r3
 800ef86:	0018      	movs	r0, r3
 800ef88:	f7ff fa00 	bl	800e38c <uxListRemove>
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ef8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef8e:	2b00      	cmp	r3, #0
 800ef90:	d003      	beq.n	800ef9a <xTaskIncrementTick+0xce>
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ef92:	0038      	movs	r0, r7
 800ef94:	3018      	adds	r0, #24
 800ef96:	f7ff f9f9 	bl	800e38c <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 800ef9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef9c:	4a12      	ldr	r2, [pc, #72]	; (800efe8 <xTaskIncrementTick+0x11c>)
 800ef9e:	6812      	ldr	r2, [r2, #0]
 800efa0:	4293      	cmp	r3, r2
 800efa2:	d9d4      	bls.n	800ef4e <xTaskIncrementTick+0x82>
 800efa4:	4a10      	ldr	r2, [pc, #64]	; (800efe8 <xTaskIncrementTick+0x11c>)
 800efa6:	6013      	str	r3, [r2, #0]
 800efa8:	e7d1      	b.n	800ef4e <xTaskIncrementTick+0x82>
		++uxPendedTicks;
 800efaa:	4a10      	ldr	r2, [pc, #64]	; (800efec <xTaskIncrementTick+0x120>)
 800efac:	6813      	ldr	r3, [r2, #0]
 800efae:	3301      	adds	r3, #1
 800efb0:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 800efb2:	2400      	movs	r4, #0
		if( xYieldPending != pdFALSE )
 800efb4:	4b0e      	ldr	r3, [pc, #56]	; (800eff0 <xTaskIncrementTick+0x124>)
 800efb6:	681b      	ldr	r3, [r3, #0]
 800efb8:	2b00      	cmp	r3, #0
 800efba:	d000      	beq.n	800efbe <xTaskIncrementTick+0xf2>
			xSwitchRequired = pdTRUE;
 800efbc:	2401      	movs	r4, #1
}
 800efbe:	0020      	movs	r0, r4
 800efc0:	bc80      	pop	{r7}
 800efc2:	46b9      	mov	r9, r7
 800efc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800efc6:	46c0      	nop			; (mov r8, r8)
 800efc8:	200017d0 	.word	0x200017d0
 800efcc:	2000184c 	.word	0x2000184c
 800efd0:	20001730 	.word	0x20001730
 800efd4:	20001734 	.word	0x20001734
 800efd8:	20001808 	.word	0x20001808
 800efdc:	200000a4 	.word	0x200000a4
 800efe0:	2000172c 	.word	0x2000172c
 800efe4:	20001738 	.word	0x20001738
 800efe8:	200017dc 	.word	0x200017dc
 800efec:	200017cc 	.word	0x200017cc
 800eff0:	20001850 	.word	0x20001850

0800eff4 <xTaskResumeAll>:
{
 800eff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( uxSchedulerSuspended );
 800eff6:	4b31      	ldr	r3, [pc, #196]	; (800f0bc <xTaskResumeAll+0xc8>)
 800eff8:	681b      	ldr	r3, [r3, #0]
 800effa:	2b00      	cmp	r3, #0
 800effc:	d101      	bne.n	800f002 <xTaskResumeAll+0xe>
 800effe:	b672      	cpsid	i
 800f000:	e7fe      	b.n	800f000 <xTaskResumeAll+0xc>
	taskENTER_CRITICAL();
 800f002:	f000 fead 	bl	800fd60 <vPortEnterCritical>
		--uxSchedulerSuspended;
 800f006:	4b2d      	ldr	r3, [pc, #180]	; (800f0bc <xTaskResumeAll+0xc8>)
 800f008:	681a      	ldr	r2, [r3, #0]
 800f00a:	3a01      	subs	r2, #1
 800f00c:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f00e:	681b      	ldr	r3, [r3, #0]
BaseType_t xAlreadyYielded = pdFALSE;
 800f010:	2400      	movs	r4, #0
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f012:	2b00      	cmp	r3, #0
 800f014:	d14b      	bne.n	800f0ae <xTaskResumeAll+0xba>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800f016:	4b2a      	ldr	r3, [pc, #168]	; (800f0c0 <xTaskResumeAll+0xcc>)
 800f018:	681b      	ldr	r3, [r3, #0]
BaseType_t xAlreadyYielded = pdFALSE;
 800f01a:	2400      	movs	r4, #0
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800f01c:	2b00      	cmp	r3, #0
 800f01e:	d046      	beq.n	800f0ae <xTaskResumeAll+0xba>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f020:	4d28      	ldr	r5, [pc, #160]	; (800f0c4 <xTaskResumeAll+0xd0>)
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800f022:	002c      	movs	r4, r5
 800f024:	e00d      	b.n	800f042 <xTaskResumeAll+0x4e>
					prvAddTaskToReadyList( pxTCB );
 800f026:	0098      	lsls	r0, r3, #2
 800f028:	18c0      	adds	r0, r0, r3
 800f02a:	0080      	lsls	r0, r0, #2
 800f02c:	4b26      	ldr	r3, [pc, #152]	; (800f0c8 <xTaskResumeAll+0xd4>)
 800f02e:	18c0      	adds	r0, r0, r3
 800f030:	0039      	movs	r1, r7
 800f032:	f7ff f989 	bl	800e348 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f036:	4b25      	ldr	r3, [pc, #148]	; (800f0cc <xTaskResumeAll+0xd8>)
 800f038:	681b      	ldr	r3, [r3, #0]
 800f03a:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 800f03c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f03e:	429a      	cmp	r2, r3
 800f040:	d214      	bcs.n	800f06c <xTaskResumeAll+0x78>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f042:	682b      	ldr	r3, [r5, #0]
 800f044:	2b00      	cmp	r3, #0
 800f046:	d015      	beq.n	800f074 <xTaskResumeAll+0x80>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800f048:	68e3      	ldr	r3, [r4, #12]
 800f04a:	68de      	ldr	r6, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f04c:	0030      	movs	r0, r6
 800f04e:	3018      	adds	r0, #24
 800f050:	f7ff f99c 	bl	800e38c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800f054:	1d37      	adds	r7, r6, #4
 800f056:	0038      	movs	r0, r7
 800f058:	f7ff f998 	bl	800e38c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800f05c:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 800f05e:	4a1c      	ldr	r2, [pc, #112]	; (800f0d0 <xTaskResumeAll+0xdc>)
 800f060:	6812      	ldr	r2, [r2, #0]
 800f062:	4293      	cmp	r3, r2
 800f064:	d9df      	bls.n	800f026 <xTaskResumeAll+0x32>
 800f066:	4a1a      	ldr	r2, [pc, #104]	; (800f0d0 <xTaskResumeAll+0xdc>)
 800f068:	6013      	str	r3, [r2, #0]
 800f06a:	e7dc      	b.n	800f026 <xTaskResumeAll+0x32>
						xYieldPending = pdTRUE;
 800f06c:	4b19      	ldr	r3, [pc, #100]	; (800f0d4 <xTaskResumeAll+0xe0>)
 800f06e:	2201      	movs	r2, #1
 800f070:	601a      	str	r2, [r3, #0]
 800f072:	e7e6      	b.n	800f042 <xTaskResumeAll+0x4e>
				if( uxPendedTicks > ( UBaseType_t ) 0U )
 800f074:	4b18      	ldr	r3, [pc, #96]	; (800f0d8 <xTaskResumeAll+0xe4>)
 800f076:	681b      	ldr	r3, [r3, #0]
 800f078:	2b00      	cmp	r3, #0
 800f07a:	d013      	beq.n	800f0a4 <xTaskResumeAll+0xb0>
					while( uxPendedTicks > ( UBaseType_t ) 0U )
 800f07c:	4b16      	ldr	r3, [pc, #88]	; (800f0d8 <xTaskResumeAll+0xe4>)
 800f07e:	681b      	ldr	r3, [r3, #0]
 800f080:	2b00      	cmp	r3, #0
 800f082:	d00f      	beq.n	800f0a4 <xTaskResumeAll+0xb0>
							xYieldPending = pdTRUE;
 800f084:	4d13      	ldr	r5, [pc, #76]	; (800f0d4 <xTaskResumeAll+0xe0>)
 800f086:	2601      	movs	r6, #1
						--uxPendedTicks;
 800f088:	4c13      	ldr	r4, [pc, #76]	; (800f0d8 <xTaskResumeAll+0xe4>)
 800f08a:	e005      	b.n	800f098 <xTaskResumeAll+0xa4>
 800f08c:	6823      	ldr	r3, [r4, #0]
 800f08e:	3b01      	subs	r3, #1
 800f090:	6023      	str	r3, [r4, #0]
					while( uxPendedTicks > ( UBaseType_t ) 0U )
 800f092:	6823      	ldr	r3, [r4, #0]
 800f094:	2b00      	cmp	r3, #0
 800f096:	d005      	beq.n	800f0a4 <xTaskResumeAll+0xb0>
						if( xTaskIncrementTick() != pdFALSE )
 800f098:	f7ff ff18 	bl	800eecc <xTaskIncrementTick>
 800f09c:	2800      	cmp	r0, #0
 800f09e:	d0f5      	beq.n	800f08c <xTaskResumeAll+0x98>
							xYieldPending = pdTRUE;
 800f0a0:	602e      	str	r6, [r5, #0]
 800f0a2:	e7f3      	b.n	800f08c <xTaskResumeAll+0x98>
				if( xYieldPending == pdTRUE )
 800f0a4:	4b0b      	ldr	r3, [pc, #44]	; (800f0d4 <xTaskResumeAll+0xe0>)
 800f0a6:	681c      	ldr	r4, [r3, #0]
 800f0a8:	2c01      	cmp	r4, #1
 800f0aa:	d004      	beq.n	800f0b6 <xTaskResumeAll+0xc2>
BaseType_t xAlreadyYielded = pdFALSE;
 800f0ac:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800f0ae:	f000 fe63 	bl	800fd78 <vPortExitCritical>
}
 800f0b2:	0020      	movs	r0, r4
 800f0b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					taskYIELD_IF_USING_PREEMPTION();
 800f0b6:	f000 fe47 	bl	800fd48 <vPortYield>
 800f0ba:	e7f8      	b.n	800f0ae <xTaskResumeAll+0xba>
 800f0bc:	200017d0 	.word	0x200017d0
 800f0c0:	200017c8 	.word	0x200017c8
 800f0c4:	2000180c 	.word	0x2000180c
 800f0c8:	20001738 	.word	0x20001738
 800f0cc:	2000172c 	.word	0x2000172c
 800f0d0:	200017dc 	.word	0x200017dc
 800f0d4:	20001850 	.word	0x20001850
 800f0d8:	200017cc 	.word	0x200017cc

0800f0dc <vTaskDelay>:
	{
 800f0dc:	b510      	push	{r4, lr}
 800f0de:	1e04      	subs	r4, r0, #0
		if( xTicksToDelay > ( TickType_t ) 0U )
 800f0e0:	d016      	beq.n	800f110 <vTaskDelay+0x34>
			configASSERT( uxSchedulerSuspended == 0 );
 800f0e2:	4b0d      	ldr	r3, [pc, #52]	; (800f118 <vTaskDelay+0x3c>)
 800f0e4:	681b      	ldr	r3, [r3, #0]
 800f0e6:	2b00      	cmp	r3, #0
 800f0e8:	d001      	beq.n	800f0ee <vTaskDelay+0x12>
 800f0ea:	b672      	cpsid	i
 800f0ec:	e7fe      	b.n	800f0ec <vTaskDelay+0x10>
			vTaskSuspendAll();
 800f0ee:	f7ff fed9 	bl	800eea4 <vTaskSuspendAll>
				xTimeToWake = xTickCount + xTicksToDelay;
 800f0f2:	4b0a      	ldr	r3, [pc, #40]	; (800f11c <vTaskDelay+0x40>)
 800f0f4:	681b      	ldr	r3, [r3, #0]
 800f0f6:	191c      	adds	r4, r3, r4
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800f0f8:	4b09      	ldr	r3, [pc, #36]	; (800f120 <vTaskDelay+0x44>)
 800f0fa:	6818      	ldr	r0, [r3, #0]
 800f0fc:	3004      	adds	r0, #4
 800f0fe:	f7ff f945 	bl	800e38c <uxListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
 800f102:	0020      	movs	r0, r4
 800f104:	f7ff fcfc 	bl	800eb00 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 800f108:	f7ff ff74 	bl	800eff4 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 800f10c:	2800      	cmp	r0, #0
 800f10e:	d101      	bne.n	800f114 <vTaskDelay+0x38>
			portYIELD_WITHIN_API();
 800f110:	f000 fe1a 	bl	800fd48 <vPortYield>
	}
 800f114:	bd10      	pop	{r4, pc}
 800f116:	46c0      	nop			; (mov r8, r8)
 800f118:	200017d0 	.word	0x200017d0
 800f11c:	2000184c 	.word	0x2000184c
 800f120:	2000172c 	.word	0x2000172c

0800f124 <prvIdleTask>:
{
 800f124:	b570      	push	{r4, r5, r6, lr}
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
 800f126:	4e16      	ldr	r6, [pc, #88]	; (800f180 <prvIdleTask+0x5c>)
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 800f128:	4d16      	ldr	r5, [pc, #88]	; (800f184 <prvIdleTask+0x60>)
 800f12a:	e003      	b.n	800f134 <prvIdleTask+0x10>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800f12c:	4b16      	ldr	r3, [pc, #88]	; (800f188 <prvIdleTask+0x64>)
 800f12e:	681b      	ldr	r3, [r3, #0]
 800f130:	2b01      	cmp	r3, #1
 800f132:	d822      	bhi.n	800f17a <prvIdleTask+0x56>
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
 800f134:	6833      	ldr	r3, [r6, #0]
 800f136:	2b00      	cmp	r3, #0
 800f138:	d0f8      	beq.n	800f12c <prvIdleTask+0x8>
			vTaskSuspendAll();
 800f13a:	f7ff feb3 	bl	800eea4 <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 800f13e:	682c      	ldr	r4, [r5, #0]
			( void ) xTaskResumeAll();
 800f140:	f7ff ff58 	bl	800eff4 <xTaskResumeAll>
			if( xListIsEmpty == pdFALSE )
 800f144:	2c00      	cmp	r4, #0
 800f146:	d0f5      	beq.n	800f134 <prvIdleTask+0x10>
				taskENTER_CRITICAL();
 800f148:	f000 fe0a 	bl	800fd60 <vPortEnterCritical>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800f14c:	4b0d      	ldr	r3, [pc, #52]	; (800f184 <prvIdleTask+0x60>)
 800f14e:	68db      	ldr	r3, [r3, #12]
 800f150:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800f152:	1d20      	adds	r0, r4, #4
 800f154:	f7ff f91a 	bl	800e38c <uxListRemove>
					--uxCurrentNumberOfTasks;
 800f158:	4a0c      	ldr	r2, [pc, #48]	; (800f18c <prvIdleTask+0x68>)
 800f15a:	6813      	ldr	r3, [r2, #0]
 800f15c:	3b01      	subs	r3, #1
 800f15e:	6013      	str	r3, [r2, #0]
					--uxTasksDeleted;
 800f160:	4a07      	ldr	r2, [pc, #28]	; (800f180 <prvIdleTask+0x5c>)
 800f162:	6813      	ldr	r3, [r2, #0]
 800f164:	3b01      	subs	r3, #1
 800f166:	6013      	str	r3, [r2, #0]
				taskEXIT_CRITICAL();
 800f168:	f000 fe06 	bl	800fd78 <vPortExitCritical>
			vPortFreeAligned( pxTCB->pxStack );
 800f16c:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800f16e:	f000 ff0b 	bl	800ff88 <vPortFree>
		vPortFree( pxTCB );
 800f172:	0020      	movs	r0, r4
 800f174:	f000 ff08 	bl	800ff88 <vPortFree>
	}
 800f178:	e7dc      	b.n	800f134 <prvIdleTask+0x10>
				taskYIELD();
 800f17a:	f000 fde5 	bl	800fd48 <vPortYield>
 800f17e:	e7d9      	b.n	800f134 <prvIdleTask+0x10>
 800f180:	200017d8 	.word	0x200017d8
 800f184:	20001838 	.word	0x20001838
 800f188:	20001738 	.word	0x20001738
 800f18c:	200017c8 	.word	0x200017c8

0800f190 <uxTaskGetSystemState>:
	{
 800f190:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f192:	46c6      	mov	lr, r8
 800f194:	b500      	push	{lr}
 800f196:	0006      	movs	r6, r0
 800f198:	000d      	movs	r5, r1
 800f19a:	4690      	mov	r8, r2
		vTaskSuspendAll();
 800f19c:	f7ff fe82 	bl	800eea4 <vTaskSuspendAll>
			if( uxArraySize >= uxCurrentNumberOfTasks )
 800f1a0:	4b1e      	ldr	r3, [pc, #120]	; (800f21c <uxTaskGetSystemState+0x8c>)
 800f1a2:	681b      	ldr	r3, [r3, #0]
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 800f1a4:	2400      	movs	r4, #0
			if( uxArraySize >= uxCurrentNumberOfTasks )
 800f1a6:	42ab      	cmp	r3, r5
 800f1a8:	d832      	bhi.n	800f210 <uxTaskGetSystemState+0x80>
 800f1aa:	4d1d      	ldr	r5, [pc, #116]	; (800f220 <uxTaskGetSystemState+0x90>)
 800f1ac:	002f      	movs	r7, r5
 800f1ae:	3f78      	subs	r7, #120	; 0x78
					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 800f1b0:	0160      	lsls	r0, r4, #5
 800f1b2:	1830      	adds	r0, r6, r0
 800f1b4:	2201      	movs	r2, #1
 800f1b6:	0029      	movs	r1, r5
 800f1b8:	f7ff fc34 	bl	800ea24 <prvListTaskWithinSingleList>
 800f1bc:	1824      	adds	r4, r4, r0
				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f1be:	002b      	movs	r3, r5
 800f1c0:	3d14      	subs	r5, #20
 800f1c2:	42bb      	cmp	r3, r7
 800f1c4:	d1f4      	bne.n	800f1b0 <uxTaskGetSystemState+0x20>
				uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
 800f1c6:	4b17      	ldr	r3, [pc, #92]	; (800f224 <uxTaskGetSystemState+0x94>)
 800f1c8:	6819      	ldr	r1, [r3, #0]
 800f1ca:	0160      	lsls	r0, r4, #5
 800f1cc:	1830      	adds	r0, r6, r0
 800f1ce:	2202      	movs	r2, #2
 800f1d0:	f7ff fc28 	bl	800ea24 <prvListTaskWithinSingleList>
 800f1d4:	1824      	adds	r4, r4, r0
				uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 800f1d6:	4b14      	ldr	r3, [pc, #80]	; (800f228 <uxTaskGetSystemState+0x98>)
 800f1d8:	6819      	ldr	r1, [r3, #0]
 800f1da:	0160      	lsls	r0, r4, #5
 800f1dc:	1830      	adds	r0, r6, r0
 800f1de:	2202      	movs	r2, #2
 800f1e0:	f7ff fc20 	bl	800ea24 <prvListTaskWithinSingleList>
 800f1e4:	1824      	adds	r4, r4, r0
					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted );
 800f1e6:	0160      	lsls	r0, r4, #5
 800f1e8:	1830      	adds	r0, r6, r0
 800f1ea:	2204      	movs	r2, #4
 800f1ec:	490f      	ldr	r1, [pc, #60]	; (800f22c <uxTaskGetSystemState+0x9c>)
 800f1ee:	f7ff fc19 	bl	800ea24 <prvListTaskWithinSingleList>
 800f1f2:	1824      	adds	r4, r4, r0
					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, eSuspended );
 800f1f4:	0160      	lsls	r0, r4, #5
 800f1f6:	1830      	adds	r0, r6, r0
 800f1f8:	2203      	movs	r2, #3
 800f1fa:	490d      	ldr	r1, [pc, #52]	; (800f230 <uxTaskGetSystemState+0xa0>)
 800f1fc:	f7ff fc12 	bl	800ea24 <prvListTaskWithinSingleList>
 800f200:	1824      	adds	r4, r4, r0
					if( pulTotalRunTime != NULL )
 800f202:	4643      	mov	r3, r8
 800f204:	2b00      	cmp	r3, #0
 800f206:	d003      	beq.n	800f210 <uxTaskGetSystemState+0x80>
							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800f208:	f7f8 fd96 	bl	8007d38 <ulMainGetRunTimeCounterValue>
 800f20c:	4643      	mov	r3, r8
 800f20e:	6018      	str	r0, [r3, #0]
		( void ) xTaskResumeAll();
 800f210:	f7ff fef0 	bl	800eff4 <xTaskResumeAll>
	}
 800f214:	0020      	movs	r0, r4
 800f216:	bc80      	pop	{r7}
 800f218:	46b8      	mov	r8, r7
 800f21a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f21c:	200017c8 	.word	0x200017c8
 800f220:	200017b0 	.word	0x200017b0
 800f224:	20001730 	.word	0x20001730
 800f228:	20001734 	.word	0x20001734
 800f22c:	20001838 	.word	0x20001838
 800f230:	20001824 	.word	0x20001824

0800f234 <vTaskSwitchContext>:
{
 800f234:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800f236:	4b39      	ldr	r3, [pc, #228]	; (800f31c <vTaskSwitchContext+0xe8>)
 800f238:	681b      	ldr	r3, [r3, #0]
 800f23a:	2b00      	cmp	r3, #0
 800f23c:	d003      	beq.n	800f246 <vTaskSwitchContext+0x12>
		xYieldPending = pdTRUE;
 800f23e:	4b38      	ldr	r3, [pc, #224]	; (800f320 <vTaskSwitchContext+0xec>)
 800f240:	2201      	movs	r2, #1
 800f242:	601a      	str	r2, [r3, #0]
}
 800f244:	bd10      	pop	{r4, pc}
		xYieldPending = pdFALSE;
 800f246:	4b36      	ldr	r3, [pc, #216]	; (800f320 <vTaskSwitchContext+0xec>)
 800f248:	2200      	movs	r2, #0
 800f24a:	601a      	str	r2, [r3, #0]
					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800f24c:	f7f8 fd74 	bl	8007d38 <ulMainGetRunTimeCounterValue>
				if( ulTotalRunTime > ulTaskSwitchedInTime )
 800f250:	4b34      	ldr	r3, [pc, #208]	; (800f324 <vTaskSwitchContext+0xf0>)
 800f252:	681b      	ldr	r3, [r3, #0]
 800f254:	4298      	cmp	r0, r3
 800f256:	d905      	bls.n	800f264 <vTaskSwitchContext+0x30>
					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800f258:	4a33      	ldr	r2, [pc, #204]	; (800f328 <vTaskSwitchContext+0xf4>)
 800f25a:	6812      	ldr	r2, [r2, #0]
 800f25c:	6d51      	ldr	r1, [r2, #84]	; 0x54
 800f25e:	1acb      	subs	r3, r1, r3
 800f260:	181b      	adds	r3, r3, r0
 800f262:	6553      	str	r3, [r2, #84]	; 0x54
				ulTaskSwitchedInTime = ulTotalRunTime;
 800f264:	4b2f      	ldr	r3, [pc, #188]	; (800f324 <vTaskSwitchContext+0xf0>)
 800f266:	6018      	str	r0, [r3, #0]
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
 800f268:	4b2f      	ldr	r3, [pc, #188]	; (800f328 <vTaskSwitchContext+0xf4>)
 800f26a:	681a      	ldr	r2, [r3, #0]
 800f26c:	681b      	ldr	r3, [r3, #0]
 800f26e:	6812      	ldr	r2, [r2, #0]
 800f270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f272:	429a      	cmp	r2, r3
 800f274:	d93b      	bls.n	800f2ee <vTaskSwitchContext+0xba>
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
 800f276:	4b2c      	ldr	r3, [pc, #176]	; (800f328 <vTaskSwitchContext+0xf4>)
 800f278:	681b      	ldr	r3, [r3, #0]
 800f27a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800f27c:	2214      	movs	r2, #20
 800f27e:	492b      	ldr	r1, [pc, #172]	; (800f32c <vTaskSwitchContext+0xf8>)
 800f280:	f007 f94a 	bl	8016518 <memcmp>
 800f284:	2800      	cmp	r0, #0
 800f286:	d139      	bne.n	800f2fc <vTaskSwitchContext+0xc8>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800f288:	4b29      	ldr	r3, [pc, #164]	; (800f330 <vTaskSwitchContext+0xfc>)
 800f28a:	681a      	ldr	r2, [r3, #0]
 800f28c:	0093      	lsls	r3, r2, #2
 800f28e:	189b      	adds	r3, r3, r2
 800f290:	009b      	lsls	r3, r3, #2
 800f292:	4a28      	ldr	r2, [pc, #160]	; (800f334 <vTaskSwitchContext+0x100>)
 800f294:	589b      	ldr	r3, [r3, r2]
 800f296:	2b00      	cmp	r3, #0
 800f298:	d10f      	bne.n	800f2ba <vTaskSwitchContext+0x86>
 800f29a:	4825      	ldr	r0, [pc, #148]	; (800f330 <vTaskSwitchContext+0xfc>)
 800f29c:	0002      	movs	r2, r0
 800f29e:	6803      	ldr	r3, [r0, #0]
 800f2a0:	2b00      	cmp	r3, #0
 800f2a2:	d032      	beq.n	800f30a <vTaskSwitchContext+0xd6>
 800f2a4:	6813      	ldr	r3, [r2, #0]
 800f2a6:	3b01      	subs	r3, #1
 800f2a8:	6013      	str	r3, [r2, #0]
 800f2aa:	6811      	ldr	r1, [r2, #0]
 800f2ac:	008b      	lsls	r3, r1, #2
 800f2ae:	185b      	adds	r3, r3, r1
 800f2b0:	009b      	lsls	r3, r3, #2
 800f2b2:	4920      	ldr	r1, [pc, #128]	; (800f334 <vTaskSwitchContext+0x100>)
 800f2b4:	585b      	ldr	r3, [r3, r1]
 800f2b6:	2b00      	cmp	r3, #0
 800f2b8:	d0f1      	beq.n	800f29e <vTaskSwitchContext+0x6a>
 800f2ba:	4b1d      	ldr	r3, [pc, #116]	; (800f330 <vTaskSwitchContext+0xfc>)
 800f2bc:	681a      	ldr	r2, [r3, #0]
 800f2be:	4c1d      	ldr	r4, [pc, #116]	; (800f334 <vTaskSwitchContext+0x100>)
 800f2c0:	0093      	lsls	r3, r2, #2
 800f2c2:	1899      	adds	r1, r3, r2
 800f2c4:	0089      	lsls	r1, r1, #2
 800f2c6:	1861      	adds	r1, r4, r1
 800f2c8:	6848      	ldr	r0, [r1, #4]
 800f2ca:	6840      	ldr	r0, [r0, #4]
 800f2cc:	6048      	str	r0, [r1, #4]
 800f2ce:	189b      	adds	r3, r3, r2
 800f2d0:	009b      	lsls	r3, r3, #2
 800f2d2:	3308      	adds	r3, #8
 800f2d4:	191b      	adds	r3, r3, r4
 800f2d6:	4298      	cmp	r0, r3
 800f2d8:	d019      	beq.n	800f30e <vTaskSwitchContext+0xda>
 800f2da:	0093      	lsls	r3, r2, #2
 800f2dc:	189a      	adds	r2, r3, r2
 800f2de:	0092      	lsls	r2, r2, #2
 800f2e0:	4b14      	ldr	r3, [pc, #80]	; (800f334 <vTaskSwitchContext+0x100>)
 800f2e2:	189a      	adds	r2, r3, r2
 800f2e4:	6853      	ldr	r3, [r2, #4]
 800f2e6:	68da      	ldr	r2, [r3, #12]
 800f2e8:	4b0f      	ldr	r3, [pc, #60]	; (800f328 <vTaskSwitchContext+0xf4>)
 800f2ea:	601a      	str	r2, [r3, #0]
}
 800f2ec:	e7aa      	b.n	800f244 <vTaskSwitchContext+0x10>
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
 800f2ee:	4b0e      	ldr	r3, [pc, #56]	; (800f328 <vTaskSwitchContext+0xf4>)
 800f2f0:	6818      	ldr	r0, [r3, #0]
 800f2f2:	6819      	ldr	r1, [r3, #0]
 800f2f4:	3134      	adds	r1, #52	; 0x34
 800f2f6:	f7fe f96c 	bl	800d5d2 <vApplicationStackOverflowHook>
 800f2fa:	e7bc      	b.n	800f276 <vTaskSwitchContext+0x42>
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
 800f2fc:	4b0a      	ldr	r3, [pc, #40]	; (800f328 <vTaskSwitchContext+0xf4>)
 800f2fe:	6818      	ldr	r0, [r3, #0]
 800f300:	6819      	ldr	r1, [r3, #0]
 800f302:	3134      	adds	r1, #52	; 0x34
 800f304:	f7fe f965 	bl	800d5d2 <vApplicationStackOverflowHook>
 800f308:	e7be      	b.n	800f288 <vTaskSwitchContext+0x54>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800f30a:	b672      	cpsid	i
 800f30c:	e7fe      	b.n	800f30c <vTaskSwitchContext+0xd8>
 800f30e:	6840      	ldr	r0, [r0, #4]
 800f310:	0093      	lsls	r3, r2, #2
 800f312:	189b      	adds	r3, r3, r2
 800f314:	009b      	lsls	r3, r3, #2
 800f316:	18e3      	adds	r3, r4, r3
 800f318:	6058      	str	r0, [r3, #4]
 800f31a:	e7de      	b.n	800f2da <vTaskSwitchContext+0xa6>
 800f31c:	200017d0 	.word	0x200017d0
 800f320:	20001850 	.word	0x20001850
 800f324:	200017c4 	.word	0x200017c4
 800f328:	2000172c 	.word	0x2000172c
 800f32c:	0801cbc8 	.word	0x0801cbc8
 800f330:	200017dc 	.word	0x200017dc
 800f334:	20001738 	.word	0x20001738

0800f338 <vTaskPlaceOnEventList>:
{
 800f338:	b570      	push	{r4, r5, r6, lr}
 800f33a:	000c      	movs	r4, r1
	configASSERT( pxEventList );
 800f33c:	2800      	cmp	r0, #0
 800f33e:	d010      	beq.n	800f362 <vTaskPlaceOnEventList+0x2a>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f340:	4d0c      	ldr	r5, [pc, #48]	; (800f374 <vTaskPlaceOnEventList+0x3c>)
 800f342:	6829      	ldr	r1, [r5, #0]
 800f344:	3118      	adds	r1, #24
 800f346:	f7ff f80a 	bl	800e35e <vListInsert>
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800f34a:	6828      	ldr	r0, [r5, #0]
 800f34c:	3004      	adds	r0, #4
 800f34e:	f7ff f81d 	bl	800e38c <uxListRemove>
		if( xTicksToWait == portMAX_DELAY )
 800f352:	1c63      	adds	r3, r4, #1
 800f354:	d007      	beq.n	800f366 <vTaskPlaceOnEventList+0x2e>
			xTimeToWake = xTickCount + xTicksToWait;
 800f356:	4b08      	ldr	r3, [pc, #32]	; (800f378 <vTaskPlaceOnEventList+0x40>)
 800f358:	6818      	ldr	r0, [r3, #0]
 800f35a:	1900      	adds	r0, r0, r4
			prvAddCurrentTaskToDelayedList( xTimeToWake );
 800f35c:	f7ff fbd0 	bl	800eb00 <prvAddCurrentTaskToDelayedList>
}
 800f360:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( pxEventList );
 800f362:	b672      	cpsid	i
 800f364:	e7fe      	b.n	800f364 <vTaskPlaceOnEventList+0x2c>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 800f366:	4b03      	ldr	r3, [pc, #12]	; (800f374 <vTaskPlaceOnEventList+0x3c>)
 800f368:	6819      	ldr	r1, [r3, #0]
 800f36a:	3104      	adds	r1, #4
 800f36c:	4803      	ldr	r0, [pc, #12]	; (800f37c <vTaskPlaceOnEventList+0x44>)
 800f36e:	f7fe ffeb 	bl	800e348 <vListInsertEnd>
 800f372:	e7f5      	b.n	800f360 <vTaskPlaceOnEventList+0x28>
 800f374:	2000172c 	.word	0x2000172c
 800f378:	2000184c 	.word	0x2000184c
 800f37c:	20001824 	.word	0x20001824

0800f380 <vTaskPlaceOnEventListRestricted>:
	{
 800f380:	b570      	push	{r4, r5, r6, lr}
 800f382:	000c      	movs	r4, r1
		configASSERT( pxEventList );
 800f384:	2800      	cmp	r0, #0
 800f386:	d00e      	beq.n	800f3a6 <vTaskPlaceOnEventListRestricted+0x26>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f388:	4d08      	ldr	r5, [pc, #32]	; (800f3ac <vTaskPlaceOnEventListRestricted+0x2c>)
 800f38a:	6829      	ldr	r1, [r5, #0]
 800f38c:	3118      	adds	r1, #24
 800f38e:	f7fe ffdb 	bl	800e348 <vListInsertEnd>
		if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800f392:	6828      	ldr	r0, [r5, #0]
 800f394:	3004      	adds	r0, #4
 800f396:	f7fe fff9 	bl	800e38c <uxListRemove>
		xTimeToWake = xTickCount + xTicksToWait;
 800f39a:	4b05      	ldr	r3, [pc, #20]	; (800f3b0 <vTaskPlaceOnEventListRestricted+0x30>)
 800f39c:	6818      	ldr	r0, [r3, #0]
 800f39e:	1900      	adds	r0, r0, r4
		prvAddCurrentTaskToDelayedList( xTimeToWake );
 800f3a0:	f7ff fbae 	bl	800eb00 <prvAddCurrentTaskToDelayedList>
	}
 800f3a4:	bd70      	pop	{r4, r5, r6, pc}
		configASSERT( pxEventList );
 800f3a6:	b672      	cpsid	i
 800f3a8:	e7fe      	b.n	800f3a8 <vTaskPlaceOnEventListRestricted+0x28>
 800f3aa:	46c0      	nop			; (mov r8, r8)
 800f3ac:	2000172c 	.word	0x2000172c
 800f3b0:	2000184c 	.word	0x2000184c

0800f3b4 <xTaskRemoveFromEventList>:
{
 800f3b4:	b570      	push	{r4, r5, r6, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800f3b6:	68c3      	ldr	r3, [r0, #12]
 800f3b8:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 800f3ba:	2c00      	cmp	r4, #0
 800f3bc:	d027      	beq.n	800f40e <xTaskRemoveFromEventList+0x5a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800f3be:	0025      	movs	r5, r4
 800f3c0:	3518      	adds	r5, #24
 800f3c2:	0028      	movs	r0, r5
 800f3c4:	f7fe ffe2 	bl	800e38c <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f3c8:	4b14      	ldr	r3, [pc, #80]	; (800f41c <xTaskRemoveFromEventList+0x68>)
 800f3ca:	681b      	ldr	r3, [r3, #0]
 800f3cc:	2b00      	cmp	r3, #0
 800f3ce:	d120      	bne.n	800f412 <xTaskRemoveFromEventList+0x5e>
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
 800f3d0:	1d25      	adds	r5, r4, #4
 800f3d2:	0028      	movs	r0, r5
 800f3d4:	f7fe ffda 	bl	800e38c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800f3d8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800f3da:	4a11      	ldr	r2, [pc, #68]	; (800f420 <xTaskRemoveFromEventList+0x6c>)
 800f3dc:	6812      	ldr	r2, [r2, #0]
 800f3de:	4293      	cmp	r3, r2
 800f3e0:	d901      	bls.n	800f3e6 <xTaskRemoveFromEventList+0x32>
 800f3e2:	4a0f      	ldr	r2, [pc, #60]	; (800f420 <xTaskRemoveFromEventList+0x6c>)
 800f3e4:	6013      	str	r3, [r2, #0]
 800f3e6:	0098      	lsls	r0, r3, #2
 800f3e8:	18c0      	adds	r0, r0, r3
 800f3ea:	0080      	lsls	r0, r0, #2
 800f3ec:	4b0d      	ldr	r3, [pc, #52]	; (800f424 <xTaskRemoveFromEventList+0x70>)
 800f3ee:	18c0      	adds	r0, r0, r3
 800f3f0:	0029      	movs	r1, r5
 800f3f2:	f7fe ffa9 	bl	800e348 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800f3f6:	4b0c      	ldr	r3, [pc, #48]	; (800f428 <xTaskRemoveFromEventList+0x74>)
 800f3f8:	681b      	ldr	r3, [r3, #0]
 800f3fa:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800f3fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
		xReturn = pdFALSE;
 800f3fe:	2000      	movs	r0, #0
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800f400:	429a      	cmp	r2, r3
 800f402:	d903      	bls.n	800f40c <xTaskRemoveFromEventList+0x58>
		xYieldPending = pdTRUE;
 800f404:	4b09      	ldr	r3, [pc, #36]	; (800f42c <xTaskRemoveFromEventList+0x78>)
 800f406:	2201      	movs	r2, #1
 800f408:	601a      	str	r2, [r3, #0]
		xReturn = pdTRUE;
 800f40a:	3001      	adds	r0, #1
}
 800f40c:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( pxUnblockedTCB );
 800f40e:	b672      	cpsid	i
 800f410:	e7fe      	b.n	800f410 <xTaskRemoveFromEventList+0x5c>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800f412:	0029      	movs	r1, r5
 800f414:	4806      	ldr	r0, [pc, #24]	; (800f430 <xTaskRemoveFromEventList+0x7c>)
 800f416:	f7fe ff97 	bl	800e348 <vListInsertEnd>
 800f41a:	e7ec      	b.n	800f3f6 <xTaskRemoveFromEventList+0x42>
 800f41c:	200017d0 	.word	0x200017d0
 800f420:	200017dc 	.word	0x200017dc
 800f424:	20001738 	.word	0x20001738
 800f428:	2000172c 	.word	0x2000172c
 800f42c:	20001850 	.word	0x20001850
 800f430:	2000180c 	.word	0x2000180c

0800f434 <vTaskSetTimeOutState>:
	configASSERT( pxTimeOut );
 800f434:	2800      	cmp	r0, #0
 800f436:	d006      	beq.n	800f446 <vTaskSetTimeOutState+0x12>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800f438:	4b04      	ldr	r3, [pc, #16]	; (800f44c <vTaskSetTimeOutState+0x18>)
 800f43a:	681b      	ldr	r3, [r3, #0]
 800f43c:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800f43e:	4b04      	ldr	r3, [pc, #16]	; (800f450 <vTaskSetTimeOutState+0x1c>)
 800f440:	681b      	ldr	r3, [r3, #0]
 800f442:	6043      	str	r3, [r0, #4]
}
 800f444:	4770      	bx	lr
	configASSERT( pxTimeOut );
 800f446:	b672      	cpsid	i
 800f448:	e7fe      	b.n	800f448 <vTaskSetTimeOutState+0x14>
 800f44a:	46c0      	nop			; (mov r8, r8)
 800f44c:	20001808 	.word	0x20001808
 800f450:	2000184c 	.word	0x2000184c

0800f454 <xTaskCheckForTimeOut>:
{
 800f454:	b570      	push	{r4, r5, r6, lr}
 800f456:	0004      	movs	r4, r0
 800f458:	000d      	movs	r5, r1
	configASSERT( pxTimeOut );
 800f45a:	2800      	cmp	r0, #0
 800f45c:	d01e      	beq.n	800f49c <xTaskCheckForTimeOut+0x48>
	configASSERT( pxTicksToWait );
 800f45e:	2900      	cmp	r1, #0
 800f460:	d01e      	beq.n	800f4a0 <xTaskCheckForTimeOut+0x4c>
	taskENTER_CRITICAL();
 800f462:	f000 fc7d 	bl	800fd60 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 800f466:	4b12      	ldr	r3, [pc, #72]	; (800f4b0 <xTaskCheckForTimeOut+0x5c>)
 800f468:	681a      	ldr	r2, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 800f46a:	682b      	ldr	r3, [r5, #0]
 800f46c:	1c59      	adds	r1, r3, #1
 800f46e:	d019      	beq.n	800f4a4 <xTaskCheckForTimeOut+0x50>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800f470:	4910      	ldr	r1, [pc, #64]	; (800f4b4 <xTaskCheckForTimeOut+0x60>)
 800f472:	6809      	ldr	r1, [r1, #0]
 800f474:	6820      	ldr	r0, [r4, #0]
 800f476:	4288      	cmp	r0, r1
 800f478:	d003      	beq.n	800f482 <xTaskCheckForTimeOut+0x2e>
			xReturn = pdTRUE;
 800f47a:	2601      	movs	r6, #1
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800f47c:	6861      	ldr	r1, [r4, #4]
 800f47e:	4291      	cmp	r1, r2
 800f480:	d911      	bls.n	800f4a6 <xTaskCheckForTimeOut+0x52>
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
 800f482:	6861      	ldr	r1, [r4, #4]
 800f484:	1a50      	subs	r0, r2, r1
			xReturn = pdTRUE;
 800f486:	2601      	movs	r6, #1
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
 800f488:	4283      	cmp	r3, r0
 800f48a:	d90c      	bls.n	800f4a6 <xTaskCheckForTimeOut+0x52>
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
 800f48c:	1a9b      	subs	r3, r3, r2
 800f48e:	185b      	adds	r3, r3, r1
 800f490:	602b      	str	r3, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
 800f492:	0020      	movs	r0, r4
 800f494:	f7ff ffce 	bl	800f434 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
 800f498:	2600      	movs	r6, #0
 800f49a:	e004      	b.n	800f4a6 <xTaskCheckForTimeOut+0x52>
	configASSERT( pxTimeOut );
 800f49c:	b672      	cpsid	i
 800f49e:	e7fe      	b.n	800f49e <xTaskCheckForTimeOut+0x4a>
	configASSERT( pxTicksToWait );
 800f4a0:	b672      	cpsid	i
 800f4a2:	e7fe      	b.n	800f4a2 <xTaskCheckForTimeOut+0x4e>
				xReturn = pdFALSE;
 800f4a4:	2600      	movs	r6, #0
	taskEXIT_CRITICAL();
 800f4a6:	f000 fc67 	bl	800fd78 <vPortExitCritical>
}
 800f4aa:	0030      	movs	r0, r6
 800f4ac:	bd70      	pop	{r4, r5, r6, pc}
 800f4ae:	46c0      	nop			; (mov r8, r8)
 800f4b0:	2000184c 	.word	0x2000184c
 800f4b4:	20001808 	.word	0x20001808

0800f4b8 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 800f4b8:	4b01      	ldr	r3, [pc, #4]	; (800f4c0 <vTaskMissedYield+0x8>)
 800f4ba:	2201      	movs	r2, #1
 800f4bc:	601a      	str	r2, [r3, #0]
}
 800f4be:	4770      	bx	lr
 800f4c0:	20001850 	.word	0x20001850

0800f4c4 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 800f4c4:	4b05      	ldr	r3, [pc, #20]	; (800f4dc <xTaskGetSchedulerState+0x18>)
 800f4c6:	681b      	ldr	r3, [r3, #0]
			xReturn = taskSCHEDULER_NOT_STARTED;
 800f4c8:	2001      	movs	r0, #1
		if( xSchedulerRunning == pdFALSE )
 800f4ca:	2b00      	cmp	r3, #0
 800f4cc:	d004      	beq.n	800f4d8 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f4ce:	4b04      	ldr	r3, [pc, #16]	; (800f4e0 <xTaskGetSchedulerState+0x1c>)
 800f4d0:	6818      	ldr	r0, [r3, #0]
				xReturn = taskSCHEDULER_SUSPENDED;
 800f4d2:	4243      	negs	r3, r0
 800f4d4:	4158      	adcs	r0, r3
 800f4d6:	0040      	lsls	r0, r0, #1
	}
 800f4d8:	4770      	bx	lr
 800f4da:	46c0      	nop			; (mov r8, r8)
 800f4dc:	20001820 	.word	0x20001820
 800f4e0:	200017d0 	.word	0x200017d0

0800f4e4 <vTaskPriorityInherit>:
	{
 800f4e4:	b570      	push	{r4, r5, r6, lr}
 800f4e6:	1e04      	subs	r4, r0, #0
		if( pxMutexHolder != NULL )
 800f4e8:	d01a      	beq.n	800f520 <vTaskPriorityInherit+0x3c>
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 800f4ea:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800f4ec:	4b19      	ldr	r3, [pc, #100]	; (800f554 <vTaskPriorityInherit+0x70>)
 800f4ee:	681b      	ldr	r3, [r3, #0]
 800f4f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f4f2:	429a      	cmp	r2, r3
 800f4f4:	d214      	bcs.n	800f520 <vTaskPriorityInherit+0x3c>
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800f4f6:	6983      	ldr	r3, [r0, #24]
 800f4f8:	2b00      	cmp	r3, #0
 800f4fa:	db05      	blt.n	800f508 <vTaskPriorityInherit+0x24>
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f4fc:	4b15      	ldr	r3, [pc, #84]	; (800f554 <vTaskPriorityInherit+0x70>)
 800f4fe:	681b      	ldr	r3, [r3, #0]
 800f500:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800f502:	2307      	movs	r3, #7
 800f504:	1a5b      	subs	r3, r3, r1
 800f506:	6183      	str	r3, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
 800f508:	0093      	lsls	r3, r2, #2
 800f50a:	189b      	adds	r3, r3, r2
 800f50c:	009b      	lsls	r3, r3, #2
 800f50e:	4a12      	ldr	r2, [pc, #72]	; (800f558 <vTaskPriorityInherit+0x74>)
 800f510:	189b      	adds	r3, r3, r2
 800f512:	6962      	ldr	r2, [r4, #20]
 800f514:	429a      	cmp	r2, r3
 800f516:	d004      	beq.n	800f522 <vTaskPriorityInherit+0x3e>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 800f518:	4b0e      	ldr	r3, [pc, #56]	; (800f554 <vTaskPriorityInherit+0x70>)
 800f51a:	681b      	ldr	r3, [r3, #0]
 800f51c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f51e:	62e3      	str	r3, [r4, #44]	; 0x2c
	}
 800f520:	bd70      	pop	{r4, r5, r6, pc}
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800f522:	1d25      	adds	r5, r4, #4
 800f524:	0028      	movs	r0, r5
 800f526:	f7fe ff31 	bl	800e38c <uxListRemove>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 800f52a:	4b0a      	ldr	r3, [pc, #40]	; (800f554 <vTaskPriorityInherit+0x70>)
 800f52c:	681b      	ldr	r3, [r3, #0]
 800f52e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f530:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 800f532:	4a0a      	ldr	r2, [pc, #40]	; (800f55c <vTaskPriorityInherit+0x78>)
 800f534:	6812      	ldr	r2, [r2, #0]
 800f536:	4293      	cmp	r3, r2
 800f538:	d808      	bhi.n	800f54c <vTaskPriorityInherit+0x68>
 800f53a:	0098      	lsls	r0, r3, #2
 800f53c:	18c0      	adds	r0, r0, r3
 800f53e:	0080      	lsls	r0, r0, #2
 800f540:	4b05      	ldr	r3, [pc, #20]	; (800f558 <vTaskPriorityInherit+0x74>)
 800f542:	18c0      	adds	r0, r0, r3
 800f544:	0029      	movs	r1, r5
 800f546:	f7fe feff 	bl	800e348 <vListInsertEnd>
	}
 800f54a:	e7e9      	b.n	800f520 <vTaskPriorityInherit+0x3c>
					prvAddTaskToReadyList( pxTCB );
 800f54c:	4a03      	ldr	r2, [pc, #12]	; (800f55c <vTaskPriorityInherit+0x78>)
 800f54e:	6013      	str	r3, [r2, #0]
 800f550:	e7f3      	b.n	800f53a <vTaskPriorityInherit+0x56>
 800f552:	46c0      	nop			; (mov r8, r8)
 800f554:	2000172c 	.word	0x2000172c
 800f558:	20001738 	.word	0x20001738
 800f55c:	200017dc 	.word	0x200017dc

0800f560 <xTaskPriorityDisinherit>:
	{
 800f560:	b570      	push	{r4, r5, r6, lr}
 800f562:	1e04      	subs	r4, r0, #0
		if( pxMutexHolder != NULL )
 800f564:	d02c      	beq.n	800f5c0 <xTaskPriorityDisinherit+0x60>
			configASSERT( pxTCB == pxCurrentTCB );
 800f566:	4b18      	ldr	r3, [pc, #96]	; (800f5c8 <xTaskPriorityDisinherit+0x68>)
 800f568:	681b      	ldr	r3, [r3, #0]
 800f56a:	4283      	cmp	r3, r0
 800f56c:	d001      	beq.n	800f572 <xTaskPriorityDisinherit+0x12>
 800f56e:	b672      	cpsid	i
 800f570:	e7fe      	b.n	800f570 <xTaskPriorityDisinherit+0x10>
			configASSERT( pxTCB->uxMutexesHeld );
 800f572:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800f574:	2b00      	cmp	r3, #0
 800f576:	d101      	bne.n	800f57c <xTaskPriorityDisinherit+0x1c>
 800f578:	b672      	cpsid	i
 800f57a:	e7fe      	b.n	800f57a <xTaskPriorityDisinherit+0x1a>
			( pxTCB->uxMutexesHeld )--;
 800f57c:	3b01      	subs	r3, #1
 800f57e:	6503      	str	r3, [r0, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800f580:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800f582:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 800f584:	428a      	cmp	r2, r1
 800f586:	d01d      	beq.n	800f5c4 <xTaskPriorityDisinherit+0x64>
	BaseType_t xReturn = pdFALSE;
 800f588:	2000      	movs	r0, #0
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800f58a:	2b00      	cmp	r3, #0
 800f58c:	d119      	bne.n	800f5c2 <xTaskPriorityDisinherit+0x62>
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800f58e:	1d25      	adds	r5, r4, #4
 800f590:	0028      	movs	r0, r5
 800f592:	f7fe fefb 	bl	800e38c <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800f596:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800f598:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f59a:	2207      	movs	r2, #7
 800f59c:	1ad2      	subs	r2, r2, r3
 800f59e:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 800f5a0:	4a0a      	ldr	r2, [pc, #40]	; (800f5cc <xTaskPriorityDisinherit+0x6c>)
 800f5a2:	6812      	ldr	r2, [r2, #0]
 800f5a4:	4293      	cmp	r3, r2
 800f5a6:	d901      	bls.n	800f5ac <xTaskPriorityDisinherit+0x4c>
 800f5a8:	4a08      	ldr	r2, [pc, #32]	; (800f5cc <xTaskPriorityDisinherit+0x6c>)
 800f5aa:	6013      	str	r3, [r2, #0]
 800f5ac:	0098      	lsls	r0, r3, #2
 800f5ae:	18c0      	adds	r0, r0, r3
 800f5b0:	0080      	lsls	r0, r0, #2
 800f5b2:	4b07      	ldr	r3, [pc, #28]	; (800f5d0 <xTaskPriorityDisinherit+0x70>)
 800f5b4:	18c0      	adds	r0, r0, r3
 800f5b6:	0029      	movs	r1, r5
 800f5b8:	f7fe fec6 	bl	800e348 <vListInsertEnd>
					xReturn = pdTRUE;
 800f5bc:	2001      	movs	r0, #1
 800f5be:	e000      	b.n	800f5c2 <xTaskPriorityDisinherit+0x62>
	BaseType_t xReturn = pdFALSE;
 800f5c0:	2000      	movs	r0, #0
	}
 800f5c2:	bd70      	pop	{r4, r5, r6, pc}
	BaseType_t xReturn = pdFALSE;
 800f5c4:	2000      	movs	r0, #0
 800f5c6:	e7fc      	b.n	800f5c2 <xTaskPriorityDisinherit+0x62>
 800f5c8:	2000172c 	.word	0x2000172c
 800f5cc:	200017dc 	.word	0x200017dc
 800f5d0:	20001738 	.word	0x20001738

0800f5d4 <vTaskList>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	void vTaskList( char * pcWriteBuffer )
	{
 800f5d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f5d6:	46ce      	mov	lr, r9
 800f5d8:	4647      	mov	r7, r8
 800f5da:	b580      	push	{r7, lr}
 800f5dc:	b085      	sub	sp, #20
 800f5de:	0004      	movs	r4, r0
		 * through a call to vTaskList().
		 */


		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = 0x00;
 800f5e0:	2300      	movs	r3, #0
 800f5e2:	7003      	strb	r3, [r0, #0]

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 800f5e4:	4b30      	ldr	r3, [pc, #192]	; (800f6a8 <vTaskList+0xd4>)
 800f5e6:	681a      	ldr	r2, [r3, #0]
 800f5e8:	9203      	str	r2, [sp, #12]

		/* Allocate an array index for each task. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
 800f5ea:	6818      	ldr	r0, [r3, #0]
 800f5ec:	0140      	lsls	r0, r0, #5
 800f5ee:	f000 fc39 	bl	800fe64 <pvPortMalloc>
 800f5f2:	1e05      	subs	r5, r0, #0

		if( pxTaskStatusArray != NULL )
 800f5f4:	d053      	beq.n	800f69e <vTaskList+0xca>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
 800f5f6:	9903      	ldr	r1, [sp, #12]
 800f5f8:	2200      	movs	r2, #0
 800f5fa:	f7ff fdc9 	bl	800f190 <uxTaskGetSystemState>
 800f5fe:	9003      	str	r0, [sp, #12]

			/* Create a human readable table from the binary data. */
			for( x = 0; x < uxArraySize; x++ )
 800f600:	2300      	movs	r3, #0
 800f602:	9302      	str	r3, [sp, #8]
 800f604:	9a02      	ldr	r2, [sp, #8]
 800f606:	9b03      	ldr	r3, [sp, #12]
 800f608:	429a      	cmp	r2, r3
 800f60a:	d245      	bcs.n	800f698 <vTaskList+0xc4>
										break;

					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
										break;

					case eDeleted:		cStatus = tskDELETED_CHAR;
 800f60c:	2343      	movs	r3, #67	; 0x43
 800f60e:	4698      	mov	r8, r3
				switch( pxTaskStatusArray[ x ].eCurrentState )
 800f610:	2741      	movs	r7, #65	; 0x41
				/* Write the task name to the string, padding with spaces so it
				can be printed in tabular form more easily. */
				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );

				/* Write the rest of the string. */
				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x ].uxCurrentPriority, ( unsigned int ) pxTaskStatusArray[ x ].usStackHighWaterMark, ( unsigned int ) pxTaskStatusArray[ x ].xTaskNumber );
 800f612:	4b26      	ldr	r3, [pc, #152]	; (800f6ac <vTaskList+0xd8>)
 800f614:	4699      	mov	r9, r3
 800f616:	e02a      	b.n	800f66e <vTaskList+0x9a>
				switch( pxTaskStatusArray[ x ].eCurrentState )
 800f618:	3a02      	subs	r2, #2
 800f61a:	1e53      	subs	r3, r2, #1
 800f61c:	419a      	sbcs	r2, r3
 800f61e:	4256      	negs	r6, r2
 800f620:	43be      	bics	r6, r7
 800f622:	3642      	adds	r6, #66	; 0x42
				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 800f624:	9b02      	ldr	r3, [sp, #8]
 800f626:	015b      	lsls	r3, r3, #5
 800f628:	18eb      	adds	r3, r5, r3
 800f62a:	6859      	ldr	r1, [r3, #4]
 800f62c:	0020      	movs	r0, r4
 800f62e:	f7ff fa91 	bl	800eb54 <prvWriteNameToBuffer>
 800f632:	0004      	movs	r4, r0
				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x ].uxCurrentPriority, ( unsigned int ) pxTaskStatusArray[ x ].usStackHighWaterMark, ( unsigned int ) pxTaskStatusArray[ x ].xTaskNumber );
 800f634:	9b02      	ldr	r3, [sp, #8]
 800f636:	9a02      	ldr	r2, [sp, #8]
 800f638:	9902      	ldr	r1, [sp, #8]
 800f63a:	015b      	lsls	r3, r3, #5
 800f63c:	18eb      	adds	r3, r5, r3
 800f63e:	691b      	ldr	r3, [r3, #16]
 800f640:	0149      	lsls	r1, r1, #5
 800f642:	1869      	adds	r1, r5, r1
 800f644:	6889      	ldr	r1, [r1, #8]
 800f646:	9101      	str	r1, [sp, #4]
 800f648:	0152      	lsls	r2, r2, #5
 800f64a:	18aa      	adds	r2, r5, r2
 800f64c:	8b92      	ldrh	r2, [r2, #28]
 800f64e:	9200      	str	r2, [sp, #0]
 800f650:	0032      	movs	r2, r6
 800f652:	4649      	mov	r1, r9
 800f654:	f007 f882 	bl	801675c <siprintf>
				pcWriteBuffer += strlen( pcWriteBuffer );
 800f658:	0020      	movs	r0, r4
 800f65a:	f7f0 fd5d 	bl	8000118 <strlen>
 800f65e:	1824      	adds	r4, r4, r0
			for( x = 0; x < uxArraySize; x++ )
 800f660:	9b02      	ldr	r3, [sp, #8]
 800f662:	3301      	adds	r3, #1
 800f664:	9302      	str	r3, [sp, #8]
 800f666:	9a02      	ldr	r2, [sp, #8]
 800f668:	9b03      	ldr	r3, [sp, #12]
 800f66a:	429a      	cmp	r2, r3
 800f66c:	d214      	bcs.n	800f698 <vTaskList+0xc4>
				switch( pxTaskStatusArray[ x ].eCurrentState )
 800f66e:	9b02      	ldr	r3, [sp, #8]
 800f670:	015b      	lsls	r3, r3, #5
 800f672:	18eb      	adds	r3, r5, r3
 800f674:	7b1a      	ldrb	r2, [r3, #12]
 800f676:	2a03      	cmp	r2, #3
 800f678:	d00c      	beq.n	800f694 <vTaskList+0xc0>
 800f67a:	d803      	bhi.n	800f684 <vTaskList+0xb0>
					case eReady:		cStatus = tskREADY_CHAR;
 800f67c:	2652      	movs	r6, #82	; 0x52
				switch( pxTaskStatusArray[ x ].eCurrentState )
 800f67e:	2a01      	cmp	r2, #1
 800f680:	d1ca      	bne.n	800f618 <vTaskList+0x44>
 800f682:	e7cf      	b.n	800f624 <vTaskList+0x50>
					case eDeleted:		cStatus = tskDELETED_CHAR;
 800f684:	3a04      	subs	r2, #4
 800f686:	1e53      	subs	r3, r2, #1
 800f688:	419a      	sbcs	r2, r3
 800f68a:	4256      	negs	r6, r2
 800f68c:	4643      	mov	r3, r8
 800f68e:	439e      	bics	r6, r3
 800f690:	3644      	adds	r6, #68	; 0x44
 800f692:	e7c7      	b.n	800f624 <vTaskList+0x50>
					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
 800f694:	2653      	movs	r6, #83	; 0x53
 800f696:	e7c5      	b.n	800f624 <vTaskList+0x50>
			}

			/* Free the array again. */
			vPortFree( pxTaskStatusArray );
 800f698:	0028      	movs	r0, r5
 800f69a:	f000 fc75 	bl	800ff88 <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f69e:	b005      	add	sp, #20
 800f6a0:	bcc0      	pop	{r6, r7}
 800f6a2:	46b9      	mov	r9, r7
 800f6a4:	46b0      	mov	r8, r6
 800f6a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f6a8:	200017c8 	.word	0x200017c8
 800f6ac:	0801cba0 	.word	0x0801cba0

0800f6b0 <vTaskGetRunTimeStats>:
/*----------------------------------------------------------*/

#if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	void vTaskGetRunTimeStats( char *pcWriteBuffer )
	{
 800f6b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f6b2:	46c6      	mov	lr, r8
 800f6b4:	b500      	push	{lr}
 800f6b6:	b084      	sub	sp, #16
 800f6b8:	0004      	movs	r4, r0
		 * directly to get access to raw stats data, rather than indirectly
		 * through a call to vTaskGetRunTimeStats().
		 */

		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = 0x00;
 800f6ba:	2300      	movs	r3, #0
 800f6bc:	7003      	strb	r3, [r0, #0]

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 800f6be:	4b2a      	ldr	r3, [pc, #168]	; (800f768 <vTaskGetRunTimeStats+0xb8>)
 800f6c0:	681a      	ldr	r2, [r3, #0]
 800f6c2:	9203      	str	r2, [sp, #12]

		/* Allocate an array index for each task. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
 800f6c4:	6818      	ldr	r0, [r3, #0]
 800f6c6:	0140      	lsls	r0, r0, #5
 800f6c8:	f000 fbcc 	bl	800fe64 <pvPortMalloc>
 800f6cc:	1e07      	subs	r7, r0, #0

		if( pxTaskStatusArray != NULL )
 800f6ce:	d015      	beq.n	800f6fc <vTaskGetRunTimeStats+0x4c>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
 800f6d0:	9903      	ldr	r1, [sp, #12]
 800f6d2:	aa01      	add	r2, sp, #4
 800f6d4:	f7ff fd5c 	bl	800f190 <uxTaskGetSystemState>
 800f6d8:	9003      	str	r0, [sp, #12]

			/* For percentage calculations. */
			ulTotalTime /= 100UL;
 800f6da:	9d01      	ldr	r5, [sp, #4]
 800f6dc:	2164      	movs	r1, #100	; 0x64
 800f6de:	0028      	movs	r0, r5
 800f6e0:	f7f0 fd36 	bl	8000150 <__udivsi3>
 800f6e4:	9001      	str	r0, [sp, #4]

			/* Avoid divide by zero errors. */
			if( ulTotalTime > 0 )
 800f6e6:	2d63      	cmp	r5, #99	; 0x63
 800f6e8:	d905      	bls.n	800f6f6 <vTaskGetRunTimeStats+0x46>
			{
				/* Create a human readable table from the binary data. */
				for( x = 0; x < uxArraySize; x++ )
 800f6ea:	2300      	movs	r3, #0
 800f6ec:	9302      	str	r3, [sp, #8]
 800f6ee:	9a02      	ldr	r2, [sp, #8]
 800f6f0:	9b03      	ldr	r3, [sp, #12]
 800f6f2:	429a      	cmp	r2, r3
 800f6f4:	d318      	bcc.n	800f728 <vTaskGetRunTimeStats+0x78>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Free the array again. */
			vPortFree( pxTaskStatusArray );
 800f6f6:	0038      	movs	r0, r7
 800f6f8:	f000 fc46 	bl	800ff88 <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f6fc:	b004      	add	sp, #16
 800f6fe:	bc80      	pop	{r7}
 800f700:	46b8      	mov	r8, r7
 800f702:	bdf0      	pop	{r4, r5, r6, r7, pc}
							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter );
 800f704:	9b02      	ldr	r3, [sp, #8]
 800f706:	015b      	lsls	r3, r3, #5
 800f708:	18fb      	adds	r3, r7, r3
 800f70a:	699a      	ldr	r2, [r3, #24]
 800f70c:	4917      	ldr	r1, [pc, #92]	; (800f76c <vTaskGetRunTimeStats+0xbc>)
 800f70e:	f007 f825 	bl	801675c <siprintf>
					pcWriteBuffer += strlen( pcWriteBuffer );
 800f712:	0020      	movs	r0, r4
 800f714:	f7f0 fd00 	bl	8000118 <strlen>
 800f718:	1824      	adds	r4, r4, r0
				for( x = 0; x < uxArraySize; x++ )
 800f71a:	9b02      	ldr	r3, [sp, #8]
 800f71c:	3301      	adds	r3, #1
 800f71e:	9302      	str	r3, [sp, #8]
 800f720:	9a02      	ldr	r2, [sp, #8]
 800f722:	9b03      	ldr	r3, [sp, #12]
 800f724:	429a      	cmp	r2, r3
 800f726:	d2e6      	bcs.n	800f6f6 <vTaskGetRunTimeStats+0x46>
					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
 800f728:	9b02      	ldr	r3, [sp, #8]
 800f72a:	015b      	lsls	r3, r3, #5
 800f72c:	18fb      	adds	r3, r7, r3
 800f72e:	699e      	ldr	r6, [r3, #24]
 800f730:	9d01      	ldr	r5, [sp, #4]
					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 800f732:	9b02      	ldr	r3, [sp, #8]
 800f734:	015b      	lsls	r3, r3, #5
 800f736:	18fb      	adds	r3, r7, r3
 800f738:	6859      	ldr	r1, [r3, #4]
 800f73a:	0020      	movs	r0, r4
 800f73c:	f7ff fa0a 	bl	800eb54 <prvWriteNameToBuffer>
 800f740:	0004      	movs	r4, r0
					if( ulStatsAsPercentage > 0UL )
 800f742:	42ae      	cmp	r6, r5
 800f744:	d3de      	bcc.n	800f704 <vTaskGetRunTimeStats+0x54>
							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter, ( unsigned int ) ulStatsAsPercentage );
 800f746:	9b02      	ldr	r3, [sp, #8]
 800f748:	4698      	mov	r8, r3
					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
 800f74a:	0029      	movs	r1, r5
 800f74c:	0030      	movs	r0, r6
 800f74e:	f7f0 fcff 	bl	8000150 <__udivsi3>
 800f752:	0003      	movs	r3, r0
							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter, ( unsigned int ) ulStatsAsPercentage );
 800f754:	4642      	mov	r2, r8
 800f756:	0152      	lsls	r2, r2, #5
 800f758:	18ba      	adds	r2, r7, r2
 800f75a:	6992      	ldr	r2, [r2, #24]
 800f75c:	4904      	ldr	r1, [pc, #16]	; (800f770 <vTaskGetRunTimeStats+0xc0>)
 800f75e:	0020      	movs	r0, r4
 800f760:	f006 fffc 	bl	801675c <siprintf>
 800f764:	e7d5      	b.n	800f712 <vTaskGetRunTimeStats+0x62>
 800f766:	46c0      	nop			; (mov r8, r8)
 800f768:	200017c8 	.word	0x200017c8
 800f76c:	0801cbbc 	.word	0x0801cbbc
 800f770:	0801cbb0 	.word	0x0801cbb0

0800f774 <pvTaskIncrementMutexHeldCount>:

	void *pvTaskIncrementMutexHeldCount( void )
	{
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800f774:	4b05      	ldr	r3, [pc, #20]	; (800f78c <pvTaskIncrementMutexHeldCount+0x18>)
 800f776:	681b      	ldr	r3, [r3, #0]
 800f778:	2b00      	cmp	r3, #0
 800f77a:	d004      	beq.n	800f786 <pvTaskIncrementMutexHeldCount+0x12>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800f77c:	4b03      	ldr	r3, [pc, #12]	; (800f78c <pvTaskIncrementMutexHeldCount+0x18>)
 800f77e:	681a      	ldr	r2, [r3, #0]
 800f780:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800f782:	3301      	adds	r3, #1
 800f784:	6513      	str	r3, [r2, #80]	; 0x50
		}

		return pxCurrentTCB;
 800f786:	4b01      	ldr	r3, [pc, #4]	; (800f78c <pvTaskIncrementMutexHeldCount+0x18>)
 800f788:	6818      	ldr	r0, [r3, #0]
	}
 800f78a:	4770      	bx	lr
 800f78c:	2000172c 	.word	0x2000172c

0800f790 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 800f790:	b570      	push	{r4, r5, r6, lr}
 800f792:	0004      	movs	r4, r0
 800f794:	000d      	movs	r5, r1
	TickType_t xTimeToWake;
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 800f796:	f000 fae3 	bl	800fd60 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 800f79a:	4b20      	ldr	r3, [pc, #128]	; (800f81c <ulTaskNotifyTake+0x8c>)
 800f79c:	681b      	ldr	r3, [r3, #0]
 800f79e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f7a0:	2b00      	cmp	r3, #0
 800f7a2:	d106      	bne.n	800f7b2 <ulTaskNotifyTake+0x22>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->eNotifyState = eWaitingNotification;
 800f7a4:	4b1d      	ldr	r3, [pc, #116]	; (800f81c <ulTaskNotifyTake+0x8c>)
 800f7a6:	681a      	ldr	r2, [r3, #0]
 800f7a8:	235c      	movs	r3, #92	; 0x5c
 800f7aa:	2101      	movs	r1, #1
 800f7ac:	54d1      	strb	r1, [r2, r3]

				if( xTicksToWait > ( TickType_t ) 0 )
 800f7ae:	2d00      	cmp	r5, #0
 800f7b0:	d117      	bne.n	800f7e2 <ulTaskNotifyTake+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800f7b2:	f000 fae1 	bl	800fd78 <vPortExitCritical>

		taskENTER_CRITICAL();
 800f7b6:	f000 fad3 	bl	800fd60 <vPortEnterCritical>
		{
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 800f7ba:	4b18      	ldr	r3, [pc, #96]	; (800f81c <ulTaskNotifyTake+0x8c>)
 800f7bc:	681b      	ldr	r3, [r3, #0]
 800f7be:	6d9d      	ldr	r5, [r3, #88]	; 0x58

			if( ulReturn != 0UL )
 800f7c0:	2d00      	cmp	r5, #0
 800f7c2:	d005      	beq.n	800f7d0 <ulTaskNotifyTake+0x40>
			{
				if( xClearCountOnExit != pdFALSE )
 800f7c4:	2c00      	cmp	r4, #0
 800f7c6:	d022      	beq.n	800f80e <ulTaskNotifyTake+0x7e>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 800f7c8:	4b14      	ldr	r3, [pc, #80]	; (800f81c <ulTaskNotifyTake+0x8c>)
 800f7ca:	681b      	ldr	r3, [r3, #0]
 800f7cc:	2200      	movs	r2, #0
 800f7ce:	659a      	str	r2, [r3, #88]	; 0x58
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->eNotifyState = eNotWaitingNotification;
 800f7d0:	4b12      	ldr	r3, [pc, #72]	; (800f81c <ulTaskNotifyTake+0x8c>)
 800f7d2:	681a      	ldr	r2, [r3, #0]
 800f7d4:	235c      	movs	r3, #92	; 0x5c
 800f7d6:	2100      	movs	r1, #0
 800f7d8:	54d1      	strb	r1, [r2, r3]
		}
		taskEXIT_CRITICAL();
 800f7da:	f000 facd 	bl	800fd78 <vPortExitCritical>

		return ulReturn;
	}
 800f7de:	0028      	movs	r0, r5
 800f7e0:	bd70      	pop	{r4, r5, r6, pc}
					if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800f7e2:	4b0e      	ldr	r3, [pc, #56]	; (800f81c <ulTaskNotifyTake+0x8c>)
 800f7e4:	6818      	ldr	r0, [r3, #0]
 800f7e6:	3004      	adds	r0, #4
 800f7e8:	f7fe fdd0 	bl	800e38c <uxListRemove>
						if( xTicksToWait == portMAX_DELAY )
 800f7ec:	1c6b      	adds	r3, r5, #1
 800f7ee:	d007      	beq.n	800f800 <ulTaskNotifyTake+0x70>
							xTimeToWake = xTickCount + xTicksToWait;
 800f7f0:	4b0b      	ldr	r3, [pc, #44]	; (800f820 <ulTaskNotifyTake+0x90>)
 800f7f2:	6818      	ldr	r0, [r3, #0]
 800f7f4:	1940      	adds	r0, r0, r5
							prvAddCurrentTaskToDelayedList( xTimeToWake );
 800f7f6:	f7ff f983 	bl	800eb00 <prvAddCurrentTaskToDelayedList>
					portYIELD_WITHIN_API();
 800f7fa:	f000 faa5 	bl	800fd48 <vPortYield>
 800f7fe:	e7d8      	b.n	800f7b2 <ulTaskNotifyTake+0x22>
							vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 800f800:	4b06      	ldr	r3, [pc, #24]	; (800f81c <ulTaskNotifyTake+0x8c>)
 800f802:	6819      	ldr	r1, [r3, #0]
 800f804:	3104      	adds	r1, #4
 800f806:	4807      	ldr	r0, [pc, #28]	; (800f824 <ulTaskNotifyTake+0x94>)
 800f808:	f7fe fd9e 	bl	800e348 <vListInsertEnd>
 800f80c:	e7f5      	b.n	800f7fa <ulTaskNotifyTake+0x6a>
					( pxCurrentTCB->ulNotifiedValue )--;
 800f80e:	4b03      	ldr	r3, [pc, #12]	; (800f81c <ulTaskNotifyTake+0x8c>)
 800f810:	681a      	ldr	r2, [r3, #0]
 800f812:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800f814:	3b01      	subs	r3, #1
 800f816:	6593      	str	r3, [r2, #88]	; 0x58
 800f818:	e7da      	b.n	800f7d0 <ulTaskNotifyTake+0x40>
 800f81a:	46c0      	nop			; (mov r8, r8)
 800f81c:	2000172c 	.word	0x2000172c
 800f820:	2000184c 	.word	0x2000184c
 800f824:	20001824 	.word	0x20001824

0800f828 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800f828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f82a:	0004      	movs	r4, r0
 800f82c:	000e      	movs	r6, r1
 800f82e:	0015      	movs	r5, r2
 800f830:	001f      	movs	r7, r3
	TCB_t * pxTCB;
	eNotifyValue eOriginalNotifyState;
	BaseType_t xReturn = pdPASS;

		configASSERT( xTaskToNotify );
 800f832:	2800      	cmp	r0, #0
 800f834:	d015      	beq.n	800f862 <xTaskGenericNotify+0x3a>
		pxTCB = ( TCB_t * ) xTaskToNotify;

		taskENTER_CRITICAL();
 800f836:	f000 fa93 	bl	800fd60 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800f83a:	2f00      	cmp	r7, #0
 800f83c:	d001      	beq.n	800f842 <xTaskGenericNotify+0x1a>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800f83e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f840:	603b      	str	r3, [r7, #0]
			}

			eOriginalNotifyState = pxTCB->eNotifyState;
 800f842:	225c      	movs	r2, #92	; 0x5c
 800f844:	5ca3      	ldrb	r3, [r4, r2]
 800f846:	b2db      	uxtb	r3, r3

			pxTCB->eNotifyState = eNotified;
 800f848:	2102      	movs	r1, #2
 800f84a:	54a1      	strb	r1, [r4, r2]

			switch( eAction )
 800f84c:	2d03      	cmp	r5, #3
 800f84e:	d01a      	beq.n	800f886 <xTaskGenericNotify+0x5e>
 800f850:	d809      	bhi.n	800f866 <xTaskGenericNotify+0x3e>
 800f852:	2d01      	cmp	r5, #1
 800f854:	d00d      	beq.n	800f872 <xTaskGenericNotify+0x4a>
 800f856:	2d02      	cmp	r5, #2
 800f858:	d10e      	bne.n	800f878 <xTaskGenericNotify+0x50>
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
					break;

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800f85a:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800f85c:	3201      	adds	r2, #1
 800f85e:	65a2      	str	r2, [r4, #88]	; 0x58
					break;
 800f860:	e00a      	b.n	800f878 <xTaskGenericNotify+0x50>
		configASSERT( xTaskToNotify );
 800f862:	b672      	cpsid	i
 800f864:	e7fe      	b.n	800f864 <xTaskGenericNotify+0x3c>
			switch( eAction )
 800f866:	2d04      	cmp	r5, #4
 800f868:	d106      	bne.n	800f878 <xTaskGenericNotify+0x50>
				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
					break;

				case eSetValueWithoutOverwrite :
					if( eOriginalNotifyState != eNotified )
 800f86a:	2b02      	cmp	r3, #2
 800f86c:	d02f      	beq.n	800f8ce <xTaskGenericNotify+0xa6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800f86e:	65a6      	str	r6, [r4, #88]	; 0x58
 800f870:	e002      	b.n	800f878 <xTaskGenericNotify+0x50>
					pxTCB->ulNotifiedValue |= ulValue;
 800f872:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800f874:	4316      	orrs	r6, r2
 800f876:	65a6      	str	r6, [r4, #88]	; 0x58
			}


			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( eOriginalNotifyState == eWaitingNotification )
 800f878:	2501      	movs	r5, #1
 800f87a:	2b01      	cmp	r3, #1
 800f87c:	d005      	beq.n	800f88a <xTaskGenericNotify+0x62>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800f87e:	f000 fa7b 	bl	800fd78 <vPortExitCritical>

		return xReturn;
	}
 800f882:	0028      	movs	r0, r5
 800f884:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					pxTCB->ulNotifiedValue = ulValue;
 800f886:	65a6      	str	r6, [r4, #88]	; 0x58
					break;
 800f888:	e7f6      	b.n	800f878 <xTaskGenericNotify+0x50>
				( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800f88a:	1d25      	adds	r5, r4, #4
 800f88c:	0028      	movs	r0, r5
 800f88e:	f7fe fd7d 	bl	800e38c <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800f892:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800f894:	4a0f      	ldr	r2, [pc, #60]	; (800f8d4 <xTaskGenericNotify+0xac>)
 800f896:	6812      	ldr	r2, [r2, #0]
 800f898:	4293      	cmp	r3, r2
 800f89a:	d901      	bls.n	800f8a0 <xTaskGenericNotify+0x78>
 800f89c:	4a0d      	ldr	r2, [pc, #52]	; (800f8d4 <xTaskGenericNotify+0xac>)
 800f89e:	6013      	str	r3, [r2, #0]
 800f8a0:	0098      	lsls	r0, r3, #2
 800f8a2:	18c0      	adds	r0, r0, r3
 800f8a4:	0080      	lsls	r0, r0, #2
 800f8a6:	4b0c      	ldr	r3, [pc, #48]	; (800f8d8 <xTaskGenericNotify+0xb0>)
 800f8a8:	18c0      	adds	r0, r0, r3
 800f8aa:	0029      	movs	r1, r5
 800f8ac:	f7fe fd4c 	bl	800e348 <vListInsertEnd>
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800f8b0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800f8b2:	2b00      	cmp	r3, #0
 800f8b4:	d001      	beq.n	800f8ba <xTaskGenericNotify+0x92>
 800f8b6:	b672      	cpsid	i
 800f8b8:	e7fe      	b.n	800f8b8 <xTaskGenericNotify+0x90>
				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800f8ba:	4b08      	ldr	r3, [pc, #32]	; (800f8dc <xTaskGenericNotify+0xb4>)
 800f8bc:	681b      	ldr	r3, [r3, #0]
 800f8be:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800f8c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f8c2:	2501      	movs	r5, #1
 800f8c4:	429a      	cmp	r2, r3
 800f8c6:	d9da      	bls.n	800f87e <xTaskGenericNotify+0x56>
					taskYIELD_IF_USING_PREEMPTION();
 800f8c8:	f000 fa3e 	bl	800fd48 <vPortYield>
 800f8cc:	e7d7      	b.n	800f87e <xTaskGenericNotify+0x56>
						xReturn = pdFAIL;
 800f8ce:	2500      	movs	r5, #0
 800f8d0:	e7d5      	b.n	800f87e <xTaskGenericNotify+0x56>
 800f8d2:	46c0      	nop			; (mov r8, r8)
 800f8d4:	200017dc 	.word	0x200017dc
 800f8d8:	20001738 	.word	0x20001738
 800f8dc:	2000172c 	.word	0x2000172c

0800f8e0 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800f8e0:	b510      	push	{r4, lr}
 800f8e2:	0004      	movs	r4, r0
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800f8e4:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f8e6:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
 800f8e8:	4291      	cmp	r1, r2
 800f8ea:	d80c      	bhi.n	800f906 <prvInsertTimerInActiveList+0x26>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
 800f8ec:	1ad2      	subs	r2, r2, r3
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800f8ee:	2001      	movs	r0, #1
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
 800f8f0:	69a3      	ldr	r3, [r4, #24]
 800f8f2:	429a      	cmp	r2, r3
 800f8f4:	d300      	bcc.n	800f8f8 <prvInsertTimerInActiveList+0x18>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
 800f8f6:	bd10      	pop	{r4, pc}
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800f8f8:	1d21      	adds	r1, r4, #4
 800f8fa:	4b09      	ldr	r3, [pc, #36]	; (800f920 <prvInsertTimerInActiveList+0x40>)
 800f8fc:	6818      	ldr	r0, [r3, #0]
 800f8fe:	f7fe fd2e 	bl	800e35e <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 800f902:	2000      	movs	r0, #0
 800f904:	e7f7      	b.n	800f8f6 <prvInsertTimerInActiveList+0x16>
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800f906:	429a      	cmp	r2, r3
 800f908:	d202      	bcs.n	800f910 <prvInsertTimerInActiveList+0x30>
			xProcessTimerNow = pdTRUE;
 800f90a:	2001      	movs	r0, #1
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800f90c:	4299      	cmp	r1, r3
 800f90e:	d2f2      	bcs.n	800f8f6 <prvInsertTimerInActiveList+0x16>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f910:	1d21      	adds	r1, r4, #4
 800f912:	4b04      	ldr	r3, [pc, #16]	; (800f924 <prvInsertTimerInActiveList+0x44>)
 800f914:	6818      	ldr	r0, [r3, #0]
 800f916:	f7fe fd22 	bl	800e35e <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 800f91a:	2000      	movs	r0, #0
 800f91c:	e7eb      	b.n	800f8f6 <prvInsertTimerInActiveList+0x16>
 800f91e:	46c0      	nop			; (mov r8, r8)
 800f920:	20001858 	.word	0x20001858
 800f924:	20001854 	.word	0x20001854

0800f928 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800f928:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800f92a:	f000 fa19 	bl	800fd60 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800f92e:	4b11      	ldr	r3, [pc, #68]	; (800f974 <prvCheckForValidListAndQueue+0x4c>)
 800f930:	681b      	ldr	r3, [r3, #0]
 800f932:	2b00      	cmp	r3, #0
 800f934:	d002      	beq.n	800f93c <prvCheckForValidListAndQueue+0x14>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f936:	f000 fa1f 	bl	800fd78 <vPortExitCritical>
}
 800f93a:	bd70      	pop	{r4, r5, r6, pc}
			vListInitialise( &xActiveTimerList1 );
 800f93c:	4d0e      	ldr	r5, [pc, #56]	; (800f978 <prvCheckForValidListAndQueue+0x50>)
 800f93e:	0028      	movs	r0, r5
 800f940:	f7fe fcf4 	bl	800e32c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800f944:	4c0d      	ldr	r4, [pc, #52]	; (800f97c <prvCheckForValidListAndQueue+0x54>)
 800f946:	0020      	movs	r0, r4
 800f948:	f7fe fcf0 	bl	800e32c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800f94c:	4b0c      	ldr	r3, [pc, #48]	; (800f980 <prvCheckForValidListAndQueue+0x58>)
 800f94e:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800f950:	4b0c      	ldr	r3, [pc, #48]	; (800f984 <prvCheckForValidListAndQueue+0x5c>)
 800f952:	601c      	str	r4, [r3, #0]
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 800f954:	2200      	movs	r2, #0
 800f956:	2110      	movs	r1, #16
 800f958:	2004      	movs	r0, #4
 800f95a:	f7fe fdec 	bl	800e536 <xQueueGenericCreate>
 800f95e:	4b05      	ldr	r3, [pc, #20]	; (800f974 <prvCheckForValidListAndQueue+0x4c>)
 800f960:	6018      	str	r0, [r3, #0]
			configASSERT( xTimerQueue );
 800f962:	2800      	cmp	r0, #0
 800f964:	d003      	beq.n	800f96e <prvCheckForValidListAndQueue+0x46>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800f966:	4908      	ldr	r1, [pc, #32]	; (800f988 <prvCheckForValidListAndQueue+0x60>)
 800f968:	f7ff f828 	bl	800e9bc <vQueueAddToRegistry>
 800f96c:	e7e3      	b.n	800f936 <prvCheckForValidListAndQueue+0xe>
			configASSERT( xTimerQueue );
 800f96e:	b672      	cpsid	i
 800f970:	e7fe      	b.n	800f970 <prvCheckForValidListAndQueue+0x48>
 800f972:	46c0      	nop			; (mov r8, r8)
 800f974:	20001888 	.word	0x20001888
 800f978:	2000185c 	.word	0x2000185c
 800f97c:	20001870 	.word	0x20001870
 800f980:	20001854 	.word	0x20001854
 800f984:	20001858 	.word	0x20001858
 800f988:	0801cbdc 	.word	0x0801cbdc

0800f98c <xTimerCreateTimerTask>:
{
 800f98c:	b500      	push	{lr}
 800f98e:	b085      	sub	sp, #20
	prvCheckForValidListAndQueue();
 800f990:	f7ff ffca 	bl	800f928 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 800f994:	4b0a      	ldr	r3, [pc, #40]	; (800f9c0 <xTimerCreateTimerTask+0x34>)
 800f996:	681b      	ldr	r3, [r3, #0]
 800f998:	2b00      	cmp	r3, #0
 800f99a:	d00d      	beq.n	800f9b8 <xTimerCreateTimerTask+0x2c>
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
 800f99c:	2300      	movs	r3, #0
 800f99e:	9303      	str	r3, [sp, #12]
 800f9a0:	9302      	str	r3, [sp, #8]
 800f9a2:	9301      	str	r3, [sp, #4]
 800f9a4:	3303      	adds	r3, #3
 800f9a6:	9300      	str	r3, [sp, #0]
 800f9a8:	2300      	movs	r3, #0
 800f9aa:	22a0      	movs	r2, #160	; 0xa0
 800f9ac:	4905      	ldr	r1, [pc, #20]	; (800f9c4 <xTimerCreateTimerTask+0x38>)
 800f9ae:	4806      	ldr	r0, [pc, #24]	; (800f9c8 <xTimerCreateTimerTask+0x3c>)
 800f9b0:	f7ff f8e6 	bl	800eb80 <xTaskGenericCreate>
	configASSERT( xReturn );
 800f9b4:	2800      	cmp	r0, #0
 800f9b6:	d101      	bne.n	800f9bc <xTimerCreateTimerTask+0x30>
 800f9b8:	b672      	cpsid	i
 800f9ba:	e7fe      	b.n	800f9ba <xTimerCreateTimerTask+0x2e>
}
 800f9bc:	b005      	add	sp, #20
 800f9be:	bd00      	pop	{pc}
 800f9c0:	20001888 	.word	0x20001888
 800f9c4:	0801cbe4 	.word	0x0801cbe4
 800f9c8:	0800fb15 	.word	0x0800fb15

0800f9cc <xTimerCreate>:
{
 800f9cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f9ce:	46c6      	mov	lr, r8
 800f9d0:	b500      	push	{lr}
 800f9d2:	4680      	mov	r8, r0
 800f9d4:	000d      	movs	r5, r1
 800f9d6:	0017      	movs	r7, r2
 800f9d8:	001e      	movs	r6, r3
	if( xTimerPeriodInTicks == ( TickType_t ) 0U )
 800f9da:	2900      	cmp	r1, #0
 800f9dc:	d014      	beq.n	800fa08 <xTimerCreate+0x3c>
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 800f9de:	202c      	movs	r0, #44	; 0x2c
 800f9e0:	f000 fa40 	bl	800fe64 <pvPortMalloc>
 800f9e4:	1e04      	subs	r4, r0, #0
		if( pxNewTimer != NULL )
 800f9e6:	d00b      	beq.n	800fa00 <xTimerCreate+0x34>
			prvCheckForValidListAndQueue();
 800f9e8:	f7ff ff9e 	bl	800f928 <prvCheckForValidListAndQueue>
			pxNewTimer->pcTimerName = pcTimerName;
 800f9ec:	4643      	mov	r3, r8
 800f9ee:	6023      	str	r3, [r4, #0]
			pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800f9f0:	61a5      	str	r5, [r4, #24]
			pxNewTimer->uxAutoReload = uxAutoReload;
 800f9f2:	61e7      	str	r7, [r4, #28]
			pxNewTimer->pvTimerID = pvTimerID;
 800f9f4:	6226      	str	r6, [r4, #32]
			pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800f9f6:	9b06      	ldr	r3, [sp, #24]
 800f9f8:	6263      	str	r3, [r4, #36]	; 0x24
			vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800f9fa:	1d20      	adds	r0, r4, #4
 800f9fc:	f7fe fca1 	bl	800e342 <vListInitialiseItem>
}
 800fa00:	0020      	movs	r0, r4
 800fa02:	bc80      	pop	{r7}
 800fa04:	46b8      	mov	r8, r7
 800fa06:	bdf0      	pop	{r4, r5, r6, r7, pc}
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800fa08:	b672      	cpsid	i
 800fa0a:	e7fe      	b.n	800fa0a <xTimerCreate+0x3e>

0800fa0c <xTimerGenericCommand>:
{
 800fa0c:	b530      	push	{r4, r5, lr}
 800fa0e:	b085      	sub	sp, #20
 800fa10:	0004      	movs	r4, r0
 800fa12:	001d      	movs	r5, r3
	if( xTimerQueue != NULL )
 800fa14:	4b12      	ldr	r3, [pc, #72]	; (800fa60 <xTimerGenericCommand+0x54>)
 800fa16:	6818      	ldr	r0, [r3, #0]
 800fa18:	2800      	cmp	r0, #0
 800fa1a:	d01f      	beq.n	800fa5c <xTimerGenericCommand+0x50>
		xMessage.xMessageID = xCommandID;
 800fa1c:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800fa1e:	9201      	str	r2, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800fa20:	9402      	str	r4, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800fa22:	2905      	cmp	r1, #5
 800fa24:	dc13      	bgt.n	800fa4e <xTimerGenericCommand+0x42>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800fa26:	f7ff fd4d 	bl	800f4c4 <xTaskGetSchedulerState>
 800fa2a:	2802      	cmp	r0, #2
 800fa2c:	d007      	beq.n	800fa3e <xTimerGenericCommand+0x32>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800fa2e:	4b0c      	ldr	r3, [pc, #48]	; (800fa60 <xTimerGenericCommand+0x54>)
 800fa30:	6818      	ldr	r0, [r3, #0]
 800fa32:	2300      	movs	r3, #0
 800fa34:	2200      	movs	r2, #0
 800fa36:	4669      	mov	r1, sp
 800fa38:	f7fe fdb6 	bl	800e5a8 <xQueueGenericSend>
 800fa3c:	e00c      	b.n	800fa58 <xTimerGenericCommand+0x4c>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800fa3e:	4b08      	ldr	r3, [pc, #32]	; (800fa60 <xTimerGenericCommand+0x54>)
 800fa40:	6818      	ldr	r0, [r3, #0]
 800fa42:	2300      	movs	r3, #0
 800fa44:	9a08      	ldr	r2, [sp, #32]
 800fa46:	4669      	mov	r1, sp
 800fa48:	f7fe fdae 	bl	800e5a8 <xQueueGenericSend>
 800fa4c:	e004      	b.n	800fa58 <xTimerGenericCommand+0x4c>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800fa4e:	2300      	movs	r3, #0
 800fa50:	002a      	movs	r2, r5
 800fa52:	4669      	mov	r1, sp
 800fa54:	f7fe fe44 	bl	800e6e0 <xQueueGenericSendFromISR>
}
 800fa58:	b005      	add	sp, #20
 800fa5a:	bd30      	pop	{r4, r5, pc}
BaseType_t xReturn = pdFAIL;
 800fa5c:	2000      	movs	r0, #0
	return xReturn;
 800fa5e:	e7fb      	b.n	800fa58 <xTimerGenericCommand+0x4c>
 800fa60:	20001888 	.word	0x20001888

0800fa64 <prvSampleTimeNow>:
{
 800fa64:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fa66:	46d6      	mov	lr, sl
 800fa68:	464f      	mov	r7, r9
 800fa6a:	4646      	mov	r6, r8
 800fa6c:	b5c0      	push	{r6, r7, lr}
 800fa6e:	b084      	sub	sp, #16
 800fa70:	0006      	movs	r6, r0
	xTimeNow = xTaskGetTickCount();
 800fa72:	f7ff fa1f 	bl	800eeb4 <xTaskGetTickCount>
 800fa76:	0004      	movs	r4, r0
	if( xTimeNow < xLastTime )
 800fa78:	4b23      	ldr	r3, [pc, #140]	; (800fb08 <prvSampleTimeNow+0xa4>)
 800fa7a:	681b      	ldr	r3, [r3, #0]
 800fa7c:	4283      	cmp	r3, r0
 800fa7e:	d80a      	bhi.n	800fa96 <prvSampleTimeNow+0x32>
		*pxTimerListsWereSwitched = pdFALSE;
 800fa80:	2300      	movs	r3, #0
 800fa82:	6033      	str	r3, [r6, #0]
	xLastTime = xTimeNow;
 800fa84:	4b20      	ldr	r3, [pc, #128]	; (800fb08 <prvSampleTimeNow+0xa4>)
 800fa86:	601c      	str	r4, [r3, #0]
}
 800fa88:	0020      	movs	r0, r4
 800fa8a:	b004      	add	sp, #16
 800fa8c:	bce0      	pop	{r5, r6, r7}
 800fa8e:	46ba      	mov	sl, r7
 800fa90:	46b1      	mov	r9, r6
 800fa92:	46a8      	mov	r8, r5
 800fa94:	bdf0      	pop	{r4, r5, r6, r7, pc}
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800fa96:	4b1d      	ldr	r3, [pc, #116]	; (800fb0c <prvSampleTimeNow+0xa8>)
 800fa98:	4698      	mov	r8, r3
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800fa9a:	2300      	movs	r3, #0
 800fa9c:	4699      	mov	r9, r3
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800fa9e:	4643      	mov	r3, r8
 800faa0:	681b      	ldr	r3, [r3, #0]
 800faa2:	681a      	ldr	r2, [r3, #0]
 800faa4:	2a00      	cmp	r2, #0
 800faa6:	d026      	beq.n	800faf6 <prvSampleTimeNow+0x92>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800faa8:	68db      	ldr	r3, [r3, #12]
 800faaa:	681a      	ldr	r2, [r3, #0]
 800faac:	4692      	mov	sl, r2
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800faae:	68dd      	ldr	r5, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800fab0:	1d2f      	adds	r7, r5, #4
 800fab2:	0038      	movs	r0, r7
 800fab4:	f7fe fc6a 	bl	800e38c <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800fab8:	0028      	movs	r0, r5
 800faba:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800fabc:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800fabe:	69eb      	ldr	r3, [r5, #28]
 800fac0:	2b01      	cmp	r3, #1
 800fac2:	d1ec      	bne.n	800fa9e <prvSampleTimeNow+0x3a>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800fac4:	69ab      	ldr	r3, [r5, #24]
 800fac6:	4453      	add	r3, sl
			if( xReloadTime > xNextExpireTime )
 800fac8:	459a      	cmp	sl, r3
 800faca:	d209      	bcs.n	800fae0 <prvSampleTimeNow+0x7c>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800facc:	606b      	str	r3, [r5, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800face:	612d      	str	r5, [r5, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800fad0:	4b0e      	ldr	r3, [pc, #56]	; (800fb0c <prvSampleTimeNow+0xa8>)
 800fad2:	681b      	ldr	r3, [r3, #0]
 800fad4:	9303      	str	r3, [sp, #12]
 800fad6:	0039      	movs	r1, r7
 800fad8:	0018      	movs	r0, r3
 800fada:	f7fe fc40 	bl	800e35e <vListInsert>
 800fade:	e7de      	b.n	800fa9e <prvSampleTimeNow+0x3a>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800fae0:	464b      	mov	r3, r9
 800fae2:	9300      	str	r3, [sp, #0]
 800fae4:	4652      	mov	r2, sl
 800fae6:	4649      	mov	r1, r9
 800fae8:	0028      	movs	r0, r5
 800faea:	f7ff ff8f 	bl	800fa0c <xTimerGenericCommand>
				configASSERT( xResult );
 800faee:	2800      	cmp	r0, #0
 800faf0:	d1d5      	bne.n	800fa9e <prvSampleTimeNow+0x3a>
 800faf2:	b672      	cpsid	i
 800faf4:	e7fe      	b.n	800faf4 <prvSampleTimeNow+0x90>
	pxCurrentTimerList = pxOverflowTimerList;
 800faf6:	4a06      	ldr	r2, [pc, #24]	; (800fb10 <prvSampleTimeNow+0xac>)
 800faf8:	4904      	ldr	r1, [pc, #16]	; (800fb0c <prvSampleTimeNow+0xa8>)
 800fafa:	6810      	ldr	r0, [r2, #0]
 800fafc:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
 800fafe:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
 800fb00:	2301      	movs	r3, #1
 800fb02:	6033      	str	r3, [r6, #0]
 800fb04:	e7be      	b.n	800fa84 <prvSampleTimeNow+0x20>
 800fb06:	46c0      	nop			; (mov r8, r8)
 800fb08:	20001884 	.word	0x20001884
 800fb0c:	20001854 	.word	0x20001854
 800fb10:	20001858 	.word	0x20001858

0800fb14 <prvTimerTask>:
{
 800fb14:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fb16:	b08d      	sub	sp, #52	; 0x34
 800fb18:	4d57      	ldr	r5, [pc, #348]	; (800fc78 <prvTimerTask+0x164>)
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800fb1a:	4b58      	ldr	r3, [pc, #352]	; (800fc7c <prvTimerTask+0x168>)
 800fb1c:	681b      	ldr	r3, [r3, #0]
 800fb1e:	681e      	ldr	r6, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800fb20:	2e00      	cmp	r6, #0
 800fb22:	d100      	bne.n	800fb26 <prvTimerTask+0x12>
 800fb24:	e09b      	b.n	800fc5e <prvTimerTask+0x14a>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800fb26:	68db      	ldr	r3, [r3, #12]
 800fb28:	681e      	ldr	r6, [r3, #0]
	vTaskSuspendAll();
 800fb2a:	f7ff f9bb 	bl	800eea4 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800fb2e:	a808      	add	r0, sp, #32
 800fb30:	f7ff ff98 	bl	800fa64 <prvSampleTimeNow>
 800fb34:	0004      	movs	r4, r0
		if( xTimerListsWereSwitched == pdFALSE )
 800fb36:	9b08      	ldr	r3, [sp, #32]
 800fb38:	2b00      	cmp	r3, #0
 800fb3a:	d000      	beq.n	800fb3e <prvTimerTask+0x2a>
 800fb3c:	e099      	b.n	800fc72 <prvTimerTask+0x15e>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800fb3e:	4286      	cmp	r6, r0
 800fb40:	d90a      	bls.n	800fb58 <prvTimerTask+0x44>
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
 800fb42:	1b31      	subs	r1, r6, r4
 800fb44:	4b4e      	ldr	r3, [pc, #312]	; (800fc80 <prvTimerTask+0x16c>)
 800fb46:	6818      	ldr	r0, [r3, #0]
 800fb48:	f7fe ff4c 	bl	800e9e4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800fb4c:	f7ff fa52 	bl	800eff4 <xTaskResumeAll>
 800fb50:	2800      	cmp	r0, #0
 800fb52:	d025      	beq.n	800fba0 <prvTimerTask+0x8c>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800fb54:	4c4a      	ldr	r4, [pc, #296]	; (800fc80 <prvTimerTask+0x16c>)
}
 800fb56:	e033      	b.n	800fbc0 <prvTimerTask+0xac>
				( void ) xTaskResumeAll();
 800fb58:	f7ff fa4c 	bl	800eff4 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800fb5c:	4b47      	ldr	r3, [pc, #284]	; (800fc7c <prvTimerTask+0x168>)
 800fb5e:	681b      	ldr	r3, [r3, #0]
 800fb60:	68db      	ldr	r3, [r3, #12]
 800fb62:	68df      	ldr	r7, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800fb64:	1d38      	adds	r0, r7, #4
 800fb66:	f7fe fc11 	bl	800e38c <uxListRemove>
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800fb6a:	69fb      	ldr	r3, [r7, #28]
 800fb6c:	2b01      	cmp	r3, #1
 800fb6e:	d003      	beq.n	800fb78 <prvTimerTask+0x64>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800fb70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb72:	0038      	movs	r0, r7
 800fb74:	4798      	blx	r3
}
 800fb76:	e7ed      	b.n	800fb54 <prvTimerTask+0x40>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
 800fb78:	69bb      	ldr	r3, [r7, #24]
 800fb7a:	18f1      	adds	r1, r6, r3
 800fb7c:	0033      	movs	r3, r6
 800fb7e:	0022      	movs	r2, r4
 800fb80:	0038      	movs	r0, r7
 800fb82:	f7ff fead 	bl	800f8e0 <prvInsertTimerInActiveList>
 800fb86:	2801      	cmp	r0, #1
 800fb88:	d1f2      	bne.n	800fb70 <prvTimerTask+0x5c>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800fb8a:	2100      	movs	r1, #0
 800fb8c:	9100      	str	r1, [sp, #0]
 800fb8e:	000b      	movs	r3, r1
 800fb90:	0032      	movs	r2, r6
 800fb92:	0038      	movs	r0, r7
 800fb94:	f7ff ff3a 	bl	800fa0c <xTimerGenericCommand>
			configASSERT( xResult );
 800fb98:	2800      	cmp	r0, #0
 800fb9a:	d1e9      	bne.n	800fb70 <prvTimerTask+0x5c>
 800fb9c:	b672      	cpsid	i
 800fb9e:	e7fe      	b.n	800fb9e <prvTimerTask+0x8a>
					portYIELD_WITHIN_API();
 800fba0:	f000 f8d2 	bl	800fd48 <vPortYield>
 800fba4:	e7d6      	b.n	800fb54 <prvTimerTask+0x40>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800fba6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fba8:	9303      	str	r3, [sp, #12]
 800fbaa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fbac:	9304      	str	r3, [sp, #16]
 800fbae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fbb0:	9305      	str	r3, [sp, #20]
 800fbb2:	9903      	ldr	r1, [sp, #12]
 800fbb4:	9804      	ldr	r0, [sp, #16]
 800fbb6:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800fbb8:	9b08      	ldr	r3, [sp, #32]
 800fbba:	9303      	str	r3, [sp, #12]
 800fbbc:	2b00      	cmp	r3, #0
 800fbbe:	da0b      	bge.n	800fbd8 <prvTimerTask+0xc4>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800fbc0:	2300      	movs	r3, #0
 800fbc2:	2200      	movs	r2, #0
 800fbc4:	a908      	add	r1, sp, #32
 800fbc6:	6820      	ldr	r0, [r4, #0]
 800fbc8:	f7fe fe0e 	bl	800e7e8 <xQueueGenericReceive>
 800fbcc:	2800      	cmp	r0, #0
 800fbce:	d0a4      	beq.n	800fb1a <prvTimerTask+0x6>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800fbd0:	9b08      	ldr	r3, [sp, #32]
 800fbd2:	9303      	str	r3, [sp, #12]
 800fbd4:	2b00      	cmp	r3, #0
 800fbd6:	dbe6      	blt.n	800fba6 <prvTimerTask+0x92>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800fbd8:	9e0a      	ldr	r6, [sp, #40]	; 0x28
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 800fbda:	6973      	ldr	r3, [r6, #20]
 800fbdc:	2b00      	cmp	r3, #0
 800fbde:	d002      	beq.n	800fbe6 <prvTimerTask+0xd2>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800fbe0:	1d30      	adds	r0, r6, #4
 800fbe2:	f7fe fbd3 	bl	800e38c <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800fbe6:	a807      	add	r0, sp, #28
 800fbe8:	f7ff ff3c 	bl	800fa64 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 800fbec:	9b08      	ldr	r3, [sp, #32]
 800fbee:	9303      	str	r3, [sp, #12]
 800fbf0:	2b09      	cmp	r3, #9
 800fbf2:	d8e5      	bhi.n	800fbc0 <prvTimerTask+0xac>
 800fbf4:	009b      	lsls	r3, r3, #2
 800fbf6:	58eb      	ldr	r3, [r5, r3]
 800fbf8:	469f      	mov	pc, r3
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) == pdTRUE )
 800fbfa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fbfc:	69b2      	ldr	r2, [r6, #24]
 800fbfe:	4694      	mov	ip, r2
 800fc00:	4463      	add	r3, ip
 800fc02:	0019      	movs	r1, r3
 800fc04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fc06:	0002      	movs	r2, r0
 800fc08:	0030      	movs	r0, r6
 800fc0a:	f7ff fe69 	bl	800f8e0 <prvInsertTimerInActiveList>
 800fc0e:	2801      	cmp	r0, #1
 800fc10:	d1d6      	bne.n	800fbc0 <prvTimerTask+0xac>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800fc12:	0030      	movs	r0, r6
 800fc14:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800fc16:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800fc18:	69f3      	ldr	r3, [r6, #28]
 800fc1a:	2b01      	cmp	r3, #1
 800fc1c:	d1d0      	bne.n	800fbc0 <prvTimerTask+0xac>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800fc1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fc20:	69b1      	ldr	r1, [r6, #24]
 800fc22:	468c      	mov	ip, r1
 800fc24:	4463      	add	r3, ip
 800fc26:	001a      	movs	r2, r3
 800fc28:	2300      	movs	r3, #0
 800fc2a:	9300      	str	r3, [sp, #0]
 800fc2c:	2100      	movs	r1, #0
 800fc2e:	0030      	movs	r0, r6
 800fc30:	f7ff feec 	bl	800fa0c <xTimerGenericCommand>
							configASSERT( xResult );
 800fc34:	2800      	cmp	r0, #0
 800fc36:	d1c3      	bne.n	800fbc0 <prvTimerTask+0xac>
 800fc38:	b672      	cpsid	i
 800fc3a:	e7fe      	b.n	800fc3a <prvTimerTask+0x126>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800fc3c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800fc3e:	61b1      	str	r1, [r6, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800fc40:	2900      	cmp	r1, #0
 800fc42:	d006      	beq.n	800fc52 <prvTimerTask+0x13e>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800fc44:	1841      	adds	r1, r0, r1
 800fc46:	0003      	movs	r3, r0
 800fc48:	0002      	movs	r2, r0
 800fc4a:	0030      	movs	r0, r6
 800fc4c:	f7ff fe48 	bl	800f8e0 <prvInsertTimerInActiveList>
					break;
 800fc50:	e7b6      	b.n	800fbc0 <prvTimerTask+0xac>
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800fc52:	b672      	cpsid	i
 800fc54:	e7fe      	b.n	800fc54 <prvTimerTask+0x140>
					vPortFree( pxTimer );
 800fc56:	0030      	movs	r0, r6
 800fc58:	f000 f996 	bl	800ff88 <vPortFree>
					break;
 800fc5c:	e7b0      	b.n	800fbc0 <prvTimerTask+0xac>
	vTaskSuspendAll();
 800fc5e:	f7ff f921 	bl	800eea4 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800fc62:	a808      	add	r0, sp, #32
 800fc64:	f7ff fefe 	bl	800fa64 <prvSampleTimeNow>
 800fc68:	0004      	movs	r4, r0
		if( xTimerListsWereSwitched == pdFALSE )
 800fc6a:	9b08      	ldr	r3, [sp, #32]
 800fc6c:	2b00      	cmp	r3, #0
 800fc6e:	d100      	bne.n	800fc72 <prvTimerTask+0x15e>
 800fc70:	e767      	b.n	800fb42 <prvTimerTask+0x2e>
			( void ) xTaskResumeAll();
 800fc72:	f7ff f9bf 	bl	800eff4 <xTaskResumeAll>
 800fc76:	e76d      	b.n	800fb54 <prvTimerTask+0x40>
 800fc78:	0801cbec 	.word	0x0801cbec
 800fc7c:	20001854 	.word	0x20001854
 800fc80:	20001888 	.word	0x20001888

0800fc84 <pvTimerGetTimerID>:
	return xTimerIsInActiveList;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 800fc84:	b510      	push	{r4, lr}
 800fc86:	1e04      	subs	r4, r0, #0
Timer_t * const pxTimer = ( Timer_t * ) xTimer;
void *pvReturn;

	configASSERT( xTimer );
 800fc88:	d006      	beq.n	800fc98 <pvTimerGetTimerID+0x14>

	taskENTER_CRITICAL();
 800fc8a:	f000 f869 	bl	800fd60 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 800fc8e:	6a24      	ldr	r4, [r4, #32]
	}
	taskEXIT_CRITICAL();
 800fc90:	f000 f872 	bl	800fd78 <vPortExitCritical>

	return pvReturn;
}
 800fc94:	0020      	movs	r0, r4
 800fc96:	bd10      	pop	{r4, pc}
	configASSERT( xTimer );
 800fc98:	b672      	cpsid	i
 800fc9a:	e7fe      	b.n	800fc9a <pvTimerGetTimerID+0x16>

0800fc9c <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800fc9c:	4b03      	ldr	r3, [pc, #12]	; (800fcac <prvTaskExitError+0x10>)
 800fc9e:	681b      	ldr	r3, [r3, #0]
 800fca0:	3301      	adds	r3, #1
 800fca2:	d001      	beq.n	800fca8 <prvTaskExitError+0xc>
 800fca4:	b672      	cpsid	i
 800fca6:	e7fe      	b.n	800fca6 <prvTaskExitError+0xa>
	portDISABLE_INTERRUPTS();
 800fca8:	b672      	cpsid	i
	for( ;; );
 800fcaa:	e7fe      	b.n	800fcaa <prvTaskExitError+0xe>
 800fcac:	200000a8 	.word	0x200000a8

0800fcb0 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 800fcb0:	4a06      	ldr	r2, [pc, #24]	; (800fccc <pxCurrentTCBConst2>)
 800fcb2:	6813      	ldr	r3, [r2, #0]
 800fcb4:	6818      	ldr	r0, [r3, #0]
 800fcb6:	3020      	adds	r0, #32
 800fcb8:	f380 8809 	msr	PSP, r0
 800fcbc:	2002      	movs	r0, #2
 800fcbe:	f380 8814 	msr	CONTROL, r0
 800fcc2:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 800fcc4:	46ae      	mov	lr, r5
 800fcc6:	b662      	cpsie	i
 800fcc8:	bd00      	pop	{pc}
 800fcca:	46c0      	nop			; (mov r8, r8)

0800fccc <pxCurrentTCBConst2>:
 800fccc:	2000172c 	.word	0x2000172c

0800fcd0 <pxPortInitialiseStack>:
{
 800fcd0:	b510      	push	{r4, lr}
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800fcd2:	1f03      	subs	r3, r0, #4
 800fcd4:	2480      	movs	r4, #128	; 0x80
 800fcd6:	0464      	lsls	r4, r4, #17
 800fcd8:	601c      	str	r4, [r3, #0]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 800fcda:	3b04      	subs	r3, #4
 800fcdc:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800fcde:	3b04      	subs	r3, #4
 800fce0:	4902      	ldr	r1, [pc, #8]	; (800fcec <pxPortInitialiseStack+0x1c>)
 800fce2:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800fce4:	3b14      	subs	r3, #20
 800fce6:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 800fce8:	3840      	subs	r0, #64	; 0x40
}
 800fcea:	bd10      	pop	{r4, pc}
 800fcec:	0800fc9d 	.word	0x0800fc9d

0800fcf0 <SVC_Handler>:
}
 800fcf0:	4770      	bx	lr
	...

0800fcf4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800fcf4:	b510      	push	{r4, lr}
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 800fcf6:	4b0f      	ldr	r3, [pc, #60]	; (800fd34 <xPortStartScheduler+0x40>)
 800fcf8:	6819      	ldr	r1, [r3, #0]
 800fcfa:	22ff      	movs	r2, #255	; 0xff
 800fcfc:	0412      	lsls	r2, r2, #16
 800fcfe:	430a      	orrs	r2, r1
 800fd00:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 800fd02:	6819      	ldr	r1, [r3, #0]
 800fd04:	22ff      	movs	r2, #255	; 0xff
 800fd06:	0612      	lsls	r2, r2, #24
 800fd08:	430a      	orrs	r2, r1
 800fd0a:	601a      	str	r2, [r3, #0]
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800fd0c:	4b0a      	ldr	r3, [pc, #40]	; (800fd38 <xPortStartScheduler+0x44>)
 800fd0e:	6818      	ldr	r0, [r3, #0]
 800fd10:	21fa      	movs	r1, #250	; 0xfa
 800fd12:	0089      	lsls	r1, r1, #2
 800fd14:	f7f0 fa1c 	bl	8000150 <__udivsi3>
 800fd18:	3801      	subs	r0, #1
 800fd1a:	4b08      	ldr	r3, [pc, #32]	; (800fd3c <xPortStartScheduler+0x48>)
 800fd1c:	6018      	str	r0, [r3, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 800fd1e:	4b08      	ldr	r3, [pc, #32]	; (800fd40 <xPortStartScheduler+0x4c>)
 800fd20:	2207      	movs	r2, #7
 800fd22:	601a      	str	r2, [r3, #0]
	uxCriticalNesting = 0;
 800fd24:	4b07      	ldr	r3, [pc, #28]	; (800fd44 <xPortStartScheduler+0x50>)
 800fd26:	2200      	movs	r2, #0
 800fd28:	601a      	str	r2, [r3, #0]
	vPortStartFirstTask();
 800fd2a:	f7ff ffc1 	bl	800fcb0 <vPortStartFirstTask>
	prvTaskExitError();
 800fd2e:	f7ff ffb5 	bl	800fc9c <prvTaskExitError>
 800fd32:	46c0      	nop			; (mov r8, r8)
 800fd34:	e000ed20 	.word	0xe000ed20
 800fd38:	20000094 	.word	0x20000094
 800fd3c:	e000e014 	.word	0xe000e014
 800fd40:	e000e010 	.word	0xe000e010
 800fd44:	200000a8 	.word	0x200000a8

0800fd48 <vPortYield>:
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 800fd48:	4b04      	ldr	r3, [pc, #16]	; (800fd5c <vPortYield+0x14>)
 800fd4a:	2280      	movs	r2, #128	; 0x80
 800fd4c:	0552      	lsls	r2, r2, #21
 800fd4e:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" );
 800fd50:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 800fd54:	f3bf 8f6f 	isb	sy
}
 800fd58:	4770      	bx	lr
 800fd5a:	46c0      	nop			; (mov r8, r8)
 800fd5c:	e000ed04 	.word	0xe000ed04

0800fd60 <vPortEnterCritical>:
    portDISABLE_INTERRUPTS();
 800fd60:	b672      	cpsid	i
    uxCriticalNesting++;
 800fd62:	4a04      	ldr	r2, [pc, #16]	; (800fd74 <vPortEnterCritical+0x14>)
 800fd64:	6813      	ldr	r3, [r2, #0]
 800fd66:	3301      	adds	r3, #1
 800fd68:	6013      	str	r3, [r2, #0]
	__asm volatile( "dsb" );
 800fd6a:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 800fd6e:	f3bf 8f6f 	isb	sy
}
 800fd72:	4770      	bx	lr
 800fd74:	200000a8 	.word	0x200000a8

0800fd78 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 800fd78:	4b06      	ldr	r3, [pc, #24]	; (800fd94 <vPortExitCritical+0x1c>)
 800fd7a:	681b      	ldr	r3, [r3, #0]
 800fd7c:	2b00      	cmp	r3, #0
 800fd7e:	d101      	bne.n	800fd84 <vPortExitCritical+0xc>
 800fd80:	b672      	cpsid	i
 800fd82:	e7fe      	b.n	800fd82 <vPortExitCritical+0xa>
    uxCriticalNesting--;
 800fd84:	3b01      	subs	r3, #1
 800fd86:	4a03      	ldr	r2, [pc, #12]	; (800fd94 <vPortExitCritical+0x1c>)
 800fd88:	6013      	str	r3, [r2, #0]
    if( uxCriticalNesting == 0 )
 800fd8a:	2b00      	cmp	r3, #0
 800fd8c:	d100      	bne.n	800fd90 <vPortExitCritical+0x18>
        portENABLE_INTERRUPTS();
 800fd8e:	b662      	cpsie	i
}
 800fd90:	4770      	bx	lr
 800fd92:	46c0      	nop			; (mov r8, r8)
 800fd94:	200000a8 	.word	0x200000a8

0800fd98 <ulSetInterruptMaskFromISR>:
	__asm volatile(
 800fd98:	f3ef 8010 	mrs	r0, PRIMASK
 800fd9c:	b672      	cpsid	i
 800fd9e:	4770      	bx	lr
}
 800fda0:	2000      	movs	r0, #0

0800fda2 <vClearInterruptMaskFromISR>:
	__asm volatile(
 800fda2:	f380 8810 	msr	PRIMASK, r0
 800fda6:	4770      	bx	lr

0800fda8 <PendSV_Handler>:
	__asm volatile
 800fda8:	f3ef 8009 	mrs	r0, PSP
 800fdac:	4b0e      	ldr	r3, [pc, #56]	; (800fde8 <pxCurrentTCBConst>)
 800fdae:	681a      	ldr	r2, [r3, #0]
 800fdb0:	3820      	subs	r0, #32
 800fdb2:	6010      	str	r0, [r2, #0]
 800fdb4:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800fdb6:	4644      	mov	r4, r8
 800fdb8:	464d      	mov	r5, r9
 800fdba:	4656      	mov	r6, sl
 800fdbc:	465f      	mov	r7, fp
 800fdbe:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800fdc0:	b508      	push	{r3, lr}
 800fdc2:	b672      	cpsid	i
 800fdc4:	f7ff fa36 	bl	800f234 <vTaskSwitchContext>
 800fdc8:	b662      	cpsie	i
 800fdca:	bc0c      	pop	{r2, r3}
 800fdcc:	6811      	ldr	r1, [r2, #0]
 800fdce:	6808      	ldr	r0, [r1, #0]
 800fdd0:	3010      	adds	r0, #16
 800fdd2:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800fdd4:	46a0      	mov	r8, r4
 800fdd6:	46a9      	mov	r9, r5
 800fdd8:	46b2      	mov	sl, r6
 800fdda:	46bb      	mov	fp, r7
 800fddc:	f380 8809 	msr	PSP, r0
 800fde0:	3820      	subs	r0, #32
 800fde2:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800fde4:	4718      	bx	r3
 800fde6:	46c0      	nop			; (mov r8, r8)

0800fde8 <pxCurrentTCBConst>:
 800fde8:	2000172c 	.word	0x2000172c

0800fdec <xPortSysTickHandler>:
{
 800fdec:	b510      	push	{r4, lr}
	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 800fdee:	f7ff ffd3 	bl	800fd98 <ulSetInterruptMaskFromISR>
 800fdf2:	0004      	movs	r4, r0
		if( xTaskIncrementTick() != pdFALSE )
 800fdf4:	f7ff f86a 	bl	800eecc <xTaskIncrementTick>
 800fdf8:	2800      	cmp	r0, #0
 800fdfa:	d003      	beq.n	800fe04 <xPortSysTickHandler+0x18>
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 800fdfc:	4b03      	ldr	r3, [pc, #12]	; (800fe0c <xPortSysTickHandler+0x20>)
 800fdfe:	2280      	movs	r2, #128	; 0x80
 800fe00:	0552      	lsls	r2, r2, #21
 800fe02:	601a      	str	r2, [r3, #0]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 800fe04:	0020      	movs	r0, r4
 800fe06:	f7ff ffcc 	bl	800fda2 <vClearInterruptMaskFromISR>
}
 800fe0a:	bd10      	pop	{r4, pc}
 800fe0c:	e000ed04 	.word	0xe000ed04

0800fe10 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800fe10:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800fe12:	4b12      	ldr	r3, [pc, #72]	; (800fe5c <prvInsertBlockIntoFreeList+0x4c>)
 800fe14:	001a      	movs	r2, r3
 800fe16:	681b      	ldr	r3, [r3, #0]
 800fe18:	4283      	cmp	r3, r0
 800fe1a:	d3fb      	bcc.n	800fe14 <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800fe1c:	6851      	ldr	r1, [r2, #4]
 800fe1e:	1854      	adds	r4, r2, r1
 800fe20:	42a0      	cmp	r0, r4
 800fe22:	d008      	beq.n	800fe36 <prvInsertBlockIntoFreeList+0x26>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800fe24:	6841      	ldr	r1, [r0, #4]
 800fe26:	1844      	adds	r4, r0, r1
 800fe28:	42a3      	cmp	r3, r4
 800fe2a:	d009      	beq.n	800fe40 <prvInsertBlockIntoFreeList+0x30>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800fe2c:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800fe2e:	4290      	cmp	r0, r2
 800fe30:	d000      	beq.n	800fe34 <prvInsertBlockIntoFreeList+0x24>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800fe32:	6010      	str	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800fe34:	bd10      	pop	{r4, pc}
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800fe36:	6840      	ldr	r0, [r0, #4]
 800fe38:	1841      	adds	r1, r0, r1
 800fe3a:	6051      	str	r1, [r2, #4]
		pxBlockToInsert = pxIterator;
 800fe3c:	0010      	movs	r0, r2
 800fe3e:	e7f1      	b.n	800fe24 <prvInsertBlockIntoFreeList+0x14>
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800fe40:	4c07      	ldr	r4, [pc, #28]	; (800fe60 <prvInsertBlockIntoFreeList+0x50>)
 800fe42:	6824      	ldr	r4, [r4, #0]
 800fe44:	42a3      	cmp	r3, r4
 800fe46:	d006      	beq.n	800fe56 <prvInsertBlockIntoFreeList+0x46>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800fe48:	685b      	ldr	r3, [r3, #4]
 800fe4a:	1859      	adds	r1, r3, r1
 800fe4c:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800fe4e:	6813      	ldr	r3, [r2, #0]
 800fe50:	681b      	ldr	r3, [r3, #0]
 800fe52:	6003      	str	r3, [r0, #0]
 800fe54:	e7eb      	b.n	800fe2e <prvInsertBlockIntoFreeList+0x1e>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800fe56:	6004      	str	r4, [r0, #0]
 800fe58:	e7e9      	b.n	800fe2e <prvInsertBlockIntoFreeList+0x1e>
 800fe5a:	46c0      	nop			; (mov r8, r8)
 800fe5c:	200062d4 	.word	0x200062d4
 800fe60:	2000188c 	.word	0x2000188c

0800fe64 <pvPortMalloc>:
{
 800fe64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fe66:	0004      	movs	r4, r0
	vTaskSuspendAll();
 800fe68:	f7ff f81c 	bl	800eea4 <vTaskSuspendAll>
		if( pxEnd == NULL )
 800fe6c:	4b3f      	ldr	r3, [pc, #252]	; (800ff6c <pvPortMalloc+0x108>)
 800fe6e:	681b      	ldr	r3, [r3, #0]
 800fe70:	2b00      	cmp	r3, #0
 800fe72:	d015      	beq.n	800fea0 <pvPortMalloc+0x3c>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800fe74:	4b3e      	ldr	r3, [pc, #248]	; (800ff70 <pvPortMalloc+0x10c>)
 800fe76:	681e      	ldr	r6, [r3, #0]
 800fe78:	4234      	tst	r4, r6
 800fe7a:	d135      	bne.n	800fee8 <pvPortMalloc+0x84>
			if( xWantedSize > 0 )
 800fe7c:	2c00      	cmp	r4, #0
 800fe7e:	d03a      	beq.n	800fef6 <pvPortMalloc+0x92>
				xWantedSize += xHeapStructSize;
 800fe80:	0023      	movs	r3, r4
 800fe82:	3308      	adds	r3, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800fe84:	0762      	lsls	r2, r4, #29
 800fe86:	d002      	beq.n	800fe8e <pvPortMalloc+0x2a>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800fe88:	2207      	movs	r2, #7
 800fe8a:	4393      	bics	r3, r2
 800fe8c:	3308      	adds	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800fe8e:	2b00      	cmp	r3, #0
 800fe90:	d031      	beq.n	800fef6 <pvPortMalloc+0x92>
 800fe92:	4a38      	ldr	r2, [pc, #224]	; (800ff74 <pvPortMalloc+0x110>)
 800fe94:	6815      	ldr	r5, [r2, #0]
 800fe96:	429d      	cmp	r5, r3
 800fe98:	d330      	bcc.n	800fefc <pvPortMalloc+0x98>
				pxBlock = xStart.pxNextFreeBlock;
 800fe9a:	4a37      	ldr	r2, [pc, #220]	; (800ff78 <pvPortMalloc+0x114>)
 800fe9c:	6814      	ldr	r4, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800fe9e:	e032      	b.n	800ff06 <pvPortMalloc+0xa2>
	ulAddress = ( uint32_t ) ucHeap;
 800fea0:	4a36      	ldr	r2, [pc, #216]	; (800ff7c <pvPortMalloc+0x118>)
	if( ( ulAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800fea2:	0753      	lsls	r3, r2, #29
 800fea4:	d01e      	beq.n	800fee4 <pvPortMalloc+0x80>
		ulAddress += ( portBYTE_ALIGNMENT - 1 );
 800fea6:	1dd1      	adds	r1, r2, #7
		ulAddress &= ~( ( uint32_t ) portBYTE_ALIGNMENT_MASK );
 800fea8:	2307      	movs	r3, #7
 800feaa:	4399      	bics	r1, r3
		xTotalHeapSize -= ulAddress - ( uint32_t ) ucHeap;
 800feac:	4b34      	ldr	r3, [pc, #208]	; (800ff80 <pvPortMalloc+0x11c>)
 800feae:	18d3      	adds	r3, r2, r3
 800feb0:	1a5b      	subs	r3, r3, r1
		ulAddress &= ~( ( uint32_t ) portBYTE_ALIGNMENT_MASK );
 800feb2:	000a      	movs	r2, r1
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800feb4:	4830      	ldr	r0, [pc, #192]	; (800ff78 <pvPortMalloc+0x114>)
 800feb6:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800feb8:	2100      	movs	r1, #0
 800feba:	6041      	str	r1, [r0, #4]
	ulAddress = ( ( uint32_t ) pucAlignedHeap ) + xTotalHeapSize;
 800febc:	18d3      	adds	r3, r2, r3
	ulAddress -= xHeapStructSize;
 800febe:	3b08      	subs	r3, #8
	ulAddress &= ~( ( uint32_t ) portBYTE_ALIGNMENT_MASK );
 800fec0:	2007      	movs	r0, #7
 800fec2:	4383      	bics	r3, r0
	pxEnd = ( void * ) ulAddress;
 800fec4:	4829      	ldr	r0, [pc, #164]	; (800ff6c <pvPortMalloc+0x108>)
 800fec6:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 800fec8:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800feca:	6019      	str	r1, [r3, #0]
	pxFirstFreeBlock->xBlockSize = ulAddress - ( uint32_t ) pxFirstFreeBlock;
 800fecc:	1a99      	subs	r1, r3, r2
 800fece:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800fed0:	6013      	str	r3, [r2, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800fed2:	4b2c      	ldr	r3, [pc, #176]	; (800ff84 <pvPortMalloc+0x120>)
 800fed4:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800fed6:	4b27      	ldr	r3, [pc, #156]	; (800ff74 <pvPortMalloc+0x110>)
 800fed8:	6019      	str	r1, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800feda:	4b25      	ldr	r3, [pc, #148]	; (800ff70 <pvPortMalloc+0x10c>)
 800fedc:	2280      	movs	r2, #128	; 0x80
 800fede:	0612      	lsls	r2, r2, #24
 800fee0:	601a      	str	r2, [r3, #0]
}
 800fee2:	e7c7      	b.n	800fe74 <pvPortMalloc+0x10>
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800fee4:	4b26      	ldr	r3, [pc, #152]	; (800ff80 <pvPortMalloc+0x11c>)
 800fee6:	e7e5      	b.n	800feb4 <pvPortMalloc+0x50>
	( void ) xTaskResumeAll();
 800fee8:	f7ff f884 	bl	800eff4 <xTaskResumeAll>
			vApplicationMallocFailedHook();
 800feec:	f7fd fb73 	bl	800d5d6 <vApplicationMallocFailedHook>
 800fef0:	2700      	movs	r7, #0
}
 800fef2:	0038      	movs	r0, r7
 800fef4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	( void ) xTaskResumeAll();
 800fef6:	f7ff f87d 	bl	800eff4 <xTaskResumeAll>
		if( pvReturn == NULL )
 800fefa:	e7f7      	b.n	800feec <pvPortMalloc+0x88>
	( void ) xTaskResumeAll();
 800fefc:	f7ff f87a 	bl	800eff4 <xTaskResumeAll>
		if( pvReturn == NULL )
 800ff00:	e7f4      	b.n	800feec <pvPortMalloc+0x88>
 800ff02:	0022      	movs	r2, r4
					pxBlock = pxBlock->pxNextFreeBlock;
 800ff04:	000c      	movs	r4, r1
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ff06:	6861      	ldr	r1, [r4, #4]
 800ff08:	4299      	cmp	r1, r3
 800ff0a:	d202      	bcs.n	800ff12 <pvPortMalloc+0xae>
 800ff0c:	6821      	ldr	r1, [r4, #0]
 800ff0e:	2900      	cmp	r1, #0
 800ff10:	d1f7      	bne.n	800ff02 <pvPortMalloc+0x9e>
				if( pxBlock != pxEnd )
 800ff12:	4916      	ldr	r1, [pc, #88]	; (800ff6c <pvPortMalloc+0x108>)
 800ff14:	6809      	ldr	r1, [r1, #0]
 800ff16:	42a1      	cmp	r1, r4
 800ff18:	d00c      	beq.n	800ff34 <pvPortMalloc+0xd0>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ff1a:	6817      	ldr	r7, [r2, #0]
 800ff1c:	3708      	adds	r7, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ff1e:	6821      	ldr	r1, [r4, #0]
 800ff20:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ff22:	6862      	ldr	r2, [r4, #4]
 800ff24:	1ad2      	subs	r2, r2, r3
 800ff26:	2a10      	cmp	r2, #16
 800ff28:	d90b      	bls.n	800ff42 <pvPortMalloc+0xde>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ff2a:	18e0      	adds	r0, r4, r3
						configASSERT( ( ( ( uint32_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ff2c:	0741      	lsls	r1, r0, #29
 800ff2e:	d004      	beq.n	800ff3a <pvPortMalloc+0xd6>
 800ff30:	b672      	cpsid	i
 800ff32:	e7fe      	b.n	800ff32 <pvPortMalloc+0xce>
	( void ) xTaskResumeAll();
 800ff34:	f7ff f85e 	bl	800eff4 <xTaskResumeAll>
		if( pvReturn == NULL )
 800ff38:	e7d8      	b.n	800feec <pvPortMalloc+0x88>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ff3a:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ff3c:	6063      	str	r3, [r4, #4]
						prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
 800ff3e:	f7ff ff67 	bl	800fe10 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ff42:	6862      	ldr	r2, [r4, #4]
 800ff44:	1aad      	subs	r5, r5, r2
 800ff46:	490b      	ldr	r1, [pc, #44]	; (800ff74 <pvPortMalloc+0x110>)
 800ff48:	600d      	str	r5, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ff4a:	490e      	ldr	r1, [pc, #56]	; (800ff84 <pvPortMalloc+0x120>)
 800ff4c:	6809      	ldr	r1, [r1, #0]
 800ff4e:	428d      	cmp	r5, r1
 800ff50:	d201      	bcs.n	800ff56 <pvPortMalloc+0xf2>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ff52:	490c      	ldr	r1, [pc, #48]	; (800ff84 <pvPortMalloc+0x120>)
 800ff54:	600d      	str	r5, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ff56:	4316      	orrs	r6, r2
 800ff58:	6066      	str	r6, [r4, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ff5a:	2300      	movs	r3, #0
 800ff5c:	6023      	str	r3, [r4, #0]
	( void ) xTaskResumeAll();
 800ff5e:	f7ff f849 	bl	800eff4 <xTaskResumeAll>
	configASSERT( ( ( ( uint32_t ) pvReturn ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ff62:	077b      	lsls	r3, r7, #29
 800ff64:	d0c5      	beq.n	800fef2 <pvPortMalloc+0x8e>
 800ff66:	b672      	cpsid	i
 800ff68:	e7fe      	b.n	800ff68 <pvPortMalloc+0x104>
 800ff6a:	46c0      	nop			; (mov r8, r8)
 800ff6c:	2000188c 	.word	0x2000188c
 800ff70:	200062c8 	.word	0x200062c8
 800ff74:	200062cc 	.word	0x200062cc
 800ff78:	200062d4 	.word	0x200062d4
 800ff7c:	20001890 	.word	0x20001890
 800ff80:	00004a38 	.word	0x00004a38
 800ff84:	200062d0 	.word	0x200062d0

0800ff88 <vPortFree>:
{
 800ff88:	b510      	push	{r4, lr}
	if( pv != NULL )
 800ff8a:	2800      	cmp	r0, #0
 800ff8c:	d020      	beq.n	800ffd0 <vPortFree+0x48>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ff8e:	0003      	movs	r3, r0
 800ff90:	3b08      	subs	r3, #8
 800ff92:	685b      	ldr	r3, [r3, #4]
 800ff94:	4a0f      	ldr	r2, [pc, #60]	; (800ffd4 <vPortFree+0x4c>)
 800ff96:	6812      	ldr	r2, [r2, #0]
 800ff98:	421a      	tst	r2, r3
 800ff9a:	d101      	bne.n	800ffa0 <vPortFree+0x18>
 800ff9c:	b672      	cpsid	i
 800ff9e:	e7fe      	b.n	800ff9e <vPortFree+0x16>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ffa0:	0001      	movs	r1, r0
 800ffa2:	3908      	subs	r1, #8
 800ffa4:	6809      	ldr	r1, [r1, #0]
 800ffa6:	2900      	cmp	r1, #0
 800ffa8:	d001      	beq.n	800ffae <vPortFree+0x26>
 800ffaa:	b672      	cpsid	i
 800ffac:	e7fe      	b.n	800ffac <vPortFree+0x24>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ffae:	3808      	subs	r0, #8
 800ffb0:	0004      	movs	r4, r0
 800ffb2:	4393      	bics	r3, r2
 800ffb4:	6043      	str	r3, [r0, #4]
				vTaskSuspendAll();
 800ffb6:	f7fe ff75 	bl	800eea4 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ffba:	4a07      	ldr	r2, [pc, #28]	; (800ffd8 <vPortFree+0x50>)
 800ffbc:	6863      	ldr	r3, [r4, #4]
 800ffbe:	6811      	ldr	r1, [r2, #0]
 800ffc0:	468c      	mov	ip, r1
 800ffc2:	4463      	add	r3, ip
 800ffc4:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ffc6:	0020      	movs	r0, r4
 800ffc8:	f7ff ff22 	bl	800fe10 <prvInsertBlockIntoFreeList>
				( void ) xTaskResumeAll();
 800ffcc:	f7ff f812 	bl	800eff4 <xTaskResumeAll>
}
 800ffd0:	bd10      	pop	{r4, pc}
 800ffd2:	46c0      	nop			; (mov r8, r8)
 800ffd4:	200062c8 	.word	0x200062c8
 800ffd8:	200062cc 	.word	0x200062cc

0800ffdc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800ffdc:	b510      	push	{r4, lr}
 800ffde:	0004      	movs	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800ffe0:	f002 fb3c 	bl	801265c <HAL_RCC_GetHCLKFreq>
 800ffe4:	21fa      	movs	r1, #250	; 0xfa
 800ffe6:	0089      	lsls	r1, r1, #2
 800ffe8:	f7f0 f8b2 	bl	8000150 <__udivsi3>
 800ffec:	f000 f888 	bl	8010100 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 800fff0:	2001      	movs	r0, #1
 800fff2:	2200      	movs	r2, #0
 800fff4:	0021      	movs	r1, r4
 800fff6:	4240      	negs	r0, r0
 800fff8:	f000 f83c 	bl	8010074 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 800fffc:	2000      	movs	r0, #0
 800fffe:	bd10      	pop	{r4, pc}

08010000 <HAL_Init>:
{
 8010000:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8010002:	4a06      	ldr	r2, [pc, #24]	; (801001c <HAL_Init+0x1c>)
 8010004:	6813      	ldr	r3, [r2, #0]
 8010006:	2110      	movs	r1, #16
 8010008:	430b      	orrs	r3, r1
 801000a:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 801000c:	2000      	movs	r0, #0
 801000e:	f7ff ffe5 	bl	800ffdc <HAL_InitTick>
  HAL_MspInit();
 8010012:	f001 fec7 	bl	8011da4 <HAL_MspInit>
}
 8010016:	2000      	movs	r0, #0
 8010018:	bd10      	pop	{r4, pc}
 801001a:	46c0      	nop			; (mov r8, r8)
 801001c:	40022000 	.word	0x40022000

08010020 <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8010020:	4a02      	ldr	r2, [pc, #8]	; (801002c <HAL_IncTick+0xc>)
 8010022:	6813      	ldr	r3, [r2, #0]
 8010024:	3301      	adds	r3, #1
 8010026:	6013      	str	r3, [r2, #0]
}
 8010028:	4770      	bx	lr
 801002a:	46c0      	nop			; (mov r8, r8)
 801002c:	200062dc 	.word	0x200062dc

08010030 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8010030:	4b01      	ldr	r3, [pc, #4]	; (8010038 <HAL_GetTick+0x8>)
 8010032:	6818      	ldr	r0, [r3, #0]
}
 8010034:	4770      	bx	lr
 8010036:	46c0      	nop			; (mov r8, r8)
 8010038:	200062dc 	.word	0x200062dc

0801003c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 801003c:	b510      	push	{r4, lr}
 801003e:	b082      	sub	sp, #8
 8010040:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = 0;
  tickstart = HAL_GetTick();
 8010042:	f7ff fff5 	bl	8010030 <HAL_GetTick>
 8010046:	0004      	movs	r4, r0
  while((HAL_GetTick() - tickstart) < Delay)
 8010048:	f7ff fff2 	bl	8010030 <HAL_GetTick>
 801004c:	9b01      	ldr	r3, [sp, #4]
 801004e:	1b00      	subs	r0, r0, r4
 8010050:	4298      	cmp	r0, r3
 8010052:	d3f9      	bcc.n	8010048 <HAL_Delay+0xc>
  {
  }
}
 8010054:	b002      	add	sp, #8
 8010056:	bd10      	pop	{r4, pc}

08010058 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 8010058:	4b01      	ldr	r3, [pc, #4]	; (8010060 <HAL_GetREVID+0x8>)
 801005a:	6818      	ldr	r0, [r3, #0]
 801005c:	0c00      	lsrs	r0, r0, #16
}
 801005e:	4770      	bx	lr
 8010060:	40015800 	.word	0x40015800

08010064 <HAL_GetDEVID>:
  * @brief  Returns the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
   return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
 8010064:	4b02      	ldr	r3, [pc, #8]	; (8010070 <HAL_GetDEVID+0xc>)
 8010066:	6818      	ldr	r0, [r3, #0]
 8010068:	0500      	lsls	r0, r0, #20
 801006a:	0d00      	lsrs	r0, r0, #20
}
 801006c:	4770      	bx	lr
 801006e:	46c0      	nop			; (mov r8, r8)
 8010070:	40015800 	.word	0x40015800

08010074 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8010074:	b570      	push	{r4, r5, r6, lr}
  if((int32_t)(IRQn) < 0) {
 8010076:	2800      	cmp	r0, #0
 8010078:	db14      	blt.n	80100a4 <HAL_NVIC_SetPriority+0x30>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 801007a:	0884      	lsrs	r4, r0, #2
 801007c:	00a4      	lsls	r4, r4, #2
 801007e:	4b14      	ldr	r3, [pc, #80]	; (80100d0 <HAL_NVIC_SetPriority+0x5c>)
 8010080:	469c      	mov	ip, r3
 8010082:	4464      	add	r4, ip
 8010084:	26c0      	movs	r6, #192	; 0xc0
 8010086:	00b6      	lsls	r6, r6, #2
 8010088:	59a5      	ldr	r5, [r4, r6]
 801008a:	2203      	movs	r2, #3
 801008c:	4010      	ands	r0, r2
 801008e:	00c0      	lsls	r0, r0, #3
 8010090:	23ff      	movs	r3, #255	; 0xff
 8010092:	001a      	movs	r2, r3
 8010094:	4082      	lsls	r2, r0
 8010096:	4395      	bics	r5, r2
       (((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8010098:	0189      	lsls	r1, r1, #6
 801009a:	400b      	ands	r3, r1
 801009c:	4083      	lsls	r3, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 801009e:	432b      	orrs	r3, r5
 80100a0:	51a3      	str	r3, [r4, r6]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 80100a2:	bd70      	pop	{r4, r5, r6, pc}
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80100a4:	230f      	movs	r3, #15
 80100a6:	4003      	ands	r3, r0
 80100a8:	3b08      	subs	r3, #8
 80100aa:	089b      	lsrs	r3, r3, #2
 80100ac:	009b      	lsls	r3, r3, #2
 80100ae:	4a09      	ldr	r2, [pc, #36]	; (80100d4 <HAL_NVIC_SetPriority+0x60>)
 80100b0:	4694      	mov	ip, r2
 80100b2:	4463      	add	r3, ip
 80100b4:	69dd      	ldr	r5, [r3, #28]
 80100b6:	2403      	movs	r4, #3
 80100b8:	4020      	ands	r0, r4
 80100ba:	00c0      	lsls	r0, r0, #3
 80100bc:	22ff      	movs	r2, #255	; 0xff
 80100be:	0014      	movs	r4, r2
 80100c0:	4084      	lsls	r4, r0
 80100c2:	43a5      	bics	r5, r4
       (((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80100c4:	0189      	lsls	r1, r1, #6
 80100c6:	400a      	ands	r2, r1
 80100c8:	4082      	lsls	r2, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80100ca:	432a      	orrs	r2, r5
 80100cc:	61da      	str	r2, [r3, #28]
 80100ce:	e7e8      	b.n	80100a2 <HAL_NVIC_SetPriority+0x2e>
 80100d0:	e000e100 	.word	0xe000e100
 80100d4:	e000ed00 	.word	0xe000ed00

080100d8 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[0] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80100d8:	231f      	movs	r3, #31
 80100da:	4018      	ands	r0, r3
 80100dc:	3b1e      	subs	r3, #30
 80100de:	4083      	lsls	r3, r0
 80100e0:	4a01      	ldr	r2, [pc, #4]	; (80100e8 <HAL_NVIC_EnableIRQ+0x10>)
 80100e2:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80100e4:	4770      	bx	lr
 80100e6:	46c0      	nop			; (mov r8, r8)
 80100e8:	e000e100 	.word	0xe000e100

080100ec <HAL_NVIC_DisableIRQ>:
  NVIC->ICER[0] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80100ec:	231f      	movs	r3, #31
 80100ee:	4018      	ands	r0, r3
 80100f0:	3b1e      	subs	r3, #30
 80100f2:	4083      	lsls	r3, r0
 80100f4:	4901      	ldr	r1, [pc, #4]	; (80100fc <HAL_NVIC_DisableIRQ+0x10>)
 80100f6:	2280      	movs	r2, #128	; 0x80
 80100f8:	508b      	str	r3, [r1, r2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 80100fa:	4770      	bx	lr
 80100fc:	e000e100 	.word	0xe000e100

08010100 <HAL_SYSTICK_Config>:
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk) { return (1UL); }    /* Reload value impossible */
 8010100:	3801      	subs	r0, #1
 8010102:	2380      	movs	r3, #128	; 0x80
 8010104:	045b      	lsls	r3, r3, #17
 8010106:	4298      	cmp	r0, r3
 8010108:	d20f      	bcs.n	801012a <HAL_SYSTICK_Config+0x2a>

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 801010a:	4a09      	ldr	r2, [pc, #36]	; (8010130 <HAL_SYSTICK_Config+0x30>)
 801010c:	6050      	str	r0, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 801010e:	4809      	ldr	r0, [pc, #36]	; (8010134 <HAL_SYSTICK_Config+0x34>)
 8010110:	6a03      	ldr	r3, [r0, #32]
 8010112:	021b      	lsls	r3, r3, #8
 8010114:	0a1b      	lsrs	r3, r3, #8
 8010116:	21c0      	movs	r1, #192	; 0xc0
 8010118:	0609      	lsls	r1, r1, #24
 801011a:	430b      	orrs	r3, r1
 801011c:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 801011e:	2300      	movs	r3, #0
 8010120:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8010122:	3307      	adds	r3, #7
 8010124:	6013      	str	r3, [r2, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8010126:	2000      	movs	r0, #0
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8010128:	4770      	bx	lr
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk) { return (1UL); }    /* Reload value impossible */
 801012a:	2001      	movs	r0, #1
   return SysTick_Config(TicksNumb);
 801012c:	e7fc      	b.n	8010128 <HAL_SYSTICK_Config+0x28>
 801012e:	46c0      	nop			; (mov r8, r8)
 8010130:	e000e010 	.word	0xe000e010
 8010134:	e000ed00 	.word	0xe000ed00

08010138 <HAL_SYSTICK_CLKSourceConfig>:
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8010138:	2804      	cmp	r0, #4
 801013a:	d005      	beq.n	8010148 <HAL_SYSTICK_CLKSourceConfig+0x10>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 801013c:	4a05      	ldr	r2, [pc, #20]	; (8010154 <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 801013e:	6813      	ldr	r3, [r2, #0]
 8010140:	2104      	movs	r1, #4
 8010142:	438b      	bics	r3, r1
 8010144:	6013      	str	r3, [r2, #0]
  }
}
 8010146:	4770      	bx	lr
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8010148:	4a02      	ldr	r2, [pc, #8]	; (8010154 <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 801014a:	6813      	ldr	r3, [r2, #0]
 801014c:	2104      	movs	r1, #4
 801014e:	430b      	orrs	r3, r1
 8010150:	6013      	str	r3, [r2, #0]
 8010152:	e7f8      	b.n	8010146 <HAL_SYSTICK_CLKSourceConfig+0xe>
 8010154:	e000e010 	.word	0xe000e010

08010158 <CRC_Handle_8>:
  * @param  pBuffer: pointer to the input data buffer
  * @param  BufferLength: input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 8010158:	b5f0      	push	{r4, r5, r6, r7, lr}
 801015a:	0015      	movs	r5, r2
  uint32_t i = 0; /* input data buffer index */
  
   /* Processing time optimization: 4 bytes are entered in a row with a single word write,
    * last bytes must be carefully fed to the CRC calculator to ensure a correct type
    * handling by the IP */
   for(i = 0; i < (BufferLength/4); i++)
 801015c:	0892      	lsrs	r2, r2, #2
 801015e:	2d03      	cmp	r5, #3
 8010160:	d927      	bls.n	80101b2 <CRC_Handle_8+0x5a>
 8010162:	000c      	movs	r4, r1
 8010164:	2700      	movs	r7, #0
   {
      hcrc->Instance->DR = ((uint32_t)pBuffer[4*i]<<24) | ((uint32_t)pBuffer[4*i+1]<<16) | ((uint32_t)pBuffer[4*i+2]<<8) | (uint32_t)pBuffer[4*i+3];      
 8010166:	7823      	ldrb	r3, [r4, #0]
 8010168:	061b      	lsls	r3, r3, #24
 801016a:	7866      	ldrb	r6, [r4, #1]
 801016c:	0436      	lsls	r6, r6, #16
 801016e:	4333      	orrs	r3, r6
 8010170:	78e6      	ldrb	r6, [r4, #3]
 8010172:	4333      	orrs	r3, r6
 8010174:	78a6      	ldrb	r6, [r4, #2]
 8010176:	0236      	lsls	r6, r6, #8
 8010178:	4333      	orrs	r3, r6
 801017a:	6806      	ldr	r6, [r0, #0]
 801017c:	6033      	str	r3, [r6, #0]
   for(i = 0; i < (BufferLength/4); i++)
 801017e:	3701      	adds	r7, #1
 8010180:	3404      	adds	r4, #4
 8010182:	4297      	cmp	r7, r2
 8010184:	d3ef      	bcc.n	8010166 <CRC_Handle_8+0xe>
 8010186:	2301      	movs	r3, #1
 8010188:	2d03      	cmp	r5, #3
 801018a:	d900      	bls.n	801018e <CRC_Handle_8+0x36>
 801018c:	0013      	movs	r3, r2
   }
   /* last bytes specific handling */
   if ((BufferLength%4) != 0)
 801018e:	2203      	movs	r2, #3
 8010190:	0014      	movs	r4, r2
 8010192:	402c      	ands	r4, r5
 8010194:	422a      	tst	r2, r5
 8010196:	d012      	beq.n	80101be <CRC_Handle_8+0x66>
   {
     if  (BufferLength%4 == 1)
 8010198:	2c01      	cmp	r4, #1
 801019a:	d00c      	beq.n	80101b6 <CRC_Handle_8+0x5e>
     {
       *(uint8_t*) (&hcrc->Instance->DR) = pBuffer[4*i];
     }
     if  (BufferLength%4 == 2)
 801019c:	2c02      	cmp	r4, #2
 801019e:	d111      	bne.n	80101c4 <CRC_Handle_8+0x6c>
     {
       *(uint16_t*) (&hcrc->Instance->DR) = ((uint16_t)pBuffer[4*i]<<8) | (uint16_t)pBuffer[4*i+1];
 80101a0:	009b      	lsls	r3, r3, #2
 80101a2:	5cca      	ldrb	r2, [r1, r3]
 80101a4:	0212      	lsls	r2, r2, #8
 80101a6:	18cb      	adds	r3, r1, r3
 80101a8:	785b      	ldrb	r3, [r3, #1]
 80101aa:	4313      	orrs	r3, r2
 80101ac:	6802      	ldr	r2, [r0, #0]
 80101ae:	8013      	strh	r3, [r2, #0]
     }
     if  (BufferLength%4 == 3)
 80101b0:	e005      	b.n	80101be <CRC_Handle_8+0x66>
   for(i = 0; i < (BufferLength/4); i++)
 80101b2:	2300      	movs	r3, #0
 80101b4:	e7eb      	b.n	801018e <CRC_Handle_8+0x36>
       *(uint8_t*) (&hcrc->Instance->DR) = pBuffer[4*i];
 80101b6:	009b      	lsls	r3, r3, #2
 80101b8:	5c5b      	ldrb	r3, [r3, r1]
 80101ba:	6802      	ldr	r2, [r0, #0]
 80101bc:	7013      	strb	r3, [r2, #0]
       *(uint8_t*) (&hcrc->Instance->DR) = pBuffer[4*i+2];       
     }
   }
  
  /* Return the CRC computed value */ 
  return hcrc->Instance->DR;
 80101be:	6803      	ldr	r3, [r0, #0]
 80101c0:	6818      	ldr	r0, [r3, #0]
}
 80101c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
     if  (BufferLength%4 == 3)
 80101c4:	2c03      	cmp	r4, #3
 80101c6:	d1fa      	bne.n	80101be <CRC_Handle_8+0x66>
       *(uint16_t*) (&hcrc->Instance->DR) = ((uint16_t)pBuffer[4*i]<<8) | (uint16_t)pBuffer[4*i+1];
 80101c8:	009b      	lsls	r3, r3, #2
 80101ca:	5ccc      	ldrb	r4, [r1, r3]
 80101cc:	0224      	lsls	r4, r4, #8
 80101ce:	18cb      	adds	r3, r1, r3
 80101d0:	785a      	ldrb	r2, [r3, #1]
 80101d2:	4322      	orrs	r2, r4
 80101d4:	6801      	ldr	r1, [r0, #0]
 80101d6:	800a      	strh	r2, [r1, #0]
       *(uint8_t*) (&hcrc->Instance->DR) = pBuffer[4*i+2];       
 80101d8:	789b      	ldrb	r3, [r3, #2]
 80101da:	6802      	ldr	r2, [r0, #0]
 80101dc:	7013      	strb	r3, [r2, #0]
 80101de:	e7ee      	b.n	80101be <CRC_Handle_8+0x66>

080101e0 <CRC_Handle_16>:
  * @param  pBuffer: pointer to the input data buffer
  * @param  BufferLength: input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */  
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 80101e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80101e2:	0016      	movs	r6, r2
  uint32_t i = 0;  /* input data buffer index */
  
  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure 
   * a correct type handling by the IP */
  for(i = 0; i < (BufferLength/2); i++)
 80101e4:	0852      	lsrs	r2, r2, #1
 80101e6:	2e01      	cmp	r6, #1
 80101e8:	d918      	bls.n	801021c <CRC_Handle_16+0x3c>
 80101ea:	000c      	movs	r4, r1
 80101ec:	2500      	movs	r5, #0
  {
    hcrc->Instance->DR = (pBuffer[2*i]<<16) | pBuffer[2*i+1];     
 80101ee:	8823      	ldrh	r3, [r4, #0]
 80101f0:	041b      	lsls	r3, r3, #16
 80101f2:	8867      	ldrh	r7, [r4, #2]
 80101f4:	433b      	orrs	r3, r7
 80101f6:	6807      	ldr	r7, [r0, #0]
 80101f8:	603b      	str	r3, [r7, #0]
  for(i = 0; i < (BufferLength/2); i++)
 80101fa:	3501      	adds	r5, #1
 80101fc:	3404      	adds	r4, #4
 80101fe:	4295      	cmp	r5, r2
 8010200:	d3f5      	bcc.n	80101ee <CRC_Handle_16+0xe>
 8010202:	2301      	movs	r3, #1
 8010204:	2e01      	cmp	r6, #1
 8010206:	d900      	bls.n	801020a <CRC_Handle_16+0x2a>
 8010208:	0013      	movs	r3, r2
  }
  if ((BufferLength%2) != 0)
 801020a:	07f2      	lsls	r2, r6, #31
 801020c:	d503      	bpl.n	8010216 <CRC_Handle_16+0x36>
  {
    *(uint16_t*) (&hcrc->Instance->DR) = pBuffer[2*i]; 
 801020e:	009b      	lsls	r3, r3, #2
 8010210:	5a5b      	ldrh	r3, [r3, r1]
 8010212:	6802      	ldr	r2, [r0, #0]
 8010214:	8013      	strh	r3, [r2, #0]
  }
   
  /* Return the CRC computed value */ 
  return hcrc->Instance->DR;
 8010216:	6803      	ldr	r3, [r0, #0]
 8010218:	6818      	ldr	r0, [r3, #0]
}
 801021a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  for(i = 0; i < (BufferLength/2); i++)
 801021c:	2300      	movs	r3, #0
 801021e:	e7f4      	b.n	801020a <CRC_Handle_16+0x2a>

08010220 <HAL_CRC_Init>:
{
 8010220:	b510      	push	{r4, lr}
 8010222:	1e04      	subs	r4, r0, #0
  if(hcrc == NULL)
 8010224:	d029      	beq.n	801027a <HAL_CRC_Init+0x5a>
  if(hcrc->State == HAL_CRC_STATE_RESET)
 8010226:	7f43      	ldrb	r3, [r0, #29]
 8010228:	2b00      	cmp	r3, #0
 801022a:	d01e      	beq.n	801026a <HAL_CRC_Init+0x4a>
  hcrc->State = HAL_CRC_STATE_BUSY; 
 801022c:	2302      	movs	r3, #2
 801022e:	7763      	strb	r3, [r4, #29]
  if (HAL_CRCEx_Init(hcrc) != HAL_OK)
 8010230:	0020      	movs	r0, r4
 8010232:	f000 f8ab 	bl	801038c <HAL_CRCEx_Init>
 8010236:	2800      	cmp	r0, #0
 8010238:	d121      	bne.n	801027e <HAL_CRC_Init+0x5e>
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 801023a:	7963      	ldrb	r3, [r4, #5]
 801023c:	2b00      	cmp	r3, #0
 801023e:	d118      	bne.n	8010272 <HAL_CRC_Init+0x52>
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);  
 8010240:	6823      	ldr	r3, [r4, #0]
 8010242:	2201      	movs	r2, #1
 8010244:	4252      	negs	r2, r2
 8010246:	611a      	str	r2, [r3, #16]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode); 
 8010248:	6822      	ldr	r2, [r4, #0]
 801024a:	6893      	ldr	r3, [r2, #8]
 801024c:	2160      	movs	r1, #96	; 0x60
 801024e:	438b      	bics	r3, r1
 8010250:	6961      	ldr	r1, [r4, #20]
 8010252:	430b      	orrs	r3, r1
 8010254:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);  
 8010256:	6822      	ldr	r2, [r4, #0]
 8010258:	6893      	ldr	r3, [r2, #8]
 801025a:	2180      	movs	r1, #128	; 0x80
 801025c:	438b      	bics	r3, r1
 801025e:	69a1      	ldr	r1, [r4, #24]
 8010260:	430b      	orrs	r3, r1
 8010262:	6093      	str	r3, [r2, #8]
  hcrc->State = HAL_CRC_STATE_READY;
 8010264:	2301      	movs	r3, #1
 8010266:	7763      	strb	r3, [r4, #29]
}
 8010268:	bd10      	pop	{r4, pc}
    hcrc->Lock = HAL_UNLOCKED;
 801026a:	7703      	strb	r3, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 801026c:	f7fc fd90 	bl	800cd90 <HAL_CRC_MspInit>
 8010270:	e7dc      	b.n	801022c <HAL_CRC_Init+0xc>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8010272:	6823      	ldr	r3, [r4, #0]
 8010274:	6922      	ldr	r2, [r4, #16]
 8010276:	611a      	str	r2, [r3, #16]
 8010278:	e7e6      	b.n	8010248 <HAL_CRC_Init+0x28>
    return HAL_ERROR;
 801027a:	2001      	movs	r0, #1
 801027c:	e7f4      	b.n	8010268 <HAL_CRC_Init+0x48>
    return HAL_ERROR;
 801027e:	2001      	movs	r0, #1
 8010280:	e7f2      	b.n	8010268 <HAL_CRC_Init+0x48>

08010282 <HAL_CRC_Accumulate>:
{
 8010282:	b510      	push	{r4, lr}
 8010284:	0004      	movs	r4, r0
  __HAL_LOCK(hcrc); 
 8010286:	7f03      	ldrb	r3, [r0, #28]
 8010288:	2b01      	cmp	r3, #1
 801028a:	d023      	beq.n	80102d4 <HAL_CRC_Accumulate+0x52>
 801028c:	2301      	movs	r3, #1
 801028e:	7703      	strb	r3, [r0, #28]
  hcrc->State = HAL_CRC_STATE_BUSY;
 8010290:	3301      	adds	r3, #1
 8010292:	7743      	strb	r3, [r0, #29]
  switch (hcrc->InputDataFormat)
 8010294:	6a03      	ldr	r3, [r0, #32]
 8010296:	2b02      	cmp	r3, #2
 8010298:	d019      	beq.n	80102ce <HAL_CRC_Accumulate+0x4c>
 801029a:	2b03      	cmp	r3, #3
 801029c:	d007      	beq.n	80102ae <HAL_CRC_Accumulate+0x2c>
 801029e:	2b01      	cmp	r3, #1
 80102a0:	d012      	beq.n	80102c8 <HAL_CRC_Accumulate+0x46>
 80102a2:	2000      	movs	r0, #0
  hcrc->State = HAL_CRC_STATE_READY; 
 80102a4:	2301      	movs	r3, #1
 80102a6:	7763      	strb	r3, [r4, #29]
  __HAL_UNLOCK(hcrc);
 80102a8:	2300      	movs	r3, #0
 80102aa:	7723      	strb	r3, [r4, #28]
}
 80102ac:	bd10      	pop	{r4, pc}
      for(index = 0; index < BufferLength; index++)
 80102ae:	2a00      	cmp	r2, #0
 80102b0:	d007      	beq.n	80102c2 <HAL_CRC_Accumulate+0x40>
 80102b2:	000b      	movs	r3, r1
 80102b4:	0092      	lsls	r2, r2, #2
 80102b6:	1889      	adds	r1, r1, r2
        hcrc->Instance->DR = pBuffer[index];
 80102b8:	6822      	ldr	r2, [r4, #0]
 80102ba:	cb01      	ldmia	r3!, {r0}
 80102bc:	6010      	str	r0, [r2, #0]
      for(index = 0; index < BufferLength; index++)
 80102be:	428b      	cmp	r3, r1
 80102c0:	d1fa      	bne.n	80102b8 <HAL_CRC_Accumulate+0x36>
      temp = hcrc->Instance->DR;
 80102c2:	6823      	ldr	r3, [r4, #0]
 80102c4:	6818      	ldr	r0, [r3, #0]
      break;
 80102c6:	e7ed      	b.n	80102a4 <HAL_CRC_Accumulate+0x22>
      temp = CRC_Handle_8(hcrc, (uint8_t*)pBuffer, BufferLength);
 80102c8:	f7ff ff46 	bl	8010158 <CRC_Handle_8>
      break;
 80102cc:	e7ea      	b.n	80102a4 <HAL_CRC_Accumulate+0x22>
      temp = CRC_Handle_16(hcrc, (uint16_t*)pBuffer, BufferLength);
 80102ce:	f7ff ff87 	bl	80101e0 <CRC_Handle_16>
      break;
 80102d2:	e7e7      	b.n	80102a4 <HAL_CRC_Accumulate+0x22>
  __HAL_LOCK(hcrc); 
 80102d4:	2002      	movs	r0, #2
 80102d6:	e7e9      	b.n	80102ac <HAL_CRC_Accumulate+0x2a>

080102d8 <HAL_CRC_Calculate>:
{
 80102d8:	b570      	push	{r4, r5, r6, lr}
 80102da:	0004      	movs	r4, r0
  __HAL_LOCK(hcrc); 
 80102dc:	7f03      	ldrb	r3, [r0, #28]
 80102de:	2b01      	cmp	r3, #1
 80102e0:	d029      	beq.n	8010336 <HAL_CRC_Calculate+0x5e>
 80102e2:	2501      	movs	r5, #1
 80102e4:	7705      	strb	r5, [r0, #28]
  hcrc->State = HAL_CRC_STATE_BUSY;
 80102e6:	2302      	movs	r3, #2
 80102e8:	7743      	strb	r3, [r0, #29]
  __HAL_CRC_DR_RESET(hcrc);
 80102ea:	6800      	ldr	r0, [r0, #0]
 80102ec:	6883      	ldr	r3, [r0, #8]
 80102ee:	432b      	orrs	r3, r5
 80102f0:	6083      	str	r3, [r0, #8]
  switch (hcrc->InputDataFormat)
 80102f2:	6a23      	ldr	r3, [r4, #32]
 80102f4:	2b02      	cmp	r3, #2
 80102f6:	d01a      	beq.n	801032e <HAL_CRC_Calculate+0x56>
 80102f8:	2b03      	cmp	r3, #3
 80102fa:	d007      	beq.n	801030c <HAL_CRC_Calculate+0x34>
 80102fc:	2b01      	cmp	r3, #1
 80102fe:	d012      	beq.n	8010326 <HAL_CRC_Calculate+0x4e>
 8010300:	2000      	movs	r0, #0
  hcrc->State = HAL_CRC_STATE_READY; 
 8010302:	2301      	movs	r3, #1
 8010304:	7763      	strb	r3, [r4, #29]
  __HAL_UNLOCK(hcrc);
 8010306:	2300      	movs	r3, #0
 8010308:	7723      	strb	r3, [r4, #28]
}
 801030a:	bd70      	pop	{r4, r5, r6, pc}
      for(index = 0; index < BufferLength; index++)
 801030c:	2a00      	cmp	r2, #0
 801030e:	d007      	beq.n	8010320 <HAL_CRC_Calculate+0x48>
 8010310:	000b      	movs	r3, r1
 8010312:	0092      	lsls	r2, r2, #2
 8010314:	1889      	adds	r1, r1, r2
        hcrc->Instance->DR = pBuffer[index];
 8010316:	6822      	ldr	r2, [r4, #0]
 8010318:	cb01      	ldmia	r3!, {r0}
 801031a:	6010      	str	r0, [r2, #0]
      for(index = 0; index < BufferLength; index++)
 801031c:	428b      	cmp	r3, r1
 801031e:	d1fa      	bne.n	8010316 <HAL_CRC_Calculate+0x3e>
      temp = hcrc->Instance->DR;
 8010320:	6823      	ldr	r3, [r4, #0]
 8010322:	6818      	ldr	r0, [r3, #0]
      break;
 8010324:	e7ed      	b.n	8010302 <HAL_CRC_Calculate+0x2a>
      temp = CRC_Handle_8(hcrc, (uint8_t*)pBuffer, BufferLength);
 8010326:	0020      	movs	r0, r4
 8010328:	f7ff ff16 	bl	8010158 <CRC_Handle_8>
      break;
 801032c:	e7e9      	b.n	8010302 <HAL_CRC_Calculate+0x2a>
      temp = CRC_Handle_16(hcrc, (uint16_t*)pBuffer, BufferLength);
 801032e:	0020      	movs	r0, r4
 8010330:	f7ff ff56 	bl	80101e0 <CRC_Handle_16>
      break;
 8010334:	e7e5      	b.n	8010302 <HAL_CRC_Calculate+0x2a>
  __HAL_LOCK(hcrc); 
 8010336:	2002      	movs	r0, #2
 8010338:	e7e7      	b.n	801030a <HAL_CRC_Calculate+0x32>

0801033a <HAL_CRCEx_Polynomial_Set>:
  *          @arg CRC_POLYLENGTH_16B: 16-bit long CRC (generating polynomial of degree 16)
  *          @arg CRC_POLYLENGTH_32B: 32-bit long CRC (generating polynomial of degree 32)                
  * @retval HAL status
  */                                   
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 801033a:	b530      	push	{r4, r5, lr}
  uint32_t msb = 31; /* polynomial degree is 32 at most, so msb is initialized to max value */
 801033c:	231f      	movs	r3, #31
   * definition. HAL_ERROR is reported if Pol degree is 
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while (((Pol & (1U << msb)) == 0) && (msb-- > 0))
 801033e:	2501      	movs	r5, #1
 8010340:	002c      	movs	r4, r5
 8010342:	409c      	lsls	r4, r3
 8010344:	4221      	tst	r1, r4
 8010346:	d105      	bne.n	8010354 <HAL_CRCEx_Polynomial_Set+0x1a>
 8010348:	3b01      	subs	r3, #1
 801034a:	d2f9      	bcs.n	8010340 <HAL_CRCEx_Polynomial_Set+0x6>
  {}

  switch (PolyLength)
 801034c:	2a10      	cmp	r2, #16
 801034e:	d103      	bne.n	8010358 <HAL_CRCEx_Polynomial_Set+0x1e>
      }
      break;
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
      { 
        return  HAL_ERROR;
 8010350:	2001      	movs	r0, #1
 8010352:	e00e      	b.n	8010372 <HAL_CRCEx_Polynomial_Set+0x38>
  switch (PolyLength)
 8010354:	2a10      	cmp	r2, #16
 8010356:	d011      	beq.n	801037c <HAL_CRCEx_Polynomial_Set+0x42>
 8010358:	2a18      	cmp	r2, #24
 801035a:	d00b      	beq.n	8010374 <HAL_CRCEx_Polynomial_Set+0x3a>
 801035c:	2a08      	cmp	r2, #8
 801035e:	d011      	beq.n	8010384 <HAL_CRCEx_Polynomial_Set+0x4a>
    default:
      break;
  }

  /* set generating polynomial */
  WRITE_REG(hcrc->Instance->POL, Pol);
 8010360:	6803      	ldr	r3, [r0, #0]
 8010362:	6159      	str	r1, [r3, #20]
  
  /* set generating polynomial size */
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);  
 8010364:	6801      	ldr	r1, [r0, #0]
 8010366:	688b      	ldr	r3, [r1, #8]
 8010368:	2018      	movs	r0, #24
 801036a:	4383      	bics	r3, r0
 801036c:	431a      	orrs	r2, r3
 801036e:	608a      	str	r2, [r1, #8]
  
  /* Return function status */
  return HAL_OK;
 8010370:	2000      	movs	r0, #0
}
 8010372:	bd30      	pop	{r4, r5, pc}
      if (msb >= HAL_CRC_LENGTH_7B)
 8010374:	2b06      	cmp	r3, #6
 8010376:	d9f3      	bls.n	8010360 <HAL_CRCEx_Polynomial_Set+0x26>
        return  HAL_ERROR;
 8010378:	2001      	movs	r0, #1
 801037a:	e7fa      	b.n	8010372 <HAL_CRCEx_Polynomial_Set+0x38>
      if (msb >= HAL_CRC_LENGTH_8B)
 801037c:	2b07      	cmp	r3, #7
 801037e:	d9ef      	bls.n	8010360 <HAL_CRCEx_Polynomial_Set+0x26>
        return  HAL_ERROR;
 8010380:	2001      	movs	r0, #1
 8010382:	e7f6      	b.n	8010372 <HAL_CRCEx_Polynomial_Set+0x38>
      if (msb >= HAL_CRC_LENGTH_16B)
 8010384:	2b0f      	cmp	r3, #15
 8010386:	d9eb      	bls.n	8010360 <HAL_CRCEx_Polynomial_Set+0x26>
        return  HAL_ERROR;
 8010388:	2001      	movs	r0, #1
 801038a:	e7f2      	b.n	8010372 <HAL_CRCEx_Polynomial_Set+0x38>

0801038c <HAL_CRCEx_Init>:
{
 801038c:	b510      	push	{r4, lr}
 801038e:	0003      	movs	r3, r0
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8010390:	7900      	ldrb	r0, [r0, #4]
 8010392:	2800      	cmp	r0, #0
 8010394:	d108      	bne.n	80103a8 <HAL_CRCEx_Init+0x1c>
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);  
 8010396:	681a      	ldr	r2, [r3, #0]
 8010398:	4908      	ldr	r1, [pc, #32]	; (80103bc <HAL_CRCEx_Init+0x30>)
 801039a:	6151      	str	r1, [r2, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 801039c:	681a      	ldr	r2, [r3, #0]
 801039e:	6893      	ldr	r3, [r2, #8]
 80103a0:	2118      	movs	r1, #24
 80103a2:	438b      	bics	r3, r1
 80103a4:	6093      	str	r3, [r2, #8]
}
 80103a6:	bd10      	pop	{r4, pc}
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80103a8:	68da      	ldr	r2, [r3, #12]
 80103aa:	6899      	ldr	r1, [r3, #8]
 80103ac:	0018      	movs	r0, r3
 80103ae:	f7ff ffc4 	bl	801033a <HAL_CRCEx_Polynomial_Set>
 80103b2:	1e43      	subs	r3, r0, #1
 80103b4:	4198      	sbcs	r0, r3
      return HAL_ERROR;
 80103b6:	b2c0      	uxtb	r0, r0
 80103b8:	e7f5      	b.n	80103a6 <HAL_CRCEx_Init+0x1a>
 80103ba:	46c0      	nop			; (mov r8, r8)
 80103bc:	04c11db7 	.word	0x04c11db7

080103c0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 80103c0:	b530      	push	{r4, r5, lr}
  uint32_t tmp = 0;
  
  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80103c2:	2800      	cmp	r0, #0
 80103c4:	d022      	beq.n	801040c <HAL_DMA_Init+0x4c>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(hdma->State == HAL_DMA_STATE_RESET)
 80103c6:	2321      	movs	r3, #33	; 0x21
 80103c8:	5cc3      	ldrb	r3, [r0, r3]
 80103ca:	2b00      	cmp	r3, #0
 80103cc:	d102      	bne.n	80103d4 <HAL_DMA_Init+0x14>
  {  
    /* Allocate lock resource and initialize it */
    hdma->Lock = HAL_UNLOCKED;
 80103ce:	3320      	adds	r3, #32
 80103d0:	2200      	movs	r2, #0
 80103d2:	54c2      	strb	r2, [r0, r3]
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80103d4:	2121      	movs	r1, #33	; 0x21
 80103d6:	2302      	movs	r3, #2
 80103d8:	5443      	strb	r3, [r0, r1]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80103da:	6804      	ldr	r4, [r0, #0]
 80103dc:	6823      	ldr	r3, [r4, #0]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80103de:	4a0c      	ldr	r2, [pc, #48]	; (8010410 <HAL_DMA_Init+0x50>)
 80103e0:	401a      	ands	r2, r3
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80103e2:	6843      	ldr	r3, [r0, #4]
 80103e4:	6885      	ldr	r5, [r0, #8]
 80103e6:	432b      	orrs	r3, r5
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80103e8:	68c5      	ldr	r5, [r0, #12]
 80103ea:	432b      	orrs	r3, r5
 80103ec:	6905      	ldr	r5, [r0, #16]
 80103ee:	432b      	orrs	r3, r5
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80103f0:	6945      	ldr	r5, [r0, #20]
 80103f2:	432b      	orrs	r3, r5
 80103f4:	6985      	ldr	r5, [r0, #24]
 80103f6:	432b      	orrs	r3, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 80103f8:	69c5      	ldr	r5, [r0, #28]
 80103fa:	432b      	orrs	r3, r5
  tmp |=  hdma->Init.Direction        |
 80103fc:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 80103fe:	6023      	str	r3, [r4, #0]
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8010400:	2300      	movs	r3, #0
 8010402:	6343      	str	r3, [r0, #52]	; 0x34

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8010404:	3301      	adds	r3, #1
 8010406:	5443      	strb	r3, [r0, r1]
  
  return HAL_OK;
 8010408:	2000      	movs	r0, #0
}  
 801040a:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 801040c:	2001      	movs	r0, #1
 801040e:	e7fc      	b.n	801040a <HAL_DMA_Init+0x4a>
 8010410:	ffffc00f 	.word	0xffffc00f

08010414 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8010414:	b570      	push	{r4, r5, r6, lr}
  /* Process locked */
  __HAL_LOCK(hdma);
 8010416:	2420      	movs	r4, #32
 8010418:	5d04      	ldrb	r4, [r0, r4]
 801041a:	2c01      	cmp	r4, #1
 801041c:	d02d      	beq.n	801047a <HAL_DMA_Start_IT+0x66>
 801041e:	2601      	movs	r6, #1
 8010420:	2420      	movs	r4, #32
 8010422:	5506      	strb	r6, [r0, r4]

  /* Change DMA peripheral state */  
  hdma->State = HAL_DMA_STATE_BUSY;  
 8010424:	3401      	adds	r4, #1
 8010426:	2502      	movs	r5, #2
 8010428:	5505      	strb	r5, [r0, r4]

   /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 801042a:	6805      	ldr	r5, [r0, #0]
 801042c:	682c      	ldr	r4, [r5, #0]
 801042e:	43b4      	bics	r4, r6
 8010430:	602c      	str	r4, [r5, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8010432:	6804      	ldr	r4, [r0, #0]
 8010434:	6063      	str	r3, [r4, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8010436:	6843      	ldr	r3, [r0, #4]
 8010438:	2b10      	cmp	r3, #16
 801043a:	d019      	beq.n	8010470 <HAL_DMA_Start_IT+0x5c>
  }
  /* Memory to Peripheral */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 801043c:	6803      	ldr	r3, [r0, #0]
 801043e:	6099      	str	r1, [r3, #8]
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8010440:	6803      	ldr	r3, [r0, #0]
 8010442:	60da      	str	r2, [r3, #12]
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_TC);
 8010444:	6802      	ldr	r2, [r0, #0]
 8010446:	6813      	ldr	r3, [r2, #0]
 8010448:	2102      	movs	r1, #2
 801044a:	430b      	orrs	r3, r1
 801044c:	6013      	str	r3, [r2, #0]
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);  
 801044e:	6802      	ldr	r2, [r0, #0]
 8010450:	6813      	ldr	r3, [r2, #0]
 8010452:	3102      	adds	r1, #2
 8010454:	430b      	orrs	r3, r1
 8010456:	6013      	str	r3, [r2, #0]
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_TE);
 8010458:	6802      	ldr	r2, [r0, #0]
 801045a:	6813      	ldr	r3, [r2, #0]
 801045c:	3104      	adds	r1, #4
 801045e:	430b      	orrs	r3, r1
 8010460:	6013      	str	r3, [r2, #0]
  __HAL_DMA_ENABLE(hdma);   
 8010462:	6802      	ldr	r2, [r0, #0]
 8010464:	6813      	ldr	r3, [r2, #0]
 8010466:	3907      	subs	r1, #7
 8010468:	430b      	orrs	r3, r1
 801046a:	6013      	str	r3, [r2, #0]
  return HAL_OK;    
 801046c:	2000      	movs	r0, #0
} 
 801046e:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CPAR = DstAddress;
 8010470:	6803      	ldr	r3, [r0, #0]
 8010472:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 8010474:	6803      	ldr	r3, [r0, #0]
 8010476:	60d9      	str	r1, [r3, #12]
 8010478:	e7e4      	b.n	8010444 <HAL_DMA_Start_IT+0x30>
  __HAL_LOCK(hdma);
 801047a:	2002      	movs	r0, #2
 801047c:	e7f7      	b.n	801046e <HAL_DMA_Start_IT+0x5a>

0801047e <HAL_DMA_Abort>:
{
 801047e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010480:	0004      	movs	r4, r0
  __HAL_DMA_DISABLE(hdma);
 8010482:	6802      	ldr	r2, [r0, #0]
 8010484:	6813      	ldr	r3, [r2, #0]
 8010486:	2101      	movs	r1, #1
 8010488:	438b      	bics	r3, r1
 801048a:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 801048c:	f7ff fdd0 	bl	8010030 <HAL_GetTick>
 8010490:	0005      	movs	r5, r0
  while((hdma->Instance->CCR & DMA_CCR_EN) != 0) 
 8010492:	2601      	movs	r6, #1
    if((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8010494:	27fa      	movs	r7, #250	; 0xfa
 8010496:	00bf      	lsls	r7, r7, #2
  while((hdma->Instance->CCR & DMA_CCR_EN) != 0) 
 8010498:	6823      	ldr	r3, [r4, #0]
 801049a:	681b      	ldr	r3, [r3, #0]
 801049c:	421e      	tst	r6, r3
 801049e:	d00f      	beq.n	80104c0 <HAL_DMA_Abort+0x42>
    if((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 80104a0:	f7ff fdc6 	bl	8010030 <HAL_GetTick>
 80104a4:	1b40      	subs	r0, r0, r5
 80104a6:	42b8      	cmp	r0, r7
 80104a8:	d9f6      	bls.n	8010498 <HAL_DMA_Abort+0x1a>
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TIMEOUT);
 80104aa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80104ac:	2220      	movs	r2, #32
 80104ae:	4313      	orrs	r3, r2
 80104b0:	6363      	str	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80104b2:	2321      	movs	r3, #33	; 0x21
 80104b4:	2103      	movs	r1, #3
 80104b6:	54e1      	strb	r1, [r4, r3]
      __HAL_UNLOCK(hdma);
 80104b8:	2300      	movs	r3, #0
 80104ba:	54a3      	strb	r3, [r4, r2]
      return HAL_TIMEOUT;
 80104bc:	2003      	movs	r0, #3
 80104be:	e006      	b.n	80104ce <HAL_DMA_Abort+0x50>
  hdma->State = HAL_DMA_STATE_READY; 
 80104c0:	2321      	movs	r3, #33	; 0x21
 80104c2:	2201      	movs	r2, #1
 80104c4:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(hdma);
 80104c6:	3b01      	subs	r3, #1
 80104c8:	2200      	movs	r2, #0
 80104ca:	54e2      	strb	r2, [r4, r3]
  return HAL_OK; 
 80104cc:	2000      	movs	r0, #0
}
 80104ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080104d0 <HAL_DMA_IRQHandler>:
{        
 80104d0:	b510      	push	{r4, lr}
 80104d2:	0004      	movs	r4, r0
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 80104d4:	6803      	ldr	r3, [r0, #0]
 80104d6:	4ab1      	ldr	r2, [pc, #708]	; (801079c <HAL_DMA_IRQHandler+0x2cc>)
 80104d8:	4293      	cmp	r3, r2
 80104da:	d97e      	bls.n	80105da <HAL_DMA_IRQHandler+0x10a>
 80104dc:	4ab0      	ldr	r2, [pc, #704]	; (80107a0 <HAL_DMA_IRQHandler+0x2d0>)
 80104de:	6811      	ldr	r1, [r2, #0]
 80104e0:	4ab0      	ldr	r2, [pc, #704]	; (80107a4 <HAL_DMA_IRQHandler+0x2d4>)
 80104e2:	4293      	cmp	r3, r2
 80104e4:	d026      	beq.n	8010534 <HAL_DMA_IRQHandler+0x64>
 80104e6:	4ab0      	ldr	r2, [pc, #704]	; (80107a8 <HAL_DMA_IRQHandler+0x2d8>)
 80104e8:	4293      	cmp	r3, r2
 80104ea:	d05e      	beq.n	80105aa <HAL_DMA_IRQHandler+0xda>
 80104ec:	4aaf      	ldr	r2, [pc, #700]	; (80107ac <HAL_DMA_IRQHandler+0x2dc>)
 80104ee:	4293      	cmp	r3, r2
 80104f0:	d05d      	beq.n	80105ae <HAL_DMA_IRQHandler+0xde>
 80104f2:	4aaf      	ldr	r2, [pc, #700]	; (80107b0 <HAL_DMA_IRQHandler+0x2e0>)
 80104f4:	4293      	cmp	r3, r2
 80104f6:	d05d      	beq.n	80105b4 <HAL_DMA_IRQHandler+0xe4>
 80104f8:	4aae      	ldr	r2, [pc, #696]	; (80107b4 <HAL_DMA_IRQHandler+0x2e4>)
 80104fa:	4293      	cmp	r3, r2
 80104fc:	d05d      	beq.n	80105ba <HAL_DMA_IRQHandler+0xea>
 80104fe:	4aae      	ldr	r2, [pc, #696]	; (80107b8 <HAL_DMA_IRQHandler+0x2e8>)
 8010500:	4293      	cmp	r3, r2
 8010502:	d05d      	beq.n	80105c0 <HAL_DMA_IRQHandler+0xf0>
 8010504:	4aa5      	ldr	r2, [pc, #660]	; (801079c <HAL_DMA_IRQHandler+0x2cc>)
 8010506:	4293      	cmp	r3, r2
 8010508:	d05d      	beq.n	80105c6 <HAL_DMA_IRQHandler+0xf6>
 801050a:	4aac      	ldr	r2, [pc, #688]	; (80107bc <HAL_DMA_IRQHandler+0x2ec>)
 801050c:	4293      	cmp	r3, r2
 801050e:	d05d      	beq.n	80105cc <HAL_DMA_IRQHandler+0xfc>
 8010510:	4aab      	ldr	r2, [pc, #684]	; (80107c0 <HAL_DMA_IRQHandler+0x2f0>)
 8010512:	4293      	cmp	r3, r2
 8010514:	d05c      	beq.n	80105d0 <HAL_DMA_IRQHandler+0x100>
 8010516:	4aab      	ldr	r2, [pc, #684]	; (80107c4 <HAL_DMA_IRQHandler+0x2f4>)
 8010518:	4293      	cmp	r3, r2
 801051a:	d05b      	beq.n	80105d4 <HAL_DMA_IRQHandler+0x104>
 801051c:	4aaa      	ldr	r2, [pc, #680]	; (80107c8 <HAL_DMA_IRQHandler+0x2f8>)
 801051e:	189a      	adds	r2, r3, r2
 8010520:	4250      	negs	r0, r2
 8010522:	4142      	adcs	r2, r0
 8010524:	4252      	negs	r2, r2
 8010526:	48a9      	ldr	r0, [pc, #676]	; (80107cc <HAL_DMA_IRQHandler+0x2fc>)
 8010528:	4002      	ands	r2, r0
 801052a:	2080      	movs	r0, #128	; 0x80
 801052c:	0300      	lsls	r0, r0, #12
 801052e:	4684      	mov	ip, r0
 8010530:	4462      	add	r2, ip
 8010532:	e000      	b.n	8010536 <HAL_DMA_IRQHandler+0x66>
 8010534:	2208      	movs	r2, #8
 8010536:	420a      	tst	r2, r1
 8010538:	d001      	beq.n	801053e <HAL_DMA_IRQHandler+0x6e>
 801053a:	f000 fbfb 	bl	8010d34 <HAL_DMA_IRQHandler+0x864>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 801053e:	4a98      	ldr	r2, [pc, #608]	; (80107a0 <HAL_DMA_IRQHandler+0x2d0>)
 8010540:	6811      	ldr	r1, [r2, #0]
 8010542:	4a98      	ldr	r2, [pc, #608]	; (80107a4 <HAL_DMA_IRQHandler+0x2d4>)
 8010544:	4293      	cmp	r3, r2
 8010546:	d100      	bne.n	801054a <HAL_DMA_IRQHandler+0x7a>
 8010548:	e18d      	b.n	8010866 <HAL_DMA_IRQHandler+0x396>
 801054a:	4a97      	ldr	r2, [pc, #604]	; (80107a8 <HAL_DMA_IRQHandler+0x2d8>)
 801054c:	4293      	cmp	r3, r2
 801054e:	d100      	bne.n	8010552 <HAL_DMA_IRQHandler+0x82>
 8010550:	e18e      	b.n	8010870 <HAL_DMA_IRQHandler+0x3a0>
 8010552:	4a96      	ldr	r2, [pc, #600]	; (80107ac <HAL_DMA_IRQHandler+0x2dc>)
 8010554:	4293      	cmp	r3, r2
 8010556:	d100      	bne.n	801055a <HAL_DMA_IRQHandler+0x8a>
 8010558:	e18c      	b.n	8010874 <HAL_DMA_IRQHandler+0x3a4>
 801055a:	4a95      	ldr	r2, [pc, #596]	; (80107b0 <HAL_DMA_IRQHandler+0x2e0>)
 801055c:	4293      	cmp	r3, r2
 801055e:	d100      	bne.n	8010562 <HAL_DMA_IRQHandler+0x92>
 8010560:	e18b      	b.n	801087a <HAL_DMA_IRQHandler+0x3aa>
 8010562:	4a94      	ldr	r2, [pc, #592]	; (80107b4 <HAL_DMA_IRQHandler+0x2e4>)
 8010564:	4293      	cmp	r3, r2
 8010566:	d100      	bne.n	801056a <HAL_DMA_IRQHandler+0x9a>
 8010568:	e18a      	b.n	8010880 <HAL_DMA_IRQHandler+0x3b0>
 801056a:	4a93      	ldr	r2, [pc, #588]	; (80107b8 <HAL_DMA_IRQHandler+0x2e8>)
 801056c:	4293      	cmp	r3, r2
 801056e:	d100      	bne.n	8010572 <HAL_DMA_IRQHandler+0xa2>
 8010570:	e189      	b.n	8010886 <HAL_DMA_IRQHandler+0x3b6>
 8010572:	4a8a      	ldr	r2, [pc, #552]	; (801079c <HAL_DMA_IRQHandler+0x2cc>)
 8010574:	4293      	cmp	r3, r2
 8010576:	d100      	bne.n	801057a <HAL_DMA_IRQHandler+0xaa>
 8010578:	e188      	b.n	801088c <HAL_DMA_IRQHandler+0x3bc>
 801057a:	4a90      	ldr	r2, [pc, #576]	; (80107bc <HAL_DMA_IRQHandler+0x2ec>)
 801057c:	4293      	cmp	r3, r2
 801057e:	d100      	bne.n	8010582 <HAL_DMA_IRQHandler+0xb2>
 8010580:	e187      	b.n	8010892 <HAL_DMA_IRQHandler+0x3c2>
 8010582:	4a8f      	ldr	r2, [pc, #572]	; (80107c0 <HAL_DMA_IRQHandler+0x2f0>)
 8010584:	4293      	cmp	r3, r2
 8010586:	d100      	bne.n	801058a <HAL_DMA_IRQHandler+0xba>
 8010588:	e185      	b.n	8010896 <HAL_DMA_IRQHandler+0x3c6>
 801058a:	4a8e      	ldr	r2, [pc, #568]	; (80107c4 <HAL_DMA_IRQHandler+0x2f4>)
 801058c:	4293      	cmp	r3, r2
 801058e:	d100      	bne.n	8010592 <HAL_DMA_IRQHandler+0xc2>
 8010590:	e183      	b.n	801089a <HAL_DMA_IRQHandler+0x3ca>
 8010592:	4a8d      	ldr	r2, [pc, #564]	; (80107c8 <HAL_DMA_IRQHandler+0x2f8>)
 8010594:	189a      	adds	r2, r3, r2
 8010596:	4250      	negs	r0, r2
 8010598:	4142      	adcs	r2, r0
 801059a:	4252      	negs	r2, r2
 801059c:	488c      	ldr	r0, [pc, #560]	; (80107d0 <HAL_DMA_IRQHandler+0x300>)
 801059e:	4002      	ands	r2, r0
 80105a0:	2080      	movs	r0, #128	; 0x80
 80105a2:	02c0      	lsls	r0, r0, #11
 80105a4:	4684      	mov	ip, r0
 80105a6:	4462      	add	r2, ip
 80105a8:	e15e      	b.n	8010868 <HAL_DMA_IRQHandler+0x398>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 80105aa:	2280      	movs	r2, #128	; 0x80
 80105ac:	e7c3      	b.n	8010536 <HAL_DMA_IRQHandler+0x66>
 80105ae:	2280      	movs	r2, #128	; 0x80
 80105b0:	0112      	lsls	r2, r2, #4
 80105b2:	e7c0      	b.n	8010536 <HAL_DMA_IRQHandler+0x66>
 80105b4:	2280      	movs	r2, #128	; 0x80
 80105b6:	0212      	lsls	r2, r2, #8
 80105b8:	e7bd      	b.n	8010536 <HAL_DMA_IRQHandler+0x66>
 80105ba:	2280      	movs	r2, #128	; 0x80
 80105bc:	0312      	lsls	r2, r2, #12
 80105be:	e7ba      	b.n	8010536 <HAL_DMA_IRQHandler+0x66>
 80105c0:	2280      	movs	r2, #128	; 0x80
 80105c2:	0412      	lsls	r2, r2, #16
 80105c4:	e7b7      	b.n	8010536 <HAL_DMA_IRQHandler+0x66>
 80105c6:	2280      	movs	r2, #128	; 0x80
 80105c8:	0512      	lsls	r2, r2, #20
 80105ca:	e7b4      	b.n	8010536 <HAL_DMA_IRQHandler+0x66>
 80105cc:	2208      	movs	r2, #8
 80105ce:	e7b2      	b.n	8010536 <HAL_DMA_IRQHandler+0x66>
 80105d0:	2280      	movs	r2, #128	; 0x80
 80105d2:	e7b0      	b.n	8010536 <HAL_DMA_IRQHandler+0x66>
 80105d4:	2280      	movs	r2, #128	; 0x80
 80105d6:	0112      	lsls	r2, r2, #4
 80105d8:	e7ad      	b.n	8010536 <HAL_DMA_IRQHandler+0x66>
 80105da:	4a7e      	ldr	r2, [pc, #504]	; (80107d4 <HAL_DMA_IRQHandler+0x304>)
 80105dc:	6811      	ldr	r1, [r2, #0]
 80105de:	4a71      	ldr	r2, [pc, #452]	; (80107a4 <HAL_DMA_IRQHandler+0x2d4>)
 80105e0:	4293      	cmp	r3, r2
 80105e2:	d026      	beq.n	8010632 <HAL_DMA_IRQHandler+0x162>
 80105e4:	4a70      	ldr	r2, [pc, #448]	; (80107a8 <HAL_DMA_IRQHandler+0x2d8>)
 80105e6:	4293      	cmp	r3, r2
 80105e8:	d05d      	beq.n	80106a6 <HAL_DMA_IRQHandler+0x1d6>
 80105ea:	4a70      	ldr	r2, [pc, #448]	; (80107ac <HAL_DMA_IRQHandler+0x2dc>)
 80105ec:	4293      	cmp	r3, r2
 80105ee:	d05c      	beq.n	80106aa <HAL_DMA_IRQHandler+0x1da>
 80105f0:	4a6f      	ldr	r2, [pc, #444]	; (80107b0 <HAL_DMA_IRQHandler+0x2e0>)
 80105f2:	4293      	cmp	r3, r2
 80105f4:	d05c      	beq.n	80106b0 <HAL_DMA_IRQHandler+0x1e0>
 80105f6:	4a6f      	ldr	r2, [pc, #444]	; (80107b4 <HAL_DMA_IRQHandler+0x2e4>)
 80105f8:	4293      	cmp	r3, r2
 80105fa:	d05c      	beq.n	80106b6 <HAL_DMA_IRQHandler+0x1e6>
 80105fc:	4a6e      	ldr	r2, [pc, #440]	; (80107b8 <HAL_DMA_IRQHandler+0x2e8>)
 80105fe:	4293      	cmp	r3, r2
 8010600:	d05c      	beq.n	80106bc <HAL_DMA_IRQHandler+0x1ec>
 8010602:	4a66      	ldr	r2, [pc, #408]	; (801079c <HAL_DMA_IRQHandler+0x2cc>)
 8010604:	4293      	cmp	r3, r2
 8010606:	d05c      	beq.n	80106c2 <HAL_DMA_IRQHandler+0x1f2>
 8010608:	4a6c      	ldr	r2, [pc, #432]	; (80107bc <HAL_DMA_IRQHandler+0x2ec>)
 801060a:	4293      	cmp	r3, r2
 801060c:	d05c      	beq.n	80106c8 <HAL_DMA_IRQHandler+0x1f8>
 801060e:	4a6c      	ldr	r2, [pc, #432]	; (80107c0 <HAL_DMA_IRQHandler+0x2f0>)
 8010610:	4293      	cmp	r3, r2
 8010612:	d05b      	beq.n	80106cc <HAL_DMA_IRQHandler+0x1fc>
 8010614:	4a6b      	ldr	r2, [pc, #428]	; (80107c4 <HAL_DMA_IRQHandler+0x2f4>)
 8010616:	4293      	cmp	r3, r2
 8010618:	d05a      	beq.n	80106d0 <HAL_DMA_IRQHandler+0x200>
 801061a:	4a6b      	ldr	r2, [pc, #428]	; (80107c8 <HAL_DMA_IRQHandler+0x2f8>)
 801061c:	189a      	adds	r2, r3, r2
 801061e:	4250      	negs	r0, r2
 8010620:	4142      	adcs	r2, r0
 8010622:	4252      	negs	r2, r2
 8010624:	4869      	ldr	r0, [pc, #420]	; (80107cc <HAL_DMA_IRQHandler+0x2fc>)
 8010626:	4002      	ands	r2, r0
 8010628:	2080      	movs	r0, #128	; 0x80
 801062a:	0300      	lsls	r0, r0, #12
 801062c:	4684      	mov	ip, r0
 801062e:	4462      	add	r2, ip
 8010630:	e000      	b.n	8010634 <HAL_DMA_IRQHandler+0x164>
 8010632:	2208      	movs	r2, #8
 8010634:	420a      	tst	r2, r1
 8010636:	d000      	beq.n	801063a <HAL_DMA_IRQHandler+0x16a>
 8010638:	e376      	b.n	8010d28 <HAL_DMA_IRQHandler+0x858>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 801063a:	4a66      	ldr	r2, [pc, #408]	; (80107d4 <HAL_DMA_IRQHandler+0x304>)
 801063c:	6811      	ldr	r1, [r2, #0]
 801063e:	4a59      	ldr	r2, [pc, #356]	; (80107a4 <HAL_DMA_IRQHandler+0x2d4>)
 8010640:	4293      	cmp	r3, r2
 8010642:	d100      	bne.n	8010646 <HAL_DMA_IRQHandler+0x176>
 8010644:	e12c      	b.n	80108a0 <HAL_DMA_IRQHandler+0x3d0>
 8010646:	4a58      	ldr	r2, [pc, #352]	; (80107a8 <HAL_DMA_IRQHandler+0x2d8>)
 8010648:	4293      	cmp	r3, r2
 801064a:	d100      	bne.n	801064e <HAL_DMA_IRQHandler+0x17e>
 801064c:	e16e      	b.n	801092c <HAL_DMA_IRQHandler+0x45c>
 801064e:	4a57      	ldr	r2, [pc, #348]	; (80107ac <HAL_DMA_IRQHandler+0x2dc>)
 8010650:	4293      	cmp	r3, r2
 8010652:	d100      	bne.n	8010656 <HAL_DMA_IRQHandler+0x186>
 8010654:	e16c      	b.n	8010930 <HAL_DMA_IRQHandler+0x460>
 8010656:	4a56      	ldr	r2, [pc, #344]	; (80107b0 <HAL_DMA_IRQHandler+0x2e0>)
 8010658:	4293      	cmp	r3, r2
 801065a:	d100      	bne.n	801065e <HAL_DMA_IRQHandler+0x18e>
 801065c:	e16b      	b.n	8010936 <HAL_DMA_IRQHandler+0x466>
 801065e:	4a55      	ldr	r2, [pc, #340]	; (80107b4 <HAL_DMA_IRQHandler+0x2e4>)
 8010660:	4293      	cmp	r3, r2
 8010662:	d100      	bne.n	8010666 <HAL_DMA_IRQHandler+0x196>
 8010664:	e16a      	b.n	801093c <HAL_DMA_IRQHandler+0x46c>
 8010666:	4a54      	ldr	r2, [pc, #336]	; (80107b8 <HAL_DMA_IRQHandler+0x2e8>)
 8010668:	4293      	cmp	r3, r2
 801066a:	d100      	bne.n	801066e <HAL_DMA_IRQHandler+0x19e>
 801066c:	e169      	b.n	8010942 <HAL_DMA_IRQHandler+0x472>
 801066e:	4a4b      	ldr	r2, [pc, #300]	; (801079c <HAL_DMA_IRQHandler+0x2cc>)
 8010670:	4293      	cmp	r3, r2
 8010672:	d100      	bne.n	8010676 <HAL_DMA_IRQHandler+0x1a6>
 8010674:	e168      	b.n	8010948 <HAL_DMA_IRQHandler+0x478>
 8010676:	4a51      	ldr	r2, [pc, #324]	; (80107bc <HAL_DMA_IRQHandler+0x2ec>)
 8010678:	4293      	cmp	r3, r2
 801067a:	d100      	bne.n	801067e <HAL_DMA_IRQHandler+0x1ae>
 801067c:	e167      	b.n	801094e <HAL_DMA_IRQHandler+0x47e>
 801067e:	4a50      	ldr	r2, [pc, #320]	; (80107c0 <HAL_DMA_IRQHandler+0x2f0>)
 8010680:	4293      	cmp	r3, r2
 8010682:	d100      	bne.n	8010686 <HAL_DMA_IRQHandler+0x1b6>
 8010684:	e165      	b.n	8010952 <HAL_DMA_IRQHandler+0x482>
 8010686:	4a4f      	ldr	r2, [pc, #316]	; (80107c4 <HAL_DMA_IRQHandler+0x2f4>)
 8010688:	4293      	cmp	r3, r2
 801068a:	d100      	bne.n	801068e <HAL_DMA_IRQHandler+0x1be>
 801068c:	e163      	b.n	8010956 <HAL_DMA_IRQHandler+0x486>
 801068e:	4a4e      	ldr	r2, [pc, #312]	; (80107c8 <HAL_DMA_IRQHandler+0x2f8>)
 8010690:	189a      	adds	r2, r3, r2
 8010692:	4250      	negs	r0, r2
 8010694:	4142      	adcs	r2, r0
 8010696:	4252      	negs	r2, r2
 8010698:	484d      	ldr	r0, [pc, #308]	; (80107d0 <HAL_DMA_IRQHandler+0x300>)
 801069a:	4002      	ands	r2, r0
 801069c:	2080      	movs	r0, #128	; 0x80
 801069e:	02c0      	lsls	r0, r0, #11
 80106a0:	4684      	mov	ip, r0
 80106a2:	4462      	add	r2, ip
 80106a4:	e0fd      	b.n	80108a2 <HAL_DMA_IRQHandler+0x3d2>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 80106a6:	2280      	movs	r2, #128	; 0x80
 80106a8:	e7c4      	b.n	8010634 <HAL_DMA_IRQHandler+0x164>
 80106aa:	2280      	movs	r2, #128	; 0x80
 80106ac:	0112      	lsls	r2, r2, #4
 80106ae:	e7c1      	b.n	8010634 <HAL_DMA_IRQHandler+0x164>
 80106b0:	2280      	movs	r2, #128	; 0x80
 80106b2:	0212      	lsls	r2, r2, #8
 80106b4:	e7be      	b.n	8010634 <HAL_DMA_IRQHandler+0x164>
 80106b6:	2280      	movs	r2, #128	; 0x80
 80106b8:	0312      	lsls	r2, r2, #12
 80106ba:	e7bb      	b.n	8010634 <HAL_DMA_IRQHandler+0x164>
 80106bc:	2280      	movs	r2, #128	; 0x80
 80106be:	0412      	lsls	r2, r2, #16
 80106c0:	e7b8      	b.n	8010634 <HAL_DMA_IRQHandler+0x164>
 80106c2:	2280      	movs	r2, #128	; 0x80
 80106c4:	0512      	lsls	r2, r2, #20
 80106c6:	e7b5      	b.n	8010634 <HAL_DMA_IRQHandler+0x164>
 80106c8:	2208      	movs	r2, #8
 80106ca:	e7b3      	b.n	8010634 <HAL_DMA_IRQHandler+0x164>
 80106cc:	2280      	movs	r2, #128	; 0x80
 80106ce:	e7b1      	b.n	8010634 <HAL_DMA_IRQHandler+0x164>
 80106d0:	2280      	movs	r2, #128	; 0x80
 80106d2:	0112      	lsls	r2, r2, #4
 80106d4:	e7ae      	b.n	8010634 <HAL_DMA_IRQHandler+0x164>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE);
 80106d6:	681a      	ldr	r2, [r3, #0]
 80106d8:	2108      	movs	r1, #8
 80106da:	438a      	bics	r2, r1
 80106dc:	601a      	str	r2, [r3, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80106de:	6823      	ldr	r3, [r4, #0]
 80106e0:	4a2e      	ldr	r2, [pc, #184]	; (801079c <HAL_DMA_IRQHandler+0x2cc>)
 80106e2:	4293      	cmp	r3, r2
 80106e4:	d978      	bls.n	80107d8 <HAL_DMA_IRQHandler+0x308>
 80106e6:	4a2f      	ldr	r2, [pc, #188]	; (80107a4 <HAL_DMA_IRQHandler+0x2d4>)
 80106e8:	4293      	cmp	r3, r2
 80106ea:	d027      	beq.n	801073c <HAL_DMA_IRQHandler+0x26c>
 80106ec:	4a2e      	ldr	r2, [pc, #184]	; (80107a8 <HAL_DMA_IRQHandler+0x2d8>)
 80106ee:	4293      	cmp	r3, r2
 80106f0:	d03c      	beq.n	801076c <HAL_DMA_IRQHandler+0x29c>
 80106f2:	4a2e      	ldr	r2, [pc, #184]	; (80107ac <HAL_DMA_IRQHandler+0x2dc>)
 80106f4:	4293      	cmp	r3, r2
 80106f6:	d03b      	beq.n	8010770 <HAL_DMA_IRQHandler+0x2a0>
 80106f8:	4a2d      	ldr	r2, [pc, #180]	; (80107b0 <HAL_DMA_IRQHandler+0x2e0>)
 80106fa:	4293      	cmp	r3, r2
 80106fc:	d03b      	beq.n	8010776 <HAL_DMA_IRQHandler+0x2a6>
 80106fe:	4a2d      	ldr	r2, [pc, #180]	; (80107b4 <HAL_DMA_IRQHandler+0x2e4>)
 8010700:	4293      	cmp	r3, r2
 8010702:	d03b      	beq.n	801077c <HAL_DMA_IRQHandler+0x2ac>
 8010704:	4a2c      	ldr	r2, [pc, #176]	; (80107b8 <HAL_DMA_IRQHandler+0x2e8>)
 8010706:	4293      	cmp	r3, r2
 8010708:	d03b      	beq.n	8010782 <HAL_DMA_IRQHandler+0x2b2>
 801070a:	4a24      	ldr	r2, [pc, #144]	; (801079c <HAL_DMA_IRQHandler+0x2cc>)
 801070c:	4293      	cmp	r3, r2
 801070e:	d03b      	beq.n	8010788 <HAL_DMA_IRQHandler+0x2b8>
 8010710:	4a2a      	ldr	r2, [pc, #168]	; (80107bc <HAL_DMA_IRQHandler+0x2ec>)
 8010712:	4293      	cmp	r3, r2
 8010714:	d03b      	beq.n	801078e <HAL_DMA_IRQHandler+0x2be>
 8010716:	4a2a      	ldr	r2, [pc, #168]	; (80107c0 <HAL_DMA_IRQHandler+0x2f0>)
 8010718:	4293      	cmp	r3, r2
 801071a:	d03a      	beq.n	8010792 <HAL_DMA_IRQHandler+0x2c2>
 801071c:	4a29      	ldr	r2, [pc, #164]	; (80107c4 <HAL_DMA_IRQHandler+0x2f4>)
 801071e:	4293      	cmp	r3, r2
 8010720:	d039      	beq.n	8010796 <HAL_DMA_IRQHandler+0x2c6>
 8010722:	4a29      	ldr	r2, [pc, #164]	; (80107c8 <HAL_DMA_IRQHandler+0x2f8>)
 8010724:	4694      	mov	ip, r2
 8010726:	4463      	add	r3, ip
 8010728:	425a      	negs	r2, r3
 801072a:	4153      	adcs	r3, r2
 801072c:	425b      	negs	r3, r3
 801072e:	4a27      	ldr	r2, [pc, #156]	; (80107cc <HAL_DMA_IRQHandler+0x2fc>)
 8010730:	4013      	ands	r3, r2
 8010732:	2280      	movs	r2, #128	; 0x80
 8010734:	0312      	lsls	r2, r2, #12
 8010736:	4694      	mov	ip, r2
 8010738:	4463      	add	r3, ip
 801073a:	e000      	b.n	801073e <HAL_DMA_IRQHandler+0x26e>
 801073c:	2308      	movs	r3, #8
 801073e:	4a18      	ldr	r2, [pc, #96]	; (80107a0 <HAL_DMA_IRQHandler+0x2d0>)
 8010740:	6053      	str	r3, [r2, #4]
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 8010742:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010744:	2201      	movs	r2, #1
 8010746:	4313      	orrs	r3, r2
 8010748:	6363      	str	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_ERROR;    
 801074a:	2321      	movs	r3, #33	; 0x21
 801074c:	3203      	adds	r2, #3
 801074e:	54e2      	strb	r2, [r4, r3]
      __HAL_UNLOCK(hdma); 
 8010750:	3b01      	subs	r3, #1
 8010752:	2200      	movs	r2, #0
 8010754:	54e2      	strb	r2, [r4, r3]
      if (hdma->XferErrorCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 8010756:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8010758:	2b00      	cmp	r3, #0
 801075a:	d001      	beq.n	8010760 <HAL_DMA_IRQHandler+0x290>
        hdma->XferErrorCallback(hdma);
 801075c:	0020      	movs	r0, r4
 801075e:	4798      	blx	r3
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8010760:	6823      	ldr	r3, [r4, #0]
 8010762:	4a0e      	ldr	r2, [pc, #56]	; (801079c <HAL_DMA_IRQHandler+0x2cc>)
 8010764:	4293      	cmp	r3, r2
 8010766:	d800      	bhi.n	801076a <HAL_DMA_IRQHandler+0x29a>
 8010768:	e767      	b.n	801063a <HAL_DMA_IRQHandler+0x16a>
 801076a:	e6e8      	b.n	801053e <HAL_DMA_IRQHandler+0x6e>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 801076c:	2380      	movs	r3, #128	; 0x80
 801076e:	e7e6      	b.n	801073e <HAL_DMA_IRQHandler+0x26e>
 8010770:	2380      	movs	r3, #128	; 0x80
 8010772:	011b      	lsls	r3, r3, #4
 8010774:	e7e3      	b.n	801073e <HAL_DMA_IRQHandler+0x26e>
 8010776:	2380      	movs	r3, #128	; 0x80
 8010778:	021b      	lsls	r3, r3, #8
 801077a:	e7e0      	b.n	801073e <HAL_DMA_IRQHandler+0x26e>
 801077c:	2380      	movs	r3, #128	; 0x80
 801077e:	031b      	lsls	r3, r3, #12
 8010780:	e7dd      	b.n	801073e <HAL_DMA_IRQHandler+0x26e>
 8010782:	2380      	movs	r3, #128	; 0x80
 8010784:	041b      	lsls	r3, r3, #16
 8010786:	e7da      	b.n	801073e <HAL_DMA_IRQHandler+0x26e>
 8010788:	2380      	movs	r3, #128	; 0x80
 801078a:	051b      	lsls	r3, r3, #20
 801078c:	e7d7      	b.n	801073e <HAL_DMA_IRQHandler+0x26e>
 801078e:	2308      	movs	r3, #8
 8010790:	e7d5      	b.n	801073e <HAL_DMA_IRQHandler+0x26e>
 8010792:	2380      	movs	r3, #128	; 0x80
 8010794:	e7d3      	b.n	801073e <HAL_DMA_IRQHandler+0x26e>
 8010796:	2380      	movs	r3, #128	; 0x80
 8010798:	011b      	lsls	r3, r3, #4
 801079a:	e7d0      	b.n	801073e <HAL_DMA_IRQHandler+0x26e>
 801079c:	40020080 	.word	0x40020080
 80107a0:	40020400 	.word	0x40020400
 80107a4:	40020008 	.word	0x40020008
 80107a8:	4002001c 	.word	0x4002001c
 80107ac:	40020030 	.word	0x40020030
 80107b0:	40020044 	.word	0x40020044
 80107b4:	40020058 	.word	0x40020058
 80107b8:	4002006c 	.word	0x4002006c
 80107bc:	40020408 	.word	0x40020408
 80107c0:	4002041c 	.word	0x4002041c
 80107c4:	40020430 	.word	0x40020430
 80107c8:	bffdfbbc 	.word	0xbffdfbbc
 80107cc:	fff88000 	.word	0xfff88000
 80107d0:	fffc4000 	.word	0xfffc4000
 80107d4:	40020000 	.word	0x40020000
 80107d8:	4ab3      	ldr	r2, [pc, #716]	; (8010aa8 <HAL_DMA_IRQHandler+0x5d8>)
 80107da:	4293      	cmp	r3, r2
 80107dc:	d027      	beq.n	801082e <HAL_DMA_IRQHandler+0x35e>
 80107de:	4ab3      	ldr	r2, [pc, #716]	; (8010aac <HAL_DMA_IRQHandler+0x5dc>)
 80107e0:	4293      	cmp	r3, r2
 80107e2:	d028      	beq.n	8010836 <HAL_DMA_IRQHandler+0x366>
 80107e4:	4ab2      	ldr	r2, [pc, #712]	; (8010ab0 <HAL_DMA_IRQHandler+0x5e0>)
 80107e6:	4293      	cmp	r3, r2
 80107e8:	d027      	beq.n	801083a <HAL_DMA_IRQHandler+0x36a>
 80107ea:	4ab2      	ldr	r2, [pc, #712]	; (8010ab4 <HAL_DMA_IRQHandler+0x5e4>)
 80107ec:	4293      	cmp	r3, r2
 80107ee:	d027      	beq.n	8010840 <HAL_DMA_IRQHandler+0x370>
 80107f0:	4ab1      	ldr	r2, [pc, #708]	; (8010ab8 <HAL_DMA_IRQHandler+0x5e8>)
 80107f2:	4293      	cmp	r3, r2
 80107f4:	d027      	beq.n	8010846 <HAL_DMA_IRQHandler+0x376>
 80107f6:	4ab1      	ldr	r2, [pc, #708]	; (8010abc <HAL_DMA_IRQHandler+0x5ec>)
 80107f8:	4293      	cmp	r3, r2
 80107fa:	d027      	beq.n	801084c <HAL_DMA_IRQHandler+0x37c>
 80107fc:	4ab0      	ldr	r2, [pc, #704]	; (8010ac0 <HAL_DMA_IRQHandler+0x5f0>)
 80107fe:	4293      	cmp	r3, r2
 8010800:	d027      	beq.n	8010852 <HAL_DMA_IRQHandler+0x382>
 8010802:	4ab0      	ldr	r2, [pc, #704]	; (8010ac4 <HAL_DMA_IRQHandler+0x5f4>)
 8010804:	4293      	cmp	r3, r2
 8010806:	d027      	beq.n	8010858 <HAL_DMA_IRQHandler+0x388>
 8010808:	4aaf      	ldr	r2, [pc, #700]	; (8010ac8 <HAL_DMA_IRQHandler+0x5f8>)
 801080a:	4293      	cmp	r3, r2
 801080c:	d026      	beq.n	801085c <HAL_DMA_IRQHandler+0x38c>
 801080e:	4aaf      	ldr	r2, [pc, #700]	; (8010acc <HAL_DMA_IRQHandler+0x5fc>)
 8010810:	4293      	cmp	r3, r2
 8010812:	d025      	beq.n	8010860 <HAL_DMA_IRQHandler+0x390>
 8010814:	4aae      	ldr	r2, [pc, #696]	; (8010ad0 <HAL_DMA_IRQHandler+0x600>)
 8010816:	4694      	mov	ip, r2
 8010818:	4463      	add	r3, ip
 801081a:	425a      	negs	r2, r3
 801081c:	4153      	adcs	r3, r2
 801081e:	425b      	negs	r3, r3
 8010820:	4aac      	ldr	r2, [pc, #688]	; (8010ad4 <HAL_DMA_IRQHandler+0x604>)
 8010822:	4013      	ands	r3, r2
 8010824:	2280      	movs	r2, #128	; 0x80
 8010826:	0312      	lsls	r2, r2, #12
 8010828:	4694      	mov	ip, r2
 801082a:	4463      	add	r3, ip
 801082c:	e000      	b.n	8010830 <HAL_DMA_IRQHandler+0x360>
 801082e:	2308      	movs	r3, #8
 8010830:	4aa9      	ldr	r2, [pc, #676]	; (8010ad8 <HAL_DMA_IRQHandler+0x608>)
 8010832:	6053      	str	r3, [r2, #4]
 8010834:	e785      	b.n	8010742 <HAL_DMA_IRQHandler+0x272>
 8010836:	2380      	movs	r3, #128	; 0x80
 8010838:	e7fa      	b.n	8010830 <HAL_DMA_IRQHandler+0x360>
 801083a:	2380      	movs	r3, #128	; 0x80
 801083c:	011b      	lsls	r3, r3, #4
 801083e:	e7f7      	b.n	8010830 <HAL_DMA_IRQHandler+0x360>
 8010840:	2380      	movs	r3, #128	; 0x80
 8010842:	021b      	lsls	r3, r3, #8
 8010844:	e7f4      	b.n	8010830 <HAL_DMA_IRQHandler+0x360>
 8010846:	2380      	movs	r3, #128	; 0x80
 8010848:	031b      	lsls	r3, r3, #12
 801084a:	e7f1      	b.n	8010830 <HAL_DMA_IRQHandler+0x360>
 801084c:	2380      	movs	r3, #128	; 0x80
 801084e:	041b      	lsls	r3, r3, #16
 8010850:	e7ee      	b.n	8010830 <HAL_DMA_IRQHandler+0x360>
 8010852:	2380      	movs	r3, #128	; 0x80
 8010854:	051b      	lsls	r3, r3, #20
 8010856:	e7eb      	b.n	8010830 <HAL_DMA_IRQHandler+0x360>
 8010858:	2308      	movs	r3, #8
 801085a:	e7e9      	b.n	8010830 <HAL_DMA_IRQHandler+0x360>
 801085c:	2380      	movs	r3, #128	; 0x80
 801085e:	e7e7      	b.n	8010830 <HAL_DMA_IRQHandler+0x360>
 8010860:	2380      	movs	r3, #128	; 0x80
 8010862:	011b      	lsls	r3, r3, #4
 8010864:	e7e4      	b.n	8010830 <HAL_DMA_IRQHandler+0x360>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8010866:	2204      	movs	r2, #4
 8010868:	420a      	tst	r2, r1
 801086a:	d11d      	bne.n	80108a8 <HAL_DMA_IRQHandler+0x3d8>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 801086c:	6821      	ldr	r1, [r4, #0]
 801086e:	e085      	b.n	801097c <HAL_DMA_IRQHandler+0x4ac>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8010870:	2240      	movs	r2, #64	; 0x40
 8010872:	e7f9      	b.n	8010868 <HAL_DMA_IRQHandler+0x398>
 8010874:	2280      	movs	r2, #128	; 0x80
 8010876:	00d2      	lsls	r2, r2, #3
 8010878:	e7f6      	b.n	8010868 <HAL_DMA_IRQHandler+0x398>
 801087a:	2280      	movs	r2, #128	; 0x80
 801087c:	01d2      	lsls	r2, r2, #7
 801087e:	e7f3      	b.n	8010868 <HAL_DMA_IRQHandler+0x398>
 8010880:	2280      	movs	r2, #128	; 0x80
 8010882:	02d2      	lsls	r2, r2, #11
 8010884:	e7f0      	b.n	8010868 <HAL_DMA_IRQHandler+0x398>
 8010886:	2280      	movs	r2, #128	; 0x80
 8010888:	03d2      	lsls	r2, r2, #15
 801088a:	e7ed      	b.n	8010868 <HAL_DMA_IRQHandler+0x398>
 801088c:	2280      	movs	r2, #128	; 0x80
 801088e:	04d2      	lsls	r2, r2, #19
 8010890:	e7ea      	b.n	8010868 <HAL_DMA_IRQHandler+0x398>
 8010892:	2204      	movs	r2, #4
 8010894:	e7e8      	b.n	8010868 <HAL_DMA_IRQHandler+0x398>
 8010896:	2240      	movs	r2, #64	; 0x40
 8010898:	e7e6      	b.n	8010868 <HAL_DMA_IRQHandler+0x398>
 801089a:	2280      	movs	r2, #128	; 0x80
 801089c:	00d2      	lsls	r2, r2, #3
 801089e:	e7e3      	b.n	8010868 <HAL_DMA_IRQHandler+0x398>
 80108a0:	2204      	movs	r2, #4
 80108a2:	420a      	tst	r2, r1
 80108a4:	d100      	bne.n	80108a8 <HAL_DMA_IRQHandler+0x3d8>
 80108a6:	e208      	b.n	8010cba <HAL_DMA_IRQHandler+0x7ea>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80108a8:	681a      	ldr	r2, [r3, #0]
 80108aa:	0752      	lsls	r2, r2, #29
 80108ac:	d561      	bpl.n	8010972 <HAL_DMA_IRQHandler+0x4a2>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0)
 80108ae:	681a      	ldr	r2, [r3, #0]
 80108b0:	0692      	lsls	r2, r2, #26
 80108b2:	d403      	bmi.n	80108bc <HAL_DMA_IRQHandler+0x3ec>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80108b4:	681a      	ldr	r2, [r3, #0]
 80108b6:	2104      	movs	r1, #4
 80108b8:	438a      	bics	r2, r1
 80108ba:	601a      	str	r2, [r3, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80108bc:	6823      	ldr	r3, [r4, #0]
 80108be:	4a80      	ldr	r2, [pc, #512]	; (8010ac0 <HAL_DMA_IRQHandler+0x5f0>)
 80108c0:	4293      	cmp	r3, r2
 80108c2:	d800      	bhi.n	80108c6 <HAL_DMA_IRQHandler+0x3f6>
 80108c4:	e0a8      	b.n	8010a18 <HAL_DMA_IRQHandler+0x548>
 80108c6:	4a78      	ldr	r2, [pc, #480]	; (8010aa8 <HAL_DMA_IRQHandler+0x5d8>)
 80108c8:	4293      	cmp	r3, r2
 80108ca:	d047      	beq.n	801095c <HAL_DMA_IRQHandler+0x48c>
 80108cc:	4a77      	ldr	r2, [pc, #476]	; (8010aac <HAL_DMA_IRQHandler+0x5dc>)
 80108ce:	4293      	cmp	r3, r2
 80108d0:	d100      	bne.n	80108d4 <HAL_DMA_IRQHandler+0x404>
 80108d2:	e089      	b.n	80109e8 <HAL_DMA_IRQHandler+0x518>
 80108d4:	4a76      	ldr	r2, [pc, #472]	; (8010ab0 <HAL_DMA_IRQHandler+0x5e0>)
 80108d6:	4293      	cmp	r3, r2
 80108d8:	d100      	bne.n	80108dc <HAL_DMA_IRQHandler+0x40c>
 80108da:	e087      	b.n	80109ec <HAL_DMA_IRQHandler+0x51c>
 80108dc:	4a75      	ldr	r2, [pc, #468]	; (8010ab4 <HAL_DMA_IRQHandler+0x5e4>)
 80108de:	4293      	cmp	r3, r2
 80108e0:	d100      	bne.n	80108e4 <HAL_DMA_IRQHandler+0x414>
 80108e2:	e086      	b.n	80109f2 <HAL_DMA_IRQHandler+0x522>
 80108e4:	4a74      	ldr	r2, [pc, #464]	; (8010ab8 <HAL_DMA_IRQHandler+0x5e8>)
 80108e6:	4293      	cmp	r3, r2
 80108e8:	d100      	bne.n	80108ec <HAL_DMA_IRQHandler+0x41c>
 80108ea:	e085      	b.n	80109f8 <HAL_DMA_IRQHandler+0x528>
 80108ec:	4a73      	ldr	r2, [pc, #460]	; (8010abc <HAL_DMA_IRQHandler+0x5ec>)
 80108ee:	4293      	cmp	r3, r2
 80108f0:	d100      	bne.n	80108f4 <HAL_DMA_IRQHandler+0x424>
 80108f2:	e084      	b.n	80109fe <HAL_DMA_IRQHandler+0x52e>
 80108f4:	4a72      	ldr	r2, [pc, #456]	; (8010ac0 <HAL_DMA_IRQHandler+0x5f0>)
 80108f6:	4293      	cmp	r3, r2
 80108f8:	d100      	bne.n	80108fc <HAL_DMA_IRQHandler+0x42c>
 80108fa:	e083      	b.n	8010a04 <HAL_DMA_IRQHandler+0x534>
 80108fc:	4a71      	ldr	r2, [pc, #452]	; (8010ac4 <HAL_DMA_IRQHandler+0x5f4>)
 80108fe:	4293      	cmp	r3, r2
 8010900:	d100      	bne.n	8010904 <HAL_DMA_IRQHandler+0x434>
 8010902:	e082      	b.n	8010a0a <HAL_DMA_IRQHandler+0x53a>
 8010904:	4a70      	ldr	r2, [pc, #448]	; (8010ac8 <HAL_DMA_IRQHandler+0x5f8>)
 8010906:	4293      	cmp	r3, r2
 8010908:	d100      	bne.n	801090c <HAL_DMA_IRQHandler+0x43c>
 801090a:	e080      	b.n	8010a0e <HAL_DMA_IRQHandler+0x53e>
 801090c:	4a6f      	ldr	r2, [pc, #444]	; (8010acc <HAL_DMA_IRQHandler+0x5fc>)
 801090e:	4293      	cmp	r3, r2
 8010910:	d07f      	beq.n	8010a12 <HAL_DMA_IRQHandler+0x542>
 8010912:	4a6f      	ldr	r2, [pc, #444]	; (8010ad0 <HAL_DMA_IRQHandler+0x600>)
 8010914:	4694      	mov	ip, r2
 8010916:	4463      	add	r3, ip
 8010918:	425a      	negs	r2, r3
 801091a:	4153      	adcs	r3, r2
 801091c:	425b      	negs	r3, r3
 801091e:	4a6f      	ldr	r2, [pc, #444]	; (8010adc <HAL_DMA_IRQHandler+0x60c>)
 8010920:	4013      	ands	r3, r2
 8010922:	2280      	movs	r2, #128	; 0x80
 8010924:	02d2      	lsls	r2, r2, #11
 8010926:	4694      	mov	ip, r2
 8010928:	4463      	add	r3, ip
 801092a:	e018      	b.n	801095e <HAL_DMA_IRQHandler+0x48e>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 801092c:	2240      	movs	r2, #64	; 0x40
 801092e:	e7b8      	b.n	80108a2 <HAL_DMA_IRQHandler+0x3d2>
 8010930:	2280      	movs	r2, #128	; 0x80
 8010932:	00d2      	lsls	r2, r2, #3
 8010934:	e7b5      	b.n	80108a2 <HAL_DMA_IRQHandler+0x3d2>
 8010936:	2280      	movs	r2, #128	; 0x80
 8010938:	01d2      	lsls	r2, r2, #7
 801093a:	e7b2      	b.n	80108a2 <HAL_DMA_IRQHandler+0x3d2>
 801093c:	2280      	movs	r2, #128	; 0x80
 801093e:	02d2      	lsls	r2, r2, #11
 8010940:	e7af      	b.n	80108a2 <HAL_DMA_IRQHandler+0x3d2>
 8010942:	2280      	movs	r2, #128	; 0x80
 8010944:	03d2      	lsls	r2, r2, #15
 8010946:	e7ac      	b.n	80108a2 <HAL_DMA_IRQHandler+0x3d2>
 8010948:	2280      	movs	r2, #128	; 0x80
 801094a:	04d2      	lsls	r2, r2, #19
 801094c:	e7a9      	b.n	80108a2 <HAL_DMA_IRQHandler+0x3d2>
 801094e:	2204      	movs	r2, #4
 8010950:	e7a7      	b.n	80108a2 <HAL_DMA_IRQHandler+0x3d2>
 8010952:	2240      	movs	r2, #64	; 0x40
 8010954:	e7a5      	b.n	80108a2 <HAL_DMA_IRQHandler+0x3d2>
 8010956:	2280      	movs	r2, #128	; 0x80
 8010958:	00d2      	lsls	r2, r2, #3
 801095a:	e7a2      	b.n	80108a2 <HAL_DMA_IRQHandler+0x3d2>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 801095c:	2304      	movs	r3, #4
 801095e:	4a60      	ldr	r2, [pc, #384]	; (8010ae0 <HAL_DMA_IRQHandler+0x610>)
 8010960:	6053      	str	r3, [r2, #4]
      hdma->State = HAL_DMA_STATE_READY_HALF;
 8010962:	2321      	movs	r3, #33	; 0x21
 8010964:	2211      	movs	r2, #17
 8010966:	54e2      	strb	r2, [r4, r3]
      if(hdma->XferHalfCpltCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 8010968:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 801096a:	2b00      	cmp	r3, #0
 801096c:	d001      	beq.n	8010972 <HAL_DMA_IRQHandler+0x4a2>
        hdma->XferHalfCpltCallback(hdma);
 801096e:	0020      	movs	r0, r4
 8010970:	4798      	blx	r3
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 8010972:	6821      	ldr	r1, [r4, #0]
 8010974:	4b52      	ldr	r3, [pc, #328]	; (8010ac0 <HAL_DMA_IRQHandler+0x5f0>)
 8010976:	4299      	cmp	r1, r3
 8010978:	d800      	bhi.n	801097c <HAL_DMA_IRQHandler+0x4ac>
 801097a:	e19f      	b.n	8010cbc <HAL_DMA_IRQHandler+0x7ec>
 801097c:	4b58      	ldr	r3, [pc, #352]	; (8010ae0 <HAL_DMA_IRQHandler+0x610>)
 801097e:	6818      	ldr	r0, [r3, #0]
 8010980:	4a49      	ldr	r2, [pc, #292]	; (8010aa8 <HAL_DMA_IRQHandler+0x5d8>)
 8010982:	4291      	cmp	r1, r2
 8010984:	d100      	bne.n	8010988 <HAL_DMA_IRQHandler+0x4b8>
 8010986:	e0af      	b.n	8010ae8 <HAL_DMA_IRQHandler+0x618>
 8010988:	4a48      	ldr	r2, [pc, #288]	; (8010aac <HAL_DMA_IRQHandler+0x5dc>)
 801098a:	4291      	cmp	r1, r2
 801098c:	d100      	bne.n	8010990 <HAL_DMA_IRQHandler+0x4c0>
 801098e:	e0ee      	b.n	8010b6e <HAL_DMA_IRQHandler+0x69e>
 8010990:	4a47      	ldr	r2, [pc, #284]	; (8010ab0 <HAL_DMA_IRQHandler+0x5e0>)
 8010992:	4291      	cmp	r1, r2
 8010994:	d100      	bne.n	8010998 <HAL_DMA_IRQHandler+0x4c8>
 8010996:	e0ec      	b.n	8010b72 <HAL_DMA_IRQHandler+0x6a2>
 8010998:	4a46      	ldr	r2, [pc, #280]	; (8010ab4 <HAL_DMA_IRQHandler+0x5e4>)
 801099a:	4291      	cmp	r1, r2
 801099c:	d100      	bne.n	80109a0 <HAL_DMA_IRQHandler+0x4d0>
 801099e:	e0eb      	b.n	8010b78 <HAL_DMA_IRQHandler+0x6a8>
 80109a0:	4b45      	ldr	r3, [pc, #276]	; (8010ab8 <HAL_DMA_IRQHandler+0x5e8>)
 80109a2:	4299      	cmp	r1, r3
 80109a4:	d100      	bne.n	80109a8 <HAL_DMA_IRQHandler+0x4d8>
 80109a6:	e0ea      	b.n	8010b7e <HAL_DMA_IRQHandler+0x6ae>
 80109a8:	4b44      	ldr	r3, [pc, #272]	; (8010abc <HAL_DMA_IRQHandler+0x5ec>)
 80109aa:	4299      	cmp	r1, r3
 80109ac:	d100      	bne.n	80109b0 <HAL_DMA_IRQHandler+0x4e0>
 80109ae:	e0e9      	b.n	8010b84 <HAL_DMA_IRQHandler+0x6b4>
 80109b0:	4b43      	ldr	r3, [pc, #268]	; (8010ac0 <HAL_DMA_IRQHandler+0x5f0>)
 80109b2:	4299      	cmp	r1, r3
 80109b4:	d100      	bne.n	80109b8 <HAL_DMA_IRQHandler+0x4e8>
 80109b6:	e0e8      	b.n	8010b8a <HAL_DMA_IRQHandler+0x6ba>
 80109b8:	4b42      	ldr	r3, [pc, #264]	; (8010ac4 <HAL_DMA_IRQHandler+0x5f4>)
 80109ba:	4299      	cmp	r1, r3
 80109bc:	d100      	bne.n	80109c0 <HAL_DMA_IRQHandler+0x4f0>
 80109be:	e0e7      	b.n	8010b90 <HAL_DMA_IRQHandler+0x6c0>
 80109c0:	4b41      	ldr	r3, [pc, #260]	; (8010ac8 <HAL_DMA_IRQHandler+0x5f8>)
 80109c2:	4299      	cmp	r1, r3
 80109c4:	d100      	bne.n	80109c8 <HAL_DMA_IRQHandler+0x4f8>
 80109c6:	e0e5      	b.n	8010b94 <HAL_DMA_IRQHandler+0x6c4>
 80109c8:	4b40      	ldr	r3, [pc, #256]	; (8010acc <HAL_DMA_IRQHandler+0x5fc>)
 80109ca:	4299      	cmp	r1, r3
 80109cc:	d100      	bne.n	80109d0 <HAL_DMA_IRQHandler+0x500>
 80109ce:	e0e3      	b.n	8010b98 <HAL_DMA_IRQHandler+0x6c8>
 80109d0:	4b3f      	ldr	r3, [pc, #252]	; (8010ad0 <HAL_DMA_IRQHandler+0x600>)
 80109d2:	18ca      	adds	r2, r1, r3
 80109d4:	4253      	negs	r3, r2
 80109d6:	415a      	adcs	r2, r3
 80109d8:	4252      	negs	r2, r2
 80109da:	4b42      	ldr	r3, [pc, #264]	; (8010ae4 <HAL_DMA_IRQHandler+0x614>)
 80109dc:	4013      	ands	r3, r2
 80109de:	2280      	movs	r2, #128	; 0x80
 80109e0:	0292      	lsls	r2, r2, #10
 80109e2:	4694      	mov	ip, r2
 80109e4:	4463      	add	r3, ip
 80109e6:	e080      	b.n	8010aea <HAL_DMA_IRQHandler+0x61a>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80109e8:	2340      	movs	r3, #64	; 0x40
 80109ea:	e7b8      	b.n	801095e <HAL_DMA_IRQHandler+0x48e>
 80109ec:	2380      	movs	r3, #128	; 0x80
 80109ee:	00db      	lsls	r3, r3, #3
 80109f0:	e7b5      	b.n	801095e <HAL_DMA_IRQHandler+0x48e>
 80109f2:	2380      	movs	r3, #128	; 0x80
 80109f4:	01db      	lsls	r3, r3, #7
 80109f6:	e7b2      	b.n	801095e <HAL_DMA_IRQHandler+0x48e>
 80109f8:	2380      	movs	r3, #128	; 0x80
 80109fa:	02db      	lsls	r3, r3, #11
 80109fc:	e7af      	b.n	801095e <HAL_DMA_IRQHandler+0x48e>
 80109fe:	2380      	movs	r3, #128	; 0x80
 8010a00:	03db      	lsls	r3, r3, #15
 8010a02:	e7ac      	b.n	801095e <HAL_DMA_IRQHandler+0x48e>
 8010a04:	2380      	movs	r3, #128	; 0x80
 8010a06:	04db      	lsls	r3, r3, #19
 8010a08:	e7a9      	b.n	801095e <HAL_DMA_IRQHandler+0x48e>
 8010a0a:	2304      	movs	r3, #4
 8010a0c:	e7a7      	b.n	801095e <HAL_DMA_IRQHandler+0x48e>
 8010a0e:	2340      	movs	r3, #64	; 0x40
 8010a10:	e7a5      	b.n	801095e <HAL_DMA_IRQHandler+0x48e>
 8010a12:	2380      	movs	r3, #128	; 0x80
 8010a14:	00db      	lsls	r3, r3, #3
 8010a16:	e7a2      	b.n	801095e <HAL_DMA_IRQHandler+0x48e>
 8010a18:	4a23      	ldr	r2, [pc, #140]	; (8010aa8 <HAL_DMA_IRQHandler+0x5d8>)
 8010a1a:	4293      	cmp	r3, r2
 8010a1c:	d027      	beq.n	8010a6e <HAL_DMA_IRQHandler+0x59e>
 8010a1e:	4a23      	ldr	r2, [pc, #140]	; (8010aac <HAL_DMA_IRQHandler+0x5dc>)
 8010a20:	4293      	cmp	r3, r2
 8010a22:	d028      	beq.n	8010a76 <HAL_DMA_IRQHandler+0x5a6>
 8010a24:	4a22      	ldr	r2, [pc, #136]	; (8010ab0 <HAL_DMA_IRQHandler+0x5e0>)
 8010a26:	4293      	cmp	r3, r2
 8010a28:	d027      	beq.n	8010a7a <HAL_DMA_IRQHandler+0x5aa>
 8010a2a:	4a22      	ldr	r2, [pc, #136]	; (8010ab4 <HAL_DMA_IRQHandler+0x5e4>)
 8010a2c:	4293      	cmp	r3, r2
 8010a2e:	d027      	beq.n	8010a80 <HAL_DMA_IRQHandler+0x5b0>
 8010a30:	4a21      	ldr	r2, [pc, #132]	; (8010ab8 <HAL_DMA_IRQHandler+0x5e8>)
 8010a32:	4293      	cmp	r3, r2
 8010a34:	d027      	beq.n	8010a86 <HAL_DMA_IRQHandler+0x5b6>
 8010a36:	4a21      	ldr	r2, [pc, #132]	; (8010abc <HAL_DMA_IRQHandler+0x5ec>)
 8010a38:	4293      	cmp	r3, r2
 8010a3a:	d027      	beq.n	8010a8c <HAL_DMA_IRQHandler+0x5bc>
 8010a3c:	4a20      	ldr	r2, [pc, #128]	; (8010ac0 <HAL_DMA_IRQHandler+0x5f0>)
 8010a3e:	4293      	cmp	r3, r2
 8010a40:	d027      	beq.n	8010a92 <HAL_DMA_IRQHandler+0x5c2>
 8010a42:	4a20      	ldr	r2, [pc, #128]	; (8010ac4 <HAL_DMA_IRQHandler+0x5f4>)
 8010a44:	4293      	cmp	r3, r2
 8010a46:	d027      	beq.n	8010a98 <HAL_DMA_IRQHandler+0x5c8>
 8010a48:	4a1f      	ldr	r2, [pc, #124]	; (8010ac8 <HAL_DMA_IRQHandler+0x5f8>)
 8010a4a:	4293      	cmp	r3, r2
 8010a4c:	d026      	beq.n	8010a9c <HAL_DMA_IRQHandler+0x5cc>
 8010a4e:	4a1f      	ldr	r2, [pc, #124]	; (8010acc <HAL_DMA_IRQHandler+0x5fc>)
 8010a50:	4293      	cmp	r3, r2
 8010a52:	d025      	beq.n	8010aa0 <HAL_DMA_IRQHandler+0x5d0>
 8010a54:	4a1e      	ldr	r2, [pc, #120]	; (8010ad0 <HAL_DMA_IRQHandler+0x600>)
 8010a56:	4694      	mov	ip, r2
 8010a58:	4463      	add	r3, ip
 8010a5a:	425a      	negs	r2, r3
 8010a5c:	4153      	adcs	r3, r2
 8010a5e:	425b      	negs	r3, r3
 8010a60:	4a1e      	ldr	r2, [pc, #120]	; (8010adc <HAL_DMA_IRQHandler+0x60c>)
 8010a62:	4013      	ands	r3, r2
 8010a64:	2280      	movs	r2, #128	; 0x80
 8010a66:	02d2      	lsls	r2, r2, #11
 8010a68:	4694      	mov	ip, r2
 8010a6a:	4463      	add	r3, ip
 8010a6c:	e000      	b.n	8010a70 <HAL_DMA_IRQHandler+0x5a0>
 8010a6e:	2304      	movs	r3, #4
 8010a70:	4a19      	ldr	r2, [pc, #100]	; (8010ad8 <HAL_DMA_IRQHandler+0x608>)
 8010a72:	6053      	str	r3, [r2, #4]
 8010a74:	e775      	b.n	8010962 <HAL_DMA_IRQHandler+0x492>
 8010a76:	2340      	movs	r3, #64	; 0x40
 8010a78:	e7fa      	b.n	8010a70 <HAL_DMA_IRQHandler+0x5a0>
 8010a7a:	2380      	movs	r3, #128	; 0x80
 8010a7c:	00db      	lsls	r3, r3, #3
 8010a7e:	e7f7      	b.n	8010a70 <HAL_DMA_IRQHandler+0x5a0>
 8010a80:	2380      	movs	r3, #128	; 0x80
 8010a82:	01db      	lsls	r3, r3, #7
 8010a84:	e7f4      	b.n	8010a70 <HAL_DMA_IRQHandler+0x5a0>
 8010a86:	2380      	movs	r3, #128	; 0x80
 8010a88:	02db      	lsls	r3, r3, #11
 8010a8a:	e7f1      	b.n	8010a70 <HAL_DMA_IRQHandler+0x5a0>
 8010a8c:	2380      	movs	r3, #128	; 0x80
 8010a8e:	03db      	lsls	r3, r3, #15
 8010a90:	e7ee      	b.n	8010a70 <HAL_DMA_IRQHandler+0x5a0>
 8010a92:	2380      	movs	r3, #128	; 0x80
 8010a94:	04db      	lsls	r3, r3, #19
 8010a96:	e7eb      	b.n	8010a70 <HAL_DMA_IRQHandler+0x5a0>
 8010a98:	2304      	movs	r3, #4
 8010a9a:	e7e9      	b.n	8010a70 <HAL_DMA_IRQHandler+0x5a0>
 8010a9c:	2340      	movs	r3, #64	; 0x40
 8010a9e:	e7e7      	b.n	8010a70 <HAL_DMA_IRQHandler+0x5a0>
 8010aa0:	2380      	movs	r3, #128	; 0x80
 8010aa2:	00db      	lsls	r3, r3, #3
 8010aa4:	e7e4      	b.n	8010a70 <HAL_DMA_IRQHandler+0x5a0>
 8010aa6:	46c0      	nop			; (mov r8, r8)
 8010aa8:	40020008 	.word	0x40020008
 8010aac:	4002001c 	.word	0x4002001c
 8010ab0:	40020030 	.word	0x40020030
 8010ab4:	40020044 	.word	0x40020044
 8010ab8:	40020058 	.word	0x40020058
 8010abc:	4002006c 	.word	0x4002006c
 8010ac0:	40020080 	.word	0x40020080
 8010ac4:	40020408 	.word	0x40020408
 8010ac8:	4002041c 	.word	0x4002041c
 8010acc:	40020430 	.word	0x40020430
 8010ad0:	bffdfbbc 	.word	0xbffdfbbc
 8010ad4:	fff88000 	.word	0xfff88000
 8010ad8:	40020000 	.word	0x40020000
 8010adc:	fffc4000 	.word	0xfffc4000
 8010ae0:	40020400 	.word	0x40020400
 8010ae4:	fffe2000 	.word	0xfffe2000
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 8010ae8:	2302      	movs	r3, #2
 8010aea:	4003      	ands	r3, r0
 8010aec:	1e5a      	subs	r2, r3, #1
 8010aee:	4193      	sbcs	r3, r2
 8010af0:	b2db      	uxtb	r3, r3
 8010af2:	2b00      	cmp	r3, #0
 8010af4:	d100      	bne.n	8010af8 <HAL_DMA_IRQHandler+0x628>
 8010af6:	e080      	b.n	8010bfa <HAL_DMA_IRQHandler+0x72a>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8010af8:	680b      	ldr	r3, [r1, #0]
 8010afa:	079b      	lsls	r3, r3, #30
 8010afc:	d57d      	bpl.n	8010bfa <HAL_DMA_IRQHandler+0x72a>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0)
 8010afe:	680b      	ldr	r3, [r1, #0]
 8010b00:	069b      	lsls	r3, r3, #26
 8010b02:	d403      	bmi.n	8010b0c <HAL_DMA_IRQHandler+0x63c>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TC);
 8010b04:	680b      	ldr	r3, [r1, #0]
 8010b06:	2202      	movs	r2, #2
 8010b08:	4393      	bics	r3, r2
 8010b0a:	600b      	str	r3, [r1, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8010b0c:	6823      	ldr	r3, [r4, #0]
 8010b0e:	4a8d      	ldr	r2, [pc, #564]	; (8010d44 <HAL_DMA_IRQHandler+0x874>)
 8010b10:	4293      	cmp	r3, r2
 8010b12:	d800      	bhi.n	8010b16 <HAL_DMA_IRQHandler+0x646>
 8010b14:	e08a      	b.n	8010c2c <HAL_DMA_IRQHandler+0x75c>
 8010b16:	4a8c      	ldr	r2, [pc, #560]	; (8010d48 <HAL_DMA_IRQHandler+0x878>)
 8010b18:	4293      	cmp	r3, r2
 8010b1a:	d05e      	beq.n	8010bda <HAL_DMA_IRQHandler+0x70a>
 8010b1c:	4a8b      	ldr	r2, [pc, #556]	; (8010d4c <HAL_DMA_IRQHandler+0x87c>)
 8010b1e:	4293      	cmp	r3, r2
 8010b20:	d100      	bne.n	8010b24 <HAL_DMA_IRQHandler+0x654>
 8010b22:	e06b      	b.n	8010bfc <HAL_DMA_IRQHandler+0x72c>
 8010b24:	4a8a      	ldr	r2, [pc, #552]	; (8010d50 <HAL_DMA_IRQHandler+0x880>)
 8010b26:	4293      	cmp	r3, r2
 8010b28:	d06a      	beq.n	8010c00 <HAL_DMA_IRQHandler+0x730>
 8010b2a:	4a8a      	ldr	r2, [pc, #552]	; (8010d54 <HAL_DMA_IRQHandler+0x884>)
 8010b2c:	4293      	cmp	r3, r2
 8010b2e:	d06a      	beq.n	8010c06 <HAL_DMA_IRQHandler+0x736>
 8010b30:	4a89      	ldr	r2, [pc, #548]	; (8010d58 <HAL_DMA_IRQHandler+0x888>)
 8010b32:	4293      	cmp	r3, r2
 8010b34:	d06a      	beq.n	8010c0c <HAL_DMA_IRQHandler+0x73c>
 8010b36:	4a89      	ldr	r2, [pc, #548]	; (8010d5c <HAL_DMA_IRQHandler+0x88c>)
 8010b38:	4293      	cmp	r3, r2
 8010b3a:	d06a      	beq.n	8010c12 <HAL_DMA_IRQHandler+0x742>
 8010b3c:	4a81      	ldr	r2, [pc, #516]	; (8010d44 <HAL_DMA_IRQHandler+0x874>)
 8010b3e:	4293      	cmp	r3, r2
 8010b40:	d06a      	beq.n	8010c18 <HAL_DMA_IRQHandler+0x748>
 8010b42:	4a87      	ldr	r2, [pc, #540]	; (8010d60 <HAL_DMA_IRQHandler+0x890>)
 8010b44:	4293      	cmp	r3, r2
 8010b46:	d06a      	beq.n	8010c1e <HAL_DMA_IRQHandler+0x74e>
 8010b48:	4a86      	ldr	r2, [pc, #536]	; (8010d64 <HAL_DMA_IRQHandler+0x894>)
 8010b4a:	4293      	cmp	r3, r2
 8010b4c:	d069      	beq.n	8010c22 <HAL_DMA_IRQHandler+0x752>
 8010b4e:	4a86      	ldr	r2, [pc, #536]	; (8010d68 <HAL_DMA_IRQHandler+0x898>)
 8010b50:	4293      	cmp	r3, r2
 8010b52:	d068      	beq.n	8010c26 <HAL_DMA_IRQHandler+0x756>
 8010b54:	4a85      	ldr	r2, [pc, #532]	; (8010d6c <HAL_DMA_IRQHandler+0x89c>)
 8010b56:	4694      	mov	ip, r2
 8010b58:	4463      	add	r3, ip
 8010b5a:	425a      	negs	r2, r3
 8010b5c:	4153      	adcs	r3, r2
 8010b5e:	425b      	negs	r3, r3
 8010b60:	4a83      	ldr	r2, [pc, #524]	; (8010d70 <HAL_DMA_IRQHandler+0x8a0>)
 8010b62:	4013      	ands	r3, r2
 8010b64:	2280      	movs	r2, #128	; 0x80
 8010b66:	0292      	lsls	r2, r2, #10
 8010b68:	4694      	mov	ip, r2
 8010b6a:	4463      	add	r3, ip
 8010b6c:	e036      	b.n	8010bdc <HAL_DMA_IRQHandler+0x70c>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 8010b6e:	2320      	movs	r3, #32
 8010b70:	e7bb      	b.n	8010aea <HAL_DMA_IRQHandler+0x61a>
 8010b72:	2380      	movs	r3, #128	; 0x80
 8010b74:	009b      	lsls	r3, r3, #2
 8010b76:	e7b8      	b.n	8010aea <HAL_DMA_IRQHandler+0x61a>
 8010b78:	2380      	movs	r3, #128	; 0x80
 8010b7a:	019b      	lsls	r3, r3, #6
 8010b7c:	e7b5      	b.n	8010aea <HAL_DMA_IRQHandler+0x61a>
 8010b7e:	2380      	movs	r3, #128	; 0x80
 8010b80:	029b      	lsls	r3, r3, #10
 8010b82:	e7b2      	b.n	8010aea <HAL_DMA_IRQHandler+0x61a>
 8010b84:	2380      	movs	r3, #128	; 0x80
 8010b86:	039b      	lsls	r3, r3, #14
 8010b88:	e7af      	b.n	8010aea <HAL_DMA_IRQHandler+0x61a>
 8010b8a:	2380      	movs	r3, #128	; 0x80
 8010b8c:	049b      	lsls	r3, r3, #18
 8010b8e:	e7ac      	b.n	8010aea <HAL_DMA_IRQHandler+0x61a>
 8010b90:	2302      	movs	r3, #2
 8010b92:	e7aa      	b.n	8010aea <HAL_DMA_IRQHandler+0x61a>
 8010b94:	2320      	movs	r3, #32
 8010b96:	e7a8      	b.n	8010aea <HAL_DMA_IRQHandler+0x61a>
 8010b98:	2380      	movs	r3, #128	; 0x80
 8010b9a:	009b      	lsls	r3, r3, #2
 8010b9c:	e7a5      	b.n	8010aea <HAL_DMA_IRQHandler+0x61a>
 8010b9e:	2302      	movs	r3, #2
 8010ba0:	4003      	ands	r3, r0
 8010ba2:	1e5a      	subs	r2, r3, #1
 8010ba4:	4193      	sbcs	r3, r2
 8010ba6:	b2db      	uxtb	r3, r3
 8010ba8:	e7a3      	b.n	8010af2 <HAL_DMA_IRQHandler+0x622>
 8010baa:	2320      	movs	r3, #32
 8010bac:	e7f8      	b.n	8010ba0 <HAL_DMA_IRQHandler+0x6d0>
 8010bae:	2380      	movs	r3, #128	; 0x80
 8010bb0:	009b      	lsls	r3, r3, #2
 8010bb2:	e7f5      	b.n	8010ba0 <HAL_DMA_IRQHandler+0x6d0>
 8010bb4:	2380      	movs	r3, #128	; 0x80
 8010bb6:	019b      	lsls	r3, r3, #6
 8010bb8:	e7f2      	b.n	8010ba0 <HAL_DMA_IRQHandler+0x6d0>
 8010bba:	2380      	movs	r3, #128	; 0x80
 8010bbc:	029b      	lsls	r3, r3, #10
 8010bbe:	e7ef      	b.n	8010ba0 <HAL_DMA_IRQHandler+0x6d0>
 8010bc0:	2380      	movs	r3, #128	; 0x80
 8010bc2:	039b      	lsls	r3, r3, #14
 8010bc4:	e7ec      	b.n	8010ba0 <HAL_DMA_IRQHandler+0x6d0>
 8010bc6:	2380      	movs	r3, #128	; 0x80
 8010bc8:	049b      	lsls	r3, r3, #18
 8010bca:	e7e9      	b.n	8010ba0 <HAL_DMA_IRQHandler+0x6d0>
 8010bcc:	2302      	movs	r3, #2
 8010bce:	e7e7      	b.n	8010ba0 <HAL_DMA_IRQHandler+0x6d0>
 8010bd0:	2320      	movs	r3, #32
 8010bd2:	e7e5      	b.n	8010ba0 <HAL_DMA_IRQHandler+0x6d0>
 8010bd4:	2380      	movs	r3, #128	; 0x80
 8010bd6:	009b      	lsls	r3, r3, #2
 8010bd8:	e7e2      	b.n	8010ba0 <HAL_DMA_IRQHandler+0x6d0>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8010bda:	2302      	movs	r3, #2
 8010bdc:	4a65      	ldr	r2, [pc, #404]	; (8010d74 <HAL_DMA_IRQHandler+0x8a4>)
 8010bde:	6053      	str	r3, [r2, #4]
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_NONE);
 8010be0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010be2:	6363      	str	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;    
 8010be4:	2321      	movs	r3, #33	; 0x21
 8010be6:	2201      	movs	r2, #1
 8010be8:	54e2      	strb	r2, [r4, r3]
      __HAL_UNLOCK(hdma);
 8010bea:	3b01      	subs	r3, #1
 8010bec:	2200      	movs	r2, #0
 8010bee:	54e2      	strb	r2, [r4, r3]
      if(hdma->XferCpltCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 8010bf0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8010bf2:	2b00      	cmp	r3, #0
 8010bf4:	d001      	beq.n	8010bfa <HAL_DMA_IRQHandler+0x72a>
        hdma->XferCpltCallback(hdma);
 8010bf6:	0020      	movs	r0, r4
 8010bf8:	4798      	blx	r3
}  
 8010bfa:	bd10      	pop	{r4, pc}
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8010bfc:	2320      	movs	r3, #32
 8010bfe:	e7ed      	b.n	8010bdc <HAL_DMA_IRQHandler+0x70c>
 8010c00:	2380      	movs	r3, #128	; 0x80
 8010c02:	009b      	lsls	r3, r3, #2
 8010c04:	e7ea      	b.n	8010bdc <HAL_DMA_IRQHandler+0x70c>
 8010c06:	2380      	movs	r3, #128	; 0x80
 8010c08:	019b      	lsls	r3, r3, #6
 8010c0a:	e7e7      	b.n	8010bdc <HAL_DMA_IRQHandler+0x70c>
 8010c0c:	2380      	movs	r3, #128	; 0x80
 8010c0e:	029b      	lsls	r3, r3, #10
 8010c10:	e7e4      	b.n	8010bdc <HAL_DMA_IRQHandler+0x70c>
 8010c12:	2380      	movs	r3, #128	; 0x80
 8010c14:	039b      	lsls	r3, r3, #14
 8010c16:	e7e1      	b.n	8010bdc <HAL_DMA_IRQHandler+0x70c>
 8010c18:	2380      	movs	r3, #128	; 0x80
 8010c1a:	049b      	lsls	r3, r3, #18
 8010c1c:	e7de      	b.n	8010bdc <HAL_DMA_IRQHandler+0x70c>
 8010c1e:	2302      	movs	r3, #2
 8010c20:	e7dc      	b.n	8010bdc <HAL_DMA_IRQHandler+0x70c>
 8010c22:	2320      	movs	r3, #32
 8010c24:	e7da      	b.n	8010bdc <HAL_DMA_IRQHandler+0x70c>
 8010c26:	2380      	movs	r3, #128	; 0x80
 8010c28:	009b      	lsls	r3, r3, #2
 8010c2a:	e7d7      	b.n	8010bdc <HAL_DMA_IRQHandler+0x70c>
 8010c2c:	4a46      	ldr	r2, [pc, #280]	; (8010d48 <HAL_DMA_IRQHandler+0x878>)
 8010c2e:	4293      	cmp	r3, r2
 8010c30:	d027      	beq.n	8010c82 <HAL_DMA_IRQHandler+0x7b2>
 8010c32:	4a46      	ldr	r2, [pc, #280]	; (8010d4c <HAL_DMA_IRQHandler+0x87c>)
 8010c34:	4293      	cmp	r3, r2
 8010c36:	d028      	beq.n	8010c8a <HAL_DMA_IRQHandler+0x7ba>
 8010c38:	4a45      	ldr	r2, [pc, #276]	; (8010d50 <HAL_DMA_IRQHandler+0x880>)
 8010c3a:	4293      	cmp	r3, r2
 8010c3c:	d027      	beq.n	8010c8e <HAL_DMA_IRQHandler+0x7be>
 8010c3e:	4a45      	ldr	r2, [pc, #276]	; (8010d54 <HAL_DMA_IRQHandler+0x884>)
 8010c40:	4293      	cmp	r3, r2
 8010c42:	d027      	beq.n	8010c94 <HAL_DMA_IRQHandler+0x7c4>
 8010c44:	4a44      	ldr	r2, [pc, #272]	; (8010d58 <HAL_DMA_IRQHandler+0x888>)
 8010c46:	4293      	cmp	r3, r2
 8010c48:	d027      	beq.n	8010c9a <HAL_DMA_IRQHandler+0x7ca>
 8010c4a:	4a44      	ldr	r2, [pc, #272]	; (8010d5c <HAL_DMA_IRQHandler+0x88c>)
 8010c4c:	4293      	cmp	r3, r2
 8010c4e:	d027      	beq.n	8010ca0 <HAL_DMA_IRQHandler+0x7d0>
 8010c50:	4a3c      	ldr	r2, [pc, #240]	; (8010d44 <HAL_DMA_IRQHandler+0x874>)
 8010c52:	4293      	cmp	r3, r2
 8010c54:	d027      	beq.n	8010ca6 <HAL_DMA_IRQHandler+0x7d6>
 8010c56:	4a42      	ldr	r2, [pc, #264]	; (8010d60 <HAL_DMA_IRQHandler+0x890>)
 8010c58:	4293      	cmp	r3, r2
 8010c5a:	d027      	beq.n	8010cac <HAL_DMA_IRQHandler+0x7dc>
 8010c5c:	4a41      	ldr	r2, [pc, #260]	; (8010d64 <HAL_DMA_IRQHandler+0x894>)
 8010c5e:	4293      	cmp	r3, r2
 8010c60:	d026      	beq.n	8010cb0 <HAL_DMA_IRQHandler+0x7e0>
 8010c62:	4a41      	ldr	r2, [pc, #260]	; (8010d68 <HAL_DMA_IRQHandler+0x898>)
 8010c64:	4293      	cmp	r3, r2
 8010c66:	d025      	beq.n	8010cb4 <HAL_DMA_IRQHandler+0x7e4>
 8010c68:	4a40      	ldr	r2, [pc, #256]	; (8010d6c <HAL_DMA_IRQHandler+0x89c>)
 8010c6a:	4694      	mov	ip, r2
 8010c6c:	4463      	add	r3, ip
 8010c6e:	425a      	negs	r2, r3
 8010c70:	4153      	adcs	r3, r2
 8010c72:	425b      	negs	r3, r3
 8010c74:	4a3e      	ldr	r2, [pc, #248]	; (8010d70 <HAL_DMA_IRQHandler+0x8a0>)
 8010c76:	4013      	ands	r3, r2
 8010c78:	2280      	movs	r2, #128	; 0x80
 8010c7a:	0292      	lsls	r2, r2, #10
 8010c7c:	4694      	mov	ip, r2
 8010c7e:	4463      	add	r3, ip
 8010c80:	e000      	b.n	8010c84 <HAL_DMA_IRQHandler+0x7b4>
 8010c82:	2302      	movs	r3, #2
 8010c84:	4a3c      	ldr	r2, [pc, #240]	; (8010d78 <HAL_DMA_IRQHandler+0x8a8>)
 8010c86:	6053      	str	r3, [r2, #4]
 8010c88:	e7aa      	b.n	8010be0 <HAL_DMA_IRQHandler+0x710>
 8010c8a:	2320      	movs	r3, #32
 8010c8c:	e7fa      	b.n	8010c84 <HAL_DMA_IRQHandler+0x7b4>
 8010c8e:	2380      	movs	r3, #128	; 0x80
 8010c90:	009b      	lsls	r3, r3, #2
 8010c92:	e7f7      	b.n	8010c84 <HAL_DMA_IRQHandler+0x7b4>
 8010c94:	2380      	movs	r3, #128	; 0x80
 8010c96:	019b      	lsls	r3, r3, #6
 8010c98:	e7f4      	b.n	8010c84 <HAL_DMA_IRQHandler+0x7b4>
 8010c9a:	2380      	movs	r3, #128	; 0x80
 8010c9c:	029b      	lsls	r3, r3, #10
 8010c9e:	e7f1      	b.n	8010c84 <HAL_DMA_IRQHandler+0x7b4>
 8010ca0:	2380      	movs	r3, #128	; 0x80
 8010ca2:	039b      	lsls	r3, r3, #14
 8010ca4:	e7ee      	b.n	8010c84 <HAL_DMA_IRQHandler+0x7b4>
 8010ca6:	2380      	movs	r3, #128	; 0x80
 8010ca8:	049b      	lsls	r3, r3, #18
 8010caa:	e7eb      	b.n	8010c84 <HAL_DMA_IRQHandler+0x7b4>
 8010cac:	2302      	movs	r3, #2
 8010cae:	e7e9      	b.n	8010c84 <HAL_DMA_IRQHandler+0x7b4>
 8010cb0:	2320      	movs	r3, #32
 8010cb2:	e7e7      	b.n	8010c84 <HAL_DMA_IRQHandler+0x7b4>
 8010cb4:	2380      	movs	r3, #128	; 0x80
 8010cb6:	009b      	lsls	r3, r3, #2
 8010cb8:	e7e4      	b.n	8010c84 <HAL_DMA_IRQHandler+0x7b4>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 8010cba:	6821      	ldr	r1, [r4, #0]
 8010cbc:	4b2e      	ldr	r3, [pc, #184]	; (8010d78 <HAL_DMA_IRQHandler+0x8a8>)
 8010cbe:	6818      	ldr	r0, [r3, #0]
 8010cc0:	4a21      	ldr	r2, [pc, #132]	; (8010d48 <HAL_DMA_IRQHandler+0x878>)
 8010cc2:	4291      	cmp	r1, r2
 8010cc4:	d100      	bne.n	8010cc8 <HAL_DMA_IRQHandler+0x7f8>
 8010cc6:	e76a      	b.n	8010b9e <HAL_DMA_IRQHandler+0x6ce>
 8010cc8:	4a20      	ldr	r2, [pc, #128]	; (8010d4c <HAL_DMA_IRQHandler+0x87c>)
 8010cca:	4291      	cmp	r1, r2
 8010ccc:	d100      	bne.n	8010cd0 <HAL_DMA_IRQHandler+0x800>
 8010cce:	e76c      	b.n	8010baa <HAL_DMA_IRQHandler+0x6da>
 8010cd0:	4a1f      	ldr	r2, [pc, #124]	; (8010d50 <HAL_DMA_IRQHandler+0x880>)
 8010cd2:	4291      	cmp	r1, r2
 8010cd4:	d100      	bne.n	8010cd8 <HAL_DMA_IRQHandler+0x808>
 8010cd6:	e76a      	b.n	8010bae <HAL_DMA_IRQHandler+0x6de>
 8010cd8:	4a1e      	ldr	r2, [pc, #120]	; (8010d54 <HAL_DMA_IRQHandler+0x884>)
 8010cda:	4291      	cmp	r1, r2
 8010cdc:	d100      	bne.n	8010ce0 <HAL_DMA_IRQHandler+0x810>
 8010cde:	e769      	b.n	8010bb4 <HAL_DMA_IRQHandler+0x6e4>
 8010ce0:	4b1d      	ldr	r3, [pc, #116]	; (8010d58 <HAL_DMA_IRQHandler+0x888>)
 8010ce2:	4299      	cmp	r1, r3
 8010ce4:	d100      	bne.n	8010ce8 <HAL_DMA_IRQHandler+0x818>
 8010ce6:	e768      	b.n	8010bba <HAL_DMA_IRQHandler+0x6ea>
 8010ce8:	4b1c      	ldr	r3, [pc, #112]	; (8010d5c <HAL_DMA_IRQHandler+0x88c>)
 8010cea:	4299      	cmp	r1, r3
 8010cec:	d100      	bne.n	8010cf0 <HAL_DMA_IRQHandler+0x820>
 8010cee:	e767      	b.n	8010bc0 <HAL_DMA_IRQHandler+0x6f0>
 8010cf0:	4b14      	ldr	r3, [pc, #80]	; (8010d44 <HAL_DMA_IRQHandler+0x874>)
 8010cf2:	4299      	cmp	r1, r3
 8010cf4:	d100      	bne.n	8010cf8 <HAL_DMA_IRQHandler+0x828>
 8010cf6:	e766      	b.n	8010bc6 <HAL_DMA_IRQHandler+0x6f6>
 8010cf8:	4b19      	ldr	r3, [pc, #100]	; (8010d60 <HAL_DMA_IRQHandler+0x890>)
 8010cfa:	4299      	cmp	r1, r3
 8010cfc:	d100      	bne.n	8010d00 <HAL_DMA_IRQHandler+0x830>
 8010cfe:	e765      	b.n	8010bcc <HAL_DMA_IRQHandler+0x6fc>
 8010d00:	4b18      	ldr	r3, [pc, #96]	; (8010d64 <HAL_DMA_IRQHandler+0x894>)
 8010d02:	4299      	cmp	r1, r3
 8010d04:	d100      	bne.n	8010d08 <HAL_DMA_IRQHandler+0x838>
 8010d06:	e763      	b.n	8010bd0 <HAL_DMA_IRQHandler+0x700>
 8010d08:	4b17      	ldr	r3, [pc, #92]	; (8010d68 <HAL_DMA_IRQHandler+0x898>)
 8010d0a:	4299      	cmp	r1, r3
 8010d0c:	d100      	bne.n	8010d10 <HAL_DMA_IRQHandler+0x840>
 8010d0e:	e761      	b.n	8010bd4 <HAL_DMA_IRQHandler+0x704>
 8010d10:	4b16      	ldr	r3, [pc, #88]	; (8010d6c <HAL_DMA_IRQHandler+0x89c>)
 8010d12:	18ca      	adds	r2, r1, r3
 8010d14:	4253      	negs	r3, r2
 8010d16:	415a      	adcs	r2, r3
 8010d18:	4252      	negs	r2, r2
 8010d1a:	4b15      	ldr	r3, [pc, #84]	; (8010d70 <HAL_DMA_IRQHandler+0x8a0>)
 8010d1c:	4013      	ands	r3, r2
 8010d1e:	2280      	movs	r2, #128	; 0x80
 8010d20:	0292      	lsls	r2, r2, #10
 8010d22:	4694      	mov	ip, r2
 8010d24:	4463      	add	r3, ip
 8010d26:	e73b      	b.n	8010ba0 <HAL_DMA_IRQHandler+0x6d0>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8010d28:	681a      	ldr	r2, [r3, #0]
 8010d2a:	0712      	lsls	r2, r2, #28
 8010d2c:	d500      	bpl.n	8010d30 <HAL_DMA_IRQHandler+0x860>
 8010d2e:	e4d2      	b.n	80106d6 <HAL_DMA_IRQHandler+0x206>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8010d30:	6823      	ldr	r3, [r4, #0]
 8010d32:	e482      	b.n	801063a <HAL_DMA_IRQHandler+0x16a>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8010d34:	681a      	ldr	r2, [r3, #0]
 8010d36:	0712      	lsls	r2, r2, #28
 8010d38:	d500      	bpl.n	8010d3c <HAL_DMA_IRQHandler+0x86c>
 8010d3a:	e4cc      	b.n	80106d6 <HAL_DMA_IRQHandler+0x206>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8010d3c:	6823      	ldr	r3, [r4, #0]
 8010d3e:	f7ff fbfe 	bl	801053e <HAL_DMA_IRQHandler+0x6e>
 8010d42:	46c0      	nop			; (mov r8, r8)
 8010d44:	40020080 	.word	0x40020080
 8010d48:	40020008 	.word	0x40020008
 8010d4c:	4002001c 	.word	0x4002001c
 8010d50:	40020030 	.word	0x40020030
 8010d54:	40020044 	.word	0x40020044
 8010d58:	40020058 	.word	0x40020058
 8010d5c:	4002006c 	.word	0x4002006c
 8010d60:	40020408 	.word	0x40020408
 8010d64:	4002041c 	.word	0x4002041c
 8010d68:	40020430 	.word	0x40020430
 8010d6c:	bffdfbbc 	.word	0xbffdfbbc
 8010d70:	fffe2000 	.word	0xfffe2000
 8010d74:	40020400 	.word	0x40020400
 8010d78:	40020000 	.word	0x40020000

08010d7c <FLASH_SetErrorCode>:
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8010d7c:	4b0a      	ldr	r3, [pc, #40]	; (8010da8 <FLASH_SetErrorCode+0x2c>)
 8010d7e:	68db      	ldr	r3, [r3, #12]
 8010d80:	06db      	lsls	r3, r3, #27
 8010d82:	d504      	bpl.n	8010d8e <FLASH_SetErrorCode+0x12>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8010d84:	4a09      	ldr	r2, [pc, #36]	; (8010dac <FLASH_SetErrorCode+0x30>)
 8010d86:	69d3      	ldr	r3, [r2, #28]
 8010d88:	2102      	movs	r1, #2
 8010d8a:	430b      	orrs	r3, r1
 8010d8c:	61d3      	str	r3, [r2, #28]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8010d8e:	4b06      	ldr	r3, [pc, #24]	; (8010da8 <FLASH_SetErrorCode+0x2c>)
 8010d90:	68db      	ldr	r3, [r3, #12]
 8010d92:	075b      	lsls	r3, r3, #29
 8010d94:	d504      	bpl.n	8010da0 <FLASH_SetErrorCode+0x24>
  {
     pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8010d96:	4a05      	ldr	r2, [pc, #20]	; (8010dac <FLASH_SetErrorCode+0x30>)
 8010d98:	69d3      	ldr	r3, [r2, #28]
 8010d9a:	2101      	movs	r1, #1
 8010d9c:	430b      	orrs	r3, r1
 8010d9e:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR | FLASH_FLAG_PGERR);
 8010da0:	4b01      	ldr	r3, [pc, #4]	; (8010da8 <FLASH_SetErrorCode+0x2c>)
 8010da2:	2214      	movs	r2, #20
 8010da4:	60da      	str	r2, [r3, #12]
}  
 8010da6:	4770      	bx	lr
 8010da8:	40022000 	.word	0x40022000
 8010dac:	20006958 	.word	0x20006958

08010db0 <HAL_FLASH_Unlock>:
  if (HAL_IS_BIT_SET(FLASH->CR, FLASH_CR_LOCK))
 8010db0:	4b06      	ldr	r3, [pc, #24]	; (8010dcc <HAL_FLASH_Unlock+0x1c>)
 8010db2:	691b      	ldr	r3, [r3, #16]
 8010db4:	061b      	lsls	r3, r3, #24
 8010db6:	d506      	bpl.n	8010dc6 <HAL_FLASH_Unlock+0x16>
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8010db8:	4b04      	ldr	r3, [pc, #16]	; (8010dcc <HAL_FLASH_Unlock+0x1c>)
 8010dba:	4a05      	ldr	r2, [pc, #20]	; (8010dd0 <HAL_FLASH_Unlock+0x20>)
 8010dbc:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8010dbe:	4a05      	ldr	r2, [pc, #20]	; (8010dd4 <HAL_FLASH_Unlock+0x24>)
 8010dc0:	605a      	str	r2, [r3, #4]
  return HAL_OK; 
 8010dc2:	2000      	movs	r0, #0
}
 8010dc4:	4770      	bx	lr
    return HAL_ERROR;
 8010dc6:	2001      	movs	r0, #1
 8010dc8:	e7fc      	b.n	8010dc4 <HAL_FLASH_Unlock+0x14>
 8010dca:	46c0      	nop			; (mov r8, r8)
 8010dcc:	40022000 	.word	0x40022000
 8010dd0:	45670123 	.word	0x45670123
 8010dd4:	cdef89ab 	.word	0xcdef89ab

08010dd8 <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8010dd8:	4a03      	ldr	r2, [pc, #12]	; (8010de8 <HAL_FLASH_Lock+0x10>)
 8010dda:	6913      	ldr	r3, [r2, #16]
 8010ddc:	2180      	movs	r1, #128	; 0x80
 8010dde:	430b      	orrs	r3, r1
 8010de0:	6113      	str	r3, [r2, #16]
}
 8010de2:	2000      	movs	r0, #0
 8010de4:	4770      	bx	lr
 8010de6:	46c0      	nop			; (mov r8, r8)
 8010de8:	40022000 	.word	0x40022000

08010dec <FLASH_WaitForLastOperation>:
{
 8010dec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010dee:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8010df0:	f7ff f91e 	bl	8010030 <HAL_GetTick>
 8010df4:	0007      	movs	r7, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8010df6:	4e13      	ldr	r6, [pc, #76]	; (8010e44 <FLASH_WaitForLastOperation+0x58>)
 8010df8:	2501      	movs	r5, #1
 8010dfa:	68f3      	ldr	r3, [r6, #12]
 8010dfc:	421d      	tst	r5, r3
 8010dfe:	d00a      	beq.n	8010e16 <FLASH_WaitForLastOperation+0x2a>
    if (Timeout != HAL_MAX_DELAY)
 8010e00:	1c63      	adds	r3, r4, #1
 8010e02:	d0fa      	beq.n	8010dfa <FLASH_WaitForLastOperation+0xe>
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8010e04:	2c00      	cmp	r4, #0
 8010e06:	d01b      	beq.n	8010e40 <FLASH_WaitForLastOperation+0x54>
 8010e08:	f7ff f912 	bl	8010030 <HAL_GetTick>
 8010e0c:	1bc0      	subs	r0, r0, r7
 8010e0e:	42a0      	cmp	r0, r4
 8010e10:	d9f3      	bls.n	8010dfa <FLASH_WaitForLastOperation+0xe>
        return HAL_TIMEOUT;
 8010e12:	2003      	movs	r0, #3
 8010e14:	e00f      	b.n	8010e36 <FLASH_WaitForLastOperation+0x4a>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8010e16:	4b0b      	ldr	r3, [pc, #44]	; (8010e44 <FLASH_WaitForLastOperation+0x58>)
 8010e18:	68db      	ldr	r3, [r3, #12]
 8010e1a:	069b      	lsls	r3, r3, #26
 8010e1c:	d502      	bpl.n	8010e24 <FLASH_WaitForLastOperation+0x38>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8010e1e:	4b09      	ldr	r3, [pc, #36]	; (8010e44 <FLASH_WaitForLastOperation+0x58>)
 8010e20:	2220      	movs	r2, #32
 8010e22:	60da      	str	r2, [r3, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8010e24:	4b07      	ldr	r3, [pc, #28]	; (8010e44 <FLASH_WaitForLastOperation+0x58>)
 8010e26:	68db      	ldr	r3, [r3, #12]
 8010e28:	06db      	lsls	r3, r3, #27
 8010e2a:	d405      	bmi.n	8010e38 <FLASH_WaitForLastOperation+0x4c>
 8010e2c:	4b05      	ldr	r3, [pc, #20]	; (8010e44 <FLASH_WaitForLastOperation+0x58>)
 8010e2e:	68db      	ldr	r3, [r3, #12]
  return HAL_OK;
 8010e30:	2000      	movs	r0, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8010e32:	075b      	lsls	r3, r3, #29
 8010e34:	d400      	bmi.n	8010e38 <FLASH_WaitForLastOperation+0x4c>
}
 8010e36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    FLASH_SetErrorCode();
 8010e38:	f7ff ffa0 	bl	8010d7c <FLASH_SetErrorCode>
    return HAL_ERROR;
 8010e3c:	2001      	movs	r0, #1
 8010e3e:	e7fa      	b.n	8010e36 <FLASH_WaitForLastOperation+0x4a>
        return HAL_TIMEOUT;
 8010e40:	2003      	movs	r0, #3
 8010e42:	e7f8      	b.n	8010e36 <FLASH_WaitForLastOperation+0x4a>
 8010e44:	40022000 	.word	0x40022000

08010e48 <HAL_FLASH_Program>:
{
 8010e48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010e4a:	46de      	mov	lr, fp
 8010e4c:	4657      	mov	r7, sl
 8010e4e:	464e      	mov	r6, r9
 8010e50:	4645      	mov	r5, r8
 8010e52:	b5e0      	push	{r5, r6, r7, lr}
 8010e54:	b083      	sub	sp, #12
 8010e56:	0004      	movs	r4, r0
 8010e58:	000e      	movs	r6, r1
 8010e5a:	9201      	str	r2, [sp, #4]
 8010e5c:	4699      	mov	r9, r3
  __HAL_LOCK(&pFlash);
 8010e5e:	4b2a      	ldr	r3, [pc, #168]	; (8010f08 <HAL_FLASH_Program+0xc0>)
 8010e60:	7e1b      	ldrb	r3, [r3, #24]
 8010e62:	2b01      	cmp	r3, #1
 8010e64:	d04e      	beq.n	8010f04 <HAL_FLASH_Program+0xbc>
 8010e66:	4b28      	ldr	r3, [pc, #160]	; (8010f08 <HAL_FLASH_Program+0xc0>)
 8010e68:	2201      	movs	r2, #1
 8010e6a:	761a      	strb	r2, [r3, #24]
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8010e6c:	4827      	ldr	r0, [pc, #156]	; (8010f0c <HAL_FLASH_Program+0xc4>)
 8010e6e:	f7ff ffbd 	bl	8010dec <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8010e72:	2800      	cmp	r0, #0
 8010e74:	d13c      	bne.n	8010ef0 <HAL_FLASH_Program+0xa8>
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8010e76:	2c01      	cmp	r4, #1
 8010e78:	d010      	beq.n	8010e9c <HAL_FLASH_Program+0x54>
      nbiterations = 4;
 8010e7a:	3c02      	subs	r4, #2
 8010e7c:	4260      	negs	r0, r4
 8010e7e:	4144      	adcs	r4, r0
 8010e80:	4264      	negs	r4, r4
 8010e82:	2301      	movs	r3, #1
 8010e84:	439c      	bics	r4, r3
 8010e86:	46a0      	mov	r8, r4
 8010e88:	3303      	adds	r3, #3
 8010e8a:	469c      	mov	ip, r3
 8010e8c:	44e0      	add	r8, ip
 8010e8e:	2500      	movs	r5, #0
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8010e90:	4b1d      	ldr	r3, [pc, #116]	; (8010f08 <HAL_FLASH_Program+0xc0>)
 8010e92:	469b      	mov	fp, r3
 8010e94:	2300      	movs	r3, #0
 8010e96:	469a      	mov	sl, r3
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8010e98:	4c1d      	ldr	r4, [pc, #116]	; (8010f10 <HAL_FLASH_Program+0xc8>)
 8010e9a:	e021      	b.n	8010ee0 <HAL_FLASH_Program+0x98>
      nbiterations = 1;
 8010e9c:	2301      	movs	r3, #1
 8010e9e:	4698      	mov	r8, r3
 8010ea0:	e7f5      	b.n	8010e8e <HAL_FLASH_Program+0x46>
      FLASH_Program_HalfWord((Address + (2*index)), (uint16_t)(Data >> (16*index)));
 8010ea2:	2220      	movs	r2, #32
 8010ea4:	1ad2      	subs	r2, r2, r3
 8010ea6:	4649      	mov	r1, r9
 8010ea8:	4091      	lsls	r1, r2
 8010eaa:	000a      	movs	r2, r1
 8010eac:	9901      	ldr	r1, [sp, #4]
 8010eae:	40d9      	lsrs	r1, r3
 8010eb0:	000b      	movs	r3, r1
 8010eb2:	4313      	orrs	r3, r2
 8010eb4:	b29b      	uxth	r3, r3
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8010eb6:	465a      	mov	r2, fp
 8010eb8:	4651      	mov	r1, sl
 8010eba:	61d1      	str	r1, [r2, #28]
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8010ebc:	6922      	ldr	r2, [r4, #16]
 8010ebe:	2701      	movs	r7, #1
 8010ec0:	433a      	orrs	r2, r7
 8010ec2:	6122      	str	r2, [r4, #16]
  *(__IO uint16_t*)Address = Data;
 8010ec4:	8033      	strh	r3, [r6, #0]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8010ec6:	4811      	ldr	r0, [pc, #68]	; (8010f0c <HAL_FLASH_Program+0xc4>)
 8010ec8:	f7ff ff90 	bl	8010dec <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8010ecc:	6923      	ldr	r3, [r4, #16]
 8010ece:	43bb      	bics	r3, r7
 8010ed0:	6123      	str	r3, [r4, #16]
      if (status != HAL_OK)
 8010ed2:	2800      	cmp	r0, #0
 8010ed4:	d10c      	bne.n	8010ef0 <HAL_FLASH_Program+0xa8>
    for (index = 0; index < nbiterations; index++)
 8010ed6:	3501      	adds	r5, #1
 8010ed8:	3602      	adds	r6, #2
 8010eda:	b2eb      	uxtb	r3, r5
 8010edc:	4598      	cmp	r8, r3
 8010ede:	d907      	bls.n	8010ef0 <HAL_FLASH_Program+0xa8>
      FLASH_Program_HalfWord((Address + (2*index)), (uint16_t)(Data >> (16*index)));
 8010ee0:	012b      	lsls	r3, r5, #4
 8010ee2:	2220      	movs	r2, #32
 8010ee4:	4252      	negs	r2, r2
 8010ee6:	189a      	adds	r2, r3, r2
 8010ee8:	d4db      	bmi.n	8010ea2 <HAL_FLASH_Program+0x5a>
 8010eea:	464b      	mov	r3, r9
 8010eec:	40d3      	lsrs	r3, r2
 8010eee:	e7e1      	b.n	8010eb4 <HAL_FLASH_Program+0x6c>
  __HAL_UNLOCK(&pFlash);
 8010ef0:	4b05      	ldr	r3, [pc, #20]	; (8010f08 <HAL_FLASH_Program+0xc0>)
 8010ef2:	2200      	movs	r2, #0
 8010ef4:	761a      	strb	r2, [r3, #24]
}
 8010ef6:	b003      	add	sp, #12
 8010ef8:	bcf0      	pop	{r4, r5, r6, r7}
 8010efa:	46bb      	mov	fp, r7
 8010efc:	46b2      	mov	sl, r6
 8010efe:	46a9      	mov	r9, r5
 8010f00:	46a0      	mov	r8, r4
 8010f02:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(&pFlash);
 8010f04:	2002      	movs	r0, #2
 8010f06:	e7f6      	b.n	8010ef6 <HAL_FLASH_Program+0xae>
 8010f08:	20006958 	.word	0x20006958
 8010f0c:	0000c350 	.word	0x0000c350
 8010f10:	40022000 	.word	0x40022000

08010f14 <FLASH_MassErase>:
  * @retval HAL Status
  */
static void FLASH_MassErase(void)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8010f14:	4b06      	ldr	r3, [pc, #24]	; (8010f30 <FLASH_MassErase+0x1c>)
 8010f16:	2200      	movs	r2, #0
 8010f18:	61da      	str	r2, [r3, #28]

    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8010f1a:	4b06      	ldr	r3, [pc, #24]	; (8010f34 <FLASH_MassErase+0x20>)
 8010f1c:	691a      	ldr	r2, [r3, #16]
 8010f1e:	2104      	movs	r1, #4
 8010f20:	430a      	orrs	r2, r1
 8010f22:	611a      	str	r2, [r3, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8010f24:	691a      	ldr	r2, [r3, #16]
 8010f26:	313c      	adds	r1, #60	; 0x3c
 8010f28:	430a      	orrs	r2, r1
 8010f2a:	611a      	str	r2, [r3, #16]
}
 8010f2c:	4770      	bx	lr
 8010f2e:	46c0      	nop			; (mov r8, r8)
 8010f30:	20006958 	.word	0x20006958
 8010f34:	40022000 	.word	0x40022000

08010f38 <FLASH_PageErase>:
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8010f38:	4b06      	ldr	r3, [pc, #24]	; (8010f54 <FLASH_PageErase+0x1c>)
 8010f3a:	2200      	movs	r2, #0
 8010f3c:	61da      	str	r2, [r3, #28]

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8010f3e:	4b06      	ldr	r3, [pc, #24]	; (8010f58 <FLASH_PageErase+0x20>)
 8010f40:	691a      	ldr	r2, [r3, #16]
 8010f42:	2102      	movs	r1, #2
 8010f44:	430a      	orrs	r2, r1
 8010f46:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8010f48:	6158      	str	r0, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8010f4a:	691a      	ldr	r2, [r3, #16]
 8010f4c:	313e      	adds	r1, #62	; 0x3e
 8010f4e:	430a      	orrs	r2, r1
 8010f50:	611a      	str	r2, [r3, #16]
}
 8010f52:	4770      	bx	lr
 8010f54:	20006958 	.word	0x20006958
 8010f58:	40022000 	.word	0x40022000

08010f5c <HAL_FLASHEx_Erase>:
{
 8010f5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010f5e:	46ce      	mov	lr, r9
 8010f60:	4647      	mov	r7, r8
 8010f62:	b580      	push	{r7, lr}
 8010f64:	0005      	movs	r5, r0
 8010f66:	4688      	mov	r8, r1
  __HAL_LOCK(&pFlash);
 8010f68:	4b2a      	ldr	r3, [pc, #168]	; (8011014 <HAL_FLASHEx_Erase+0xb8>)
 8010f6a:	7e1b      	ldrb	r3, [r3, #24]
 8010f6c:	2b01      	cmp	r3, #1
 8010f6e:	d04e      	beq.n	801100e <HAL_FLASHEx_Erase+0xb2>
 8010f70:	4b28      	ldr	r3, [pc, #160]	; (8011014 <HAL_FLASHEx_Erase+0xb8>)
 8010f72:	2201      	movs	r2, #1
 8010f74:	761a      	strb	r2, [r3, #24]
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8010f76:	6803      	ldr	r3, [r0, #0]
 8010f78:	2b01      	cmp	r3, #1
 8010f7a:	d02a      	beq.n	8010fd2 <HAL_FLASHEx_Erase+0x76>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8010f7c:	4826      	ldr	r0, [pc, #152]	; (8011018 <HAL_FLASHEx_Erase+0xbc>)
 8010f7e:	f7ff ff35 	bl	8010dec <FLASH_WaitForLastOperation>
 8010f82:	0003      	movs	r3, r0
  HAL_StatusTypeDef status = HAL_ERROR;
 8010f84:	2001      	movs	r0, #1
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8010f86:	2b00      	cmp	r3, #0
 8010f88:	d12a      	bne.n	8010fe0 <HAL_FLASHEx_Erase+0x84>
        *PageError = 0xFFFFFFFF;
 8010f8a:	3b01      	subs	r3, #1
 8010f8c:	4642      	mov	r2, r8
 8010f8e:	6013      	str	r3, [r2, #0]
        for(address = pEraseInit->PageAddress;
 8010f90:	686c      	ldr	r4, [r5, #4]
            address < (pEraseInit->PageAddress + (pEraseInit->NbPages)*FLASH_PAGE_SIZE);
 8010f92:	68ab      	ldr	r3, [r5, #8]
 8010f94:	02db      	lsls	r3, r3, #11
 8010f96:	191b      	adds	r3, r3, r4
        for(address = pEraseInit->PageAddress;
 8010f98:	429c      	cmp	r4, r3
 8010f9a:	d236      	bcs.n	801100a <HAL_FLASHEx_Erase+0xae>
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8010f9c:	4b1e      	ldr	r3, [pc, #120]	; (8011018 <HAL_FLASHEx_Erase+0xbc>)
 8010f9e:	4699      	mov	r9, r3
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8010fa0:	4e1e      	ldr	r6, [pc, #120]	; (801101c <HAL_FLASHEx_Erase+0xc0>)
 8010fa2:	2702      	movs	r7, #2
          FLASH_PageErase(address);
 8010fa4:	0020      	movs	r0, r4
 8010fa6:	f7ff ffc7 	bl	8010f38 <FLASH_PageErase>
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8010faa:	4648      	mov	r0, r9
 8010fac:	f7ff ff1e 	bl	8010dec <FLASH_WaitForLastOperation>
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8010fb0:	6933      	ldr	r3, [r6, #16]
 8010fb2:	43bb      	bics	r3, r7
 8010fb4:	6133      	str	r3, [r6, #16]
          if (status != HAL_OK)
 8010fb6:	2800      	cmp	r0, #0
 8010fb8:	d124      	bne.n	8011004 <HAL_FLASHEx_Erase+0xa8>
            address += FLASH_PAGE_SIZE)
 8010fba:	2380      	movs	r3, #128	; 0x80
 8010fbc:	011b      	lsls	r3, r3, #4
 8010fbe:	469c      	mov	ip, r3
 8010fc0:	4464      	add	r4, ip
            address < (pEraseInit->PageAddress + (pEraseInit->NbPages)*FLASH_PAGE_SIZE);
 8010fc2:	68ab      	ldr	r3, [r5, #8]
 8010fc4:	02db      	lsls	r3, r3, #11
 8010fc6:	686a      	ldr	r2, [r5, #4]
 8010fc8:	4694      	mov	ip, r2
 8010fca:	4463      	add	r3, ip
        for(address = pEraseInit->PageAddress;
 8010fcc:	42a3      	cmp	r3, r4
 8010fce:	d8e9      	bhi.n	8010fa4 <HAL_FLASHEx_Erase+0x48>
 8010fd0:	e006      	b.n	8010fe0 <HAL_FLASHEx_Erase+0x84>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8010fd2:	4811      	ldr	r0, [pc, #68]	; (8011018 <HAL_FLASHEx_Erase+0xbc>)
 8010fd4:	f7ff ff0a 	bl	8010dec <FLASH_WaitForLastOperation>
 8010fd8:	0003      	movs	r3, r0
  HAL_StatusTypeDef status = HAL_ERROR;
 8010fda:	2001      	movs	r0, #1
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8010fdc:	2b00      	cmp	r3, #0
 8010fde:	d006      	beq.n	8010fee <HAL_FLASHEx_Erase+0x92>
  __HAL_UNLOCK(&pFlash);
 8010fe0:	4b0c      	ldr	r3, [pc, #48]	; (8011014 <HAL_FLASHEx_Erase+0xb8>)
 8010fe2:	2200      	movs	r2, #0
 8010fe4:	761a      	strb	r2, [r3, #24]
}
 8010fe6:	bcc0      	pop	{r6, r7}
 8010fe8:	46b9      	mov	r9, r7
 8010fea:	46b0      	mov	r8, r6
 8010fec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        FLASH_MassErase();
 8010fee:	f7ff ff91 	bl	8010f14 <FLASH_MassErase>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8010ff2:	4809      	ldr	r0, [pc, #36]	; (8011018 <HAL_FLASHEx_Erase+0xbc>)
 8010ff4:	f7ff fefa 	bl	8010dec <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8010ff8:	4a08      	ldr	r2, [pc, #32]	; (801101c <HAL_FLASHEx_Erase+0xc0>)
 8010ffa:	6913      	ldr	r3, [r2, #16]
 8010ffc:	2104      	movs	r1, #4
 8010ffe:	438b      	bics	r3, r1
 8011000:	6113      	str	r3, [r2, #16]
 8011002:	e7ed      	b.n	8010fe0 <HAL_FLASHEx_Erase+0x84>
            *PageError = address;
 8011004:	4643      	mov	r3, r8
 8011006:	601c      	str	r4, [r3, #0]
            break;
 8011008:	e7ea      	b.n	8010fe0 <HAL_FLASHEx_Erase+0x84>
  HAL_StatusTypeDef status = HAL_ERROR;
 801100a:	2001      	movs	r0, #1
 801100c:	e7e8      	b.n	8010fe0 <HAL_FLASHEx_Erase+0x84>
  __HAL_LOCK(&pFlash);
 801100e:	2002      	movs	r0, #2
 8011010:	e7e9      	b.n	8010fe6 <HAL_FLASHEx_Erase+0x8a>
 8011012:	46c0      	nop			; (mov r8, r8)
 8011014:	20006958 	.word	0x20006958
 8011018:	0000c350 	.word	0x0000c350
 801101c:	40022000 	.word	0x40022000

08011020 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8011020:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011022:	46de      	mov	lr, fp
 8011024:	4657      	mov	r7, sl
 8011026:	464e      	mov	r6, r9
 8011028:	4645      	mov	r5, r8
 801102a:	b5e0      	push	{r5, r6, r7, lr}
 801102c:	b085      	sub	sp, #20
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while ((GPIO_Init->Pin) >> position)
 801102e:	680a      	ldr	r2, [r1, #0]
 8011030:	2a00      	cmp	r2, #0
 8011032:	d100      	bne.n	8011036 <HAL_GPIO_Init+0x16>
 8011034:	e0c9      	b.n	80111ca <HAL_GPIO_Init+0x1aa>
  uint32_t position = 0x00;
 8011036:	2300      	movs	r3, #0
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1 << position);
 8011038:	2401      	movs	r4, #1
    
    if(iocurrent)
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 801103a:	2510      	movs	r5, #16
 801103c:	46ac      	mov	ip, r5
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
      GPIOx->PUPDR = temp;

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 801103e:	2580      	movs	r5, #128	; 0x80
 8011040:	056d      	lsls	r5, r5, #21
 8011042:	46a8      	mov	r8, r5
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
  
        temp = SYSCFG->EXTICR[position >> 2];
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8011044:	4d64      	ldr	r5, [pc, #400]	; (80111d8 <HAL_GPIO_Init+0x1b8>)
 8011046:	1945      	adds	r5, r0, r5
 8011048:	1e6e      	subs	r6, r5, #1
 801104a:	41b5      	sbcs	r5, r6
 801104c:	3504      	adds	r5, #4
 801104e:	46a9      	mov	r9, r5
 8011050:	e044      	b.n	80110dc <HAL_GPIO_Init+0xbc>
        temp = GPIOx->AFR[position >> 3];
 8011052:	08da      	lsrs	r2, r3, #3
 8011054:	0092      	lsls	r2, r2, #2
 8011056:	1882      	adds	r2, r0, r2
 8011058:	9201      	str	r2, [sp, #4]
 801105a:	6a15      	ldr	r5, [r2, #32]
 801105c:	46aa      	mov	sl, r5
        CLEAR_BIT(temp, (uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;      
 801105e:	2507      	movs	r5, #7
 8011060:	401d      	ands	r5, r3
 8011062:	00ad      	lsls	r5, r5, #2
 8011064:	270f      	movs	r7, #15
 8011066:	40af      	lsls	r7, r5
 8011068:	46bb      	mov	fp, r7
 801106a:	4657      	mov	r7, sl
 801106c:	465a      	mov	r2, fp
 801106e:	4397      	bics	r7, r2
 8011070:	46ba      	mov	sl, r7
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));       
 8011072:	690f      	ldr	r7, [r1, #16]
 8011074:	40af      	lsls	r7, r5
 8011076:	003d      	movs	r5, r7
 8011078:	4652      	mov	r2, sl
 801107a:	4315      	orrs	r5, r2
        GPIOx->AFR[position >> 3] = temp;
 801107c:	9a01      	ldr	r2, [sp, #4]
 801107e:	6215      	str	r5, [r2, #32]
 8011080:	e037      	b.n	80110f2 <HAL_GPIO_Init+0xd2>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8011082:	2500      	movs	r5, #0
 8011084:	465f      	mov	r7, fp
 8011086:	40bd      	lsls	r5, r7
 8011088:	4657      	mov	r7, sl
 801108a:	433d      	orrs	r5, r7
        SYSCFG->EXTICR[position >> 2] = temp;
 801108c:	6095      	str	r5, [r2, #8]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 801108e:	4a53      	ldr	r2, [pc, #332]	; (80111dc <HAL_GPIO_Init+0x1bc>)
 8011090:	6812      	ldr	r2, [r2, #0]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8011092:	43f5      	mvns	r5, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8011094:	684f      	ldr	r7, [r1, #4]
 8011096:	03ff      	lsls	r7, r7, #15
 8011098:	d500      	bpl.n	801109c <HAL_GPIO_Init+0x7c>
 801109a:	e08e      	b.n	80111ba <HAL_GPIO_Init+0x19a>
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 801109c:	402a      	ands	r2, r5
        {
          SET_BIT(temp, iocurrent); 
        }
        EXTI->IMR = temp;
 801109e:	4f4f      	ldr	r7, [pc, #316]	; (80111dc <HAL_GPIO_Init+0x1bc>)
 80110a0:	603a      	str	r2, [r7, #0]

        temp = EXTI->EMR;
 80110a2:	687a      	ldr	r2, [r7, #4]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80110a4:	684f      	ldr	r7, [r1, #4]
 80110a6:	03bf      	lsls	r7, r7, #14
 80110a8:	d500      	bpl.n	80110ac <HAL_GPIO_Init+0x8c>
 80110aa:	e088      	b.n	80111be <HAL_GPIO_Init+0x19e>
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 80110ac:	402a      	ands	r2, r5
        { 
          SET_BIT(temp, iocurrent); 
        }
        EXTI->EMR = temp;
 80110ae:	4f4b      	ldr	r7, [pc, #300]	; (80111dc <HAL_GPIO_Init+0x1bc>)
 80110b0:	607a      	str	r2, [r7, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80110b2:	68ba      	ldr	r2, [r7, #8]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80110b4:	684f      	ldr	r7, [r1, #4]
 80110b6:	02ff      	lsls	r7, r7, #11
 80110b8:	d500      	bpl.n	80110bc <HAL_GPIO_Init+0x9c>
 80110ba:	e082      	b.n	80111c2 <HAL_GPIO_Init+0x1a2>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 80110bc:	402a      	ands	r2, r5
        {
          SET_BIT(temp, iocurrent); 
        }
        EXTI->RTSR = temp;
 80110be:	4f47      	ldr	r7, [pc, #284]	; (80111dc <HAL_GPIO_Init+0x1bc>)
 80110c0:	60ba      	str	r2, [r7, #8]

        temp = EXTI->FTSR;
 80110c2:	68fa      	ldr	r2, [r7, #12]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80110c4:	684f      	ldr	r7, [r1, #4]
 80110c6:	02bf      	lsls	r7, r7, #10
 80110c8:	d47d      	bmi.n	80111c6 <HAL_GPIO_Init+0x1a6>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 80110ca:	402a      	ands	r2, r5
 80110cc:	0016      	movs	r6, r2
        {
          SET_BIT(temp, iocurrent); 
        }
        EXTI->FTSR = temp;
 80110ce:	4a43      	ldr	r2, [pc, #268]	; (80111dc <HAL_GPIO_Init+0x1bc>)
 80110d0:	60d6      	str	r6, [r2, #12]
      }
    }
    
    position++;
 80110d2:	3301      	adds	r3, #1
  while ((GPIO_Init->Pin) >> position)
 80110d4:	680a      	ldr	r2, [r1, #0]
 80110d6:	0015      	movs	r5, r2
 80110d8:	40dd      	lsrs	r5, r3
 80110da:	d076      	beq.n	80111ca <HAL_GPIO_Init+0x1aa>
    iocurrent = (GPIO_Init->Pin) & (1 << position);
 80110dc:	0025      	movs	r5, r4
 80110de:	409d      	lsls	r5, r3
 80110e0:	0016      	movs	r6, r2
 80110e2:	402e      	ands	r6, r5
    if(iocurrent)
 80110e4:	422a      	tst	r2, r5
 80110e6:	d0f4      	beq.n	80110d2 <HAL_GPIO_Init+0xb2>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 80110e8:	684a      	ldr	r2, [r1, #4]
 80110ea:	4665      	mov	r5, ip
 80110ec:	43aa      	bics	r2, r5
 80110ee:	2a02      	cmp	r2, #2
 80110f0:	d0af      	beq.n	8011052 <HAL_GPIO_Init+0x32>
      temp = GPIOx->MODER;
 80110f2:	6802      	ldr	r2, [r0, #0]
 80110f4:	4693      	mov	fp, r2
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 80110f6:	005d      	lsls	r5, r3, #1
 80110f8:	2203      	movs	r2, #3
 80110fa:	40aa      	lsls	r2, r5
 80110fc:	43d7      	mvns	r7, r2
 80110fe:	46ba      	mov	sl, r7
 8011100:	465f      	mov	r7, fp
 8011102:	4397      	bics	r7, r2
 8011104:	46bb      	mov	fp, r7
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8011106:	684a      	ldr	r2, [r1, #4]
 8011108:	2703      	movs	r7, #3
 801110a:	403a      	ands	r2, r7
 801110c:	40aa      	lsls	r2, r5
 801110e:	465f      	mov	r7, fp
 8011110:	433a      	orrs	r2, r7
      GPIOx->MODER = temp;
 8011112:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8011114:	684a      	ldr	r2, [r1, #4]
 8011116:	4667      	mov	r7, ip
 8011118:	43ba      	bics	r2, r7
 801111a:	3a01      	subs	r2, #1
 801111c:	2a01      	cmp	r2, #1
 801111e:	d812      	bhi.n	8011146 <HAL_GPIO_Init+0x126>
        temp = GPIOx->OSPEEDR; 
 8011120:	6882      	ldr	r2, [r0, #8]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8011122:	4657      	mov	r7, sl
 8011124:	4017      	ands	r7, r2
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8011126:	68ca      	ldr	r2, [r1, #12]
 8011128:	40aa      	lsls	r2, r5
 801112a:	433a      	orrs	r2, r7
        GPIOx->OSPEEDR = temp;
 801112c:	6082      	str	r2, [r0, #8]
        temp = GPIOx->OTYPER;
 801112e:	6842      	ldr	r2, [r0, #4]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8011130:	0027      	movs	r7, r4
 8011132:	409f      	lsls	r7, r3
 8011134:	43ba      	bics	r2, r7
 8011136:	4693      	mov	fp, r2
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8011138:	684a      	ldr	r2, [r1, #4]
 801113a:	0912      	lsrs	r2, r2, #4
 801113c:	4022      	ands	r2, r4
 801113e:	409a      	lsls	r2, r3
 8011140:	465f      	mov	r7, fp
 8011142:	433a      	orrs	r2, r7
        GPIOx->OTYPER = temp;
 8011144:	6042      	str	r2, [r0, #4]
      temp = GPIOx->PUPDR;
 8011146:	68c2      	ldr	r2, [r0, #12]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8011148:	4657      	mov	r7, sl
 801114a:	4017      	ands	r7, r2
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 801114c:	688a      	ldr	r2, [r1, #8]
 801114e:	40aa      	lsls	r2, r5
 8011150:	433a      	orrs	r2, r7
      GPIOx->PUPDR = temp;
 8011152:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8011154:	684a      	ldr	r2, [r1, #4]
 8011156:	4645      	mov	r5, r8
 8011158:	422a      	tst	r2, r5
 801115a:	d0ba      	beq.n	80110d2 <HAL_GPIO_Init+0xb2>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 801115c:	4a20      	ldr	r2, [pc, #128]	; (80111e0 <HAL_GPIO_Init+0x1c0>)
 801115e:	6995      	ldr	r5, [r2, #24]
 8011160:	4325      	orrs	r5, r4
 8011162:	6195      	str	r5, [r2, #24]
 8011164:	6992      	ldr	r2, [r2, #24]
 8011166:	4022      	ands	r2, r4
 8011168:	9203      	str	r2, [sp, #12]
 801116a:	9a03      	ldr	r2, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2];
 801116c:	089a      	lsrs	r2, r3, #2
 801116e:	0092      	lsls	r2, r2, #2
 8011170:	4d1c      	ldr	r5, [pc, #112]	; (80111e4 <HAL_GPIO_Init+0x1c4>)
 8011172:	46aa      	mov	sl, r5
 8011174:	4452      	add	r2, sl
 8011176:	6895      	ldr	r5, [r2, #8]
 8011178:	46aa      	mov	sl, r5
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
 801117a:	2503      	movs	r5, #3
 801117c:	401d      	ands	r5, r3
 801117e:	00ad      	lsls	r5, r5, #2
 8011180:	46ab      	mov	fp, r5
 8011182:	250f      	movs	r5, #15
 8011184:	465f      	mov	r7, fp
 8011186:	40bd      	lsls	r5, r7
 8011188:	4657      	mov	r7, sl
 801118a:	43af      	bics	r7, r5
 801118c:	46ba      	mov	sl, r7
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 801118e:	2590      	movs	r5, #144	; 0x90
 8011190:	05ed      	lsls	r5, r5, #23
 8011192:	42a8      	cmp	r0, r5
 8011194:	d100      	bne.n	8011198 <HAL_GPIO_Init+0x178>
 8011196:	e774      	b.n	8011082 <HAL_GPIO_Init+0x62>
 8011198:	4d13      	ldr	r5, [pc, #76]	; (80111e8 <HAL_GPIO_Init+0x1c8>)
 801119a:	42a8      	cmp	r0, r5
 801119c:	d007      	beq.n	80111ae <HAL_GPIO_Init+0x18e>
 801119e:	4d13      	ldr	r5, [pc, #76]	; (80111ec <HAL_GPIO_Init+0x1cc>)
 80111a0:	42a8      	cmp	r0, r5
 80111a2:	d006      	beq.n	80111b2 <HAL_GPIO_Init+0x192>
 80111a4:	4d12      	ldr	r5, [pc, #72]	; (80111f0 <HAL_GPIO_Init+0x1d0>)
 80111a6:	42a8      	cmp	r0, r5
 80111a8:	d005      	beq.n	80111b6 <HAL_GPIO_Init+0x196>
 80111aa:	464d      	mov	r5, r9
 80111ac:	e76a      	b.n	8011084 <HAL_GPIO_Init+0x64>
 80111ae:	0025      	movs	r5, r4
 80111b0:	e768      	b.n	8011084 <HAL_GPIO_Init+0x64>
 80111b2:	2502      	movs	r5, #2
 80111b4:	e766      	b.n	8011084 <HAL_GPIO_Init+0x64>
 80111b6:	2503      	movs	r5, #3
 80111b8:	e764      	b.n	8011084 <HAL_GPIO_Init+0x64>
          SET_BIT(temp, iocurrent); 
 80111ba:	4332      	orrs	r2, r6
 80111bc:	e76f      	b.n	801109e <HAL_GPIO_Init+0x7e>
          SET_BIT(temp, iocurrent); 
 80111be:	4332      	orrs	r2, r6
 80111c0:	e775      	b.n	80110ae <HAL_GPIO_Init+0x8e>
          SET_BIT(temp, iocurrent); 
 80111c2:	4332      	orrs	r2, r6
 80111c4:	e77b      	b.n	80110be <HAL_GPIO_Init+0x9e>
          SET_BIT(temp, iocurrent); 
 80111c6:	4316      	orrs	r6, r2
 80111c8:	e781      	b.n	80110ce <HAL_GPIO_Init+0xae>
  } 
}
 80111ca:	b005      	add	sp, #20
 80111cc:	bcf0      	pop	{r4, r5, r6, r7}
 80111ce:	46bb      	mov	fp, r7
 80111d0:	46b2      	mov	sl, r6
 80111d2:	46a9      	mov	r9, r5
 80111d4:	46a0      	mov	r8, r4
 80111d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80111d8:	b7fff000 	.word	0xb7fff000
 80111dc:	40010400 	.word	0x40010400
 80111e0:	40021000 	.word	0x40021000
 80111e4:	40010000 	.word	0x40010000
 80111e8:	48000400 	.word	0x48000400
 80111ec:	48000800 	.word	0x48000800
 80111f0:	48000c00 	.word	0x48000c00

080111f4 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80111f4:	6900      	ldr	r0, [r0, #16]
 80111f6:	4008      	ands	r0, r1
 80111f8:	1e41      	subs	r1, r0, #1
 80111fa:	4188      	sbcs	r0, r1
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 80111fc:	b2c0      	uxtb	r0, r0
  }
 80111fe:	4770      	bx	lr

08011200 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8011200:	2a00      	cmp	r2, #0
 8011202:	d001      	beq.n	8011208 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8011204:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8011206:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8011208:	6281      	str	r1, [r0, #40]	; 0x28
}
 801120a:	e7fc      	b.n	8011206 <HAL_GPIO_WritePin+0x6>

0801120c <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 801120c:	6943      	ldr	r3, [r0, #20]
 801120e:	4059      	eors	r1, r3
 8011210:	6141      	str	r1, [r0, #20]
}
 8011212:	4770      	bx	lr

08011214 <HAL_GPIO_EXTI_Callback>:
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
  /* NOTE: This function should not be modified, when the callback is needed,
            the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */ 
}
 8011214:	4770      	bx	lr
	...

08011218 <HAL_GPIO_EXTI_IRQHandler>:
{
 8011218:	b510      	push	{r4, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) 
 801121a:	4b05      	ldr	r3, [pc, #20]	; (8011230 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 801121c:	695b      	ldr	r3, [r3, #20]
 801121e:	4218      	tst	r0, r3
 8011220:	d100      	bne.n	8011224 <HAL_GPIO_EXTI_IRQHandler+0xc>
}
 8011222:	bd10      	pop	{r4, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8011224:	4b02      	ldr	r3, [pc, #8]	; (8011230 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8011226:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8011228:	f7ff fff4 	bl	8011214 <HAL_GPIO_EXTI_Callback>
}
 801122c:	e7f9      	b.n	8011222 <HAL_GPIO_EXTI_IRQHandler+0xa>
 801122e:	46c0      	nop			; (mov r8, r8)
 8011230:	40010400 	.word	0x40010400

08011234 <I2C_TransferConfig>:
  *     @arg I2C_GENERATE_START_READ: Generate Restart for read request.
  *     @arg I2C_GENERATE_START_WRITE: Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c,  uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8011234:	b530      	push	{r4, r5, lr}
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));
    
  /* Get the CR2 register value */
  tmpreg = hi2c->Instance->CR2;
 8011236:	6804      	ldr	r4, [r0, #0]
 8011238:	6860      	ldr	r0, [r4, #4]
  
  /* clear tmpreg specific bits */
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 801123a:	4d06      	ldr	r5, [pc, #24]	; (8011254 <I2C_TransferConfig+0x20>)
 801123c:	4028      	ands	r0, r5
  
  /* update tmpreg */
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16 ) & I2C_CR2_NBYTES) | \
 801123e:	0412      	lsls	r2, r2, #16
 8011240:	9d03      	ldr	r5, [sp, #12]
 8011242:	432b      	orrs	r3, r5
 8011244:	431a      	orrs	r2, r3
 8011246:	0589      	lsls	r1, r1, #22
 8011248:	0d89      	lsrs	r1, r1, #22
 801124a:	430a      	orrs	r2, r1
 801124c:	4302      	orrs	r2, r0
            (uint32_t)Mode | (uint32_t)Request);
  
  /* update CR2 register */
  hi2c->Instance->CR2 = tmpreg;  
 801124e:	6062      	str	r2, [r4, #4]
}  
 8011250:	bd30      	pop	{r4, r5, pc}
 8011252:	46c0      	nop			; (mov r8, r8)
 8011254:	fc009800 	.word	0xfc009800

08011258 <I2C_IsAcknowledgeFailed>:
{
 8011258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801125a:	0007      	movs	r7, r0
 801125c:	000c      	movs	r4, r1
  tickstart = HAL_GetTick();
 801125e:	f7fe fee7 	bl	8010030 <HAL_GetTick>
 8011262:	0005      	movs	r5, r0
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8011264:	683b      	ldr	r3, [r7, #0]
 8011266:	699a      	ldr	r2, [r3, #24]
  return HAL_OK;      
 8011268:	2000      	movs	r0, #0
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 801126a:	06d2      	lsls	r2, r2, #27
 801126c:	d53c      	bpl.n	80112e8 <I2C_IsAcknowledgeFailed+0x90>
    if((hi2c->State == HAL_I2C_STATE_MASTER_BUSY_TX) || (hi2c->State == HAL_I2C_STATE_MEM_BUSY_TX)
 801126e:	2235      	movs	r2, #53	; 0x35
 8011270:	5cba      	ldrb	r2, [r7, r2]
 8011272:	2a12      	cmp	r2, #18
 8011274:	d007      	beq.n	8011286 <I2C_IsAcknowledgeFailed+0x2e>
 8011276:	2235      	movs	r2, #53	; 0x35
 8011278:	5cba      	ldrb	r2, [r7, r2]
 801127a:	2a52      	cmp	r2, #82	; 0x52
 801127c:	d003      	beq.n	8011286 <I2C_IsAcknowledgeFailed+0x2e>
       || (hi2c->State == HAL_I2C_STATE_MEM_BUSY_RX))
 801127e:	2235      	movs	r2, #53	; 0x35
 8011280:	5cba      	ldrb	r2, [r7, r2]
 8011282:	2a62      	cmp	r2, #98	; 0x62
 8011284:	d107      	bne.n	8011296 <I2C_IsAcknowledgeFailed+0x3e>
      if((hi2c->Instance->CR2 & I2C_AUTOEND_MODE) != I2C_AUTOEND_MODE)
 8011286:	685a      	ldr	r2, [r3, #4]
 8011288:	0192      	lsls	r2, r2, #6
 801128a:	d404      	bmi.n	8011296 <I2C_IsAcknowledgeFailed+0x3e>
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 801128c:	6859      	ldr	r1, [r3, #4]
 801128e:	2280      	movs	r2, #128	; 0x80
 8011290:	01d2      	lsls	r2, r2, #7
 8011292:	430a      	orrs	r2, r1
 8011294:	605a      	str	r2, [r3, #4]
    while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8011296:	2620      	movs	r6, #32
 8011298:	683a      	ldr	r2, [r7, #0]
 801129a:	6993      	ldr	r3, [r2, #24]
 801129c:	421e      	tst	r6, r3
 801129e:	d110      	bne.n	80112c2 <I2C_IsAcknowledgeFailed+0x6a>
      if(Timeout != HAL_MAX_DELAY)
 80112a0:	1c63      	adds	r3, r4, #1
 80112a2:	d0fa      	beq.n	801129a <I2C_IsAcknowledgeFailed+0x42>
        if((Timeout == 0) || ((HAL_GetTick() - tickstart) > Timeout))
 80112a4:	2c00      	cmp	r4, #0
 80112a6:	d004      	beq.n	80112b2 <I2C_IsAcknowledgeFailed+0x5a>
 80112a8:	f7fe fec2 	bl	8010030 <HAL_GetTick>
 80112ac:	1b40      	subs	r0, r0, r5
 80112ae:	42a0      	cmp	r0, r4
 80112b0:	d9f2      	bls.n	8011298 <I2C_IsAcknowledgeFailed+0x40>
          hi2c->State= HAL_I2C_STATE_READY;
 80112b2:	2335      	movs	r3, #53	; 0x35
 80112b4:	2201      	movs	r2, #1
 80112b6:	54fa      	strb	r2, [r7, r3]
          __HAL_UNLOCK(hi2c);
 80112b8:	3b01      	subs	r3, #1
 80112ba:	2200      	movs	r2, #0
 80112bc:	54fa      	strb	r2, [r7, r3]
          return HAL_TIMEOUT;
 80112be:	2003      	movs	r0, #3
 80112c0:	e012      	b.n	80112e8 <I2C_IsAcknowledgeFailed+0x90>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80112c2:	2310      	movs	r3, #16
 80112c4:	61d3      	str	r3, [r2, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80112c6:	683b      	ldr	r3, [r7, #0]
 80112c8:	2220      	movs	r2, #32
 80112ca:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 80112cc:	683a      	ldr	r2, [r7, #0]
 80112ce:	6853      	ldr	r3, [r2, #4]
 80112d0:	4906      	ldr	r1, [pc, #24]	; (80112ec <I2C_IsAcknowledgeFailed+0x94>)
 80112d2:	400b      	ands	r3, r1
 80112d4:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80112d6:	2304      	movs	r3, #4
 80112d8:	63bb      	str	r3, [r7, #56]	; 0x38
    hi2c->State= HAL_I2C_STATE_READY;
 80112da:	3331      	adds	r3, #49	; 0x31
 80112dc:	2201      	movs	r2, #1
 80112de:	54fa      	strb	r2, [r7, r3]
    __HAL_UNLOCK(hi2c);
 80112e0:	3b01      	subs	r3, #1
 80112e2:	2200      	movs	r2, #0
 80112e4:	54fa      	strb	r2, [r7, r3]
    return HAL_ERROR;
 80112e6:	2001      	movs	r0, #1
}
 80112e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80112ea:	46c0      	nop			; (mov r8, r8)
 80112ec:	fe00e800 	.word	0xfe00e800

080112f0 <I2C_WaitOnTXISFlagUntilTimeout>:
{  
 80112f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80112f2:	0004      	movs	r4, r0
 80112f4:	000d      	movs	r5, r1
  uint32_t tickstart = HAL_GetTick();
 80112f6:	f7fe fe9b 	bl	8010030 <HAL_GetTick>
 80112fa:	0006      	movs	r6, r0
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80112fc:	2702      	movs	r7, #2
 80112fe:	6823      	ldr	r3, [r4, #0]
 8011300:	699b      	ldr	r3, [r3, #24]
 8011302:	421f      	tst	r7, r3
 8011304:	d11a      	bne.n	801133c <I2C_WaitOnTXISFlagUntilTimeout+0x4c>
    if(I2C_IsAcknowledgeFailed(hi2c, Timeout) != HAL_OK)
 8011306:	0029      	movs	r1, r5
 8011308:	0020      	movs	r0, r4
 801130a:	f7ff ffa5 	bl	8011258 <I2C_IsAcknowledgeFailed>
 801130e:	2800      	cmp	r0, #0
 8011310:	d116      	bne.n	8011340 <I2C_WaitOnTXISFlagUntilTimeout+0x50>
    if(Timeout != HAL_MAX_DELAY)
 8011312:	1c6b      	adds	r3, r5, #1
 8011314:	d0f3      	beq.n	80112fe <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      if((Timeout == 0) || ((HAL_GetTick() - tickstart) > Timeout))
 8011316:	2d00      	cmp	r5, #0
 8011318:	d004      	beq.n	8011324 <I2C_WaitOnTXISFlagUntilTimeout+0x34>
 801131a:	f7fe fe89 	bl	8010030 <HAL_GetTick>
 801131e:	1b80      	subs	r0, r0, r6
 8011320:	42a8      	cmp	r0, r5
 8011322:	d9ec      	bls.n	80112fe <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8011324:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8011326:	2220      	movs	r2, #32
 8011328:	4313      	orrs	r3, r2
 801132a:	63a3      	str	r3, [r4, #56]	; 0x38
        hi2c->State= HAL_I2C_STATE_READY;
 801132c:	2335      	movs	r3, #53	; 0x35
 801132e:	3a1f      	subs	r2, #31
 8011330:	54e2      	strb	r2, [r4, r3]
        __HAL_UNLOCK(hi2c);
 8011332:	3b01      	subs	r3, #1
 8011334:	2200      	movs	r2, #0
 8011336:	54e2      	strb	r2, [r4, r3]
        return HAL_TIMEOUT;
 8011338:	2003      	movs	r0, #3
 801133a:	e000      	b.n	801133e <I2C_WaitOnTXISFlagUntilTimeout+0x4e>
  return HAL_OK;      
 801133c:	2000      	movs	r0, #0
}
 801133e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      return HAL_ERROR;
 8011340:	2001      	movs	r0, #1
 8011342:	e7fc      	b.n	801133e <I2C_WaitOnTXISFlagUntilTimeout+0x4e>

08011344 <I2C_WaitOnFlagUntilTimeout>:
{  
 8011344:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011346:	46ce      	mov	lr, r9
 8011348:	b500      	push	{lr}
 801134a:	b082      	sub	sp, #8
 801134c:	0007      	movs	r7, r0
 801134e:	000e      	movs	r6, r1
 8011350:	0014      	movs	r4, r2
 8011352:	9201      	str	r2, [sp, #4]
 8011354:	001d      	movs	r5, r3
  uint32_t tickstart = HAL_GetTick();
 8011356:	f7fe fe6b 	bl	8010030 <HAL_GetTick>
 801135a:	4681      	mov	r9, r0
  if(Status == RESET)
 801135c:	2c00      	cmp	r4, #0
 801135e:	d017      	beq.n	8011390 <I2C_WaitOnFlagUntilTimeout+0x4c>
    while(__HAL_I2C_GET_FLAG(hi2c, Flag) != RESET)
 8011360:	6839      	ldr	r1, [r7, #0]
 8011362:	698b      	ldr	r3, [r1, #24]
 8011364:	0032      	movs	r2, r6
 8011366:	439a      	bics	r2, r3
 8011368:	03d2      	lsls	r2, r2, #15
 801136a:	d12e      	bne.n	80113ca <I2C_WaitOnFlagUntilTimeout+0x86>
      if(Timeout != HAL_MAX_DELAY)
 801136c:	1c6b      	adds	r3, r5, #1
 801136e:	d0f8      	beq.n	8011362 <I2C_WaitOnFlagUntilTimeout+0x1e>
        if((Timeout == 0) || ((HAL_GetTick() - tickstart) > Timeout))
 8011370:	2d00      	cmp	r5, #0
 8011372:	d005      	beq.n	8011380 <I2C_WaitOnFlagUntilTimeout+0x3c>
 8011374:	f7fe fe5c 	bl	8010030 <HAL_GetTick>
 8011378:	464b      	mov	r3, r9
 801137a:	1ac0      	subs	r0, r0, r3
 801137c:	42a8      	cmp	r0, r5
 801137e:	d9ef      	bls.n	8011360 <I2C_WaitOnFlagUntilTimeout+0x1c>
          hi2c->State= HAL_I2C_STATE_READY;
 8011380:	2335      	movs	r3, #53	; 0x35
 8011382:	2201      	movs	r2, #1
 8011384:	54fa      	strb	r2, [r7, r3]
          __HAL_UNLOCK(hi2c);
 8011386:	3b01      	subs	r3, #1
 8011388:	2200      	movs	r2, #0
 801138a:	54fa      	strb	r2, [r7, r3]
          return HAL_TIMEOUT;
 801138c:	2003      	movs	r0, #3
 801138e:	e018      	b.n	80113c2 <I2C_WaitOnFlagUntilTimeout+0x7e>
    while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8011390:	683a      	ldr	r2, [r7, #0]
 8011392:	6993      	ldr	r3, [r2, #24]
 8011394:	0034      	movs	r4, r6
 8011396:	439c      	bics	r4, r3
 8011398:	03e4      	lsls	r4, r4, #15
 801139a:	d011      	beq.n	80113c0 <I2C_WaitOnFlagUntilTimeout+0x7c>
      if(Timeout != HAL_MAX_DELAY)
 801139c:	1c6b      	adds	r3, r5, #1
 801139e:	d0f8      	beq.n	8011392 <I2C_WaitOnFlagUntilTimeout+0x4e>
        if((Timeout == 0) || ((HAL_GetTick() - tickstart) > Timeout))
 80113a0:	2d00      	cmp	r5, #0
 80113a2:	d005      	beq.n	80113b0 <I2C_WaitOnFlagUntilTimeout+0x6c>
 80113a4:	f7fe fe44 	bl	8010030 <HAL_GetTick>
 80113a8:	464b      	mov	r3, r9
 80113aa:	1ac0      	subs	r0, r0, r3
 80113ac:	42a8      	cmp	r0, r5
 80113ae:	d9ef      	bls.n	8011390 <I2C_WaitOnFlagUntilTimeout+0x4c>
          hi2c->State= HAL_I2C_STATE_READY;
 80113b0:	2335      	movs	r3, #53	; 0x35
 80113b2:	2201      	movs	r2, #1
 80113b4:	54fa      	strb	r2, [r7, r3]
          __HAL_UNLOCK(hi2c);
 80113b6:	3b01      	subs	r3, #1
 80113b8:	2200      	movs	r2, #0
 80113ba:	54fa      	strb	r2, [r7, r3]
          return HAL_TIMEOUT;
 80113bc:	2003      	movs	r0, #3
 80113be:	e000      	b.n	80113c2 <I2C_WaitOnFlagUntilTimeout+0x7e>
  return HAL_OK;      
 80113c0:	9801      	ldr	r0, [sp, #4]
}
 80113c2:	b002      	add	sp, #8
 80113c4:	bc80      	pop	{r7}
 80113c6:	46b9      	mov	r9, r7
 80113c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  return HAL_OK;      
 80113ca:	2000      	movs	r0, #0
 80113cc:	e7f9      	b.n	80113c2 <I2C_WaitOnFlagUntilTimeout+0x7e>

080113ce <I2C_WaitOnSTOPFlagUntilTimeout>:
{  
 80113ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80113d0:	0005      	movs	r5, r0
 80113d2:	000c      	movs	r4, r1
  tickstart = HAL_GetTick();
 80113d4:	f7fe fe2c 	bl	8010030 <HAL_GetTick>
 80113d8:	0006      	movs	r6, r0
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80113da:	2720      	movs	r7, #32
 80113dc:	682b      	ldr	r3, [r5, #0]
 80113de:	699b      	ldr	r3, [r3, #24]
 80113e0:	421f      	tst	r7, r3
 80113e2:	d118      	bne.n	8011416 <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
    if(I2C_IsAcknowledgeFailed(hi2c, Timeout) != HAL_OK)
 80113e4:	0021      	movs	r1, r4
 80113e6:	0028      	movs	r0, r5
 80113e8:	f7ff ff36 	bl	8011258 <I2C_IsAcknowledgeFailed>
 80113ec:	2800      	cmp	r0, #0
 80113ee:	d114      	bne.n	801141a <I2C_WaitOnSTOPFlagUntilTimeout+0x4c>
    if((Timeout == 0) || ((HAL_GetTick() - tickstart) > Timeout))
 80113f0:	2c00      	cmp	r4, #0
 80113f2:	d004      	beq.n	80113fe <I2C_WaitOnSTOPFlagUntilTimeout+0x30>
 80113f4:	f7fe fe1c 	bl	8010030 <HAL_GetTick>
 80113f8:	1b80      	subs	r0, r0, r6
 80113fa:	42a0      	cmp	r0, r4
 80113fc:	d9ee      	bls.n	80113dc <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80113fe:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8011400:	2220      	movs	r2, #32
 8011402:	4313      	orrs	r3, r2
 8011404:	63ab      	str	r3, [r5, #56]	; 0x38
      hi2c->State= HAL_I2C_STATE_READY;
 8011406:	2335      	movs	r3, #53	; 0x35
 8011408:	3a1f      	subs	r2, #31
 801140a:	54ea      	strb	r2, [r5, r3]
      __HAL_UNLOCK(hi2c);
 801140c:	3b01      	subs	r3, #1
 801140e:	2200      	movs	r2, #0
 8011410:	54ea      	strb	r2, [r5, r3]
      return HAL_TIMEOUT;
 8011412:	2003      	movs	r0, #3
}
 8011414:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return HAL_OK;
 8011416:	2000      	movs	r0, #0
 8011418:	e7fc      	b.n	8011414 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
      return HAL_ERROR;
 801141a:	2001      	movs	r0, #1
 801141c:	e7fa      	b.n	8011414 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>

0801141e <HAL_I2C_MspInit>:
}
 801141e:	4770      	bx	lr

08011420 <HAL_I2C_Init>:
{ 
 8011420:	b510      	push	{r4, lr}
 8011422:	1e04      	subs	r4, r0, #0
  if(hi2c == NULL)
 8011424:	d051      	beq.n	80114ca <HAL_I2C_Init+0xaa>
  if(hi2c->State == HAL_I2C_STATE_RESET)
 8011426:	2335      	movs	r3, #53	; 0x35
 8011428:	5cc3      	ldrb	r3, [r0, r3]
 801142a:	2b00      	cmp	r3, #0
 801142c:	d03c      	beq.n	80114a8 <HAL_I2C_Init+0x88>
  hi2c->State = HAL_I2C_STATE_BUSY;
 801142e:	2335      	movs	r3, #53	; 0x35
 8011430:	2202      	movs	r2, #2
 8011432:	54e2      	strb	r2, [r4, r3]
  __HAL_I2C_DISABLE(hi2c);
 8011434:	6822      	ldr	r2, [r4, #0]
 8011436:	6813      	ldr	r3, [r2, #0]
 8011438:	2101      	movs	r1, #1
 801143a:	438b      	bics	r3, r1
 801143c:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 801143e:	6822      	ldr	r2, [r4, #0]
 8011440:	4b23      	ldr	r3, [pc, #140]	; (80114d0 <HAL_I2C_Init+0xb0>)
 8011442:	6861      	ldr	r1, [r4, #4]
 8011444:	400b      	ands	r3, r1
 8011446:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8011448:	6822      	ldr	r2, [r4, #0]
 801144a:	6893      	ldr	r3, [r2, #8]
 801144c:	4921      	ldr	r1, [pc, #132]	; (80114d4 <HAL_I2C_Init+0xb4>)
 801144e:	400b      	ands	r3, r1
 8011450:	6093      	str	r3, [r2, #8]
  if(hi2c->Init.OwnAddress1 != 0)
 8011452:	68a3      	ldr	r3, [r4, #8]
 8011454:	2b00      	cmp	r3, #0
 8011456:	d007      	beq.n	8011468 <HAL_I2C_Init+0x48>
    if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8011458:	68e2      	ldr	r2, [r4, #12]
 801145a:	2a01      	cmp	r2, #1
 801145c:	d02a      	beq.n	80114b4 <HAL_I2C_Init+0x94>
      hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 801145e:	6821      	ldr	r1, [r4, #0]
 8011460:	2284      	movs	r2, #132	; 0x84
 8011462:	0212      	lsls	r2, r2, #8
 8011464:	4313      	orrs	r3, r2
 8011466:	608b      	str	r3, [r1, #8]
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8011468:	68e3      	ldr	r3, [r4, #12]
 801146a:	2b02      	cmp	r3, #2
 801146c:	d028      	beq.n	80114c0 <HAL_I2C_Init+0xa0>
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 801146e:	6822      	ldr	r2, [r4, #0]
 8011470:	6851      	ldr	r1, [r2, #4]
 8011472:	4b19      	ldr	r3, [pc, #100]	; (80114d8 <HAL_I2C_Init+0xb8>)
 8011474:	430b      	orrs	r3, r1
 8011476:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8011478:	6821      	ldr	r1, [r4, #0]
 801147a:	6923      	ldr	r3, [r4, #16]
 801147c:	6962      	ldr	r2, [r4, #20]
 801147e:	4313      	orrs	r3, r2
 8011480:	69a2      	ldr	r2, [r4, #24]
 8011482:	0212      	lsls	r2, r2, #8
 8011484:	4313      	orrs	r3, r2
 8011486:	60cb      	str	r3, [r1, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8011488:	6822      	ldr	r2, [r4, #0]
 801148a:	69e3      	ldr	r3, [r4, #28]
 801148c:	6a21      	ldr	r1, [r4, #32]
 801148e:	430b      	orrs	r3, r1
 8011490:	6013      	str	r3, [r2, #0]
  __HAL_I2C_ENABLE(hi2c);
 8011492:	6821      	ldr	r1, [r4, #0]
 8011494:	680b      	ldr	r3, [r1, #0]
 8011496:	2201      	movs	r2, #1
 8011498:	4313      	orrs	r3, r2
 801149a:	600b      	str	r3, [r1, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 801149c:	2300      	movs	r3, #0
 801149e:	63a3      	str	r3, [r4, #56]	; 0x38
  hi2c->State = HAL_I2C_STATE_READY;
 80114a0:	3335      	adds	r3, #53	; 0x35
 80114a2:	54e2      	strb	r2, [r4, r3]
  return HAL_OK;
 80114a4:	2000      	movs	r0, #0
}
 80114a6:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 80114a8:	3334      	adds	r3, #52	; 0x34
 80114aa:	2200      	movs	r2, #0
 80114ac:	54c2      	strb	r2, [r0, r3]
    HAL_I2C_MspInit(hi2c);
 80114ae:	f7ff ffb6 	bl	801141e <HAL_I2C_MspInit>
 80114b2:	e7bc      	b.n	801142e <HAL_I2C_Init+0xe>
      hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80114b4:	6821      	ldr	r1, [r4, #0]
 80114b6:	2280      	movs	r2, #128	; 0x80
 80114b8:	0212      	lsls	r2, r2, #8
 80114ba:	4313      	orrs	r3, r2
 80114bc:	608b      	str	r3, [r1, #8]
 80114be:	e7d3      	b.n	8011468 <HAL_I2C_Init+0x48>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80114c0:	6823      	ldr	r3, [r4, #0]
 80114c2:	2280      	movs	r2, #128	; 0x80
 80114c4:	0112      	lsls	r2, r2, #4
 80114c6:	605a      	str	r2, [r3, #4]
 80114c8:	e7d1      	b.n	801146e <HAL_I2C_Init+0x4e>
    return HAL_ERROR;
 80114ca:	2001      	movs	r0, #1
 80114cc:	e7eb      	b.n	80114a6 <HAL_I2C_Init+0x86>
 80114ce:	46c0      	nop			; (mov r8, r8)
 80114d0:	f0ffffff 	.word	0xf0ffffff
 80114d4:	ffff7fff 	.word	0xffff7fff
 80114d8:	02008000 	.word	0x02008000

080114dc <HAL_I2C_Master_Transmit>:
{
 80114dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80114de:	46de      	mov	lr, fp
 80114e0:	464f      	mov	r7, r9
 80114e2:	4646      	mov	r6, r8
 80114e4:	b5c0      	push	{r6, r7, lr}
 80114e6:	b084      	sub	sp, #16
 80114e8:	0006      	movs	r6, r0
 80114ea:	9103      	str	r1, [sp, #12]
 80114ec:	0015      	movs	r5, r2
 80114ee:	001c      	movs	r4, r3
  if(hi2c->State == HAL_I2C_STATE_READY)
 80114f0:	2335      	movs	r3, #53	; 0x35
 80114f2:	5cc3      	ldrb	r3, [r0, r3]
 80114f4:	b2da      	uxtb	r2, r3
 80114f6:	4691      	mov	r9, r2
 80114f8:	2b01      	cmp	r3, #1
 80114fa:	d000      	beq.n	80114fe <HAL_I2C_Master_Transmit+0x22>
 80114fc:	e087      	b.n	801160e <HAL_I2C_Master_Transmit+0x132>
    if((pData == NULL ) || (Size == 0)) 
 80114fe:	2d00      	cmp	r5, #0
 8011500:	d100      	bne.n	8011504 <HAL_I2C_Master_Transmit+0x28>
 8011502:	e086      	b.n	8011612 <HAL_I2C_Master_Transmit+0x136>
 8011504:	2c00      	cmp	r4, #0
 8011506:	d100      	bne.n	801150a <HAL_I2C_Master_Transmit+0x2e>
 8011508:	e083      	b.n	8011612 <HAL_I2C_Master_Transmit+0x136>
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 801150a:	6803      	ldr	r3, [r0, #0]
 801150c:	699b      	ldr	r3, [r3, #24]
 801150e:	041b      	lsls	r3, r3, #16
 8011510:	d500      	bpl.n	8011514 <HAL_I2C_Master_Transmit+0x38>
 8011512:	e085      	b.n	8011620 <HAL_I2C_Master_Transmit+0x144>
    __HAL_LOCK(hi2c);
 8011514:	2334      	movs	r3, #52	; 0x34
 8011516:	5cc3      	ldrb	r3, [r0, r3]
 8011518:	2b01      	cmp	r3, #1
 801151a:	d100      	bne.n	801151e <HAL_I2C_Master_Transmit+0x42>
 801151c:	e083      	b.n	8011626 <HAL_I2C_Master_Transmit+0x14a>
 801151e:	2334      	movs	r3, #52	; 0x34
 8011520:	2201      	movs	r2, #1
 8011522:	54c2      	strb	r2, [r0, r3]
    hi2c->State = HAL_I2C_STATE_MASTER_BUSY_TX;
 8011524:	3301      	adds	r3, #1
 8011526:	3211      	adds	r2, #17
 8011528:	54c2      	strb	r2, [r0, r3]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 801152a:	2300      	movs	r3, #0
 801152c:	6383      	str	r3, [r0, #56]	; 0x38
    if(Size > 255)
 801152e:	2cff      	cmp	r4, #255	; 0xff
 8011530:	d90f      	bls.n	8011552 <HAL_I2C_Master_Transmit+0x76>
      I2C_TransferConfig(hi2c,DevAddress,255, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8011532:	3380      	adds	r3, #128	; 0x80
 8011534:	2280      	movs	r2, #128	; 0x80
 8011536:	0192      	lsls	r2, r2, #6
 8011538:	9200      	str	r2, [sp, #0]
 801153a:	045b      	lsls	r3, r3, #17
 801153c:	22ff      	movs	r2, #255	; 0xff
 801153e:	f7ff fe79 	bl	8011234 <I2C_TransferConfig>
      sizetmp = 255;
 8011542:	27ff      	movs	r7, #255	; 0xff
          I2C_TransferConfig(hi2c,DevAddress,Size, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8011544:	2380      	movs	r3, #128	; 0x80
 8011546:	049b      	lsls	r3, r3, #18
 8011548:	469b      	mov	fp, r3
          I2C_TransferConfig(hi2c,DevAddress,255, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 801154a:	2380      	movs	r3, #128	; 0x80
 801154c:	045b      	lsls	r3, r3, #17
 801154e:	4698      	mov	r8, r3
 8011550:	e031      	b.n	80115b6 <HAL_I2C_Master_Transmit+0xda>
      I2C_TransferConfig(hi2c,DevAddress,Size, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8011552:	2380      	movs	r3, #128	; 0x80
 8011554:	b2e2      	uxtb	r2, r4
 8011556:	2180      	movs	r1, #128	; 0x80
 8011558:	0189      	lsls	r1, r1, #6
 801155a:	9100      	str	r1, [sp, #0]
 801155c:	049b      	lsls	r3, r3, #18
 801155e:	9903      	ldr	r1, [sp, #12]
 8011560:	f7ff fe68 	bl	8011234 <I2C_TransferConfig>
      sizetmp = Size;
 8011564:	0027      	movs	r7, r4
 8011566:	e7ed      	b.n	8011544 <HAL_I2C_Master_Transmit+0x68>
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8011568:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 801156a:	2b04      	cmp	r3, #4
 801156c:	d051      	beq.n	8011612 <HAL_I2C_Master_Transmit+0x136>
          return HAL_TIMEOUT;
 801156e:	2303      	movs	r3, #3
 8011570:	4699      	mov	r9, r3
 8011572:	e04e      	b.n	8011612 <HAL_I2C_Master_Transmit+0x136>
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout) != HAL_OK)      
 8011574:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011576:	2200      	movs	r2, #0
 8011578:	2180      	movs	r1, #128	; 0x80
 801157a:	0030      	movs	r0, r6
 801157c:	f7ff fee2 	bl	8011344 <I2C_WaitOnFlagUntilTimeout>
 8011580:	2800      	cmp	r0, #0
 8011582:	d153      	bne.n	801162c <HAL_I2C_Master_Transmit+0x150>
        if(Size > 255)
 8011584:	2cff      	cmp	r4, #255	; 0xff
 8011586:	d909      	bls.n	801159c <HAL_I2C_Master_Transmit+0xc0>
          I2C_TransferConfig(hi2c,DevAddress,255, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8011588:	2300      	movs	r3, #0
 801158a:	9300      	str	r3, [sp, #0]
 801158c:	4643      	mov	r3, r8
 801158e:	22ff      	movs	r2, #255	; 0xff
 8011590:	9903      	ldr	r1, [sp, #12]
 8011592:	0030      	movs	r0, r6
 8011594:	f7ff fe4e 	bl	8011234 <I2C_TransferConfig>
          sizetmp = 255;
 8011598:	37ff      	adds	r7, #255	; 0xff
 801159a:	e00b      	b.n	80115b4 <HAL_I2C_Master_Transmit+0xd8>
          I2C_TransferConfig(hi2c,DevAddress,Size, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 801159c:	b2e2      	uxtb	r2, r4
 801159e:	2300      	movs	r3, #0
 80115a0:	9300      	str	r3, [sp, #0]
 80115a2:	465b      	mov	r3, fp
 80115a4:	9903      	ldr	r1, [sp, #12]
 80115a6:	0030      	movs	r0, r6
 80115a8:	f7ff fe44 	bl	8011234 <I2C_TransferConfig>
          sizetmp = Size;
 80115ac:	0027      	movs	r7, r4
 80115ae:	e001      	b.n	80115b4 <HAL_I2C_Master_Transmit+0xd8>
    }while(Size > 0);
 80115b0:	2c00      	cmp	r4, #0
 80115b2:	d010      	beq.n	80115d6 <HAL_I2C_Master_Transmit+0xfa>
 80115b4:	3501      	adds	r5, #1
      if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout) != HAL_OK)
 80115b6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80115b8:	0030      	movs	r0, r6
 80115ba:	f7ff fe99 	bl	80112f0 <I2C_WaitOnTXISFlagUntilTimeout>
 80115be:	2800      	cmp	r0, #0
 80115c0:	d1d2      	bne.n	8011568 <HAL_I2C_Master_Transmit+0x8c>
      hi2c->Instance->TXDR = (*pData++);
 80115c2:	6833      	ldr	r3, [r6, #0]
 80115c4:	782a      	ldrb	r2, [r5, #0]
 80115c6:	629a      	str	r2, [r3, #40]	; 0x28
      sizetmp--;
 80115c8:	3f01      	subs	r7, #1
      Size--;
 80115ca:	3c01      	subs	r4, #1
 80115cc:	b2a4      	uxth	r4, r4
      if((sizetmp == 0)&&(Size!=0))
 80115ce:	2f00      	cmp	r7, #0
 80115d0:	d1ee      	bne.n	80115b0 <HAL_I2C_Master_Transmit+0xd4>
 80115d2:	2c00      	cmp	r4, #0
 80115d4:	d1ce      	bne.n	8011574 <HAL_I2C_Master_Transmit+0x98>
    if(I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout) != HAL_OK)
 80115d6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80115d8:	0030      	movs	r0, r6
 80115da:	f7ff fef8 	bl	80113ce <I2C_WaitOnSTOPFlagUntilTimeout>
 80115de:	2800      	cmp	r0, #0
 80115e0:	d005      	beq.n	80115ee <HAL_I2C_Master_Transmit+0x112>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80115e2:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 80115e4:	2b04      	cmp	r3, #4
 80115e6:	d014      	beq.n	8011612 <HAL_I2C_Master_Transmit+0x136>
        return HAL_TIMEOUT;
 80115e8:	2303      	movs	r3, #3
 80115ea:	4699      	mov	r9, r3
 80115ec:	e011      	b.n	8011612 <HAL_I2C_Master_Transmit+0x136>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80115ee:	6833      	ldr	r3, [r6, #0]
 80115f0:	2220      	movs	r2, #32
 80115f2:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 80115f4:	6832      	ldr	r2, [r6, #0]
 80115f6:	6853      	ldr	r3, [r2, #4]
 80115f8:	490e      	ldr	r1, [pc, #56]	; (8011634 <HAL_I2C_Master_Transmit+0x158>)
 80115fa:	400b      	ands	r3, r1
 80115fc:	6053      	str	r3, [r2, #4]
    hi2c->State = HAL_I2C_STATE_READY; 	  
 80115fe:	2335      	movs	r3, #53	; 0x35
 8011600:	2201      	movs	r2, #1
 8011602:	54f2      	strb	r2, [r6, r3]
    __HAL_UNLOCK(hi2c);
 8011604:	3b01      	subs	r3, #1
 8011606:	2200      	movs	r2, #0
 8011608:	54f2      	strb	r2, [r6, r3]
    return HAL_OK;
 801160a:	4681      	mov	r9, r0
 801160c:	e001      	b.n	8011612 <HAL_I2C_Master_Transmit+0x136>
    return HAL_BUSY; 
 801160e:	2302      	movs	r3, #2
 8011610:	4699      	mov	r9, r3
}
 8011612:	4648      	mov	r0, r9
 8011614:	b004      	add	sp, #16
 8011616:	bce0      	pop	{r5, r6, r7}
 8011618:	46bb      	mov	fp, r7
 801161a:	46b1      	mov	r9, r6
 801161c:	46a8      	mov	r8, r5
 801161e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      return HAL_BUSY;
 8011620:	2302      	movs	r3, #2
 8011622:	4699      	mov	r9, r3
 8011624:	e7f5      	b.n	8011612 <HAL_I2C_Master_Transmit+0x136>
    __HAL_LOCK(hi2c);
 8011626:	2302      	movs	r3, #2
 8011628:	4699      	mov	r9, r3
 801162a:	e7f2      	b.n	8011612 <HAL_I2C_Master_Transmit+0x136>
          return HAL_TIMEOUT;
 801162c:	2303      	movs	r3, #3
 801162e:	4699      	mov	r9, r3
 8011630:	e7ef      	b.n	8011612 <HAL_I2C_Master_Transmit+0x136>
 8011632:	46c0      	nop			; (mov r8, r8)
 8011634:	fe00e800 	.word	0xfe00e800

08011638 <HAL_I2C_Master_Receive>:
{
 8011638:	b5f0      	push	{r4, r5, r6, r7, lr}
 801163a:	46de      	mov	lr, fp
 801163c:	464f      	mov	r7, r9
 801163e:	4646      	mov	r6, r8
 8011640:	b5c0      	push	{r6, r7, lr}
 8011642:	b084      	sub	sp, #16
 8011644:	0006      	movs	r6, r0
 8011646:	9103      	str	r1, [sp, #12]
 8011648:	0015      	movs	r5, r2
 801164a:	001c      	movs	r4, r3
  if(hi2c->State == HAL_I2C_STATE_READY)
 801164c:	2335      	movs	r3, #53	; 0x35
 801164e:	5cc3      	ldrb	r3, [r0, r3]
 8011650:	b2da      	uxtb	r2, r3
 8011652:	4691      	mov	r9, r2
 8011654:	2b01      	cmp	r3, #1
 8011656:	d000      	beq.n	801165a <HAL_I2C_Master_Receive+0x22>
 8011658:	e082      	b.n	8011760 <HAL_I2C_Master_Receive+0x128>
    if((pData == NULL ) || (Size == 0)) 
 801165a:	2d00      	cmp	r5, #0
 801165c:	d100      	bne.n	8011660 <HAL_I2C_Master_Receive+0x28>
 801165e:	e081      	b.n	8011764 <HAL_I2C_Master_Receive+0x12c>
 8011660:	2c00      	cmp	r4, #0
 8011662:	d07f      	beq.n	8011764 <HAL_I2C_Master_Receive+0x12c>
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8011664:	6803      	ldr	r3, [r0, #0]
 8011666:	699b      	ldr	r3, [r3, #24]
 8011668:	041b      	lsls	r3, r3, #16
 801166a:	d500      	bpl.n	801166e <HAL_I2C_Master_Receive+0x36>
 801166c:	e081      	b.n	8011772 <HAL_I2C_Master_Receive+0x13a>
    __HAL_LOCK(hi2c);
 801166e:	2334      	movs	r3, #52	; 0x34
 8011670:	5cc3      	ldrb	r3, [r0, r3]
 8011672:	2b01      	cmp	r3, #1
 8011674:	d100      	bne.n	8011678 <HAL_I2C_Master_Receive+0x40>
 8011676:	e07f      	b.n	8011778 <HAL_I2C_Master_Receive+0x140>
 8011678:	2334      	movs	r3, #52	; 0x34
 801167a:	2201      	movs	r2, #1
 801167c:	54c2      	strb	r2, [r0, r3]
    hi2c->State = HAL_I2C_STATE_MASTER_BUSY_RX;
 801167e:	3301      	adds	r3, #1
 8011680:	3221      	adds	r2, #33	; 0x21
 8011682:	54c2      	strb	r2, [r0, r3]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8011684:	2300      	movs	r3, #0
 8011686:	6383      	str	r3, [r0, #56]	; 0x38
    if(Size > 255)
 8011688:	2cff      	cmp	r4, #255	; 0xff
 801168a:	d90f      	bls.n	80116ac <HAL_I2C_Master_Receive+0x74>
      I2C_TransferConfig(hi2c,DevAddress,255, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 801168c:	3380      	adds	r3, #128	; 0x80
 801168e:	2290      	movs	r2, #144	; 0x90
 8011690:	0192      	lsls	r2, r2, #6
 8011692:	9200      	str	r2, [sp, #0]
 8011694:	045b      	lsls	r3, r3, #17
 8011696:	22ff      	movs	r2, #255	; 0xff
 8011698:	f7ff fdcc 	bl	8011234 <I2C_TransferConfig>
      sizetmp = 255;
 801169c:	27ff      	movs	r7, #255	; 0xff
          I2C_TransferConfig(hi2c,DevAddress,Size, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 801169e:	2380      	movs	r3, #128	; 0x80
 80116a0:	049b      	lsls	r3, r3, #18
 80116a2:	469b      	mov	fp, r3
          I2C_TransferConfig(hi2c,DevAddress,255, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80116a4:	2380      	movs	r3, #128	; 0x80
 80116a6:	045b      	lsls	r3, r3, #17
 80116a8:	4698      	mov	r8, r3
 80116aa:	e02b      	b.n	8011704 <HAL_I2C_Master_Receive+0xcc>
      I2C_TransferConfig(hi2c,DevAddress,Size, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80116ac:	2380      	movs	r3, #128	; 0x80
 80116ae:	b2e2      	uxtb	r2, r4
 80116b0:	2190      	movs	r1, #144	; 0x90
 80116b2:	0189      	lsls	r1, r1, #6
 80116b4:	9100      	str	r1, [sp, #0]
 80116b6:	049b      	lsls	r3, r3, #18
 80116b8:	9903      	ldr	r1, [sp, #12]
 80116ba:	f7ff fdbb 	bl	8011234 <I2C_TransferConfig>
      sizetmp = Size;
 80116be:	0027      	movs	r7, r4
 80116c0:	e7ed      	b.n	801169e <HAL_I2C_Master_Receive+0x66>
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout) != HAL_OK)      
 80116c2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80116c4:	2200      	movs	r2, #0
 80116c6:	2180      	movs	r1, #128	; 0x80
 80116c8:	0030      	movs	r0, r6
 80116ca:	f7ff fe3b 	bl	8011344 <I2C_WaitOnFlagUntilTimeout>
 80116ce:	2800      	cmp	r0, #0
 80116d0:	d158      	bne.n	8011784 <HAL_I2C_Master_Receive+0x14c>
        if(Size > 255)
 80116d2:	2cff      	cmp	r4, #255	; 0xff
 80116d4:	d909      	bls.n	80116ea <HAL_I2C_Master_Receive+0xb2>
          I2C_TransferConfig(hi2c,DevAddress,255, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80116d6:	2300      	movs	r3, #0
 80116d8:	9300      	str	r3, [sp, #0]
 80116da:	4643      	mov	r3, r8
 80116dc:	22ff      	movs	r2, #255	; 0xff
 80116de:	9903      	ldr	r1, [sp, #12]
 80116e0:	0030      	movs	r0, r6
 80116e2:	f7ff fda7 	bl	8011234 <I2C_TransferConfig>
          sizetmp = 255;
 80116e6:	37ff      	adds	r7, #255	; 0xff
 80116e8:	e00b      	b.n	8011702 <HAL_I2C_Master_Receive+0xca>
          I2C_TransferConfig(hi2c,DevAddress,Size, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80116ea:	b2e2      	uxtb	r2, r4
 80116ec:	2300      	movs	r3, #0
 80116ee:	9300      	str	r3, [sp, #0]
 80116f0:	465b      	mov	r3, fp
 80116f2:	9903      	ldr	r1, [sp, #12]
 80116f4:	0030      	movs	r0, r6
 80116f6:	f7ff fd9d 	bl	8011234 <I2C_TransferConfig>
          sizetmp = Size;
 80116fa:	0027      	movs	r7, r4
 80116fc:	e001      	b.n	8011702 <HAL_I2C_Master_Receive+0xca>
    }while(Size > 0);
 80116fe:	2c00      	cmp	r4, #0
 8011700:	d012      	beq.n	8011728 <HAL_I2C_Master_Receive+0xf0>
 8011702:	3501      	adds	r5, #1
      if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout) != HAL_OK)      
 8011704:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011706:	2200      	movs	r2, #0
 8011708:	2104      	movs	r1, #4
 801170a:	0030      	movs	r0, r6
 801170c:	f7ff fe1a 	bl	8011344 <I2C_WaitOnFlagUntilTimeout>
 8011710:	2800      	cmp	r0, #0
 8011712:	d134      	bne.n	801177e <HAL_I2C_Master_Receive+0x146>
      (*pData++) =hi2c->Instance->RXDR;
 8011714:	6833      	ldr	r3, [r6, #0]
 8011716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011718:	702b      	strb	r3, [r5, #0]
      sizetmp--;
 801171a:	3f01      	subs	r7, #1
      Size--;
 801171c:	3c01      	subs	r4, #1
 801171e:	b2a4      	uxth	r4, r4
      if((sizetmp == 0)&&(Size!=0))
 8011720:	2f00      	cmp	r7, #0
 8011722:	d1ec      	bne.n	80116fe <HAL_I2C_Master_Receive+0xc6>
 8011724:	2c00      	cmp	r4, #0
 8011726:	d1cc      	bne.n	80116c2 <HAL_I2C_Master_Receive+0x8a>
    if(I2C_WaitOnSTOPFlagUntilTimeout(hi2c, I2C_TIMEOUT_STOPF) != HAL_OK)
 8011728:	2119      	movs	r1, #25
 801172a:	0030      	movs	r0, r6
 801172c:	f7ff fe4f 	bl	80113ce <I2C_WaitOnSTOPFlagUntilTimeout>
 8011730:	2800      	cmp	r0, #0
 8011732:	d005      	beq.n	8011740 <HAL_I2C_Master_Receive+0x108>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8011734:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8011736:	2b04      	cmp	r3, #4
 8011738:	d014      	beq.n	8011764 <HAL_I2C_Master_Receive+0x12c>
        return HAL_TIMEOUT;
 801173a:	2303      	movs	r3, #3
 801173c:	4699      	mov	r9, r3
 801173e:	e011      	b.n	8011764 <HAL_I2C_Master_Receive+0x12c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8011740:	6833      	ldr	r3, [r6, #0]
 8011742:	2220      	movs	r2, #32
 8011744:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8011746:	6832      	ldr	r2, [r6, #0]
 8011748:	6853      	ldr	r3, [r2, #4]
 801174a:	4910      	ldr	r1, [pc, #64]	; (801178c <HAL_I2C_Master_Receive+0x154>)
 801174c:	400b      	ands	r3, r1
 801174e:	6053      	str	r3, [r2, #4]
    hi2c->State = HAL_I2C_STATE_READY; 	  
 8011750:	2335      	movs	r3, #53	; 0x35
 8011752:	2201      	movs	r2, #1
 8011754:	54f2      	strb	r2, [r6, r3]
    __HAL_UNLOCK(hi2c);
 8011756:	3b01      	subs	r3, #1
 8011758:	2200      	movs	r2, #0
 801175a:	54f2      	strb	r2, [r6, r3]
    return HAL_OK;
 801175c:	4681      	mov	r9, r0
 801175e:	e001      	b.n	8011764 <HAL_I2C_Master_Receive+0x12c>
    return HAL_BUSY; 
 8011760:	2302      	movs	r3, #2
 8011762:	4699      	mov	r9, r3
}
 8011764:	4648      	mov	r0, r9
 8011766:	b004      	add	sp, #16
 8011768:	bce0      	pop	{r5, r6, r7}
 801176a:	46bb      	mov	fp, r7
 801176c:	46b1      	mov	r9, r6
 801176e:	46a8      	mov	r8, r5
 8011770:	bdf0      	pop	{r4, r5, r6, r7, pc}
      return HAL_BUSY;
 8011772:	2302      	movs	r3, #2
 8011774:	4699      	mov	r9, r3
 8011776:	e7f5      	b.n	8011764 <HAL_I2C_Master_Receive+0x12c>
    __HAL_LOCK(hi2c);
 8011778:	2302      	movs	r3, #2
 801177a:	4699      	mov	r9, r3
 801177c:	e7f2      	b.n	8011764 <HAL_I2C_Master_Receive+0x12c>
        return HAL_TIMEOUT;
 801177e:	2303      	movs	r3, #3
 8011780:	4699      	mov	r9, r3
 8011782:	e7ef      	b.n	8011764 <HAL_I2C_Master_Receive+0x12c>
          return HAL_TIMEOUT;
 8011784:	2303      	movs	r3, #3
 8011786:	4699      	mov	r9, r3
 8011788:	e7ec      	b.n	8011764 <HAL_I2C_Master_Receive+0x12c>
 801178a:	46c0      	nop			; (mov r8, r8)
 801178c:	fe00e800 	.word	0xfe00e800

08011790 <HAL_I2C_MasterTxCpltCallback>:
}
 8011790:	4770      	bx	lr

08011792 <HAL_I2C_SlaveTxCpltCallback>:
}
 8011792:	4770      	bx	lr

08011794 <HAL_I2C_SlaveRxCpltCallback>:
}
 8011794:	4770      	bx	lr

08011796 <HAL_I2C_MemTxCpltCallback>:
}
 8011796:	4770      	bx	lr

08011798 <HAL_I2C_MemRxCpltCallback>:
}
 8011798:	4770      	bx	lr

0801179a <HAL_I2C_ErrorCallback>:
}
 801179a:	4770      	bx	lr

0801179c <HAL_I2C_EV_IRQHandler>:
{
 801179c:	b510      	push	{r4, lr}
 801179e:	b082      	sub	sp, #8
 80117a0:	0004      	movs	r4, r0
  if (((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == SET) || (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TCR) == SET) || (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TC) == SET) || (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) || (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET) || (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)) && (__HAL_I2C_GET_IT_SOURCE(hi2c, (I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI | I2C_IT_ADDRI)) == SET))
 80117a2:	6803      	ldr	r3, [r0, #0]
 80117a4:	699a      	ldr	r2, [r3, #24]
 80117a6:	0792      	lsls	r2, r2, #30
 80117a8:	d40e      	bmi.n	80117c8 <HAL_I2C_EV_IRQHandler+0x2c>
 80117aa:	699a      	ldr	r2, [r3, #24]
 80117ac:	0612      	lsls	r2, r2, #24
 80117ae:	d40b      	bmi.n	80117c8 <HAL_I2C_EV_IRQHandler+0x2c>
 80117b0:	699a      	ldr	r2, [r3, #24]
 80117b2:	0652      	lsls	r2, r2, #25
 80117b4:	d408      	bmi.n	80117c8 <HAL_I2C_EV_IRQHandler+0x2c>
 80117b6:	699a      	ldr	r2, [r3, #24]
 80117b8:	0692      	lsls	r2, r2, #26
 80117ba:	d405      	bmi.n	80117c8 <HAL_I2C_EV_IRQHandler+0x2c>
 80117bc:	699a      	ldr	r2, [r3, #24]
 80117be:	06d2      	lsls	r2, r2, #27
 80117c0:	d402      	bmi.n	80117c8 <HAL_I2C_EV_IRQHandler+0x2c>
 80117c2:	699a      	ldr	r2, [r3, #24]
 80117c4:	0712      	lsls	r2, r2, #28
 80117c6:	d504      	bpl.n	80117d2 <HAL_I2C_EV_IRQHandler+0x36>
 80117c8:	6819      	ldr	r1, [r3, #0]
 80117ca:	227a      	movs	r2, #122	; 0x7a
 80117cc:	400a      	ands	r2, r1
 80117ce:	2a7a      	cmp	r2, #122	; 0x7a
 80117d0:	d046      	beq.n	8011860 <HAL_I2C_EV_IRQHandler+0xc4>
  if (((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == SET) || (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TCR) == SET) || (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TC) == SET) || (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) || (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)) && (__HAL_I2C_GET_IT_SOURCE(hi2c, (I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI)) == SET))
 80117d2:	6823      	ldr	r3, [r4, #0]
 80117d4:	699a      	ldr	r2, [r3, #24]
 80117d6:	0792      	lsls	r2, r2, #30
 80117d8:	d40b      	bmi.n	80117f2 <HAL_I2C_EV_IRQHandler+0x56>
 80117da:	699a      	ldr	r2, [r3, #24]
 80117dc:	0612      	lsls	r2, r2, #24
 80117de:	d408      	bmi.n	80117f2 <HAL_I2C_EV_IRQHandler+0x56>
 80117e0:	699a      	ldr	r2, [r3, #24]
 80117e2:	0652      	lsls	r2, r2, #25
 80117e4:	d405      	bmi.n	80117f2 <HAL_I2C_EV_IRQHandler+0x56>
 80117e6:	699a      	ldr	r2, [r3, #24]
 80117e8:	0692      	lsls	r2, r2, #26
 80117ea:	d402      	bmi.n	80117f2 <HAL_I2C_EV_IRQHandler+0x56>
 80117ec:	699a      	ldr	r2, [r3, #24]
 80117ee:	06d2      	lsls	r2, r2, #27
 80117f0:	d505      	bpl.n	80117fe <HAL_I2C_EV_IRQHandler+0x62>
 80117f2:	6819      	ldr	r1, [r3, #0]
 80117f4:	2272      	movs	r2, #114	; 0x72
 80117f6:	400a      	ands	r2, r1
 80117f8:	2a72      	cmp	r2, #114	; 0x72
 80117fa:	d100      	bne.n	80117fe <HAL_I2C_EV_IRQHandler+0x62>
 80117fc:	e086      	b.n	801190c <HAL_I2C_EV_IRQHandler+0x170>
  if (((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) || (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TCR) == SET) || (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TC) == SET) || (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) || (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET) || (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)) && (__HAL_I2C_GET_IT_SOURCE(hi2c, (I2C_IT_TCI| I2C_IT_STOPI| I2C_IT_NACKI | I2C_IT_RXI | I2C_IT_ADDRI)) == SET))
 80117fe:	6823      	ldr	r3, [r4, #0]
 8011800:	699a      	ldr	r2, [r3, #24]
 8011802:	0752      	lsls	r2, r2, #29
 8011804:	d40e      	bmi.n	8011824 <HAL_I2C_EV_IRQHandler+0x88>
 8011806:	699a      	ldr	r2, [r3, #24]
 8011808:	0612      	lsls	r2, r2, #24
 801180a:	d40b      	bmi.n	8011824 <HAL_I2C_EV_IRQHandler+0x88>
 801180c:	699a      	ldr	r2, [r3, #24]
 801180e:	0652      	lsls	r2, r2, #25
 8011810:	d408      	bmi.n	8011824 <HAL_I2C_EV_IRQHandler+0x88>
 8011812:	699a      	ldr	r2, [r3, #24]
 8011814:	0692      	lsls	r2, r2, #26
 8011816:	d405      	bmi.n	8011824 <HAL_I2C_EV_IRQHandler+0x88>
 8011818:	699a      	ldr	r2, [r3, #24]
 801181a:	06d2      	lsls	r2, r2, #27
 801181c:	d402      	bmi.n	8011824 <HAL_I2C_EV_IRQHandler+0x88>
 801181e:	699a      	ldr	r2, [r3, #24]
 8011820:	0712      	lsls	r2, r2, #28
 8011822:	d505      	bpl.n	8011830 <HAL_I2C_EV_IRQHandler+0x94>
 8011824:	6819      	ldr	r1, [r3, #0]
 8011826:	227c      	movs	r2, #124	; 0x7c
 8011828:	400a      	ands	r2, r1
 801182a:	2a7c      	cmp	r2, #124	; 0x7c
 801182c:	d100      	bne.n	8011830 <HAL_I2C_EV_IRQHandler+0x94>
 801182e:	e10c      	b.n	8011a4a <HAL_I2C_EV_IRQHandler+0x2ae>
  if (((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) || (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TCR) == SET) || (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TC) == SET) || (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) || (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)) && (__HAL_I2C_GET_IT_SOURCE(hi2c, (I2C_IT_TCI| I2C_IT_STOPI| I2C_IT_NACKI | I2C_IT_RXI)) == SET))
 8011830:	6823      	ldr	r3, [r4, #0]
 8011832:	699a      	ldr	r2, [r3, #24]
 8011834:	0752      	lsls	r2, r2, #29
 8011836:	d40b      	bmi.n	8011850 <HAL_I2C_EV_IRQHandler+0xb4>
 8011838:	699a      	ldr	r2, [r3, #24]
 801183a:	0612      	lsls	r2, r2, #24
 801183c:	d408      	bmi.n	8011850 <HAL_I2C_EV_IRQHandler+0xb4>
 801183e:	699a      	ldr	r2, [r3, #24]
 8011840:	0652      	lsls	r2, r2, #25
 8011842:	d405      	bmi.n	8011850 <HAL_I2C_EV_IRQHandler+0xb4>
 8011844:	699a      	ldr	r2, [r3, #24]
 8011846:	0692      	lsls	r2, r2, #26
 8011848:	d402      	bmi.n	8011850 <HAL_I2C_EV_IRQHandler+0xb4>
 801184a:	699a      	ldr	r2, [r3, #24]
 801184c:	06d2      	lsls	r2, r2, #27
 801184e:	d505      	bpl.n	801185c <HAL_I2C_EV_IRQHandler+0xc0>
 8011850:	6819      	ldr	r1, [r3, #0]
 8011852:	2274      	movs	r2, #116	; 0x74
 8011854:	400a      	ands	r2, r1
 8011856:	2a74      	cmp	r2, #116	; 0x74
 8011858:	d100      	bne.n	801185c <HAL_I2C_EV_IRQHandler+0xc0>
 801185a:	e146      	b.n	8011aea <HAL_I2C_EV_IRQHandler+0x34e>
}
 801185c:	b002      	add	sp, #8
 801185e:	bd10      	pop	{r4, pc}
    if (hi2c->State == HAL_I2C_STATE_SLAVE_BUSY_TX)
 8011860:	3a45      	subs	r2, #69	; 0x45
 8011862:	5ca2      	ldrb	r2, [r4, r2]
 8011864:	2a32      	cmp	r2, #50	; 0x32
 8011866:	d1b4      	bne.n	80117d2 <HAL_I2C_EV_IRQHandler+0x36>
  __HAL_LOCK(hi2c);
 8011868:	3202      	adds	r2, #2
 801186a:	5ca2      	ldrb	r2, [r4, r2]
 801186c:	2a01      	cmp	r2, #1
 801186e:	d0b0      	beq.n	80117d2 <HAL_I2C_EV_IRQHandler+0x36>
 8011870:	2234      	movs	r2, #52	; 0x34
 8011872:	2101      	movs	r1, #1
 8011874:	54a1      	strb	r1, [r4, r2]
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) != RESET)
 8011876:	699a      	ldr	r2, [r3, #24]
 8011878:	06d2      	lsls	r2, r2, #27
 801187a:	d516      	bpl.n	80118aa <HAL_I2C_EV_IRQHandler+0x10e>
    if(hi2c->XferCount == 0)
 801187c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 801187e:	b292      	uxth	r2, r2
 8011880:	2a00      	cmp	r2, #0
 8011882:	d105      	bne.n	8011890 <HAL_I2C_EV_IRQHandler+0xf4>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8011884:	3210      	adds	r2, #16
 8011886:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(hi2c);
 8011888:	2334      	movs	r3, #52	; 0x34
 801188a:	2200      	movs	r2, #0
 801188c:	54e2      	strb	r2, [r4, r3]
  return HAL_OK;
 801188e:	e7a0      	b.n	80117d2 <HAL_I2C_EV_IRQHandler+0x36>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8011890:	2210      	movs	r2, #16
 8011892:	61da      	str	r2, [r3, #28]
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8011894:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8011896:	3a0c      	subs	r2, #12
 8011898:	4313      	orrs	r3, r2
 801189a:	63a3      	str	r3, [r4, #56]	; 0x38
      __HAL_UNLOCK(hi2c);
 801189c:	2334      	movs	r3, #52	; 0x34
 801189e:	2200      	movs	r2, #0
 80118a0:	54e2      	strb	r2, [r4, r3]
      HAL_I2C_ErrorCallback(hi2c);
 80118a2:	0020      	movs	r0, r4
 80118a4:	f7ff ff79 	bl	801179a <HAL_I2C_ErrorCallback>
 80118a8:	e7ee      	b.n	8011888 <HAL_I2C_EV_IRQHandler+0xec>
  else if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80118aa:	699a      	ldr	r2, [r3, #24]
 80118ac:	0712      	lsls	r2, r2, #28
 80118ae:	d502      	bpl.n	80118b6 <HAL_I2C_EV_IRQHandler+0x11a>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80118b0:	2208      	movs	r2, #8
 80118b2:	61da      	str	r2, [r3, #28]
 80118b4:	e7e8      	b.n	8011888 <HAL_I2C_EV_IRQHandler+0xec>
  else if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80118b6:	699a      	ldr	r2, [r3, #24]
 80118b8:	0692      	lsls	r2, r2, #26
 80118ba:	d410      	bmi.n	80118de <HAL_I2C_EV_IRQHandler+0x142>
  else if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == SET)
 80118bc:	699a      	ldr	r2, [r3, #24]
 80118be:	0792      	lsls	r2, r2, #30
 80118c0:	d5e2      	bpl.n	8011888 <HAL_I2C_EV_IRQHandler+0xec>
    if(hi2c->XferCount > 0)
 80118c2:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80118c4:	b292      	uxth	r2, r2
 80118c6:	2a00      	cmp	r2, #0
 80118c8:	d0de      	beq.n	8011888 <HAL_I2C_EV_IRQHandler+0xec>
      hi2c->Instance->TXDR = (*hi2c->pBuffPtr++);
 80118ca:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80118cc:	1c51      	adds	r1, r2, #1
 80118ce:	6261      	str	r1, [r4, #36]	; 0x24
 80118d0:	7812      	ldrb	r2, [r2, #0]
 80118d2:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80118d4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80118d6:	3b01      	subs	r3, #1
 80118d8:	b29b      	uxth	r3, r3
 80118da:	8563      	strh	r3, [r4, #42]	; 0x2a
 80118dc:	e7d4      	b.n	8011888 <HAL_I2C_EV_IRQHandler+0xec>
    __HAL_I2C_DISABLE_IT(hi2c,I2C_IT_ERRI | I2C_IT_TCI| I2C_IT_STOPI| I2C_IT_NACKI | I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI );
 80118de:	681a      	ldr	r2, [r3, #0]
 80118e0:	21fe      	movs	r1, #254	; 0xfe
 80118e2:	438a      	bics	r2, r1
 80118e4:	601a      	str	r2, [r3, #0]
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80118e6:	6822      	ldr	r2, [r4, #0]
 80118e8:	6851      	ldr	r1, [r2, #4]
 80118ea:	2380      	movs	r3, #128	; 0x80
 80118ec:	021b      	lsls	r3, r3, #8
 80118ee:	430b      	orrs	r3, r1
 80118f0:	6053      	str	r3, [r2, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80118f2:	6823      	ldr	r3, [r4, #0]
 80118f4:	2220      	movs	r2, #32
 80118f6:	61da      	str	r2, [r3, #28]
    hi2c->State = HAL_I2C_STATE_READY;
 80118f8:	2335      	movs	r3, #53	; 0x35
 80118fa:	3a1f      	subs	r2, #31
 80118fc:	54e2      	strb	r2, [r4, r3]
    __HAL_UNLOCK(hi2c);
 80118fe:	3b01      	subs	r3, #1
 8011900:	2200      	movs	r2, #0
 8011902:	54e2      	strb	r2, [r4, r3]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8011904:	0020      	movs	r0, r4
 8011906:	f7ff ff44 	bl	8011792 <HAL_I2C_SlaveTxCpltCallback>
 801190a:	e7bd      	b.n	8011888 <HAL_I2C_EV_IRQHandler+0xec>
    if ((hi2c->State == HAL_I2C_STATE_MASTER_BUSY_TX) || (hi2c->State == HAL_I2C_STATE_MEM_BUSY_TX))
 801190c:	3a3d      	subs	r2, #61	; 0x3d
 801190e:	5ca2      	ldrb	r2, [r4, r2]
 8011910:	2a12      	cmp	r2, #18
 8011912:	d004      	beq.n	801191e <HAL_I2C_EV_IRQHandler+0x182>
 8011914:	2235      	movs	r2, #53	; 0x35
 8011916:	5ca2      	ldrb	r2, [r4, r2]
 8011918:	2a52      	cmp	r2, #82	; 0x52
 801191a:	d000      	beq.n	801191e <HAL_I2C_EV_IRQHandler+0x182>
 801191c:	e76f      	b.n	80117fe <HAL_I2C_EV_IRQHandler+0x62>
  __HAL_LOCK(hi2c); 
 801191e:	2234      	movs	r2, #52	; 0x34
 8011920:	5ca2      	ldrb	r2, [r4, r2]
 8011922:	2a01      	cmp	r2, #1
 8011924:	d100      	bne.n	8011928 <HAL_I2C_EV_IRQHandler+0x18c>
 8011926:	e76a      	b.n	80117fe <HAL_I2C_EV_IRQHandler+0x62>
 8011928:	2234      	movs	r2, #52	; 0x34
 801192a:	2101      	movs	r1, #1
 801192c:	54a1      	strb	r1, [r4, r2]
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == SET)
 801192e:	699a      	ldr	r2, [r3, #24]
 8011930:	0792      	lsls	r2, r2, #30
 8011932:	d50f      	bpl.n	8011954 <HAL_I2C_EV_IRQHandler+0x1b8>
    hi2c->Instance->TXDR = (*hi2c->pBuffPtr++);
 8011934:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8011936:	1c51      	adds	r1, r2, #1
 8011938:	6261      	str	r1, [r4, #36]	; 0x24
 801193a:	7812      	ldrb	r2, [r2, #0]
 801193c:	629a      	str	r2, [r3, #40]	; 0x28
    hi2c->XferSize--;
 801193e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8011940:	3b01      	subs	r3, #1
 8011942:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferCount--;	
 8011944:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8011946:	3b01      	subs	r3, #1
 8011948:	b29b      	uxth	r3, r3
 801194a:	8563      	strh	r3, [r4, #42]	; 0x2a
  __HAL_UNLOCK(hi2c);
 801194c:	2334      	movs	r3, #52	; 0x34
 801194e:	2200      	movs	r2, #0
 8011950:	54e2      	strb	r2, [r4, r3]
  return HAL_OK;    
 8011952:	e754      	b.n	80117fe <HAL_I2C_EV_IRQHandler+0x62>
  else if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TCR) == SET)
 8011954:	699a      	ldr	r2, [r3, #24]
 8011956:	0612      	lsls	r2, r2, #24
 8011958:	d52f      	bpl.n	80119ba <HAL_I2C_EV_IRQHandler+0x21e>
    if((hi2c->XferSize == 0)&&(hi2c->XferCount!=0))
 801195a:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 801195c:	2a00      	cmp	r2, #0
 801195e:	d121      	bne.n	80119a4 <HAL_I2C_EV_IRQHandler+0x208>
 8011960:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8011962:	b292      	uxth	r2, r2
 8011964:	2a00      	cmp	r2, #0
 8011966:	d01d      	beq.n	80119a4 <HAL_I2C_EV_IRQHandler+0x208>
      DevAddress = (hi2c->Instance->CR2 & I2C_CR2_SADD);
 8011968:	6859      	ldr	r1, [r3, #4]
 801196a:	0589      	lsls	r1, r1, #22
 801196c:	0d89      	lsrs	r1, r1, #22
      if(hi2c->XferCount > 255)
 801196e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8011970:	b29b      	uxth	r3, r3
 8011972:	2bff      	cmp	r3, #255	; 0xff
 8011974:	d90a      	bls.n	801198c <HAL_I2C_EV_IRQHandler+0x1f0>
        I2C_TransferConfig(hi2c,DevAddress,255, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8011976:	2380      	movs	r3, #128	; 0x80
 8011978:	2200      	movs	r2, #0
 801197a:	9200      	str	r2, [sp, #0]
 801197c:	045b      	lsls	r3, r3, #17
 801197e:	32ff      	adds	r2, #255	; 0xff
 8011980:	0020      	movs	r0, r4
 8011982:	f7ff fc57 	bl	8011234 <I2C_TransferConfig>
        hi2c->XferSize = 255;
 8011986:	23ff      	movs	r3, #255	; 0xff
 8011988:	8523      	strh	r3, [r4, #40]	; 0x28
 801198a:	e7df      	b.n	801194c <HAL_I2C_EV_IRQHandler+0x1b0>
        I2C_TransferConfig(hi2c,DevAddress,hi2c->XferCount, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 801198c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 801198e:	2380      	movs	r3, #128	; 0x80
 8011990:	b2d2      	uxtb	r2, r2
 8011992:	2000      	movs	r0, #0
 8011994:	9000      	str	r0, [sp, #0]
 8011996:	049b      	lsls	r3, r3, #18
 8011998:	0020      	movs	r0, r4
 801199a:	f7ff fc4b 	bl	8011234 <I2C_TransferConfig>
        hi2c->XferSize = hi2c->XferCount;
 801199e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80119a0:	8523      	strh	r3, [r4, #40]	; 0x28
 80119a2:	e7d3      	b.n	801194c <HAL_I2C_EV_IRQHandler+0x1b0>
      __HAL_UNLOCK(hi2c);
 80119a4:	2334      	movs	r3, #52	; 0x34
 80119a6:	2200      	movs	r2, #0
 80119a8:	54e2      	strb	r2, [r4, r3]
      hi2c->ErrorCode |= HAL_I2C_ERROR_SIZE;
 80119aa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80119ac:	3240      	adds	r2, #64	; 0x40
 80119ae:	4313      	orrs	r3, r2
 80119b0:	63a3      	str	r3, [r4, #56]	; 0x38
      HAL_I2C_ErrorCallback(hi2c);
 80119b2:	0020      	movs	r0, r4
 80119b4:	f7ff fef1 	bl	801179a <HAL_I2C_ErrorCallback>
 80119b8:	e7c8      	b.n	801194c <HAL_I2C_EV_IRQHandler+0x1b0>
  else if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TC) == SET)
 80119ba:	699a      	ldr	r2, [r3, #24]
 80119bc:	0652      	lsls	r2, r2, #25
 80119be:	d514      	bpl.n	80119ea <HAL_I2C_EV_IRQHandler+0x24e>
    if(hi2c->XferCount == 0)
 80119c0:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80119c2:	b292      	uxth	r2, r2
 80119c4:	2a00      	cmp	r2, #0
 80119c6:	d105      	bne.n	80119d4 <HAL_I2C_EV_IRQHandler+0x238>
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80119c8:	6859      	ldr	r1, [r3, #4]
 80119ca:	2280      	movs	r2, #128	; 0x80
 80119cc:	01d2      	lsls	r2, r2, #7
 80119ce:	430a      	orrs	r2, r1
 80119d0:	605a      	str	r2, [r3, #4]
 80119d2:	e7bb      	b.n	801194c <HAL_I2C_EV_IRQHandler+0x1b0>
      __HAL_UNLOCK(hi2c);
 80119d4:	2334      	movs	r3, #52	; 0x34
 80119d6:	2200      	movs	r2, #0
 80119d8:	54e2      	strb	r2, [r4, r3]
      hi2c->ErrorCode |= HAL_I2C_ERROR_SIZE;
 80119da:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80119dc:	3240      	adds	r2, #64	; 0x40
 80119de:	4313      	orrs	r3, r2
 80119e0:	63a3      	str	r3, [r4, #56]	; 0x38
      HAL_I2C_ErrorCallback(hi2c);
 80119e2:	0020      	movs	r0, r4
 80119e4:	f7ff fed9 	bl	801179a <HAL_I2C_ErrorCallback>
 80119e8:	e7b0      	b.n	801194c <HAL_I2C_EV_IRQHandler+0x1b0>
  else if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80119ea:	699a      	ldr	r2, [r3, #24]
 80119ec:	0692      	lsls	r2, r2, #26
 80119ee:	d51c      	bpl.n	8011a2a <HAL_I2C_EV_IRQHandler+0x28e>
    __HAL_I2C_DISABLE_IT(hi2c,I2C_IT_ERRI | I2C_IT_TCI| I2C_IT_STOPI| I2C_IT_NACKI | I2C_IT_TXI );
 80119f0:	681a      	ldr	r2, [r3, #0]
 80119f2:	21f2      	movs	r1, #242	; 0xf2
 80119f4:	438a      	bics	r2, r1
 80119f6:	601a      	str	r2, [r3, #0]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80119f8:	6823      	ldr	r3, [r4, #0]
 80119fa:	2220      	movs	r2, #32
 80119fc:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 80119fe:	6822      	ldr	r2, [r4, #0]
 8011a00:	6853      	ldr	r3, [r2, #4]
 8011a02:	4989      	ldr	r1, [pc, #548]	; (8011c28 <HAL_I2C_EV_IRQHandler+0x48c>)
 8011a04:	400b      	ands	r3, r1
 8011a06:	6053      	str	r3, [r2, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8011a08:	2335      	movs	r3, #53	; 0x35
 8011a0a:	2201      	movs	r2, #1
 8011a0c:	54e2      	strb	r2, [r4, r3]
    __HAL_UNLOCK(hi2c);
 8011a0e:	3233      	adds	r2, #51	; 0x33
 8011a10:	2100      	movs	r1, #0
 8011a12:	54a1      	strb	r1, [r4, r2]
    if(hi2c->State == HAL_I2C_STATE_MEM_BUSY_TX)
 8011a14:	5ce3      	ldrb	r3, [r4, r3]
 8011a16:	2b52      	cmp	r3, #82	; 0x52
 8011a18:	d003      	beq.n	8011a22 <HAL_I2C_EV_IRQHandler+0x286>
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8011a1a:	0020      	movs	r0, r4
 8011a1c:	f7ff feb8 	bl	8011790 <HAL_I2C_MasterTxCpltCallback>
 8011a20:	e794      	b.n	801194c <HAL_I2C_EV_IRQHandler+0x1b0>
      HAL_I2C_MemTxCpltCallback(hi2c);
 8011a22:	0020      	movs	r0, r4
 8011a24:	f7ff feb7 	bl	8011796 <HAL_I2C_MemTxCpltCallback>
 8011a28:	e790      	b.n	801194c <HAL_I2C_EV_IRQHandler+0x1b0>
  else if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8011a2a:	699a      	ldr	r2, [r3, #24]
 8011a2c:	06d2      	lsls	r2, r2, #27
 8011a2e:	d58d      	bpl.n	801194c <HAL_I2C_EV_IRQHandler+0x1b0>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8011a30:	2210      	movs	r2, #16
 8011a32:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8011a34:	2334      	movs	r3, #52	; 0x34
 8011a36:	2200      	movs	r2, #0
 8011a38:	54e2      	strb	r2, [r4, r3]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8011a3a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8011a3c:	3204      	adds	r2, #4
 8011a3e:	4313      	orrs	r3, r2
 8011a40:	63a3      	str	r3, [r4, #56]	; 0x38
    HAL_I2C_ErrorCallback(hi2c);
 8011a42:	0020      	movs	r0, r4
 8011a44:	f7ff fea9 	bl	801179a <HAL_I2C_ErrorCallback>
 8011a48:	e780      	b.n	801194c <HAL_I2C_EV_IRQHandler+0x1b0>
    if (hi2c->State == HAL_I2C_STATE_SLAVE_BUSY_RX)
 8011a4a:	3a47      	subs	r2, #71	; 0x47
 8011a4c:	5ca2      	ldrb	r2, [r4, r2]
 8011a4e:	2a42      	cmp	r2, #66	; 0x42
 8011a50:	d000      	beq.n	8011a54 <HAL_I2C_EV_IRQHandler+0x2b8>
 8011a52:	e6ed      	b.n	8011830 <HAL_I2C_EV_IRQHandler+0x94>
  __HAL_LOCK(hi2c);
 8011a54:	3a0e      	subs	r2, #14
 8011a56:	5ca2      	ldrb	r2, [r4, r2]
 8011a58:	2a01      	cmp	r2, #1
 8011a5a:	d100      	bne.n	8011a5e <HAL_I2C_EV_IRQHandler+0x2c2>
 8011a5c:	e6e8      	b.n	8011830 <HAL_I2C_EV_IRQHandler+0x94>
 8011a5e:	2234      	movs	r2, #52	; 0x34
 8011a60:	2101      	movs	r1, #1
 8011a62:	54a1      	strb	r1, [r4, r2]
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) != RESET)
 8011a64:	699a      	ldr	r2, [r3, #24]
 8011a66:	06d2      	lsls	r2, r2, #27
 8011a68:	d408      	bmi.n	8011a7c <HAL_I2C_EV_IRQHandler+0x2e0>
  else if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8011a6a:	699a      	ldr	r2, [r3, #24]
 8011a6c:	0712      	lsls	r2, r2, #28
 8011a6e:	d512      	bpl.n	8011a96 <HAL_I2C_EV_IRQHandler+0x2fa>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8011a70:	2208      	movs	r2, #8
 8011a72:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(hi2c);
 8011a74:	2334      	movs	r3, #52	; 0x34
 8011a76:	2200      	movs	r2, #0
 8011a78:	54e2      	strb	r2, [r4, r3]
  return HAL_OK;     
 8011a7a:	e6d9      	b.n	8011830 <HAL_I2C_EV_IRQHandler+0x94>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8011a7c:	2210      	movs	r2, #16
 8011a7e:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8011a80:	2334      	movs	r3, #52	; 0x34
 8011a82:	2200      	movs	r2, #0
 8011a84:	54e2      	strb	r2, [r4, r3]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8011a86:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8011a88:	3204      	adds	r2, #4
 8011a8a:	4313      	orrs	r3, r2
 8011a8c:	63a3      	str	r3, [r4, #56]	; 0x38
    HAL_I2C_ErrorCallback(hi2c);
 8011a8e:	0020      	movs	r0, r4
 8011a90:	f7ff fe83 	bl	801179a <HAL_I2C_ErrorCallback>
 8011a94:	e7ee      	b.n	8011a74 <HAL_I2C_EV_IRQHandler+0x2d8>
  else if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8011a96:	699a      	ldr	r2, [r3, #24]
 8011a98:	0752      	lsls	r2, r2, #29
 8011a9a:	d50c      	bpl.n	8011ab6 <HAL_I2C_EV_IRQHandler+0x31a>
    (*hi2c->pBuffPtr++) = hi2c->Instance->RXDR;
 8011a9c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011a9e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011aa0:	1c59      	adds	r1, r3, #1
 8011aa2:	6261      	str	r1, [r4, #36]	; 0x24
 8011aa4:	701a      	strb	r2, [r3, #0]
    hi2c->XferSize--;
 8011aa6:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8011aa8:	3b01      	subs	r3, #1
 8011aaa:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferCount--;
 8011aac:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8011aae:	3b01      	subs	r3, #1
 8011ab0:	b29b      	uxth	r3, r3
 8011ab2:	8563      	strh	r3, [r4, #42]	; 0x2a
 8011ab4:	e7de      	b.n	8011a74 <HAL_I2C_EV_IRQHandler+0x2d8>
  else if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8011ab6:	699a      	ldr	r2, [r3, #24]
 8011ab8:	0692      	lsls	r2, r2, #26
 8011aba:	d5db      	bpl.n	8011a74 <HAL_I2C_EV_IRQHandler+0x2d8>
    __HAL_I2C_DISABLE_IT(hi2c,I2C_IT_ERRI | I2C_IT_TCI| I2C_IT_STOPI| I2C_IT_NACKI | I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_RXI );
 8011abc:	681a      	ldr	r2, [r3, #0]
 8011abe:	21fc      	movs	r1, #252	; 0xfc
 8011ac0:	438a      	bics	r2, r1
 8011ac2:	601a      	str	r2, [r3, #0]
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8011ac4:	6822      	ldr	r2, [r4, #0]
 8011ac6:	6851      	ldr	r1, [r2, #4]
 8011ac8:	2380      	movs	r3, #128	; 0x80
 8011aca:	021b      	lsls	r3, r3, #8
 8011acc:	430b      	orrs	r3, r1
 8011ace:	6053      	str	r3, [r2, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8011ad0:	6823      	ldr	r3, [r4, #0]
 8011ad2:	2220      	movs	r2, #32
 8011ad4:	61da      	str	r2, [r3, #28]
    hi2c->State = HAL_I2C_STATE_READY;
 8011ad6:	2335      	movs	r3, #53	; 0x35
 8011ad8:	3a1f      	subs	r2, #31
 8011ada:	54e2      	strb	r2, [r4, r3]
    __HAL_UNLOCK(hi2c);
 8011adc:	3b01      	subs	r3, #1
 8011ade:	2200      	movs	r2, #0
 8011ae0:	54e2      	strb	r2, [r4, r3]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8011ae2:	0020      	movs	r0, r4
 8011ae4:	f7ff fe56 	bl	8011794 <HAL_I2C_SlaveRxCpltCallback>
 8011ae8:	e7c4      	b.n	8011a74 <HAL_I2C_EV_IRQHandler+0x2d8>
    if ((hi2c->State == HAL_I2C_STATE_MASTER_BUSY_RX) || (hi2c->State == HAL_I2C_STATE_MEM_BUSY_RX))
 8011aea:	3a3f      	subs	r2, #63	; 0x3f
 8011aec:	5ca2      	ldrb	r2, [r4, r2]
 8011aee:	2a22      	cmp	r2, #34	; 0x22
 8011af0:	d004      	beq.n	8011afc <HAL_I2C_EV_IRQHandler+0x360>
 8011af2:	2235      	movs	r2, #53	; 0x35
 8011af4:	5ca2      	ldrb	r2, [r4, r2]
 8011af6:	2a62      	cmp	r2, #98	; 0x62
 8011af8:	d000      	beq.n	8011afc <HAL_I2C_EV_IRQHandler+0x360>
 8011afa:	e6af      	b.n	801185c <HAL_I2C_EV_IRQHandler+0xc0>
  __HAL_LOCK(hi2c);
 8011afc:	2234      	movs	r2, #52	; 0x34
 8011afe:	5ca2      	ldrb	r2, [r4, r2]
 8011b00:	2a01      	cmp	r2, #1
 8011b02:	d100      	bne.n	8011b06 <HAL_I2C_EV_IRQHandler+0x36a>
 8011b04:	e6aa      	b.n	801185c <HAL_I2C_EV_IRQHandler+0xc0>
 8011b06:	2234      	movs	r2, #52	; 0x34
 8011b08:	2101      	movs	r1, #1
 8011b0a:	54a1      	strb	r1, [r4, r2]
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8011b0c:	699a      	ldr	r2, [r3, #24]
 8011b0e:	0752      	lsls	r2, r2, #29
 8011b10:	d50f      	bpl.n	8011b32 <HAL_I2C_EV_IRQHandler+0x396>
    (*hi2c->pBuffPtr++) = hi2c->Instance->RXDR;
 8011b12:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011b14:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011b16:	1c59      	adds	r1, r3, #1
 8011b18:	6261      	str	r1, [r4, #36]	; 0x24
 8011b1a:	701a      	strb	r2, [r3, #0]
    hi2c->XferSize--;
 8011b1c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8011b1e:	3b01      	subs	r3, #1
 8011b20:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferCount--;
 8011b22:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8011b24:	3b01      	subs	r3, #1
 8011b26:	b29b      	uxth	r3, r3
 8011b28:	8563      	strh	r3, [r4, #42]	; 0x2a
  __HAL_UNLOCK(hi2c); 
 8011b2a:	2334      	movs	r3, #52	; 0x34
 8011b2c:	2200      	movs	r2, #0
 8011b2e:	54e2      	strb	r2, [r4, r3]
}
 8011b30:	e694      	b.n	801185c <HAL_I2C_EV_IRQHandler+0xc0>
  else if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TCR) == SET)
 8011b32:	699a      	ldr	r2, [r3, #24]
 8011b34:	0612      	lsls	r2, r2, #24
 8011b36:	d52f      	bpl.n	8011b98 <HAL_I2C_EV_IRQHandler+0x3fc>
    if((hi2c->XferSize == 0)&&(hi2c->XferCount!=0))
 8011b38:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8011b3a:	2a00      	cmp	r2, #0
 8011b3c:	d121      	bne.n	8011b82 <HAL_I2C_EV_IRQHandler+0x3e6>
 8011b3e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8011b40:	b292      	uxth	r2, r2
 8011b42:	2a00      	cmp	r2, #0
 8011b44:	d01d      	beq.n	8011b82 <HAL_I2C_EV_IRQHandler+0x3e6>
      DevAddress = (hi2c->Instance->CR2 & I2C_CR2_SADD);
 8011b46:	6859      	ldr	r1, [r3, #4]
 8011b48:	0589      	lsls	r1, r1, #22
 8011b4a:	0d89      	lsrs	r1, r1, #22
      if(hi2c->XferCount > 255)
 8011b4c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8011b4e:	b29b      	uxth	r3, r3
 8011b50:	2bff      	cmp	r3, #255	; 0xff
 8011b52:	d90a      	bls.n	8011b6a <HAL_I2C_EV_IRQHandler+0x3ce>
        I2C_TransferConfig(hi2c,DevAddress,255, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8011b54:	2380      	movs	r3, #128	; 0x80
 8011b56:	2200      	movs	r2, #0
 8011b58:	9200      	str	r2, [sp, #0]
 8011b5a:	045b      	lsls	r3, r3, #17
 8011b5c:	32ff      	adds	r2, #255	; 0xff
 8011b5e:	0020      	movs	r0, r4
 8011b60:	f7ff fb68 	bl	8011234 <I2C_TransferConfig>
        hi2c->XferSize = 255;
 8011b64:	23ff      	movs	r3, #255	; 0xff
 8011b66:	8523      	strh	r3, [r4, #40]	; 0x28
 8011b68:	e7df      	b.n	8011b2a <HAL_I2C_EV_IRQHandler+0x38e>
        I2C_TransferConfig(hi2c,DevAddress,hi2c->XferCount, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8011b6a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8011b6c:	2380      	movs	r3, #128	; 0x80
 8011b6e:	b2d2      	uxtb	r2, r2
 8011b70:	2000      	movs	r0, #0
 8011b72:	9000      	str	r0, [sp, #0]
 8011b74:	049b      	lsls	r3, r3, #18
 8011b76:	0020      	movs	r0, r4
 8011b78:	f7ff fb5c 	bl	8011234 <I2C_TransferConfig>
        hi2c->XferSize = hi2c->XferCount;
 8011b7c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8011b7e:	8523      	strh	r3, [r4, #40]	; 0x28
 8011b80:	e7d3      	b.n	8011b2a <HAL_I2C_EV_IRQHandler+0x38e>
      __HAL_UNLOCK(hi2c);
 8011b82:	2334      	movs	r3, #52	; 0x34
 8011b84:	2200      	movs	r2, #0
 8011b86:	54e2      	strb	r2, [r4, r3]
      hi2c->ErrorCode |= HAL_I2C_ERROR_SIZE;
 8011b88:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8011b8a:	3240      	adds	r2, #64	; 0x40
 8011b8c:	4313      	orrs	r3, r2
 8011b8e:	63a3      	str	r3, [r4, #56]	; 0x38
      HAL_I2C_ErrorCallback(hi2c);
 8011b90:	0020      	movs	r0, r4
 8011b92:	f7ff fe02 	bl	801179a <HAL_I2C_ErrorCallback>
 8011b96:	e7c8      	b.n	8011b2a <HAL_I2C_EV_IRQHandler+0x38e>
  else if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TC) == SET)
 8011b98:	699a      	ldr	r2, [r3, #24]
 8011b9a:	0652      	lsls	r2, r2, #25
 8011b9c:	d514      	bpl.n	8011bc8 <HAL_I2C_EV_IRQHandler+0x42c>
    if(hi2c->XferCount == 0)
 8011b9e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8011ba0:	b292      	uxth	r2, r2
 8011ba2:	2a00      	cmp	r2, #0
 8011ba4:	d105      	bne.n	8011bb2 <HAL_I2C_EV_IRQHandler+0x416>
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8011ba6:	6859      	ldr	r1, [r3, #4]
 8011ba8:	2280      	movs	r2, #128	; 0x80
 8011baa:	01d2      	lsls	r2, r2, #7
 8011bac:	430a      	orrs	r2, r1
 8011bae:	605a      	str	r2, [r3, #4]
 8011bb0:	e7bb      	b.n	8011b2a <HAL_I2C_EV_IRQHandler+0x38e>
      __HAL_UNLOCK(hi2c);
 8011bb2:	2334      	movs	r3, #52	; 0x34
 8011bb4:	2200      	movs	r2, #0
 8011bb6:	54e2      	strb	r2, [r4, r3]
      hi2c->ErrorCode |= HAL_I2C_ERROR_SIZE;
 8011bb8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8011bba:	3240      	adds	r2, #64	; 0x40
 8011bbc:	4313      	orrs	r3, r2
 8011bbe:	63a3      	str	r3, [r4, #56]	; 0x38
      HAL_I2C_ErrorCallback(hi2c);
 8011bc0:	0020      	movs	r0, r4
 8011bc2:	f7ff fdea 	bl	801179a <HAL_I2C_ErrorCallback>
 8011bc6:	e7b0      	b.n	8011b2a <HAL_I2C_EV_IRQHandler+0x38e>
  else if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8011bc8:	699a      	ldr	r2, [r3, #24]
 8011bca:	0692      	lsls	r2, r2, #26
 8011bcc:	d51c      	bpl.n	8011c08 <HAL_I2C_EV_IRQHandler+0x46c>
    __HAL_I2C_DISABLE_IT(hi2c,I2C_IT_ERRI | I2C_IT_TCI| I2C_IT_STOPI| I2C_IT_NACKI | I2C_IT_RXI );
 8011bce:	681a      	ldr	r2, [r3, #0]
 8011bd0:	21f4      	movs	r1, #244	; 0xf4
 8011bd2:	438a      	bics	r2, r1
 8011bd4:	601a      	str	r2, [r3, #0]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8011bd6:	6823      	ldr	r3, [r4, #0]
 8011bd8:	2220      	movs	r2, #32
 8011bda:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8011bdc:	6822      	ldr	r2, [r4, #0]
 8011bde:	6853      	ldr	r3, [r2, #4]
 8011be0:	4911      	ldr	r1, [pc, #68]	; (8011c28 <HAL_I2C_EV_IRQHandler+0x48c>)
 8011be2:	400b      	ands	r3, r1
 8011be4:	6053      	str	r3, [r2, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8011be6:	2335      	movs	r3, #53	; 0x35
 8011be8:	2201      	movs	r2, #1
 8011bea:	54e2      	strb	r2, [r4, r3]
    __HAL_UNLOCK(hi2c);
 8011bec:	3233      	adds	r2, #51	; 0x33
 8011bee:	2100      	movs	r1, #0
 8011bf0:	54a1      	strb	r1, [r4, r2]
    if(hi2c->State == HAL_I2C_STATE_MEM_BUSY_RX)
 8011bf2:	5ce3      	ldrb	r3, [r4, r3]
 8011bf4:	2b62      	cmp	r3, #98	; 0x62
 8011bf6:	d003      	beq.n	8011c00 <HAL_I2C_EV_IRQHandler+0x464>
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8011bf8:	0020      	movs	r0, r4
 8011bfa:	f7fb fce9 	bl	800d5d0 <HAL_I2C_MasterRxCpltCallback>
 8011bfe:	e794      	b.n	8011b2a <HAL_I2C_EV_IRQHandler+0x38e>
      HAL_I2C_MemRxCpltCallback(hi2c);
 8011c00:	0020      	movs	r0, r4
 8011c02:	f7ff fdc9 	bl	8011798 <HAL_I2C_MemRxCpltCallback>
 8011c06:	e790      	b.n	8011b2a <HAL_I2C_EV_IRQHandler+0x38e>
  else if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8011c08:	699a      	ldr	r2, [r3, #24]
 8011c0a:	06d2      	lsls	r2, r2, #27
 8011c0c:	d58d      	bpl.n	8011b2a <HAL_I2C_EV_IRQHandler+0x38e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8011c0e:	2210      	movs	r2, #16
 8011c10:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8011c12:	2334      	movs	r3, #52	; 0x34
 8011c14:	2200      	movs	r2, #0
 8011c16:	54e2      	strb	r2, [r4, r3]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8011c18:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8011c1a:	3204      	adds	r2, #4
 8011c1c:	4313      	orrs	r3, r2
 8011c1e:	63a3      	str	r3, [r4, #56]	; 0x38
    HAL_I2C_ErrorCallback(hi2c);
 8011c20:	0020      	movs	r0, r4
 8011c22:	f7ff fdba 	bl	801179a <HAL_I2C_ErrorCallback>
 8011c26:	e780      	b.n	8011b2a <HAL_I2C_EV_IRQHandler+0x38e>
 8011c28:	fe00e800 	.word	0xfe00e800

08011c2c <HAL_I2C_ER_IRQHandler>:
{
 8011c2c:	b510      	push	{r4, lr}
  if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BERR) == SET) && (__HAL_I2C_GET_IT_SOURCE(hi2c, I2C_IT_ERRI) == SET))
 8011c2e:	6803      	ldr	r3, [r0, #0]
 8011c30:	699a      	ldr	r2, [r3, #24]
 8011c32:	05d2      	lsls	r2, r2, #23
 8011c34:	d509      	bpl.n	8011c4a <HAL_I2C_ER_IRQHandler+0x1e>
 8011c36:	681a      	ldr	r2, [r3, #0]
 8011c38:	0612      	lsls	r2, r2, #24
 8011c3a:	d506      	bpl.n	8011c4a <HAL_I2C_ER_IRQHandler+0x1e>
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8011c3c:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8011c3e:	2101      	movs	r1, #1
 8011c40:	430a      	orrs	r2, r1
 8011c42:	6382      	str	r2, [r0, #56]	; 0x38
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8011c44:	2280      	movs	r2, #128	; 0x80
 8011c46:	0052      	lsls	r2, r2, #1
 8011c48:	61da      	str	r2, [r3, #28]
  if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_OVR) == SET) && (__HAL_I2C_GET_IT_SOURCE(hi2c, I2C_IT_ERRI) == SET))
 8011c4a:	6803      	ldr	r3, [r0, #0]
 8011c4c:	699a      	ldr	r2, [r3, #24]
 8011c4e:	0552      	lsls	r2, r2, #21
 8011c50:	d509      	bpl.n	8011c66 <HAL_I2C_ER_IRQHandler+0x3a>
 8011c52:	681a      	ldr	r2, [r3, #0]
 8011c54:	0612      	lsls	r2, r2, #24
 8011c56:	d506      	bpl.n	8011c66 <HAL_I2C_ER_IRQHandler+0x3a>
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8011c58:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8011c5a:	2108      	movs	r1, #8
 8011c5c:	430a      	orrs	r2, r1
 8011c5e:	6382      	str	r2, [r0, #56]	; 0x38
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8011c60:	2280      	movs	r2, #128	; 0x80
 8011c62:	00d2      	lsls	r2, r2, #3
 8011c64:	61da      	str	r2, [r3, #28]
  if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ARLO) == SET) && (__HAL_I2C_GET_IT_SOURCE(hi2c, I2C_IT_ERRI) == SET))
 8011c66:	6803      	ldr	r3, [r0, #0]
 8011c68:	699a      	ldr	r2, [r3, #24]
 8011c6a:	0592      	lsls	r2, r2, #22
 8011c6c:	d509      	bpl.n	8011c82 <HAL_I2C_ER_IRQHandler+0x56>
 8011c6e:	681a      	ldr	r2, [r3, #0]
 8011c70:	0612      	lsls	r2, r2, #24
 8011c72:	d506      	bpl.n	8011c82 <HAL_I2C_ER_IRQHandler+0x56>
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8011c74:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8011c76:	2102      	movs	r1, #2
 8011c78:	430a      	orrs	r2, r1
 8011c7a:	6382      	str	r2, [r0, #56]	; 0x38
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8011c7c:	2280      	movs	r2, #128	; 0x80
 8011c7e:	0092      	lsls	r2, r2, #2
 8011c80:	61da      	str	r2, [r3, #28]
  if((hi2c->ErrorCode & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8011c82:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8011c84:	220b      	movs	r2, #11
 8011c86:	421a      	tst	r2, r3
 8011c88:	d100      	bne.n	8011c8c <HAL_I2C_ER_IRQHandler+0x60>
}
 8011c8a:	bd10      	pop	{r4, pc}
    hi2c->State = HAL_I2C_STATE_READY;
 8011c8c:	2335      	movs	r3, #53	; 0x35
 8011c8e:	3a0a      	subs	r2, #10
 8011c90:	54c2      	strb	r2, [r0, r3]
    HAL_I2C_ErrorCallback(hi2c);
 8011c92:	f7ff fd82 	bl	801179a <HAL_I2C_ErrorCallback>
}
 8011c96:	e7f8      	b.n	8011c8a <HAL_I2C_ER_IRQHandler+0x5e>

08011c98 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter : new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8011c98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011c9a:	0003      	movs	r3, r0
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));
  
  if((hi2c->State == HAL_I2C_STATE_BUSY) || (hi2c->State == HAL_I2C_STATE_MASTER_BUSY_TX) || (hi2c->State == HAL_I2C_STATE_MASTER_BUSY_RX)
 8011c9c:	2235      	movs	r2, #53	; 0x35
 8011c9e:	5c82      	ldrb	r2, [r0, r2]
 8011ca0:	b2d0      	uxtb	r0, r2
 8011ca2:	2a02      	cmp	r2, #2
 8011ca4:	d02e      	beq.n	8011d04 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
 8011ca6:	2235      	movs	r2, #53	; 0x35
 8011ca8:	5c9a      	ldrb	r2, [r3, r2]
 8011caa:	2a12      	cmp	r2, #18
 8011cac:	d02b      	beq.n	8011d06 <HAL_I2CEx_ConfigAnalogFilter+0x6e>
 8011cae:	2235      	movs	r2, #53	; 0x35
 8011cb0:	5c9a      	ldrb	r2, [r3, r2]
 8011cb2:	2a22      	cmp	r2, #34	; 0x22
 8011cb4:	d029      	beq.n	8011d0a <HAL_I2CEx_ConfigAnalogFilter+0x72>
     || (hi2c->State == HAL_I2C_STATE_SLAVE_BUSY_TX) || (hi2c->State == HAL_I2C_STATE_SLAVE_BUSY_RX))
 8011cb6:	2235      	movs	r2, #53	; 0x35
 8011cb8:	5c9a      	ldrb	r2, [r3, r2]
 8011cba:	2a32      	cmp	r2, #50	; 0x32
 8011cbc:	d027      	beq.n	8011d0e <HAL_I2CEx_ConfigAnalogFilter+0x76>
 8011cbe:	2235      	movs	r2, #53	; 0x35
 8011cc0:	5c9a      	ldrb	r2, [r3, r2]
 8011cc2:	2a42      	cmp	r2, #66	; 0x42
 8011cc4:	d025      	beq.n	8011d12 <HAL_I2CEx_ConfigAnalogFilter+0x7a>
  {
    return HAL_BUSY;
  }
  
  /* Process Locked */
  __HAL_LOCK(hi2c);
 8011cc6:	2234      	movs	r2, #52	; 0x34
 8011cc8:	5c9a      	ldrb	r2, [r3, r2]
 8011cca:	2a01      	cmp	r2, #1
 8011ccc:	d023      	beq.n	8011d16 <HAL_I2CEx_ConfigAnalogFilter+0x7e>
 8011cce:	2434      	movs	r4, #52	; 0x34
 8011cd0:	2201      	movs	r2, #1
 8011cd2:	551a      	strb	r2, [r3, r4]

  hi2c->State = HAL_I2C_STATE_BUSY;
 8011cd4:	2535      	movs	r5, #53	; 0x35
 8011cd6:	2002      	movs	r0, #2
 8011cd8:	5558      	strb	r0, [r3, r5]
  
  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);    
 8011cda:	681e      	ldr	r6, [r3, #0]
 8011cdc:	6830      	ldr	r0, [r6, #0]
 8011cde:	4390      	bics	r0, r2
 8011ce0:	6030      	str	r0, [r6, #0]
  
  /* Reset I2Cx ANOFF bit */
  hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);    
 8011ce2:	681e      	ldr	r6, [r3, #0]
 8011ce4:	6830      	ldr	r0, [r6, #0]
 8011ce6:	4f0d      	ldr	r7, [pc, #52]	; (8011d1c <HAL_I2CEx_ConfigAnalogFilter+0x84>)
 8011ce8:	4038      	ands	r0, r7
 8011cea:	6030      	str	r0, [r6, #0]
  
  /* Set analog filter bit*/
  hi2c->Instance->CR1 |= AnalogFilter;
 8011cec:	681e      	ldr	r6, [r3, #0]
 8011cee:	6830      	ldr	r0, [r6, #0]
 8011cf0:	4301      	orrs	r1, r0
 8011cf2:	6031      	str	r1, [r6, #0]
  
  __HAL_I2C_ENABLE(hi2c); 
 8011cf4:	6818      	ldr	r0, [r3, #0]
 8011cf6:	6801      	ldr	r1, [r0, #0]
 8011cf8:	4311      	orrs	r1, r2
 8011cfa:	6001      	str	r1, [r0, #0]
  
  hi2c->State = HAL_I2C_STATE_READY;
 8011cfc:	555a      	strb	r2, [r3, r5]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8011cfe:	2200      	movs	r2, #0
 8011d00:	551a      	strb	r2, [r3, r4]

  return HAL_OK; 
 8011d02:	2000      	movs	r0, #0
}
 8011d04:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_BUSY;
 8011d06:	2002      	movs	r0, #2
 8011d08:	e7fc      	b.n	8011d04 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
 8011d0a:	2002      	movs	r0, #2
 8011d0c:	e7fa      	b.n	8011d04 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
 8011d0e:	2002      	movs	r0, #2
 8011d10:	e7f8      	b.n	8011d04 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
 8011d12:	2002      	movs	r0, #2
 8011d14:	e7f6      	b.n	8011d04 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  __HAL_LOCK(hi2c);
 8011d16:	2002      	movs	r0, #2
 8011d18:	e7f4      	b.n	8011d04 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
 8011d1a:	46c0      	nop			; (mov r8, r8)
 8011d1c:	ffffefff 	.word	0xffffefff

08011d20 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter : Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8011d20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011d22:	0003      	movs	r3, r0
  
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));
  
  if((hi2c->State == HAL_I2C_STATE_BUSY) || (hi2c->State == HAL_I2C_STATE_MASTER_BUSY_TX) || (hi2c->State == HAL_I2C_STATE_MASTER_BUSY_RX)
 8011d24:	2235      	movs	r2, #53	; 0x35
 8011d26:	5c82      	ldrb	r2, [r0, r2]
 8011d28:	b2d0      	uxtb	r0, r2
 8011d2a:	2a02      	cmp	r2, #2
 8011d2c:	d02c      	beq.n	8011d88 <HAL_I2CEx_ConfigDigitalFilter+0x68>
 8011d2e:	2235      	movs	r2, #53	; 0x35
 8011d30:	5c9a      	ldrb	r2, [r3, r2]
 8011d32:	2a12      	cmp	r2, #18
 8011d34:	d029      	beq.n	8011d8a <HAL_I2CEx_ConfigDigitalFilter+0x6a>
 8011d36:	2235      	movs	r2, #53	; 0x35
 8011d38:	5c9a      	ldrb	r2, [r3, r2]
 8011d3a:	2a22      	cmp	r2, #34	; 0x22
 8011d3c:	d027      	beq.n	8011d8e <HAL_I2CEx_ConfigDigitalFilter+0x6e>
     || (hi2c->State == HAL_I2C_STATE_SLAVE_BUSY_TX) || (hi2c->State == HAL_I2C_STATE_SLAVE_BUSY_RX))
 8011d3e:	2235      	movs	r2, #53	; 0x35
 8011d40:	5c9a      	ldrb	r2, [r3, r2]
 8011d42:	2a32      	cmp	r2, #50	; 0x32
 8011d44:	d025      	beq.n	8011d92 <HAL_I2CEx_ConfigDigitalFilter+0x72>
 8011d46:	2235      	movs	r2, #53	; 0x35
 8011d48:	5c9a      	ldrb	r2, [r3, r2]
 8011d4a:	2a42      	cmp	r2, #66	; 0x42
 8011d4c:	d023      	beq.n	8011d96 <HAL_I2CEx_ConfigDigitalFilter+0x76>
  {
    return HAL_BUSY;
  }
  
  /* Process Locked */
  __HAL_LOCK(hi2c);
 8011d4e:	2234      	movs	r2, #52	; 0x34
 8011d50:	5c9a      	ldrb	r2, [r3, r2]
 8011d52:	2a01      	cmp	r2, #1
 8011d54:	d021      	beq.n	8011d9a <HAL_I2CEx_ConfigDigitalFilter+0x7a>
 8011d56:	2434      	movs	r4, #52	; 0x34
 8011d58:	2201      	movs	r2, #1
 8011d5a:	551a      	strb	r2, [r3, r4]

  hi2c->State = HAL_I2C_STATE_BUSY;
 8011d5c:	2535      	movs	r5, #53	; 0x35
 8011d5e:	2002      	movs	r0, #2
 8011d60:	5558      	strb	r0, [r3, r5]
  
  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);  
 8011d62:	681e      	ldr	r6, [r3, #0]
 8011d64:	6830      	ldr	r0, [r6, #0]
 8011d66:	4390      	bics	r0, r2
 8011d68:	6030      	str	r0, [r6, #0]
  
  /* Get the old register value */
  tmpreg = hi2c->Instance->CR1;
 8011d6a:	681e      	ldr	r6, [r3, #0]
 8011d6c:	6830      	ldr	r0, [r6, #0]
  
  /* Reset I2Cx DNF bits [11:8] */
  tmpreg &= ~(I2C_CR1_DFN);
 8011d6e:	4f0c      	ldr	r7, [pc, #48]	; (8011da0 <HAL_I2CEx_ConfigDigitalFilter+0x80>)
 8011d70:	4038      	ands	r0, r7
  
  /* Set I2Cx DNF coefficient */
  tmpreg |= DigitalFilter << 8;
 8011d72:	0209      	lsls	r1, r1, #8
 8011d74:	4301      	orrs	r1, r0
  
  /* Store the new register value */
  hi2c->Instance->CR1 = tmpreg;
 8011d76:	6031      	str	r1, [r6, #0]
  
  __HAL_I2C_ENABLE(hi2c); 
 8011d78:	6818      	ldr	r0, [r3, #0]
 8011d7a:	6801      	ldr	r1, [r0, #0]
 8011d7c:	4311      	orrs	r1, r2
 8011d7e:	6001      	str	r1, [r0, #0]
  
  hi2c->State = HAL_I2C_STATE_READY;
 8011d80:	555a      	strb	r2, [r3, r5]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8011d82:	2200      	movs	r2, #0
 8011d84:	551a      	strb	r2, [r3, r4]

  return HAL_OK; 
 8011d86:	2000      	movs	r0, #0
}  
 8011d88:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_BUSY;
 8011d8a:	2002      	movs	r0, #2
 8011d8c:	e7fc      	b.n	8011d88 <HAL_I2CEx_ConfigDigitalFilter+0x68>
 8011d8e:	2002      	movs	r0, #2
 8011d90:	e7fa      	b.n	8011d88 <HAL_I2CEx_ConfigDigitalFilter+0x68>
 8011d92:	2002      	movs	r0, #2
 8011d94:	e7f8      	b.n	8011d88 <HAL_I2CEx_ConfigDigitalFilter+0x68>
 8011d96:	2002      	movs	r0, #2
 8011d98:	e7f6      	b.n	8011d88 <HAL_I2CEx_ConfigDigitalFilter+0x68>
  __HAL_LOCK(hi2c);
 8011d9a:	2002      	movs	r0, #2
 8011d9c:	e7f4      	b.n	8011d88 <HAL_I2CEx_ConfigDigitalFilter+0x68>
 8011d9e:	46c0      	nop			; (mov r8, r8)
 8011da0:	fffff0ff 	.word	0xfffff0ff

08011da4 <HAL_MspInit>:
void HAL_MspInit(void)
{
  /* NOTE : This function is generated automatically by MicroXplorer and eventually  
            modified by the user
   */ 
}
 8011da4:	4770      	bx	lr
	...

08011da8 <HAL_PWR_EnableBkUpAccess>:
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  PWR->CR |= (uint32_t)PWR_CR_DBP;
 8011da8:	4a03      	ldr	r2, [pc, #12]	; (8011db8 <HAL_PWR_EnableBkUpAccess+0x10>)
 8011daa:	6811      	ldr	r1, [r2, #0]
 8011dac:	2380      	movs	r3, #128	; 0x80
 8011dae:	005b      	lsls	r3, r3, #1
 8011db0:	430b      	orrs	r3, r1
 8011db2:	6013      	str	r3, [r2, #0]
}
 8011db4:	4770      	bx	lr
 8011db6:	46c0      	nop			; (mov r8, r8)
 8011db8:	40007000 	.word	0x40007000

08011dbc <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8011dbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011dbe:	46c6      	mov	lr, r8
 8011dc0:	b500      	push	{lr}
 8011dc2:	b082      	sub	sp, #8
 8011dc4:	0004      	movs	r4, r0
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8011dc6:	6803      	ldr	r3, [r0, #0]
 8011dc8:	07db      	lsls	r3, r3, #31
 8011dca:	d538      	bpl.n	8011e3e <HAL_RCC_OscConfig+0x82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8011dcc:	4bbd      	ldr	r3, [pc, #756]	; (80120c4 <HAL_RCC_OscConfig+0x308>)
 8011dce:	685a      	ldr	r2, [r3, #4]
 8011dd0:	230c      	movs	r3, #12
 8011dd2:	4013      	ands	r3, r2
 8011dd4:	2b04      	cmp	r3, #4
 8011dd6:	d02a      	beq.n	8011e2e <HAL_RCC_OscConfig+0x72>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8011dd8:	4bba      	ldr	r3, [pc, #744]	; (80120c4 <HAL_RCC_OscConfig+0x308>)
 8011dda:	685a      	ldr	r2, [r3, #4]
 8011ddc:	230c      	movs	r3, #12
 8011dde:	4013      	ands	r3, r2
 8011de0:	2b08      	cmp	r3, #8
 8011de2:	d108      	bne.n	8011df6 <HAL_RCC_OscConfig+0x3a>
 8011de4:	4bb7      	ldr	r3, [pc, #732]	; (80120c4 <HAL_RCC_OscConfig+0x308>)
 8011de6:	685b      	ldr	r3, [r3, #4]
 8011de8:	22c0      	movs	r2, #192	; 0xc0
 8011dea:	0252      	lsls	r2, r2, #9
 8011dec:	4013      	ands	r3, r2
 8011dee:	2280      	movs	r2, #128	; 0x80
 8011df0:	0252      	lsls	r2, r2, #9
 8011df2:	4293      	cmp	r3, r2
 8011df4:	d01b      	beq.n	8011e2e <HAL_RCC_OscConfig+0x72>
      }
    }
    else
    {
      /* Reset HSEON and HSEBYP bits before configuring the HSE --------------*/
      __HAL_RCC_HSE_CONFIG(RCC_HSE_OFF);
 8011df6:	4bb3      	ldr	r3, [pc, #716]	; (80120c4 <HAL_RCC_OscConfig+0x308>)
 8011df8:	681a      	ldr	r2, [r3, #0]
 8011dfa:	49b3      	ldr	r1, [pc, #716]	; (80120c8 <HAL_RCC_OscConfig+0x30c>)
 8011dfc:	400a      	ands	r2, r1
 8011dfe:	601a      	str	r2, [r3, #0]
 8011e00:	681a      	ldr	r2, [r3, #0]
 8011e02:	49b2      	ldr	r1, [pc, #712]	; (80120cc <HAL_RCC_OscConfig+0x310>)
 8011e04:	400a      	ands	r2, r1
 8011e06:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8011e08:	f7fe f912 	bl	8010030 <HAL_GetTick>
 8011e0c:	0005      	movs	r5, r0
      
      /* Wait till HSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8011e0e:	4fad      	ldr	r7, [pc, #692]	; (80120c4 <HAL_RCC_OscConfig+0x308>)
 8011e10:	2680      	movs	r6, #128	; 0x80
 8011e12:	02b6      	lsls	r6, r6, #10
 8011e14:	683b      	ldr	r3, [r7, #0]
 8011e16:	4233      	tst	r3, r6
 8011e18:	d039      	beq.n	8011e8e <HAL_RCC_OscConfig+0xd2>
      {
        if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8011e1a:	f7fe f909 	bl	8010030 <HAL_GetTick>
 8011e1e:	1b40      	subs	r0, r0, r5
 8011e20:	2864      	cmp	r0, #100	; 0x64
 8011e22:	d9f7      	bls.n	8011e14 <HAL_RCC_OscConfig+0x58>
        {
          return HAL_TIMEOUT;
 8011e24:	2003      	movs	r0, #3
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
}
 8011e26:	b002      	add	sp, #8
 8011e28:	bc80      	pop	{r7}
 8011e2a:	46b8      	mov	r8, r7
 8011e2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8011e2e:	4ba5      	ldr	r3, [pc, #660]	; (80120c4 <HAL_RCC_OscConfig+0x308>)
 8011e30:	681b      	ldr	r3, [r3, #0]
 8011e32:	039b      	lsls	r3, r3, #14
 8011e34:	d503      	bpl.n	8011e3e <HAL_RCC_OscConfig+0x82>
 8011e36:	6863      	ldr	r3, [r4, #4]
 8011e38:	2b00      	cmp	r3, #0
 8011e3a:	d100      	bne.n	8011e3e <HAL_RCC_OscConfig+0x82>
 8011e3c:	e274      	b.n	8012328 <HAL_RCC_OscConfig+0x56c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8011e3e:	6823      	ldr	r3, [r4, #0]
 8011e40:	079b      	lsls	r3, r3, #30
 8011e42:	d400      	bmi.n	8011e46 <HAL_RCC_OscConfig+0x8a>
 8011e44:	e08d      	b.n	8011f62 <HAL_RCC_OscConfig+0x1a6>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8011e46:	4b9f      	ldr	r3, [pc, #636]	; (80120c4 <HAL_RCC_OscConfig+0x308>)
 8011e48:	685b      	ldr	r3, [r3, #4]
 8011e4a:	220c      	movs	r2, #12
 8011e4c:	421a      	tst	r2, r3
 8011e4e:	d077      	beq.n	8011f40 <HAL_RCC_OscConfig+0x184>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8011e50:	4b9c      	ldr	r3, [pc, #624]	; (80120c4 <HAL_RCC_OscConfig+0x308>)
 8011e52:	685a      	ldr	r2, [r3, #4]
 8011e54:	230c      	movs	r3, #12
 8011e56:	4013      	ands	r3, r2
 8011e58:	2b08      	cmp	r3, #8
 8011e5a:	d068      	beq.n	8011f2e <HAL_RCC_OscConfig+0x172>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8011e5c:	68e3      	ldr	r3, [r4, #12]
 8011e5e:	2b00      	cmp	r3, #0
 8011e60:	d100      	bne.n	8011e64 <HAL_RCC_OscConfig+0xa8>
 8011e62:	e0a1      	b.n	8011fa8 <HAL_RCC_OscConfig+0x1ec>
        __HAL_RCC_HSI_ENABLE();
 8011e64:	4a97      	ldr	r2, [pc, #604]	; (80120c4 <HAL_RCC_OscConfig+0x308>)
 8011e66:	6813      	ldr	r3, [r2, #0]
 8011e68:	2101      	movs	r1, #1
 8011e6a:	430b      	orrs	r3, r1
 8011e6c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8011e6e:	f7fe f8df 	bl	8010030 <HAL_GetTick>
 8011e72:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8011e74:	4f93      	ldr	r7, [pc, #588]	; (80120c4 <HAL_RCC_OscConfig+0x308>)
 8011e76:	2602      	movs	r6, #2
 8011e78:	683b      	ldr	r3, [r7, #0]
 8011e7a:	421e      	tst	r6, r3
 8011e7c:	d000      	beq.n	8011e80 <HAL_RCC_OscConfig+0xc4>
 8011e7e:	e08a      	b.n	8011f96 <HAL_RCC_OscConfig+0x1da>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8011e80:	f7fe f8d6 	bl	8010030 <HAL_GetTick>
 8011e84:	1b40      	subs	r0, r0, r5
 8011e86:	2864      	cmp	r0, #100	; 0x64
 8011e88:	d9f6      	bls.n	8011e78 <HAL_RCC_OscConfig+0xbc>
            return HAL_TIMEOUT;
 8011e8a:	2003      	movs	r0, #3
 8011e8c:	e7cb      	b.n	8011e26 <HAL_RCC_OscConfig+0x6a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8011e8e:	6863      	ldr	r3, [r4, #4]
 8011e90:	2b01      	cmp	r3, #1
 8011e92:	d00b      	beq.n	8011eac <HAL_RCC_OscConfig+0xf0>
 8011e94:	2b00      	cmp	r3, #0
 8011e96:	d122      	bne.n	8011ede <HAL_RCC_OscConfig+0x122>
 8011e98:	4b8a      	ldr	r3, [pc, #552]	; (80120c4 <HAL_RCC_OscConfig+0x308>)
 8011e9a:	681a      	ldr	r2, [r3, #0]
 8011e9c:	498a      	ldr	r1, [pc, #552]	; (80120c8 <HAL_RCC_OscConfig+0x30c>)
 8011e9e:	400a      	ands	r2, r1
 8011ea0:	601a      	str	r2, [r3, #0]
 8011ea2:	681a      	ldr	r2, [r3, #0]
 8011ea4:	4989      	ldr	r1, [pc, #548]	; (80120cc <HAL_RCC_OscConfig+0x310>)
 8011ea6:	400a      	ands	r2, r1
 8011ea8:	601a      	str	r2, [r3, #0]
 8011eaa:	e005      	b.n	8011eb8 <HAL_RCC_OscConfig+0xfc>
 8011eac:	4a85      	ldr	r2, [pc, #532]	; (80120c4 <HAL_RCC_OscConfig+0x308>)
 8011eae:	6811      	ldr	r1, [r2, #0]
 8011eb0:	2380      	movs	r3, #128	; 0x80
 8011eb2:	025b      	lsls	r3, r3, #9
 8011eb4:	430b      	orrs	r3, r1
 8011eb6:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8011eb8:	6863      	ldr	r3, [r4, #4]
 8011eba:	2b00      	cmp	r3, #0
 8011ebc:	d027      	beq.n	8011f0e <HAL_RCC_OscConfig+0x152>
        tickstart = HAL_GetTick();
 8011ebe:	f7fe f8b7 	bl	8010030 <HAL_GetTick>
 8011ec2:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8011ec4:	4f7f      	ldr	r7, [pc, #508]	; (80120c4 <HAL_RCC_OscConfig+0x308>)
 8011ec6:	2680      	movs	r6, #128	; 0x80
 8011ec8:	02b6      	lsls	r6, r6, #10
 8011eca:	683b      	ldr	r3, [r7, #0]
 8011ecc:	4233      	tst	r3, r6
 8011ece:	d1b6      	bne.n	8011e3e <HAL_RCC_OscConfig+0x82>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8011ed0:	f7fe f8ae 	bl	8010030 <HAL_GetTick>
 8011ed4:	1b40      	subs	r0, r0, r5
 8011ed6:	2864      	cmp	r0, #100	; 0x64
 8011ed8:	d9f7      	bls.n	8011eca <HAL_RCC_OscConfig+0x10e>
            return HAL_TIMEOUT;
 8011eda:	2003      	movs	r0, #3
 8011edc:	e7a3      	b.n	8011e26 <HAL_RCC_OscConfig+0x6a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8011ede:	2b05      	cmp	r3, #5
 8011ee0:	d009      	beq.n	8011ef6 <HAL_RCC_OscConfig+0x13a>
 8011ee2:	4b78      	ldr	r3, [pc, #480]	; (80120c4 <HAL_RCC_OscConfig+0x308>)
 8011ee4:	681a      	ldr	r2, [r3, #0]
 8011ee6:	4978      	ldr	r1, [pc, #480]	; (80120c8 <HAL_RCC_OscConfig+0x30c>)
 8011ee8:	400a      	ands	r2, r1
 8011eea:	601a      	str	r2, [r3, #0]
 8011eec:	681a      	ldr	r2, [r3, #0]
 8011eee:	4977      	ldr	r1, [pc, #476]	; (80120cc <HAL_RCC_OscConfig+0x310>)
 8011ef0:	400a      	ands	r2, r1
 8011ef2:	601a      	str	r2, [r3, #0]
 8011ef4:	e7e0      	b.n	8011eb8 <HAL_RCC_OscConfig+0xfc>
 8011ef6:	4b73      	ldr	r3, [pc, #460]	; (80120c4 <HAL_RCC_OscConfig+0x308>)
 8011ef8:	6819      	ldr	r1, [r3, #0]
 8011efa:	2280      	movs	r2, #128	; 0x80
 8011efc:	02d2      	lsls	r2, r2, #11
 8011efe:	430a      	orrs	r2, r1
 8011f00:	601a      	str	r2, [r3, #0]
 8011f02:	6819      	ldr	r1, [r3, #0]
 8011f04:	2280      	movs	r2, #128	; 0x80
 8011f06:	0252      	lsls	r2, r2, #9
 8011f08:	430a      	orrs	r2, r1
 8011f0a:	601a      	str	r2, [r3, #0]
 8011f0c:	e7d4      	b.n	8011eb8 <HAL_RCC_OscConfig+0xfc>
        tickstart = HAL_GetTick();
 8011f0e:	f7fe f88f 	bl	8010030 <HAL_GetTick>
 8011f12:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8011f14:	4f6b      	ldr	r7, [pc, #428]	; (80120c4 <HAL_RCC_OscConfig+0x308>)
 8011f16:	2680      	movs	r6, #128	; 0x80
 8011f18:	02b6      	lsls	r6, r6, #10
 8011f1a:	683b      	ldr	r3, [r7, #0]
 8011f1c:	4233      	tst	r3, r6
 8011f1e:	d08e      	beq.n	8011e3e <HAL_RCC_OscConfig+0x82>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8011f20:	f7fe f886 	bl	8010030 <HAL_GetTick>
 8011f24:	1b40      	subs	r0, r0, r5
 8011f26:	2864      	cmp	r0, #100	; 0x64
 8011f28:	d9f7      	bls.n	8011f1a <HAL_RCC_OscConfig+0x15e>
            return HAL_TIMEOUT;
 8011f2a:	2003      	movs	r0, #3
 8011f2c:	e77b      	b.n	8011e26 <HAL_RCC_OscConfig+0x6a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8011f2e:	4b65      	ldr	r3, [pc, #404]	; (80120c4 <HAL_RCC_OscConfig+0x308>)
 8011f30:	685b      	ldr	r3, [r3, #4]
 8011f32:	22c0      	movs	r2, #192	; 0xc0
 8011f34:	0252      	lsls	r2, r2, #9
 8011f36:	4013      	ands	r3, r2
 8011f38:	2280      	movs	r2, #128	; 0x80
 8011f3a:	0212      	lsls	r2, r2, #8
 8011f3c:	4293      	cmp	r3, r2
 8011f3e:	d18d      	bne.n	8011e5c <HAL_RCC_OscConfig+0xa0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8011f40:	4b60      	ldr	r3, [pc, #384]	; (80120c4 <HAL_RCC_OscConfig+0x308>)
 8011f42:	681b      	ldr	r3, [r3, #0]
 8011f44:	079b      	lsls	r3, r3, #30
 8011f46:	d504      	bpl.n	8011f52 <HAL_RCC_OscConfig+0x196>
        return HAL_ERROR;
 8011f48:	2001      	movs	r0, #1
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8011f4a:	68e3      	ldr	r3, [r4, #12]
 8011f4c:	2b01      	cmp	r3, #1
 8011f4e:	d000      	beq.n	8011f52 <HAL_RCC_OscConfig+0x196>
 8011f50:	e769      	b.n	8011e26 <HAL_RCC_OscConfig+0x6a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8011f52:	495c      	ldr	r1, [pc, #368]	; (80120c4 <HAL_RCC_OscConfig+0x308>)
 8011f54:	680a      	ldr	r2, [r1, #0]
 8011f56:	6923      	ldr	r3, [r4, #16]
 8011f58:	00db      	lsls	r3, r3, #3
 8011f5a:	20f8      	movs	r0, #248	; 0xf8
 8011f5c:	4382      	bics	r2, r0
 8011f5e:	4313      	orrs	r3, r2
 8011f60:	600b      	str	r3, [r1, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8011f62:	6823      	ldr	r3, [r4, #0]
 8011f64:	071b      	lsls	r3, r3, #28
 8011f66:	d547      	bpl.n	8011ff8 <HAL_RCC_OscConfig+0x23c>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8011f68:	6a23      	ldr	r3, [r4, #32]
 8011f6a:	2b00      	cmp	r3, #0
 8011f6c:	d030      	beq.n	8011fd0 <HAL_RCC_OscConfig+0x214>
      __HAL_RCC_LSI_ENABLE();
 8011f6e:	4a55      	ldr	r2, [pc, #340]	; (80120c4 <HAL_RCC_OscConfig+0x308>)
 8011f70:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8011f72:	2101      	movs	r1, #1
 8011f74:	430b      	orrs	r3, r1
 8011f76:	6253      	str	r3, [r2, #36]	; 0x24
      tickstart = HAL_GetTick();
 8011f78:	f7fe f85a 	bl	8010030 <HAL_GetTick>
 8011f7c:	0005      	movs	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8011f7e:	4f51      	ldr	r7, [pc, #324]	; (80120c4 <HAL_RCC_OscConfig+0x308>)
 8011f80:	2602      	movs	r6, #2
 8011f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f84:	421e      	tst	r6, r3
 8011f86:	d137      	bne.n	8011ff8 <HAL_RCC_OscConfig+0x23c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8011f88:	f7fe f852 	bl	8010030 <HAL_GetTick>
 8011f8c:	1b40      	subs	r0, r0, r5
 8011f8e:	2864      	cmp	r0, #100	; 0x64
 8011f90:	d9f7      	bls.n	8011f82 <HAL_RCC_OscConfig+0x1c6>
          return HAL_TIMEOUT;
 8011f92:	2003      	movs	r0, #3
 8011f94:	e747      	b.n	8011e26 <HAL_RCC_OscConfig+0x6a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8011f96:	494b      	ldr	r1, [pc, #300]	; (80120c4 <HAL_RCC_OscConfig+0x308>)
 8011f98:	680a      	ldr	r2, [r1, #0]
 8011f9a:	6923      	ldr	r3, [r4, #16]
 8011f9c:	00db      	lsls	r3, r3, #3
 8011f9e:	20f8      	movs	r0, #248	; 0xf8
 8011fa0:	4382      	bics	r2, r0
 8011fa2:	4313      	orrs	r3, r2
 8011fa4:	600b      	str	r3, [r1, #0]
 8011fa6:	e7dc      	b.n	8011f62 <HAL_RCC_OscConfig+0x1a6>
        __HAL_RCC_HSI_DISABLE();
 8011fa8:	4a46      	ldr	r2, [pc, #280]	; (80120c4 <HAL_RCC_OscConfig+0x308>)
 8011faa:	6813      	ldr	r3, [r2, #0]
 8011fac:	2101      	movs	r1, #1
 8011fae:	438b      	bics	r3, r1
 8011fb0:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8011fb2:	f7fe f83d 	bl	8010030 <HAL_GetTick>
 8011fb6:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8011fb8:	4f42      	ldr	r7, [pc, #264]	; (80120c4 <HAL_RCC_OscConfig+0x308>)
 8011fba:	2602      	movs	r6, #2
 8011fbc:	683b      	ldr	r3, [r7, #0]
 8011fbe:	421e      	tst	r6, r3
 8011fc0:	d0cf      	beq.n	8011f62 <HAL_RCC_OscConfig+0x1a6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8011fc2:	f7fe f835 	bl	8010030 <HAL_GetTick>
 8011fc6:	1b40      	subs	r0, r0, r5
 8011fc8:	2864      	cmp	r0, #100	; 0x64
 8011fca:	d9f7      	bls.n	8011fbc <HAL_RCC_OscConfig+0x200>
            return HAL_TIMEOUT;
 8011fcc:	2003      	movs	r0, #3
 8011fce:	e72a      	b.n	8011e26 <HAL_RCC_OscConfig+0x6a>
      __HAL_RCC_LSI_DISABLE();
 8011fd0:	4a3c      	ldr	r2, [pc, #240]	; (80120c4 <HAL_RCC_OscConfig+0x308>)
 8011fd2:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8011fd4:	2101      	movs	r1, #1
 8011fd6:	438b      	bics	r3, r1
 8011fd8:	6253      	str	r3, [r2, #36]	; 0x24
      tickstart = HAL_GetTick();
 8011fda:	f7fe f829 	bl	8010030 <HAL_GetTick>
 8011fde:	0005      	movs	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8011fe0:	4f38      	ldr	r7, [pc, #224]	; (80120c4 <HAL_RCC_OscConfig+0x308>)
 8011fe2:	2602      	movs	r6, #2
 8011fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011fe6:	421e      	tst	r6, r3
 8011fe8:	d006      	beq.n	8011ff8 <HAL_RCC_OscConfig+0x23c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8011fea:	f7fe f821 	bl	8010030 <HAL_GetTick>
 8011fee:	1b40      	subs	r0, r0, r5
 8011ff0:	2864      	cmp	r0, #100	; 0x64
 8011ff2:	d9f7      	bls.n	8011fe4 <HAL_RCC_OscConfig+0x228>
          return HAL_TIMEOUT;
 8011ff4:	2003      	movs	r0, #3
 8011ff6:	e716      	b.n	8011e26 <HAL_RCC_OscConfig+0x6a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8011ff8:	6823      	ldr	r3, [r4, #0]
 8011ffa:	075b      	lsls	r3, r3, #29
 8011ffc:	d442      	bmi.n	8012084 <HAL_RCC_OscConfig+0x2c8>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8011ffe:	6823      	ldr	r3, [r4, #0]
 8012000:	06db      	lsls	r3, r3, #27
 8012002:	d512      	bpl.n	801202a <HAL_RCC_OscConfig+0x26e>
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8012004:	6963      	ldr	r3, [r4, #20]
 8012006:	2b01      	cmp	r3, #1
 8012008:	d100      	bne.n	801200c <HAL_RCC_OscConfig+0x250>
 801200a:	e0ce      	b.n	80121aa <HAL_RCC_OscConfig+0x3ee>
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 801200c:	3305      	adds	r3, #5
 801200e:	d000      	beq.n	8012012 <HAL_RCC_OscConfig+0x256>
 8012010:	e0ec      	b.n	80121ec <HAL_RCC_OscConfig+0x430>
      __HAL_RCC_HSI14ADC_ENABLE();
 8012012:	4a2c      	ldr	r2, [pc, #176]	; (80120c4 <HAL_RCC_OscConfig+0x308>)
 8012014:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8012016:	2104      	movs	r1, #4
 8012018:	438b      	bics	r3, r1
 801201a:	6353      	str	r3, [r2, #52]	; 0x34
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 801201c:	6b51      	ldr	r1, [r2, #52]	; 0x34
 801201e:	69a3      	ldr	r3, [r4, #24]
 8012020:	00db      	lsls	r3, r3, #3
 8012022:	20f8      	movs	r0, #248	; 0xf8
 8012024:	4381      	bics	r1, r0
 8012026:	430b      	orrs	r3, r1
 8012028:	6353      	str	r3, [r2, #52]	; 0x34
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 801202a:	6823      	ldr	r3, [r4, #0]
 801202c:	069b      	lsls	r3, r3, #26
 801202e:	d400      	bmi.n	8012032 <HAL_RCC_OscConfig+0x276>
 8012030:	e106      	b.n	8012240 <HAL_RCC_OscConfig+0x484>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8012032:	4b24      	ldr	r3, [pc, #144]	; (80120c4 <HAL_RCC_OscConfig+0x308>)
 8012034:	685a      	ldr	r2, [r3, #4]
 8012036:	230c      	movs	r3, #12
 8012038:	4013      	ands	r3, r2
 801203a:	2b0c      	cmp	r3, #12
 801203c:	d100      	bne.n	8012040 <HAL_RCC_OscConfig+0x284>
 801203e:	e0f6      	b.n	801222e <HAL_RCC_OscConfig+0x472>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8012040:	4b20      	ldr	r3, [pc, #128]	; (80120c4 <HAL_RCC_OscConfig+0x308>)
 8012042:	685a      	ldr	r2, [r3, #4]
 8012044:	230c      	movs	r3, #12
 8012046:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8012048:	2b08      	cmp	r3, #8
 801204a:	d100      	bne.n	801204e <HAL_RCC_OscConfig+0x292>
 801204c:	e0e7      	b.n	801221e <HAL_RCC_OscConfig+0x462>
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 801204e:	69e3      	ldr	r3, [r4, #28]
 8012050:	2b00      	cmp	r3, #0
 8012052:	d100      	bne.n	8012056 <HAL_RCC_OscConfig+0x29a>
 8012054:	e116      	b.n	8012284 <HAL_RCC_OscConfig+0x4c8>
        __HAL_RCC_HSI48_ENABLE();
 8012056:	4a1b      	ldr	r2, [pc, #108]	; (80120c4 <HAL_RCC_OscConfig+0x308>)
 8012058:	6b51      	ldr	r1, [r2, #52]	; 0x34
 801205a:	2380      	movs	r3, #128	; 0x80
 801205c:	025b      	lsls	r3, r3, #9
 801205e:	430b      	orrs	r3, r1
 8012060:	6353      	str	r3, [r2, #52]	; 0x34
        tickstart = HAL_GetTick();
 8012062:	f7fd ffe5 	bl	8010030 <HAL_GetTick>
 8012066:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8012068:	4f16      	ldr	r7, [pc, #88]	; (80120c4 <HAL_RCC_OscConfig+0x308>)
 801206a:	2680      	movs	r6, #128	; 0x80
 801206c:	0276      	lsls	r6, r6, #9
 801206e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012070:	4233      	tst	r3, r6
 8012072:	d000      	beq.n	8012076 <HAL_RCC_OscConfig+0x2ba>
 8012074:	e0e4      	b.n	8012240 <HAL_RCC_OscConfig+0x484>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8012076:	f7fd ffdb 	bl	8010030 <HAL_GetTick>
 801207a:	1b40      	subs	r0, r0, r5
 801207c:	2864      	cmp	r0, #100	; 0x64
 801207e:	d9f6      	bls.n	801206e <HAL_RCC_OscConfig+0x2b2>
            return HAL_TIMEOUT;
 8012080:	2003      	movs	r0, #3
 8012082:	e6d0      	b.n	8011e26 <HAL_RCC_OscConfig+0x6a>
    __HAL_RCC_PWR_CLK_ENABLE();
 8012084:	4a0f      	ldr	r2, [pc, #60]	; (80120c4 <HAL_RCC_OscConfig+0x308>)
 8012086:	69d1      	ldr	r1, [r2, #28]
 8012088:	2080      	movs	r0, #128	; 0x80
 801208a:	0540      	lsls	r0, r0, #21
 801208c:	4301      	orrs	r1, r0
 801208e:	61d1      	str	r1, [r2, #28]
 8012090:	69d3      	ldr	r3, [r2, #28]
 8012092:	4003      	ands	r3, r0
 8012094:	9301      	str	r3, [sp, #4]
 8012096:	9b01      	ldr	r3, [sp, #4]
    SET_BIT(PWR->CR, PWR_CR_DBP);
 8012098:	4a0d      	ldr	r2, [pc, #52]	; (80120d0 <HAL_RCC_OscConfig+0x314>)
 801209a:	6811      	ldr	r1, [r2, #0]
 801209c:	2380      	movs	r3, #128	; 0x80
 801209e:	005b      	lsls	r3, r3, #1
 80120a0:	430b      	orrs	r3, r1
 80120a2:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80120a4:	f7fd ffc4 	bl	8010030 <HAL_GetTick>
 80120a8:	0005      	movs	r5, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80120aa:	4f09      	ldr	r7, [pc, #36]	; (80120d0 <HAL_RCC_OscConfig+0x314>)
 80120ac:	2680      	movs	r6, #128	; 0x80
 80120ae:	0076      	lsls	r6, r6, #1
 80120b0:	683b      	ldr	r3, [r7, #0]
 80120b2:	4233      	tst	r3, r6
 80120b4:	d10e      	bne.n	80120d4 <HAL_RCC_OscConfig+0x318>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80120b6:	f7fd ffbb 	bl	8010030 <HAL_GetTick>
 80120ba:	1b40      	subs	r0, r0, r5
 80120bc:	2864      	cmp	r0, #100	; 0x64
 80120be:	d9f7      	bls.n	80120b0 <HAL_RCC_OscConfig+0x2f4>
        return HAL_TIMEOUT;
 80120c0:	2003      	movs	r0, #3
 80120c2:	e6b0      	b.n	8011e26 <HAL_RCC_OscConfig+0x6a>
 80120c4:	40021000 	.word	0x40021000
 80120c8:	fffeffff 	.word	0xfffeffff
 80120cc:	fffbffff 	.word	0xfffbffff
 80120d0:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_LSE_OFF);
 80120d4:	4b96      	ldr	r3, [pc, #600]	; (8012330 <HAL_RCC_OscConfig+0x574>)
 80120d6:	6a1a      	ldr	r2, [r3, #32]
 80120d8:	2101      	movs	r1, #1
 80120da:	438a      	bics	r2, r1
 80120dc:	621a      	str	r2, [r3, #32]
 80120de:	6a1a      	ldr	r2, [r3, #32]
 80120e0:	3103      	adds	r1, #3
 80120e2:	438a      	bics	r2, r1
 80120e4:	621a      	str	r2, [r3, #32]
    tickstart = HAL_GetTick();
 80120e6:	f7fd ffa3 	bl	8010030 <HAL_GetTick>
 80120ea:	0005      	movs	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80120ec:	4f90      	ldr	r7, [pc, #576]	; (8012330 <HAL_RCC_OscConfig+0x574>)
 80120ee:	2602      	movs	r6, #2
      if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80120f0:	4b90      	ldr	r3, [pc, #576]	; (8012334 <HAL_RCC_OscConfig+0x578>)
 80120f2:	4698      	mov	r8, r3
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80120f4:	6a3b      	ldr	r3, [r7, #32]
 80120f6:	421e      	tst	r6, r3
 80120f8:	d006      	beq.n	8012108 <HAL_RCC_OscConfig+0x34c>
      if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80120fa:	f7fd ff99 	bl	8010030 <HAL_GetTick>
 80120fe:	1b40      	subs	r0, r0, r5
 8012100:	4540      	cmp	r0, r8
 8012102:	d9f7      	bls.n	80120f4 <HAL_RCC_OscConfig+0x338>
        return HAL_TIMEOUT;
 8012104:	2003      	movs	r0, #3
 8012106:	e68e      	b.n	8011e26 <HAL_RCC_OscConfig+0x6a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8012108:	68a3      	ldr	r3, [r4, #8]
 801210a:	2b01      	cmp	r3, #1
 801210c:	d00b      	beq.n	8012126 <HAL_RCC_OscConfig+0x36a>
 801210e:	2b00      	cmp	r3, #0
 8012110:	d123      	bne.n	801215a <HAL_RCC_OscConfig+0x39e>
 8012112:	4b87      	ldr	r3, [pc, #540]	; (8012330 <HAL_RCC_OscConfig+0x574>)
 8012114:	6a1a      	ldr	r2, [r3, #32]
 8012116:	2101      	movs	r1, #1
 8012118:	438a      	bics	r2, r1
 801211a:	621a      	str	r2, [r3, #32]
 801211c:	6a1a      	ldr	r2, [r3, #32]
 801211e:	3103      	adds	r1, #3
 8012120:	438a      	bics	r2, r1
 8012122:	621a      	str	r2, [r3, #32]
 8012124:	e004      	b.n	8012130 <HAL_RCC_OscConfig+0x374>
 8012126:	4a82      	ldr	r2, [pc, #520]	; (8012330 <HAL_RCC_OscConfig+0x574>)
 8012128:	6a13      	ldr	r3, [r2, #32]
 801212a:	2101      	movs	r1, #1
 801212c:	430b      	orrs	r3, r1
 801212e:	6213      	str	r3, [r2, #32]
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8012130:	68a3      	ldr	r3, [r4, #8]
 8012132:	2b00      	cmp	r3, #0
 8012134:	d027      	beq.n	8012186 <HAL_RCC_OscConfig+0x3ca>
      tickstart = HAL_GetTick();
 8012136:	f7fd ff7b 	bl	8010030 <HAL_GetTick>
 801213a:	0005      	movs	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801213c:	4f7c      	ldr	r7, [pc, #496]	; (8012330 <HAL_RCC_OscConfig+0x574>)
 801213e:	2602      	movs	r6, #2
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8012140:	4b7c      	ldr	r3, [pc, #496]	; (8012334 <HAL_RCC_OscConfig+0x578>)
 8012142:	4698      	mov	r8, r3
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8012144:	6a3b      	ldr	r3, [r7, #32]
 8012146:	421e      	tst	r6, r3
 8012148:	d000      	beq.n	801214c <HAL_RCC_OscConfig+0x390>
 801214a:	e758      	b.n	8011ffe <HAL_RCC_OscConfig+0x242>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801214c:	f7fd ff70 	bl	8010030 <HAL_GetTick>
 8012150:	1b40      	subs	r0, r0, r5
 8012152:	4540      	cmp	r0, r8
 8012154:	d9f6      	bls.n	8012144 <HAL_RCC_OscConfig+0x388>
          return HAL_TIMEOUT;
 8012156:	2003      	movs	r0, #3
 8012158:	e665      	b.n	8011e26 <HAL_RCC_OscConfig+0x6a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801215a:	2b05      	cmp	r3, #5
 801215c:	d009      	beq.n	8012172 <HAL_RCC_OscConfig+0x3b6>
 801215e:	4b74      	ldr	r3, [pc, #464]	; (8012330 <HAL_RCC_OscConfig+0x574>)
 8012160:	6a1a      	ldr	r2, [r3, #32]
 8012162:	2101      	movs	r1, #1
 8012164:	438a      	bics	r2, r1
 8012166:	621a      	str	r2, [r3, #32]
 8012168:	6a1a      	ldr	r2, [r3, #32]
 801216a:	3103      	adds	r1, #3
 801216c:	438a      	bics	r2, r1
 801216e:	621a      	str	r2, [r3, #32]
 8012170:	e7de      	b.n	8012130 <HAL_RCC_OscConfig+0x374>
 8012172:	4b6f      	ldr	r3, [pc, #444]	; (8012330 <HAL_RCC_OscConfig+0x574>)
 8012174:	6a1a      	ldr	r2, [r3, #32]
 8012176:	2104      	movs	r1, #4
 8012178:	430a      	orrs	r2, r1
 801217a:	621a      	str	r2, [r3, #32]
 801217c:	6a1a      	ldr	r2, [r3, #32]
 801217e:	3903      	subs	r1, #3
 8012180:	430a      	orrs	r2, r1
 8012182:	621a      	str	r2, [r3, #32]
 8012184:	e7d4      	b.n	8012130 <HAL_RCC_OscConfig+0x374>
      tickstart = HAL_GetTick();
 8012186:	f7fd ff53 	bl	8010030 <HAL_GetTick>
 801218a:	0005      	movs	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 801218c:	4f68      	ldr	r7, [pc, #416]	; (8012330 <HAL_RCC_OscConfig+0x574>)
 801218e:	2602      	movs	r6, #2
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8012190:	4b68      	ldr	r3, [pc, #416]	; (8012334 <HAL_RCC_OscConfig+0x578>)
 8012192:	4698      	mov	r8, r3
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8012194:	6a3b      	ldr	r3, [r7, #32]
 8012196:	421e      	tst	r6, r3
 8012198:	d100      	bne.n	801219c <HAL_RCC_OscConfig+0x3e0>
 801219a:	e730      	b.n	8011ffe <HAL_RCC_OscConfig+0x242>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801219c:	f7fd ff48 	bl	8010030 <HAL_GetTick>
 80121a0:	1b40      	subs	r0, r0, r5
 80121a2:	4540      	cmp	r0, r8
 80121a4:	d9f6      	bls.n	8012194 <HAL_RCC_OscConfig+0x3d8>
          return HAL_TIMEOUT;
 80121a6:	2003      	movs	r0, #3
 80121a8:	e63d      	b.n	8011e26 <HAL_RCC_OscConfig+0x6a>
      __HAL_RCC_HSI14ADC_DISABLE();
 80121aa:	4b61      	ldr	r3, [pc, #388]	; (8012330 <HAL_RCC_OscConfig+0x574>)
 80121ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80121ae:	2104      	movs	r1, #4
 80121b0:	430a      	orrs	r2, r1
 80121b2:	635a      	str	r2, [r3, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 80121b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80121b6:	3903      	subs	r1, #3
 80121b8:	430a      	orrs	r2, r1
 80121ba:	635a      	str	r2, [r3, #52]	; 0x34
      tickstart = HAL_GetTick();
 80121bc:	f7fd ff38 	bl	8010030 <HAL_GetTick>
 80121c0:	0005      	movs	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80121c2:	4f5b      	ldr	r7, [pc, #364]	; (8012330 <HAL_RCC_OscConfig+0x574>)
 80121c4:	2602      	movs	r6, #2
 80121c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80121c8:	421e      	tst	r6, r3
 80121ca:	d106      	bne.n	80121da <HAL_RCC_OscConfig+0x41e>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80121cc:	f7fd ff30 	bl	8010030 <HAL_GetTick>
 80121d0:	1b40      	subs	r0, r0, r5
 80121d2:	2864      	cmp	r0, #100	; 0x64
 80121d4:	d9f7      	bls.n	80121c6 <HAL_RCC_OscConfig+0x40a>
          return HAL_TIMEOUT;
 80121d6:	2003      	movs	r0, #3
 80121d8:	e625      	b.n	8011e26 <HAL_RCC_OscConfig+0x6a>
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80121da:	4955      	ldr	r1, [pc, #340]	; (8012330 <HAL_RCC_OscConfig+0x574>)
 80121dc:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 80121de:	69a3      	ldr	r3, [r4, #24]
 80121e0:	00db      	lsls	r3, r3, #3
 80121e2:	20f8      	movs	r0, #248	; 0xf8
 80121e4:	4382      	bics	r2, r0
 80121e6:	4313      	orrs	r3, r2
 80121e8:	634b      	str	r3, [r1, #52]	; 0x34
 80121ea:	e71e      	b.n	801202a <HAL_RCC_OscConfig+0x26e>
      __HAL_RCC_HSI14ADC_DISABLE();
 80121ec:	4b50      	ldr	r3, [pc, #320]	; (8012330 <HAL_RCC_OscConfig+0x574>)
 80121ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80121f0:	2104      	movs	r1, #4
 80121f2:	430a      	orrs	r2, r1
 80121f4:	635a      	str	r2, [r3, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 80121f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80121f8:	3903      	subs	r1, #3
 80121fa:	438a      	bics	r2, r1
 80121fc:	635a      	str	r2, [r3, #52]	; 0x34
      tickstart = HAL_GetTick();
 80121fe:	f7fd ff17 	bl	8010030 <HAL_GetTick>
 8012202:	0005      	movs	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8012204:	4f4a      	ldr	r7, [pc, #296]	; (8012330 <HAL_RCC_OscConfig+0x574>)
 8012206:	2602      	movs	r6, #2
 8012208:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801220a:	421e      	tst	r6, r3
 801220c:	d100      	bne.n	8012210 <HAL_RCC_OscConfig+0x454>
 801220e:	e70c      	b.n	801202a <HAL_RCC_OscConfig+0x26e>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8012210:	f7fd ff0e 	bl	8010030 <HAL_GetTick>
 8012214:	1b40      	subs	r0, r0, r5
 8012216:	2864      	cmp	r0, #100	; 0x64
 8012218:	d9f6      	bls.n	8012208 <HAL_RCC_OscConfig+0x44c>
          return HAL_TIMEOUT;
 801221a:	2003      	movs	r0, #3
 801221c:	e603      	b.n	8011e26 <HAL_RCC_OscConfig+0x6a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 801221e:	4b44      	ldr	r3, [pc, #272]	; (8012330 <HAL_RCC_OscConfig+0x574>)
 8012220:	685b      	ldr	r3, [r3, #4]
 8012222:	22c0      	movs	r2, #192	; 0xc0
 8012224:	0252      	lsls	r2, r2, #9
 8012226:	4013      	ands	r3, r2
 8012228:	4293      	cmp	r3, r2
 801222a:	d000      	beq.n	801222e <HAL_RCC_OscConfig+0x472>
 801222c:	e70f      	b.n	801204e <HAL_RCC_OscConfig+0x292>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 801222e:	4b40      	ldr	r3, [pc, #256]	; (8012330 <HAL_RCC_OscConfig+0x574>)
 8012230:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012232:	03db      	lsls	r3, r3, #15
 8012234:	d504      	bpl.n	8012240 <HAL_RCC_OscConfig+0x484>
        return HAL_ERROR;
 8012236:	2001      	movs	r0, #1
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8012238:	69e3      	ldr	r3, [r4, #28]
 801223a:	2b01      	cmp	r3, #1
 801223c:	d000      	beq.n	8012240 <HAL_RCC_OscConfig+0x484>
 801223e:	e5f2      	b.n	8011e26 <HAL_RCC_OscConfig+0x6a>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8012240:	6a63      	ldr	r3, [r4, #36]	; 0x24
  return HAL_OK;
 8012242:	2000      	movs	r0, #0
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8012244:	2b00      	cmp	r3, #0
 8012246:	d100      	bne.n	801224a <HAL_RCC_OscConfig+0x48e>
 8012248:	e5ed      	b.n	8011e26 <HAL_RCC_OscConfig+0x6a>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 801224a:	4a39      	ldr	r2, [pc, #228]	; (8012330 <HAL_RCC_OscConfig+0x574>)
 801224c:	6851      	ldr	r1, [r2, #4]
 801224e:	220c      	movs	r2, #12
 8012250:	400a      	ands	r2, r1
 8012252:	2a08      	cmp	r2, #8
 8012254:	d06a      	beq.n	801232c <HAL_RCC_OscConfig+0x570>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8012256:	2b02      	cmp	r3, #2
 8012258:	d029      	beq.n	80122ae <HAL_RCC_OscConfig+0x4f2>
        __HAL_RCC_PLL_DISABLE();
 801225a:	4a35      	ldr	r2, [pc, #212]	; (8012330 <HAL_RCC_OscConfig+0x574>)
 801225c:	6813      	ldr	r3, [r2, #0]
 801225e:	4936      	ldr	r1, [pc, #216]	; (8012338 <HAL_RCC_OscConfig+0x57c>)
 8012260:	400b      	ands	r3, r1
 8012262:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8012264:	f7fd fee4 	bl	8010030 <HAL_GetTick>
 8012268:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 801226a:	4e31      	ldr	r6, [pc, #196]	; (8012330 <HAL_RCC_OscConfig+0x574>)
 801226c:	2580      	movs	r5, #128	; 0x80
 801226e:	04ad      	lsls	r5, r5, #18
 8012270:	6833      	ldr	r3, [r6, #0]
 8012272:	422b      	tst	r3, r5
 8012274:	d056      	beq.n	8012324 <HAL_RCC_OscConfig+0x568>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8012276:	f7fd fedb 	bl	8010030 <HAL_GetTick>
 801227a:	1b00      	subs	r0, r0, r4
 801227c:	2864      	cmp	r0, #100	; 0x64
 801227e:	d9f7      	bls.n	8012270 <HAL_RCC_OscConfig+0x4b4>
            return HAL_TIMEOUT;
 8012280:	2003      	movs	r0, #3
 8012282:	e5d0      	b.n	8011e26 <HAL_RCC_OscConfig+0x6a>
        __HAL_RCC_HSI48_DISABLE();
 8012284:	4a2a      	ldr	r2, [pc, #168]	; (8012330 <HAL_RCC_OscConfig+0x574>)
 8012286:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8012288:	492c      	ldr	r1, [pc, #176]	; (801233c <HAL_RCC_OscConfig+0x580>)
 801228a:	400b      	ands	r3, r1
 801228c:	6353      	str	r3, [r2, #52]	; 0x34
        tickstart = HAL_GetTick();
 801228e:	f7fd fecf 	bl	8010030 <HAL_GetTick>
 8012292:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8012294:	4f26      	ldr	r7, [pc, #152]	; (8012330 <HAL_RCC_OscConfig+0x574>)
 8012296:	2680      	movs	r6, #128	; 0x80
 8012298:	0276      	lsls	r6, r6, #9
 801229a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801229c:	4233      	tst	r3, r6
 801229e:	d0cf      	beq.n	8012240 <HAL_RCC_OscConfig+0x484>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80122a0:	f7fd fec6 	bl	8010030 <HAL_GetTick>
 80122a4:	1b40      	subs	r0, r0, r5
 80122a6:	2864      	cmp	r0, #100	; 0x64
 80122a8:	d9f7      	bls.n	801229a <HAL_RCC_OscConfig+0x4de>
            return HAL_TIMEOUT;
 80122aa:	2003      	movs	r0, #3
 80122ac:	e5bb      	b.n	8011e26 <HAL_RCC_OscConfig+0x6a>
        __HAL_RCC_PLL_DISABLE();
 80122ae:	4a20      	ldr	r2, [pc, #128]	; (8012330 <HAL_RCC_OscConfig+0x574>)
 80122b0:	6813      	ldr	r3, [r2, #0]
 80122b2:	4921      	ldr	r1, [pc, #132]	; (8012338 <HAL_RCC_OscConfig+0x57c>)
 80122b4:	400b      	ands	r3, r1
 80122b6:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80122b8:	f7fd feba 	bl	8010030 <HAL_GetTick>
 80122bc:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80122be:	4f1c      	ldr	r7, [pc, #112]	; (8012330 <HAL_RCC_OscConfig+0x574>)
 80122c0:	2680      	movs	r6, #128	; 0x80
 80122c2:	04b6      	lsls	r6, r6, #18
 80122c4:	683b      	ldr	r3, [r7, #0]
 80122c6:	4233      	tst	r3, r6
 80122c8:	d006      	beq.n	80122d8 <HAL_RCC_OscConfig+0x51c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80122ca:	f7fd feb1 	bl	8010030 <HAL_GetTick>
 80122ce:	1b40      	subs	r0, r0, r5
 80122d0:	2864      	cmp	r0, #100	; 0x64
 80122d2:	d9f7      	bls.n	80122c4 <HAL_RCC_OscConfig+0x508>
            return HAL_TIMEOUT;
 80122d4:	2003      	movs	r0, #3
 80122d6:	e5a6      	b.n	8011e26 <HAL_RCC_OscConfig+0x6a>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80122d8:	4b15      	ldr	r3, [pc, #84]	; (8012330 <HAL_RCC_OscConfig+0x574>)
 80122da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80122dc:	210f      	movs	r1, #15
 80122de:	438a      	bics	r2, r1
 80122e0:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80122e2:	430a      	orrs	r2, r1
 80122e4:	62da      	str	r2, [r3, #44]	; 0x2c
 80122e6:	6859      	ldr	r1, [r3, #4]
 80122e8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80122ea:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80122ec:	4302      	orrs	r2, r0
 80122ee:	4814      	ldr	r0, [pc, #80]	; (8012340 <HAL_RCC_OscConfig+0x584>)
 80122f0:	4001      	ands	r1, r0
 80122f2:	430a      	orrs	r2, r1
 80122f4:	605a      	str	r2, [r3, #4]
        __HAL_RCC_PLL_ENABLE();
 80122f6:	6819      	ldr	r1, [r3, #0]
 80122f8:	2280      	movs	r2, #128	; 0x80
 80122fa:	0452      	lsls	r2, r2, #17
 80122fc:	430a      	orrs	r2, r1
 80122fe:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8012300:	f7fd fe96 	bl	8010030 <HAL_GetTick>
 8012304:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8012306:	4e0a      	ldr	r6, [pc, #40]	; (8012330 <HAL_RCC_OscConfig+0x574>)
 8012308:	2580      	movs	r5, #128	; 0x80
 801230a:	04ad      	lsls	r5, r5, #18
 801230c:	6833      	ldr	r3, [r6, #0]
 801230e:	422b      	tst	r3, r5
 8012310:	d106      	bne.n	8012320 <HAL_RCC_OscConfig+0x564>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8012312:	f7fd fe8d 	bl	8010030 <HAL_GetTick>
 8012316:	1b00      	subs	r0, r0, r4
 8012318:	2864      	cmp	r0, #100	; 0x64
 801231a:	d9f7      	bls.n	801230c <HAL_RCC_OscConfig+0x550>
            return HAL_TIMEOUT;
 801231c:	2003      	movs	r0, #3
 801231e:	e582      	b.n	8011e26 <HAL_RCC_OscConfig+0x6a>
  return HAL_OK;
 8012320:	2000      	movs	r0, #0
 8012322:	e580      	b.n	8011e26 <HAL_RCC_OscConfig+0x6a>
 8012324:	2000      	movs	r0, #0
 8012326:	e57e      	b.n	8011e26 <HAL_RCC_OscConfig+0x6a>
        return HAL_ERROR;
 8012328:	2001      	movs	r0, #1
 801232a:	e57c      	b.n	8011e26 <HAL_RCC_OscConfig+0x6a>
      return HAL_ERROR;
 801232c:	2001      	movs	r0, #1
 801232e:	e57a      	b.n	8011e26 <HAL_RCC_OscConfig+0x6a>
 8012330:	40021000 	.word	0x40021000
 8012334:	00001388 	.word	0x00001388
 8012338:	feffffff 	.word	0xfeffffff
 801233c:	fffeffff 	.word	0xfffeffff
 8012340:	ffc27fff 	.word	0xffc27fff

08012344 <HAL_RCC_ClockConfig>:
  *         You can use HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8012344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012346:	46ce      	mov	lr, r9
 8012348:	4647      	mov	r7, r8
 801234a:	b580      	push	{r7, lr}
 801234c:	0004      	movs	r4, r0
 801234e:	000d      	movs	r5, r1
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */
  
  /* Increasing the CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8012350:	4b96      	ldr	r3, [pc, #600]	; (80125ac <HAL_RCC_ClockConfig+0x268>)
 8012352:	681a      	ldr	r2, [r3, #0]
 8012354:	2301      	movs	r3, #1
 8012356:	4013      	ands	r3, r2
 8012358:	428b      	cmp	r3, r1
 801235a:	d300      	bcc.n	801235e <HAL_RCC_ClockConfig+0x1a>
 801235c:	e086      	b.n	801246c <HAL_RCC_ClockConfig+0x128>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801235e:	4993      	ldr	r1, [pc, #588]	; (80125ac <HAL_RCC_ClockConfig+0x268>)
 8012360:	680b      	ldr	r3, [r1, #0]
 8012362:	2201      	movs	r2, #1
 8012364:	4393      	bics	r3, r2
 8012366:	432b      	orrs	r3, r5
 8012368:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 801236a:	680b      	ldr	r3, [r1, #0]
 801236c:	401a      	ands	r2, r3
    {
      return HAL_ERROR;
 801236e:	2001      	movs	r0, #1
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8012370:	42aa      	cmp	r2, r5
 8012372:	d000      	beq.n	8012376 <HAL_RCC_ClockConfig+0x32>
 8012374:	e111      	b.n	801259a <HAL_RCC_ClockConfig+0x256>
    }
    
    /*-------------------------- HCLK Configuration --------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8012376:	6823      	ldr	r3, [r4, #0]
 8012378:	079b      	lsls	r3, r3, #30
 801237a:	d506      	bpl.n	801238a <HAL_RCC_ClockConfig+0x46>
    {
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801237c:	4a8c      	ldr	r2, [pc, #560]	; (80125b0 <HAL_RCC_ClockConfig+0x26c>)
 801237e:	6853      	ldr	r3, [r2, #4]
 8012380:	21f0      	movs	r1, #240	; 0xf0
 8012382:	438b      	bics	r3, r1
 8012384:	68a1      	ldr	r1, [r4, #8]
 8012386:	430b      	orrs	r3, r1
 8012388:	6053      	str	r3, [r2, #4]
    }

    /*------------------------- SYSCLK Configuration ---------------------------*/ 
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801238a:	6823      	ldr	r3, [r4, #0]
 801238c:	07db      	lsls	r3, r3, #31
 801238e:	d400      	bmi.n	8012392 <HAL_RCC_ClockConfig+0x4e>
 8012390:	e0f5      	b.n	801257e <HAL_RCC_ClockConfig+0x23a>
    {    
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
      
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8012392:	6862      	ldr	r2, [r4, #4]
 8012394:	2a01      	cmp	r2, #1
 8012396:	d009      	beq.n	80123ac <HAL_RCC_ClockConfig+0x68>
        {
          return HAL_ERROR;
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8012398:	2a02      	cmp	r2, #2
 801239a:	d02b      	beq.n	80123f4 <HAL_RCC_ClockConfig+0xb0>
          return HAL_ERROR;
        }
      }
#if defined(RCC_CR2_HSI48ON)
      /* HSI48 is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 801239c:	2a03      	cmp	r2, #3
 801239e:	d02f      	beq.n	8012400 <HAL_RCC_ClockConfig+0xbc>
#endif /* RCC_CR2_HSI48ON */
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80123a0:	4b83      	ldr	r3, [pc, #524]	; (80125b0 <HAL_RCC_ClockConfig+0x26c>)
 80123a2:	681b      	ldr	r3, [r3, #0]
 80123a4:	079b      	lsls	r3, r3, #30
 80123a6:	d406      	bmi.n	80123b6 <HAL_RCC_ClockConfig+0x72>
        {
          return HAL_ERROR;
 80123a8:	2001      	movs	r0, #1
 80123aa:	e0f6      	b.n	801259a <HAL_RCC_ClockConfig+0x256>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80123ac:	4b80      	ldr	r3, [pc, #512]	; (80125b0 <HAL_RCC_ClockConfig+0x26c>)
 80123ae:	681b      	ldr	r3, [r3, #0]
 80123b0:	039b      	lsls	r3, r3, #14
 80123b2:	d400      	bmi.n	80123b6 <HAL_RCC_ClockConfig+0x72>
 80123b4:	e0f5      	b.n	80125a2 <HAL_RCC_ClockConfig+0x25e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80123b6:	497e      	ldr	r1, [pc, #504]	; (80125b0 <HAL_RCC_ClockConfig+0x26c>)
 80123b8:	684b      	ldr	r3, [r1, #4]
 80123ba:	2003      	movs	r0, #3
 80123bc:	4383      	bics	r3, r0
 80123be:	4313      	orrs	r3, r2
 80123c0:	604b      	str	r3, [r1, #4]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80123c2:	f7fd fe35 	bl	8010030 <HAL_GetTick>
 80123c6:	0005      	movs	r5, r0
      
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80123c8:	6863      	ldr	r3, [r4, #4]
 80123ca:	2b01      	cmp	r3, #1
 80123cc:	d01e      	beq.n	801240c <HAL_RCC_ClockConfig+0xc8>
          {
            return HAL_TIMEOUT;
          }
        }
      }
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80123ce:	2b02      	cmp	r3, #2
 80123d0:	d02c      	beq.n	801242c <HAL_RCC_ClockConfig+0xe8>
            return HAL_TIMEOUT;
          }
        }
      }
#if defined(RCC_CR2_HSI48ON)
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80123d2:	2b03      	cmp	r3, #3
 80123d4:	d03a      	beq.n	801244c <HAL_RCC_ClockConfig+0x108>
        }
      }
#endif /* RCC_CR2_HSI48ON */
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80123d6:	4f76      	ldr	r7, [pc, #472]	; (80125b0 <HAL_RCC_ClockConfig+0x26c>)
 80123d8:	260c      	movs	r6, #12
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80123da:	4b76      	ldr	r3, [pc, #472]	; (80125b4 <HAL_RCC_ClockConfig+0x270>)
 80123dc:	4698      	mov	r8, r3
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80123de:	687b      	ldr	r3, [r7, #4]
 80123e0:	421e      	tst	r6, r3
 80123e2:	d100      	bne.n	80123e6 <HAL_RCC_ClockConfig+0xa2>
 80123e4:	e0cb      	b.n	801257e <HAL_RCC_ClockConfig+0x23a>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80123e6:	f7fd fe23 	bl	8010030 <HAL_GetTick>
 80123ea:	1b40      	subs	r0, r0, r5
 80123ec:	4540      	cmp	r0, r8
 80123ee:	d9f6      	bls.n	80123de <HAL_RCC_ClockConfig+0x9a>
          {
            return HAL_TIMEOUT;
 80123f0:	2003      	movs	r0, #3
 80123f2:	e0d2      	b.n	801259a <HAL_RCC_ClockConfig+0x256>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80123f4:	4b6e      	ldr	r3, [pc, #440]	; (80125b0 <HAL_RCC_ClockConfig+0x26c>)
 80123f6:	681b      	ldr	r3, [r3, #0]
 80123f8:	019b      	lsls	r3, r3, #6
 80123fa:	d4dc      	bmi.n	80123b6 <HAL_RCC_ClockConfig+0x72>
          return HAL_ERROR;
 80123fc:	2001      	movs	r0, #1
 80123fe:	e0cc      	b.n	801259a <HAL_RCC_ClockConfig+0x256>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8012400:	4b6b      	ldr	r3, [pc, #428]	; (80125b0 <HAL_RCC_ClockConfig+0x26c>)
 8012402:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012404:	03db      	lsls	r3, r3, #15
 8012406:	d4d6      	bmi.n	80123b6 <HAL_RCC_ClockConfig+0x72>
          return HAL_ERROR;
 8012408:	2001      	movs	r0, #1
 801240a:	e0c6      	b.n	801259a <HAL_RCC_ClockConfig+0x256>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 801240c:	4f68      	ldr	r7, [pc, #416]	; (80125b0 <HAL_RCC_ClockConfig+0x26c>)
 801240e:	260c      	movs	r6, #12
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8012410:	4b68      	ldr	r3, [pc, #416]	; (80125b4 <HAL_RCC_ClockConfig+0x270>)
 8012412:	4698      	mov	r8, r3
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8012414:	687b      	ldr	r3, [r7, #4]
 8012416:	4033      	ands	r3, r6
 8012418:	2b04      	cmp	r3, #4
 801241a:	d100      	bne.n	801241e <HAL_RCC_ClockConfig+0xda>
 801241c:	e0af      	b.n	801257e <HAL_RCC_ClockConfig+0x23a>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 801241e:	f7fd fe07 	bl	8010030 <HAL_GetTick>
 8012422:	1b40      	subs	r0, r0, r5
 8012424:	4540      	cmp	r0, r8
 8012426:	d9f5      	bls.n	8012414 <HAL_RCC_ClockConfig+0xd0>
            return HAL_TIMEOUT;
 8012428:	2003      	movs	r0, #3
 801242a:	e0b6      	b.n	801259a <HAL_RCC_ClockConfig+0x256>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 801242c:	4f60      	ldr	r7, [pc, #384]	; (80125b0 <HAL_RCC_ClockConfig+0x26c>)
 801242e:	260c      	movs	r6, #12
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8012430:	4b60      	ldr	r3, [pc, #384]	; (80125b4 <HAL_RCC_ClockConfig+0x270>)
 8012432:	4698      	mov	r8, r3
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8012434:	687b      	ldr	r3, [r7, #4]
 8012436:	4033      	ands	r3, r6
 8012438:	2b08      	cmp	r3, #8
 801243a:	d100      	bne.n	801243e <HAL_RCC_ClockConfig+0xfa>
 801243c:	e09f      	b.n	801257e <HAL_RCC_ClockConfig+0x23a>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 801243e:	f7fd fdf7 	bl	8010030 <HAL_GetTick>
 8012442:	1b40      	subs	r0, r0, r5
 8012444:	4540      	cmp	r0, r8
 8012446:	d9f5      	bls.n	8012434 <HAL_RCC_ClockConfig+0xf0>
            return HAL_TIMEOUT;
 8012448:	2003      	movs	r0, #3
 801244a:	e0a6      	b.n	801259a <HAL_RCC_ClockConfig+0x256>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 801244c:	4f58      	ldr	r7, [pc, #352]	; (80125b0 <HAL_RCC_ClockConfig+0x26c>)
 801244e:	260c      	movs	r6, #12
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8012450:	4b58      	ldr	r3, [pc, #352]	; (80125b4 <HAL_RCC_ClockConfig+0x270>)
 8012452:	4698      	mov	r8, r3
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 8012454:	687b      	ldr	r3, [r7, #4]
 8012456:	4033      	ands	r3, r6
 8012458:	2b0c      	cmp	r3, #12
 801245a:	d100      	bne.n	801245e <HAL_RCC_ClockConfig+0x11a>
 801245c:	e08f      	b.n	801257e <HAL_RCC_ClockConfig+0x23a>
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801245e:	f7fd fde7 	bl	8010030 <HAL_GetTick>
 8012462:	1b40      	subs	r0, r0, r5
 8012464:	4540      	cmp	r0, r8
 8012466:	d9f5      	bls.n	8012454 <HAL_RCC_ClockConfig+0x110>
            return HAL_TIMEOUT;
 8012468:	2003      	movs	r0, #3
 801246a:	e096      	b.n	801259a <HAL_RCC_ClockConfig+0x256>
  }
  /* Decreasing the CPU frequency */
  else
  {
    /*-------------------------- HCLK Configuration --------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801246c:	6803      	ldr	r3, [r0, #0]
 801246e:	079b      	lsls	r3, r3, #30
 8012470:	d506      	bpl.n	8012480 <HAL_RCC_ClockConfig+0x13c>
    {
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8012472:	4a4f      	ldr	r2, [pc, #316]	; (80125b0 <HAL_RCC_ClockConfig+0x26c>)
 8012474:	6853      	ldr	r3, [r2, #4]
 8012476:	21f0      	movs	r1, #240	; 0xf0
 8012478:	438b      	bics	r3, r1
 801247a:	6881      	ldr	r1, [r0, #8]
 801247c:	430b      	orrs	r3, r1
 801247e:	6053      	str	r3, [r2, #4]
    }
    
    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8012480:	6823      	ldr	r3, [r4, #0]
 8012482:	07db      	lsls	r3, r3, #31
 8012484:	d570      	bpl.n	8012568 <HAL_RCC_ClockConfig+0x224>
    {    
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
      
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8012486:	6862      	ldr	r2, [r4, #4]
 8012488:	2a01      	cmp	r2, #1
 801248a:	d009      	beq.n	80124a0 <HAL_RCC_ClockConfig+0x15c>
        {
          return HAL_ERROR;
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 801248c:	2a02      	cmp	r2, #2
 801248e:	d02c      	beq.n	80124ea <HAL_RCC_ClockConfig+0x1a6>
          return HAL_ERROR;
        }
      }
#if defined(RCC_CR2_HSI48ON)
      /* HSI48 is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8012490:	2a03      	cmp	r2, #3
 8012492:	d030      	beq.n	80124f6 <HAL_RCC_ClockConfig+0x1b2>
#endif /* RCC_CR2_HSI48ON */
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8012494:	4b46      	ldr	r3, [pc, #280]	; (80125b0 <HAL_RCC_ClockConfig+0x26c>)
 8012496:	681b      	ldr	r3, [r3, #0]
 8012498:	079b      	lsls	r3, r3, #30
 801249a:	d406      	bmi.n	80124aa <HAL_RCC_ClockConfig+0x166>
        {
          return HAL_ERROR;
 801249c:	2001      	movs	r0, #1
 801249e:	e07c      	b.n	801259a <HAL_RCC_ClockConfig+0x256>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80124a0:	4b43      	ldr	r3, [pc, #268]	; (80125b0 <HAL_RCC_ClockConfig+0x26c>)
 80124a2:	681b      	ldr	r3, [r3, #0]
 80124a4:	039b      	lsls	r3, r3, #14
 80124a6:	d400      	bmi.n	80124aa <HAL_RCC_ClockConfig+0x166>
 80124a8:	e07d      	b.n	80125a6 <HAL_RCC_ClockConfig+0x262>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80124aa:	4941      	ldr	r1, [pc, #260]	; (80125b0 <HAL_RCC_ClockConfig+0x26c>)
 80124ac:	684b      	ldr	r3, [r1, #4]
 80124ae:	2003      	movs	r0, #3
 80124b0:	4383      	bics	r3, r0
 80124b2:	4313      	orrs	r3, r2
 80124b4:	604b      	str	r3, [r1, #4]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80124b6:	f7fd fdbb 	bl	8010030 <HAL_GetTick>
 80124ba:	0006      	movs	r6, r0
      
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80124bc:	6863      	ldr	r3, [r4, #4]
 80124be:	2b01      	cmp	r3, #1
 80124c0:	d01f      	beq.n	8012502 <HAL_RCC_ClockConfig+0x1be>
          {
            return HAL_TIMEOUT;
          }
        }
      }
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80124c2:	2b02      	cmp	r3, #2
 80124c4:	d02e      	beq.n	8012524 <HAL_RCC_ClockConfig+0x1e0>
            return HAL_TIMEOUT;
          }
        }
      }
#if defined(RCC_CR2_HSI48ON)
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80124c6:	2b03      	cmp	r3, #3
 80124c8:	d03d      	beq.n	8012546 <HAL_RCC_ClockConfig+0x202>
        }
      }
#endif /* RCC_CR2_HSI48ON */
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80124ca:	4b39      	ldr	r3, [pc, #228]	; (80125b0 <HAL_RCC_ClockConfig+0x26c>)
 80124cc:	4698      	mov	r8, r3
 80124ce:	270c      	movs	r7, #12
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80124d0:	4b38      	ldr	r3, [pc, #224]	; (80125b4 <HAL_RCC_ClockConfig+0x270>)
 80124d2:	4699      	mov	r9, r3
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80124d4:	4643      	mov	r3, r8
 80124d6:	685b      	ldr	r3, [r3, #4]
 80124d8:	421f      	tst	r7, r3
 80124da:	d045      	beq.n	8012568 <HAL_RCC_ClockConfig+0x224>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80124dc:	f7fd fda8 	bl	8010030 <HAL_GetTick>
 80124e0:	1b80      	subs	r0, r0, r6
 80124e2:	4548      	cmp	r0, r9
 80124e4:	d9f6      	bls.n	80124d4 <HAL_RCC_ClockConfig+0x190>
          {
            return HAL_TIMEOUT;
 80124e6:	2003      	movs	r0, #3
 80124e8:	e057      	b.n	801259a <HAL_RCC_ClockConfig+0x256>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80124ea:	4b31      	ldr	r3, [pc, #196]	; (80125b0 <HAL_RCC_ClockConfig+0x26c>)
 80124ec:	681b      	ldr	r3, [r3, #0]
 80124ee:	019b      	lsls	r3, r3, #6
 80124f0:	d4db      	bmi.n	80124aa <HAL_RCC_ClockConfig+0x166>
          return HAL_ERROR;
 80124f2:	2001      	movs	r0, #1
 80124f4:	e051      	b.n	801259a <HAL_RCC_ClockConfig+0x256>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80124f6:	4b2e      	ldr	r3, [pc, #184]	; (80125b0 <HAL_RCC_ClockConfig+0x26c>)
 80124f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80124fa:	03db      	lsls	r3, r3, #15
 80124fc:	d4d5      	bmi.n	80124aa <HAL_RCC_ClockConfig+0x166>
          return HAL_ERROR;
 80124fe:	2001      	movs	r0, #1
 8012500:	e04b      	b.n	801259a <HAL_RCC_ClockConfig+0x256>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8012502:	4b2b      	ldr	r3, [pc, #172]	; (80125b0 <HAL_RCC_ClockConfig+0x26c>)
 8012504:	4698      	mov	r8, r3
 8012506:	270c      	movs	r7, #12
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8012508:	4b2a      	ldr	r3, [pc, #168]	; (80125b4 <HAL_RCC_ClockConfig+0x270>)
 801250a:	4699      	mov	r9, r3
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 801250c:	4643      	mov	r3, r8
 801250e:	685b      	ldr	r3, [r3, #4]
 8012510:	403b      	ands	r3, r7
 8012512:	2b04      	cmp	r3, #4
 8012514:	d028      	beq.n	8012568 <HAL_RCC_ClockConfig+0x224>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8012516:	f7fd fd8b 	bl	8010030 <HAL_GetTick>
 801251a:	1b80      	subs	r0, r0, r6
 801251c:	4548      	cmp	r0, r9
 801251e:	d9f5      	bls.n	801250c <HAL_RCC_ClockConfig+0x1c8>
            return HAL_TIMEOUT;
 8012520:	2003      	movs	r0, #3
 8012522:	e03a      	b.n	801259a <HAL_RCC_ClockConfig+0x256>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8012524:	4b22      	ldr	r3, [pc, #136]	; (80125b0 <HAL_RCC_ClockConfig+0x26c>)
 8012526:	4698      	mov	r8, r3
 8012528:	270c      	movs	r7, #12
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 801252a:	4b22      	ldr	r3, [pc, #136]	; (80125b4 <HAL_RCC_ClockConfig+0x270>)
 801252c:	4699      	mov	r9, r3
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 801252e:	4643      	mov	r3, r8
 8012530:	685b      	ldr	r3, [r3, #4]
 8012532:	403b      	ands	r3, r7
 8012534:	2b08      	cmp	r3, #8
 8012536:	d017      	beq.n	8012568 <HAL_RCC_ClockConfig+0x224>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8012538:	f7fd fd7a 	bl	8010030 <HAL_GetTick>
 801253c:	1b80      	subs	r0, r0, r6
 801253e:	4548      	cmp	r0, r9
 8012540:	d9f5      	bls.n	801252e <HAL_RCC_ClockConfig+0x1ea>
            return HAL_TIMEOUT;
 8012542:	2003      	movs	r0, #3
 8012544:	e029      	b.n	801259a <HAL_RCC_ClockConfig+0x256>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 8012546:	4b1a      	ldr	r3, [pc, #104]	; (80125b0 <HAL_RCC_ClockConfig+0x26c>)
 8012548:	4698      	mov	r8, r3
 801254a:	270c      	movs	r7, #12
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801254c:	4b19      	ldr	r3, [pc, #100]	; (80125b4 <HAL_RCC_ClockConfig+0x270>)
 801254e:	4699      	mov	r9, r3
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 8012550:	4643      	mov	r3, r8
 8012552:	685b      	ldr	r3, [r3, #4]
 8012554:	403b      	ands	r3, r7
 8012556:	2b0c      	cmp	r3, #12
 8012558:	d006      	beq.n	8012568 <HAL_RCC_ClockConfig+0x224>
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801255a:	f7fd fd69 	bl	8010030 <HAL_GetTick>
 801255e:	1b80      	subs	r0, r0, r6
 8012560:	4548      	cmp	r0, r9
 8012562:	d9f5      	bls.n	8012550 <HAL_RCC_ClockConfig+0x20c>
            return HAL_TIMEOUT;
 8012564:	2003      	movs	r0, #3
 8012566:	e018      	b.n	801259a <HAL_RCC_ClockConfig+0x256>
        }
      }      
    } 
    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8012568:	4910      	ldr	r1, [pc, #64]	; (80125ac <HAL_RCC_ClockConfig+0x268>)
 801256a:	680b      	ldr	r3, [r1, #0]
 801256c:	2201      	movs	r2, #1
 801256e:	4393      	bics	r3, r2
 8012570:	432b      	orrs	r3, r5
 8012572:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8012574:	680b      	ldr	r3, [r1, #0]
 8012576:	401a      	ands	r2, r3
    {
      return HAL_ERROR;
 8012578:	2001      	movs	r0, #1
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 801257a:	42aa      	cmp	r2, r5
 801257c:	d10d      	bne.n	801259a <HAL_RCC_ClockConfig+0x256>
    }
  }
  
  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801257e:	6823      	ldr	r3, [r4, #0]
 8012580:	075b      	lsls	r3, r3, #29
 8012582:	d506      	bpl.n	8012592 <HAL_RCC_ClockConfig+0x24e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8012584:	4a0a      	ldr	r2, [pc, #40]	; (80125b0 <HAL_RCC_ClockConfig+0x26c>)
 8012586:	6853      	ldr	r3, [r2, #4]
 8012588:	490b      	ldr	r1, [pc, #44]	; (80125b8 <HAL_RCC_ClockConfig+0x274>)
 801258a:	400b      	ands	r3, r1
 801258c:	68e1      	ldr	r1, [r4, #12]
 801258e:	430b      	orrs	r3, r1
 8012590:	6053      	str	r3, [r2, #4]
  }
  
  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8012592:	2000      	movs	r0, #0
 8012594:	f7fd fd22 	bl	800ffdc <HAL_InitTick>
  
  return HAL_OK;
 8012598:	2000      	movs	r0, #0
}
 801259a:	bcc0      	pop	{r6, r7}
 801259c:	46b9      	mov	r9, r7
 801259e:	46b0      	mov	r8, r6
 80125a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
          return HAL_ERROR;
 80125a2:	2001      	movs	r0, #1
 80125a4:	e7f9      	b.n	801259a <HAL_RCC_ClockConfig+0x256>
          return HAL_ERROR;
 80125a6:	2001      	movs	r0, #1
 80125a8:	e7f7      	b.n	801259a <HAL_RCC_ClockConfig+0x256>
 80125aa:	46c0      	nop			; (mov r8, r8)
 80125ac:	40022000 	.word	0x40022000
 80125b0:	40021000 	.word	0x40021000
 80125b4:	00001388 	.word	0x00001388
 80125b8:	fffff8ff 	.word	0xfffff8ff

080125bc <HAL_RCC_GetSysClockFreq>:
  *         
  *               
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80125bc:	b510      	push	{r4, lr}
 80125be:	b088      	sub	sp, #32
  const uint8_t aPLLMULFactorTable[16] = { 2,  3,  4,  5,  6,  7,  8,  9,
 80125c0:	aa04      	add	r2, sp, #16
 80125c2:	4b20      	ldr	r3, [pc, #128]	; (8012644 <HAL_RCC_GetSysClockFreq+0x88>)
 80125c4:	cb13      	ldmia	r3!, {r0, r1, r4}
 80125c6:	c213      	stmia	r2!, {r0, r1, r4}
 80125c8:	681b      	ldr	r3, [r3, #0]
 80125ca:	6013      	str	r3, [r2, #0]
                                         10, 11, 12, 13, 14, 15, 16, 16};
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8,
 80125cc:	466a      	mov	r2, sp
 80125ce:	4b1e      	ldr	r3, [pc, #120]	; (8012648 <HAL_RCC_GetSysClockFreq+0x8c>)
 80125d0:	cb13      	ldmia	r3!, {r0, r1, r4}
 80125d2:	c213      	stmia	r2!, {r0, r1, r4}
 80125d4:	681b      	ldr	r3, [r3, #0]
 80125d6:	6013      	str	r3, [r2, #0]
                                           9,10, 11, 12, 13, 14, 15, 16};

  uint32_t tmpreg = 0, prediv = 0, pllclk = 0, pllmul = 0;
  uint32_t sysclockfreq = 0;
  
  tmpreg = RCC->CFGR;
 80125d8:	4b1c      	ldr	r3, [pc, #112]	; (801264c <HAL_RCC_GetSysClockFreq+0x90>)
 80125da:	685b      	ldr	r3, [r3, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80125dc:	200c      	movs	r0, #12
 80125de:	4018      	ands	r0, r3
 80125e0:	2808      	cmp	r0, #8
 80125e2:	d00a      	beq.n	80125fa <HAL_RCC_GetSysClockFreq+0x3e>
 80125e4:	380c      	subs	r0, #12
 80125e6:	1e43      	subs	r3, r0, #1
 80125e8:	4198      	sbcs	r0, r3
 80125ea:	4240      	negs	r0, r0
 80125ec:	4b18      	ldr	r3, [pc, #96]	; (8012650 <HAL_RCC_GetSysClockFreq+0x94>)
 80125ee:	4018      	ands	r0, r3
 80125f0:	4b18      	ldr	r3, [pc, #96]	; (8012654 <HAL_RCC_GetSysClockFreq+0x98>)
 80125f2:	469c      	mov	ip, r3
 80125f4:	4460      	add	r0, ip
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80125f6:	b008      	add	sp, #32
 80125f8:	bd10      	pop	{r4, pc}
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80125fa:	0c99      	lsrs	r1, r3, #18
 80125fc:	220f      	movs	r2, #15
 80125fe:	4011      	ands	r1, r2
 8012600:	a804      	add	r0, sp, #16
 8012602:	5c44      	ldrb	r4, [r0, r1]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8012604:	4911      	ldr	r1, [pc, #68]	; (801264c <HAL_RCC_GetSysClockFreq+0x90>)
 8012606:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8012608:	400a      	ands	r2, r1
 801260a:	4669      	mov	r1, sp
 801260c:	5c89      	ldrb	r1, [r1, r2]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 801260e:	22c0      	movs	r2, #192	; 0xc0
 8012610:	0252      	lsls	r2, r2, #9
 8012612:	4013      	ands	r3, r2
 8012614:	2280      	movs	r2, #128	; 0x80
 8012616:	0252      	lsls	r2, r2, #9
 8012618:	4293      	cmp	r3, r2
 801261a:	d008      	beq.n	801262e <HAL_RCC_GetSysClockFreq+0x72>
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 801261c:	22c0      	movs	r2, #192	; 0xc0
 801261e:	0252      	lsls	r2, r2, #9
 8012620:	4293      	cmp	r3, r2
 8012622:	d009      	beq.n	8012638 <HAL_RCC_GetSysClockFreq+0x7c>
        pllclk = (HSI_VALUE/prediv) * pllmul;
 8012624:	480c      	ldr	r0, [pc, #48]	; (8012658 <HAL_RCC_GetSysClockFreq+0x9c>)
 8012626:	f7ed fd93 	bl	8000150 <__udivsi3>
 801262a:	4360      	muls	r0, r4
 801262c:	e7e3      	b.n	80125f6 <HAL_RCC_GetSysClockFreq+0x3a>
        pllclk = (HSE_VALUE/prediv) * pllmul;
 801262e:	480a      	ldr	r0, [pc, #40]	; (8012658 <HAL_RCC_GetSysClockFreq+0x9c>)
 8012630:	f7ed fd8e 	bl	8000150 <__udivsi3>
 8012634:	4360      	muls	r0, r4
 8012636:	e7de      	b.n	80125f6 <HAL_RCC_GetSysClockFreq+0x3a>
        pllclk = (HSI48_VALUE/prediv) * pllmul;
 8012638:	4806      	ldr	r0, [pc, #24]	; (8012654 <HAL_RCC_GetSysClockFreq+0x98>)
 801263a:	f7ed fd89 	bl	8000150 <__udivsi3>
 801263e:	4360      	muls	r0, r4
 8012640:	e7d9      	b.n	80125f6 <HAL_RCC_GetSysClockFreq+0x3a>
 8012642:	46c0      	nop			; (mov r8, r8)
 8012644:	0801cc14 	.word	0x0801cc14
 8012648:	0801cc28 	.word	0x0801cc28
 801264c:	40021000 	.word	0x40021000
 8012650:	fd9da600 	.word	0xfd9da600
 8012654:	02dc6c00 	.word	0x02dc6c00
 8012658:	007a1200 	.word	0x007a1200

0801265c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 801265c:	b510      	push	{r4, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> aAPBAHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 801265e:	f7ff ffad 	bl	80125bc <HAL_RCC_GetSysClockFreq>
 8012662:	4b05      	ldr	r3, [pc, #20]	; (8012678 <HAL_RCC_GetHCLKFreq+0x1c>)
 8012664:	685b      	ldr	r3, [r3, #4]
 8012666:	061b      	lsls	r3, r3, #24
 8012668:	0f1b      	lsrs	r3, r3, #28
 801266a:	4a04      	ldr	r2, [pc, #16]	; (801267c <HAL_RCC_GetHCLKFreq+0x20>)
 801266c:	5cd3      	ldrb	r3, [r2, r3]
 801266e:	40d8      	lsrs	r0, r3
 8012670:	4b03      	ldr	r3, [pc, #12]	; (8012680 <HAL_RCC_GetHCLKFreq+0x24>)
 8012672:	6018      	str	r0, [r3, #0]
  return SystemCoreClock;
}
 8012674:	bd10      	pop	{r4, pc}
 8012676:	46c0      	nop			; (mov r8, r8)
 8012678:	40021000 	.word	0x40021000
 801267c:	0801cc3c 	.word	0x0801cc3c
 8012680:	20000094 	.word	0x20000094

08012684 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8012684:	b510      	push	{r4, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> aAPBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE)>> RCC_CFGR_PPRE_BITNUMBER]);
 8012686:	f7ff ffe9 	bl	801265c <HAL_RCC_GetHCLKFreq>
 801268a:	4b04      	ldr	r3, [pc, #16]	; (801269c <HAL_RCC_GetPCLK1Freq+0x18>)
 801268c:	685b      	ldr	r3, [r3, #4]
 801268e:	055b      	lsls	r3, r3, #21
 8012690:	0f5b      	lsrs	r3, r3, #29
 8012692:	4a03      	ldr	r2, [pc, #12]	; (80126a0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8012694:	5cd3      	ldrb	r3, [r2, r3]
 8012696:	40d8      	lsrs	r0, r3
}    
 8012698:	bd10      	pop	{r4, pc}
 801269a:	46c0      	nop			; (mov r8, r8)
 801269c:	40021000 	.word	0x40021000
 80126a0:	0801cc3c 	.word	0x0801cc3c

080126a4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval None
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80126a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80126a6:	46c6      	mov	lr, r8
 80126a8:	b500      	push	{lr}
 80126aa:	b082      	sub	sp, #8
 80126ac:	0004      	movs	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80126ae:	6803      	ldr	r3, [r0, #0]
 80126b0:	03db      	lsls	r3, r3, #15
 80126b2:	d507      	bpl.n	80126c4 <HAL_RCCEx_PeriphCLKConfig+0x20>
  {
    /* Reset the Backup domain only if the RTC Clock source selction is modified */ 
    if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80126b4:	4b43      	ldr	r3, [pc, #268]	; (80127c4 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 80126b6:	6a1b      	ldr	r3, [r3, #32]
 80126b8:	6842      	ldr	r2, [r0, #4]
 80126ba:	4053      	eors	r3, r2
 80126bc:	22c0      	movs	r2, #192	; 0xc0
 80126be:	0092      	lsls	r2, r2, #2
 80126c0:	4213      	tst	r3, r2
 80126c2:	d136      	bne.n	8012732 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
    }
  }
  
  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80126c4:	6823      	ldr	r3, [r4, #0]
 80126c6:	07db      	lsls	r3, r3, #31
 80126c8:	d506      	bpl.n	80126d8 <HAL_RCCEx_PeriphCLKConfig+0x34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80126ca:	4a3e      	ldr	r2, [pc, #248]	; (80127c4 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 80126cc:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80126ce:	2103      	movs	r1, #3
 80126d0:	438b      	bics	r3, r1
 80126d2:	68a1      	ldr	r1, [r4, #8]
 80126d4:	430b      	orrs	r3, r1
 80126d6:	6313      	str	r3, [r2, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80126d8:	6823      	ldr	r3, [r4, #0]
 80126da:	079b      	lsls	r3, r3, #30
 80126dc:	d506      	bpl.n	80126ec <HAL_RCCEx_PeriphCLKConfig+0x48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80126de:	4a39      	ldr	r2, [pc, #228]	; (80127c4 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 80126e0:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80126e2:	4939      	ldr	r1, [pc, #228]	; (80127c8 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 80126e4:	400b      	ands	r3, r1
 80126e6:	68e1      	ldr	r1, [r4, #12]
 80126e8:	430b      	orrs	r3, r1
 80126ea:	6313      	str	r3, [r2, #48]	; 0x30
#endif /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */

#if defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART3 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80126ec:	6823      	ldr	r3, [r4, #0]
 80126ee:	035b      	lsls	r3, r3, #13
 80126f0:	d506      	bpl.n	8012700 <HAL_RCCEx_PeriphCLKConfig+0x5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80126f2:	4a34      	ldr	r2, [pc, #208]	; (80127c4 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 80126f4:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80126f6:	4935      	ldr	r1, [pc, #212]	; (80127cc <HAL_RCCEx_PeriphCLKConfig+0x128>)
 80126f8:	400b      	ands	r3, r1
 80126fa:	6921      	ldr	r1, [r4, #16]
 80126fc:	430b      	orrs	r3, r1
 80126fe:	6313      	str	r3, [r2, #48]	; 0x30
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8012700:	6823      	ldr	r3, [r4, #0]
 8012702:	069b      	lsls	r3, r3, #26
 8012704:	d506      	bpl.n	8012714 <HAL_RCCEx_PeriphCLKConfig+0x70>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8012706:	4a2f      	ldr	r2, [pc, #188]	; (80127c4 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8012708:	6b13      	ldr	r3, [r2, #48]	; 0x30
 801270a:	2110      	movs	r1, #16
 801270c:	438b      	bics	r3, r1
 801270e:	6961      	ldr	r1, [r4, #20]
 8012710:	430b      	orrs	r3, r1
 8012712:	6313      	str	r3, [r2, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8012714:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8012716:	6823      	ldr	r3, [r4, #0]
 8012718:	055b      	lsls	r3, r3, #21
 801271a:	d506      	bpl.n	801272a <HAL_RCCEx_PeriphCLKConfig+0x86>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 801271c:	4a29      	ldr	r2, [pc, #164]	; (80127c4 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 801271e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8012720:	2140      	movs	r1, #64	; 0x40
 8012722:	438b      	bics	r3, r1
 8012724:	69a1      	ldr	r1, [r4, #24]
 8012726:	430b      	orrs	r3, r1
 8012728:	6313      	str	r3, [r2, #48]	; 0x30
}
 801272a:	b002      	add	sp, #8
 801272c:	bc80      	pop	{r7}
 801272e:	46b8      	mov	r8, r7
 8012730:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 8012732:	4a24      	ldr	r2, [pc, #144]	; (80127c4 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8012734:	69d1      	ldr	r1, [r2, #28]
 8012736:	2080      	movs	r0, #128	; 0x80
 8012738:	0540      	lsls	r0, r0, #21
 801273a:	4301      	orrs	r1, r0
 801273c:	61d1      	str	r1, [r2, #28]
 801273e:	69d3      	ldr	r3, [r2, #28]
 8012740:	4003      	ands	r3, r0
 8012742:	9301      	str	r3, [sp, #4]
 8012744:	9b01      	ldr	r3, [sp, #4]
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8012746:	4a22      	ldr	r2, [pc, #136]	; (80127d0 <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 8012748:	6811      	ldr	r1, [r2, #0]
 801274a:	2380      	movs	r3, #128	; 0x80
 801274c:	005b      	lsls	r3, r3, #1
 801274e:	430b      	orrs	r3, r1
 8012750:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8012752:	f7fd fc6d 	bl	8010030 <HAL_GetTick>
 8012756:	0005      	movs	r5, r0
      while((PWR->CR & PWR_CR_DBP) == RESET)
 8012758:	4f1d      	ldr	r7, [pc, #116]	; (80127d0 <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 801275a:	2680      	movs	r6, #128	; 0x80
 801275c:	0076      	lsls	r6, r6, #1
 801275e:	683b      	ldr	r3, [r7, #0]
 8012760:	4233      	tst	r3, r6
 8012762:	d106      	bne.n	8012772 <HAL_RCCEx_PeriphCLKConfig+0xce>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8012764:	f7fd fc64 	bl	8010030 <HAL_GetTick>
 8012768:	1b40      	subs	r0, r0, r5
 801276a:	2864      	cmp	r0, #100	; 0x64
 801276c:	d9f7      	bls.n	801275e <HAL_RCCEx_PeriphCLKConfig+0xba>
          return HAL_TIMEOUT;
 801276e:	2003      	movs	r0, #3
 8012770:	e7db      	b.n	801272a <HAL_RCCEx_PeriphCLKConfig+0x86>
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8012772:	4b14      	ldr	r3, [pc, #80]	; (80127c4 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8012774:	6a18      	ldr	r0, [r3, #32]
 8012776:	4a17      	ldr	r2, [pc, #92]	; (80127d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8012778:	4002      	ands	r2, r0
      __HAL_RCC_BACKUPRESET_FORCE();
 801277a:	6a1d      	ldr	r5, [r3, #32]
 801277c:	2180      	movs	r1, #128	; 0x80
 801277e:	0249      	lsls	r1, r1, #9
 8012780:	4329      	orrs	r1, r5
 8012782:	6219      	str	r1, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8012784:	6a19      	ldr	r1, [r3, #32]
 8012786:	4d14      	ldr	r5, [pc, #80]	; (80127d8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8012788:	4029      	ands	r1, r5
 801278a:	6219      	str	r1, [r3, #32]
      RCC->BDCR = temp_reg;
 801278c:	621a      	str	r2, [r3, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY))
 801278e:	0783      	lsls	r3, r0, #30
 8012790:	d407      	bmi.n	80127a2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8012792:	4a0c      	ldr	r2, [pc, #48]	; (80127c4 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8012794:	6a13      	ldr	r3, [r2, #32]
 8012796:	490f      	ldr	r1, [pc, #60]	; (80127d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8012798:	400b      	ands	r3, r1
 801279a:	6861      	ldr	r1, [r4, #4]
 801279c:	430b      	orrs	r3, r1
 801279e:	6213      	str	r3, [r2, #32]
 80127a0:	e790      	b.n	80126c4 <HAL_RCCEx_PeriphCLKConfig+0x20>
        tickstart = HAL_GetTick();
 80127a2:	f7fd fc45 	bl	8010030 <HAL_GetTick>
 80127a6:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80127a8:	4f06      	ldr	r7, [pc, #24]	; (80127c4 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 80127aa:	2602      	movs	r6, #2
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80127ac:	4b0b      	ldr	r3, [pc, #44]	; (80127dc <HAL_RCCEx_PeriphCLKConfig+0x138>)
 80127ae:	4698      	mov	r8, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80127b0:	6a3b      	ldr	r3, [r7, #32]
 80127b2:	421e      	tst	r6, r3
 80127b4:	d1ed      	bne.n	8012792 <HAL_RCCEx_PeriphCLKConfig+0xee>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80127b6:	f7fd fc3b 	bl	8010030 <HAL_GetTick>
 80127ba:	1b40      	subs	r0, r0, r5
 80127bc:	4540      	cmp	r0, r8
 80127be:	d9f7      	bls.n	80127b0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            return HAL_TIMEOUT;
 80127c0:	2003      	movs	r0, #3
 80127c2:	e7b2      	b.n	801272a <HAL_RCCEx_PeriphCLKConfig+0x86>
 80127c4:	40021000 	.word	0x40021000
 80127c8:	fffcffff 	.word	0xfffcffff
 80127cc:	fff3ffff 	.word	0xfff3ffff
 80127d0:	40007000 	.word	0x40007000
 80127d4:	fffffcff 	.word	0xfffffcff
 80127d8:	fffeffff 	.word	0xfffeffff
 80127dc:	00001388 	.word	0x00001388

080127e0 <HAL_RTC_MspInit>:
__weak void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTC_MspInit could be implemented in the user file
   */ 
}
 80127e0:	4770      	bx	lr

080127e2 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc: RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80127e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80127e4:	0004      	movs	r4, r0
  uint32_t tickstart = 0;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80127e6:	6802      	ldr	r2, [r0, #0]
 80127e8:	68d3      	ldr	r3, [r2, #12]
 80127ea:	21a0      	movs	r1, #160	; 0xa0
 80127ec:	438b      	bics	r3, r1
 80127ee:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 80127f0:	f7fd fc1e 	bl	8010030 <HAL_GetTick>
 80127f4:	0005      	movs	r5, r0

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80127f6:	2620      	movs	r6, #32
  {
    if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 80127f8:	27fa      	movs	r7, #250	; 0xfa
 80127fa:	00bf      	lsls	r7, r7, #2
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80127fc:	6823      	ldr	r3, [r4, #0]
 80127fe:	68db      	ldr	r3, [r3, #12]
 8012800:	421e      	tst	r6, r3
 8012802:	d106      	bne.n	8012812 <HAL_RTC_WaitForSynchro+0x30>
    if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 8012804:	f7fd fc14 	bl	8010030 <HAL_GetTick>
 8012808:	1b40      	subs	r0, r0, r5
 801280a:	42b8      	cmp	r0, r7
 801280c:	d9f6      	bls.n	80127fc <HAL_RTC_WaitForSynchro+0x1a>
    {       
      return HAL_TIMEOUT;
 801280e:	2003      	movs	r0, #3
 8012810:	e000      	b.n	8012814 <HAL_RTC_WaitForSynchro+0x32>
    } 
  }

  return HAL_OK;
 8012812:	2000      	movs	r0, #0
}
 8012814:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08012816 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc: RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8012816:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012818:	0004      	movs	r4, r0
  uint32_t tickstart = 0;
  
  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 801281a:	6803      	ldr	r3, [r0, #0]
 801281c:	68da      	ldr	r2, [r3, #12]
        return HAL_TIMEOUT;
      } 
    }
  }
  
  return HAL_OK;  
 801281e:	2000      	movs	r0, #0
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8012820:	0652      	lsls	r2, r2, #25
 8012822:	d500      	bpl.n	8012826 <RTC_EnterInitMode+0x10>
}
 8012824:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8012826:	2201      	movs	r2, #1
 8012828:	4252      	negs	r2, r2
 801282a:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 801282c:	f7fd fc00 	bl	8010030 <HAL_GetTick>
 8012830:	0005      	movs	r5, r0
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8012832:	2640      	movs	r6, #64	; 0x40
      if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 8012834:	27fa      	movs	r7, #250	; 0xfa
 8012836:	00bf      	lsls	r7, r7, #2
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8012838:	6823      	ldr	r3, [r4, #0]
 801283a:	68db      	ldr	r3, [r3, #12]
 801283c:	421e      	tst	r6, r3
 801283e:	d106      	bne.n	801284e <RTC_EnterInitMode+0x38>
      if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 8012840:	f7fd fbf6 	bl	8010030 <HAL_GetTick>
 8012844:	1b40      	subs	r0, r0, r5
 8012846:	42b8      	cmp	r0, r7
 8012848:	d9f6      	bls.n	8012838 <RTC_EnterInitMode+0x22>
        return HAL_TIMEOUT;
 801284a:	2003      	movs	r0, #3
 801284c:	e7ea      	b.n	8012824 <RTC_EnterInitMode+0xe>
  return HAL_OK;  
 801284e:	2000      	movs	r0, #0
 8012850:	e7e8      	b.n	8012824 <RTC_EnterInitMode+0xe>
	...

08012854 <HAL_RTC_Init>:
{
 8012854:	b570      	push	{r4, r5, r6, lr}
 8012856:	1e04      	subs	r4, r0, #0
  if(hrtc == NULL)
 8012858:	d046      	beq.n	80128e8 <HAL_RTC_Init+0x94>
  if(hrtc->State == HAL_RTC_STATE_RESET)
 801285a:	7f43      	ldrb	r3, [r0, #29]
 801285c:	2b00      	cmp	r3, #0
 801285e:	d013      	beq.n	8012888 <HAL_RTC_Init+0x34>
  hrtc->State = HAL_RTC_STATE_BUSY;  
 8012860:	2302      	movs	r3, #2
 8012862:	7763      	strb	r3, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8012864:	6823      	ldr	r3, [r4, #0]
 8012866:	22ca      	movs	r2, #202	; 0xca
 8012868:	625a      	str	r2, [r3, #36]	; 0x24
 801286a:	6823      	ldr	r3, [r4, #0]
 801286c:	3a77      	subs	r2, #119	; 0x77
 801286e:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8012870:	0020      	movs	r0, r4
 8012872:	f7ff ffd0 	bl	8012816 <RTC_EnterInitMode>
 8012876:	2800      	cmp	r0, #0
 8012878:	d00a      	beq.n	8012890 <HAL_RTC_Init+0x3c>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 801287a:	6823      	ldr	r3, [r4, #0]
 801287c:	22ff      	movs	r2, #255	; 0xff
 801287e:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8012880:	2304      	movs	r3, #4
 8012882:	7763      	strb	r3, [r4, #29]
    return HAL_ERROR;
 8012884:	2001      	movs	r0, #1
}
 8012886:	bd70      	pop	{r4, r5, r6, pc}
    hrtc->Lock = HAL_UNLOCKED;
 8012888:	7703      	strb	r3, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 801288a:	f7ff ffa9 	bl	80127e0 <HAL_RTC_MspInit>
 801288e:	e7e7      	b.n	8012860 <HAL_RTC_Init+0xc>
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8012890:	6822      	ldr	r2, [r4, #0]
 8012892:	6893      	ldr	r3, [r2, #8]
 8012894:	4915      	ldr	r1, [pc, #84]	; (80128ec <HAL_RTC_Init+0x98>)
 8012896:	400b      	ands	r3, r1
 8012898:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 801289a:	6822      	ldr	r2, [r4, #0]
 801289c:	6891      	ldr	r1, [r2, #8]
 801289e:	6863      	ldr	r3, [r4, #4]
 80128a0:	6925      	ldr	r5, [r4, #16]
 80128a2:	432b      	orrs	r3, r5
 80128a4:	6965      	ldr	r5, [r4, #20]
 80128a6:	432b      	orrs	r3, r5
 80128a8:	430b      	orrs	r3, r1
 80128aa:	6093      	str	r3, [r2, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80128ac:	6823      	ldr	r3, [r4, #0]
 80128ae:	68e2      	ldr	r2, [r4, #12]
 80128b0:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 80128b2:	6822      	ldr	r2, [r4, #0]
 80128b4:	6911      	ldr	r1, [r2, #16]
 80128b6:	68a3      	ldr	r3, [r4, #8]
 80128b8:	041b      	lsls	r3, r3, #16
 80128ba:	430b      	orrs	r3, r1
 80128bc:	6113      	str	r3, [r2, #16]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT; 
 80128be:	6822      	ldr	r2, [r4, #0]
 80128c0:	68d3      	ldr	r3, [r2, #12]
 80128c2:	2180      	movs	r1, #128	; 0x80
 80128c4:	438b      	bics	r3, r1
 80128c6:	60d3      	str	r3, [r2, #12]
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 80128c8:	6822      	ldr	r2, [r4, #0]
 80128ca:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80128cc:	4908      	ldr	r1, [pc, #32]	; (80128f0 <HAL_RTC_Init+0x9c>)
 80128ce:	400b      	ands	r3, r1
 80128d0:	6413      	str	r3, [r2, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType); 
 80128d2:	6822      	ldr	r2, [r4, #0]
 80128d4:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80128d6:	69a1      	ldr	r1, [r4, #24]
 80128d8:	430b      	orrs	r3, r1
 80128da:	6413      	str	r3, [r2, #64]	; 0x40
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 80128dc:	6823      	ldr	r3, [r4, #0]
 80128de:	22ff      	movs	r2, #255	; 0xff
 80128e0:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 80128e2:	2301      	movs	r3, #1
 80128e4:	7763      	strb	r3, [r4, #29]
    return HAL_OK;
 80128e6:	e7ce      	b.n	8012886 <HAL_RTC_Init+0x32>
     return HAL_ERROR;
 80128e8:	2001      	movs	r0, #1
 80128ea:	e7cc      	b.n	8012886 <HAL_RTC_Init+0x32>
 80128ec:	ff8fffbf 	.word	0xff8fffbf
 80128f0:	fffbffff 	.word	0xfffbffff

080128f4 <RTC_ByteToBcd2>:
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0;
  
  while(Value >= 10)
 80128f4:	2809      	cmp	r0, #9
 80128f6:	d909      	bls.n	801290c <RTC_ByteToBcd2+0x18>
  uint32_t bcdhigh = 0;
 80128f8:	2300      	movs	r3, #0
  {
    bcdhigh++;
 80128fa:	3301      	adds	r3, #1
    Value -= 10;
 80128fc:	380a      	subs	r0, #10
 80128fe:	b2c0      	uxtb	r0, r0
  while(Value >= 10)
 8012900:	2809      	cmp	r0, #9
 8012902:	d8fa      	bhi.n	80128fa <RTC_ByteToBcd2+0x6>
  }
  
  return  ((uint8_t)(bcdhigh << 4) | Value);
 8012904:	011b      	lsls	r3, r3, #4
 8012906:	4318      	orrs	r0, r3
 8012908:	b2c0      	uxtb	r0, r0
}
 801290a:	4770      	bx	lr
  uint32_t bcdhigh = 0;
 801290c:	2300      	movs	r3, #0
 801290e:	e7f9      	b.n	8012904 <RTC_ByteToBcd2+0x10>

08012910 <HAL_RTC_SetTime>:
{
 8012910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012912:	0004      	movs	r4, r0
 8012914:	000e      	movs	r6, r1
  __HAL_LOCK(hrtc);
 8012916:	7f03      	ldrb	r3, [r0, #28]
 8012918:	2b01      	cmp	r3, #1
 801291a:	d100      	bne.n	801291e <HAL_RTC_SetTime+0xe>
 801291c:	e072      	b.n	8012a04 <HAL_RTC_SetTime+0xf4>
 801291e:	2301      	movs	r3, #1
 8012920:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8012922:	3301      	adds	r3, #1
 8012924:	7743      	strb	r3, [r0, #29]
  if(Format == RTC_FORMAT_BIN)
 8012926:	2a00      	cmp	r2, #0
 8012928:	d144      	bne.n	80129b4 <HAL_RTC_SetTime+0xa4>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 801292a:	6803      	ldr	r3, [r0, #0]
 801292c:	689b      	ldr	r3, [r3, #8]
 801292e:	065b      	lsls	r3, r3, #25
 8012930:	d401      	bmi.n	8012936 <HAL_RTC_SetTime+0x26>
      sTime->TimeFormat = 0x00;
 8012932:	2300      	movs	r3, #0
 8012934:	720b      	strb	r3, [r1, #8]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8012936:	7830      	ldrb	r0, [r6, #0]
 8012938:	f7ff ffdc 	bl	80128f4 <RTC_ByteToBcd2>
 801293c:	0005      	movs	r5, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 801293e:	7870      	ldrb	r0, [r6, #1]
 8012940:	f7ff ffd8 	bl	80128f4 <RTC_ByteToBcd2>
 8012944:	0007      	movs	r7, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8012946:	78b0      	ldrb	r0, [r6, #2]
 8012948:	f7ff ffd4 	bl	80128f4 <RTC_ByteToBcd2>
                        (((uint32_t)sTime->TimeFormat) << 16));  
 801294c:	7a33      	ldrb	r3, [r6, #8]
 801294e:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8012950:	4303      	orrs	r3, r0
 8012952:	042d      	lsls	r5, r5, #16
 8012954:	431d      	orrs	r5, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8012956:	023f      	lsls	r7, r7, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8012958:	433d      	orrs	r5, r7
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 801295a:	6823      	ldr	r3, [r4, #0]
 801295c:	22ca      	movs	r2, #202	; 0xca
 801295e:	625a      	str	r2, [r3, #36]	; 0x24
 8012960:	6823      	ldr	r3, [r4, #0]
 8012962:	3a77      	subs	r2, #119	; 0x77
 8012964:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8012966:	0020      	movs	r0, r4
 8012968:	f7ff ff55 	bl	8012816 <RTC_EnterInitMode>
 801296c:	1e07      	subs	r7, r0, #0
 801296e:	d132      	bne.n	80129d6 <HAL_RTC_SetTime+0xc6>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8012970:	6823      	ldr	r3, [r4, #0]
 8012972:	4825      	ldr	r0, [pc, #148]	; (8012a08 <HAL_RTC_SetTime+0xf8>)
 8012974:	4005      	ands	r5, r0
 8012976:	601d      	str	r5, [r3, #0]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BCK);
 8012978:	6822      	ldr	r2, [r4, #0]
 801297a:	6893      	ldr	r3, [r2, #8]
 801297c:	4923      	ldr	r1, [pc, #140]	; (8012a0c <HAL_RTC_SetTime+0xfc>)
 801297e:	400b      	ands	r3, r1
 8012980:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8012982:	6822      	ldr	r2, [r4, #0]
 8012984:	6891      	ldr	r1, [r2, #8]
 8012986:	68f3      	ldr	r3, [r6, #12]
 8012988:	6930      	ldr	r0, [r6, #16]
 801298a:	4303      	orrs	r3, r0
 801298c:	430b      	orrs	r3, r1
 801298e:	6093      	str	r3, [r2, #8]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8012990:	6822      	ldr	r2, [r4, #0]
 8012992:	68d3      	ldr	r3, [r2, #12]
 8012994:	2180      	movs	r1, #128	; 0x80
 8012996:	438b      	bics	r3, r1
 8012998:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 801299a:	6823      	ldr	r3, [r4, #0]
 801299c:	689b      	ldr	r3, [r3, #8]
 801299e:	069b      	lsls	r3, r3, #26
 80129a0:	d522      	bpl.n	80129e8 <HAL_RTC_SetTime+0xd8>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80129a2:	6823      	ldr	r3, [r4, #0]
 80129a4:	22ff      	movs	r2, #255	; 0xff
 80129a6:	625a      	str	r2, [r3, #36]	; 0x24
   hrtc->State = HAL_RTC_STATE_READY;
 80129a8:	2301      	movs	r3, #1
 80129aa:	7763      	strb	r3, [r4, #29]
   __HAL_UNLOCK(hrtc); 
 80129ac:	2300      	movs	r3, #0
 80129ae:	7723      	strb	r3, [r4, #28]
}
 80129b0:	0038      	movs	r0, r7
 80129b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80129b4:	6803      	ldr	r3, [r0, #0]
 80129b6:	689b      	ldr	r3, [r3, #8]
 80129b8:	065b      	lsls	r3, r3, #25
 80129ba:	d401      	bmi.n	80129c0 <HAL_RTC_SetTime+0xb0>
      sTime->TimeFormat = 0x00;
 80129bc:	2300      	movs	r3, #0
 80129be:	720b      	strb	r3, [r1, #8]
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 80129c0:	7835      	ldrb	r5, [r6, #0]
 80129c2:	042d      	lsls	r5, r5, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 80129c4:	7870      	ldrb	r0, [r6, #1]
 80129c6:	0200      	lsls	r0, r0, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 80129c8:	4305      	orrs	r5, r0
              ((uint32_t)sTime->Seconds) | \
 80129ca:	78b0      	ldrb	r0, [r6, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 80129cc:	4305      	orrs	r5, r0
              ((uint32_t)(sTime->TimeFormat) << 16));   
 80129ce:	7a30      	ldrb	r0, [r6, #8]
 80129d0:	0400      	lsls	r0, r0, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 80129d2:	4305      	orrs	r5, r0
 80129d4:	e7c1      	b.n	801295a <HAL_RTC_SetTime+0x4a>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 80129d6:	6823      	ldr	r3, [r4, #0]
 80129d8:	22ff      	movs	r2, #255	; 0xff
 80129da:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 80129dc:	2304      	movs	r3, #4
 80129de:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 80129e0:	2300      	movs	r3, #0
 80129e2:	7723      	strb	r3, [r4, #28]
    return HAL_ERROR;
 80129e4:	2701      	movs	r7, #1
 80129e6:	e7e3      	b.n	80129b0 <HAL_RTC_SetTime+0xa0>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80129e8:	0020      	movs	r0, r4
 80129ea:	f7ff fefa 	bl	80127e2 <HAL_RTC_WaitForSynchro>
 80129ee:	2800      	cmp	r0, #0
 80129f0:	d0d7      	beq.n	80129a2 <HAL_RTC_SetTime+0x92>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 80129f2:	6823      	ldr	r3, [r4, #0]
 80129f4:	22ff      	movs	r2, #255	; 0xff
 80129f6:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 80129f8:	2304      	movs	r3, #4
 80129fa:	7763      	strb	r3, [r4, #29]
        __HAL_UNLOCK(hrtc);
 80129fc:	2300      	movs	r3, #0
 80129fe:	7723      	strb	r3, [r4, #28]
        return HAL_ERROR;
 8012a00:	2701      	movs	r7, #1
 8012a02:	e7d5      	b.n	80129b0 <HAL_RTC_SetTime+0xa0>
  __HAL_LOCK(hrtc);
 8012a04:	2702      	movs	r7, #2
 8012a06:	e7d3      	b.n	80129b0 <HAL_RTC_SetTime+0xa0>
 8012a08:	007f7f7f 	.word	0x007f7f7f
 8012a0c:	fffbffff 	.word	0xfffbffff

08012a10 <HAL_RTC_SetDate>:
{
 8012a10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012a12:	46c6      	mov	lr, r8
 8012a14:	b500      	push	{lr}
 8012a16:	0004      	movs	r4, r0
 8012a18:	000e      	movs	r6, r1
 __HAL_LOCK(hrtc);
 8012a1a:	7f03      	ldrb	r3, [r0, #28]
 8012a1c:	2b01      	cmp	r3, #1
 8012a1e:	d037      	beq.n	8012a90 <HAL_RTC_SetDate+0x80>
 8012a20:	2301      	movs	r3, #1
 8012a22:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY; 
 8012a24:	3301      	adds	r3, #1
 8012a26:	7743      	strb	r3, [r0, #29]
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10) == 0x10))
 8012a28:	2a00      	cmp	r2, #0
 8012a2a:	d133      	bne.n	8012a94 <HAL_RTC_SetDate+0x84>
 8012a2c:	784b      	ldrb	r3, [r1, #1]
 8012a2e:	06da      	lsls	r2, r3, #27
 8012a30:	d503      	bpl.n	8012a3a <HAL_RTC_SetDate+0x2a>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10)) + (uint8_t)0x0A);
 8012a32:	2210      	movs	r2, #16
 8012a34:	4393      	bics	r3, r2
 8012a36:	330a      	adds	r3, #10
 8012a38:	704b      	strb	r3, [r1, #1]
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8012a3a:	78f0      	ldrb	r0, [r6, #3]
 8012a3c:	f7ff ff5a 	bl	80128f4 <RTC_ByteToBcd2>
 8012a40:	0005      	movs	r5, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8012a42:	7870      	ldrb	r0, [r6, #1]
 8012a44:	f7ff ff56 	bl	80128f4 <RTC_ByteToBcd2>
 8012a48:	4680      	mov	r8, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8012a4a:	78b0      	ldrb	r0, [r6, #2]
 8012a4c:	f7ff ff52 	bl	80128f4 <RTC_ByteToBcd2>
                 ((uint32_t)sDate->WeekDay << 13));   
 8012a50:	7833      	ldrb	r3, [r6, #0]
 8012a52:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8012a54:	4303      	orrs	r3, r0
 8012a56:	042d      	lsls	r5, r5, #16
 8012a58:	431d      	orrs	r5, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8012a5a:	4643      	mov	r3, r8
 8012a5c:	0218      	lsls	r0, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8012a5e:	4305      	orrs	r5, r0
 8012a60:	e022      	b.n	8012aa8 <HAL_RTC_SetDate+0x98>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8012a62:	6823      	ldr	r3, [r4, #0]
 8012a64:	22ff      	movs	r2, #255	; 0xff
 8012a66:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8012a68:	2304      	movs	r3, #4
 8012a6a:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 8012a6c:	2300      	movs	r3, #0
 8012a6e:	7723      	strb	r3, [r4, #28]
    return HAL_ERROR;
 8012a70:	2601      	movs	r6, #1
 8012a72:	e038      	b.n	8012ae6 <HAL_RTC_SetDate+0xd6>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8012a74:	0020      	movs	r0, r4
 8012a76:	f7ff feb4 	bl	80127e2 <HAL_RTC_WaitForSynchro>
 8012a7a:	2800      	cmp	r0, #0
 8012a7c:	d02c      	beq.n	8012ad8 <HAL_RTC_SetDate+0xc8>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8012a7e:	6823      	ldr	r3, [r4, #0]
 8012a80:	22ff      	movs	r2, #255	; 0xff
 8012a82:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8012a84:	2304      	movs	r3, #4
 8012a86:	7763      	strb	r3, [r4, #29]
        __HAL_UNLOCK(hrtc);
 8012a88:	2300      	movs	r3, #0
 8012a8a:	7723      	strb	r3, [r4, #28]
        return HAL_ERROR;
 8012a8c:	2601      	movs	r6, #1
 8012a8e:	e02a      	b.n	8012ae6 <HAL_RTC_SetDate+0xd6>
 __HAL_LOCK(hrtc);
 8012a90:	2602      	movs	r6, #2
 8012a92:	e028      	b.n	8012ae6 <HAL_RTC_SetDate+0xd6>
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8012a94:	78cd      	ldrb	r5, [r1, #3]
 8012a96:	042d      	lsls	r5, r5, #16
                  (((uint32_t)sDate->Month) << 8) | \
 8012a98:	7848      	ldrb	r0, [r1, #1]
 8012a9a:	0200      	lsls	r0, r0, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8012a9c:	4305      	orrs	r5, r0
                  ((uint32_t)sDate->Date) | \
 8012a9e:	7888      	ldrb	r0, [r1, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 8012aa0:	4305      	orrs	r5, r0
                  (((uint32_t)sDate->WeekDay) << 13));  
 8012aa2:	7808      	ldrb	r0, [r1, #0]
 8012aa4:	0340      	lsls	r0, r0, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8012aa6:	4305      	orrs	r5, r0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8012aa8:	6823      	ldr	r3, [r4, #0]
 8012aaa:	22ca      	movs	r2, #202	; 0xca
 8012aac:	625a      	str	r2, [r3, #36]	; 0x24
 8012aae:	6823      	ldr	r3, [r4, #0]
 8012ab0:	3a77      	subs	r2, #119	; 0x77
 8012ab2:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8012ab4:	0020      	movs	r0, r4
 8012ab6:	f7ff feae 	bl	8012816 <RTC_EnterInitMode>
 8012aba:	1e06      	subs	r6, r0, #0
 8012abc:	d1d1      	bne.n	8012a62 <HAL_RTC_SetDate+0x52>
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8012abe:	6823      	ldr	r3, [r4, #0]
 8012ac0:	480b      	ldr	r0, [pc, #44]	; (8012af0 <HAL_RTC_SetDate+0xe0>)
 8012ac2:	4005      	ands	r5, r0
 8012ac4:	605d      	str	r5, [r3, #4]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8012ac6:	6822      	ldr	r2, [r4, #0]
 8012ac8:	68d3      	ldr	r3, [r2, #12]
 8012aca:	2180      	movs	r1, #128	; 0x80
 8012acc:	438b      	bics	r3, r1
 8012ace:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8012ad0:	6823      	ldr	r3, [r4, #0]
 8012ad2:	689b      	ldr	r3, [r3, #8]
 8012ad4:	069b      	lsls	r3, r3, #26
 8012ad6:	d5cd      	bpl.n	8012a74 <HAL_RTC_SetDate+0x64>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8012ad8:	6823      	ldr	r3, [r4, #0]
 8012ada:	22ff      	movs	r2, #255	; 0xff
 8012adc:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY ;
 8012ade:	2301      	movs	r3, #1
 8012ae0:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 8012ae2:	2300      	movs	r3, #0
 8012ae4:	7723      	strb	r3, [r4, #28]
}
 8012ae6:	0030      	movs	r0, r6
 8012ae8:	bc80      	pop	{r7}
 8012aea:	46b8      	mov	r8, r7
 8012aec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012aee:	46c0      	nop			; (mov r8, r8)
 8012af0:	00ffff3f 	.word	0x00ffff3f

08012af4 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8012af4:	0003      	movs	r3, r0
  uint32_t tmp = 0;
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8012af6:	0902      	lsrs	r2, r0, #4
 8012af8:	0090      	lsls	r0, r2, #2
 8012afa:	1880      	adds	r0, r0, r2
 8012afc:	0040      	lsls	r0, r0, #1
  return (tmp + (Value & (uint8_t)0x0F));
 8012afe:	220f      	movs	r2, #15
 8012b00:	4013      	ands	r3, r2
 8012b02:	18c0      	adds	r0, r0, r3
 8012b04:	b2c0      	uxtb	r0, r0
}
 8012b06:	4770      	bx	lr

08012b08 <HAL_RTC_GetTime>:
{
 8012b08:	b570      	push	{r4, r5, r6, lr}
 8012b0a:	000c      	movs	r4, r1
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8012b0c:	6803      	ldr	r3, [r0, #0]
 8012b0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012b10:	604b      	str	r3, [r1, #4]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK); 
 8012b12:	6803      	ldr	r3, [r0, #0]
 8012b14:	681b      	ldr	r3, [r3, #0]
 8012b16:	490e      	ldr	r1, [pc, #56]	; (8012b50 <HAL_RTC_GetTime+0x48>)
 8012b18:	400b      	ands	r3, r1
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 8012b1a:	0c19      	lsrs	r1, r3, #16
 8012b1c:	203f      	movs	r0, #63	; 0x3f
 8012b1e:	4008      	ands	r0, r1
 8012b20:	7020      	strb	r0, [r4, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 8012b22:	0a1e      	lsrs	r6, r3, #8
 8012b24:	b2f6      	uxtb	r6, r6
 8012b26:	7066      	strb	r6, [r4, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8012b28:	b2dd      	uxtb	r5, r3
 8012b2a:	70a5      	strb	r5, [r4, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16); 
 8012b2c:	2340      	movs	r3, #64	; 0x40
 8012b2e:	400b      	ands	r3, r1
 8012b30:	7223      	strb	r3, [r4, #8]
  if(Format == RTC_FORMAT_BIN)
 8012b32:	2a00      	cmp	r2, #0
 8012b34:	d10a      	bne.n	8012b4c <HAL_RTC_GetTime+0x44>
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8012b36:	f7ff ffdd 	bl	8012af4 <RTC_Bcd2ToByte>
 8012b3a:	7020      	strb	r0, [r4, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8012b3c:	0030      	movs	r0, r6
 8012b3e:	f7ff ffd9 	bl	8012af4 <RTC_Bcd2ToByte>
 8012b42:	7060      	strb	r0, [r4, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);  
 8012b44:	0028      	movs	r0, r5
 8012b46:	f7ff ffd5 	bl	8012af4 <RTC_Bcd2ToByte>
 8012b4a:	70a0      	strb	r0, [r4, #2]
}
 8012b4c:	2000      	movs	r0, #0
 8012b4e:	bd70      	pop	{r4, r5, r6, pc}
 8012b50:	007f7f7f 	.word	0x007f7f7f

08012b54 <HAL_RTC_GetDate>:
{
 8012b54:	b570      	push	{r4, r5, r6, lr}
 8012b56:	000c      	movs	r4, r1
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK); 
 8012b58:	6803      	ldr	r3, [r0, #0]
 8012b5a:	685b      	ldr	r3, [r3, #4]
 8012b5c:	490d      	ldr	r1, [pc, #52]	; (8012b94 <HAL_RTC_GetDate+0x40>)
 8012b5e:	400b      	ands	r3, r1
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16);
 8012b60:	0c18      	lsrs	r0, r3, #16
 8012b62:	70e0      	strb	r0, [r4, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 8012b64:	04dd      	lsls	r5, r3, #19
 8012b66:	0eed      	lsrs	r5, r5, #27
 8012b68:	7065      	strb	r5, [r4, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8012b6a:	b2de      	uxtb	r6, r3
 8012b6c:	70a6      	strb	r6, [r4, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13); 
 8012b6e:	041b      	lsls	r3, r3, #16
 8012b70:	0f5b      	lsrs	r3, r3, #29
 8012b72:	7023      	strb	r3, [r4, #0]
  if(Format == RTC_FORMAT_BIN)
 8012b74:	2a00      	cmp	r2, #0
 8012b76:	d10a      	bne.n	8012b8e <HAL_RTC_GetDate+0x3a>
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8012b78:	f7ff ffbc 	bl	8012af4 <RTC_Bcd2ToByte>
 8012b7c:	70e0      	strb	r0, [r4, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8012b7e:	0028      	movs	r0, r5
 8012b80:	f7ff ffb8 	bl	8012af4 <RTC_Bcd2ToByte>
 8012b84:	7060      	strb	r0, [r4, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);  
 8012b86:	0030      	movs	r0, r6
 8012b88:	f7ff ffb4 	bl	8012af4 <RTC_Bcd2ToByte>
 8012b8c:	70a0      	strb	r0, [r4, #2]
}
 8012b8e:	2000      	movs	r0, #0
 8012b90:	bd70      	pop	{r4, r5, r6, pc}
 8012b92:	46c0      	nop			; (mov r8, r8)
 8012b94:	00ffff3f 	.word	0x00ffff3f

08012b98 <HAL_RTCEx_BKUPWrite>:
  uint32_t tmp = 0;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8012b98:	6803      	ldr	r3, [r0, #0]
 8012b9a:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4);
 8012b9c:	0089      	lsls	r1, r1, #2
 8012b9e:	18c9      	adds	r1, r1, r3

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8012ba0:	600a      	str	r2, [r1, #0]
}
 8012ba2:	4770      	bx	lr

08012ba4 <HAL_RTCEx_BKUPRead>:
  uint32_t tmp = 0;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8012ba4:	6803      	ldr	r3, [r0, #0]
 8012ba6:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4);
 8012ba8:	0089      	lsls	r1, r1, #2
 8012baa:	18c9      	adds	r1, r1, r3
  
  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8012bac:	6808      	ldr	r0, [r1, #0]
}
 8012bae:	4770      	bx	lr

08012bb0 <HAL_TIM_Base_MspInit>:
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8012bb0:	4770      	bx	lr

08012bb2 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim : TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8012bb2:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8012bb4:	2239      	movs	r2, #57	; 0x39
 8012bb6:	2302      	movs	r3, #2
 8012bb8:	5483      	strb	r3, [r0, r2]

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8012bba:	6804      	ldr	r4, [r0, #0]
 8012bbc:	6823      	ldr	r3, [r4, #0]
 8012bbe:	2101      	movs	r1, #1
 8012bc0:	430b      	orrs	r3, r1
 8012bc2:	6023      	str	r3, [r4, #0]

  /* Change the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8012bc4:	5481      	strb	r1, [r0, r2]

  /* Return function status */
  return HAL_OK;
}
 8012bc6:	2000      	movs	r0, #0
 8012bc8:	bd10      	pop	{r4, pc}
	...

08012bcc <TIM_Base_SetConfig>:
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1 = 0;
  tmpcr1 = TIMx->CR1;
 8012bcc:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8012bce:	4a2f      	ldr	r2, [pc, #188]	; (8012c8c <TIM_Base_SetConfig+0xc0>)
 8012bd0:	4290      	cmp	r0, r2
 8012bd2:	d044      	beq.n	8012c5e <TIM_Base_SetConfig+0x92>
 8012bd4:	2280      	movs	r2, #128	; 0x80
 8012bd6:	05d2      	lsls	r2, r2, #23
 8012bd8:	4290      	cmp	r0, r2
 8012bda:	d032      	beq.n	8012c42 <TIM_Base_SetConfig+0x76>
 8012bdc:	4a2c      	ldr	r2, [pc, #176]	; (8012c90 <TIM_Base_SetConfig+0xc4>)
 8012bde:	4290      	cmp	r0, r2
 8012be0:	d04f      	beq.n	8012c82 <TIM_Base_SetConfig+0xb6>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8012be2:	4a2c      	ldr	r2, [pc, #176]	; (8012c94 <TIM_Base_SetConfig+0xc8>)
 8012be4:	4290      	cmp	r0, r2
 8012be6:	d030      	beq.n	8012c4a <TIM_Base_SetConfig+0x7e>
 8012be8:	4a2b      	ldr	r2, [pc, #172]	; (8012c98 <TIM_Base_SetConfig+0xcc>)
 8012bea:	4290      	cmp	r0, r2
 8012bec:	d01f      	beq.n	8012c2e <TIM_Base_SetConfig+0x62>
 8012bee:	4a2b      	ldr	r2, [pc, #172]	; (8012c9c <TIM_Base_SetConfig+0xd0>)
 8012bf0:	4290      	cmp	r0, r2
 8012bf2:	d012      	beq.n	8012c1a <TIM_Base_SetConfig+0x4e>
 8012bf4:	4a2a      	ldr	r2, [pc, #168]	; (8012ca0 <TIM_Base_SetConfig+0xd4>)
 8012bf6:	4290      	cmp	r0, r2
 8012bf8:	d005      	beq.n	8012c06 <TIM_Base_SetConfig+0x3a>
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  TIMx->CR1 = tmpcr1;
 8012bfa:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8012bfc:	688b      	ldr	r3, [r1, #8]
 8012bfe:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8012c00:	680b      	ldr	r3, [r1, #0]
 8012c02:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8012c04:	e03a      	b.n	8012c7c <TIM_Base_SetConfig+0xb0>
    tmpcr1 &= ~TIM_CR1_CKD;
 8012c06:	4a27      	ldr	r2, [pc, #156]	; (8012ca4 <TIM_Base_SetConfig+0xd8>)
 8012c08:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8012c0a:	68ca      	ldr	r2, [r1, #12]
 8012c0c:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8012c0e:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8012c10:	688b      	ldr	r3, [r1, #8]
 8012c12:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8012c14:	680b      	ldr	r3, [r1, #0]
 8012c16:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8012c18:	e02e      	b.n	8012c78 <TIM_Base_SetConfig+0xac>
    tmpcr1 &= ~TIM_CR1_CKD;
 8012c1a:	4a22      	ldr	r2, [pc, #136]	; (8012ca4 <TIM_Base_SetConfig+0xd8>)
 8012c1c:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8012c1e:	68ca      	ldr	r2, [r1, #12]
 8012c20:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8012c22:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8012c24:	688b      	ldr	r3, [r1, #8]
 8012c26:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8012c28:	680b      	ldr	r3, [r1, #0]
 8012c2a:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8012c2c:	e024      	b.n	8012c78 <TIM_Base_SetConfig+0xac>
    tmpcr1 &= ~TIM_CR1_CKD;
 8012c2e:	4a1d      	ldr	r2, [pc, #116]	; (8012ca4 <TIM_Base_SetConfig+0xd8>)
 8012c30:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8012c32:	68ca      	ldr	r2, [r1, #12]
 8012c34:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8012c36:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8012c38:	688b      	ldr	r3, [r1, #8]
 8012c3a:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8012c3c:	680b      	ldr	r3, [r1, #0]
 8012c3e:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8012c40:	e01a      	b.n	8012c78 <TIM_Base_SetConfig+0xac>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8012c42:	2270      	movs	r2, #112	; 0x70
 8012c44:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 8012c46:	684a      	ldr	r2, [r1, #4]
 8012c48:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 8012c4a:	4a16      	ldr	r2, [pc, #88]	; (8012ca4 <TIM_Base_SetConfig+0xd8>)
 8012c4c:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8012c4e:	68ca      	ldr	r2, [r1, #12]
 8012c50:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8012c52:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8012c54:	688b      	ldr	r3, [r1, #8]
 8012c56:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8012c58:	680b      	ldr	r3, [r1, #0]
 8012c5a:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8012c5c:	e00e      	b.n	8012c7c <TIM_Base_SetConfig+0xb0>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8012c5e:	2270      	movs	r2, #112	; 0x70
 8012c60:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 8012c62:	684a      	ldr	r2, [r1, #4]
 8012c64:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 8012c66:	4a0f      	ldr	r2, [pc, #60]	; (8012ca4 <TIM_Base_SetConfig+0xd8>)
 8012c68:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8012c6a:	68ca      	ldr	r2, [r1, #12]
 8012c6c:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8012c6e:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8012c70:	688b      	ldr	r3, [r1, #8]
 8012c72:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8012c74:	680b      	ldr	r3, [r1, #0]
 8012c76:	6283      	str	r3, [r0, #40]	; 0x28
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8012c78:	690b      	ldr	r3, [r1, #16]
 8012c7a:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8012c7c:	2301      	movs	r3, #1
 8012c7e:	6143      	str	r3, [r0, #20]
}
 8012c80:	4770      	bx	lr
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8012c82:	2270      	movs	r2, #112	; 0x70
 8012c84:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 8012c86:	684a      	ldr	r2, [r1, #4]
 8012c88:	4313      	orrs	r3, r2
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8012c8a:	e7de      	b.n	8012c4a <TIM_Base_SetConfig+0x7e>
 8012c8c:	40012c00 	.word	0x40012c00
 8012c90:	40000400 	.word	0x40000400
 8012c94:	40002000 	.word	0x40002000
 8012c98:	40014000 	.word	0x40014000
 8012c9c:	40014400 	.word	0x40014400
 8012ca0:	40014800 	.word	0x40014800
 8012ca4:	fffffcff 	.word	0xfffffcff

08012ca8 <HAL_TIM_Base_Init>:
{
 8012ca8:	b570      	push	{r4, r5, r6, lr}
 8012caa:	1e04      	subs	r4, r0, #0
  if(htim == NULL)
 8012cac:	d014      	beq.n	8012cd8 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8012cae:	2339      	movs	r3, #57	; 0x39
 8012cb0:	5cc3      	ldrb	r3, [r0, r3]
 8012cb2:	2b00      	cmp	r3, #0
 8012cb4:	d00a      	beq.n	8012ccc <HAL_TIM_Base_Init+0x24>
  htim->State= HAL_TIM_STATE_BUSY;
 8012cb6:	2539      	movs	r5, #57	; 0x39
 8012cb8:	2302      	movs	r3, #2
 8012cba:	5563      	strb	r3, [r4, r5]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8012cbc:	0021      	movs	r1, r4
 8012cbe:	c901      	ldmia	r1!, {r0}
 8012cc0:	f7ff ff84 	bl	8012bcc <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8012cc4:	2301      	movs	r3, #1
 8012cc6:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 8012cc8:	2000      	movs	r0, #0
}
 8012cca:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 8012ccc:	3338      	adds	r3, #56	; 0x38
 8012cce:	2200      	movs	r2, #0
 8012cd0:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_Base_MspInit(htim);
 8012cd2:	f7ff ff6d 	bl	8012bb0 <HAL_TIM_Base_MspInit>
 8012cd6:	e7ee      	b.n	8012cb6 <HAL_TIM_Base_Init+0xe>
    return HAL_ERROR;
 8012cd8:	2001      	movs	r0, #1
 8012cda:	e7f6      	b.n	8012cca <HAL_TIM_Base_Init+0x22>

08012cdc <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave 
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 8012cdc:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 8012cde:	2338      	movs	r3, #56	; 0x38
 8012ce0:	5cc3      	ldrb	r3, [r0, r3]
 8012ce2:	2b01      	cmp	r3, #1
 8012ce4:	d01e      	beq.n	8012d24 <HAL_TIMEx_MasterConfigSynchronization+0x48>
 8012ce6:	2238      	movs	r2, #56	; 0x38
 8012ce8:	2501      	movs	r5, #1
 8012cea:	5485      	strb	r5, [r0, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8012cec:	2439      	movs	r4, #57	; 0x39
 8012cee:	2302      	movs	r3, #2
 8012cf0:	5503      	strb	r3, [r0, r4]

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8012cf2:	6806      	ldr	r6, [r0, #0]
 8012cf4:	6873      	ldr	r3, [r6, #4]
 8012cf6:	2770      	movs	r7, #112	; 0x70
 8012cf8:	43bb      	bics	r3, r7
 8012cfa:	6073      	str	r3, [r6, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8012cfc:	6806      	ldr	r6, [r0, #0]
 8012cfe:	6873      	ldr	r3, [r6, #4]
 8012d00:	680f      	ldr	r7, [r1, #0]
 8012d02:	433b      	orrs	r3, r7
 8012d04:	6073      	str	r3, [r6, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8012d06:	6806      	ldr	r6, [r0, #0]
 8012d08:	68b3      	ldr	r3, [r6, #8]
 8012d0a:	2780      	movs	r7, #128	; 0x80
 8012d0c:	43bb      	bics	r3, r7
 8012d0e:	60b3      	str	r3, [r6, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8012d10:	6806      	ldr	r6, [r0, #0]
 8012d12:	68b3      	ldr	r3, [r6, #8]
 8012d14:	6849      	ldr	r1, [r1, #4]
 8012d16:	430b      	orrs	r3, r1
 8012d18:	60b3      	str	r3, [r6, #8]

  htim->State = HAL_TIM_STATE_READY;
 8012d1a:	5505      	strb	r5, [r0, r4]

  __HAL_UNLOCK(htim);
 8012d1c:	2300      	movs	r3, #0
 8012d1e:	5483      	strb	r3, [r0, r2]

  return HAL_OK;
 8012d20:	2000      	movs	r0, #0
}
 8012d22:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(htim);
 8012d24:	2002      	movs	r0, #2
 8012d26:	e7fc      	b.n	8012d22 <HAL_TIMEx_MasterConfigSynchronization+0x46>

08012d28 <HAL_UART_MspDeInit>:
 __weak void HAL_UART_MspDeInit(UART_HandleTypeDef *huart)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspDeInit can be implemented in the user file
   */
}
 8012d28:	4770      	bx	lr

08012d2a <HAL_UART_DeInit>:
{
 8012d2a:	b570      	push	{r4, r5, r6, lr}
 8012d2c:	1e04      	subs	r4, r0, #0
  if(huart == NULL)
 8012d2e:	d016      	beq.n	8012d5e <HAL_UART_DeInit+0x34>
  huart->State = HAL_UART_STATE_BUSY;
 8012d30:	2669      	movs	r6, #105	; 0x69
 8012d32:	2302      	movs	r3, #2
 8012d34:	5583      	strb	r3, [r0, r6]
  __HAL_UART_DISABLE(huart);
 8012d36:	6802      	ldr	r2, [r0, #0]
 8012d38:	6813      	ldr	r3, [r2, #0]
 8012d3a:	2101      	movs	r1, #1
 8012d3c:	438b      	bics	r3, r1
 8012d3e:	6013      	str	r3, [r2, #0]
  huart->Instance->CR1 = 0x0;
 8012d40:	6803      	ldr	r3, [r0, #0]
 8012d42:	2500      	movs	r5, #0
 8012d44:	601d      	str	r5, [r3, #0]
  huart->Instance->CR2 = 0x0;
 8012d46:	6803      	ldr	r3, [r0, #0]
 8012d48:	605d      	str	r5, [r3, #4]
  huart->Instance->CR3 = 0x0;
 8012d4a:	6803      	ldr	r3, [r0, #0]
 8012d4c:	609d      	str	r5, [r3, #8]
  HAL_UART_MspDeInit(huart);
 8012d4e:	f7ff ffeb 	bl	8012d28 <HAL_UART_MspDeInit>
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012d52:	66e5      	str	r5, [r4, #108]	; 0x6c
  huart->State = HAL_UART_STATE_RESET;
 8012d54:	55a5      	strb	r5, [r4, r6]
  __HAL_UNLOCK(huart);
 8012d56:	2368      	movs	r3, #104	; 0x68
 8012d58:	54e5      	strb	r5, [r4, r3]
  return HAL_OK;
 8012d5a:	2000      	movs	r0, #0
}
 8012d5c:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8012d5e:	2001      	movs	r0, #1
 8012d60:	e7fc      	b.n	8012d5c <HAL_UART_DeInit+0x32>

08012d62 <HAL_UART_Transmit_IT>:
  * @param pData: pointer to data buffer.
  * @param Size: amount of data to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8012d62:	b510      	push	{r4, lr}
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 8012d64:	2369      	movs	r3, #105	; 0x69
 8012d66:	5cc3      	ldrb	r3, [r0, r3]
 8012d68:	2b01      	cmp	r3, #1
 8012d6a:	d003      	beq.n	8012d74 <HAL_UART_Transmit_IT+0x12>
 8012d6c:	2369      	movs	r3, #105	; 0x69
 8012d6e:	5cc3      	ldrb	r3, [r0, r3]
 8012d70:	2b22      	cmp	r3, #34	; 0x22
 8012d72:	d12b      	bne.n	8012dcc <HAL_UART_Transmit_IT+0x6a>
  {
    if((pData == NULL ) || (Size == 0))
 8012d74:	2900      	cmp	r1, #0
 8012d76:	d02b      	beq.n	8012dd0 <HAL_UART_Transmit_IT+0x6e>
 8012d78:	2a00      	cmp	r2, #0
 8012d7a:	d02b      	beq.n	8012dd4 <HAL_UART_Transmit_IT+0x72>
    {
      return HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8012d7c:	2368      	movs	r3, #104	; 0x68
 8012d7e:	5cc3      	ldrb	r3, [r0, r3]
 8012d80:	2b01      	cmp	r3, #1
 8012d82:	d029      	beq.n	8012dd8 <HAL_UART_Transmit_IT+0x76>
 8012d84:	2368      	movs	r3, #104	; 0x68
 8012d86:	2401      	movs	r4, #1
 8012d88:	54c4      	strb	r4, [r0, r3]

    huart->pTxBuffPtr = pData;
 8012d8a:	64c1      	str	r1, [r0, #76]	; 0x4c
    huart->TxXferSize = Size;
 8012d8c:	3b18      	subs	r3, #24
 8012d8e:	52c2      	strh	r2, [r0, r3]
    huart->TxXferCount = Size;
 8012d90:	3302      	adds	r3, #2
 8012d92:	52c2      	strh	r2, [r0, r3]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012d94:	2300      	movs	r3, #0
 8012d96:	66c3      	str	r3, [r0, #108]	; 0x6c
    /* Check if a receive process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_RX)
 8012d98:	3369      	adds	r3, #105	; 0x69
 8012d9a:	5cc3      	ldrb	r3, [r0, r3]
 8012d9c:	2b22      	cmp	r3, #34	; 0x22
 8012d9e:	d011      	beq.n	8012dc4 <HAL_UART_Transmit_IT+0x62>
    {
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
    }
    else
    {
      huart->State = HAL_UART_STATE_BUSY_TX;
 8012da0:	2369      	movs	r3, #105	; 0x69
 8012da2:	2212      	movs	r2, #18
 8012da4:	54c2      	strb	r2, [r0, r3]
    }

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8012da6:	6802      	ldr	r2, [r0, #0]
 8012da8:	6893      	ldr	r3, [r2, #8]
 8012daa:	2101      	movs	r1, #1
 8012dac:	430b      	orrs	r3, r1
 8012dae:	6093      	str	r3, [r2, #8]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8012db0:	2368      	movs	r3, #104	; 0x68
 8012db2:	2200      	movs	r2, #0
 8012db4:	54c2      	strb	r2, [r0, r3]

    /* Enable the UART Transmit Data Register Empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8012db6:	6802      	ldr	r2, [r0, #0]
 8012db8:	6813      	ldr	r3, [r2, #0]
 8012dba:	317f      	adds	r1, #127	; 0x7f
 8012dbc:	430b      	orrs	r3, r1
 8012dbe:	6013      	str	r3, [r2, #0]

    return HAL_OK;
 8012dc0:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 8012dc2:	bd10      	pop	{r4, pc}
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 8012dc4:	3347      	adds	r3, #71	; 0x47
 8012dc6:	2232      	movs	r2, #50	; 0x32
 8012dc8:	54c2      	strb	r2, [r0, r3]
 8012dca:	e7ec      	b.n	8012da6 <HAL_UART_Transmit_IT+0x44>
    return HAL_BUSY;
 8012dcc:	2002      	movs	r0, #2
 8012dce:	e7f8      	b.n	8012dc2 <HAL_UART_Transmit_IT+0x60>
      return HAL_ERROR;
 8012dd0:	2001      	movs	r0, #1
 8012dd2:	e7f6      	b.n	8012dc2 <HAL_UART_Transmit_IT+0x60>
 8012dd4:	2001      	movs	r0, #1
 8012dd6:	e7f4      	b.n	8012dc2 <HAL_UART_Transmit_IT+0x60>
    __HAL_LOCK(huart);
 8012dd8:	2002      	movs	r0, #2
 8012dda:	e7f2      	b.n	8012dc2 <HAL_UART_Transmit_IT+0x60>

08012ddc <HAL_UART_Receive_IT>:
  * @param pData: pointer to data buffer.
  * @param Size: amount of data to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8012ddc:	b510      	push	{r4, lr}
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_TX))
 8012dde:	2369      	movs	r3, #105	; 0x69
 8012de0:	5cc3      	ldrb	r3, [r0, r3]
 8012de2:	2b01      	cmp	r3, #1
 8012de4:	d003      	beq.n	8012dee <HAL_UART_Receive_IT+0x12>
 8012de6:	2369      	movs	r3, #105	; 0x69
 8012de8:	5cc3      	ldrb	r3, [r0, r3]
 8012dea:	2b12      	cmp	r3, #18
 8012dec:	d15d      	bne.n	8012eaa <HAL_UART_Receive_IT+0xce>
  {
    if((pData == NULL ) || (Size == 0))
 8012dee:	2900      	cmp	r1, #0
 8012df0:	d05d      	beq.n	8012eae <HAL_UART_Receive_IT+0xd2>
 8012df2:	2a00      	cmp	r2, #0
 8012df4:	d05d      	beq.n	8012eb2 <HAL_UART_Receive_IT+0xd6>
    {
      return HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8012df6:	2368      	movs	r3, #104	; 0x68
 8012df8:	5cc3      	ldrb	r3, [r0, r3]
 8012dfa:	2b01      	cmp	r3, #1
 8012dfc:	d05b      	beq.n	8012eb6 <HAL_UART_Receive_IT+0xda>
 8012dfe:	2368      	movs	r3, #104	; 0x68
 8012e00:	2401      	movs	r4, #1
 8012e02:	54c4      	strb	r4, [r0, r3]

    huart->pRxBuffPtr = pData;
 8012e04:	6541      	str	r1, [r0, #84]	; 0x54
    huart->RxXferSize = Size;
 8012e06:	3b10      	subs	r3, #16
 8012e08:	52c2      	strh	r2, [r0, r3]
    huart->RxXferCount = Size;
 8012e0a:	3302      	adds	r3, #2
 8012e0c:	52c2      	strh	r2, [r0, r3]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8012e0e:	6883      	ldr	r3, [r0, #8]
 8012e10:	2280      	movs	r2, #128	; 0x80
 8012e12:	0152      	lsls	r2, r2, #5
 8012e14:	4293      	cmp	r3, r2
 8012e16:	d008      	beq.n	8012e2a <HAL_UART_Receive_IT+0x4e>
 8012e18:	2b00      	cmp	r3, #0
 8012e1a:	d115      	bne.n	8012e48 <HAL_UART_Receive_IT+0x6c>
 8012e1c:	6903      	ldr	r3, [r0, #16]
 8012e1e:	2b00      	cmp	r3, #0
 8012e20:	d10e      	bne.n	8012e40 <HAL_UART_Receive_IT+0x64>
 8012e22:	335c      	adds	r3, #92	; 0x5c
 8012e24:	22ff      	movs	r2, #255	; 0xff
 8012e26:	52c2      	strh	r2, [r0, r3]
 8012e28:	e012      	b.n	8012e50 <HAL_UART_Receive_IT+0x74>
 8012e2a:	6903      	ldr	r3, [r0, #16]
 8012e2c:	2b00      	cmp	r3, #0
 8012e2e:	d103      	bne.n	8012e38 <HAL_UART_Receive_IT+0x5c>
 8012e30:	335c      	adds	r3, #92	; 0x5c
 8012e32:	4a22      	ldr	r2, [pc, #136]	; (8012ebc <HAL_UART_Receive_IT+0xe0>)
 8012e34:	52c2      	strh	r2, [r0, r3]
 8012e36:	e00b      	b.n	8012e50 <HAL_UART_Receive_IT+0x74>
 8012e38:	235c      	movs	r3, #92	; 0x5c
 8012e3a:	22ff      	movs	r2, #255	; 0xff
 8012e3c:	52c2      	strh	r2, [r0, r3]
 8012e3e:	e007      	b.n	8012e50 <HAL_UART_Receive_IT+0x74>
 8012e40:	235c      	movs	r3, #92	; 0x5c
 8012e42:	227f      	movs	r2, #127	; 0x7f
 8012e44:	52c2      	strh	r2, [r0, r3]
 8012e46:	e003      	b.n	8012e50 <HAL_UART_Receive_IT+0x74>
 8012e48:	2280      	movs	r2, #128	; 0x80
 8012e4a:	0552      	lsls	r2, r2, #21
 8012e4c:	4293      	cmp	r3, r2
 8012e4e:	d01d      	beq.n	8012e8c <HAL_UART_Receive_IT+0xb0>

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012e50:	2300      	movs	r3, #0
 8012e52:	66c3      	str	r3, [r0, #108]	; 0x6c
    /* Check if a transmit process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_TX)
 8012e54:	3369      	adds	r3, #105	; 0x69
 8012e56:	5cc3      	ldrb	r3, [r0, r3]
 8012e58:	2b12      	cmp	r3, #18
 8012e5a:	d022      	beq.n	8012ea2 <HAL_UART_Receive_IT+0xc6>
    {
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
    }
    else
    {
      huart->State = HAL_UART_STATE_BUSY_RX;
 8012e5c:	2369      	movs	r3, #105	; 0x69
 8012e5e:	2222      	movs	r2, #34	; 0x22
 8012e60:	54c2      	strb	r2, [r0, r3]
    }

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8012e62:	6802      	ldr	r2, [r0, #0]
 8012e64:	6811      	ldr	r1, [r2, #0]
 8012e66:	2380      	movs	r3, #128	; 0x80
 8012e68:	005b      	lsls	r3, r3, #1
 8012e6a:	430b      	orrs	r3, r1
 8012e6c:	6013      	str	r3, [r2, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8012e6e:	6802      	ldr	r2, [r0, #0]
 8012e70:	6893      	ldr	r3, [r2, #8]
 8012e72:	2101      	movs	r1, #1
 8012e74:	430b      	orrs	r3, r1
 8012e76:	6093      	str	r3, [r2, #8]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8012e78:	2368      	movs	r3, #104	; 0x68
 8012e7a:	2200      	movs	r2, #0
 8012e7c:	54c2      	strb	r2, [r0, r3]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8012e7e:	6802      	ldr	r2, [r0, #0]
 8012e80:	6813      	ldr	r3, [r2, #0]
 8012e82:	311f      	adds	r1, #31
 8012e84:	430b      	orrs	r3, r1
 8012e86:	6013      	str	r3, [r2, #0]

    return HAL_OK;
 8012e88:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 8012e8a:	bd10      	pop	{r4, pc}
    UART_MASK_COMPUTATION(huart);
 8012e8c:	6903      	ldr	r3, [r0, #16]
 8012e8e:	2b00      	cmp	r3, #0
 8012e90:	d103      	bne.n	8012e9a <HAL_UART_Receive_IT+0xbe>
 8012e92:	335c      	adds	r3, #92	; 0x5c
 8012e94:	227f      	movs	r2, #127	; 0x7f
 8012e96:	52c2      	strh	r2, [r0, r3]
 8012e98:	e7da      	b.n	8012e50 <HAL_UART_Receive_IT+0x74>
 8012e9a:	235c      	movs	r3, #92	; 0x5c
 8012e9c:	223f      	movs	r2, #63	; 0x3f
 8012e9e:	52c2      	strh	r2, [r0, r3]
 8012ea0:	e7d6      	b.n	8012e50 <HAL_UART_Receive_IT+0x74>
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 8012ea2:	3357      	adds	r3, #87	; 0x57
 8012ea4:	2232      	movs	r2, #50	; 0x32
 8012ea6:	54c2      	strb	r2, [r0, r3]
 8012ea8:	e7db      	b.n	8012e62 <HAL_UART_Receive_IT+0x86>
    return HAL_BUSY;
 8012eaa:	2002      	movs	r0, #2
 8012eac:	e7ed      	b.n	8012e8a <HAL_UART_Receive_IT+0xae>
      return HAL_ERROR;
 8012eae:	2001      	movs	r0, #1
 8012eb0:	e7eb      	b.n	8012e8a <HAL_UART_Receive_IT+0xae>
 8012eb2:	2001      	movs	r0, #1
 8012eb4:	e7e9      	b.n	8012e8a <HAL_UART_Receive_IT+0xae>
    __HAL_LOCK(huart);
 8012eb6:	2002      	movs	r0, #2
 8012eb8:	e7e7      	b.n	8012e8a <HAL_UART_Receive_IT+0xae>
 8012eba:	46c0      	nop			; (mov r8, r8)
 8012ebc:	000001ff 	.word	0x000001ff

08012ec0 <HAL_UART_Transmit_DMA>:
  * @param pData: pointer to data buffer.
  * @param Size: amount of data to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8012ec0:	b510      	push	{r4, lr}
 8012ec2:	0004      	movs	r4, r0
 8012ec4:	0013      	movs	r3, r2
  uint32_t *tmp;

  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 8012ec6:	2269      	movs	r2, #105	; 0x69
 8012ec8:	5c82      	ldrb	r2, [r0, r2]
 8012eca:	2a01      	cmp	r2, #1
 8012ecc:	d003      	beq.n	8012ed6 <HAL_UART_Transmit_DMA+0x16>
 8012ece:	2269      	movs	r2, #105	; 0x69
 8012ed0:	5c82      	ldrb	r2, [r0, r2]
 8012ed2:	2a22      	cmp	r2, #34	; 0x22
 8012ed4:	d137      	bne.n	8012f46 <HAL_UART_Transmit_DMA+0x86>
  {
    if((pData == NULL ) || (Size == 0))
 8012ed6:	2900      	cmp	r1, #0
 8012ed8:	d037      	beq.n	8012f4a <HAL_UART_Transmit_DMA+0x8a>
 8012eda:	2b00      	cmp	r3, #0
 8012edc:	d037      	beq.n	8012f4e <HAL_UART_Transmit_DMA+0x8e>
    {
      return HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8012ede:	2268      	movs	r2, #104	; 0x68
 8012ee0:	5ca2      	ldrb	r2, [r4, r2]
 8012ee2:	2a01      	cmp	r2, #1
 8012ee4:	d035      	beq.n	8012f52 <HAL_UART_Transmit_DMA+0x92>
 8012ee6:	2268      	movs	r2, #104	; 0x68
 8012ee8:	2001      	movs	r0, #1
 8012eea:	54a0      	strb	r0, [r4, r2]

    huart->pTxBuffPtr = pData;
 8012eec:	64e1      	str	r1, [r4, #76]	; 0x4c
    huart->TxXferSize = Size;
 8012eee:	3a18      	subs	r2, #24
 8012ef0:	52a3      	strh	r3, [r4, r2]
    huart->TxXferCount = Size;
 8012ef2:	3202      	adds	r2, #2
 8012ef4:	52a3      	strh	r3, [r4, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012ef6:	2200      	movs	r2, #0
 8012ef8:	66e2      	str	r2, [r4, #108]	; 0x6c
    /* Check if a receive process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_RX)
 8012efa:	3269      	adds	r2, #105	; 0x69
 8012efc:	5ca2      	ldrb	r2, [r4, r2]
 8012efe:	2a22      	cmp	r2, #34	; 0x22
 8012f00:	d01d      	beq.n	8012f3e <HAL_UART_Transmit_DMA+0x7e>
    {
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
    }
    else
    {
      huart->State = HAL_UART_STATE_BUSY_TX;
 8012f02:	2269      	movs	r2, #105	; 0x69
 8012f04:	2012      	movs	r0, #18
 8012f06:	54a0      	strb	r0, [r4, r2]
    }

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8012f08:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8012f0a:	4813      	ldr	r0, [pc, #76]	; (8012f58 <HAL_UART_Transmit_DMA+0x98>)
 8012f0c:	6290      	str	r0, [r2, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8012f0e:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8012f10:	4812      	ldr	r0, [pc, #72]	; (8012f5c <HAL_UART_Transmit_DMA+0x9c>)
 8012f12:	62d0      	str	r0, [r2, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8012f14:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8012f16:	4812      	ldr	r0, [pc, #72]	; (8012f60 <HAL_UART_Transmit_DMA+0xa0>)
 8012f18:	6310      	str	r0, [r2, #48]	; 0x30

    /* Enable the UART transmit DMA channel */
    tmp = (uint32_t*)&pData;
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t*)tmp, (uint32_t)&huart->Instance->TDR, Size);
 8012f1a:	6822      	ldr	r2, [r4, #0]
 8012f1c:	3228      	adds	r2, #40	; 0x28
 8012f1e:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8012f20:	f7fd fa78 	bl	8010414 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8012f24:	6823      	ldr	r3, [r4, #0]
 8012f26:	2240      	movs	r2, #64	; 0x40
 8012f28:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    huart->Instance->CR3 |= USART_CR3_DMAT;
 8012f2a:	6822      	ldr	r2, [r4, #0]
 8012f2c:	6893      	ldr	r3, [r2, #8]
 8012f2e:	2180      	movs	r1, #128	; 0x80
 8012f30:	430b      	orrs	r3, r1
 8012f32:	6093      	str	r3, [r2, #8]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8012f34:	2368      	movs	r3, #104	; 0x68
 8012f36:	2200      	movs	r2, #0
 8012f38:	54e2      	strb	r2, [r4, r3]

    return HAL_OK;
 8012f3a:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 8012f3c:	bd10      	pop	{r4, pc}
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 8012f3e:	3247      	adds	r2, #71	; 0x47
 8012f40:	3031      	adds	r0, #49	; 0x31
 8012f42:	54a0      	strb	r0, [r4, r2]
 8012f44:	e7e0      	b.n	8012f08 <HAL_UART_Transmit_DMA+0x48>
    return HAL_BUSY;
 8012f46:	2002      	movs	r0, #2
 8012f48:	e7f8      	b.n	8012f3c <HAL_UART_Transmit_DMA+0x7c>
      return HAL_ERROR;
 8012f4a:	2001      	movs	r0, #1
 8012f4c:	e7f6      	b.n	8012f3c <HAL_UART_Transmit_DMA+0x7c>
 8012f4e:	2001      	movs	r0, #1
 8012f50:	e7f4      	b.n	8012f3c <HAL_UART_Transmit_DMA+0x7c>
    __HAL_LOCK(huart);
 8012f52:	2002      	movs	r0, #2
 8012f54:	e7f2      	b.n	8012f3c <HAL_UART_Transmit_DMA+0x7c>
 8012f56:	46c0      	nop			; (mov r8, r8)
 8012f58:	08013001 	.word	0x08013001
 8012f5c:	08013033 	.word	0x08013033
 8012f60:	08013083 	.word	0x08013083

08012f64 <HAL_UART_Receive_DMA>:
  * @note   When the UART parity is enabled (PCE = 1), the received data contain
  *         the parity bit (MSB position).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8012f64:	b510      	push	{r4, lr}
 8012f66:	0004      	movs	r4, r0
 8012f68:	0008      	movs	r0, r1
 8012f6a:	0013      	movs	r3, r2
  uint32_t *tmp;

  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_TX))
 8012f6c:	2269      	movs	r2, #105	; 0x69
 8012f6e:	5ca2      	ldrb	r2, [r4, r2]
 8012f70:	2a01      	cmp	r2, #1
 8012f72:	d003      	beq.n	8012f7c <HAL_UART_Receive_DMA+0x18>
 8012f74:	2269      	movs	r2, #105	; 0x69
 8012f76:	5ca2      	ldrb	r2, [r4, r2]
 8012f78:	2a12      	cmp	r2, #18
 8012f7a:	d133      	bne.n	8012fe4 <HAL_UART_Receive_DMA+0x80>
  {
    if((pData == NULL ) || (Size == 0))
 8012f7c:	2800      	cmp	r0, #0
 8012f7e:	d033      	beq.n	8012fe8 <HAL_UART_Receive_DMA+0x84>
 8012f80:	2b00      	cmp	r3, #0
 8012f82:	d033      	beq.n	8012fec <HAL_UART_Receive_DMA+0x88>
    {
      return HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8012f84:	2268      	movs	r2, #104	; 0x68
 8012f86:	5ca2      	ldrb	r2, [r4, r2]
 8012f88:	2a01      	cmp	r2, #1
 8012f8a:	d031      	beq.n	8012ff0 <HAL_UART_Receive_DMA+0x8c>
 8012f8c:	2268      	movs	r2, #104	; 0x68
 8012f8e:	2101      	movs	r1, #1
 8012f90:	54a1      	strb	r1, [r4, r2]

    huart->pRxBuffPtr = pData;
 8012f92:	6560      	str	r0, [r4, #84]	; 0x54
    huart->RxXferSize = Size;
 8012f94:	3a10      	subs	r2, #16
 8012f96:	52a3      	strh	r3, [r4, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012f98:	2200      	movs	r2, #0
 8012f9a:	66e2      	str	r2, [r4, #108]	; 0x6c
    /* Check if a transmit process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_TX)
 8012f9c:	3269      	adds	r2, #105	; 0x69
 8012f9e:	5ca2      	ldrb	r2, [r4, r2]
 8012fa0:	2a12      	cmp	r2, #18
 8012fa2:	d01b      	beq.n	8012fdc <HAL_UART_Receive_DMA+0x78>
    {
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
    }
    else
    {
      huart->State = HAL_UART_STATE_BUSY_RX;
 8012fa4:	2269      	movs	r2, #105	; 0x69
 8012fa6:	2122      	movs	r1, #34	; 0x22
 8012fa8:	54a1      	strb	r1, [r4, r2]
    }

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8012faa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8012fac:	4911      	ldr	r1, [pc, #68]	; (8012ff4 <HAL_UART_Receive_DMA+0x90>)
 8012fae:	6291      	str	r1, [r2, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8012fb0:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8012fb2:	4911      	ldr	r1, [pc, #68]	; (8012ff8 <HAL_UART_Receive_DMA+0x94>)
 8012fb4:	62d1      	str	r1, [r2, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8012fb6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8012fb8:	4910      	ldr	r1, [pc, #64]	; (8012ffc <HAL_UART_Receive_DMA+0x98>)
 8012fba:	6311      	str	r1, [r2, #48]	; 0x30

    /* Enable the DMA channel */
    tmp = (uint32_t*)&pData;
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, *(uint32_t*)tmp, Size);
 8012fbc:	6821      	ldr	r1, [r4, #0]
 8012fbe:	3124      	adds	r1, #36	; 0x24
 8012fc0:	0002      	movs	r2, r0
 8012fc2:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8012fc4:	f7fd fa26 	bl	8010414 <HAL_DMA_Start_IT>

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
     huart->Instance->CR3 |= USART_CR3_DMAR;
 8012fc8:	6822      	ldr	r2, [r4, #0]
 8012fca:	6893      	ldr	r3, [r2, #8]
 8012fcc:	2140      	movs	r1, #64	; 0x40
 8012fce:	430b      	orrs	r3, r1
 8012fd0:	6093      	str	r3, [r2, #8]

     /* Process Unlocked */
     __HAL_UNLOCK(huart);
 8012fd2:	2368      	movs	r3, #104	; 0x68
 8012fd4:	2200      	movs	r2, #0
 8012fd6:	54e2      	strb	r2, [r4, r3]

    return HAL_OK;
 8012fd8:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 8012fda:	bd10      	pop	{r4, pc}
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 8012fdc:	3257      	adds	r2, #87	; 0x57
 8012fde:	3131      	adds	r1, #49	; 0x31
 8012fe0:	54a1      	strb	r1, [r4, r2]
 8012fe2:	e7e2      	b.n	8012faa <HAL_UART_Receive_DMA+0x46>
    return HAL_BUSY;
 8012fe4:	2002      	movs	r0, #2
 8012fe6:	e7f8      	b.n	8012fda <HAL_UART_Receive_DMA+0x76>
      return HAL_ERROR;
 8012fe8:	2001      	movs	r0, #1
 8012fea:	e7f6      	b.n	8012fda <HAL_UART_Receive_DMA+0x76>
 8012fec:	2001      	movs	r0, #1
 8012fee:	e7f4      	b.n	8012fda <HAL_UART_Receive_DMA+0x76>
    __HAL_LOCK(huart);
 8012ff0:	2002      	movs	r0, #2
 8012ff2:	e7f2      	b.n	8012fda <HAL_UART_Receive_DMA+0x76>
 8012ff4:	0801303d 	.word	0x0801303d
 8012ff8:	08013079 	.word	0x08013079
 8012ffc:	08013083 	.word	0x08013083

08013000 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma: DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8013000:	b510      	push	{r4, lr}
 8013002:	0003      	movs	r3, r0
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8013004:	6a40      	ldr	r0, [r0, #36]	; 0x24
  
  /* DMA Normal mode */
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 8013006:	681b      	ldr	r3, [r3, #0]
 8013008:	681b      	ldr	r3, [r3, #0]
 801300a:	069b      	lsls	r3, r3, #26
 801300c:	d40d      	bmi.n	801302a <UART_DMATransmitCplt+0x2a>
  {  
    huart->TxXferCount = 0;
 801300e:	2352      	movs	r3, #82	; 0x52
 8013010:	2200      	movs	r2, #0
 8013012:	52c2      	strh	r2, [r0, r3]
  
    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
    in the UART CR3 register */
    huart->Instance->CR3 &= (uint32_t)~((uint32_t)USART_CR3_DMAT);
 8013014:	6802      	ldr	r2, [r0, #0]
 8013016:	6893      	ldr	r3, [r2, #8]
 8013018:	2180      	movs	r1, #128	; 0x80
 801301a:	438b      	bics	r3, r1
 801301c:	6093      	str	r3, [r2, #8]

    /* Enable the UART Transmit Complete Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 801301e:	6802      	ldr	r2, [r0, #0]
 8013020:	6813      	ldr	r3, [r2, #0]
 8013022:	3940      	subs	r1, #64	; 0x40
 8013024:	430b      	orrs	r3, r1
 8013026:	6013      	str	r3, [r2, #0]
  else
  {
    HAL_UART_TxCpltCallback(huart);
  }

}
 8013028:	bd10      	pop	{r4, pc}
    HAL_UART_TxCpltCallback(huart);
 801302a:	f7fa fa43 	bl	800d4b4 <HAL_UART_TxCpltCallback>
}
 801302e:	e7fb      	b.n	8013028 <UART_DMATransmitCplt+0x28>

08013030 <HAL_UART_TxHalfCpltCallback>:
}
 8013030:	4770      	bx	lr

08013032 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma : DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8013032:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;

  HAL_UART_TxHalfCpltCallback(huart);
 8013034:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8013036:	f7ff fffb 	bl	8013030 <HAL_UART_TxHalfCpltCallback>
}
 801303a:	bd10      	pop	{r4, pc}

0801303c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma: DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 801303c:	b510      	push	{r4, lr}
 801303e:	0003      	movs	r3, r0
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8013040:	6a40      	ldr	r0, [r0, #36]	; 0x24
  
  /* DMA Normal mode */
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 8013042:	681b      	ldr	r3, [r3, #0]
 8013044:	681b      	ldr	r3, [r3, #0]
 8013046:	069b      	lsls	r3, r3, #26
 8013048:	d40e      	bmi.n	8013068 <UART_DMAReceiveCplt+0x2c>
  {
    huart->RxXferCount = 0;
 801304a:	235a      	movs	r3, #90	; 0x5a
 801304c:	2200      	movs	r2, #0
 801304e:	52c2      	strh	r2, [r0, r3]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    huart->Instance->CR3 &= (uint32_t)~((uint32_t)USART_CR3_DMAR);
 8013050:	6802      	ldr	r2, [r0, #0]
 8013052:	6893      	ldr	r3, [r2, #8]
 8013054:	2140      	movs	r1, #64	; 0x40
 8013056:	438b      	bics	r3, r1
 8013058:	6093      	str	r3, [r2, #8]

    /* Check if a transmit Process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_TX_RX)
 801305a:	2369      	movs	r3, #105	; 0x69
 801305c:	5cc3      	ldrb	r3, [r0, r3]
 801305e:	2b32      	cmp	r3, #50	; 0x32
 8013060:	d005      	beq.n	801306e <UART_DMAReceiveCplt+0x32>
    {
      huart->State = HAL_UART_STATE_BUSY_TX;
    }
    else
    {
      huart->State = HAL_UART_STATE_READY;
 8013062:	2369      	movs	r3, #105	; 0x69
 8013064:	2201      	movs	r2, #1
 8013066:	54c2      	strb	r2, [r0, r3]
    }
  }
  
  HAL_UART_RxCpltCallback(huart);
 8013068:	f7fa fa62 	bl	800d530 <HAL_UART_RxCpltCallback>
}
 801306c:	bd10      	pop	{r4, pc}
      huart->State = HAL_UART_STATE_BUSY_TX;
 801306e:	3337      	adds	r3, #55	; 0x37
 8013070:	2212      	movs	r2, #18
 8013072:	54c2      	strb	r2, [r0, r3]
 8013074:	e7f8      	b.n	8013068 <UART_DMAReceiveCplt+0x2c>

08013076 <HAL_UART_RxHalfCpltCallback>:
}
 8013076:	4770      	bx	lr

08013078 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma : DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8013078:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;

  HAL_UART_RxHalfCpltCallback(huart);
 801307a:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801307c:	f7ff fffb 	bl	8013076 <HAL_UART_RxHalfCpltCallback>
}
 8013080:	bd10      	pop	{r4, pc}

08013082 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma: DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8013082:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8013084:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0;
 8013086:	2300      	movs	r3, #0
 8013088:	225a      	movs	r2, #90	; 0x5a
 801308a:	5283      	strh	r3, [r0, r2]
  huart->TxXferCount = 0;
 801308c:	3a08      	subs	r2, #8
 801308e:	5283      	strh	r3, [r0, r2]
  huart->State= HAL_UART_STATE_READY;
 8013090:	3369      	adds	r3, #105	; 0x69
 8013092:	3a51      	subs	r2, #81	; 0x51
 8013094:	54c2      	strb	r2, [r0, r3]
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8013096:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8013098:	320f      	adds	r2, #15
 801309a:	4313      	orrs	r3, r2
 801309c:	66c3      	str	r3, [r0, #108]	; 0x6c
  HAL_UART_ErrorCallback(huart);
 801309e:	f7fa fa21 	bl	800d4e4 <HAL_UART_ErrorCallback>
}
 80130a2:	bd10      	pop	{r4, pc}

080130a4 <UART_SetConfig>:
{
 80130a4:	b570      	push	{r4, r5, r6, lr}
 80130a6:	0004      	movs	r4, r0
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80130a8:	6801      	ldr	r1, [r0, #0]
 80130aa:	680a      	ldr	r2, [r1, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80130ac:	6883      	ldr	r3, [r0, #8]
 80130ae:	6900      	ldr	r0, [r0, #16]
 80130b0:	4303      	orrs	r3, r0
 80130b2:	6960      	ldr	r0, [r4, #20]
 80130b4:	4303      	orrs	r3, r0
 80130b6:	69e0      	ldr	r0, [r4, #28]
 80130b8:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80130ba:	487a      	ldr	r0, [pc, #488]	; (80132a4 <UART_SetConfig+0x200>)
 80130bc:	4002      	ands	r2, r0
 80130be:	4313      	orrs	r3, r2
 80130c0:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80130c2:	6822      	ldr	r2, [r4, #0]
 80130c4:	6853      	ldr	r3, [r2, #4]
 80130c6:	4978      	ldr	r1, [pc, #480]	; (80132a8 <UART_SetConfig+0x204>)
 80130c8:	400b      	ands	r3, r1
 80130ca:	68e1      	ldr	r1, [r4, #12]
 80130cc:	430b      	orrs	r3, r1
 80130ce:	6053      	str	r3, [r2, #4]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 80130d0:	6821      	ldr	r1, [r4, #0]
 80130d2:	688a      	ldr	r2, [r1, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 80130d4:	69a3      	ldr	r3, [r4, #24]
 80130d6:	6a20      	ldr	r0, [r4, #32]
 80130d8:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 80130da:	4874      	ldr	r0, [pc, #464]	; (80132ac <UART_SetConfig+0x208>)
 80130dc:	4002      	ands	r2, r0
 80130de:	4313      	orrs	r3, r2
 80130e0:	608b      	str	r3, [r1, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 80130e2:	6825      	ldr	r5, [r4, #0]
 80130e4:	4b72      	ldr	r3, [pc, #456]	; (80132b0 <UART_SetConfig+0x20c>)
 80130e6:	429d      	cmp	r5, r3
 80130e8:	d021      	beq.n	801312e <UART_SetConfig+0x8a>
 80130ea:	4b72      	ldr	r3, [pc, #456]	; (80132b4 <UART_SetConfig+0x210>)
 80130ec:	429d      	cmp	r5, r3
 80130ee:	d03a      	beq.n	8013166 <UART_SetConfig+0xc2>
 80130f0:	4b71      	ldr	r3, [pc, #452]	; (80132b8 <UART_SetConfig+0x214>)
 80130f2:	429d      	cmp	r5, r3
 80130f4:	d061      	beq.n	80131ba <UART_SetConfig+0x116>
 80130f6:	4b71      	ldr	r3, [pc, #452]	; (80132bc <UART_SetConfig+0x218>)
 80130f8:	429d      	cmp	r5, r3
 80130fa:	d100      	bne.n	80130fe <UART_SetConfig+0x5a>
 80130fc:	e0a8      	b.n	8013250 <UART_SetConfig+0x1ac>
 80130fe:	4b70      	ldr	r3, [pc, #448]	; (80132c0 <UART_SetConfig+0x21c>)
 8013100:	429d      	cmp	r5, r3
 8013102:	d100      	bne.n	8013106 <UART_SetConfig+0x62>
 8013104:	e0a4      	b.n	8013250 <UART_SetConfig+0x1ac>
 8013106:	4b6f      	ldr	r3, [pc, #444]	; (80132c4 <UART_SetConfig+0x220>)
 8013108:	429d      	cmp	r5, r3
 801310a:	d100      	bne.n	801310e <UART_SetConfig+0x6a>
 801310c:	e0a0      	b.n	8013250 <UART_SetConfig+0x1ac>
 801310e:	4b6e      	ldr	r3, [pc, #440]	; (80132c8 <UART_SetConfig+0x224>)
 8013110:	429d      	cmp	r5, r3
 8013112:	d100      	bne.n	8013116 <UART_SetConfig+0x72>
 8013114:	e09c      	b.n	8013250 <UART_SetConfig+0x1ac>
 8013116:	4b6d      	ldr	r3, [pc, #436]	; (80132cc <UART_SetConfig+0x228>)
 8013118:	429d      	cmp	r5, r3
 801311a:	d100      	bne.n	801311e <UART_SetConfig+0x7a>
 801311c:	e098      	b.n	8013250 <UART_SetConfig+0x1ac>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801311e:	2380      	movs	r3, #128	; 0x80
 8013120:	021b      	lsls	r3, r3, #8
 8013122:	69e2      	ldr	r2, [r4, #28]
 8013124:	429a      	cmp	r2, r3
 8013126:	d100      	bne.n	801312a <UART_SetConfig+0x86>
 8013128:	e08c      	b.n	8013244 <UART_SetConfig+0x1a0>
 801312a:	2001      	movs	r0, #1
 801312c:	e089      	b.n	8013242 <UART_SetConfig+0x19e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 801312e:	4b68      	ldr	r3, [pc, #416]	; (80132d0 <UART_SetConfig+0x22c>)
 8013130:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013132:	2303      	movs	r3, #3
 8013134:	4013      	ands	r3, r2
 8013136:	2b02      	cmp	r3, #2
 8013138:	d100      	bne.n	801313c <UART_SetConfig+0x98>
 801313a:	e0a6      	b.n	801328a <UART_SetConfig+0x1e6>
 801313c:	d82f      	bhi.n	801319e <UART_SetConfig+0xfa>
 801313e:	2b00      	cmp	r3, #0
 8013140:	d069      	beq.n	8013216 <UART_SetConfig+0x172>
 8013142:	2b01      	cmp	r3, #1
 8013144:	d120      	bne.n	8013188 <UART_SetConfig+0xe4>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8013146:	2380      	movs	r3, #128	; 0x80
 8013148:	021b      	lsls	r3, r3, #8
 801314a:	69e2      	ldr	r2, [r4, #28]
 801314c:	429a      	cmp	r2, r3
 801314e:	d049      	beq.n	80131e4 <UART_SetConfig+0x140>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8013150:	f7ff fa34 	bl	80125bc <HAL_RCC_GetSysClockFreq>
 8013154:	6825      	ldr	r5, [r4, #0]
 8013156:	6861      	ldr	r1, [r4, #4]
 8013158:	f7ec fffa 	bl	8000150 <__udivsi3>
 801315c:	0400      	lsls	r0, r0, #16
 801315e:	0c00      	lsrs	r0, r0, #16
 8013160:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8013162:	2000      	movs	r0, #0
        break;
 8013164:	e06d      	b.n	8013242 <UART_SetConfig+0x19e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8013166:	4b5a      	ldr	r3, [pc, #360]	; (80132d0 <UART_SetConfig+0x22c>)
 8013168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801316a:	22c0      	movs	r2, #192	; 0xc0
 801316c:	0292      	lsls	r2, r2, #10
 801316e:	4013      	ands	r3, r2
 8013170:	2280      	movs	r2, #128	; 0x80
 8013172:	0292      	lsls	r2, r2, #10
 8013174:	4293      	cmp	r3, r2
 8013176:	d100      	bne.n	801317a <UART_SetConfig+0xd6>
 8013178:	e087      	b.n	801328a <UART_SetConfig+0x1e6>
 801317a:	d80c      	bhi.n	8013196 <UART_SetConfig+0xf2>
 801317c:	2b00      	cmp	r3, #0
 801317e:	d04a      	beq.n	8013216 <UART_SetConfig+0x172>
 8013180:	2280      	movs	r2, #128	; 0x80
 8013182:	0252      	lsls	r2, r2, #9
 8013184:	4293      	cmp	r3, r2
 8013186:	d0de      	beq.n	8013146 <UART_SetConfig+0xa2>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8013188:	2380      	movs	r3, #128	; 0x80
 801318a:	021b      	lsls	r3, r3, #8
 801318c:	69e2      	ldr	r2, [r4, #28]
 801318e:	429a      	cmp	r2, r3
 8013190:	d05b      	beq.n	801324a <UART_SetConfig+0x1a6>
        ret = HAL_ERROR;
 8013192:	2001      	movs	r0, #1
 8013194:	e055      	b.n	8013242 <UART_SetConfig+0x19e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8013196:	22c0      	movs	r2, #192	; 0xc0
 8013198:	0292      	lsls	r2, r2, #10
 801319a:	4293      	cmp	r3, r2
 801319c:	d1f4      	bne.n	8013188 <UART_SetConfig+0xe4>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801319e:	2380      	movs	r3, #128	; 0x80
 80131a0:	021b      	lsls	r3, r3, #8
 80131a2:	69e2      	ldr	r2, [r4, #28]
 80131a4:	429a      	cmp	r2, r3
 80131a6:	d02f      	beq.n	8013208 <UART_SetConfig+0x164>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate)); 
 80131a8:	6861      	ldr	r1, [r4, #4]
 80131aa:	484a      	ldr	r0, [pc, #296]	; (80132d4 <UART_SetConfig+0x230>)
 80131ac:	f7ec ffd0 	bl	8000150 <__udivsi3>
 80131b0:	0400      	lsls	r0, r0, #16
 80131b2:	0c00      	lsrs	r0, r0, #16
 80131b4:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 80131b6:	2000      	movs	r0, #0
        break;
 80131b8:	e043      	b.n	8013242 <UART_SetConfig+0x19e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80131ba:	4b45      	ldr	r3, [pc, #276]	; (80132d0 <UART_SetConfig+0x22c>)
 80131bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80131be:	22c0      	movs	r2, #192	; 0xc0
 80131c0:	0312      	lsls	r2, r2, #12
 80131c2:	4013      	ands	r3, r2
 80131c4:	2280      	movs	r2, #128	; 0x80
 80131c6:	0312      	lsls	r2, r2, #12
 80131c8:	4293      	cmp	r3, r2
 80131ca:	d051      	beq.n	8013270 <UART_SetConfig+0x1cc>
 80131cc:	d813      	bhi.n	80131f6 <UART_SetConfig+0x152>
 80131ce:	2b00      	cmp	r3, #0
 80131d0:	d021      	beq.n	8013216 <UART_SetConfig+0x172>
 80131d2:	2280      	movs	r2, #128	; 0x80
 80131d4:	02d2      	lsls	r2, r2, #11
 80131d6:	4293      	cmp	r3, r2
 80131d8:	d1d6      	bne.n	8013188 <UART_SetConfig+0xe4>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80131da:	2380      	movs	r3, #128	; 0x80
 80131dc:	021b      	lsls	r3, r3, #8
 80131de:	69e2      	ldr	r2, [r4, #28]
 80131e0:	429a      	cmp	r2, r3
 80131e2:	d1b5      	bne.n	8013150 <UART_SetConfig+0xac>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80131e4:	f7ff f9ea 	bl	80125bc <HAL_RCC_GetSysClockFreq>
 80131e8:	0040      	lsls	r0, r0, #1
 80131ea:	6861      	ldr	r1, [r4, #4]
 80131ec:	f7ec ffb0 	bl	8000150 <__udivsi3>
 80131f0:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 80131f2:	2000      	movs	r0, #0
        break;
 80131f4:	e01c      	b.n	8013230 <UART_SetConfig+0x18c>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80131f6:	22c0      	movs	r2, #192	; 0xc0
 80131f8:	0312      	lsls	r2, r2, #12
 80131fa:	4293      	cmp	r3, r2
 80131fc:	d1c4      	bne.n	8013188 <UART_SetConfig+0xe4>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80131fe:	2380      	movs	r3, #128	; 0x80
 8013200:	021b      	lsls	r3, r3, #8
 8013202:	69e2      	ldr	r2, [r4, #28]
 8013204:	429a      	cmp	r2, r3
 8013206:	d1cf      	bne.n	80131a8 <UART_SetConfig+0x104>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8013208:	6861      	ldr	r1, [r4, #4]
 801320a:	4833      	ldr	r0, [pc, #204]	; (80132d8 <UART_SetConfig+0x234>)
 801320c:	f7ec ffa0 	bl	8000150 <__udivsi3>
 8013210:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 8013212:	2000      	movs	r0, #0
        break;
 8013214:	e00c      	b.n	8013230 <UART_SetConfig+0x18c>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8013216:	2380      	movs	r3, #128	; 0x80
 8013218:	021b      	lsls	r3, r3, #8
 801321a:	69e2      	ldr	r2, [r4, #28]
 801321c:	429a      	cmp	r2, r3
 801321e:	d11c      	bne.n	801325a <UART_SetConfig+0x1b6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8013220:	f7ff fa30 	bl	8012684 <HAL_RCC_GetPCLK1Freq>
 8013224:	0040      	lsls	r0, r0, #1
 8013226:	6861      	ldr	r1, [r4, #4]
 8013228:	f7ec ff92 	bl	8000150 <__udivsi3>
 801322c:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 801322e:	2000      	movs	r0, #0
    brrtemp = usartdiv & 0xFFF0;
 8013230:	220f      	movs	r2, #15
 8013232:	0019      	movs	r1, r3
 8013234:	4391      	bics	r1, r2
 8013236:	000a      	movs	r2, r1
    huart->Instance->BRR = brrtemp;
 8013238:	6821      	ldr	r1, [r4, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000F) >> 1U);
 801323a:	071b      	lsls	r3, r3, #28
 801323c:	0f5b      	lsrs	r3, r3, #29
    huart->Instance->BRR = brrtemp;
 801323e:	4313      	orrs	r3, r2
 8013240:	60cb      	str	r3, [r1, #12]
}
 8013242:	bd70      	pop	{r4, r5, r6, pc}
        ret = HAL_ERROR;
 8013244:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000;
 8013246:	2300      	movs	r3, #0
 8013248:	e7f2      	b.n	8013230 <UART_SetConfig+0x18c>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801324a:	2001      	movs	r0, #1
 801324c:	2300      	movs	r3, #0
 801324e:	e7ef      	b.n	8013230 <UART_SetConfig+0x18c>
 8013250:	2380      	movs	r3, #128	; 0x80
 8013252:	021b      	lsls	r3, r3, #8
 8013254:	69e2      	ldr	r2, [r4, #28]
 8013256:	429a      	cmp	r2, r3
 8013258:	d0e2      	beq.n	8013220 <UART_SetConfig+0x17c>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 801325a:	f7ff fa13 	bl	8012684 <HAL_RCC_GetPCLK1Freq>
 801325e:	6825      	ldr	r5, [r4, #0]
 8013260:	6861      	ldr	r1, [r4, #4]
 8013262:	f7ec ff75 	bl	8000150 <__udivsi3>
 8013266:	0400      	lsls	r0, r0, #16
 8013268:	0c00      	lsrs	r0, r0, #16
 801326a:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 801326c:	2000      	movs	r0, #0
  return ret;
 801326e:	e7e8      	b.n	8013242 <UART_SetConfig+0x19e>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8013270:	2380      	movs	r3, #128	; 0x80
 8013272:	021b      	lsls	r3, r3, #8
 8013274:	69e2      	ldr	r2, [r4, #28]
 8013276:	429a      	cmp	r2, r3
 8013278:	d10c      	bne.n	8013294 <UART_SetConfig+0x1f0>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 801327a:	6861      	ldr	r1, [r4, #4]
 801327c:	2080      	movs	r0, #128	; 0x80
 801327e:	0240      	lsls	r0, r0, #9
 8013280:	f7ec ff66 	bl	8000150 <__udivsi3>
 8013284:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 8013286:	2000      	movs	r0, #0
        break;
 8013288:	e7d2      	b.n	8013230 <UART_SetConfig+0x18c>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801328a:	2380      	movs	r3, #128	; 0x80
 801328c:	021b      	lsls	r3, r3, #8
 801328e:	69e2      	ldr	r2, [r4, #28]
 8013290:	429a      	cmp	r2, r3
 8013292:	d0f2      	beq.n	801327a <UART_SetConfig+0x1d6>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate)); 
 8013294:	6861      	ldr	r1, [r4, #4]
 8013296:	2080      	movs	r0, #128	; 0x80
 8013298:	0200      	lsls	r0, r0, #8
 801329a:	f7ec ff59 	bl	8000150 <__udivsi3>
 801329e:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 80132a0:	2000      	movs	r0, #0
        break;
 80132a2:	e7ce      	b.n	8013242 <UART_SetConfig+0x19e>
 80132a4:	efff69f3 	.word	0xefff69f3
 80132a8:	ffffcfff 	.word	0xffffcfff
 80132ac:	fffff4ff 	.word	0xfffff4ff
 80132b0:	40013800 	.word	0x40013800
 80132b4:	40004400 	.word	0x40004400
 80132b8:	40004800 	.word	0x40004800
 80132bc:	40004c00 	.word	0x40004c00
 80132c0:	40005000 	.word	0x40005000
 80132c4:	40011400 	.word	0x40011400
 80132c8:	40011800 	.word	0x40011800
 80132cc:	40011c00 	.word	0x40011c00
 80132d0:	40021000 	.word	0x40021000
 80132d4:	007a1200 	.word	0x007a1200
 80132d8:	00f42400 	.word	0x00f42400

080132dc <UART_AdvFeatureConfig>:
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80132dc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80132de:	07db      	lsls	r3, r3, #31
 80132e0:	d506      	bpl.n	80132f0 <UART_AdvFeatureConfig+0x14>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80132e2:	6802      	ldr	r2, [r0, #0]
 80132e4:	6853      	ldr	r3, [r2, #4]
 80132e6:	492c      	ldr	r1, [pc, #176]	; (8013398 <UART_AdvFeatureConfig+0xbc>)
 80132e8:	400b      	ands	r3, r1
 80132ea:	6a81      	ldr	r1, [r0, #40]	; 0x28
 80132ec:	430b      	orrs	r3, r1
 80132ee:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80132f0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80132f2:	079b      	lsls	r3, r3, #30
 80132f4:	d506      	bpl.n	8013304 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80132f6:	6802      	ldr	r2, [r0, #0]
 80132f8:	6853      	ldr	r3, [r2, #4]
 80132fa:	4928      	ldr	r1, [pc, #160]	; (801339c <UART_AdvFeatureConfig+0xc0>)
 80132fc:	400b      	ands	r3, r1
 80132fe:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8013300:	430b      	orrs	r3, r1
 8013302:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8013304:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8013306:	075b      	lsls	r3, r3, #29
 8013308:	d506      	bpl.n	8013318 <UART_AdvFeatureConfig+0x3c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801330a:	6802      	ldr	r2, [r0, #0]
 801330c:	6853      	ldr	r3, [r2, #4]
 801330e:	4924      	ldr	r1, [pc, #144]	; (80133a0 <UART_AdvFeatureConfig+0xc4>)
 8013310:	400b      	ands	r3, r1
 8013312:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8013314:	430b      	orrs	r3, r1
 8013316:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8013318:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801331a:	071b      	lsls	r3, r3, #28
 801331c:	d506      	bpl.n	801332c <UART_AdvFeatureConfig+0x50>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 801331e:	6802      	ldr	r2, [r0, #0]
 8013320:	6853      	ldr	r3, [r2, #4]
 8013322:	4920      	ldr	r1, [pc, #128]	; (80133a4 <UART_AdvFeatureConfig+0xc8>)
 8013324:	400b      	ands	r3, r1
 8013326:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8013328:	430b      	orrs	r3, r1
 801332a:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 801332c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801332e:	06db      	lsls	r3, r3, #27
 8013330:	d506      	bpl.n	8013340 <UART_AdvFeatureConfig+0x64>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8013332:	6802      	ldr	r2, [r0, #0]
 8013334:	6893      	ldr	r3, [r2, #8]
 8013336:	491c      	ldr	r1, [pc, #112]	; (80133a8 <UART_AdvFeatureConfig+0xcc>)
 8013338:	400b      	ands	r3, r1
 801333a:	6b81      	ldr	r1, [r0, #56]	; 0x38
 801333c:	430b      	orrs	r3, r1
 801333e:	6093      	str	r3, [r2, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8013340:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8013342:	069b      	lsls	r3, r3, #26
 8013344:	d506      	bpl.n	8013354 <UART_AdvFeatureConfig+0x78>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8013346:	6802      	ldr	r2, [r0, #0]
 8013348:	6893      	ldr	r3, [r2, #8]
 801334a:	4918      	ldr	r1, [pc, #96]	; (80133ac <UART_AdvFeatureConfig+0xd0>)
 801334c:	400b      	ands	r3, r1
 801334e:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8013350:	430b      	orrs	r3, r1
 8013352:	6093      	str	r3, [r2, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8013354:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8013356:	065b      	lsls	r3, r3, #25
 8013358:	d50b      	bpl.n	8013372 <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 801335a:	6802      	ldr	r2, [r0, #0]
 801335c:	6853      	ldr	r3, [r2, #4]
 801335e:	4914      	ldr	r1, [pc, #80]	; (80133b0 <UART_AdvFeatureConfig+0xd4>)
 8013360:	400b      	ands	r3, r1
 8013362:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8013364:	430b      	orrs	r3, r1
 8013366:	6053      	str	r3, [r2, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8013368:	2380      	movs	r3, #128	; 0x80
 801336a:	035b      	lsls	r3, r3, #13
 801336c:	6c02      	ldr	r2, [r0, #64]	; 0x40
 801336e:	429a      	cmp	r2, r3
 8013370:	d00a      	beq.n	8013388 <UART_AdvFeatureConfig+0xac>
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8013372:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8013374:	061b      	lsls	r3, r3, #24
 8013376:	d506      	bpl.n	8013386 <UART_AdvFeatureConfig+0xaa>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8013378:	6802      	ldr	r2, [r0, #0]
 801337a:	6853      	ldr	r3, [r2, #4]
 801337c:	490d      	ldr	r1, [pc, #52]	; (80133b4 <UART_AdvFeatureConfig+0xd8>)
 801337e:	400b      	ands	r3, r1
 8013380:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8013382:	430b      	orrs	r3, r1
 8013384:	6053      	str	r3, [r2, #4]
}
 8013386:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8013388:	6802      	ldr	r2, [r0, #0]
 801338a:	6853      	ldr	r3, [r2, #4]
 801338c:	490a      	ldr	r1, [pc, #40]	; (80133b8 <UART_AdvFeatureConfig+0xdc>)
 801338e:	400b      	ands	r3, r1
 8013390:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8013392:	430b      	orrs	r3, r1
 8013394:	6053      	str	r3, [r2, #4]
 8013396:	e7ec      	b.n	8013372 <UART_AdvFeatureConfig+0x96>
 8013398:	fffdffff 	.word	0xfffdffff
 801339c:	fffeffff 	.word	0xfffeffff
 80133a0:	fffbffff 	.word	0xfffbffff
 80133a4:	ffff7fff 	.word	0xffff7fff
 80133a8:	ffffefff 	.word	0xffffefff
 80133ac:	ffffdfff 	.word	0xffffdfff
 80133b0:	ffefffff 	.word	0xffefffff
 80133b4:	fff7ffff 	.word	0xfff7ffff
 80133b8:	ff9fffff 	.word	0xff9fffff

080133bc <UART_WaitOnFlagUntilTimeout>:
{
 80133bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80133be:	46c6      	mov	lr, r8
 80133c0:	b500      	push	{lr}
 80133c2:	0007      	movs	r7, r0
 80133c4:	000c      	movs	r4, r1
 80133c6:	0016      	movs	r6, r2
 80133c8:	001d      	movs	r5, r3
  uint32_t tickstart = HAL_GetTick();
 80133ca:	f7fc fe31 	bl	8010030 <HAL_GetTick>
 80133ce:	4680      	mov	r8, r0
  if(Status == RESET)
 80133d0:	2e00      	cmp	r6, #0
 80133d2:	d029      	beq.n	8013428 <UART_WaitOnFlagUntilTimeout+0x6c>
    while(__HAL_UART_GET_FLAG(huart, Flag) != RESET)
 80133d4:	683b      	ldr	r3, [r7, #0]
 80133d6:	69da      	ldr	r2, [r3, #28]
 80133d8:	4022      	ands	r2, r4
 80133da:	42a2      	cmp	r2, r4
 80133dc:	d152      	bne.n	8013484 <UART_WaitOnFlagUntilTimeout+0xc8>
      if(Timeout != HAL_MAX_DELAY)
 80133de:	1c6a      	adds	r2, r5, #1
 80133e0:	d0f9      	beq.n	80133d6 <UART_WaitOnFlagUntilTimeout+0x1a>
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 80133e2:	2d00      	cmp	r5, #0
 80133e4:	d005      	beq.n	80133f2 <UART_WaitOnFlagUntilTimeout+0x36>
 80133e6:	f7fc fe23 	bl	8010030 <HAL_GetTick>
 80133ea:	4643      	mov	r3, r8
 80133ec:	1ac0      	subs	r0, r0, r3
 80133ee:	42a8      	cmp	r0, r5
 80133f0:	d9f0      	bls.n	80133d4 <UART_WaitOnFlagUntilTimeout+0x18>
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80133f2:	683a      	ldr	r2, [r7, #0]
 80133f4:	6813      	ldr	r3, [r2, #0]
 80133f6:	2180      	movs	r1, #128	; 0x80
 80133f8:	438b      	bics	r3, r1
 80133fa:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80133fc:	683a      	ldr	r2, [r7, #0]
 80133fe:	6813      	ldr	r3, [r2, #0]
 8013400:	3960      	subs	r1, #96	; 0x60
 8013402:	438b      	bics	r3, r1
 8013404:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8013406:	683a      	ldr	r2, [r7, #0]
 8013408:	6813      	ldr	r3, [r2, #0]
 801340a:	491f      	ldr	r1, [pc, #124]	; (8013488 <UART_WaitOnFlagUntilTimeout+0xcc>)
 801340c:	400b      	ands	r3, r1
 801340e:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8013410:	6839      	ldr	r1, [r7, #0]
 8013412:	688b      	ldr	r3, [r1, #8]
 8013414:	2201      	movs	r2, #1
 8013416:	4393      	bics	r3, r2
 8013418:	608b      	str	r3, [r1, #8]
          huart->State = HAL_UART_STATE_READY;
 801341a:	2369      	movs	r3, #105	; 0x69
 801341c:	54fa      	strb	r2, [r7, r3]
          __HAL_UNLOCK(huart);
 801341e:	3b01      	subs	r3, #1
 8013420:	2200      	movs	r2, #0
 8013422:	54fa      	strb	r2, [r7, r3]
          return HAL_TIMEOUT;
 8013424:	2003      	movs	r0, #3
 8013426:	e02a      	b.n	801347e <UART_WaitOnFlagUntilTimeout+0xc2>
    while(__HAL_UART_GET_FLAG(huart, Flag) == RESET)
 8013428:	683b      	ldr	r3, [r7, #0]
 801342a:	69d9      	ldr	r1, [r3, #28]
 801342c:	4021      	ands	r1, r4
 801342e:	42a1      	cmp	r1, r4
 8013430:	d024      	beq.n	801347c <UART_WaitOnFlagUntilTimeout+0xc0>
      if(Timeout != HAL_MAX_DELAY)
 8013432:	1c6a      	adds	r2, r5, #1
 8013434:	d0f9      	beq.n	801342a <UART_WaitOnFlagUntilTimeout+0x6e>
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8013436:	2d00      	cmp	r5, #0
 8013438:	d005      	beq.n	8013446 <UART_WaitOnFlagUntilTimeout+0x8a>
 801343a:	f7fc fdf9 	bl	8010030 <HAL_GetTick>
 801343e:	4643      	mov	r3, r8
 8013440:	1ac0      	subs	r0, r0, r3
 8013442:	42a8      	cmp	r0, r5
 8013444:	d9f0      	bls.n	8013428 <UART_WaitOnFlagUntilTimeout+0x6c>
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8013446:	683a      	ldr	r2, [r7, #0]
 8013448:	6813      	ldr	r3, [r2, #0]
 801344a:	2180      	movs	r1, #128	; 0x80
 801344c:	438b      	bics	r3, r1
 801344e:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8013450:	683a      	ldr	r2, [r7, #0]
 8013452:	6813      	ldr	r3, [r2, #0]
 8013454:	3960      	subs	r1, #96	; 0x60
 8013456:	438b      	bics	r3, r1
 8013458:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 801345a:	683a      	ldr	r2, [r7, #0]
 801345c:	6813      	ldr	r3, [r2, #0]
 801345e:	490a      	ldr	r1, [pc, #40]	; (8013488 <UART_WaitOnFlagUntilTimeout+0xcc>)
 8013460:	400b      	ands	r3, r1
 8013462:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8013464:	6839      	ldr	r1, [r7, #0]
 8013466:	688b      	ldr	r3, [r1, #8]
 8013468:	2201      	movs	r2, #1
 801346a:	4393      	bics	r3, r2
 801346c:	608b      	str	r3, [r1, #8]
          huart->State = HAL_UART_STATE_READY;
 801346e:	2369      	movs	r3, #105	; 0x69
 8013470:	54fa      	strb	r2, [r7, r3]
          __HAL_UNLOCK(huart);
 8013472:	3b01      	subs	r3, #1
 8013474:	2200      	movs	r2, #0
 8013476:	54fa      	strb	r2, [r7, r3]
          return HAL_TIMEOUT;
 8013478:	2003      	movs	r0, #3
 801347a:	e000      	b.n	801347e <UART_WaitOnFlagUntilTimeout+0xc2>
  return HAL_OK;
 801347c:	0030      	movs	r0, r6
}
 801347e:	bc80      	pop	{r7}
 8013480:	46b8      	mov	r8, r7
 8013482:	bdf0      	pop	{r4, r5, r6, r7, pc}
  return HAL_OK;
 8013484:	2000      	movs	r0, #0
 8013486:	e7fa      	b.n	801347e <UART_WaitOnFlagUntilTimeout+0xc2>
 8013488:	fffffeff 	.word	0xfffffeff

0801348c <HAL_UART_Transmit>:
{
 801348c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801348e:	46c6      	mov	lr, r8
 8013490:	b500      	push	{lr}
 8013492:	0004      	movs	r4, r0
 8013494:	000d      	movs	r5, r1
 8013496:	001f      	movs	r7, r3
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 8013498:	2369      	movs	r3, #105	; 0x69
 801349a:	5cc3      	ldrb	r3, [r0, r3]
 801349c:	2b01      	cmp	r3, #1
 801349e:	d003      	beq.n	80134a8 <HAL_UART_Transmit+0x1c>
 80134a0:	2369      	movs	r3, #105	; 0x69
 80134a2:	5cc3      	ldrb	r3, [r0, r3]
 80134a4:	2b22      	cmp	r3, #34	; 0x22
 80134a6:	d152      	bne.n	801354e <HAL_UART_Transmit+0xc2>
    if((pData == NULL ) || (Size == 0))
 80134a8:	2d00      	cmp	r5, #0
 80134aa:	d054      	beq.n	8013556 <HAL_UART_Transmit+0xca>
 80134ac:	2a00      	cmp	r2, #0
 80134ae:	d054      	beq.n	801355a <HAL_UART_Transmit+0xce>
    __HAL_LOCK(huart);
 80134b0:	2368      	movs	r3, #104	; 0x68
 80134b2:	5ce3      	ldrb	r3, [r4, r3]
 80134b4:	2b01      	cmp	r3, #1
 80134b6:	d052      	beq.n	801355e <HAL_UART_Transmit+0xd2>
 80134b8:	2368      	movs	r3, #104	; 0x68
 80134ba:	2101      	movs	r1, #1
 80134bc:	54e1      	strb	r1, [r4, r3]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80134be:	2300      	movs	r3, #0
 80134c0:	66e3      	str	r3, [r4, #108]	; 0x6c
    if(huart->State == HAL_UART_STATE_BUSY_RX)
 80134c2:	3369      	adds	r3, #105	; 0x69
 80134c4:	5ce3      	ldrb	r3, [r4, r3]
 80134c6:	2b22      	cmp	r3, #34	; 0x22
 80134c8:	d009      	beq.n	80134de <HAL_UART_Transmit+0x52>
      huart->State = HAL_UART_STATE_BUSY_TX;
 80134ca:	2369      	movs	r3, #105	; 0x69
 80134cc:	2112      	movs	r1, #18
 80134ce:	54e1      	strb	r1, [r4, r3]
    huart->TxXferSize = Size;
 80134d0:	2350      	movs	r3, #80	; 0x50
 80134d2:	52e2      	strh	r2, [r4, r3]
      huart->TxXferCount--;
 80134d4:	2652      	movs	r6, #82	; 0x52
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80134d6:	2380      	movs	r3, #128	; 0x80
 80134d8:	015b      	lsls	r3, r3, #5
 80134da:	4698      	mov	r8, r3
 80134dc:	e00a      	b.n	80134f4 <HAL_UART_Transmit+0x68>
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 80134de:	3347      	adds	r3, #71	; 0x47
 80134e0:	3131      	adds	r1, #49	; 0x31
 80134e2:	54e1      	strb	r1, [r4, r3]
 80134e4:	e7f4      	b.n	80134d0 <HAL_UART_Transmit+0x44>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFF);
 80134e6:	782b      	ldrb	r3, [r5, #0]
 80134e8:	6822      	ldr	r2, [r4, #0]
 80134ea:	8513      	strh	r3, [r2, #40]	; 0x28
 80134ec:	3501      	adds	r5, #1
    while(huart->TxXferCount > 0)
 80134ee:	5ba2      	ldrh	r2, [r4, r6]
 80134f0:	2a00      	cmp	r2, #0
 80134f2:	d016      	beq.n	8013522 <HAL_UART_Transmit+0x96>
      huart->TxXferCount--;
 80134f4:	3a01      	subs	r2, #1
 80134f6:	53a2      	strh	r2, [r4, r6]
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, Timeout) != HAL_OK)
 80134f8:	003b      	movs	r3, r7
 80134fa:	2200      	movs	r2, #0
 80134fc:	2180      	movs	r1, #128	; 0x80
 80134fe:	0020      	movs	r0, r4
 8013500:	f7ff ff5c 	bl	80133bc <UART_WaitOnFlagUntilTimeout>
 8013504:	2800      	cmp	r0, #0
 8013506:	d12c      	bne.n	8013562 <HAL_UART_Transmit+0xd6>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8013508:	68a3      	ldr	r3, [r4, #8]
 801350a:	4543      	cmp	r3, r8
 801350c:	d1eb      	bne.n	80134e6 <HAL_UART_Transmit+0x5a>
 801350e:	6923      	ldr	r3, [r4, #16]
 8013510:	2b00      	cmp	r3, #0
 8013512:	d1e8      	bne.n	80134e6 <HAL_UART_Transmit+0x5a>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FF);
 8013514:	882b      	ldrh	r3, [r5, #0]
 8013516:	05db      	lsls	r3, r3, #23
 8013518:	0ddb      	lsrs	r3, r3, #23
 801351a:	6822      	ldr	r2, [r4, #0]
 801351c:	8513      	strh	r3, [r2, #40]	; 0x28
        pData += 2;
 801351e:	3502      	adds	r5, #2
 8013520:	e7e5      	b.n	80134ee <HAL_UART_Transmit+0x62>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, Timeout) != HAL_OK)
 8013522:	003b      	movs	r3, r7
 8013524:	2140      	movs	r1, #64	; 0x40
 8013526:	0020      	movs	r0, r4
 8013528:	f7ff ff48 	bl	80133bc <UART_WaitOnFlagUntilTimeout>
 801352c:	2800      	cmp	r0, #0
 801352e:	d11a      	bne.n	8013566 <HAL_UART_Transmit+0xda>
    if(huart->State == HAL_UART_STATE_BUSY_TX_RX)
 8013530:	2369      	movs	r3, #105	; 0x69
 8013532:	5ce3      	ldrb	r3, [r4, r3]
 8013534:	2b32      	cmp	r3, #50	; 0x32
 8013536:	d006      	beq.n	8013546 <HAL_UART_Transmit+0xba>
      huart->State = HAL_UART_STATE_READY;
 8013538:	2369      	movs	r3, #105	; 0x69
 801353a:	2201      	movs	r2, #1
 801353c:	54e2      	strb	r2, [r4, r3]
    __HAL_UNLOCK(huart);
 801353e:	2368      	movs	r3, #104	; 0x68
 8013540:	2200      	movs	r2, #0
 8013542:	54e2      	strb	r2, [r4, r3]
    return HAL_OK;
 8013544:	e004      	b.n	8013550 <HAL_UART_Transmit+0xc4>
      huart->State = HAL_UART_STATE_BUSY_RX;
 8013546:	3337      	adds	r3, #55	; 0x37
 8013548:	2222      	movs	r2, #34	; 0x22
 801354a:	54e2      	strb	r2, [r4, r3]
 801354c:	e7f7      	b.n	801353e <HAL_UART_Transmit+0xb2>
    return HAL_BUSY;
 801354e:	2002      	movs	r0, #2
}
 8013550:	bc80      	pop	{r7}
 8013552:	46b8      	mov	r8, r7
 8013554:	bdf0      	pop	{r4, r5, r6, r7, pc}
      return  HAL_ERROR;
 8013556:	2001      	movs	r0, #1
 8013558:	e7fa      	b.n	8013550 <HAL_UART_Transmit+0xc4>
 801355a:	2001      	movs	r0, #1
 801355c:	e7f8      	b.n	8013550 <HAL_UART_Transmit+0xc4>
    __HAL_LOCK(huart);
 801355e:	2002      	movs	r0, #2
 8013560:	e7f6      	b.n	8013550 <HAL_UART_Transmit+0xc4>
        return HAL_TIMEOUT;
 8013562:	2003      	movs	r0, #3
 8013564:	e7f4      	b.n	8013550 <HAL_UART_Transmit+0xc4>
      return HAL_TIMEOUT;
 8013566:	2003      	movs	r0, #3
 8013568:	e7f2      	b.n	8013550 <HAL_UART_Transmit+0xc4>
	...

0801356c <UART_CheckIdleState>:
{
 801356c:	b510      	push	{r4, lr}
 801356e:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013570:	2300      	movs	r3, #0
 8013572:	66c3      	str	r3, [r0, #108]	; 0x6c
  if (IS_UART_WAKEUP_INSTANCE(huart->Instance))
 8013574:	6803      	ldr	r3, [r0, #0]
 8013576:	4a18      	ldr	r2, [pc, #96]	; (80135d8 <UART_CheckIdleState+0x6c>)
 8013578:	4293      	cmp	r3, r2
 801357a:	d005      	beq.n	8013588 <UART_CheckIdleState+0x1c>
 801357c:	4a17      	ldr	r2, [pc, #92]	; (80135dc <UART_CheckIdleState+0x70>)
 801357e:	4293      	cmp	r3, r2
 8013580:	d002      	beq.n	8013588 <UART_CheckIdleState+0x1c>
 8013582:	4a17      	ldr	r2, [pc, #92]	; (80135e0 <UART_CheckIdleState+0x74>)
 8013584:	4293      	cmp	r3, r2
 8013586:	d106      	bne.n	8013596 <UART_CheckIdleState+0x2a>
    if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8013588:	681b      	ldr	r3, [r3, #0]
 801358a:	071b      	lsls	r3, r3, #28
 801358c:	d40b      	bmi.n	80135a6 <UART_CheckIdleState+0x3a>
    if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801358e:	6823      	ldr	r3, [r4, #0]
 8013590:	681b      	ldr	r3, [r3, #0]
 8013592:	075b      	lsls	r3, r3, #29
 8013594:	d413      	bmi.n	80135be <UART_CheckIdleState+0x52>
  huart->State= HAL_UART_STATE_READY;
 8013596:	2369      	movs	r3, #105	; 0x69
 8013598:	2201      	movs	r2, #1
 801359a:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(huart);
 801359c:	3b01      	subs	r3, #1
 801359e:	2200      	movs	r2, #0
 80135a0:	54e2      	strb	r2, [r4, r3]
  return HAL_OK;
 80135a2:	2000      	movs	r0, #0
}
 80135a4:	bd10      	pop	{r4, pc}
      if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, UART_TEACK_REACK_TIMEOUT) != HAL_OK)
 80135a6:	23fa      	movs	r3, #250	; 0xfa
 80135a8:	2180      	movs	r1, #128	; 0x80
 80135aa:	009b      	lsls	r3, r3, #2
 80135ac:	2200      	movs	r2, #0
 80135ae:	0389      	lsls	r1, r1, #14
 80135b0:	0020      	movs	r0, r4
 80135b2:	f7ff ff03 	bl	80133bc <UART_WaitOnFlagUntilTimeout>
 80135b6:	2800      	cmp	r0, #0
 80135b8:	d0e9      	beq.n	801358e <UART_CheckIdleState+0x22>
        return HAL_TIMEOUT;
 80135ba:	2003      	movs	r0, #3
 80135bc:	e7f2      	b.n	80135a4 <UART_CheckIdleState+0x38>
      if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET,  UART_TEACK_REACK_TIMEOUT) != HAL_OK)
 80135be:	23fa      	movs	r3, #250	; 0xfa
 80135c0:	2180      	movs	r1, #128	; 0x80
 80135c2:	009b      	lsls	r3, r3, #2
 80135c4:	2200      	movs	r2, #0
 80135c6:	03c9      	lsls	r1, r1, #15
 80135c8:	0020      	movs	r0, r4
 80135ca:	f7ff fef7 	bl	80133bc <UART_WaitOnFlagUntilTimeout>
 80135ce:	2800      	cmp	r0, #0
 80135d0:	d0e1      	beq.n	8013596 <UART_CheckIdleState+0x2a>
        return HAL_TIMEOUT;
 80135d2:	2003      	movs	r0, #3
 80135d4:	e7e6      	b.n	80135a4 <UART_CheckIdleState+0x38>
 80135d6:	46c0      	nop			; (mov r8, r8)
 80135d8:	40013800 	.word	0x40013800
 80135dc:	40004400 	.word	0x40004400
 80135e0:	40004800 	.word	0x40004800

080135e4 <HAL_UART_Init>:
{
 80135e4:	b510      	push	{r4, lr}
 80135e6:	1e04      	subs	r4, r0, #0
  if(huart == NULL)
 80135e8:	d030      	beq.n	801364c <HAL_UART_Init+0x68>
  if(huart->State == HAL_UART_STATE_RESET)
 80135ea:	2369      	movs	r3, #105	; 0x69
 80135ec:	5cc3      	ldrb	r3, [r0, r3]
 80135ee:	2b00      	cmp	r3, #0
 80135f0:	d022      	beq.n	8013638 <HAL_UART_Init+0x54>
  huart->State = HAL_UART_STATE_BUSY;
 80135f2:	2369      	movs	r3, #105	; 0x69
 80135f4:	2202      	movs	r2, #2
 80135f6:	54e2      	strb	r2, [r4, r3]
  __HAL_UART_DISABLE(huart);
 80135f8:	6822      	ldr	r2, [r4, #0]
 80135fa:	6813      	ldr	r3, [r2, #0]
 80135fc:	2101      	movs	r1, #1
 80135fe:	438b      	bics	r3, r1
 8013600:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8013602:	0020      	movs	r0, r4
 8013604:	f7ff fd4e 	bl	80130a4 <UART_SetConfig>
 8013608:	2801      	cmp	r0, #1
 801360a:	d014      	beq.n	8013636 <HAL_UART_Init+0x52>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 801360c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801360e:	2b00      	cmp	r3, #0
 8013610:	d118      	bne.n	8013644 <HAL_UART_Init+0x60>
  huart->Instance->CR2 &= ~(USART_CR2_LINEN | USART_CR2_CLKEN);
 8013612:	6822      	ldr	r2, [r4, #0]
 8013614:	6853      	ldr	r3, [r2, #4]
 8013616:	490e      	ldr	r1, [pc, #56]	; (8013650 <HAL_UART_Init+0x6c>)
 8013618:	400b      	ands	r3, r1
 801361a:	6053      	str	r3, [r2, #4]
  huart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 801361c:	6822      	ldr	r2, [r4, #0]
 801361e:	6893      	ldr	r3, [r2, #8]
 8013620:	212a      	movs	r1, #42	; 0x2a
 8013622:	438b      	bics	r3, r1
 8013624:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8013626:	6822      	ldr	r2, [r4, #0]
 8013628:	6813      	ldr	r3, [r2, #0]
 801362a:	3929      	subs	r1, #41	; 0x29
 801362c:	430b      	orrs	r3, r1
 801362e:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8013630:	0020      	movs	r0, r4
 8013632:	f7ff ff9b 	bl	801356c <UART_CheckIdleState>
}
 8013636:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8013638:	3368      	adds	r3, #104	; 0x68
 801363a:	2200      	movs	r2, #0
 801363c:	54c2      	strb	r2, [r0, r3]
    HAL_UART_MspInit(huart);
 801363e:	f7fa fa1b 	bl	800da78 <HAL_UART_MspInit>
 8013642:	e7d6      	b.n	80135f2 <HAL_UART_Init+0xe>
    UART_AdvFeatureConfig(huart);
 8013644:	0020      	movs	r0, r4
 8013646:	f7ff fe49 	bl	80132dc <UART_AdvFeatureConfig>
 801364a:	e7e2      	b.n	8013612 <HAL_UART_Init+0x2e>
    return HAL_ERROR;
 801364c:	2001      	movs	r0, #1
 801364e:	e7f2      	b.n	8013636 <HAL_UART_Init+0x52>
 8013650:	ffffb7ff 	.word	0xffffb7ff

08013654 <UART_Transmit_IT>:
  */
HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;

  if ((huart->State == HAL_UART_STATE_BUSY_TX) || (huart->State == HAL_UART_STATE_BUSY_TX_RX))
 8013654:	2369      	movs	r3, #105	; 0x69
 8013656:	5cc3      	ldrb	r3, [r0, r3]
 8013658:	2b12      	cmp	r3, #18
 801365a:	d003      	beq.n	8013664 <UART_Transmit_IT+0x10>
 801365c:	2369      	movs	r3, #105	; 0x69
 801365e:	5cc3      	ldrb	r3, [r0, r3]
 8013660:	2b32      	cmp	r3, #50	; 0x32
 8013662:	d12d      	bne.n	80136c0 <UART_Transmit_IT+0x6c>
  {

    if(huart->TxXferCount == 0)
 8013664:	2352      	movs	r3, #82	; 0x52
 8013666:	5ac3      	ldrh	r3, [r0, r3]
 8013668:	2b00      	cmp	r3, #0
 801366a:	d10b      	bne.n	8013684 <UART_Transmit_IT+0x30>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 801366c:	6802      	ldr	r2, [r0, #0]
 801366e:	6813      	ldr	r3, [r2, #0]
 8013670:	2180      	movs	r1, #128	; 0x80
 8013672:	438b      	bics	r3, r1
 8013674:	6013      	str	r3, [r2, #0]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8013676:	6802      	ldr	r2, [r0, #0]
 8013678:	6813      	ldr	r3, [r2, #0]
 801367a:	3940      	subs	r1, #64	; 0x40
 801367c:	430b      	orrs	r3, r1
 801367e:	6013      	str	r3, [r2, #0]

      return HAL_OK;
 8013680:	2000      	movs	r0, #0
 8013682:	e00f      	b.n	80136a4 <UART_Transmit_IT+0x50>
    }
    else
    {
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8013684:	2380      	movs	r3, #128	; 0x80
 8013686:	015b      	lsls	r3, r3, #5
 8013688:	6882      	ldr	r2, [r0, #8]
 801368a:	429a      	cmp	r2, r3
 801368c:	d00b      	beq.n	80136a6 <UART_Transmit_IT+0x52>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FF);
        huart->pTxBuffPtr += 2;
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFF);
 801368e:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8013690:	1c5a      	adds	r2, r3, #1
 8013692:	64c2      	str	r2, [r0, #76]	; 0x4c
 8013694:	781b      	ldrb	r3, [r3, #0]
 8013696:	6802      	ldr	r2, [r0, #0]
 8013698:	8513      	strh	r3, [r2, #40]	; 0x28
      }

      huart->TxXferCount--;
 801369a:	2252      	movs	r2, #82	; 0x52
 801369c:	5a83      	ldrh	r3, [r0, r2]
 801369e:	3b01      	subs	r3, #1
 80136a0:	5283      	strh	r3, [r0, r2]

      return HAL_OK;
 80136a2:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 80136a4:	4770      	bx	lr
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80136a6:	6903      	ldr	r3, [r0, #16]
 80136a8:	2b00      	cmp	r3, #0
 80136aa:	d1f0      	bne.n	801368e <UART_Transmit_IT+0x3a>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FF);
 80136ac:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80136ae:	881b      	ldrh	r3, [r3, #0]
 80136b0:	05db      	lsls	r3, r3, #23
 80136b2:	0ddb      	lsrs	r3, r3, #23
 80136b4:	6802      	ldr	r2, [r0, #0]
 80136b6:	8513      	strh	r3, [r2, #40]	; 0x28
        huart->pTxBuffPtr += 2;
 80136b8:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80136ba:	3302      	adds	r3, #2
 80136bc:	64c3      	str	r3, [r0, #76]	; 0x4c
 80136be:	e7ec      	b.n	801369a <UART_Transmit_IT+0x46>
    return HAL_BUSY;
 80136c0:	2002      	movs	r0, #2
 80136c2:	e7ef      	b.n	80136a4 <UART_Transmit_IT+0x50>

080136c4 <UART_EndTransmit_IT>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80136c4:	b510      	push	{r4, lr}
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80136c6:	6802      	ldr	r2, [r0, #0]
 80136c8:	6813      	ldr	r3, [r2, #0]
 80136ca:	2140      	movs	r1, #64	; 0x40
 80136cc:	438b      	bics	r3, r1
 80136ce:	6013      	str	r3, [r2, #0]

  /* Check if a receive process is ongoing or not */
  if(huart->State == HAL_UART_STATE_BUSY_TX_RX)
 80136d0:	2369      	movs	r3, #105	; 0x69
 80136d2:	5cc3      	ldrb	r3, [r0, r3]
 80136d4:	2b32      	cmp	r3, #50	; 0x32
 80136d6:	d00a      	beq.n	80136ee <UART_EndTransmit_IT+0x2a>
    huart->State = HAL_UART_STATE_BUSY_RX;
  }
  else
  {
    /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80136d8:	6801      	ldr	r1, [r0, #0]
 80136da:	688b      	ldr	r3, [r1, #8]
 80136dc:	2201      	movs	r2, #1
 80136de:	4393      	bics	r3, r2
 80136e0:	608b      	str	r3, [r1, #8]

    huart->State = HAL_UART_STATE_READY;
 80136e2:	2369      	movs	r3, #105	; 0x69
 80136e4:	54c2      	strb	r2, [r0, r3]
  }

  HAL_UART_TxCpltCallback(huart);
 80136e6:	f7f9 fee5 	bl	800d4b4 <HAL_UART_TxCpltCallback>

  return HAL_OK;
}
 80136ea:	2000      	movs	r0, #0
 80136ec:	bd10      	pop	{r4, pc}
    huart->State = HAL_UART_STATE_BUSY_RX;
 80136ee:	3337      	adds	r3, #55	; 0x37
 80136f0:	2222      	movs	r2, #34	; 0x22
 80136f2:	54c2      	strb	r2, [r0, r3]
 80136f4:	e7f7      	b.n	80136e6 <UART_EndTransmit_IT+0x22>
	...

080136f8 <UART_Receive_IT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param  huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80136f8:	b510      	push	{r4, lr}
 80136fa:	0003      	movs	r3, r0
  uint16_t* tmp;
  uint16_t uhMask = huart->Mask;

  if((huart->State == HAL_UART_STATE_BUSY_RX) || (huart->State == HAL_UART_STATE_BUSY_TX_RX))
 80136fc:	2269      	movs	r2, #105	; 0x69
 80136fe:	5c82      	ldrb	r2, [r0, r2]
 8013700:	2a22      	cmp	r2, #34	; 0x22
 8013702:	d003      	beq.n	801370c <UART_Receive_IT+0x14>
 8013704:	2269      	movs	r2, #105	; 0x69
 8013706:	5c82      	ldrb	r2, [r0, r2]
 8013708:	2a32      	cmp	r2, #50	; 0x32
 801370a:	d13f      	bne.n	801378c <UART_Receive_IT+0x94>
  uint16_t uhMask = huart->Mask;
 801370c:	225c      	movs	r2, #92	; 0x5c
 801370e:	5a98      	ldrh	r0, [r3, r2]
  {

    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8013710:	2180      	movs	r1, #128	; 0x80
 8013712:	0149      	lsls	r1, r1, #5
 8013714:	689a      	ldr	r2, [r3, #8]
 8013716:	428a      	cmp	r2, r1
 8013718:	d028      	beq.n	801376c <UART_Receive_IT+0x74>
      *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
      huart->pRxBuffPtr +=2;
    }
    else
    {
      *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 801371a:	681a      	ldr	r2, [r3, #0]
 801371c:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 801371e:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8013720:	1c4c      	adds	r4, r1, #1
 8013722:	655c      	str	r4, [r3, #84]	; 0x54
 8013724:	4002      	ands	r2, r0
 8013726:	700a      	strb	r2, [r1, #0]
    }

    if(--huart->RxXferCount == 0)
 8013728:	215a      	movs	r1, #90	; 0x5a
 801372a:	5a5a      	ldrh	r2, [r3, r1]
 801372c:	3a01      	subs	r2, #1
 801372e:	b292      	uxth	r2, r2
 8013730:	525a      	strh	r2, [r3, r1]
      HAL_UART_RxCpltCallback(huart);

      return HAL_OK;
    }

    return HAL_OK;
 8013732:	2000      	movs	r0, #0
    if(--huart->RxXferCount == 0)
 8013734:	2a00      	cmp	r2, #0
 8013736:	d118      	bne.n	801376a <UART_Receive_IT+0x72>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8013738:	6819      	ldr	r1, [r3, #0]
 801373a:	680a      	ldr	r2, [r1, #0]
 801373c:	3020      	adds	r0, #32
 801373e:	4382      	bics	r2, r0
 8013740:	600a      	str	r2, [r1, #0]
      if(huart->State == HAL_UART_STATE_BUSY_TX_RX)
 8013742:	2269      	movs	r2, #105	; 0x69
 8013744:	5c9a      	ldrb	r2, [r3, r2]
 8013746:	2a32      	cmp	r2, #50	; 0x32
 8013748:	d01c      	beq.n	8013784 <UART_Receive_IT+0x8c>
        __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 801374a:	6819      	ldr	r1, [r3, #0]
 801374c:	680a      	ldr	r2, [r1, #0]
 801374e:	4810      	ldr	r0, [pc, #64]	; (8013790 <UART_Receive_IT+0x98>)
 8013750:	4002      	ands	r2, r0
 8013752:	600a      	str	r2, [r1, #0]
        __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8013754:	6818      	ldr	r0, [r3, #0]
 8013756:	6882      	ldr	r2, [r0, #8]
 8013758:	2101      	movs	r1, #1
 801375a:	438a      	bics	r2, r1
 801375c:	6082      	str	r2, [r0, #8]
        huart->State = HAL_UART_STATE_READY;
 801375e:	2269      	movs	r2, #105	; 0x69
 8013760:	5499      	strb	r1, [r3, r2]
      HAL_UART_RxCpltCallback(huart);
 8013762:	0018      	movs	r0, r3
 8013764:	f7f9 fee4 	bl	800d530 <HAL_UART_RxCpltCallback>
      return HAL_OK;
 8013768:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 801376a:	bd10      	pop	{r4, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801376c:	691a      	ldr	r2, [r3, #16]
 801376e:	2a00      	cmp	r2, #0
 8013770:	d1d3      	bne.n	801371a <UART_Receive_IT+0x22>
      *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 8013772:	681a      	ldr	r2, [r3, #0]
 8013774:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8013776:	4002      	ands	r2, r0
 8013778:	6d59      	ldr	r1, [r3, #84]	; 0x54
 801377a:	800a      	strh	r2, [r1, #0]
      huart->pRxBuffPtr +=2;
 801377c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801377e:	3202      	adds	r2, #2
 8013780:	655a      	str	r2, [r3, #84]	; 0x54
 8013782:	e7d1      	b.n	8013728 <UART_Receive_IT+0x30>
        huart->State = HAL_UART_STATE_BUSY_TX;
 8013784:	3237      	adds	r2, #55	; 0x37
 8013786:	2112      	movs	r1, #18
 8013788:	5499      	strb	r1, [r3, r2]
 801378a:	e7ea      	b.n	8013762 <UART_Receive_IT+0x6a>
    return HAL_BUSY;
 801378c:	2002      	movs	r0, #2
 801378e:	e7ec      	b.n	801376a <UART_Receive_IT+0x72>
 8013790:	fffffeff 	.word	0xfffffeff

08013794 <HAL_UARTEx_WakeupCallback>:
 __weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file
   */ 
}
 8013794:	4770      	bx	lr

08013796 <HAL_UART_IRQHandler>:
{
 8013796:	b510      	push	{r4, lr}
 8013798:	0004      	movs	r4, r0
  if((__HAL_UART_GET_IT(huart, UART_IT_PE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_PE) != RESET))
 801379a:	6803      	ldr	r3, [r0, #0]
 801379c:	69da      	ldr	r2, [r3, #28]
 801379e:	07d2      	lsls	r2, r2, #31
 80137a0:	d509      	bpl.n	80137b6 <HAL_UART_IRQHandler+0x20>
 80137a2:	681a      	ldr	r2, [r3, #0]
 80137a4:	05d2      	lsls	r2, r2, #23
 80137a6:	d506      	bpl.n	80137b6 <HAL_UART_IRQHandler+0x20>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_PEF);
 80137a8:	2201      	movs	r2, #1
 80137aa:	621a      	str	r2, [r3, #32]
    huart->ErrorCode |= HAL_UART_ERROR_PE;
 80137ac:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 80137ae:	4313      	orrs	r3, r2
 80137b0:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->State = HAL_UART_STATE_READY;
 80137b2:	2369      	movs	r3, #105	; 0x69
 80137b4:	54c2      	strb	r2, [r0, r3]
  if((__HAL_UART_GET_IT(huart, UART_IT_FE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR) != RESET))
 80137b6:	6823      	ldr	r3, [r4, #0]
 80137b8:	69da      	ldr	r2, [r3, #28]
 80137ba:	0792      	lsls	r2, r2, #30
 80137bc:	d50b      	bpl.n	80137d6 <HAL_UART_IRQHandler+0x40>
 80137be:	689a      	ldr	r2, [r3, #8]
 80137c0:	07d2      	lsls	r2, r2, #31
 80137c2:	d508      	bpl.n	80137d6 <HAL_UART_IRQHandler+0x40>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_FEF);
 80137c4:	2202      	movs	r2, #2
 80137c6:	621a      	str	r2, [r3, #32]
    huart->ErrorCode |= HAL_UART_ERROR_FE;
 80137c8:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80137ca:	3202      	adds	r2, #2
 80137cc:	4313      	orrs	r3, r2
 80137ce:	66e3      	str	r3, [r4, #108]	; 0x6c
    huart->State = HAL_UART_STATE_READY;
 80137d0:	2369      	movs	r3, #105	; 0x69
 80137d2:	3a03      	subs	r2, #3
 80137d4:	54e2      	strb	r2, [r4, r3]
  if((__HAL_UART_GET_IT(huart, UART_IT_NE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR) != RESET))
 80137d6:	6823      	ldr	r3, [r4, #0]
 80137d8:	69da      	ldr	r2, [r3, #28]
 80137da:	0752      	lsls	r2, r2, #29
 80137dc:	d50b      	bpl.n	80137f6 <HAL_UART_IRQHandler+0x60>
 80137de:	689a      	ldr	r2, [r3, #8]
 80137e0:	07d2      	lsls	r2, r2, #31
 80137e2:	d508      	bpl.n	80137f6 <HAL_UART_IRQHandler+0x60>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_NEF);
 80137e4:	2204      	movs	r2, #4
 80137e6:	621a      	str	r2, [r3, #32]
    huart->ErrorCode |= HAL_UART_ERROR_NE;
 80137e8:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80137ea:	3a02      	subs	r2, #2
 80137ec:	4313      	orrs	r3, r2
 80137ee:	66e3      	str	r3, [r4, #108]	; 0x6c
    huart->State = HAL_UART_STATE_READY;
 80137f0:	2369      	movs	r3, #105	; 0x69
 80137f2:	3a01      	subs	r2, #1
 80137f4:	54e2      	strb	r2, [r4, r3]
  if((__HAL_UART_GET_IT(huart, UART_IT_ORE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR) != RESET))
 80137f6:	6823      	ldr	r3, [r4, #0]
 80137f8:	69da      	ldr	r2, [r3, #28]
 80137fa:	0712      	lsls	r2, r2, #28
 80137fc:	d50a      	bpl.n	8013814 <HAL_UART_IRQHandler+0x7e>
 80137fe:	689a      	ldr	r2, [r3, #8]
 8013800:	07d2      	lsls	r2, r2, #31
 8013802:	d507      	bpl.n	8013814 <HAL_UART_IRQHandler+0x7e>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_OREF);
 8013804:	2208      	movs	r2, #8
 8013806:	621a      	str	r2, [r3, #32]
    huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8013808:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 801380a:	4313      	orrs	r3, r2
 801380c:	66e3      	str	r3, [r4, #108]	; 0x6c
    huart->State = HAL_UART_STATE_READY;
 801380e:	2369      	movs	r3, #105	; 0x69
 8013810:	3a07      	subs	r2, #7
 8013812:	54e2      	strb	r2, [r4, r3]
  if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8013814:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8013816:	2b00      	cmp	r3, #0
 8013818:	d11c      	bne.n	8013854 <HAL_UART_IRQHandler+0xbe>
  if((__HAL_UART_GET_IT(huart, UART_IT_WUF) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_WUF) != RESET))
 801381a:	6823      	ldr	r3, [r4, #0]
 801381c:	69da      	ldr	r2, [r3, #28]
 801381e:	02d2      	lsls	r2, r2, #11
 8013820:	d502      	bpl.n	8013828 <HAL_UART_IRQHandler+0x92>
 8013822:	689a      	ldr	r2, [r3, #8]
 8013824:	0252      	lsls	r2, r2, #9
 8013826:	d419      	bmi.n	801385c <HAL_UART_IRQHandler+0xc6>
  if((__HAL_UART_GET_IT(huart, UART_IT_RXNE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_RXNE) != RESET))
 8013828:	6823      	ldr	r3, [r4, #0]
 801382a:	69da      	ldr	r2, [r3, #28]
 801382c:	0692      	lsls	r2, r2, #26
 801382e:	d502      	bpl.n	8013836 <HAL_UART_IRQHandler+0xa0>
 8013830:	681b      	ldr	r3, [r3, #0]
 8013832:	069b      	lsls	r3, r3, #26
 8013834:	d41c      	bmi.n	8013870 <HAL_UART_IRQHandler+0xda>
 if((__HAL_UART_GET_IT(huart, UART_IT_TXE) != RESET) &&(__HAL_UART_GET_IT_SOURCE(huart, UART_IT_TXE) != RESET))
 8013836:	6823      	ldr	r3, [r4, #0]
 8013838:	69da      	ldr	r2, [r3, #28]
 801383a:	0612      	lsls	r2, r2, #24
 801383c:	d502      	bpl.n	8013844 <HAL_UART_IRQHandler+0xae>
 801383e:	681b      	ldr	r3, [r3, #0]
 8013840:	061b      	lsls	r3, r3, #24
 8013842:	d41e      	bmi.n	8013882 <HAL_UART_IRQHandler+0xec>
 if((__HAL_UART_GET_IT(huart, UART_IT_TC) != RESET) &&(__HAL_UART_GET_IT_SOURCE(huart, UART_IT_TC) != RESET))
 8013844:	6823      	ldr	r3, [r4, #0]
 8013846:	69da      	ldr	r2, [r3, #28]
 8013848:	0652      	lsls	r2, r2, #25
 801384a:	d502      	bpl.n	8013852 <HAL_UART_IRQHandler+0xbc>
 801384c:	681b      	ldr	r3, [r3, #0]
 801384e:	065b      	lsls	r3, r3, #25
 8013850:	d41b      	bmi.n	801388a <HAL_UART_IRQHandler+0xf4>
}
 8013852:	bd10      	pop	{r4, pc}
    HAL_UART_ErrorCallback(huart);
 8013854:	0020      	movs	r0, r4
 8013856:	f7f9 fe45 	bl	800d4e4 <HAL_UART_ErrorCallback>
 801385a:	e7de      	b.n	801381a <HAL_UART_IRQHandler+0x84>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_WUF);
 801385c:	2280      	movs	r2, #128	; 0x80
 801385e:	0352      	lsls	r2, r2, #13
 8013860:	621a      	str	r2, [r3, #32]
    huart->State = HAL_UART_STATE_READY;
 8013862:	2369      	movs	r3, #105	; 0x69
 8013864:	2201      	movs	r2, #1
 8013866:	54e2      	strb	r2, [r4, r3]
    HAL_UARTEx_WakeupCallback(huart);
 8013868:	0020      	movs	r0, r4
 801386a:	f7ff ff93 	bl	8013794 <HAL_UARTEx_WakeupCallback>
 801386e:	e7db      	b.n	8013828 <HAL_UART_IRQHandler+0x92>
    UART_Receive_IT(huart);
 8013870:	0020      	movs	r0, r4
 8013872:	f7ff ff41 	bl	80136f8 <UART_Receive_IT>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8013876:	6822      	ldr	r2, [r4, #0]
 8013878:	6993      	ldr	r3, [r2, #24]
 801387a:	2108      	movs	r1, #8
 801387c:	430b      	orrs	r3, r1
 801387e:	6193      	str	r3, [r2, #24]
 8013880:	e7d9      	b.n	8013836 <HAL_UART_IRQHandler+0xa0>
    UART_Transmit_IT(huart);
 8013882:	0020      	movs	r0, r4
 8013884:	f7ff fee6 	bl	8013654 <UART_Transmit_IT>
 8013888:	e7dc      	b.n	8013844 <HAL_UART_IRQHandler+0xae>
    UART_EndTransmit_IT(huart);
 801388a:	0020      	movs	r0, r4
 801388c:	f7ff ff1a 	bl	80136c4 <UART_EndTransmit_IT>
}
 8013890:	e7df      	b.n	8013852 <HAL_UART_IRQHandler+0xbc>
	...

08013894 <VL53L0X_SetDeviceMode>:
{
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;

	LOG_FUNCTION_START("%d", (int)DeviceMode);

	switch (DeviceMode) {
 8013894:	2915      	cmp	r1, #21
 8013896:	d807      	bhi.n	80138a8 <VL53L0X_SetDeviceMode+0x14>
 8013898:	2301      	movs	r3, #1
 801389a:	408b      	lsls	r3, r1
 801389c:	4a05      	ldr	r2, [pc, #20]	; (80138b4 <VL53L0X_SetDeviceMode+0x20>)
 801389e:	4213      	tst	r3, r2
 80138a0:	d005      	beq.n	80138ae <VL53L0X_SetDeviceMode+0x1a>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
	case VL53L0X_DEVICEMODE_GPIO_DRIVE:
	case VL53L0X_DEVICEMODE_GPIO_OSC:
		/* Supported modes */
		VL53L0X_SETPARAMETERFIELD(Dev, DeviceMode, DeviceMode);
 80138a2:	7401      	strb	r1, [r0, #16]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80138a4:	2000      	movs	r0, #0
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
 80138a6:	4770      	bx	lr
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80138a8:	2008      	movs	r0, #8
 80138aa:	4240      	negs	r0, r0
 80138ac:	e7fb      	b.n	80138a6 <VL53L0X_SetDeviceMode+0x12>
 80138ae:	2008      	movs	r0, #8
 80138b0:	4240      	negs	r0, r0
 80138b2:	e7f8      	b.n	80138a6 <VL53L0X_SetDeviceMode+0x12>
 80138b4:	0030000b 	.word	0x0030000b

080138b8 <VL53L0X_GetFractionEnable>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_GetFractionEnable(VL53L0X_DEV Dev, uint8_t *pEnabled)
{
 80138b8:	b510      	push	{r4, lr}
 80138ba:	000c      	movs	r4, r1
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_RANGE_CONFIG, pEnabled);
 80138bc:	000a      	movs	r2, r1
 80138be:	2109      	movs	r1, #9
 80138c0:	f002 fd9c 	bl	80163fc <VL53L0X_RdByte>

	if (Status == VL53L0X_ERROR_NONE)
 80138c4:	2800      	cmp	r0, #0
 80138c6:	d103      	bne.n	80138d0 <VL53L0X_GetFractionEnable+0x18>
		*pEnabled = (*pEnabled & 1);
 80138c8:	7822      	ldrb	r2, [r4, #0]
 80138ca:	2301      	movs	r3, #1
 80138cc:	4013      	ands	r3, r2
 80138ce:	7023      	strb	r3, [r4, #0]

	LOG_FUNCTION_END(Status);
	return Status;
}
 80138d0:	bd10      	pop	{r4, pc}

080138d2 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_SetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 80138d2:	b510      	push	{r4, lr}
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_measurement_timing_budget_micro_seconds(Dev,
 80138d4:	f002 f84e 	bl	8015974 <VL53L0X_set_measurement_timing_budget_micro_seconds>
		MeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);

	return Status;
}
 80138d8:	bd10      	pop	{r4, pc}

080138da <VL53L0X_GetVcselPulsePeriod>:
	return Status;
}

VL53L0X_Error VL53L0X_GetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 80138da:	b510      	push	{r4, lr}
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 80138dc:	f002 f82a 	bl	8015934 <VL53L0X_get_vcsel_pulse_period>
		pVCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
}
 80138e0:	bd10      	pop	{r4, pc}
	...

080138e4 <VL53L0X_SetSequenceStepEnable>:

VL53L0X_Error VL53L0X_SetSequenceStepEnable(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceStepEnabled)
{
 80138e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80138e6:	b083      	sub	sp, #12
 80138e8:	0006      	movs	r6, r0
 80138ea:	000c      	movs	r4, r1
 80138ec:	0017      	movs	r7, r2
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint8_t SequenceConfig = 0;
 80138ee:	466b      	mov	r3, sp
 80138f0:	1dda      	adds	r2, r3, #7
 80138f2:	2300      	movs	r3, #0
 80138f4:	7013      	strb	r3, [r2, #0]
	uint8_t SequenceConfigNew = 0;
	uint32_t MeasurementTimingBudgetMicroSeconds;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80138f6:	2101      	movs	r1, #1
 80138f8:	f002 fd80 	bl	80163fc <VL53L0X_RdByte>
 80138fc:	1e05      	subs	r5, r0, #0
		&SequenceConfig);

	SequenceConfigNew = SequenceConfig;

	if (Status == VL53L0X_ERROR_NONE) {
 80138fe:	d131      	bne.n	8013964 <VL53L0X_SetSequenceStepEnable+0x80>
	SequenceConfigNew = SequenceConfig;
 8013900:	466b      	mov	r3, sp
 8013902:	79da      	ldrb	r2, [r3, #7]
		if (SequenceStepEnabled == 1) {
 8013904:	2f01      	cmp	r7, #1
 8013906:	d005      	beq.n	8013914 <VL53L0X_SetSequenceStepEnable+0x30>
				Status = VL53L0X_ERROR_INVALID_PARAMS;
			}
		} else {
			/* Disable requested sequence step
			 */
			switch (SequenceStepId) {
 8013908:	2c04      	cmp	r4, #4
 801390a:	d840      	bhi.n	801398e <VL53L0X_SetSequenceStepEnable+0xaa>
 801390c:	00a4      	lsls	r4, r4, #2
 801390e:	4b21      	ldr	r3, [pc, #132]	; (8013994 <VL53L0X_SetSequenceStepEnable+0xb0>)
 8013910:	591b      	ldr	r3, [r3, r4]
 8013912:	469f      	mov	pc, r3
			switch (SequenceStepId) {
 8013914:	2c04      	cmp	r4, #4
 8013916:	d837      	bhi.n	8013988 <VL53L0X_SetSequenceStepEnable+0xa4>
 8013918:	00a4      	lsls	r4, r4, #2
 801391a:	4b1f      	ldr	r3, [pc, #124]	; (8013998 <VL53L0X_SetSequenceStepEnable+0xb4>)
 801391c:	591b      	ldr	r3, [r3, r4]
 801391e:	469f      	mov	pc, r3
				SequenceConfigNew |= 0x10;
 8013920:	2410      	movs	r4, #16
 8013922:	4314      	orrs	r4, r2
				break;
 8013924:	e00e      	b.n	8013944 <VL53L0X_SetSequenceStepEnable+0x60>
				SequenceConfigNew |= 0x28;
 8013926:	2428      	movs	r4, #40	; 0x28
 8013928:	4314      	orrs	r4, r2
				break;
 801392a:	e00b      	b.n	8013944 <VL53L0X_SetSequenceStepEnable+0x60>
				SequenceConfigNew |= 0x04;
 801392c:	2404      	movs	r4, #4
 801392e:	4314      	orrs	r4, r2
				break;
 8013930:	e008      	b.n	8013944 <VL53L0X_SetSequenceStepEnable+0x60>
				SequenceConfigNew |= 0x40;
 8013932:	2440      	movs	r4, #64	; 0x40
 8013934:	4314      	orrs	r4, r2
				break;
 8013936:	e005      	b.n	8013944 <VL53L0X_SetSequenceStepEnable+0x60>
				SequenceConfigNew |= 0x80;
 8013938:	2480      	movs	r4, #128	; 0x80
 801393a:	4314      	orrs	r4, r2
				break;
 801393c:	e002      	b.n	8013944 <VL53L0X_SetSequenceStepEnable+0x60>
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew &= 0xef;
 801393e:	2310      	movs	r3, #16
 8013940:	0014      	movs	r4, r2
 8013942:	439c      	bics	r4, r3
				Status = VL53L0X_ERROR_INVALID_PARAMS;
			}
		}
	}

	if (SequenceConfigNew != SequenceConfig) {
 8013944:	42a2      	cmp	r2, r4
 8013946:	d00d      	beq.n	8013964 <VL53L0X_SetSequenceStepEnable+0x80>
		/* Apply New Setting */
		if (Status == VL53L0X_ERROR_NONE) {
			Status = VL53L0X_WrByte(Dev,
 8013948:	0022      	movs	r2, r4
 801394a:	2101      	movs	r1, #1
 801394c:	0030      	movs	r0, r6
 801394e:	f002 fd0b 	bl	8016368 <VL53L0X_WrByte>
 8013952:	1e05      	subs	r5, r0, #0
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, SequenceConfigNew);
		}
		if (Status == VL53L0X_ERROR_NONE)
 8013954:	d106      	bne.n	8013964 <VL53L0X_SetSequenceStepEnable+0x80>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfigNew);
 8013956:	2398      	movs	r3, #152	; 0x98
 8013958:	005b      	lsls	r3, r3, #1
 801395a:	54f4      	strb	r4, [r6, r3]
		if (Status == VL53L0X_ERROR_NONE) {
			VL53L0X_GETPARAMETERFIELD(Dev,
				MeasurementTimingBudgetMicroSeconds,
				MeasurementTimingBudgetMicroSeconds);

			VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 801395c:	6971      	ldr	r1, [r6, #20]
 801395e:	0030      	movs	r0, r6
 8013960:	f7ff ffb7 	bl	80138d2 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
	}

	LOG_FUNCTION_END(Status);

	return Status;
}
 8013964:	0028      	movs	r0, r5
 8013966:	b003      	add	sp, #12
 8013968:	bdf0      	pop	{r4, r5, r6, r7, pc}
				SequenceConfigNew &= 0xd7;
 801396a:	2328      	movs	r3, #40	; 0x28
 801396c:	0014      	movs	r4, r2
 801396e:	439c      	bics	r4, r3
				break;
 8013970:	e7e8      	b.n	8013944 <VL53L0X_SetSequenceStepEnable+0x60>
				SequenceConfigNew &= 0xfb;
 8013972:	2304      	movs	r3, #4
 8013974:	0014      	movs	r4, r2
 8013976:	439c      	bics	r4, r3
				break;
 8013978:	e7e4      	b.n	8013944 <VL53L0X_SetSequenceStepEnable+0x60>
				SequenceConfigNew &= 0xbf;
 801397a:	2340      	movs	r3, #64	; 0x40
 801397c:	0014      	movs	r4, r2
 801397e:	439c      	bics	r4, r3
				break;
 8013980:	e7e0      	b.n	8013944 <VL53L0X_SetSequenceStepEnable+0x60>
				SequenceConfigNew &= 0x7f;
 8013982:	247f      	movs	r4, #127	; 0x7f
 8013984:	4014      	ands	r4, r2
				break;
 8013986:	e7dd      	b.n	8013944 <VL53L0X_SetSequenceStepEnable+0x60>
		if (SequenceStepEnabled == 1) {
 8013988:	2504      	movs	r5, #4
 801398a:	426d      	negs	r5, r5
 801398c:	e7ea      	b.n	8013964 <VL53L0X_SetSequenceStepEnable+0x80>
 801398e:	2504      	movs	r5, #4
 8013990:	426d      	negs	r5, r5
 8013992:	e7e7      	b.n	8013964 <VL53L0X_SetSequenceStepEnable+0x80>
 8013994:	0801cc4c 	.word	0x0801cc4c
 8013998:	0801cc60 	.word	0x0801cc60

0801399c <sequence_step_enabled>:
{
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	*pSequenceStepEnabled = 0;
	LOG_FUNCTION_START("");

	switch (SequenceStepId) {
 801399c:	2904      	cmp	r1, #4
 801399e:	d803      	bhi.n	80139a8 <sequence_step_enabled+0xc>
 80139a0:	0089      	lsls	r1, r1, #2
 80139a2:	4810      	ldr	r0, [pc, #64]	; (80139e4 <sequence_step_enabled+0x48>)
 80139a4:	5841      	ldr	r1, [r0, r1]
 80139a6:	468f      	mov	pc, r1
	*pSequenceStepEnabled = 0;
 80139a8:	2200      	movs	r2, #0
 80139aa:	701a      	strb	r2, [r3, #0]
		break;
	case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x80) >> 7;
		break;
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80139ac:	2004      	movs	r0, #4
 80139ae:	4240      	negs	r0, r0
 80139b0:	e003      	b.n	80139ba <sequence_step_enabled+0x1e>
		*pSequenceStepEnabled = (SequenceConfig & 0x10) >> 4;
 80139b2:	06d2      	lsls	r2, r2, #27
 80139b4:	0fd2      	lsrs	r2, r2, #31
 80139b6:	701a      	strb	r2, [r3, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80139b8:	2000      	movs	r0, #0
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
 80139ba:	4770      	bx	lr
		*pSequenceStepEnabled = (SequenceConfig & 0x08) >> 3;
 80139bc:	0712      	lsls	r2, r2, #28
 80139be:	0fd2      	lsrs	r2, r2, #31
 80139c0:	701a      	strb	r2, [r3, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80139c2:	2000      	movs	r0, #0
		break;
 80139c4:	e7f9      	b.n	80139ba <sequence_step_enabled+0x1e>
		*pSequenceStepEnabled = (SequenceConfig & 0x04) >> 2;
 80139c6:	0752      	lsls	r2, r2, #29
 80139c8:	0fd2      	lsrs	r2, r2, #31
 80139ca:	701a      	strb	r2, [r3, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80139cc:	2000      	movs	r0, #0
		break;
 80139ce:	e7f4      	b.n	80139ba <sequence_step_enabled+0x1e>
		*pSequenceStepEnabled = (SequenceConfig & 0x40) >> 6;
 80139d0:	0652      	lsls	r2, r2, #25
 80139d2:	0fd2      	lsrs	r2, r2, #31
 80139d4:	701a      	strb	r2, [r3, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80139d6:	2000      	movs	r0, #0
		break;
 80139d8:	e7ef      	b.n	80139ba <sequence_step_enabled+0x1e>
		*pSequenceStepEnabled = (SequenceConfig & 0x80) >> 7;
 80139da:	09d2      	lsrs	r2, r2, #7
 80139dc:	701a      	strb	r2, [r3, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80139de:	2000      	movs	r0, #0
		break;
 80139e0:	e7eb      	b.n	80139ba <sequence_step_enabled+0x1e>
 80139e2:	46c0      	nop			; (mov r8, r8)
 80139e4:	0801cc74 	.word	0x0801cc74

080139e8 <VL53L0X_GetSequenceStepEnables>:
	return Status;
}

VL53L0X_Error VL53L0X_GetSequenceStepEnables(VL53L0X_DEV Dev,
	VL53L0X_SchedulerSequenceSteps_t *pSchedulerSequenceSteps)
{
 80139e8:	b530      	push	{r4, r5, lr}
 80139ea:	b083      	sub	sp, #12
 80139ec:	0004      	movs	r4, r0
 80139ee:	000d      	movs	r5, r1
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint8_t SequenceConfig = 0;
 80139f0:	466b      	mov	r3, sp
 80139f2:	1dda      	adds	r2, r3, #7
 80139f4:	2300      	movs	r3, #0
 80139f6:	7013      	strb	r3, [r2, #0]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80139f8:	2101      	movs	r1, #1
 80139fa:	f002 fcff 	bl	80163fc <VL53L0X_RdByte>
		&SequenceConfig);

	if (Status == VL53L0X_ERROR_NONE) {
 80139fe:	2800      	cmp	r0, #0
 8013a00:	d001      	beq.n	8013a06 <VL53L0X_GetSequenceStepEnables+0x1e>
			&pSchedulerSequenceSteps->FinalRangeOn);
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
 8013a02:	b003      	add	sp, #12
 8013a04:	bd30      	pop	{r4, r5, pc}
		Status = sequence_step_enabled(Dev,
 8013a06:	466b      	mov	r3, sp
 8013a08:	79da      	ldrb	r2, [r3, #7]
 8013a0a:	002b      	movs	r3, r5
 8013a0c:	2100      	movs	r1, #0
 8013a0e:	0020      	movs	r0, r4
 8013a10:	f7ff ffc4 	bl	801399c <sequence_step_enabled>
	if (Status == VL53L0X_ERROR_NONE) {
 8013a14:	2800      	cmp	r0, #0
 8013a16:	d1f4      	bne.n	8013a02 <VL53L0X_GetSequenceStepEnables+0x1a>
		Status = sequence_step_enabled(Dev,
 8013a18:	1cab      	adds	r3, r5, #2
 8013a1a:	466a      	mov	r2, sp
 8013a1c:	3207      	adds	r2, #7
 8013a1e:	7812      	ldrb	r2, [r2, #0]
 8013a20:	2101      	movs	r1, #1
 8013a22:	0020      	movs	r0, r4
 8013a24:	f7ff ffba 	bl	801399c <sequence_step_enabled>
	if (Status == VL53L0X_ERROR_NONE) {
 8013a28:	2800      	cmp	r0, #0
 8013a2a:	d1ea      	bne.n	8013a02 <VL53L0X_GetSequenceStepEnables+0x1a>
		Status = sequence_step_enabled(Dev,
 8013a2c:	1c6b      	adds	r3, r5, #1
 8013a2e:	466a      	mov	r2, sp
 8013a30:	3207      	adds	r2, #7
 8013a32:	7812      	ldrb	r2, [r2, #0]
 8013a34:	2102      	movs	r1, #2
 8013a36:	0020      	movs	r0, r4
 8013a38:	f7ff ffb0 	bl	801399c <sequence_step_enabled>
	if (Status == VL53L0X_ERROR_NONE) {
 8013a3c:	2800      	cmp	r0, #0
 8013a3e:	d1e0      	bne.n	8013a02 <VL53L0X_GetSequenceStepEnables+0x1a>
		Status = sequence_step_enabled(Dev,
 8013a40:	1ceb      	adds	r3, r5, #3
 8013a42:	466a      	mov	r2, sp
 8013a44:	3207      	adds	r2, #7
 8013a46:	7812      	ldrb	r2, [r2, #0]
 8013a48:	2103      	movs	r1, #3
 8013a4a:	0020      	movs	r0, r4
 8013a4c:	f7ff ffa6 	bl	801399c <sequence_step_enabled>
	if (Status == VL53L0X_ERROR_NONE) {
 8013a50:	2800      	cmp	r0, #0
 8013a52:	d1d6      	bne.n	8013a02 <VL53L0X_GetSequenceStepEnables+0x1a>
		Status = sequence_step_enabled(Dev,
 8013a54:	1d2b      	adds	r3, r5, #4
 8013a56:	466a      	mov	r2, sp
 8013a58:	3207      	adds	r2, #7
 8013a5a:	7812      	ldrb	r2, [r2, #0]
 8013a5c:	2104      	movs	r1, #4
 8013a5e:	0020      	movs	r0, r4
 8013a60:	f7ff ff9c 	bl	801399c <sequence_step_enabled>
 8013a64:	e7cd      	b.n	8013a02 <VL53L0X_GetSequenceStepEnables+0x1a>

08013a66 <VL53L0X_SetInterMeasurementPeriodMilliSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_SetInterMeasurementPeriodMilliSeconds(VL53L0X_DEV Dev,
	uint32_t InterMeasurementPeriodMilliSeconds)
{
 8013a66:	b530      	push	{r4, r5, lr}
 8013a68:	b083      	sub	sp, #12
 8013a6a:	0005      	movs	r5, r0
 8013a6c:	000c      	movs	r4, r1
	uint16_t osc_calibrate_val;
	uint32_t IMPeriodMilliSeconds;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
 8013a6e:	466b      	mov	r3, sp
 8013a70:	1d9a      	adds	r2, r3, #6
 8013a72:	21f8      	movs	r1, #248	; 0xf8
 8013a74:	f002 fccf 	bl	8016416 <VL53L0X_RdWord>
		&osc_calibrate_val);

	if (Status == VL53L0X_ERROR_NONE) {
 8013a78:	2800      	cmp	r0, #0
 8013a7a:	d10e      	bne.n	8013a9a <VL53L0X_SetInterMeasurementPeriodMilliSeconds+0x34>
		if (osc_calibrate_val != 0) {
 8013a7c:	466b      	mov	r3, sp
 8013a7e:	3306      	adds	r3, #6
 8013a80:	881b      	ldrh	r3, [r3, #0]
			IMPeriodMilliSeconds =
				InterMeasurementPeriodMilliSeconds
					* osc_calibrate_val;
		} else {
			IMPeriodMilliSeconds =
 8013a82:	0022      	movs	r2, r4
		if (osc_calibrate_val != 0) {
 8013a84:	2b00      	cmp	r3, #0
 8013a86:	d001      	beq.n	8013a8c <VL53L0X_SetInterMeasurementPeriodMilliSeconds+0x26>
			IMPeriodMilliSeconds =
 8013a88:	4363      	muls	r3, r4
 8013a8a:	001a      	movs	r2, r3
				InterMeasurementPeriodMilliSeconds;
		}
		Status = VL53L0X_WrDWord(Dev,
 8013a8c:	2104      	movs	r1, #4
 8013a8e:	0028      	movs	r0, r5
 8013a90:	f002 fc84 	bl	801639c <VL53L0X_WrDWord>
		VL53L0X_REG_SYSTEM_INTERMEASUREMENT_PERIOD,
			IMPeriodMilliSeconds);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8013a94:	2800      	cmp	r0, #0
 8013a96:	d100      	bne.n	8013a9a <VL53L0X_SetInterMeasurementPeriodMilliSeconds+0x34>
		VL53L0X_SETPARAMETERFIELD(Dev,
 8013a98:	61ac      	str	r4, [r5, #24]
			InterMeasurementPeriodMilliSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
 8013a9a:	b003      	add	sp, #12
 8013a9c:	bd30      	pop	{r4, r5, pc}

08013a9e <VL53L0X_GetInterMeasurementPeriodMilliSeconds>:

VL53L0X_Error VL53L0X_GetInterMeasurementPeriodMilliSeconds(VL53L0X_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 8013a9e:	b570      	push	{r4, r5, r6, lr}
 8013aa0:	b082      	sub	sp, #8
 8013aa2:	0005      	movs	r5, r0
 8013aa4:	000e      	movs	r6, r1
	uint16_t osc_calibrate_val;
	uint32_t IMPeriodMilliSeconds;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
 8013aa6:	466b      	mov	r3, sp
 8013aa8:	1d9a      	adds	r2, r3, #6
 8013aaa:	21f8      	movs	r1, #248	; 0xf8
 8013aac:	f002 fcb3 	bl	8016416 <VL53L0X_RdWord>
 8013ab0:	1e04      	subs	r4, r0, #0
		&osc_calibrate_val);

	if (Status == VL53L0X_ERROR_NONE) {
 8013ab2:	d002      	beq.n	8013aba <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x1c>
			*pInterMeasurementPeriodMilliSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
 8013ab4:	0020      	movs	r0, r4
 8013ab6:	b002      	add	sp, #8
 8013ab8:	bd70      	pop	{r4, r5, r6, pc}
		Status = VL53L0X_RdDWord(Dev,
 8013aba:	466a      	mov	r2, sp
 8013abc:	2104      	movs	r1, #4
 8013abe:	0028      	movs	r0, r5
 8013ac0:	f002 fcb6 	bl	8016430 <VL53L0X_RdDWord>
 8013ac4:	1e04      	subs	r4, r0, #0
	if (Status == VL53L0X_ERROR_NONE) {
 8013ac6:	d1f5      	bne.n	8013ab4 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x16>
		if (osc_calibrate_val != 0) {
 8013ac8:	466b      	mov	r3, sp
 8013aca:	88d9      	ldrh	r1, [r3, #6]
 8013acc:	2900      	cmp	r1, #0
 8013ace:	d003      	beq.n	8013ad8 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x3a>
				IMPeriodMilliSeconds / osc_calibrate_val;
 8013ad0:	9800      	ldr	r0, [sp, #0]
 8013ad2:	f7ec fb3d 	bl	8000150 <__udivsi3>
			*pInterMeasurementPeriodMilliSeconds =
 8013ad6:	6030      	str	r0, [r6, #0]
		VL53L0X_SETPARAMETERFIELD(Dev,
 8013ad8:	6833      	ldr	r3, [r6, #0]
 8013ada:	61ab      	str	r3, [r5, #24]
 8013adc:	e7ea      	b.n	8013ab4 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x16>

08013ade <VL53L0X_GetXTalkCompensationEnable>:
{
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint8_t Temp8;
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable, Temp8);
 8013ade:	7f03      	ldrb	r3, [r0, #28]
	*pXTalkCompensationEnable = Temp8;
 8013ae0:	700b      	strb	r3, [r1, #0]

	LOG_FUNCTION_END(Status);
	return Status;
}
 8013ae2:	2000      	movs	r0, #0
 8013ae4:	4770      	bx	lr

08013ae6 <VL53L0X_GetXTalkCompensationRateMegaCps>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationRateMegaCps(VL53L0X_DEV Dev,
	FixPoint1616_t *pXTalkCompensationRateMegaCps)
{
 8013ae6:	b530      	push	{r4, r5, lr}
 8013ae8:	b083      	sub	sp, #12
 8013aea:	0004      	movs	r4, r0
 8013aec:	000d      	movs	r5, r1
	uint16_t Value;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev,
 8013aee:	466b      	mov	r3, sp
 8013af0:	1d9a      	adds	r2, r3, #6
 8013af2:	2120      	movs	r1, #32
 8013af4:	f002 fc8f 	bl	8016416 <VL53L0X_RdWord>
	VL53L0X_REG_CROSSTALK_COMPENSATION_PEAK_RATE_MCPS, (uint16_t *)&Value);
	if (Status == VL53L0X_ERROR_NONE) {
 8013af8:	2800      	cmp	r0, #0
 8013afa:	d108      	bne.n	8013b0e <VL53L0X_GetXTalkCompensationRateMegaCps+0x28>
		if (Value == 0) {
 8013afc:	466b      	mov	r3, sp
 8013afe:	3306      	adds	r3, #6
 8013b00:	881b      	ldrh	r3, [r3, #0]
 8013b02:	2b00      	cmp	r3, #0
 8013b04:	d105      	bne.n	8013b12 <VL53L0X_GetXTalkCompensationRateMegaCps+0x2c>
			/* the Xtalk is disabled return value from memory */
			VL53L0X_GETPARAMETERFIELD(Dev,
				XTalkCompensationRateMegaCps, TempFix1616);
			*pXTalkCompensationRateMegaCps = TempFix1616;
 8013b06:	6a23      	ldr	r3, [r4, #32]
 8013b08:	602b      	str	r3, [r5, #0]
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8013b0a:	2300      	movs	r3, #0
 8013b0c:	7723      	strb	r3, [r4, #28]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
 8013b0e:	b003      	add	sp, #12
 8013b10:	bd30      	pop	{r4, r5, pc}
			TempFix1616 = VL53L0X_FIXPOINT313TOFIXPOINT1616(Value);
 8013b12:	00db      	lsls	r3, r3, #3
			*pXTalkCompensationRateMegaCps = TempFix1616;
 8013b14:	602b      	str	r3, [r5, #0]
			VL53L0X_SETPARAMETERFIELD(Dev,
 8013b16:	6223      	str	r3, [r4, #32]
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8013b18:	2301      	movs	r3, #1
 8013b1a:	7723      	strb	r3, [r4, #28]
 8013b1c:	e7f7      	b.n	8013b0e <VL53L0X_GetXTalkCompensationRateMegaCps+0x28>
	...

08013b20 <VL53L0X_SetLimitCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_SetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 8013b20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013b22:	0005      	movs	r5, r0
 8013b24:	000c      	movs	r4, r1
 8013b26:	0016      	movs	r6, r2
	uint8_t LimitCheckDisable = 0;
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 8013b28:	2905      	cmp	r1, #5
 8013b2a:	d83f      	bhi.n	8013bac <VL53L0X_SetLimitCheckEnable+0x8c>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
	} else {
		if (LimitCheckEnable == 0) {
 8013b2c:	2a00      	cmp	r2, #0
 8013b2e:	d007      	beq.n	8013b40 <VL53L0X_SetLimitCheckEnable+0x20>
			TempFix1616 = 0;
			LimitCheckEnableInt = 0;
			LimitCheckDisable = 1;

		} else {
			VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8013b30:	000b      	movs	r3, r1
 8013b32:	330c      	adds	r3, #12
 8013b34:	009b      	lsls	r3, r3, #2
 8013b36:	18c3      	adds	r3, r0, r3
 8013b38:	685a      	ldr	r2, [r3, #4]
				LimitCheckId, TempFix1616);
			LimitCheckDisable = 0;
 8013b3a:	2300      	movs	r3, #0
			/* this to be sure to have either 0 or 1 */
			LimitCheckEnableInt = 1;
 8013b3c:	2701      	movs	r7, #1
 8013b3e:	e002      	b.n	8013b46 <VL53L0X_SetLimitCheckEnable+0x26>
			LimitCheckEnableInt = 0;
 8013b40:	0017      	movs	r7, r2
			LimitCheckDisable = 1;
 8013b42:	2301      	movs	r3, #1
			TempFix1616 = 0;
 8013b44:	2200      	movs	r2, #0
		}

		switch (LimitCheckId) {
 8013b46:	2c05      	cmp	r4, #5
 8013b48:	d833      	bhi.n	8013bb2 <VL53L0X_SetLimitCheckEnable+0x92>
 8013b4a:	00a1      	lsls	r1, r4, #2
 8013b4c:	481a      	ldr	r0, [pc, #104]	; (8013bb8 <VL53L0X_SetLimitCheckEnable+0x98>)
 8013b4e:	5841      	ldr	r1, [r0, r1]
 8013b50:	468f      	mov	pc, r1

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8013b52:	2328      	movs	r3, #40	; 0x28
 8013b54:	54ef      	strb	r7, [r5, r3]

		}

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8013b56:	e007      	b.n	8013b68 <VL53L0X_SetLimitCheckEnable+0x48>
				VL53L0X_FIXPOINT1616TOFIXPOINT97(TempFix1616));
 8013b58:	0a52      	lsrs	r2, r2, #9
			Status = VL53L0X_WrWord(Dev,
 8013b5a:	b292      	uxth	r2, r2
 8013b5c:	2144      	movs	r1, #68	; 0x44
 8013b5e:	0028      	movs	r0, r5
 8013b60:	f002 fc0f 	bl	8016382 <VL53L0X_WrWord>
	if (Status == VL53L0X_ERROR_NONE) {
 8013b64:	2800      	cmp	r0, #0
 8013b66:	d106      	bne.n	8013b76 <VL53L0X_SetLimitCheckEnable+0x56>
		if (LimitCheckEnable == 0) {
 8013b68:	2e00      	cmp	r6, #0
 8013b6a:	d119      	bne.n	8013ba0 <VL53L0X_SetLimitCheckEnable+0x80>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8013b6c:	192c      	adds	r4, r5, r4
 8013b6e:	3428      	adds	r4, #40	; 0x28
 8013b70:	2300      	movs	r3, #0
 8013b72:	7023      	strb	r3, [r4, #0]
 8013b74:	2000      	movs	r0, #0
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
 8013b76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8013b78:	232a      	movs	r3, #42	; 0x2a
 8013b7a:	54ef      	strb	r7, [r5, r3]
	if (Status == VL53L0X_ERROR_NONE) {
 8013b7c:	e7f4      	b.n	8013b68 <VL53L0X_SetLimitCheckEnable+0x48>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8013b7e:	232b      	movs	r3, #43	; 0x2b
 8013b80:	54ef      	strb	r7, [r5, r3]
	if (Status == VL53L0X_ERROR_NONE) {
 8013b82:	e7f1      	b.n	8013b68 <VL53L0X_SetLimitCheckEnable+0x48>
			Status = VL53L0X_UpdateByte(Dev,
 8013b84:	005b      	lsls	r3, r3, #1
 8013b86:	22fe      	movs	r2, #254	; 0xfe
 8013b88:	2160      	movs	r1, #96	; 0x60
 8013b8a:	0028      	movs	r0, r5
 8013b8c:	f002 fc13 	bl	80163b6 <VL53L0X_UpdateByte>
			break;
 8013b90:	e7e8      	b.n	8013b64 <VL53L0X_SetLimitCheckEnable+0x44>
			Status = VL53L0X_UpdateByte(Dev,
 8013b92:	011b      	lsls	r3, r3, #4
 8013b94:	22ef      	movs	r2, #239	; 0xef
 8013b96:	2160      	movs	r1, #96	; 0x60
 8013b98:	0028      	movs	r0, r5
 8013b9a:	f002 fc0c 	bl	80163b6 <VL53L0X_UpdateByte>
			break;
 8013b9e:	e7e1      	b.n	8013b64 <VL53L0X_SetLimitCheckEnable+0x44>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8013ba0:	192c      	adds	r4, r5, r4
 8013ba2:	3428      	adds	r4, #40	; 0x28
 8013ba4:	2301      	movs	r3, #1
 8013ba6:	7023      	strb	r3, [r4, #0]
 8013ba8:	2000      	movs	r0, #0
 8013baa:	e7e4      	b.n	8013b76 <VL53L0X_SetLimitCheckEnable+0x56>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8013bac:	2004      	movs	r0, #4
 8013bae:	4240      	negs	r0, r0
 8013bb0:	e7e1      	b.n	8013b76 <VL53L0X_SetLimitCheckEnable+0x56>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8013bb2:	2004      	movs	r0, #4
 8013bb4:	4240      	negs	r0, r0
 8013bb6:	e7de      	b.n	8013b76 <VL53L0X_SetLimitCheckEnable+0x56>
 8013bb8:	0801cc88 	.word	0x0801cc88

08013bbc <VL53L0X_GetLimitCheckEnable>:
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 8013bbc:	2905      	cmp	r1, #5
 8013bbe:	d805      	bhi.n	8013bcc <VL53L0X_GetLimitCheckEnable+0x10>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
		*pLimitCheckEnable = 0;
	} else {
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8013bc0:	1840      	adds	r0, r0, r1
 8013bc2:	3028      	adds	r0, #40	; 0x28
 8013bc4:	7803      	ldrb	r3, [r0, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8013bc6:	2000      	movs	r0, #0
 8013bc8:	7013      	strb	r3, [r2, #0]
		*pLimitCheckEnable = Temp8;
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
 8013bca:	4770      	bx	lr
		*pLimitCheckEnable = 0;
 8013bcc:	2300      	movs	r3, #0
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8013bce:	2004      	movs	r0, #4
 8013bd0:	4240      	negs	r0, r0
 8013bd2:	e7f9      	b.n	8013bc8 <VL53L0X_GetLimitCheckEnable+0xc>

08013bd4 <VL53L0X_SetLimitCheckValue>:

VL53L0X_Error VL53L0X_SetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t LimitCheckValue)
{
 8013bd4:	b570      	push	{r4, r5, r6, lr}
 8013bd6:	0005      	movs	r5, r0
 8013bd8:	000c      	movs	r4, r1
 8013bda:	0016      	movs	r6, r2
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId,
 8013bdc:	1843      	adds	r3, r0, r1
 8013bde:	3328      	adds	r3, #40	; 0x28
		Temp8);

	if (Temp8 == 0) { /* disabled write only internal value */
 8013be0:	781b      	ldrb	r3, [r3, #0]
 8013be2:	2b00      	cmp	r3, #0
 8013be4:	d105      	bne.n	8013bf2 <VL53L0X_SetLimitCheckValue+0x1e>
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8013be6:	340c      	adds	r4, #12
 8013be8:	00a4      	lsls	r4, r4, #2
 8013bea:	1905      	adds	r5, r0, r4
 8013bec:	606a      	str	r2, [r5, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8013bee:	2000      	movs	r0, #0
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
 8013bf0:	bd70      	pop	{r4, r5, r6, pc}
		switch (LimitCheckId) {
 8013bf2:	2905      	cmp	r1, #5
 8013bf4:	d81c      	bhi.n	8013c30 <VL53L0X_SetLimitCheckValue+0x5c>
 8013bf6:	008b      	lsls	r3, r1, #2
 8013bf8:	4a0f      	ldr	r2, [pc, #60]	; (8013c38 <VL53L0X_SetLimitCheckValue+0x64>)
 8013bfa:	58d3      	ldr	r3, [r2, r3]
 8013bfc:	469f      	mov	pc, r3
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8013bfe:	6346      	str	r6, [r0, #52]	; 0x34
		if (Status == VL53L0X_ERROR_NONE) {
 8013c00:	e006      	b.n	8013c10 <VL53L0X_SetLimitCheckValue+0x3c>
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 8013c02:	0a72      	lsrs	r2, r6, #9
			Status = VL53L0X_WrWord(Dev,
 8013c04:	b292      	uxth	r2, r2
 8013c06:	2144      	movs	r1, #68	; 0x44
 8013c08:	f002 fbbb 	bl	8016382 <VL53L0X_WrWord>
		if (Status == VL53L0X_ERROR_NONE) {
 8013c0c:	2800      	cmp	r0, #0
 8013c0e:	d1ef      	bne.n	8013bf0 <VL53L0X_SetLimitCheckValue+0x1c>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8013c10:	340c      	adds	r4, #12
 8013c12:	00a4      	lsls	r4, r4, #2
 8013c14:	192c      	adds	r4, r5, r4
 8013c16:	6066      	str	r6, [r4, #4]
 8013c18:	2000      	movs	r0, #0
 8013c1a:	e7e9      	b.n	8013bf0 <VL53L0X_SetLimitCheckValue+0x1c>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8013c1c:	63c6      	str	r6, [r0, #60]	; 0x3c
		if (Status == VL53L0X_ERROR_NONE) {
 8013c1e:	e7f7      	b.n	8013c10 <VL53L0X_SetLimitCheckValue+0x3c>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8013c20:	6406      	str	r6, [r0, #64]	; 0x40
		if (Status == VL53L0X_ERROR_NONE) {
 8013c22:	e7f5      	b.n	8013c10 <VL53L0X_SetLimitCheckValue+0x3c>
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 8013c24:	0a72      	lsrs	r2, r6, #9
			Status = VL53L0X_WrWord(Dev,
 8013c26:	b292      	uxth	r2, r2
 8013c28:	2164      	movs	r1, #100	; 0x64
 8013c2a:	f002 fbaa 	bl	8016382 <VL53L0X_WrWord>
			break;
 8013c2e:	e7ed      	b.n	8013c0c <VL53L0X_SetLimitCheckValue+0x38>
	if (Temp8 == 0) { /* disabled write only internal value */
 8013c30:	2004      	movs	r0, #4
 8013c32:	4240      	negs	r0, r0
 8013c34:	e7dc      	b.n	8013bf0 <VL53L0X_SetLimitCheckValue+0x1c>
 8013c36:	46c0      	nop			; (mov r8, r8)
 8013c38:	0801cca0 	.word	0x0801cca0

08013c3c <VL53L0X_GetLimitCheckValue>:

VL53L0X_Error VL53L0X_GetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 8013c3c:	b530      	push	{r4, r5, lr}
 8013c3e:	b083      	sub	sp, #12
 8013c40:	0004      	movs	r4, r0
 8013c42:	0015      	movs	r5, r2
	uint16_t Temp16;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 8013c44:	2905      	cmp	r1, #5
 8013c46:	d831      	bhi.n	8013cac <VL53L0X_GetLimitCheckValue+0x70>
 8013c48:	0089      	lsls	r1, r1, #2
 8013c4a:	4b1a      	ldr	r3, [pc, #104]	; (8013cb4 <VL53L0X_GetLimitCheckValue+0x78>)
 8013c4c:	585b      	ldr	r3, [r3, r1]
 8013c4e:	469f      	mov	pc, r3

	case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8013c50:	6b43      	ldr	r3, [r0, #52]	; 0x34
					TempFix1616);
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
					LimitChecksEnable, LimitCheckId, 1);
			}
		} else {
			*pLimitCheckValue = TempFix1616;
 8013c52:	602b      	str	r3, [r5, #0]
 8013c54:	2000      	movs	r0, #0
	}

	LOG_FUNCTION_END(Status);
	return Status;

}
 8013c56:	b003      	add	sp, #12
 8013c58:	bd30      	pop	{r4, r5, pc}
		Status = VL53L0X_RdWord(Dev,
 8013c5a:	466b      	mov	r3, sp
 8013c5c:	1d9a      	adds	r2, r3, #6
 8013c5e:	2144      	movs	r1, #68	; 0x44
 8013c60:	f002 fbd9 	bl	8016416 <VL53L0X_RdWord>
		if (Status == VL53L0X_ERROR_NONE)
 8013c64:	2800      	cmp	r0, #0
 8013c66:	d1f6      	bne.n	8013c56 <VL53L0X_GetLimitCheckValue+0x1a>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 8013c68:	466b      	mov	r3, sp
 8013c6a:	3306      	adds	r3, #6
 8013c6c:	881b      	ldrh	r3, [r3, #0]
 8013c6e:	025a      	lsls	r2, r3, #9
			if (TempFix1616 == 0) {
 8013c70:	2b00      	cmp	r3, #0
 8013c72:	d015      	beq.n	8013ca0 <VL53L0X_GetLimitCheckValue+0x64>
				*pLimitCheckValue = TempFix1616;
 8013c74:	602a      	str	r2, [r5, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8013c76:	63a2      	str	r2, [r4, #56]	; 0x38
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8013c78:	2329      	movs	r3, #41	; 0x29
 8013c7a:	2201      	movs	r2, #1
 8013c7c:	54e2      	strb	r2, [r4, r3]
 8013c7e:	e7ea      	b.n	8013c56 <VL53L0X_GetLimitCheckValue+0x1a>
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8013c80:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
		break;
 8013c82:	e7e6      	b.n	8013c52 <VL53L0X_GetLimitCheckValue+0x16>
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8013c84:	6c03      	ldr	r3, [r0, #64]	; 0x40
		break;
 8013c86:	e7e4      	b.n	8013c52 <VL53L0X_GetLimitCheckValue+0x16>
		Status = VL53L0X_RdWord(Dev,
 8013c88:	466b      	mov	r3, sp
 8013c8a:	1d9a      	adds	r2, r3, #6
 8013c8c:	2164      	movs	r1, #100	; 0x64
 8013c8e:	f002 fbc2 	bl	8016416 <VL53L0X_RdWord>
		if (Status == VL53L0X_ERROR_NONE)
 8013c92:	2800      	cmp	r0, #0
 8013c94:	d1df      	bne.n	8013c56 <VL53L0X_GetLimitCheckValue+0x1a>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 8013c96:	466b      	mov	r3, sp
 8013c98:	3306      	adds	r3, #6
 8013c9a:	881b      	ldrh	r3, [r3, #0]
 8013c9c:	025b      	lsls	r3, r3, #9
 8013c9e:	e7d8      	b.n	8013c52 <VL53L0X_GetLimitCheckValue+0x16>
				*pLimitCheckValue = TempFix1616;
 8013ca0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8013ca2:	602b      	str	r3, [r5, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8013ca4:	2329      	movs	r3, #41	; 0x29
 8013ca6:	2200      	movs	r2, #0
 8013ca8:	54e2      	strb	r2, [r4, r3]
 8013caa:	e7d4      	b.n	8013c56 <VL53L0X_GetLimitCheckValue+0x1a>
			*pLimitCheckValue = TempFix1616;
 8013cac:	2004      	movs	r0, #4
 8013cae:	4240      	negs	r0, r0
 8013cb0:	e7d1      	b.n	8013c56 <VL53L0X_GetLimitCheckValue+0x1a>
 8013cb2:	46c0      	nop			; (mov r8, r8)
 8013cb4:	0801ccb8 	.word	0x0801ccb8

08013cb8 <VL53L0X_GetWrapAroundCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetWrapAroundCheckEnable(VL53L0X_DEV Dev,
	uint8_t *pWrapAroundCheckEnable)
{
 8013cb8:	b530      	push	{r4, r5, lr}
 8013cba:	b083      	sub	sp, #12
 8013cbc:	0004      	movs	r4, r0
 8013cbe:	000d      	movs	r5, r1
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint8_t data;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &data);
 8013cc0:	466b      	mov	r3, sp
 8013cc2:	1dda      	adds	r2, r3, #7
 8013cc4:	2101      	movs	r1, #1
 8013cc6:	f002 fb99 	bl	80163fc <VL53L0X_RdByte>
	if (Status == VL53L0X_ERROR_NONE) {
 8013cca:	2800      	cmp	r0, #0
 8013ccc:	d10d      	bne.n	8013cea <VL53L0X_GetWrapAroundCheckEnable+0x32>
		PALDevDataSet(Dev, SequenceConfig, data);
 8013cce:	466b      	mov	r3, sp
 8013cd0:	3307      	adds	r3, #7
 8013cd2:	781b      	ldrb	r3, [r3, #0]
 8013cd4:	2298      	movs	r2, #152	; 0x98
 8013cd6:	0052      	lsls	r2, r2, #1
 8013cd8:	54a3      	strb	r3, [r4, r2]
		if (data & (0x01 << 7))
 8013cda:	b25b      	sxtb	r3, r3
 8013cdc:	2b00      	cmp	r3, #0
 8013cde:	db06      	blt.n	8013cee <VL53L0X_GetWrapAroundCheckEnable+0x36>
			*pWrapAroundCheckEnable = 0x01;
		else
			*pWrapAroundCheckEnable = 0x00;
 8013ce0:	2300      	movs	r3, #0
 8013ce2:	702b      	strb	r3, [r5, #0]
	}
	if (Status == VL53L0X_ERROR_NONE) {
		VL53L0X_SETPARAMETERFIELD(Dev, WrapAroundCheckEnable,
 8013ce4:	782a      	ldrb	r2, [r5, #0]
 8013ce6:	234c      	movs	r3, #76	; 0x4c
 8013ce8:	54e2      	strb	r2, [r4, r3]
			*pWrapAroundCheckEnable);
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
 8013cea:	b003      	add	sp, #12
 8013cec:	bd30      	pop	{r4, r5, pc}
			*pWrapAroundCheckEnable = 0x01;
 8013cee:	2301      	movs	r3, #1
 8013cf0:	702b      	strb	r3, [r5, #0]
 8013cf2:	e7f7      	b.n	8013ce4 <VL53L0X_GetWrapAroundCheckEnable+0x2c>

08013cf4 <VL53L0X_GetDeviceParameters>:
{
 8013cf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013cf6:	46ce      	mov	lr, r9
 8013cf8:	4647      	mov	r7, r8
 8013cfa:	b580      	push	{r7, lr}
 8013cfc:	0004      	movs	r4, r0
 8013cfe:	000d      	movs	r5, r1
	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 8013d00:	7c03      	ldrb	r3, [r0, #16]
 8013d02:	700b      	strb	r3, [r1, #0]
		Status = VL53L0X_GetInterMeasurementPeriodMilliSeconds(Dev,
 8013d04:	3108      	adds	r1, #8
 8013d06:	f7ff feca 	bl	8013a9e <VL53L0X_GetInterMeasurementPeriodMilliSeconds>
	if (Status == VL53L0X_ERROR_NONE)
 8013d0a:	2800      	cmp	r0, #0
 8013d0c:	d132      	bne.n	8013d74 <VL53L0X_GetDeviceParameters+0x80>
		pDeviceParameters->XTalkCompensationEnable = 0;
 8013d0e:	2300      	movs	r3, #0
 8013d10:	732b      	strb	r3, [r5, #12]
		Status = VL53L0X_GetXTalkCompensationRateMegaCps(Dev,
 8013d12:	0029      	movs	r1, r5
 8013d14:	3110      	adds	r1, #16
 8013d16:	0020      	movs	r0, r4
 8013d18:	f7ff fee5 	bl	8013ae6 <VL53L0X_GetXTalkCompensationRateMegaCps>
	if (Status == VL53L0X_ERROR_NONE)
 8013d1c:	2800      	cmp	r0, #0
 8013d1e:	d129      	bne.n	8013d74 <VL53L0X_GetDeviceParameters+0x80>
		Status = VL53L0X_GetOffsetCalibrationDataMicroMeter(Dev,
 8013d20:	0029      	movs	r1, r5
 8013d22:	3114      	adds	r1, #20
	Status = VL53L0X_get_offset_calibration_data_micro_meter(Dev,
 8013d24:	0020      	movs	r0, r4
 8013d26:	f000 fd49 	bl	80147bc <VL53L0X_get_offset_calibration_data_micro_meter>
	if (Status == VL53L0X_ERROR_NONE) {
 8013d2a:	2800      	cmp	r0, #0
 8013d2c:	d122      	bne.n	8013d74 <VL53L0X_GetDeviceParameters+0x80>
 8013d2e:	002f      	movs	r7, r5
 8013d30:	3724      	adds	r7, #36	; 0x24
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8013d32:	2600      	movs	r6, #0
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8013d34:	2328      	movs	r3, #40	; 0x28
 8013d36:	4699      	mov	r9, r3
 8013d38:	44a1      	add	r9, r4
 8013d3a:	3b10      	subs	r3, #16
 8013d3c:	4698      	mov	r8, r3
 8013d3e:	44a8      	add	r8, r5
				Status |= VL53L0X_GetLimitCheckValue(Dev, i,
 8013d40:	b2b1      	uxth	r1, r6
 8013d42:	003a      	movs	r2, r7
 8013d44:	0020      	movs	r0, r4
 8013d46:	f7ff ff79 	bl	8013c3c <VL53L0X_GetLimitCheckValue>
			if (Status == VL53L0X_ERROR_NONE) {
 8013d4a:	2800      	cmp	r0, #0
 8013d4c:	d112      	bne.n	8013d74 <VL53L0X_GetDeviceParameters+0x80>
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8013d4e:	464b      	mov	r3, r9
 8013d50:	5d9b      	ldrb	r3, [r3, r6]
		*pLimitCheckEnable = Temp8;
 8013d52:	4642      	mov	r2, r8
 8013d54:	5593      	strb	r3, [r2, r6]
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8013d56:	3601      	adds	r6, #1
 8013d58:	3704      	adds	r7, #4
 8013d5a:	2e06      	cmp	r6, #6
 8013d5c:	d1f0      	bne.n	8013d40 <VL53L0X_GetDeviceParameters+0x4c>
		Status = VL53L0X_GetWrapAroundCheckEnable(Dev,
 8013d5e:	0029      	movs	r1, r5
 8013d60:	313c      	adds	r1, #60	; 0x3c
 8013d62:	0020      	movs	r0, r4
 8013d64:	f7ff ffa8 	bl	8013cb8 <VL53L0X_GetWrapAroundCheckEnable>
	if (Status == VL53L0X_ERROR_NONE) {
 8013d68:	2800      	cmp	r0, #0
 8013d6a:	d103      	bne.n	8013d74 <VL53L0X_GetDeviceParameters+0x80>
		Status = VL53L0X_GetMeasurementTimingBudgetMicroSeconds(Dev,
 8013d6c:	1d29      	adds	r1, r5, #4
	Status = VL53L0X_get_measurement_timing_budget_micro_seconds(Dev,
 8013d6e:	0020      	movs	r0, r4
 8013d70:	f001 fe86 	bl	8015a80 <VL53L0X_get_measurement_timing_budget_micro_seconds>
}
 8013d74:	bcc0      	pop	{r6, r7}
 8013d76:	46b9      	mov	r9, r7
 8013d78:	46b0      	mov	r8, r6
 8013d7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08013d7c <VL53L0X_DataInit>:
{
 8013d7c:	b570      	push	{r4, r5, r6, lr}
 8013d7e:	b092      	sub	sp, #72	; 0x48
 8013d80:	0005      	movs	r5, r0
	Status = VL53L0X_UpdateByte(Dev,
 8013d82:	2301      	movs	r3, #1
 8013d84:	22fe      	movs	r2, #254	; 0xfe
 8013d86:	2189      	movs	r1, #137	; 0x89
 8013d88:	f002 fb15 	bl	80163b6 <VL53L0X_UpdateByte>
	if (Status == VL53L0X_ERROR_NONE)
 8013d8c:	2800      	cmp	r0, #0
 8013d8e:	d100      	bne.n	8013d92 <VL53L0X_DataInit+0x16>
 8013d90:	e0cd      	b.n	8013f2e <VL53L0X_DataInit+0x1b2>
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone, 0);
 8013d92:	2300      	movs	r3, #0
 8013d94:	22f0      	movs	r2, #240	; 0xf0
 8013d96:	54ab      	strb	r3, [r5, r2]
	PALDevDataSet(Dev, LinearityCorrectiveGain, 1000);
 8013d98:	3262      	adds	r2, #98	; 0x62
 8013d9a:	21fa      	movs	r1, #250	; 0xfa
 8013d9c:	0089      	lsls	r1, r1, #2
 8013d9e:	52a9      	strh	r1, [r5, r2]
	PALDevDataSet(Dev, DmaxCalRangeMilliMeter, 400);
 8013da0:	3202      	adds	r2, #2
 8013da2:	21c8      	movs	r1, #200	; 0xc8
 8013da4:	0049      	lsls	r1, r1, #1
 8013da6:	52a9      	strh	r1, [r5, r2]
	PALDevDataSet(Dev, DmaxCalSignalRateRtnMegaCps,
 8013da8:	3204      	adds	r2, #4
 8013daa:	4964      	ldr	r1, [pc, #400]	; (8013f3c <VL53L0X_DataInit+0x1c0>)
 8013dac:	50a9      	str	r1, [r5, r2]
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz, 618660);
 8013dae:	3a84      	subs	r2, #132	; 0x84
 8013db0:	4963      	ldr	r1, [pc, #396]	; (8013f40 <VL53L0X_DataInit+0x1c4>)
 8013db2:	50a9      	str	r1, [r5, r2]
	VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps, 0);
 8013db4:	622b      	str	r3, [r5, #32]
	Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8013db6:	a902      	add	r1, sp, #8
 8013db8:	0028      	movs	r0, r5
 8013dba:	f7ff ff9b 	bl	8013cf4 <VL53L0X_GetDeviceParameters>
 8013dbe:	1e04      	subs	r4, r0, #0
	if (Status == VL53L0X_ERROR_NONE) {
 8013dc0:	d109      	bne.n	8013dd6 <VL53L0X_DataInit+0x5a>
		CurrentParameters.DeviceMode = VL53L0X_DEVICEMODE_SINGLE_RANGING;
 8013dc2:	2300      	movs	r3, #0
 8013dc4:	466a      	mov	r2, sp
 8013dc6:	7213      	strb	r3, [r2, #8]
		CurrentParameters.HistogramMode = VL53L0X_HISTOGRAMMODE_DISABLED;
 8013dc8:	7253      	strb	r3, [r2, #9]
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 8013dca:	0028      	movs	r0, r5
 8013dcc:	3010      	adds	r0, #16
 8013dce:	2240      	movs	r2, #64	; 0x40
 8013dd0:	a902      	add	r1, sp, #8
 8013dd2:	f002 fbaf 	bl	8016534 <memcpy>
	PALDevDataSet(Dev, SigmaEstRefArray, 100);
 8013dd6:	239a      	movs	r3, #154	; 0x9a
 8013dd8:	005b      	lsls	r3, r3, #1
 8013dda:	2264      	movs	r2, #100	; 0x64
 8013ddc:	52ea      	strh	r2, [r5, r3]
	PALDevDataSet(Dev, SigmaEstEffPulseWidth, 900);
 8013dde:	3302      	adds	r3, #2
 8013de0:	22e1      	movs	r2, #225	; 0xe1
 8013de2:	0092      	lsls	r2, r2, #2
 8013de4:	52ea      	strh	r2, [r5, r3]
	PALDevDataSet(Dev, SigmaEstEffAmbWidth, 500);
 8013de6:	3302      	adds	r3, #2
 8013de8:	3a91      	subs	r2, #145	; 0x91
 8013dea:	3aff      	subs	r2, #255	; 0xff
 8013dec:	52ea      	strh	r2, [r5, r3]
	PALDevDataSet(Dev, targetRefRate, 0x0A00); /* 20 MCPS in 9:7 format */
 8013dee:	3304      	adds	r3, #4
 8013df0:	22a0      	movs	r2, #160	; 0xa0
 8013df2:	0112      	lsls	r2, r2, #4
 8013df4:	52ea      	strh	r2, [r5, r3]
	PALDevDataSet(Dev, UseInternalTuningSettings, 1);
 8013df6:	3314      	adds	r3, #20
 8013df8:	2201      	movs	r2, #1
 8013dfa:	54ea      	strb	r2, [r5, r3]
	Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8013dfc:	2180      	movs	r1, #128	; 0x80
 8013dfe:	0028      	movs	r0, r5
 8013e00:	f002 fab2 	bl	8016368 <VL53L0X_WrByte>
 8013e04:	0006      	movs	r6, r0
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8013e06:	2201      	movs	r2, #1
 8013e08:	21ff      	movs	r1, #255	; 0xff
 8013e0a:	0028      	movs	r0, r5
 8013e0c:	f002 faac 	bl	8016368 <VL53L0X_WrByte>
 8013e10:	4330      	orrs	r0, r6
 8013e12:	4304      	orrs	r4, r0
 8013e14:	b264      	sxtb	r4, r4
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8013e16:	2200      	movs	r2, #0
 8013e18:	2100      	movs	r1, #0
 8013e1a:	0028      	movs	r0, r5
 8013e1c:	f002 faa4 	bl	8016368 <VL53L0X_WrByte>
 8013e20:	4304      	orrs	r4, r0
 8013e22:	b264      	sxtb	r4, r4
	Status |= VL53L0X_RdByte(Dev, 0x91, &StopVariable);
 8013e24:	466b      	mov	r3, sp
 8013e26:	1dde      	adds	r6, r3, #7
 8013e28:	0032      	movs	r2, r6
 8013e2a:	2191      	movs	r1, #145	; 0x91
 8013e2c:	0028      	movs	r0, r5
 8013e2e:	f002 fae5 	bl	80163fc <VL53L0X_RdByte>
 8013e32:	4304      	orrs	r4, r0
 8013e34:	b264      	sxtb	r4, r4
	PALDevDataSet(Dev, StopVariable, StopVariable);
 8013e36:	7832      	ldrb	r2, [r6, #0]
 8013e38:	239d      	movs	r3, #157	; 0x9d
 8013e3a:	005b      	lsls	r3, r3, #1
 8013e3c:	54ea      	strb	r2, [r5, r3]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8013e3e:	2201      	movs	r2, #1
 8013e40:	2100      	movs	r1, #0
 8013e42:	0028      	movs	r0, r5
 8013e44:	f002 fa90 	bl	8016368 <VL53L0X_WrByte>
 8013e48:	4304      	orrs	r4, r0
 8013e4a:	b264      	sxtb	r4, r4
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8013e4c:	2200      	movs	r2, #0
 8013e4e:	21ff      	movs	r1, #255	; 0xff
 8013e50:	0028      	movs	r0, r5
 8013e52:	f002 fa89 	bl	8016368 <VL53L0X_WrByte>
 8013e56:	4304      	orrs	r4, r0
 8013e58:	b264      	sxtb	r4, r4
	Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8013e5a:	2200      	movs	r2, #0
 8013e5c:	2180      	movs	r1, #128	; 0x80
 8013e5e:	0028      	movs	r0, r5
 8013e60:	f002 fa82 	bl	8016368 <VL53L0X_WrByte>
 8013e64:	4320      	orrs	r0, r4
 8013e66:	b240      	sxtb	r0, r0
		if (Status == VL53L0X_ERROR_NONE)
 8013e68:	2800      	cmp	r0, #0
 8013e6a:	d15e      	bne.n	8013f2a <VL53L0X_DataInit+0x1ae>
			Status |= VL53L0X_SetLimitCheckEnable(Dev, i, 1);
 8013e6c:	2201      	movs	r2, #1
 8013e6e:	2100      	movs	r1, #0
 8013e70:	0028      	movs	r0, r5
 8013e72:	f7ff fe55 	bl	8013b20 <VL53L0X_SetLimitCheckEnable>
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8013e76:	2401      	movs	r4, #1
		if (Status == VL53L0X_ERROR_NONE)
 8013e78:	2800      	cmp	r0, #0
 8013e7a:	d156      	bne.n	8013f2a <VL53L0X_DataInit+0x1ae>
			Status |= VL53L0X_SetLimitCheckEnable(Dev, i, 1);
 8013e7c:	b2a1      	uxth	r1, r4
 8013e7e:	2201      	movs	r2, #1
 8013e80:	0028      	movs	r0, r5
 8013e82:	f7ff fe4d 	bl	8013b20 <VL53L0X_SetLimitCheckEnable>
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8013e86:	3401      	adds	r4, #1
 8013e88:	2c06      	cmp	r4, #6
 8013e8a:	d1f5      	bne.n	8013e78 <VL53L0X_DataInit+0xfc>
	if (Status == VL53L0X_ERROR_NONE)
 8013e8c:	2800      	cmp	r0, #0
 8013e8e:	d14c      	bne.n	8013f2a <VL53L0X_DataInit+0x1ae>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8013e90:	2200      	movs	r2, #0
 8013e92:	2102      	movs	r1, #2
 8013e94:	0028      	movs	r0, r5
 8013e96:	f7ff fe43 	bl	8013b20 <VL53L0X_SetLimitCheckEnable>
	if (Status == VL53L0X_ERROR_NONE)
 8013e9a:	2800      	cmp	r0, #0
 8013e9c:	d145      	bne.n	8013f2a <VL53L0X_DataInit+0x1ae>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8013e9e:	2200      	movs	r2, #0
 8013ea0:	2103      	movs	r1, #3
 8013ea2:	0028      	movs	r0, r5
 8013ea4:	f7ff fe3c 	bl	8013b20 <VL53L0X_SetLimitCheckEnable>
	if (Status == VL53L0X_ERROR_NONE)
 8013ea8:	2800      	cmp	r0, #0
 8013eaa:	d13e      	bne.n	8013f2a <VL53L0X_DataInit+0x1ae>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8013eac:	2200      	movs	r2, #0
 8013eae:	2104      	movs	r1, #4
 8013eb0:	0028      	movs	r0, r5
 8013eb2:	f7ff fe35 	bl	8013b20 <VL53L0X_SetLimitCheckEnable>
	if (Status == VL53L0X_ERROR_NONE)
 8013eb6:	2800      	cmp	r0, #0
 8013eb8:	d137      	bne.n	8013f2a <VL53L0X_DataInit+0x1ae>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8013eba:	2200      	movs	r2, #0
 8013ebc:	2105      	movs	r1, #5
 8013ebe:	0028      	movs	r0, r5
 8013ec0:	f7ff fe2e 	bl	8013b20 <VL53L0X_SetLimitCheckEnable>
	if (Status == VL53L0X_ERROR_NONE) {
 8013ec4:	2800      	cmp	r0, #0
 8013ec6:	d130      	bne.n	8013f2a <VL53L0X_DataInit+0x1ae>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8013ec8:	2290      	movs	r2, #144	; 0x90
 8013eca:	0352      	lsls	r2, r2, #13
 8013ecc:	2100      	movs	r1, #0
 8013ece:	0028      	movs	r0, r5
 8013ed0:	f7ff fe80 	bl	8013bd4 <VL53L0X_SetLimitCheckValue>
	if (Status == VL53L0X_ERROR_NONE) {
 8013ed4:	2800      	cmp	r0, #0
 8013ed6:	d128      	bne.n	8013f2a <VL53L0X_DataInit+0x1ae>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8013ed8:	2280      	movs	r2, #128	; 0x80
 8013eda:	01d2      	lsls	r2, r2, #7
 8013edc:	2101      	movs	r1, #1
 8013ede:	0028      	movs	r0, r5
 8013ee0:	f7ff fe78 	bl	8013bd4 <VL53L0X_SetLimitCheckValue>
	if (Status == VL53L0X_ERROR_NONE) {
 8013ee4:	2800      	cmp	r0, #0
 8013ee6:	d120      	bne.n	8013f2a <VL53L0X_DataInit+0x1ae>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8013ee8:	228c      	movs	r2, #140	; 0x8c
 8013eea:	0392      	lsls	r2, r2, #14
 8013eec:	2102      	movs	r1, #2
 8013eee:	0028      	movs	r0, r5
 8013ef0:	f7ff fe70 	bl	8013bd4 <VL53L0X_SetLimitCheckValue>
	if (Status == VL53L0X_ERROR_NONE) {
 8013ef4:	2800      	cmp	r0, #0
 8013ef6:	d118      	bne.n	8013f2a <VL53L0X_DataInit+0x1ae>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8013ef8:	2200      	movs	r2, #0
 8013efa:	2103      	movs	r1, #3
 8013efc:	0028      	movs	r0, r5
 8013efe:	f7ff fe69 	bl	8013bd4 <VL53L0X_SetLimitCheckValue>
	if (Status == VL53L0X_ERROR_NONE) {
 8013f02:	2800      	cmp	r0, #0
 8013f04:	d111      	bne.n	8013f2a <VL53L0X_DataInit+0x1ae>
		PALDevDataSet(Dev, SequenceConfig, 0xFF);
 8013f06:	2398      	movs	r3, #152	; 0x98
 8013f08:	005b      	lsls	r3, r3, #1
 8013f0a:	22ff      	movs	r2, #255	; 0xff
 8013f0c:	54ea      	strb	r2, [r5, r3]
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8013f0e:	2101      	movs	r1, #1
 8013f10:	0028      	movs	r0, r5
 8013f12:	f002 fa29 	bl	8016368 <VL53L0X_WrByte>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_WAIT_STATICINIT);
 8013f16:	2399      	movs	r3, #153	; 0x99
 8013f18:	005b      	lsls	r3, r3, #1
 8013f1a:	2201      	movs	r2, #1
 8013f1c:	54ea      	strb	r2, [r5, r3]
	if (Status == VL53L0X_ERROR_NONE)
 8013f1e:	2800      	cmp	r0, #0
 8013f20:	d103      	bne.n	8013f2a <VL53L0X_DataInit+0x1ae>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 0);
 8013f22:	2316      	movs	r3, #22
 8013f24:	33ff      	adds	r3, #255	; 0xff
 8013f26:	2200      	movs	r2, #0
 8013f28:	54ea      	strb	r2, [r5, r3]
}
 8013f2a:	b012      	add	sp, #72	; 0x48
 8013f2c:	bd70      	pop	{r4, r5, r6, pc}
		Status = VL53L0X_WrByte(Dev, 0x88, 0x00);
 8013f2e:	2200      	movs	r2, #0
 8013f30:	2188      	movs	r1, #136	; 0x88
 8013f32:	0028      	movs	r0, r5
 8013f34:	f002 fa18 	bl	8016368 <VL53L0X_WrByte>
 8013f38:	e72b      	b.n	8013d92 <VL53L0X_DataInit+0x16>
 8013f3a:	46c0      	nop			; (mov r8, r8)
 8013f3c:	00016b85 	.word	0x00016b85
 8013f40:	000970a4 	.word	0x000970a4

08013f44 <VL53L0X_PerformRefCalibration>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefCalibration(VL53L0X_DEV Dev, uint8_t *pVhvSettings,
	uint8_t *pPhaseCal)
{
 8013f44:	b510      	push	{r4, lr}
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_calibration(Dev, pVhvSettings,
 8013f46:	2301      	movs	r3, #1
 8013f48:	f000 fe9c 	bl	8014c84 <VL53L0X_perform_ref_calibration>
		pPhaseCal, 1);

	LOG_FUNCTION_END(Status);
	return Status;
}
 8013f4c:	bd10      	pop	{r4, pc}
	...

08013f50 <VL53L0X_GetRangingMeasurementData>:
}


VL53L0X_Error VL53L0X_GetRangingMeasurementData(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 8013f50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013f52:	46de      	mov	lr, fp
 8013f54:	4657      	mov	r7, sl
 8013f56:	464e      	mov	r6, r9
 8013f58:	4645      	mov	r5, r8
 8013f5a:	b5e0      	push	{r5, r6, r7, lr}
 8013f5c:	b08f      	sub	sp, #60	; 0x3c
 8013f5e:	0004      	movs	r4, r0
 8013f60:	000d      	movs	r5, r1
	 * use multi read even if some registers are not useful, result will
	 * be more efficient
	 * start reading at 0x14 dec20
	 * end reading at 0x21 dec33 total 14 bytes to read
	 */
	Status = VL53L0X_ReadMulti(Dev, 0x14, localBuffer, 12);
 8013f62:	230c      	movs	r3, #12
 8013f64:	aa0a      	add	r2, sp, #40	; 0x28
 8013f66:	2114      	movs	r1, #20
 8013f68:	f002 f9ed 	bl	8016346 <VL53L0X_ReadMulti>

	if (Status == VL53L0X_ERROR_NONE) {
 8013f6c:	2800      	cmp	r0, #0
 8013f6e:	d178      	bne.n	8014062 <VL53L0X_GetRangingMeasurementData+0x112>

		pRangingMeasurementData->ZoneId = 0; /* Only one zone */
 8013f70:	2300      	movs	r3, #0
 8013f72:	75ab      	strb	r3, [r5, #22]
		pRangingMeasurementData->TimeStamp = 0; /* Not Implemented */
 8013f74:	602b      	str	r3, [r5, #0]

		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11], localBuffer[10]);
 8013f76:	a90a      	add	r1, sp, #40	; 0x28
 8013f78:	7a8a      	ldrb	r2, [r1, #10]
 8013f7a:	0212      	lsls	r2, r2, #8
 8013f7c:	7ac8      	ldrb	r0, [r1, #11]
 8013f7e:	1880      	adds	r0, r0, r2
 8013f80:	b280      	uxth	r0, r0
		/* cut1.1 if SYSTEM__RANGE_CONFIG if 1 range is 2bits fractional
		 *(format 11.2) else no fractional
		 */

		pRangingMeasurementData->MeasurementTimeUsec = 0;
 8013f82:	606b      	str	r3, [r5, #4]

		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 8013f84:	798b      	ldrb	r3, [r1, #6]
 8013f86:	021b      	lsls	r3, r3, #8
 8013f88:	79ce      	ldrb	r6, [r1, #7]
 8013f8a:	18f6      	adds	r6, r6, r3
 8013f8c:	b2b6      	uxth	r6, r6
 8013f8e:	0276      	lsls	r6, r6, #9
			VL53L0X_MAKEUINT16(localBuffer[7], localBuffer[6]));
		/* peak_signal_count_rate_rtn_mcps */
		pRangingMeasurementData->SignalRateRtnMegaCps = SignalRate;
 8013f90:	60ee      	str	r6, [r5, #12]

		AmbientRate = VL53L0X_MAKEUINT16(localBuffer[9], localBuffer[8]);
 8013f92:	7a0a      	ldrb	r2, [r1, #8]
 8013f94:	0212      	lsls	r2, r2, #8
 8013f96:	7a4b      	ldrb	r3, [r1, #9]
 8013f98:	189b      	adds	r3, r3, r2
		pRangingMeasurementData->AmbientRateRtnMegaCps =
			VL53L0X_FIXPOINT97TOFIXPOINT1616(AmbientRate);
 8013f9a:	b29b      	uxth	r3, r3
 8013f9c:	025b      	lsls	r3, r3, #9
		pRangingMeasurementData->AmbientRateRtnMegaCps =
 8013f9e:	612b      	str	r3, [r5, #16]

		EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3],
 8013fa0:	788b      	ldrb	r3, [r1, #2]
 8013fa2:	021b      	lsls	r3, r3, #8
 8013fa4:	78cf      	ldrb	r7, [r1, #3]
 8013fa6:	18ff      	adds	r7, r7, r3
 8013fa8:	b2bf      	uxth	r7, r7
			localBuffer[2]);
		/* EffectiveSpadRtnCount is 8.8 format */
		pRangingMeasurementData->EffectiveSpadRtnCount =
 8013faa:	82af      	strh	r7, [r5, #20]
			EffectiveSpadRtnCount;

		DeviceRangeStatus = localBuffer[0];
 8013fac:	780b      	ldrb	r3, [r1, #0]
 8013fae:	4698      	mov	r8, r3

		/* Get Linearity Corrective Gain */
		LinearityCorrectiveGain = PALDevDataGet(Dev,
 8013fb0:	23a9      	movs	r3, #169	; 0xa9
 8013fb2:	005b      	lsls	r3, r3, #1
 8013fb4:	5ae3      	ldrh	r3, [r4, r3]
			LinearityCorrectiveGain);

		/* Get ranging configuration */
		RangeFractionalEnable = PALDevDataGet(Dev,
 8013fb6:	2232      	movs	r2, #50	; 0x32
 8013fb8:	32ff      	adds	r2, #255	; 0xff
 8013fba:	5ca2      	ldrb	r2, [r4, r2]
 8013fbc:	4691      	mov	r9, r2
			RangeFractionalEnable);

		if (LinearityCorrectiveGain != 1000) {
 8013fbe:	22fa      	movs	r2, #250	; 0xfa
 8013fc0:	0092      	lsls	r2, r2, #2
 8013fc2:	4293      	cmp	r3, r2
 8013fc4:	d00a      	beq.n	8013fdc <VL53L0X_GetRangingMeasurementData+0x8c>

			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
				* tmpuint16 + 500) / 1000);
 8013fc6:	4358      	muls	r0, r3
 8013fc8:	30f5      	adds	r0, #245	; 0xf5
 8013fca:	30ff      	adds	r0, #255	; 0xff
 8013fcc:	0011      	movs	r1, r2
 8013fce:	f7ec f949 	bl	8000264 <__divsi3>

			/* Implement Xtalk */
			VL53L0X_GETPARAMETERFIELD(Dev,
 8013fd2:	6a21      	ldr	r1, [r4, #32]
				XTalkCompensationRateMegaCps,
				XTalkCompensationRateMegaCps);
			VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable,
				XTalkCompensationEnable);

			if (XTalkCompensationEnable) {
 8013fd4:	7f22      	ldrb	r2, [r4, #28]
 8013fd6:	2a00      	cmp	r2, #0
 8013fd8:	d14a      	bne.n	8014070 <VL53L0X_GetRangingMeasurementData+0x120>
			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
 8013fda:	b280      	uxth	r0, r0
				tmpuint16 = XtalkRangeMilliMeter;
			}

		}

		if (RangeFractionalEnable) {
 8013fdc:	464b      	mov	r3, r9
 8013fde:	2b00      	cmp	r3, #0
 8013fe0:	d058      	beq.n	8014094 <VL53L0X_GetRangingMeasurementData+0x144>
			pRangingMeasurementData->RangeMilliMeter =
				(uint16_t)((tmpuint16) >> 2);
 8013fe2:	0883      	lsrs	r3, r0, #2
			pRangingMeasurementData->RangeMilliMeter =
 8013fe4:	812b      	strh	r3, [r5, #8]
			pRangingMeasurementData->RangeFractionalPart =
				(uint8_t)((tmpuint16 & 0x03) << 6);
 8013fe6:	0180      	lsls	r0, r0, #6
			pRangingMeasurementData->RangeFractionalPart =
 8013fe8:	75e8      	strb	r0, [r5, #23]
		 * For a standard definition of RangeStatus, this should
		 * return 0 in case of good result after a ranging
		 * The range status depends on the device so call a device
		 * specific function to obtain the right Status.
		 */
		Status |= VL53L0X_get_pal_range_status(Dev, DeviceRangeStatus,
 8013fea:	2337      	movs	r3, #55	; 0x37
 8013fec:	446b      	add	r3, sp
 8013fee:	9301      	str	r3, [sp, #4]
 8013ff0:	9500      	str	r5, [sp, #0]
 8013ff2:	003b      	movs	r3, r7
 8013ff4:	0032      	movs	r2, r6
 8013ff6:	4641      	mov	r1, r8
 8013ff8:	0020      	movs	r0, r4
 8013ffa:	f002 f83b 	bl	8016074 <VL53L0X_get_pal_range_status>
			SignalRate, EffectiveSpadRtnCount,
			pRangingMeasurementData, &PalRangeStatus);

		if (Status == VL53L0X_ERROR_NONE)
 8013ffe:	2800      	cmp	r0, #0
 8014000:	d12f      	bne.n	8014062 <VL53L0X_GetRangingMeasurementData+0x112>
			pRangingMeasurementData->RangeStatus = PalRangeStatus;
 8014002:	2337      	movs	r3, #55	; 0x37
 8014004:	446b      	add	r3, sp
 8014006:	781b      	ldrb	r3, [r3, #0]
 8014008:	469b      	mov	fp, r3
 801400a:	762b      	strb	r3, [r5, #24]

	}

	if (Status == VL53L0X_ERROR_NONE) {
		/* Copy last read data into Dev buffer */
		LastRangeDataBuffer = PALDevDataGet(Dev, LastRangeMeasure);
 801400c:	ab03      	add	r3, sp, #12
 801400e:	469a      	mov	sl, r3
 8014010:	0023      	movs	r3, r4
 8014012:	3350      	adds	r3, #80	; 0x50
 8014014:	4651      	mov	r1, sl
 8014016:	cbc4      	ldmia	r3!, {r2, r6, r7}
 8014018:	c1c4      	stmia	r1!, {r2, r6, r7}
 801401a:	cbc4      	ldmia	r3!, {r2, r6, r7}
 801401c:	c1c4      	stmia	r1!, {r2, r6, r7}
 801401e:	681b      	ldr	r3, [r3, #0]
 8014020:	600b      	str	r3, [r1, #0]

		LastRangeDataBuffer.RangeMilliMeter =
			pRangingMeasurementData->RangeMilliMeter;
 8014022:	892b      	ldrh	r3, [r5, #8]
 8014024:	4699      	mov	r9, r3
		LastRangeDataBuffer.RangeFractionalPart =
			pRangingMeasurementData->RangeFractionalPart;
 8014026:	7deb      	ldrb	r3, [r5, #23]
		LastRangeDataBuffer.RangeDMaxMilliMeter =
			pRangingMeasurementData->RangeDMaxMilliMeter;
 8014028:	8969      	ldrh	r1, [r5, #10]
 801402a:	4688      	mov	r8, r1
		LastRangeDataBuffer.MeasurementTimeUsec =
			pRangingMeasurementData->MeasurementTimeUsec;
		LastRangeDataBuffer.SignalRateRtnMegaCps =
			pRangingMeasurementData->SignalRateRtnMegaCps;
 801402c:	68e9      	ldr	r1, [r5, #12]
 801402e:	468c      	mov	ip, r1
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
			pRangingMeasurementData->AmbientRateRtnMegaCps;
 8014030:	692f      	ldr	r7, [r5, #16]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
			pRangingMeasurementData->EffectiveSpadRtnCount;
 8014032:	8aa9      	ldrh	r1, [r5, #20]
		LastRangeDataBuffer.RangeStatus =
			pRangingMeasurementData->RangeStatus;

		PALDevDataSet(Dev, LastRangeMeasure, LastRangeDataBuffer);
 8014034:	686d      	ldr	r5, [r5, #4]
 8014036:	9504      	str	r5, [sp, #16]
 8014038:	464d      	mov	r5, r9
 801403a:	4652      	mov	r2, sl
 801403c:	8115      	strh	r5, [r2, #8]
 801403e:	4645      	mov	r5, r8
 8014040:	8155      	strh	r5, [r2, #10]
 8014042:	4665      	mov	r5, ip
 8014044:	9506      	str	r5, [sp, #24]
 8014046:	9707      	str	r7, [sp, #28]
 8014048:	8291      	strh	r1, [r2, #20]
 801404a:	75d3      	strb	r3, [r2, #23]
 801404c:	4653      	mov	r3, sl
 801404e:	465a      	mov	r2, fp
 8014050:	761a      	strb	r2, [r3, #24]
 8014052:	3450      	adds	r4, #80	; 0x50
 8014054:	4652      	mov	r2, sl
 8014056:	ca2a      	ldmia	r2!, {r1, r3, r5}
 8014058:	c42a      	stmia	r4!, {r1, r3, r5}
 801405a:	ca2a      	ldmia	r2!, {r1, r3, r5}
 801405c:	c42a      	stmia	r4!, {r1, r3, r5}
 801405e:	6813      	ldr	r3, [r2, #0]
 8014060:	6023      	str	r3, [r4, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
 8014062:	b00f      	add	sp, #60	; 0x3c
 8014064:	bcf0      	pop	{r4, r5, r6, r7}
 8014066:	46bb      	mov	fp, r7
 8014068:	46b2      	mov	sl, r6
 801406a:	46a9      	mov	r9, r5
 801406c:	46a0      	mov	r8, r4
 801406e:	bdf0      	pop	{r4, r5, r6, r7, pc}
					* EffectiveSpadRtnCount) >> 8))
 8014070:	0409      	lsls	r1, r1, #16
 8014072:	0c09      	lsrs	r1, r1, #16
 8014074:	4379      	muls	r1, r7
 8014076:	1209      	asrs	r1, r1, #8
				if ((SignalRate
 8014078:	428e      	cmp	r6, r1
 801407a:	d007      	beq.n	801408c <VL53L0X_GetRangingMeasurementData+0x13c>
					(tmpuint16 * SignalRate)
 801407c:	0400      	lsls	r0, r0, #16
 801407e:	0c00      	lsrs	r0, r0, #16
 8014080:	4370      	muls	r0, r6
						- ((XTalkCompensationRateMegaCps
 8014082:	1a71      	subs	r1, r6, r1
						/ (SignalRate
 8014084:	f7ec f864 	bl	8000150 <__udivsi3>
					XtalkRangeMilliMeter =
 8014088:	b280      	uxth	r0, r0
 801408a:	e7a7      	b.n	8013fdc <VL53L0X_GetRangingMeasurementData+0x8c>
					if (RangeFractionalEnable)
 801408c:	464b      	mov	r3, r9
 801408e:	2b00      	cmp	r3, #0
 8014090:	d104      	bne.n	801409c <VL53L0X_GetRangingMeasurementData+0x14c>
						XtalkRangeMilliMeter = 8888
 8014092:	4803      	ldr	r0, [pc, #12]	; (80140a0 <VL53L0X_GetRangingMeasurementData+0x150>)
			pRangingMeasurementData->RangeMilliMeter = tmpuint16;
 8014094:	8128      	strh	r0, [r5, #8]
			pRangingMeasurementData->RangeFractionalPart = 0;
 8014096:	2300      	movs	r3, #0
 8014098:	75eb      	strb	r3, [r5, #23]
 801409a:	e7a6      	b.n	8013fea <VL53L0X_GetRangingMeasurementData+0x9a>
						XtalkRangeMilliMeter = 8888;
 801409c:	4801      	ldr	r0, [pc, #4]	; (80140a4 <VL53L0X_GetRangingMeasurementData+0x154>)
 801409e:	e7a0      	b.n	8013fe2 <VL53L0X_GetRangingMeasurementData+0x92>
 80140a0:	00008ae0 	.word	0x00008ae0
 80140a4:	000022b8 	.word	0x000022b8

080140a8 <VL53L0X_SetInterruptThresholds>:
}

VL53L0X_Error VL53L0X_SetInterruptThresholds(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes DeviceMode, FixPoint1616_t ThresholdLow,
	FixPoint1616_t ThresholdHigh)
{
 80140a8:	b570      	push	{r4, r5, r6, lr}
 80140aa:	0005      	movs	r5, r0
 80140ac:	001c      	movs	r4, r3
	uint16_t Threshold16;
	LOG_FUNCTION_START("");

	/* no dependency on DeviceMode for Ewok */
	/* Need to divide by 2 because the FW will apply a x2 */
	Threshold16 = (uint16_t)((ThresholdLow >> 17) & 0x00fff);
 80140ae:	00d2      	lsls	r2, r2, #3
	Status = VL53L0X_WrWord(Dev, VL53L0X_REG_SYSTEM_THRESH_LOW, Threshold16);
 80140b0:	0d12      	lsrs	r2, r2, #20
 80140b2:	210e      	movs	r1, #14
 80140b4:	f002 f965 	bl	8016382 <VL53L0X_WrWord>

	if (Status == VL53L0X_ERROR_NONE) {
 80140b8:	2800      	cmp	r0, #0
 80140ba:	d000      	beq.n	80140be <VL53L0X_SetInterruptThresholds+0x16>
			Threshold16);
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
 80140bc:	bd70      	pop	{r4, r5, r6, pc}
		Threshold16 = (uint16_t)((ThresholdHigh >> 17) & 0x00fff);
 80140be:	00e2      	lsls	r2, r4, #3
		Status = VL53L0X_WrWord(Dev, VL53L0X_REG_SYSTEM_THRESH_HIGH,
 80140c0:	0d12      	lsrs	r2, r2, #20
 80140c2:	210c      	movs	r1, #12
 80140c4:	0028      	movs	r0, r5
 80140c6:	f002 f95c 	bl	8016382 <VL53L0X_WrWord>
 80140ca:	e7f7      	b.n	80140bc <VL53L0X_SetInterruptThresholds+0x14>

080140cc <VL53L0X_GetInterruptThresholds>:

VL53L0X_Error VL53L0X_GetInterruptThresholds(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes DeviceMode, FixPoint1616_t *pThresholdLow,
	FixPoint1616_t *pThresholdHigh)
{
 80140cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80140ce:	b083      	sub	sp, #12
 80140d0:	0004      	movs	r4, r0
 80140d2:	0015      	movs	r5, r2
 80140d4:	001e      	movs	r6, r3
	uint16_t Threshold16;
	LOG_FUNCTION_START("");

	/* no dependency on DeviceMode for Ewok */

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_LOW, &Threshold16);
 80140d6:	466b      	mov	r3, sp
 80140d8:	1d9f      	adds	r7, r3, #6
 80140da:	003a      	movs	r2, r7
 80140dc:	210e      	movs	r1, #14
 80140de:	f002 f99a 	bl	8016416 <VL53L0X_RdWord>
	/* Need to multiply by 2 because the FW will apply a x2 */
	*pThresholdLow = (FixPoint1616_t)((0x00fff & Threshold16) << 17);
 80140e2:	8839      	ldrh	r1, [r7, #0]
 80140e4:	0449      	lsls	r1, r1, #17
 80140e6:	4b0a      	ldr	r3, [pc, #40]	; (8014110 <VL53L0X_GetInterruptThresholds+0x44>)
 80140e8:	4019      	ands	r1, r3
 80140ea:	6029      	str	r1, [r5, #0]

	if (Status == VL53L0X_ERROR_NONE) {
 80140ec:	2800      	cmp	r0, #0
 80140ee:	d001      	beq.n	80140f4 <VL53L0X_GetInterruptThresholds+0x28>
			(FixPoint1616_t)((0x00fff & Threshold16) << 17);
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
 80140f0:	b003      	add	sp, #12
 80140f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_HIGH,
 80140f4:	466b      	mov	r3, sp
 80140f6:	1d9d      	adds	r5, r3, #6
 80140f8:	002a      	movs	r2, r5
 80140fa:	210c      	movs	r1, #12
 80140fc:	0020      	movs	r0, r4
 80140fe:	f002 f98a 	bl	8016416 <VL53L0X_RdWord>
			(FixPoint1616_t)((0x00fff & Threshold16) << 17);
 8014102:	882b      	ldrh	r3, [r5, #0]
 8014104:	045b      	lsls	r3, r3, #17
 8014106:	4a02      	ldr	r2, [pc, #8]	; (8014110 <VL53L0X_GetInterruptThresholds+0x44>)
 8014108:	4013      	ands	r3, r2
		*pThresholdHigh =
 801410a:	6033      	str	r3, [r6, #0]
 801410c:	e7f0      	b.n	80140f0 <VL53L0X_GetInterruptThresholds+0x24>
 801410e:	46c0      	nop			; (mov r8, r8)
 8014110:	1ffe0000 	.word	0x1ffe0000

08014114 <VL53L0X_CheckAndLoadInterruptSettings>:
{
 8014114:	b530      	push	{r4, r5, lr}
 8014116:	b083      	sub	sp, #12
 8014118:	0004      	movs	r4, r0
 801411a:	000d      	movs	r5, r1
	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 801411c:	23da      	movs	r3, #218	; 0xda
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH) ||
 801411e:	5cc3      	ldrb	r3, [r0, r3]
	if ((InterruptConfig ==
 8014120:	3b01      	subs	r3, #1
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8014122:	2000      	movs	r0, #0
	if ((InterruptConfig ==
 8014124:	2b02      	cmp	r3, #2
 8014126:	d901      	bls.n	801412c <VL53L0X_CheckAndLoadInterruptSettings+0x18>
}
 8014128:	b003      	add	sp, #12
 801412a:	bd30      	pop	{r4, r5, pc}
		Status = VL53L0X_GetInterruptThresholds(Dev,
 801412c:	466b      	mov	r3, sp
 801412e:	aa01      	add	r2, sp, #4
 8014130:	2101      	movs	r1, #1
 8014132:	0020      	movs	r0, r4
 8014134:	f7ff ffca 	bl	80140cc <VL53L0X_GetInterruptThresholds>
		if (((ThresholdLow > 255*65536) ||
 8014138:	23ff      	movs	r3, #255	; 0xff
 801413a:	041b      	lsls	r3, r3, #16
 801413c:	9a01      	ldr	r2, [sp, #4]
 801413e:	429a      	cmp	r2, r3
 8014140:	d802      	bhi.n	8014148 <VL53L0X_CheckAndLoadInterruptSettings+0x34>
 8014142:	9a00      	ldr	r2, [sp, #0]
 8014144:	429a      	cmp	r2, r3
 8014146:	d9ef      	bls.n	8014128 <VL53L0X_CheckAndLoadInterruptSettings+0x14>
			(ThresholdHigh > 255*65536)) &&
 8014148:	2800      	cmp	r0, #0
 801414a:	d1ed      	bne.n	8014128 <VL53L0X_CheckAndLoadInterruptSettings+0x14>
			if (StartNotStopFlag != 0) {
 801414c:	2d00      	cmp	r5, #0
 801414e:	d004      	beq.n	801415a <VL53L0X_CheckAndLoadInterruptSettings+0x46>
				Status = VL53L0X_load_tuning_settings(Dev,
 8014150:	4910      	ldr	r1, [pc, #64]	; (8014194 <VL53L0X_CheckAndLoadInterruptSettings+0x80>)
 8014152:	0020      	movs	r0, r4
 8014154:	f001 fd12 	bl	8015b7c <VL53L0X_load_tuning_settings>
 8014158:	e7e6      	b.n	8014128 <VL53L0X_CheckAndLoadInterruptSettings+0x14>
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 801415a:	2204      	movs	r2, #4
 801415c:	21ff      	movs	r1, #255	; 0xff
 801415e:	0020      	movs	r0, r4
 8014160:	f002 f902 	bl	8016368 <VL53L0X_WrByte>
 8014164:	0005      	movs	r5, r0
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 8014166:	2200      	movs	r2, #0
 8014168:	2170      	movs	r1, #112	; 0x70
 801416a:	0020      	movs	r0, r4
 801416c:	f002 f8fc 	bl	8016368 <VL53L0X_WrByte>
 8014170:	4305      	orrs	r5, r0
 8014172:	b26d      	sxtb	r5, r5
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8014174:	2200      	movs	r2, #0
 8014176:	21ff      	movs	r1, #255	; 0xff
 8014178:	0020      	movs	r0, r4
 801417a:	f002 f8f5 	bl	8016368 <VL53L0X_WrByte>
 801417e:	4305      	orrs	r5, r0
 8014180:	b26d      	sxtb	r5, r5
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8014182:	2200      	movs	r2, #0
 8014184:	2180      	movs	r1, #128	; 0x80
 8014186:	0020      	movs	r0, r4
 8014188:	f002 f8ee 	bl	8016368 <VL53L0X_WrByte>
 801418c:	4328      	orrs	r0, r5
 801418e:	b240      	sxtb	r0, r0
 8014190:	e7ca      	b.n	8014128 <VL53L0X_CheckAndLoadInterruptSettings+0x14>
 8014192:	46c0      	nop			; (mov r8, r8)
 8014194:	200001a0 	.word	0x200001a0

08014198 <VL53L0X_StartMeasurement>:
{
 8014198:	b5f0      	push	{r4, r5, r6, r7, lr}
 801419a:	46c6      	mov	lr, r8
 801419c:	b500      	push	{lr}
 801419e:	b082      	sub	sp, #8
 80141a0:	0004      	movs	r4, r0
	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 80141a2:	7c05      	ldrb	r5, [r0, #16]
	Status = VL53L0X_WrByte(Dev, 0x80, 0x01);
 80141a4:	2201      	movs	r2, #1
 80141a6:	2180      	movs	r1, #128	; 0x80
 80141a8:	f002 f8de 	bl	8016368 <VL53L0X_WrByte>
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80141ac:	2201      	movs	r2, #1
 80141ae:	21ff      	movs	r1, #255	; 0xff
 80141b0:	0020      	movs	r0, r4
 80141b2:	f002 f8d9 	bl	8016368 <VL53L0X_WrByte>
	Status = VL53L0X_WrByte(Dev, 0x00, 0x00);
 80141b6:	2200      	movs	r2, #0
 80141b8:	2100      	movs	r1, #0
 80141ba:	0020      	movs	r0, r4
 80141bc:	f002 f8d4 	bl	8016368 <VL53L0X_WrByte>
	Status = VL53L0X_WrByte(Dev, 0x91, PALDevDataGet(Dev, StopVariable));
 80141c0:	239d      	movs	r3, #157	; 0x9d
 80141c2:	005b      	lsls	r3, r3, #1
 80141c4:	5ce2      	ldrb	r2, [r4, r3]
 80141c6:	2191      	movs	r1, #145	; 0x91
 80141c8:	0020      	movs	r0, r4
 80141ca:	f002 f8cd 	bl	8016368 <VL53L0X_WrByte>
	Status = VL53L0X_WrByte(Dev, 0x00, 0x01);
 80141ce:	2201      	movs	r2, #1
 80141d0:	2100      	movs	r1, #0
 80141d2:	0020      	movs	r0, r4
 80141d4:	f002 f8c8 	bl	8016368 <VL53L0X_WrByte>
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80141d8:	2200      	movs	r2, #0
 80141da:	21ff      	movs	r1, #255	; 0xff
 80141dc:	0020      	movs	r0, r4
 80141de:	f002 f8c3 	bl	8016368 <VL53L0X_WrByte>
	Status = VL53L0X_WrByte(Dev, 0x80, 0x00);
 80141e2:	2200      	movs	r2, #0
 80141e4:	2180      	movs	r1, #128	; 0x80
 80141e6:	0020      	movs	r0, r4
 80141e8:	f002 f8be 	bl	8016368 <VL53L0X_WrByte>
	switch (DeviceMode) {
 80141ec:	2d01      	cmp	r5, #1
 80141ee:	d034      	beq.n	801425a <VL53L0X_StartMeasurement+0xc2>
 80141f0:	2d03      	cmp	r5, #3
 80141f2:	d045      	beq.n	8014280 <VL53L0X_StartMeasurement+0xe8>
 80141f4:	2d00      	cmp	r5, #0
 80141f6:	d005      	beq.n	8014204 <VL53L0X_StartMeasurement+0x6c>
 80141f8:	2008      	movs	r0, #8
 80141fa:	4240      	negs	r0, r0
}
 80141fc:	b002      	add	sp, #8
 80141fe:	bc80      	pop	{r7}
 8014200:	46b8      	mov	r8, r7
 8014202:	bdf0      	pop	{r4, r5, r6, r7, pc}
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x01);
 8014204:	2201      	movs	r2, #1
 8014206:	2100      	movs	r1, #0
 8014208:	0020      	movs	r0, r4
 801420a:	f002 f8ad 	bl	8016368 <VL53L0X_WrByte>
		Byte = StartStopByte;
 801420e:	466b      	mov	r3, sp
 8014210:	2201      	movs	r2, #1
 8014212:	71da      	strb	r2, [r3, #7]
		if (Status == VL53L0X_ERROR_NONE) {
 8014214:	2800      	cmp	r0, #0
 8014216:	d1f1      	bne.n	80141fc <VL53L0X_StartMeasurement+0x64>
			LoopNb = 0;
 8014218:	2700      	movs	r7, #0
			} while (((Byte & StartStopByte) == StartStopByte)
 801421a:	466b      	mov	r3, sp
 801421c:	1ddd      	adds	r5, r3, #7
 801421e:	2601      	movs	r6, #1
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 8014220:	23fa      	movs	r3, #250	; 0xfa
 8014222:	00db      	lsls	r3, r3, #3
 8014224:	4698      	mov	r8, r3
 8014226:	e004      	b.n	8014232 <VL53L0X_StartMeasurement+0x9a>
					Status = VL53L0X_RdByte(Dev,
 8014228:	002a      	movs	r2, r5
 801422a:	2100      	movs	r1, #0
 801422c:	0020      	movs	r0, r4
 801422e:	f002 f8e5 	bl	80163fc <VL53L0X_RdByte>
				LoopNb = LoopNb + 1;
 8014232:	3701      	adds	r7, #1
			} while (((Byte & StartStopByte) == StartStopByte)
 8014234:	782b      	ldrb	r3, [r5, #0]
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 8014236:	421e      	tst	r6, r3
 8014238:	d008      	beq.n	801424c <VL53L0X_StartMeasurement+0xb4>
				&& (Status == VL53L0X_ERROR_NONE)
 801423a:	2800      	cmp	r0, #0
 801423c:	d106      	bne.n	801424c <VL53L0X_StartMeasurement+0xb4>
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 801423e:	4547      	cmp	r7, r8
 8014240:	d002      	beq.n	8014248 <VL53L0X_StartMeasurement+0xb0>
				if (LoopNb > 0)
 8014242:	2f00      	cmp	r7, #0
 8014244:	d1f0      	bne.n	8014228 <VL53L0X_StartMeasurement+0x90>
 8014246:	e7f4      	b.n	8014232 <VL53L0X_StartMeasurement+0x9a>
				Status = VL53L0X_ERROR_TIME_OUT;
 8014248:	3807      	subs	r0, #7
 801424a:	e7d7      	b.n	80141fc <VL53L0X_StartMeasurement+0x64>
			if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 801424c:	23fa      	movs	r3, #250	; 0xfa
 801424e:	00db      	lsls	r3, r3, #3
 8014250:	429f      	cmp	r7, r3
 8014252:	d3d3      	bcc.n	80141fc <VL53L0X_StartMeasurement+0x64>
				Status = VL53L0X_ERROR_TIME_OUT;
 8014254:	2007      	movs	r0, #7
 8014256:	4240      	negs	r0, r0
 8014258:	e7d0      	b.n	80141fc <VL53L0X_StartMeasurement+0x64>
		if (Status == VL53L0X_ERROR_NONE)
 801425a:	2800      	cmp	r0, #0
 801425c:	d00b      	beq.n	8014276 <VL53L0X_StartMeasurement+0xde>
		Status = VL53L0X_WrByte(Dev,
 801425e:	2202      	movs	r2, #2
 8014260:	2100      	movs	r1, #0
 8014262:	0020      	movs	r0, r4
 8014264:	f002 f880 	bl	8016368 <VL53L0X_WrByte>
		if (Status == VL53L0X_ERROR_NONE) {
 8014268:	2800      	cmp	r0, #0
 801426a:	d1c7      	bne.n	80141fc <VL53L0X_StartMeasurement+0x64>
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 801426c:	2399      	movs	r3, #153	; 0x99
 801426e:	005b      	lsls	r3, r3, #1
 8014270:	2204      	movs	r2, #4
 8014272:	54e2      	strb	r2, [r4, r3]
 8014274:	e7c2      	b.n	80141fc <VL53L0X_StartMeasurement+0x64>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 8014276:	2101      	movs	r1, #1
 8014278:	0020      	movs	r0, r4
 801427a:	f7ff ff4b 	bl	8014114 <VL53L0X_CheckAndLoadInterruptSettings>
 801427e:	e7ee      	b.n	801425e <VL53L0X_StartMeasurement+0xc6>
		if (Status == VL53L0X_ERROR_NONE)
 8014280:	2800      	cmp	r0, #0
 8014282:	d00b      	beq.n	801429c <VL53L0X_StartMeasurement+0x104>
		Status = VL53L0X_WrByte(Dev,
 8014284:	2204      	movs	r2, #4
 8014286:	2100      	movs	r1, #0
 8014288:	0020      	movs	r0, r4
 801428a:	f002 f86d 	bl	8016368 <VL53L0X_WrByte>
		if (Status == VL53L0X_ERROR_NONE) {
 801428e:	2800      	cmp	r0, #0
 8014290:	d1b4      	bne.n	80141fc <VL53L0X_StartMeasurement+0x64>
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 8014292:	2399      	movs	r3, #153	; 0x99
 8014294:	005b      	lsls	r3, r3, #1
 8014296:	2204      	movs	r2, #4
 8014298:	54e2      	strb	r2, [r4, r3]
 801429a:	e7af      	b.n	80141fc <VL53L0X_StartMeasurement+0x64>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 801429c:	2101      	movs	r1, #1
 801429e:	0020      	movs	r0, r4
 80142a0:	f7ff ff38 	bl	8014114 <VL53L0X_CheckAndLoadInterruptSettings>
 80142a4:	e7ee      	b.n	8014284 <VL53L0X_StartMeasurement+0xec>

080142a6 <VL53L0X_PerformSingleMeasurement>:
{
 80142a6:	b570      	push	{r4, r5, r6, lr}
 80142a8:	0004      	movs	r4, r0
	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 80142aa:	7c05      	ldrb	r5, [r0, #16]
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 80142ac:	2d00      	cmp	r5, #0
 80142ae:	d00c      	beq.n	80142ca <VL53L0X_PerformSingleMeasurement+0x24>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 80142b0:	0020      	movs	r0, r4
 80142b2:	f000 fe82 	bl	8014fba <VL53L0X_measurement_poll_for_completion>
 80142b6:	0003      	movs	r3, r0
	if (Status == VL53L0X_ERROR_NONE
 80142b8:	4305      	orrs	r5, r0
 80142ba:	b268      	sxtb	r0, r5
 80142bc:	2800      	cmp	r0, #0
 80142be:	d109      	bne.n	80142d4 <VL53L0X_PerformSingleMeasurement+0x2e>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 80142c0:	2399      	movs	r3, #153	; 0x99
 80142c2:	005b      	lsls	r3, r3, #1
 80142c4:	2203      	movs	r2, #3
 80142c6:	54e2      	strb	r2, [r4, r3]
 80142c8:	e003      	b.n	80142d2 <VL53L0X_PerformSingleMeasurement+0x2c>
		Status = VL53L0X_StartMeasurement(Dev);
 80142ca:	f7ff ff65 	bl	8014198 <VL53L0X_StartMeasurement>
	if (Status == VL53L0X_ERROR_NONE)
 80142ce:	2800      	cmp	r0, #0
 80142d0:	d0ee      	beq.n	80142b0 <VL53L0X_PerformSingleMeasurement+0xa>
}
 80142d2:	bd70      	pop	{r4, r5, r6, pc}
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 80142d4:	0018      	movs	r0, r3
 80142d6:	e7fc      	b.n	80142d2 <VL53L0X_PerformSingleMeasurement+0x2c>

080142d8 <VL53L0X_StopMeasurement>:
{
 80142d8:	b510      	push	{r4, lr}
 80142da:	0004      	movs	r4, r0
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
 80142dc:	2200      	movs	r2, #0
 80142de:	2100      	movs	r1, #0
 80142e0:	f002 f842 	bl	8016368 <VL53L0X_WrByte>
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80142e4:	2201      	movs	r2, #1
 80142e6:	21ff      	movs	r1, #255	; 0xff
 80142e8:	0020      	movs	r0, r4
 80142ea:	f002 f83d 	bl	8016368 <VL53L0X_WrByte>
	Status = VL53L0X_WrByte(Dev, 0x00, 0x00);
 80142ee:	2200      	movs	r2, #0
 80142f0:	2100      	movs	r1, #0
 80142f2:	0020      	movs	r0, r4
 80142f4:	f002 f838 	bl	8016368 <VL53L0X_WrByte>
	Status = VL53L0X_WrByte(Dev, 0x91, 0x00);
 80142f8:	2200      	movs	r2, #0
 80142fa:	2191      	movs	r1, #145	; 0x91
 80142fc:	0020      	movs	r0, r4
 80142fe:	f002 f833 	bl	8016368 <VL53L0X_WrByte>
	Status = VL53L0X_WrByte(Dev, 0x00, 0x01);
 8014302:	2201      	movs	r2, #1
 8014304:	2100      	movs	r1, #0
 8014306:	0020      	movs	r0, r4
 8014308:	f002 f82e 	bl	8016368 <VL53L0X_WrByte>
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 801430c:	2200      	movs	r2, #0
 801430e:	21ff      	movs	r1, #255	; 0xff
 8014310:	0020      	movs	r0, r4
 8014312:	f002 f829 	bl	8016368 <VL53L0X_WrByte>
	if (Status == VL53L0X_ERROR_NONE) {
 8014316:	2800      	cmp	r0, #0
 8014318:	d107      	bne.n	801432a <VL53L0X_StopMeasurement+0x52>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 801431a:	2399      	movs	r3, #153	; 0x99
 801431c:	005b      	lsls	r3, r3, #1
 801431e:	2203      	movs	r2, #3
 8014320:	54e2      	strb	r2, [r4, r3]
		Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 0);
 8014322:	2100      	movs	r1, #0
 8014324:	0020      	movs	r0, r4
 8014326:	f7ff fef5 	bl	8014114 <VL53L0X_CheckAndLoadInterruptSettings>
}
 801432a:	bd10      	pop	{r4, pc}

0801432c <VL53L0X_GetStopCompletedStatus>:

VL53L0X_Error VL53L0X_GetStopCompletedStatus(VL53L0X_DEV Dev,
	uint32_t *pStopStatus)
{
 801432c:	b530      	push	{r4, r5, lr}
 801432e:	b083      	sub	sp, #12
 8014330:	0004      	movs	r4, r0
 8014332:	000d      	movs	r5, r1
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint8_t Byte = 0;
 8014334:	466b      	mov	r3, sp
 8014336:	2200      	movs	r2, #0
 8014338:	71da      	strb	r2, [r3, #7]
	LOG_FUNCTION_START("");

	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 801433a:	3201      	adds	r2, #1
 801433c:	21ff      	movs	r1, #255	; 0xff
 801433e:	f002 f813 	bl	8016368 <VL53L0X_WrByte>

	if (Status == VL53L0X_ERROR_NONE)
 8014342:	2800      	cmp	r0, #0
 8014344:	d007      	beq.n	8014356 <VL53L0X_GetStopCompletedStatus+0x2a>
		Status = VL53L0X_RdByte(Dev, 0x04, &Byte);

	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x0);

	*pStopStatus = Byte;
 8014346:	466b      	mov	r3, sp
 8014348:	3307      	adds	r3, #7
 801434a:	781b      	ldrb	r3, [r3, #0]
 801434c:	602b      	str	r3, [r5, #0]

	if (Byte == 0) {
 801434e:	2b00      	cmp	r3, #0
 8014350:	d00f      	beq.n	8014372 <VL53L0X_GetStopCompletedStatus+0x46>
		Status = VL53L0X_WrByte(Dev, 0x80, 0x00);
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
 8014352:	b003      	add	sp, #12
 8014354:	bd30      	pop	{r4, r5, pc}
		Status = VL53L0X_RdByte(Dev, 0x04, &Byte);
 8014356:	466b      	mov	r3, sp
 8014358:	1dda      	adds	r2, r3, #7
 801435a:	2104      	movs	r1, #4
 801435c:	0020      	movs	r0, r4
 801435e:	f002 f84d 	bl	80163fc <VL53L0X_RdByte>
	if (Status == VL53L0X_ERROR_NONE)
 8014362:	2800      	cmp	r0, #0
 8014364:	d1ef      	bne.n	8014346 <VL53L0X_GetStopCompletedStatus+0x1a>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x0);
 8014366:	2200      	movs	r2, #0
 8014368:	21ff      	movs	r1, #255	; 0xff
 801436a:	0020      	movs	r0, r4
 801436c:	f001 fffc 	bl	8016368 <VL53L0X_WrByte>
 8014370:	e7e9      	b.n	8014346 <VL53L0X_GetStopCompletedStatus+0x1a>
		Status = VL53L0X_WrByte(Dev, 0x80, 0x01);
 8014372:	2201      	movs	r2, #1
 8014374:	2180      	movs	r1, #128	; 0x80
 8014376:	0020      	movs	r0, r4
 8014378:	f001 fff6 	bl	8016368 <VL53L0X_WrByte>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 801437c:	2201      	movs	r2, #1
 801437e:	21ff      	movs	r1, #255	; 0xff
 8014380:	0020      	movs	r0, r4
 8014382:	f001 fff1 	bl	8016368 <VL53L0X_WrByte>
		Status = VL53L0X_WrByte(Dev, 0x00, 0x00);
 8014386:	2200      	movs	r2, #0
 8014388:	2100      	movs	r1, #0
 801438a:	0020      	movs	r0, r4
 801438c:	f001 ffec 	bl	8016368 <VL53L0X_WrByte>
		Status = VL53L0X_WrByte(Dev, 0x91,
 8014390:	239d      	movs	r3, #157	; 0x9d
 8014392:	005b      	lsls	r3, r3, #1
 8014394:	5ce2      	ldrb	r2, [r4, r3]
 8014396:	2191      	movs	r1, #145	; 0x91
 8014398:	0020      	movs	r0, r4
 801439a:	f001 ffe5 	bl	8016368 <VL53L0X_WrByte>
		Status = VL53L0X_WrByte(Dev, 0x00, 0x01);
 801439e:	2201      	movs	r2, #1
 80143a0:	2100      	movs	r1, #0
 80143a2:	0020      	movs	r0, r4
 80143a4:	f001 ffe0 	bl	8016368 <VL53L0X_WrByte>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80143a8:	2200      	movs	r2, #0
 80143aa:	21ff      	movs	r1, #255	; 0xff
 80143ac:	0020      	movs	r0, r4
 80143ae:	f001 ffdb 	bl	8016368 <VL53L0X_WrByte>
		Status = VL53L0X_WrByte(Dev, 0x80, 0x00);
 80143b2:	2200      	movs	r2, #0
 80143b4:	2180      	movs	r1, #128	; 0x80
 80143b6:	0020      	movs	r0, r4
 80143b8:	f001 ffd6 	bl	8016368 <VL53L0X_WrByte>
 80143bc:	e7c9      	b.n	8014352 <VL53L0X_GetStopCompletedStatus+0x26>

080143be <VL53L0X_ClearInterruptMask>:

/* Group PAL Interrupt Functions */
VL53L0X_Error VL53L0X_ClearInterruptMask(VL53L0X_DEV Dev, uint32_t InterruptMask)
{
 80143be:	b5f0      	push	{r4, r5, r6, r7, lr}
 80143c0:	b083      	sub	sp, #12
 80143c2:	0006      	movs	r6, r0
	uint8_t LoopCount;
	uint8_t Byte;
	LOG_FUNCTION_START("");

	/* clear bit 0 range interrupt, bit 1 error interrupt */
	LoopCount = 0;
 80143c4:	2500      	movs	r5, #0
		Status |= VL53L0X_RdByte(Dev,
			VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
		LoopCount++;
	} while (((Byte & 0x07) != 0x00)
			&& (LoopCount < 3)
			&& (Status == VL53L0X_ERROR_NONE));
 80143c6:	2707      	movs	r7, #7
		Status = VL53L0X_WrByte(Dev,
 80143c8:	2201      	movs	r2, #1
 80143ca:	210b      	movs	r1, #11
 80143cc:	0030      	movs	r0, r6
 80143ce:	f001 ffcb 	bl	8016368 <VL53L0X_WrByte>
 80143d2:	0004      	movs	r4, r0
		Status |= VL53L0X_WrByte(Dev,
 80143d4:	2200      	movs	r2, #0
 80143d6:	210b      	movs	r1, #11
 80143d8:	0030      	movs	r0, r6
 80143da:	f001 ffc5 	bl	8016368 <VL53L0X_WrByte>
 80143de:	4304      	orrs	r4, r0
 80143e0:	b264      	sxtb	r4, r4
		Status |= VL53L0X_RdByte(Dev,
 80143e2:	466b      	mov	r3, sp
 80143e4:	1dda      	adds	r2, r3, #7
 80143e6:	2113      	movs	r1, #19
 80143e8:	0030      	movs	r0, r6
 80143ea:	f002 f807 	bl	80163fc <VL53L0X_RdByte>
 80143ee:	4320      	orrs	r0, r4
 80143f0:	b240      	sxtb	r0, r0
		LoopCount++;
 80143f2:	3501      	adds	r5, #1
 80143f4:	b2ed      	uxtb	r5, r5
			&& (Status == VL53L0X_ERROR_NONE));
 80143f6:	466b      	mov	r3, sp
 80143f8:	79db      	ldrb	r3, [r3, #7]
 80143fa:	421f      	tst	r7, r3
 80143fc:	d004      	beq.n	8014408 <VL53L0X_ClearInterruptMask+0x4a>
			&& (LoopCount < 3)
 80143fe:	2d03      	cmp	r5, #3
 8014400:	d009      	beq.n	8014416 <VL53L0X_ClearInterruptMask+0x58>
			&& (Status == VL53L0X_ERROR_NONE));
 8014402:	2800      	cmp	r0, #0
 8014404:	d0e0      	beq.n	80143c8 <VL53L0X_ClearInterruptMask+0xa>
 8014406:	e001      	b.n	801440c <VL53L0X_ClearInterruptMask+0x4e>


	if (LoopCount >= 3)
 8014408:	2d02      	cmp	r5, #2
 801440a:	d801      	bhi.n	8014410 <VL53L0X_ClearInterruptMask+0x52>
		Status = VL53L0X_ERROR_INTERRUPT_NOT_CLEARED;

	LOG_FUNCTION_END(Status);
	return Status;
}
 801440c:	b003      	add	sp, #12
 801440e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		Status = VL53L0X_ERROR_INTERRUPT_NOT_CLEARED;
 8014410:	200c      	movs	r0, #12
 8014412:	4240      	negs	r0, r0
 8014414:	e7fa      	b.n	801440c <VL53L0X_ClearInterruptMask+0x4e>
 8014416:	200c      	movs	r0, #12
 8014418:	4240      	negs	r0, r0
 801441a:	e7f7      	b.n	801440c <VL53L0X_ClearInterruptMask+0x4e>

0801441c <VL53L0X_PerformSingleRangingMeasurement>:
{
 801441c:	b570      	push	{r4, r5, r6, lr}
 801441e:	0005      	movs	r5, r0
 8014420:	000c      	movs	r4, r1
	Status = VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 8014422:	2100      	movs	r1, #0
 8014424:	f7ff fa36 	bl	8013894 <VL53L0X_SetDeviceMode>
	if (Status == VL53L0X_ERROR_NONE)
 8014428:	2800      	cmp	r0, #0
 801442a:	d000      	beq.n	801442e <VL53L0X_PerformSingleRangingMeasurement+0x12>
}
 801442c:	bd70      	pop	{r4, r5, r6, pc}
		Status = VL53L0X_PerformSingleMeasurement(Dev);
 801442e:	0028      	movs	r0, r5
 8014430:	f7ff ff39 	bl	80142a6 <VL53L0X_PerformSingleMeasurement>
	if (Status == VL53L0X_ERROR_NONE)
 8014434:	2800      	cmp	r0, #0
 8014436:	d1f9      	bne.n	801442c <VL53L0X_PerformSingleRangingMeasurement+0x10>
		Status = VL53L0X_GetRangingMeasurementData(Dev,
 8014438:	0021      	movs	r1, r4
 801443a:	0028      	movs	r0, r5
 801443c:	f7ff fd88 	bl	8013f50 <VL53L0X_GetRangingMeasurementData>
	if (Status == VL53L0X_ERROR_NONE)
 8014440:	2800      	cmp	r0, #0
 8014442:	d1f3      	bne.n	801442c <VL53L0X_PerformSingleRangingMeasurement+0x10>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8014444:	2100      	movs	r1, #0
 8014446:	0028      	movs	r0, r5
 8014448:	f7ff ffb9 	bl	80143be <VL53L0X_ClearInterruptMask>
 801444c:	e7ee      	b.n	801442c <VL53L0X_PerformSingleRangingMeasurement+0x10>

0801444e <VL53L0X_SetGpioConfig>:
{
 801444e:	b570      	push	{r4, r5, r6, lr}
 8014450:	0005      	movs	r5, r0
 8014452:	001c      	movs	r4, r3
 8014454:	ab04      	add	r3, sp, #16
 8014456:	781e      	ldrb	r6, [r3, #0]
	if (Pin != 0) {
 8014458:	2900      	cmp	r1, #0
 801445a:	d000      	beq.n	801445e <VL53L0X_SetGpioConfig+0x10>
 801445c:	e095      	b.n	801458a <VL53L0X_SetGpioConfig+0x13c>
	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_DRIVE) {
 801445e:	2a14      	cmp	r2, #20
 8014460:	d009      	beq.n	8014476 <VL53L0X_SetGpioConfig+0x28>
	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_OSC) {
 8014462:	2a15      	cmp	r2, #21
 8014464:	d011      	beq.n	801448a <VL53L0X_SetGpioConfig+0x3c>
			switch (Functionality) {
 8014466:	2c04      	cmp	r4, #4
 8014468:	d900      	bls.n	801446c <VL53L0X_SetGpioConfig+0x1e>
 801446a:	e076      	b.n	801455a <VL53L0X_SetGpioConfig+0x10c>
			Status = VL53L0X_WrByte(Dev,
 801446c:	0022      	movs	r2, r4
 801446e:	210a      	movs	r1, #10
 8014470:	f001 ff7a 	bl	8016368 <VL53L0X_WrByte>
 8014474:	e073      	b.n	801455e <VL53L0X_SetGpioConfig+0x110>
			data = 1;
 8014476:	4272      	negs	r2, r6
 8014478:	4172      	adcs	r2, r6
 801447a:	4252      	negs	r2, r2
 801447c:	260f      	movs	r6, #15
 801447e:	4032      	ands	r2, r6
 8014480:	3201      	adds	r2, #1
		Status = VL53L0X_WrByte(Dev,
 8014482:	3184      	adds	r1, #132	; 0x84
 8014484:	f001 ff70 	bl	8016368 <VL53L0X_WrByte>
}
 8014488:	bd70      	pop	{r4, r5, r6, pc}
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 801448a:	3a14      	subs	r2, #20
 801448c:	21ff      	movs	r1, #255	; 0xff
 801448e:	f001 ff6b 	bl	8016368 <VL53L0X_WrByte>
 8014492:	0004      	movs	r4, r0
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8014494:	2200      	movs	r2, #0
 8014496:	2100      	movs	r1, #0
 8014498:	0028      	movs	r0, r5
 801449a:	f001 ff65 	bl	8016368 <VL53L0X_WrByte>
 801449e:	4304      	orrs	r4, r0
 80144a0:	b264      	sxtb	r4, r4
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 80144a2:	2200      	movs	r2, #0
 80144a4:	21ff      	movs	r1, #255	; 0xff
 80144a6:	0028      	movs	r0, r5
 80144a8:	f001 ff5e 	bl	8016368 <VL53L0X_WrByte>
 80144ac:	4304      	orrs	r4, r0
 80144ae:	b264      	sxtb	r4, r4
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 80144b0:	2201      	movs	r2, #1
 80144b2:	2180      	movs	r1, #128	; 0x80
 80144b4:	0028      	movs	r0, r5
 80144b6:	f001 ff57 	bl	8016368 <VL53L0X_WrByte>
 80144ba:	4304      	orrs	r4, r0
 80144bc:	b264      	sxtb	r4, r4
		Status |= VL53L0X_WrByte(Dev, 0x85, 0x02);
 80144be:	2202      	movs	r2, #2
 80144c0:	2185      	movs	r1, #133	; 0x85
 80144c2:	0028      	movs	r0, r5
 80144c4:	f001 ff50 	bl	8016368 <VL53L0X_WrByte>
 80144c8:	4304      	orrs	r4, r0
 80144ca:	b264      	sxtb	r4, r4
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x04);
 80144cc:	2204      	movs	r2, #4
 80144ce:	21ff      	movs	r1, #255	; 0xff
 80144d0:	0028      	movs	r0, r5
 80144d2:	f001 ff49 	bl	8016368 <VL53L0X_WrByte>
 80144d6:	4304      	orrs	r4, r0
 80144d8:	b264      	sxtb	r4, r4
		Status |= VL53L0X_WrByte(Dev, 0xcd, 0x00);
 80144da:	2200      	movs	r2, #0
 80144dc:	21cd      	movs	r1, #205	; 0xcd
 80144de:	0028      	movs	r0, r5
 80144e0:	f001 ff42 	bl	8016368 <VL53L0X_WrByte>
 80144e4:	4304      	orrs	r4, r0
 80144e6:	b264      	sxtb	r4, r4
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x11);
 80144e8:	2211      	movs	r2, #17
 80144ea:	21cc      	movs	r1, #204	; 0xcc
 80144ec:	0028      	movs	r0, r5
 80144ee:	f001 ff3b 	bl	8016368 <VL53L0X_WrByte>
 80144f2:	4304      	orrs	r4, r0
 80144f4:	b264      	sxtb	r4, r4
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x07);
 80144f6:	2207      	movs	r2, #7
 80144f8:	21ff      	movs	r1, #255	; 0xff
 80144fa:	0028      	movs	r0, r5
 80144fc:	f001 ff34 	bl	8016368 <VL53L0X_WrByte>
 8014500:	4304      	orrs	r4, r0
 8014502:	b264      	sxtb	r4, r4
		Status |= VL53L0X_WrByte(Dev, 0xbe, 0x00);
 8014504:	2200      	movs	r2, #0
 8014506:	21be      	movs	r1, #190	; 0xbe
 8014508:	0028      	movs	r0, r5
 801450a:	f001 ff2d 	bl	8016368 <VL53L0X_WrByte>
 801450e:	4304      	orrs	r4, r0
 8014510:	b264      	sxtb	r4, r4
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x06);
 8014512:	2206      	movs	r2, #6
 8014514:	21ff      	movs	r1, #255	; 0xff
 8014516:	0028      	movs	r0, r5
 8014518:	f001 ff26 	bl	8016368 <VL53L0X_WrByte>
 801451c:	4304      	orrs	r4, r0
 801451e:	b264      	sxtb	r4, r4
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x09);
 8014520:	2209      	movs	r2, #9
 8014522:	21cc      	movs	r1, #204	; 0xcc
 8014524:	0028      	movs	r0, r5
 8014526:	f001 ff1f 	bl	8016368 <VL53L0X_WrByte>
 801452a:	4304      	orrs	r4, r0
 801452c:	b264      	sxtb	r4, r4
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 801452e:	2200      	movs	r2, #0
 8014530:	21ff      	movs	r1, #255	; 0xff
 8014532:	0028      	movs	r0, r5
 8014534:	f001 ff18 	bl	8016368 <VL53L0X_WrByte>
 8014538:	4304      	orrs	r4, r0
 801453a:	b264      	sxtb	r4, r4
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 801453c:	2201      	movs	r2, #1
 801453e:	21ff      	movs	r1, #255	; 0xff
 8014540:	0028      	movs	r0, r5
 8014542:	f001 ff11 	bl	8016368 <VL53L0X_WrByte>
 8014546:	4304      	orrs	r4, r0
 8014548:	b264      	sxtb	r4, r4
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 801454a:	2200      	movs	r2, #0
 801454c:	2100      	movs	r1, #0
 801454e:	0028      	movs	r0, r5
 8014550:	f001 ff0a 	bl	8016368 <VL53L0X_WrByte>
 8014554:	4320      	orrs	r0, r4
 8014556:	b240      	sxtb	r0, r0
 8014558:	e796      	b.n	8014488 <VL53L0X_SetGpioConfig+0x3a>
	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_OSC) {
 801455a:	200b      	movs	r0, #11
 801455c:	4240      	negs	r0, r0
		if (Status == VL53L0X_ERROR_NONE) {
 801455e:	2800      	cmp	r0, #0
 8014560:	d000      	beq.n	8014564 <VL53L0X_SetGpioConfig+0x116>
 8014562:	e791      	b.n	8014488 <VL53L0X_SetGpioConfig+0x3a>
			if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 8014564:	2e00      	cmp	r6, #0
 8014566:	d000      	beq.n	801456a <VL53L0X_SetGpioConfig+0x11c>
				data = (uint8_t)(1 << 4);
 8014568:	2610      	movs	r6, #16
			Status = VL53L0X_UpdateByte(Dev,
 801456a:	0033      	movs	r3, r6
 801456c:	22ef      	movs	r2, #239	; 0xef
 801456e:	2184      	movs	r1, #132	; 0x84
 8014570:	0028      	movs	r0, r5
 8014572:	f001 ff20 	bl	80163b6 <VL53L0X_UpdateByte>
		if (Status == VL53L0X_ERROR_NONE)
 8014576:	2800      	cmp	r0, #0
 8014578:	d000      	beq.n	801457c <VL53L0X_SetGpioConfig+0x12e>
 801457a:	e785      	b.n	8014488 <VL53L0X_SetGpioConfig+0x3a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 801457c:	23da      	movs	r3, #218	; 0xda
 801457e:	54ec      	strb	r4, [r5, r3]
			Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8014580:	2100      	movs	r1, #0
 8014582:	0028      	movs	r0, r5
 8014584:	f7ff ff1b 	bl	80143be <VL53L0X_ClearInterruptMask>
 8014588:	e77e      	b.n	8014488 <VL53L0X_SetGpioConfig+0x3a>
		Status = VL53L0X_ERROR_GPIO_NOT_EXISTING;
 801458a:	200a      	movs	r0, #10
 801458c:	4240      	negs	r0, r0
 801458e:	e77b      	b.n	8014488 <VL53L0X_SetGpioConfig+0x3a>

08014590 <VL53L0X_StaticInit>:
{
 8014590:	b530      	push	{r4, r5, lr}
 8014592:	b097      	sub	sp, #92	; 0x5c
 8014594:	0005      	movs	r5, r0
	VL53L0X_DeviceParameters_t CurrentParameters = {0};
 8014596:	2240      	movs	r2, #64	; 0x40
 8014598:	2100      	movs	r1, #0
 801459a:	a806      	add	r0, sp, #24
 801459c:	f001 ffd3 	bl	8016546 <memset>
	uint16_t tempword = 0;
 80145a0:	2300      	movs	r3, #0
 80145a2:	2216      	movs	r2, #22
 80145a4:	446a      	add	r2, sp
 80145a6:	8013      	strh	r3, [r2, #0]
	uint8_t tempbyte = 0;
 80145a8:	2100      	movs	r1, #0
 80145aa:	2215      	movs	r2, #21
 80145ac:	446a      	add	r2, sp
 80145ae:	7011      	strb	r1, [r2, #0]
	uint8_t isApertureSpads = 0;
 80145b0:	aa05      	add	r2, sp, #20
 80145b2:	7011      	strb	r1, [r2, #0]
	uint32_t refSpadCount = 0;
 80145b4:	9304      	str	r3, [sp, #16]
	Status = VL53L0X_get_info_from_device(Dev, 1);
 80145b6:	2101      	movs	r1, #1
 80145b8:	0028      	movs	r0, r5
 80145ba:	f000 fd69 	bl	8015090 <VL53L0X_get_info_from_device>
	ApertureSpads = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 80145be:	238a      	movs	r3, #138	; 0x8a
 80145c0:	005b      	lsls	r3, r3, #1
 80145c2:	5cea      	ldrb	r2, [r5, r3]
	if ((ApertureSpads > 1) ||
 80145c4:	2a01      	cmp	r2, #1
 80145c6:	d808      	bhi.n	80145da <VL53L0X_StaticInit+0x4a>
	count	= (uint32_t)VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 80145c8:	2314      	movs	r3, #20
 80145ca:	33ff      	adds	r3, #255	; 0xff
 80145cc:	5ce9      	ldrb	r1, [r5, r3]
	if ((ApertureSpads > 1) ||
 80145ce:	2a01      	cmp	r2, #1
 80145d0:	d100      	bne.n	80145d4 <VL53L0X_StaticInit+0x44>
 80145d2:	e0a7      	b.n	8014724 <VL53L0X_StaticInit+0x194>
		((ApertureSpads == 0) && (count > 12)))
 80145d4:	290c      	cmp	r1, #12
 80145d6:	d800      	bhi.n	80145da <VL53L0X_StaticInit+0x4a>
 80145d8:	e0a7      	b.n	801472a <VL53L0X_StaticInit+0x19a>
		Status = VL53L0X_perform_ref_spad_management(Dev, &refSpadCount,
 80145da:	aa05      	add	r2, sp, #20
 80145dc:	a904      	add	r1, sp, #16
 80145de:	0028      	movs	r0, r5
 80145e0:	f000 fb71 	bl	8014cc6 <VL53L0X_perform_ref_spad_management>
	if (Status == VL53L0X_ERROR_NONE) {
 80145e4:	2800      	cmp	r0, #0
 80145e6:	d000      	beq.n	80145ea <VL53L0X_StaticInit+0x5a>
 80145e8:	e09a      	b.n	8014720 <VL53L0X_StaticInit+0x190>
		UseInternalTuningSettings = PALDevDataGet(Dev,
 80145ea:	23a8      	movs	r3, #168	; 0xa8
 80145ec:	005b      	lsls	r3, r3, #1
		if (UseInternalTuningSettings == 0)
 80145ee:	5ceb      	ldrb	r3, [r5, r3]
 80145f0:	2b00      	cmp	r3, #0
 80145f2:	d000      	beq.n	80145f6 <VL53L0X_StaticInit+0x66>
 80145f4:	e09d      	b.n	8014732 <VL53L0X_StaticInit+0x1a2>
			pTuningSettingBuffer = PALDevDataGet(Dev,
 80145f6:	334d      	adds	r3, #77	; 0x4d
 80145f8:	33ff      	adds	r3, #255	; 0xff
 80145fa:	58e9      	ldr	r1, [r5, r3]
		Status = VL53L0X_load_tuning_settings(Dev, pTuningSettingBuffer);
 80145fc:	0028      	movs	r0, r5
 80145fe:	f001 fabd 	bl	8015b7c <VL53L0X_load_tuning_settings>
	if (Status == VL53L0X_ERROR_NONE) {
 8014602:	2800      	cmp	r0, #0
 8014604:	d000      	beq.n	8014608 <VL53L0X_StaticInit+0x78>
 8014606:	e08b      	b.n	8014720 <VL53L0X_StaticInit+0x190>
		Status = VL53L0X_SetGpioConfig(Dev, 0, 0,
 8014608:	2300      	movs	r3, #0
 801460a:	9300      	str	r3, [sp, #0]
 801460c:	3304      	adds	r3, #4
 801460e:	2200      	movs	r2, #0
 8014610:	2100      	movs	r1, #0
 8014612:	0028      	movs	r0, r5
 8014614:	f7ff ff1b 	bl	801444e <VL53L0X_SetGpioConfig>
	if (Status == VL53L0X_ERROR_NONE) {
 8014618:	2800      	cmp	r0, #0
 801461a:	d000      	beq.n	801461e <VL53L0X_StaticInit+0x8e>
 801461c:	e080      	b.n	8014720 <VL53L0X_StaticInit+0x190>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 801461e:	2201      	movs	r2, #1
 8014620:	21ff      	movs	r1, #255	; 0xff
 8014622:	0028      	movs	r0, r5
 8014624:	f001 fea0 	bl	8016368 <VL53L0X_WrByte>
 8014628:	0004      	movs	r4, r0
		Status |= VL53L0X_RdWord(Dev, 0x84, &tempword);
 801462a:	2216      	movs	r2, #22
 801462c:	446a      	add	r2, sp
 801462e:	2184      	movs	r1, #132	; 0x84
 8014630:	0028      	movs	r0, r5
 8014632:	f001 fef0 	bl	8016416 <VL53L0X_RdWord>
 8014636:	4304      	orrs	r4, r0
 8014638:	b264      	sxtb	r4, r4
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 801463a:	2200      	movs	r2, #0
 801463c:	21ff      	movs	r1, #255	; 0xff
 801463e:	0028      	movs	r0, r5
 8014640:	f001 fe92 	bl	8016368 <VL53L0X_WrByte>
 8014644:	4320      	orrs	r0, r4
 8014646:	b240      	sxtb	r0, r0
	if (Status == VL53L0X_ERROR_NONE) {
 8014648:	2800      	cmp	r0, #0
 801464a:	d169      	bne.n	8014720 <VL53L0X_StaticInit+0x190>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz,
 801464c:	2316      	movs	r3, #22
 801464e:	446b      	add	r3, sp
 8014650:	881b      	ldrh	r3, [r3, #0]
 8014652:	011b      	lsls	r3, r3, #4
 8014654:	22d4      	movs	r2, #212	; 0xd4
 8014656:	50ab      	str	r3, [r5, r2]
		Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8014658:	a906      	add	r1, sp, #24
 801465a:	0028      	movs	r0, r5
 801465c:	f7ff fb4a 	bl	8013cf4 <VL53L0X_GetDeviceParameters>
	if (Status == VL53L0X_ERROR_NONE) {
 8014660:	2800      	cmp	r0, #0
 8014662:	d15d      	bne.n	8014720 <VL53L0X_StaticInit+0x190>
		Status = VL53L0X_GetFractionEnable(Dev, &tempbyte);
 8014664:	2115      	movs	r1, #21
 8014666:	4469      	add	r1, sp
 8014668:	0028      	movs	r0, r5
 801466a:	f7ff f925 	bl	80138b8 <VL53L0X_GetFractionEnable>
		if (Status == VL53L0X_ERROR_NONE)
 801466e:	2800      	cmp	r0, #0
 8014670:	d156      	bne.n	8014720 <VL53L0X_StaticInit+0x190>
			PALDevDataSet(Dev, RangeFractionalEnable, tempbyte);
 8014672:	2415      	movs	r4, #21
 8014674:	446c      	add	r4, sp
 8014676:	7822      	ldrb	r2, [r4, #0]
 8014678:	2332      	movs	r3, #50	; 0x32
 801467a:	33ff      	adds	r3, #255	; 0xff
 801467c:	54ea      	strb	r2, [r5, r3]
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 801467e:	0028      	movs	r0, r5
 8014680:	3010      	adds	r0, #16
 8014682:	2240      	movs	r2, #64	; 0x40
 8014684:	a906      	add	r1, sp, #24
 8014686:	f001 ff55 	bl	8016534 <memcpy>
		Status = VL53L0X_RdByte(Dev,
 801468a:	0022      	movs	r2, r4
 801468c:	2101      	movs	r1, #1
 801468e:	0028      	movs	r0, r5
 8014690:	f001 feb4 	bl	80163fc <VL53L0X_RdByte>
		if (Status == VL53L0X_ERROR_NONE)
 8014694:	2800      	cmp	r0, #0
 8014696:	d143      	bne.n	8014720 <VL53L0X_StaticInit+0x190>
			PALDevDataSet(Dev, SequenceConfig, tempbyte);
 8014698:	2315      	movs	r3, #21
 801469a:	446b      	add	r3, sp
 801469c:	781a      	ldrb	r2, [r3, #0]
 801469e:	2398      	movs	r3, #152	; 0x98
 80146a0:	005b      	lsls	r3, r3, #1
 80146a2:	54ea      	strb	r2, [r5, r3]
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 80146a4:	2200      	movs	r2, #0
 80146a6:	2100      	movs	r1, #0
 80146a8:	0028      	movs	r0, r5
 80146aa:	f7ff f91b 	bl	80138e4 <VL53L0X_SetSequenceStepEnable>
	if (Status == VL53L0X_ERROR_NONE)
 80146ae:	2800      	cmp	r0, #0
 80146b0:	d136      	bne.n	8014720 <VL53L0X_StaticInit+0x190>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 80146b2:	2200      	movs	r2, #0
 80146b4:	2102      	movs	r1, #2
 80146b6:	0028      	movs	r0, r5
 80146b8:	f7ff f914 	bl	80138e4 <VL53L0X_SetSequenceStepEnable>
	if (Status == VL53L0X_ERROR_NONE)
 80146bc:	2800      	cmp	r0, #0
 80146be:	d12f      	bne.n	8014720 <VL53L0X_StaticInit+0x190>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 80146c0:	2399      	movs	r3, #153	; 0x99
 80146c2:	005b      	lsls	r3, r3, #1
 80146c4:	2203      	movs	r2, #3
 80146c6:	54ea      	strb	r2, [r5, r3]
	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 80146c8:	320c      	adds	r2, #12
 80146ca:	446a      	add	r2, sp
 80146cc:	2100      	movs	r1, #0
 80146ce:	0028      	movs	r0, r5
 80146d0:	f001 f930 	bl	8015934 <VL53L0X_get_vcsel_pulse_period>
	if (Status == VL53L0X_ERROR_NONE) {
 80146d4:	2800      	cmp	r0, #0
 80146d6:	d123      	bne.n	8014720 <VL53L0X_StaticInit+0x190>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 80146d8:	220f      	movs	r2, #15
 80146da:	446a      	add	r2, sp
 80146dc:	7811      	ldrb	r1, [r2, #0]
 80146de:	23e8      	movs	r3, #232	; 0xe8
 80146e0:	54e9      	strb	r1, [r5, r3]
	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 80146e2:	2101      	movs	r1, #1
 80146e4:	0028      	movs	r0, r5
 80146e6:	f001 f925 	bl	8015934 <VL53L0X_get_vcsel_pulse_period>
	if (Status == VL53L0X_ERROR_NONE) {
 80146ea:	2800      	cmp	r0, #0
 80146ec:	d118      	bne.n	8014720 <VL53L0X_StaticInit+0x190>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 80146ee:	230f      	movs	r3, #15
 80146f0:	446b      	add	r3, sp
 80146f2:	781a      	ldrb	r2, [r3, #0]
 80146f4:	23e0      	movs	r3, #224	; 0xe0
 80146f6:	54ea      	strb	r2, [r5, r3]
		Status = get_sequence_step_timeout(
 80146f8:	aa02      	add	r2, sp, #8
 80146fa:	2103      	movs	r1, #3
 80146fc:	0028      	movs	r0, r5
 80146fe:	f000 fff2 	bl	80156e6 <get_sequence_step_timeout>
	if (Status == VL53L0X_ERROR_NONE) {
 8014702:	2800      	cmp	r0, #0
 8014704:	d10c      	bne.n	8014720 <VL53L0X_StaticInit+0x190>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 8014706:	23e4      	movs	r3, #228	; 0xe4
 8014708:	9a02      	ldr	r2, [sp, #8]
 801470a:	50ea      	str	r2, [r5, r3]
		Status = get_sequence_step_timeout(
 801470c:	aa02      	add	r2, sp, #8
 801470e:	2104      	movs	r1, #4
 8014710:	0028      	movs	r0, r5
 8014712:	f000 ffe8 	bl	80156e6 <get_sequence_step_timeout>
	if (Status == VL53L0X_ERROR_NONE) {
 8014716:	2800      	cmp	r0, #0
 8014718:	d102      	bne.n	8014720 <VL53L0X_StaticInit+0x190>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 801471a:	23dc      	movs	r3, #220	; 0xdc
 801471c:	9a02      	ldr	r2, [sp, #8]
 801471e:	50ea      	str	r2, [r5, r3]
}
 8014720:	b017      	add	sp, #92	; 0x5c
 8014722:	bd30      	pop	{r4, r5, pc}
		((ApertureSpads == 1) && (count > 32)) ||
 8014724:	2920      	cmp	r1, #32
 8014726:	d900      	bls.n	801472a <VL53L0X_StaticInit+0x19a>
 8014728:	e757      	b.n	80145da <VL53L0X_StaticInit+0x4a>
		Status = VL53L0X_set_reference_spads(Dev, count, ApertureSpads);
 801472a:	0028      	movs	r0, r5
 801472c:	f000 f939 	bl	80149a2 <VL53L0X_set_reference_spads>
 8014730:	e758      	b.n	80145e4 <VL53L0X_StaticInit+0x54>
			pTuningSettingBuffer = DefaultTuningSettings;
 8014732:	4901      	ldr	r1, [pc, #4]	; (8014738 <VL53L0X_StaticInit+0x1a8>)
 8014734:	e762      	b.n	80145fc <VL53L0X_StaticInit+0x6c>
 8014736:	46c0      	nop			; (mov r8, r8)
 8014738:	200000ac 	.word	0x200000ac

0801473c <VL53L0X_GetInterruptMaskStatus>:

VL53L0X_Error VL53L0X_GetInterruptMaskStatus(VL53L0X_DEV Dev,
	uint32_t *pInterruptMaskStatus)
{
 801473c:	b530      	push	{r4, r5, lr}
 801473e:	b083      	sub	sp, #12
 8014740:	000c      	movs	r4, r1
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint8_t Byte;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
 8014742:	466b      	mov	r3, sp
 8014744:	1ddd      	adds	r5, r3, #7
 8014746:	002a      	movs	r2, r5
 8014748:	2113      	movs	r1, #19
 801474a:	f001 fe57 	bl	80163fc <VL53L0X_RdByte>
	*pInterruptMaskStatus = Byte & 0x07;
 801474e:	782a      	ldrb	r2, [r5, #0]
 8014750:	2307      	movs	r3, #7
 8014752:	4013      	ands	r3, r2
 8014754:	6023      	str	r3, [r4, #0]

	if (Byte & 0x18)
 8014756:	2318      	movs	r3, #24
 8014758:	4213      	tst	r3, r2
 801475a:	d101      	bne.n	8014760 <VL53L0X_GetInterruptMaskStatus+0x24>
		Status = VL53L0X_ERROR_RANGE_ERROR;

	LOG_FUNCTION_END(Status);
	return Status;
}
 801475c:	b003      	add	sp, #12
 801475e:	bd30      	pop	{r4, r5, pc}
		Status = VL53L0X_ERROR_RANGE_ERROR;
 8014760:	2006      	movs	r0, #6
 8014762:	4240      	negs	r0, r0
 8014764:	e7fa      	b.n	801475c <VL53L0X_GetInterruptMaskStatus+0x20>

08014766 <VL53L0X_GetMeasurementDataReady>:
{
 8014766:	b510      	push	{r4, lr}
 8014768:	b082      	sub	sp, #8
 801476a:	000c      	movs	r4, r1
	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 801476c:	23da      	movs	r3, #218	; 0xda
	if (InterruptConfig ==
 801476e:	5cc3      	ldrb	r3, [r0, r3]
 8014770:	2b04      	cmp	r3, #4
 8014772:	d00e      	beq.n	8014792 <VL53L0X_GetMeasurementDataReady+0x2c>
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_RANGE_STATUS,
 8014774:	466b      	mov	r3, sp
 8014776:	1dda      	adds	r2, r3, #7
 8014778:	2114      	movs	r1, #20
 801477a:	f001 fe3f 	bl	80163fc <VL53L0X_RdByte>
		if (Status == VL53L0X_ERROR_NONE) {
 801477e:	2800      	cmp	r0, #0
 8014780:	d10f      	bne.n	80147a2 <VL53L0X_GetMeasurementDataReady+0x3c>
			if (SysRangeStatusRegister & 0x01)
 8014782:	466b      	mov	r3, sp
 8014784:	3307      	adds	r3, #7
 8014786:	781b      	ldrb	r3, [r3, #0]
 8014788:	07db      	lsls	r3, r3, #31
 801478a:	d50f      	bpl.n	80147ac <VL53L0X_GetMeasurementDataReady+0x46>
				*pMeasurementDataReady = 1;
 801478c:	2301      	movs	r3, #1
 801478e:	7023      	strb	r3, [r4, #0]
 8014790:	e007      	b.n	80147a2 <VL53L0X_GetMeasurementDataReady+0x3c>
		Status = VL53L0X_GetInterruptMaskStatus(Dev, &InterruptMask);
 8014792:	4669      	mov	r1, sp
 8014794:	f7ff ffd2 	bl	801473c <VL53L0X_GetInterruptMaskStatus>
		if (InterruptMask ==
 8014798:	9b00      	ldr	r3, [sp, #0]
 801479a:	2b04      	cmp	r3, #4
 801479c:	d003      	beq.n	80147a6 <VL53L0X_GetMeasurementDataReady+0x40>
			*pMeasurementDataReady = 0;
 801479e:	2300      	movs	r3, #0
 80147a0:	7023      	strb	r3, [r4, #0]
}
 80147a2:	b002      	add	sp, #8
 80147a4:	bd10      	pop	{r4, pc}
			*pMeasurementDataReady = 1;
 80147a6:	3b03      	subs	r3, #3
 80147a8:	7023      	strb	r3, [r4, #0]
 80147aa:	e7fa      	b.n	80147a2 <VL53L0X_GetMeasurementDataReady+0x3c>
				*pMeasurementDataReady = 0;
 80147ac:	2300      	movs	r3, #0
 80147ae:	7023      	strb	r3, [r4, #0]
 80147b0:	e7f7      	b.n	80147a2 <VL53L0X_GetMeasurementDataReady+0x3c>

080147b2 <VL53L0X_PerformRefSpadManagement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefSpadManagement(VL53L0X_DEV Dev,
	uint32_t *refSpadCount, uint8_t *isApertureSpads)
{
 80147b2:	b510      	push	{r4, lr}
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_spad_management(Dev, refSpadCount,
 80147b4:	f000 fa87 	bl	8014cc6 <VL53L0X_perform_ref_spad_management>
		isApertureSpads);

	LOG_FUNCTION_END(Status);

	return Status;
}
 80147b8:	bd10      	pop	{r4, pc}
	...

080147bc <VL53L0X_get_offset_calibration_data_micro_meter>:
	return Status;
}

VL53L0X_Error VL53L0X_get_offset_calibration_data_micro_meter(VL53L0X_DEV Dev,
		int32_t *pOffsetCalibrationDataMicroMeter)
{
 80147bc:	b510      	push	{r4, lr}
 80147be:	b082      	sub	sp, #8
 80147c0:	000c      	movs	r4, r1
	int16_t cMaxOffset = 2047;
	int16_t cOffsetRange = 4096;

	/* Note that offset has 10.2 format */

	Status = VL53L0X_RdWord(Dev,
 80147c2:	466b      	mov	r3, sp
 80147c4:	1d9a      	adds	r2, r3, #6
 80147c6:	2128      	movs	r1, #40	; 0x28
 80147c8:	f001 fe25 	bl	8016416 <VL53L0X_RdWord>
				VL53L0X_REG_ALGO_PART_TO_PART_RANGE_OFFSET_MM,
				&RangeOffsetRegister);

	if (Status == VL53L0X_ERROR_NONE) {
 80147cc:	2800      	cmp	r0, #0
 80147ce:	d10b      	bne.n	80147e8 <VL53L0X_get_offset_calibration_data_micro_meter+0x2c>
		RangeOffsetRegister = (RangeOffsetRegister & 0x0fff);
 80147d0:	466b      	mov	r3, sp
 80147d2:	88da      	ldrh	r2, [r3, #6]
 80147d4:	0513      	lsls	r3, r2, #20
 80147d6:	0d1b      	lsrs	r3, r3, #20

		/* Apply 12 bit 2's compliment conversion */
		if (RangeOffsetRegister > cMaxOffset)
 80147d8:	0512      	lsls	r2, r2, #20
 80147da:	d507      	bpl.n	80147ec <VL53L0X_get_offset_calibration_data_micro_meter+0x30>
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)(RangeOffsetRegister - cOffsetRange)
 80147dc:	4a05      	ldr	r2, [pc, #20]	; (80147f4 <VL53L0X_get_offset_calibration_data_micro_meter+0x38>)
 80147de:	4694      	mov	ip, r2
 80147e0:	4463      	add	r3, ip
					* 250;
 80147e2:	22fa      	movs	r2, #250	; 0xfa
 80147e4:	4353      	muls	r3, r2
			*pOffsetCalibrationDataMicroMeter =
 80147e6:	6023      	str	r3, [r4, #0]
				(int16_t)RangeOffsetRegister * 250;

	}

	return Status;
}
 80147e8:	b002      	add	sp, #8
 80147ea:	bd10      	pop	{r4, pc}
				(int16_t)RangeOffsetRegister * 250;
 80147ec:	22fa      	movs	r2, #250	; 0xfa
 80147ee:	4353      	muls	r3, r2
			*pOffsetCalibrationDataMicroMeter =
 80147f0:	6023      	str	r3, [r4, #0]
 80147f2:	e7f9      	b.n	80147e8 <VL53L0X_get_offset_calibration_data_micro_meter+0x2c>
 80147f4:	fffff000 	.word	0xfffff000

080147f8 <get_next_good_spad>:
	return Status;
}

void get_next_good_spad(uint8_t goodSpadArray[], uint32_t size,
			uint32_t curr, int32_t *next)
{
 80147f8:	b5f0      	push	{r4, r5, r6, r7, lr}
	 *
	 * The coarse index is the byte index of the array and the fine index is
	 * the index of the bit within each byte.
	 */

	*next = -1;
 80147fa:	2401      	movs	r4, #1
 80147fc:	4264      	negs	r4, r4
 80147fe:	601c      	str	r4, [r3, #0]

	startIndex = curr / cSpadsPerByte;
 8014800:	08d7      	lsrs	r7, r2, #3
	fineOffset = curr % cSpadsPerByte;
 8014802:	3408      	adds	r4, #8
 8014804:	4014      	ands	r4, r2
 8014806:	46a4      	mov	ip, r4

	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 8014808:	428f      	cmp	r7, r1
 801480a:	d218      	bcs.n	801483e <get_next_good_spad+0x46>
 801480c:	003e      	movs	r6, r7
			dataByte >>= fineOffset;
			fineIndex = fineOffset;
		}

		while (fineIndex < cSpadsPerByte) {
			if ((dataByte & 0x1) == 1) {
 801480e:	2501      	movs	r5, #1
 8014810:	e006      	b.n	8014820 <get_next_good_spad+0x28>
			dataByte >>= fineOffset;
 8014812:	4664      	mov	r4, ip
 8014814:	4122      	asrs	r2, r4
 8014816:	b2d2      	uxtb	r2, r2
			fineIndex = fineOffset;
 8014818:	e006      	b.n	8014828 <get_next_good_spad+0x30>
				coarseIndex++) {
 801481a:	3601      	adds	r6, #1
	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 801481c:	42b1      	cmp	r1, r6
 801481e:	d00e      	beq.n	801483e <get_next_good_spad+0x46>
		dataByte = goodSpadArray[coarseIndex];
 8014820:	5d82      	ldrb	r2, [r0, r6]
		fineIndex = 0;
 8014822:	2400      	movs	r4, #0
		if (coarseIndex == startIndex) {
 8014824:	42b7      	cmp	r7, r6
 8014826:	d0f4      	beq.n	8014812 <get_next_good_spad+0x1a>
			if ((dataByte & 0x1) == 1) {
 8014828:	4215      	tst	r5, r2
 801482a:	d105      	bne.n	8014838 <get_next_good_spad+0x40>
				success = 1;
				*next = coarseIndex * cSpadsPerByte + fineIndex;
				break;
			}
			dataByte >>= 1;
 801482c:	0852      	lsrs	r2, r2, #1
			fineIndex++;
 801482e:	3401      	adds	r4, #1
		while (fineIndex < cSpadsPerByte) {
 8014830:	2c08      	cmp	r4, #8
 8014832:	d0f2      	beq.n	801481a <get_next_good_spad+0x22>
			if ((dataByte & 0x1) == 1) {
 8014834:	4215      	tst	r5, r2
 8014836:	d0f9      	beq.n	801482c <get_next_good_spad+0x34>
				*next = coarseIndex * cSpadsPerByte + fineIndex;
 8014838:	00f6      	lsls	r6, r6, #3
 801483a:	1934      	adds	r4, r6, r4
 801483c:	601c      	str	r4, [r3, #0]
		}
	}
}
 801483e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08014840 <is_aperture>:
	 * This function reports if a given spad index is an aperture SPAD by
	 * deriving the quadrant.
	 */
	uint32_t quadrant;
	uint8_t isAperture = 1;
	quadrant = spadIndex >> 6;
 8014840:	0980      	lsrs	r0, r0, #6
	if (refArrayQuadrants[quadrant] == REF_ARRAY_SPAD_0)
 8014842:	0080      	lsls	r0, r0, #2
 8014844:	4b02      	ldr	r3, [pc, #8]	; (8014850 <is_aperture+0x10>)
 8014846:	58c0      	ldr	r0, [r0, r3]
 8014848:	1e43      	subs	r3, r0, #1
 801484a:	4198      	sbcs	r0, r3
		isAperture = 0;

	return isAperture;
 801484c:	b2c0      	uxtb	r0, r0
}
 801484e:	4770      	bx	lr
 8014850:	20000358 	.word	0x20000358

08014854 <enable_spad_bit>:


VL53L0X_Error enable_spad_bit(uint8_t spadArray[], uint32_t size,
	uint32_t spadIndex)
{
 8014854:	b510      	push	{r4, lr}
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
	uint32_t cSpadsPerByte = 8;
	uint32_t coarseIndex;
	uint32_t fineIndex;

	coarseIndex = spadIndex / cSpadsPerByte;
 8014856:	08d4      	lsrs	r4, r2, #3
	fineIndex = spadIndex % cSpadsPerByte;
 8014858:	2307      	movs	r3, #7
 801485a:	401a      	ands	r2, r3
	if (coarseIndex >= size)
 801485c:	428c      	cmp	r4, r1
 801485e:	d207      	bcs.n	8014870 <enable_spad_bit+0x1c>
		status = VL53L0X_ERROR_REF_SPAD_INIT;
	else
		spadArray[coarseIndex] |= (1 << fineIndex);
 8014860:	3b06      	subs	r3, #6
 8014862:	4093      	lsls	r3, r2
 8014864:	001a      	movs	r2, r3
 8014866:	5d03      	ldrb	r3, [r0, r4]
 8014868:	4313      	orrs	r3, r2
 801486a:	5503      	strb	r3, [r0, r4]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 801486c:	2000      	movs	r0, #0

	return status;
}
 801486e:	bd10      	pop	{r4, pc}
		status = VL53L0X_ERROR_REF_SPAD_INIT;
 8014870:	2032      	movs	r0, #50	; 0x32
 8014872:	4240      	negs	r0, r0
 8014874:	e7fb      	b.n	801486e <enable_spad_bit+0x1a>

08014876 <set_ref_spad_map>:

	return status;
}

VL53L0X_Error set_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 8014876:	b510      	push	{r4, lr}
 8014878:	000a      	movs	r2, r1
	VL53L0X_Error status = VL53L0X_WriteMulti(Dev,
 801487a:	2306      	movs	r3, #6
 801487c:	21b0      	movs	r1, #176	; 0xb0
 801487e:	f001 fd51 	bl	8016324 <VL53L0X_WriteMulti>
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray, 6);
	return status;
}
 8014882:	bd10      	pop	{r4, pc}

08014884 <get_ref_spad_map>:

VL53L0X_Error get_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 8014884:	b510      	push	{r4, lr}
 8014886:	000a      	movs	r2, r1
	VL53L0X_Error status = VL53L0X_ReadMulti(Dev,
 8014888:	2306      	movs	r3, #6
 801488a:	21b0      	movs	r1, #176	; 0xb0
 801488c:	f001 fd5b 	bl	8016346 <VL53L0X_ReadMulti>
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray,
				6);
	return status;
}
 8014890:	bd10      	pop	{r4, pc}

08014892 <enable_ref_spads>:
				uint32_t size,
				uint32_t start,
				uint32_t offset,
				uint32_t spadCount,
				uint32_t *lastSpad)
{
 8014892:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014894:	46de      	mov	lr, fp
 8014896:	4657      	mov	r7, sl
 8014898:	464e      	mov	r6, r9
 801489a:	4645      	mov	r5, r8
 801489c:	b5e0      	push	{r5, r6, r7, lr}
 801489e:	b087      	sub	sp, #28
 80148a0:	9001      	str	r0, [sp, #4]
 80148a2:	468a      	mov	sl, r1
 80148a4:	4691      	mov	r9, r2
 80148a6:	4698      	mov	r8, r3
 80148a8:	9f10      	ldr	r7, [sp, #64]	; 0x40
 80148aa:	9e12      	ldr	r6, [sp, #72]	; 0x48
 80148ac:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80148ae:	469b      	mov	fp, r3
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
	uint32_t index;
	uint32_t i;
	int32_t nextGoodSpad = offset;
 80148b0:	9605      	str	r6, [sp, #20]
	 * This function applies to only aperture or only non-aperture spads.
	 * Checks are performed to ensure this.
	 */

	currentSpad = offset;
	for (index = 0; index < spadCount; index++) {
 80148b2:	2b00      	cmp	r3, #0
 80148b4:	d018      	beq.n	80148e8 <enable_ref_spads+0x56>
 80148b6:	2500      	movs	r5, #0
		get_next_good_spad(goodSpadArray, size, currentSpad,
 80148b8:	ab05      	add	r3, sp, #20
 80148ba:	0032      	movs	r2, r6
 80148bc:	0039      	movs	r1, r7
 80148be:	4648      	mov	r0, r9
 80148c0:	f7ff ff9a 	bl	80147f8 <get_next_good_spad>
			&nextGoodSpad);

		if (nextGoodSpad == -1) {
 80148c4:	9c05      	ldr	r4, [sp, #20]
 80148c6:	1c63      	adds	r3, r4, #1
 80148c8:	d02b      	beq.n	8014922 <enable_ref_spads+0x90>
			status = VL53L0X_ERROR_REF_SPAD_INIT;
			break;
		}

		/* Confirm that the next good SPAD is non-aperture */
		if (is_aperture(start + nextGoodSpad) != apertureSpads) {
 80148ca:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80148cc:	18e0      	adds	r0, r4, r3
 80148ce:	f7ff ffb7 	bl	8014840 <is_aperture>
 80148d2:	4550      	cmp	r0, sl
 80148d4:	d125      	bne.n	8014922 <enable_ref_spads+0x90>
			 */
			status = VL53L0X_ERROR_REF_SPAD_INIT;
			break;
		}
		currentSpad = (uint32_t)nextGoodSpad;
		enable_spad_bit(spadArray, size, currentSpad);
 80148d6:	0022      	movs	r2, r4
 80148d8:	0039      	movs	r1, r7
 80148da:	4640      	mov	r0, r8
 80148dc:	f7ff ffba 	bl	8014854 <enable_spad_bit>
		currentSpad++;
 80148e0:	1c66      	adds	r6, r4, #1
	for (index = 0; index < spadCount; index++) {
 80148e2:	3501      	adds	r5, #1
 80148e4:	45ab      	cmp	fp, r5
 80148e6:	d1e7      	bne.n	80148b8 <enable_ref_spads+0x26>
	}
	*lastSpad = currentSpad;
 80148e8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80148ea:	601e      	str	r6, [r3, #0]

	if (status == VL53L0X_ERROR_NONE)
		status = set_ref_spad_map(Dev, spadArray);
 80148ec:	4641      	mov	r1, r8
 80148ee:	9801      	ldr	r0, [sp, #4]
 80148f0:	f7ff ffc1 	bl	8014876 <set_ref_spad_map>


	if (status == VL53L0X_ERROR_NONE) {
 80148f4:	2800      	cmp	r0, #0
 80148f6:	d118      	bne.n	801492a <enable_ref_spads+0x98>
		status = get_ref_spad_map(Dev, checkSpadArray);
 80148f8:	a903      	add	r1, sp, #12
 80148fa:	9801      	ldr	r0, [sp, #4]
 80148fc:	f7ff ffc2 	bl	8014884 <get_ref_spad_map>

		i = 0;

		/* Compare spad maps. If not equal report error. */
		while (i < size) {
 8014900:	2f00      	cmp	r7, #0
 8014902:	d012      	beq.n	801492a <enable_ref_spads+0x98>
 8014904:	4642      	mov	r2, r8
 8014906:	a903      	add	r1, sp, #12
 8014908:	4447      	add	r7, r8
			if (spadArray[i] != checkSpadArray[i]) {
 801490a:	7814      	ldrb	r4, [r2, #0]
 801490c:	780b      	ldrb	r3, [r1, #0]
 801490e:	429c      	cmp	r4, r3
 8014910:	d104      	bne.n	801491c <enable_ref_spads+0x8a>
		while (i < size) {
 8014912:	3201      	adds	r2, #1
 8014914:	3101      	adds	r1, #1
 8014916:	42ba      	cmp	r2, r7
 8014918:	d1f7      	bne.n	801490a <enable_ref_spads+0x78>
 801491a:	e006      	b.n	801492a <enable_ref_spads+0x98>
				status = VL53L0X_ERROR_REF_SPAD_INIT;
 801491c:	2032      	movs	r0, #50	; 0x32
 801491e:	4240      	negs	r0, r0
 8014920:	e003      	b.n	801492a <enable_ref_spads+0x98>
	*lastSpad = currentSpad;
 8014922:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014924:	601e      	str	r6, [r3, #0]
 8014926:	2032      	movs	r0, #50	; 0x32
 8014928:	4240      	negs	r0, r0
			}
			i++;
		}
	}
	return status;
}
 801492a:	b007      	add	sp, #28
 801492c:	bcf0      	pop	{r4, r5, r6, r7}
 801492e:	46bb      	mov	fp, r7
 8014930:	46b2      	mov	sl, r6
 8014932:	46a9      	mov	r9, r5
 8014934:	46a0      	mov	r8, r4
 8014936:	bdf0      	pop	{r4, r5, r6, r7, pc}

08014938 <perform_ref_signal_measurement>:


VL53L0X_Error perform_ref_signal_measurement(VL53L0X_DEV Dev,
		uint16_t *refSignalRate)
{
 8014938:	b570      	push	{r4, r5, r6, lr}
 801493a:	b088      	sub	sp, #32
 801493c:	0004      	movs	r4, r0
 801493e:	000d      	movs	r5, r1

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8014940:	2398      	movs	r3, #152	; 0x98
 8014942:	005b      	lsls	r3, r3, #1
 8014944:	5cc6      	ldrb	r6, [r0, r3]

	/*
	 * This function performs a reference signal rate measurement.
	 */
	if (status == VL53L0X_ERROR_NONE)
		status = VL53L0X_WrByte(Dev,
 8014946:	22c0      	movs	r2, #192	; 0xc0
 8014948:	2101      	movs	r1, #1
 801494a:	f001 fd0d 	bl	8016368 <VL53L0X_WrByte>
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0xC0);

	if (status == VL53L0X_ERROR_NONE)
 801494e:	2800      	cmp	r0, #0
 8014950:	d001      	beq.n	8014956 <perform_ref_signal_measurement+0x1e>
		if (status == VL53L0X_ERROR_NONE)
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
	}

	return status;
}
 8014952:	b008      	add	sp, #32
 8014954:	bd70      	pop	{r4, r5, r6, pc}
		status = VL53L0X_PerformSingleRangingMeasurement(Dev,
 8014956:	a901      	add	r1, sp, #4
 8014958:	0020      	movs	r0, r4
 801495a:	f7ff fd5f 	bl	801441c <VL53L0X_PerformSingleRangingMeasurement>
	if (status == VL53L0X_ERROR_NONE)
 801495e:	2800      	cmp	r0, #0
 8014960:	d1f7      	bne.n	8014952 <perform_ref_signal_measurement+0x1a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8014962:	2201      	movs	r2, #1
 8014964:	21ff      	movs	r1, #255	; 0xff
 8014966:	0020      	movs	r0, r4
 8014968:	f001 fcfe 	bl	8016368 <VL53L0X_WrByte>
	if (status == VL53L0X_ERROR_NONE)
 801496c:	2800      	cmp	r0, #0
 801496e:	d1f0      	bne.n	8014952 <perform_ref_signal_measurement+0x1a>
		status = VL53L0X_RdWord(Dev,
 8014970:	002a      	movs	r2, r5
 8014972:	21b6      	movs	r1, #182	; 0xb6
 8014974:	0020      	movs	r0, r4
 8014976:	f001 fd4e 	bl	8016416 <VL53L0X_RdWord>
	if (status == VL53L0X_ERROR_NONE)
 801497a:	2800      	cmp	r0, #0
 801497c:	d1e9      	bne.n	8014952 <perform_ref_signal_measurement+0x1a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 801497e:	2200      	movs	r2, #0
 8014980:	21ff      	movs	r1, #255	; 0xff
 8014982:	0020      	movs	r0, r4
 8014984:	f001 fcf0 	bl	8016368 <VL53L0X_WrByte>
	if (status == VL53L0X_ERROR_NONE) {
 8014988:	2800      	cmp	r0, #0
 801498a:	d1e2      	bne.n	8014952 <perform_ref_signal_measurement+0x1a>
		status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 801498c:	0032      	movs	r2, r6
 801498e:	2101      	movs	r1, #1
 8014990:	0020      	movs	r0, r4
 8014992:	f001 fce9 	bl	8016368 <VL53L0X_WrByte>
		if (status == VL53L0X_ERROR_NONE)
 8014996:	2800      	cmp	r0, #0
 8014998:	d1db      	bne.n	8014952 <perform_ref_signal_measurement+0x1a>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 801499a:	2398      	movs	r3, #152	; 0x98
 801499c:	005b      	lsls	r3, r3, #1
 801499e:	54e6      	strb	r6, [r4, r3]
 80149a0:	e7d7      	b.n	8014952 <perform_ref_signal_measurement+0x1a>

080149a2 <VL53L0X_set_reference_spads>:
	return Status;
}

VL53L0X_Error VL53L0X_set_reference_spads(VL53L0X_DEV Dev,
				 uint32_t count, uint8_t isApertureSpads)
{
 80149a2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80149a4:	b089      	sub	sp, #36	; 0x24
 80149a6:	0005      	movs	r5, r0
 80149a8:	000f      	movs	r7, r1
 80149aa:	0016      	movs	r6, r2
	 * aperture or
	 * non-aperture, as requested.
	 * The good spad map will be applied.
	 */

	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80149ac:	2201      	movs	r2, #1
 80149ae:	21ff      	movs	r1, #255	; 0xff
 80149b0:	f001 fcda 	bl	8016368 <VL53L0X_WrByte>

	if (Status == VL53L0X_ERROR_NONE)
 80149b4:	2800      	cmp	r0, #0
 80149b6:	d015      	beq.n	80149e4 <VL53L0X_set_reference_spads+0x42>
		Status = VL53L0X_WrByte(Dev,
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);

	for (index = 0; index < spadArraySize; index++)
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 80149b8:	2300      	movs	r3, #0
 80149ba:	2292      	movs	r2, #146	; 0x92
 80149bc:	0052      	lsls	r2, r2, #1
 80149be:	54ab      	strb	r3, [r5, r2]
 80149c0:	2226      	movs	r2, #38	; 0x26
 80149c2:	32ff      	adds	r2, #255	; 0xff
 80149c4:	54ab      	strb	r3, [r5, r2]
 80149c6:	3201      	adds	r2, #1
 80149c8:	54ab      	strb	r3, [r5, r2]
 80149ca:	2228      	movs	r2, #40	; 0x28
 80149cc:	32ff      	adds	r2, #255	; 0xff
 80149ce:	54ab      	strb	r3, [r5, r2]
 80149d0:	3201      	adds	r2, #1
 80149d2:	54ab      	strb	r3, [r5, r2]
 80149d4:	222a      	movs	r2, #42	; 0x2a
 80149d6:	32ff      	adds	r2, #255	; 0xff
 80149d8:	54ab      	strb	r3, [r5, r2]
	uint32_t currentSpadIndex = 0;
 80149da:	2400      	movs	r4, #0

	if (isApertureSpads) {
 80149dc:	2e00      	cmp	r6, #0
 80149de:	d025      	beq.n	8014a2c <VL53L0X_set_reference_spads+0x8a>
	uint32_t currentSpadIndex = 0;
 80149e0:	2400      	movs	r4, #0
 80149e2:	e01b      	b.n	8014a1c <VL53L0X_set_reference_spads+0x7a>
		Status = VL53L0X_WrByte(Dev,
 80149e4:	2200      	movs	r2, #0
 80149e6:	214f      	movs	r1, #79	; 0x4f
 80149e8:	0028      	movs	r0, r5
 80149ea:	f001 fcbd 	bl	8016368 <VL53L0X_WrByte>
	if (Status == VL53L0X_ERROR_NONE)
 80149ee:	2800      	cmp	r0, #0
 80149f0:	d1e2      	bne.n	80149b8 <VL53L0X_set_reference_spads+0x16>
		Status = VL53L0X_WrByte(Dev,
 80149f2:	222c      	movs	r2, #44	; 0x2c
 80149f4:	214e      	movs	r1, #78	; 0x4e
 80149f6:	0028      	movs	r0, r5
 80149f8:	f001 fcb6 	bl	8016368 <VL53L0X_WrByte>
	if (Status == VL53L0X_ERROR_NONE)
 80149fc:	2800      	cmp	r0, #0
 80149fe:	d1db      	bne.n	80149b8 <VL53L0X_set_reference_spads+0x16>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8014a00:	2200      	movs	r2, #0
 8014a02:	21ff      	movs	r1, #255	; 0xff
 8014a04:	0028      	movs	r0, r5
 8014a06:	f001 fcaf 	bl	8016368 <VL53L0X_WrByte>
	if (Status == VL53L0X_ERROR_NONE)
 8014a0a:	2800      	cmp	r0, #0
 8014a0c:	d1d4      	bne.n	80149b8 <VL53L0X_set_reference_spads+0x16>
		Status = VL53L0X_WrByte(Dev,
 8014a0e:	22b4      	movs	r2, #180	; 0xb4
 8014a10:	21b6      	movs	r1, #182	; 0xb6
 8014a12:	0028      	movs	r0, r5
 8014a14:	f001 fca8 	bl	8016368 <VL53L0X_WrByte>
 8014a18:	e7ce      	b.n	80149b8 <VL53L0X_set_reference_spads+0x16>
		/* Increment to the first APERTURE spad */
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
			  (currentSpadIndex < maxSpadCount)) {
			currentSpadIndex++;
 8014a1a:	3401      	adds	r4, #1
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 8014a1c:	0020      	movs	r0, r4
 8014a1e:	30b4      	adds	r0, #180	; 0xb4
 8014a20:	f7ff ff0e 	bl	8014840 <is_aperture>
 8014a24:	2800      	cmp	r0, #0
 8014a26:	d101      	bne.n	8014a2c <VL53L0X_set_reference_spads+0x8a>
 8014a28:	2c2c      	cmp	r4, #44	; 0x2c
 8014a2a:	d1f6      	bne.n	8014a1a <VL53L0X_set_reference_spads+0x78>
		}
	}
	Status = enable_ref_spads(Dev,
				isApertureSpads,
				Dev->Data.SpadData.RefGoodSpadMap,
				Dev->Data.SpadData.RefSpadEnables,
 8014a2c:	002b      	movs	r3, r5
 8014a2e:	3325      	adds	r3, #37	; 0x25
 8014a30:	33ff      	adds	r3, #255	; 0xff
	Status = enable_ref_spads(Dev,
 8014a32:	aa07      	add	r2, sp, #28
 8014a34:	9204      	str	r2, [sp, #16]
 8014a36:	9703      	str	r7, [sp, #12]
 8014a38:	9402      	str	r4, [sp, #8]
 8014a3a:	22b4      	movs	r2, #180	; 0xb4
 8014a3c:	9201      	str	r2, [sp, #4]
 8014a3e:	3aae      	subs	r2, #174	; 0xae
 8014a40:	9200      	str	r2, [sp, #0]
 8014a42:	002a      	movs	r2, r5
 8014a44:	322b      	adds	r2, #43	; 0x2b
 8014a46:	32ff      	adds	r2, #255	; 0xff
 8014a48:	0031      	movs	r1, r6
 8014a4a:	0028      	movs	r0, r5
 8014a4c:	f7ff ff21 	bl	8014892 <enable_ref_spads>
				startSelect,
				currentSpadIndex,
				count,
				&lastSpadIndex);

	if (Status == VL53L0X_ERROR_NONE) {
 8014a50:	2800      	cmp	r0, #0
 8014a52:	d108      	bne.n	8014a66 <VL53L0X_set_reference_spads+0xc4>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 8014a54:	2316      	movs	r3, #22
 8014a56:	33ff      	adds	r3, #255	; 0xff
 8014a58:	2201      	movs	r2, #1
 8014a5a:	54ea      	strb	r2, [r5, r3]
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8014a5c:	2314      	movs	r3, #20
 8014a5e:	33ff      	adds	r3, #255	; 0xff
 8014a60:	54ef      	strb	r7, [r5, r3]
			ReferenceSpadCount, (uint8_t)(count));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8014a62:	3301      	adds	r3, #1
 8014a64:	54ee      	strb	r6, [r5, r3]
			ReferenceSpadType, isApertureSpads);
	}

	return Status;
}
 8014a66:	b009      	add	sp, #36	; 0x24
 8014a68:	bdf0      	pop	{r4, r5, r6, r7, pc}

08014a6a <VL53L0X_perform_single_ref_calibration>:
}


VL53L0X_Error VL53L0X_perform_single_ref_calibration(VL53L0X_DEV Dev,
		uint8_t vhv_init_byte)
{
 8014a6a:	b510      	push	{r4, lr}
 8014a6c:	0004      	movs	r4, r0
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;

	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
 8014a6e:	2201      	movs	r2, #1
 8014a70:	430a      	orrs	r2, r1
 8014a72:	2100      	movs	r1, #0
 8014a74:	f001 fc78 	bl	8016368 <VL53L0X_WrByte>
				VL53L0X_REG_SYSRANGE_MODE_START_STOP |
				vhv_init_byte);

	if (Status == VL53L0X_ERROR_NONE)
 8014a78:	2800      	cmp	r0, #0
 8014a7a:	d000      	beq.n	8014a7e <VL53L0X_perform_single_ref_calibration+0x14>

	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x00);

	return Status;
}
 8014a7c:	bd10      	pop	{r4, pc}
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 8014a7e:	0020      	movs	r0, r4
 8014a80:	f000 fa9b 	bl	8014fba <VL53L0X_measurement_poll_for_completion>
	if (Status == VL53L0X_ERROR_NONE)
 8014a84:	2800      	cmp	r0, #0
 8014a86:	d1f9      	bne.n	8014a7c <VL53L0X_perform_single_ref_calibration+0x12>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8014a88:	2100      	movs	r1, #0
 8014a8a:	0020      	movs	r0, r4
 8014a8c:	f7ff fc97 	bl	80143be <VL53L0X_ClearInterruptMask>
	if (Status == VL53L0X_ERROR_NONE)
 8014a90:	2800      	cmp	r0, #0
 8014a92:	d1f3      	bne.n	8014a7c <VL53L0X_perform_single_ref_calibration+0x12>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x00);
 8014a94:	2200      	movs	r2, #0
 8014a96:	2100      	movs	r1, #0
 8014a98:	0020      	movs	r0, r4
 8014a9a:	f001 fc65 	bl	8016368 <VL53L0X_WrByte>
 8014a9e:	e7ed      	b.n	8014a7c <VL53L0X_perform_single_ref_calibration+0x12>

08014aa0 <VL53L0X_ref_calibration_io>:

VL53L0X_Error VL53L0X_ref_calibration_io(VL53L0X_DEV Dev, uint8_t read_not_write,
	uint8_t VhvSettings, uint8_t PhaseCal,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal,
	const uint8_t vhv_enable, const uint8_t phase_enable)
{
 8014aa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014aa2:	46c6      	mov	lr, r8
 8014aa4:	b500      	push	{lr}
 8014aa6:	b084      	sub	sp, #16
 8014aa8:	0005      	movs	r5, r0
 8014aaa:	4688      	mov	r8, r1
 8014aac:	9200      	str	r2, [sp, #0]
 8014aae:	9301      	str	r3, [sp, #4]
 8014ab0:	ab0c      	add	r3, sp, #48	; 0x30
 8014ab2:	781f      	ldrb	r7, [r3, #0]
 8014ab4:	ab0d      	add	r3, sp, #52	; 0x34
 8014ab6:	781e      	ldrb	r6, [r3, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint8_t PhaseCalint = 0;
 8014ab8:	ab02      	add	r3, sp, #8
 8014aba:	2200      	movs	r2, #0
 8014abc:	71da      	strb	r2, [r3, #7]

	/* Read VHV from device */
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8014abe:	3201      	adds	r2, #1
 8014ac0:	21ff      	movs	r1, #255	; 0xff
 8014ac2:	f001 fc51 	bl	8016368 <VL53L0X_WrByte>
 8014ac6:	0004      	movs	r4, r0
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8014ac8:	2200      	movs	r2, #0
 8014aca:	2100      	movs	r1, #0
 8014acc:	0028      	movs	r0, r5
 8014ace:	f001 fc4b 	bl	8016368 <VL53L0X_WrByte>
 8014ad2:	4304      	orrs	r4, r0
 8014ad4:	b264      	sxtb	r4, r4
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8014ad6:	2200      	movs	r2, #0
 8014ad8:	21ff      	movs	r1, #255	; 0xff
 8014ada:	0028      	movs	r0, r5
 8014adc:	f001 fc44 	bl	8016368 <VL53L0X_WrByte>
 8014ae0:	4304      	orrs	r4, r0
 8014ae2:	b264      	sxtb	r4, r4

	if (read_not_write) {
 8014ae4:	4643      	mov	r3, r8
 8014ae6:	2b00      	cmp	r3, #0
 8014ae8:	d034      	beq.n	8014b54 <VL53L0X_ref_calibration_io+0xb4>
		if (vhv_enable)
 8014aea:	2f00      	cmp	r7, #0
 8014aec:	d121      	bne.n	8014b32 <VL53L0X_ref_calibration_io+0x92>
			Status |= VL53L0X_RdByte(Dev, 0xCB, pVhvSettings);
		if (phase_enable)
 8014aee:	2e00      	cmp	r6, #0
 8014af0:	d127      	bne.n	8014b42 <VL53L0X_ref_calibration_io+0xa2>
			Status |= VL53L0X_WrByte(Dev, 0xCB, VhvSettings);
		if (phase_enable)
			Status |= VL53L0X_UpdateByte(Dev, 0xEE, 0x80, PhaseCal);
	}

	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8014af2:	2201      	movs	r2, #1
 8014af4:	21ff      	movs	r1, #255	; 0xff
 8014af6:	0028      	movs	r0, r5
 8014af8:	f001 fc36 	bl	8016368 <VL53L0X_WrByte>
 8014afc:	4304      	orrs	r4, r0
 8014afe:	b264      	sxtb	r4, r4
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8014b00:	2201      	movs	r2, #1
 8014b02:	2100      	movs	r1, #0
 8014b04:	0028      	movs	r0, r5
 8014b06:	f001 fc2f 	bl	8016368 <VL53L0X_WrByte>
 8014b0a:	4304      	orrs	r4, r0
 8014b0c:	b264      	sxtb	r4, r4
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8014b0e:	2200      	movs	r2, #0
 8014b10:	21ff      	movs	r1, #255	; 0xff
 8014b12:	0028      	movs	r0, r5
 8014b14:	f001 fc28 	bl	8016368 <VL53L0X_WrByte>

	*pPhaseCal = (uint8_t)(PhaseCalint&0xEF);
 8014b18:	ab02      	add	r3, sp, #8
 8014b1a:	3307      	adds	r3, #7
 8014b1c:	781b      	ldrb	r3, [r3, #0]
 8014b1e:	2210      	movs	r2, #16
 8014b20:	4393      	bics	r3, r2
 8014b22:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8014b24:	7013      	strb	r3, [r2, #0]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8014b26:	4320      	orrs	r0, r4

	return Status;
 8014b28:	b240      	sxtb	r0, r0
}
 8014b2a:	b004      	add	sp, #16
 8014b2c:	bc80      	pop	{r7}
 8014b2e:	46b8      	mov	r8, r7
 8014b30:	bdf0      	pop	{r4, r5, r6, r7, pc}
			Status |= VL53L0X_RdByte(Dev, 0xCB, pVhvSettings);
 8014b32:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014b34:	21cb      	movs	r1, #203	; 0xcb
 8014b36:	0028      	movs	r0, r5
 8014b38:	f001 fc60 	bl	80163fc <VL53L0X_RdByte>
 8014b3c:	4304      	orrs	r4, r0
 8014b3e:	b264      	sxtb	r4, r4
 8014b40:	e7d5      	b.n	8014aee <VL53L0X_ref_calibration_io+0x4e>
			Status |= VL53L0X_RdByte(Dev, 0xEE, &PhaseCalint);
 8014b42:	ab02      	add	r3, sp, #8
 8014b44:	1dda      	adds	r2, r3, #7
 8014b46:	21ee      	movs	r1, #238	; 0xee
 8014b48:	0028      	movs	r0, r5
 8014b4a:	f001 fc57 	bl	80163fc <VL53L0X_RdByte>
 8014b4e:	4304      	orrs	r4, r0
 8014b50:	b264      	sxtb	r4, r4
 8014b52:	e7ce      	b.n	8014af2 <VL53L0X_ref_calibration_io+0x52>
		if (vhv_enable)
 8014b54:	2f00      	cmp	r7, #0
 8014b56:	d10a      	bne.n	8014b6e <VL53L0X_ref_calibration_io+0xce>
		if (phase_enable)
 8014b58:	2e00      	cmp	r6, #0
 8014b5a:	d0ca      	beq.n	8014af2 <VL53L0X_ref_calibration_io+0x52>
			Status |= VL53L0X_UpdateByte(Dev, 0xEE, 0x80, PhaseCal);
 8014b5c:	9b01      	ldr	r3, [sp, #4]
 8014b5e:	2280      	movs	r2, #128	; 0x80
 8014b60:	21ee      	movs	r1, #238	; 0xee
 8014b62:	0028      	movs	r0, r5
 8014b64:	f001 fc27 	bl	80163b6 <VL53L0X_UpdateByte>
 8014b68:	4304      	orrs	r4, r0
 8014b6a:	b264      	sxtb	r4, r4
 8014b6c:	e7c1      	b.n	8014af2 <VL53L0X_ref_calibration_io+0x52>
			Status |= VL53L0X_WrByte(Dev, 0xCB, VhvSettings);
 8014b6e:	9a00      	ldr	r2, [sp, #0]
 8014b70:	21cb      	movs	r1, #203	; 0xcb
 8014b72:	0028      	movs	r0, r5
 8014b74:	f001 fbf8 	bl	8016368 <VL53L0X_WrByte>
 8014b78:	4304      	orrs	r4, r0
 8014b7a:	b264      	sxtb	r4, r4
 8014b7c:	e7ec      	b.n	8014b58 <VL53L0X_ref_calibration_io+0xb8>

08014b7e <VL53L0X_perform_vhv_calibration>:


VL53L0X_Error VL53L0X_perform_vhv_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 8014b7e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014b80:	b089      	sub	sp, #36	; 0x24
 8014b82:	0006      	movs	r6, r0
 8014b84:	000c      	movs	r4, r1
 8014b86:	9205      	str	r2, [sp, #20]
 8014b88:	001f      	movs	r7, r3
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint8_t SequenceConfig = 0;
	uint8_t VhvSettings = 0;
	uint8_t PhaseCal = 0;
	uint8_t PhaseCalInt = 0;
 8014b8a:	2317      	movs	r3, #23
 8014b8c:	aa02      	add	r2, sp, #8
 8014b8e:	4694      	mov	ip, r2
 8014b90:	4463      	add	r3, ip
 8014b92:	2200      	movs	r2, #0
 8014b94:	701a      	strb	r2, [r3, #0]
	uint8_t SequenceConfig = 0;
 8014b96:	1e3d      	subs	r5, r7, #0

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 8014b98:	d002      	beq.n	8014ba0 <VL53L0X_perform_vhv_calibration+0x22>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8014b9a:	2398      	movs	r3, #152	; 0x98
 8014b9c:	005b      	lsls	r3, r3, #1
 8014b9e:	5cc5      	ldrb	r5, [r0, r3]

	/* Run VHV */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x01);
 8014ba0:	2201      	movs	r2, #1
 8014ba2:	2101      	movs	r1, #1
 8014ba4:	0030      	movs	r0, r6
 8014ba6:	f001 fbdf 	bl	8016368 <VL53L0X_WrByte>

	if (Status == VL53L0X_ERROR_NONE)
 8014baa:	2800      	cmp	r0, #0
 8014bac:	d007      	beq.n	8014bbe <VL53L0X_perform_vhv_calibration+0x40>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
			VhvSettings, PhaseCal, /* Not used here */
			pVhvSettings, &PhaseCalInt,
			1, 0);
	} else
		*pVhvSettings = 0;
 8014bae:	2300      	movs	r3, #0
 8014bb0:	7023      	strb	r3, [r4, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 8014bb2:	2800      	cmp	r0, #0
 8014bb4:	d101      	bne.n	8014bba <VL53L0X_perform_vhv_calibration+0x3c>
 8014bb6:	2f00      	cmp	r7, #0
 8014bb8:	d11b      	bne.n	8014bf2 <VL53L0X_perform_vhv_calibration+0x74>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);

	}

	return Status;
}
 8014bba:	b009      	add	sp, #36	; 0x24
 8014bbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x40);
 8014bbe:	2140      	movs	r1, #64	; 0x40
 8014bc0:	0030      	movs	r0, r6
 8014bc2:	f7ff ff52 	bl	8014a6a <VL53L0X_perform_single_ref_calibration>
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 8014bc6:	2800      	cmp	r0, #0
 8014bc8:	d1f1      	bne.n	8014bae <VL53L0X_perform_vhv_calibration+0x30>
 8014bca:	9b05      	ldr	r3, [sp, #20]
 8014bcc:	2b01      	cmp	r3, #1
 8014bce:	d1ee      	bne.n	8014bae <VL53L0X_perform_vhv_calibration+0x30>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 8014bd0:	2300      	movs	r3, #0
 8014bd2:	9303      	str	r3, [sp, #12]
 8014bd4:	3301      	adds	r3, #1
 8014bd6:	9302      	str	r3, [sp, #8]
 8014bd8:	3316      	adds	r3, #22
 8014bda:	aa02      	add	r2, sp, #8
 8014bdc:	4694      	mov	ip, r2
 8014bde:	4463      	add	r3, ip
 8014be0:	9301      	str	r3, [sp, #4]
 8014be2:	9400      	str	r4, [sp, #0]
 8014be4:	2300      	movs	r3, #0
 8014be6:	2200      	movs	r2, #0
 8014be8:	2101      	movs	r1, #1
 8014bea:	0030      	movs	r0, r6
 8014bec:	f7ff ff58 	bl	8014aa0 <VL53L0X_ref_calibration_io>
 8014bf0:	e7df      	b.n	8014bb2 <VL53L0X_perform_vhv_calibration+0x34>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8014bf2:	002a      	movs	r2, r5
 8014bf4:	2101      	movs	r1, #1
 8014bf6:	0030      	movs	r0, r6
 8014bf8:	f001 fbb6 	bl	8016368 <VL53L0X_WrByte>
		if (Status == VL53L0X_ERROR_NONE)
 8014bfc:	2800      	cmp	r0, #0
 8014bfe:	d1dc      	bne.n	8014bba <VL53L0X_perform_vhv_calibration+0x3c>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8014c00:	2398      	movs	r3, #152	; 0x98
 8014c02:	005b      	lsls	r3, r3, #1
 8014c04:	54f5      	strb	r5, [r6, r3]
 8014c06:	e7d8      	b.n	8014bba <VL53L0X_perform_vhv_calibration+0x3c>

08014c08 <VL53L0X_perform_phase_calibration>:

VL53L0X_Error VL53L0X_perform_phase_calibration(VL53L0X_DEV Dev,
	uint8_t *pPhaseCal, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 8014c08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014c0a:	b089      	sub	sp, #36	; 0x24
 8014c0c:	0006      	movs	r6, r0
 8014c0e:	000c      	movs	r4, r1
 8014c10:	9205      	str	r2, [sp, #20]
 8014c12:	001f      	movs	r7, r3
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint8_t SequenceConfig = 0;
 8014c14:	1e1d      	subs	r5, r3, #0

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 8014c16:	d002      	beq.n	8014c1e <VL53L0X_perform_phase_calibration+0x16>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8014c18:	2398      	movs	r3, #152	; 0x98
 8014c1a:	005b      	lsls	r3, r3, #1
 8014c1c:	5cc5      	ldrb	r5, [r0, r3]

	/* Run PhaseCal */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x02);
 8014c1e:	2202      	movs	r2, #2
 8014c20:	2101      	movs	r1, #1
 8014c22:	0030      	movs	r0, r6
 8014c24:	f001 fba0 	bl	8016368 <VL53L0X_WrByte>

	if (Status == VL53L0X_ERROR_NONE)
 8014c28:	2800      	cmp	r0, #0
 8014c2a:	d007      	beq.n	8014c3c <VL53L0X_perform_phase_calibration+0x34>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
			VhvSettings, PhaseCal, /* Not used here */
			&VhvSettingsint, pPhaseCal,
			0, 1);
	} else
		*pPhaseCal = 0;
 8014c2c:	2300      	movs	r3, #0
 8014c2e:	7023      	strb	r3, [r4, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 8014c30:	2800      	cmp	r0, #0
 8014c32:	d101      	bne.n	8014c38 <VL53L0X_perform_phase_calibration+0x30>
 8014c34:	2f00      	cmp	r7, #0
 8014c36:	d11a      	bne.n	8014c6e <VL53L0X_perform_phase_calibration+0x66>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);

	}

	return Status;
}
 8014c38:	b009      	add	sp, #36	; 0x24
 8014c3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x0);
 8014c3c:	2100      	movs	r1, #0
 8014c3e:	0030      	movs	r0, r6
 8014c40:	f7ff ff13 	bl	8014a6a <VL53L0X_perform_single_ref_calibration>
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 8014c44:	2800      	cmp	r0, #0
 8014c46:	d1f1      	bne.n	8014c2c <VL53L0X_perform_phase_calibration+0x24>
 8014c48:	9b05      	ldr	r3, [sp, #20]
 8014c4a:	2b01      	cmp	r3, #1
 8014c4c:	d1ee      	bne.n	8014c2c <VL53L0X_perform_phase_calibration+0x24>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 8014c4e:	9303      	str	r3, [sp, #12]
 8014c50:	2300      	movs	r3, #0
 8014c52:	9302      	str	r3, [sp, #8]
 8014c54:	9401      	str	r4, [sp, #4]
 8014c56:	3317      	adds	r3, #23
 8014c58:	aa02      	add	r2, sp, #8
 8014c5a:	4694      	mov	ip, r2
 8014c5c:	4463      	add	r3, ip
 8014c5e:	9300      	str	r3, [sp, #0]
 8014c60:	2300      	movs	r3, #0
 8014c62:	2200      	movs	r2, #0
 8014c64:	2101      	movs	r1, #1
 8014c66:	0030      	movs	r0, r6
 8014c68:	f7ff ff1a 	bl	8014aa0 <VL53L0X_ref_calibration_io>
 8014c6c:	e7e0      	b.n	8014c30 <VL53L0X_perform_phase_calibration+0x28>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8014c6e:	002a      	movs	r2, r5
 8014c70:	2101      	movs	r1, #1
 8014c72:	0030      	movs	r0, r6
 8014c74:	f001 fb78 	bl	8016368 <VL53L0X_WrByte>
		if (Status == VL53L0X_ERROR_NONE)
 8014c78:	2800      	cmp	r0, #0
 8014c7a:	d1dd      	bne.n	8014c38 <VL53L0X_perform_phase_calibration+0x30>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8014c7c:	2398      	movs	r3, #152	; 0x98
 8014c7e:	005b      	lsls	r3, r3, #1
 8014c80:	54f5      	strb	r5, [r6, r3]
 8014c82:	e7d9      	b.n	8014c38 <VL53L0X_perform_phase_calibration+0x30>

08014c84 <VL53L0X_perform_ref_calibration>:

VL53L0X_Error VL53L0X_perform_ref_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal, uint8_t get_data_enable)
{
 8014c84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014c86:	0004      	movs	r4, r0
 8014c88:	0015      	movs	r5, r2
 8014c8a:	001e      	movs	r6, r3

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8014c8c:	2398      	movs	r3, #152	; 0x98
 8014c8e:	005b      	lsls	r3, r3, #1
 8014c90:	5cc7      	ldrb	r7, [r0, r3]

	/* In the following function we don't save the config to optimize
	 * writes on device. Config is saved and restored only once. */
	Status = VL53L0X_perform_vhv_calibration(
 8014c92:	2300      	movs	r3, #0
 8014c94:	0032      	movs	r2, r6
 8014c96:	f7ff ff72 	bl	8014b7e <VL53L0X_perform_vhv_calibration>
			Dev, pVhvSettings, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE)
 8014c9a:	2800      	cmp	r0, #0
 8014c9c:	d000      	beq.n	8014ca0 <VL53L0X_perform_ref_calibration+0x1c>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);

	}

	return Status;
}
 8014c9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		Status = VL53L0X_perform_phase_calibration(
 8014ca0:	2300      	movs	r3, #0
 8014ca2:	0032      	movs	r2, r6
 8014ca4:	0029      	movs	r1, r5
 8014ca6:	0020      	movs	r0, r4
 8014ca8:	f7ff ffae 	bl	8014c08 <VL53L0X_perform_phase_calibration>
	if (Status == VL53L0X_ERROR_NONE) {
 8014cac:	2800      	cmp	r0, #0
 8014cae:	d1f6      	bne.n	8014c9e <VL53L0X_perform_ref_calibration+0x1a>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8014cb0:	003a      	movs	r2, r7
 8014cb2:	2101      	movs	r1, #1
 8014cb4:	0020      	movs	r0, r4
 8014cb6:	f001 fb57 	bl	8016368 <VL53L0X_WrByte>
		if (Status == VL53L0X_ERROR_NONE)
 8014cba:	2800      	cmp	r0, #0
 8014cbc:	d1ef      	bne.n	8014c9e <VL53L0X_perform_ref_calibration+0x1a>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8014cbe:	2398      	movs	r3, #152	; 0x98
 8014cc0:	005b      	lsls	r3, r3, #1
 8014cc2:	54e7      	strb	r7, [r4, r3]
 8014cc4:	e7eb      	b.n	8014c9e <VL53L0X_perform_ref_calibration+0x1a>

08014cc6 <VL53L0X_perform_ref_spad_management>:
{
 8014cc6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014cc8:	46de      	mov	lr, fp
 8014cca:	4657      	mov	r7, sl
 8014ccc:	464e      	mov	r6, r9
 8014cce:	4645      	mov	r5, r8
 8014cd0:	b5e0      	push	{r5, r6, r7, lr}
 8014cd2:	b095      	sub	sp, #84	; 0x54
 8014cd4:	0005      	movs	r5, r0
 8014cd6:	468a      	mov	sl, r1
 8014cd8:	920b      	str	r2, [sp, #44]	; 0x2c
	uint32_t lastSpadIndex = 0;
 8014cda:	2300      	movs	r3, #0
 8014cdc:	9311      	str	r3, [sp, #68]	; 0x44
	int32_t nextGoodSpad = 0;
 8014cde:	9310      	str	r3, [sp, #64]	; 0x40
	uint8_t VhvSettings = 0;
 8014ce0:	221d      	movs	r2, #29
 8014ce2:	a908      	add	r1, sp, #32
 8014ce4:	468c      	mov	ip, r1
 8014ce6:	4462      	add	r2, ip
 8014ce8:	7013      	strb	r3, [r2, #0]
	uint8_t PhaseCal = 0;
 8014cea:	aa0f      	add	r2, sp, #60	; 0x3c
 8014cec:	7013      	strb	r3, [r2, #0]
	targetRefRate = PALDevDataGet(Dev, targetRefRate);
 8014cee:	229e      	movs	r2, #158	; 0x9e
 8014cf0:	0052      	lsls	r2, r2, #1
 8014cf2:	5a82      	ldrh	r2, [r0, r2]
 8014cf4:	4693      	mov	fp, r2
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8014cf6:	2292      	movs	r2, #146	; 0x92
 8014cf8:	0052      	lsls	r2, r2, #1
 8014cfa:	5483      	strb	r3, [r0, r2]
 8014cfc:	2226      	movs	r2, #38	; 0x26
 8014cfe:	32ff      	adds	r2, #255	; 0xff
 8014d00:	5483      	strb	r3, [r0, r2]
 8014d02:	3201      	adds	r2, #1
 8014d04:	5483      	strb	r3, [r0, r2]
 8014d06:	2228      	movs	r2, #40	; 0x28
 8014d08:	32ff      	adds	r2, #255	; 0xff
 8014d0a:	5483      	strb	r3, [r0, r2]
 8014d0c:	3201      	adds	r2, #1
 8014d0e:	5483      	strb	r3, [r0, r2]
 8014d10:	222a      	movs	r2, #42	; 0x2a
 8014d12:	32ff      	adds	r2, #255	; 0xff
 8014d14:	5483      	strb	r3, [r0, r2]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8014d16:	3a29      	subs	r2, #41	; 0x29
 8014d18:	3aff      	subs	r2, #255	; 0xff
 8014d1a:	21ff      	movs	r1, #255	; 0xff
 8014d1c:	f001 fb24 	bl	8016368 <VL53L0X_WrByte>
 8014d20:	1e04      	subs	r4, r0, #0
	if (Status == VL53L0X_ERROR_NONE)
 8014d22:	d000      	beq.n	8014d26 <VL53L0X_perform_ref_spad_management+0x60>
 8014d24:	e10c      	b.n	8014f40 <VL53L0X_perform_ref_spad_management+0x27a>
		Status = VL53L0X_WrByte(Dev,
 8014d26:	2200      	movs	r2, #0
 8014d28:	214f      	movs	r1, #79	; 0x4f
 8014d2a:	0028      	movs	r0, r5
 8014d2c:	f001 fb1c 	bl	8016368 <VL53L0X_WrByte>
 8014d30:	1e04      	subs	r4, r0, #0
	if (Status == VL53L0X_ERROR_NONE)
 8014d32:	d000      	beq.n	8014d36 <VL53L0X_perform_ref_spad_management+0x70>
 8014d34:	e104      	b.n	8014f40 <VL53L0X_perform_ref_spad_management+0x27a>
		Status = VL53L0X_WrByte(Dev,
 8014d36:	222c      	movs	r2, #44	; 0x2c
 8014d38:	214e      	movs	r1, #78	; 0x4e
 8014d3a:	0028      	movs	r0, r5
 8014d3c:	f001 fb14 	bl	8016368 <VL53L0X_WrByte>
 8014d40:	1e04      	subs	r4, r0, #0
	if (Status == VL53L0X_ERROR_NONE)
 8014d42:	d000      	beq.n	8014d46 <VL53L0X_perform_ref_spad_management+0x80>
 8014d44:	e0fc      	b.n	8014f40 <VL53L0X_perform_ref_spad_management+0x27a>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8014d46:	2200      	movs	r2, #0
 8014d48:	21ff      	movs	r1, #255	; 0xff
 8014d4a:	0028      	movs	r0, r5
 8014d4c:	f001 fb0c 	bl	8016368 <VL53L0X_WrByte>
 8014d50:	1e04      	subs	r4, r0, #0
	if (Status == VL53L0X_ERROR_NONE)
 8014d52:	d000      	beq.n	8014d56 <VL53L0X_perform_ref_spad_management+0x90>
 8014d54:	e0f4      	b.n	8014f40 <VL53L0X_perform_ref_spad_management+0x27a>
		Status = VL53L0X_WrByte(Dev,
 8014d56:	22b4      	movs	r2, #180	; 0xb4
 8014d58:	21b6      	movs	r1, #182	; 0xb6
 8014d5a:	0028      	movs	r0, r5
 8014d5c:	f001 fb04 	bl	8016368 <VL53L0X_WrByte>
 8014d60:	1e04      	subs	r4, r0, #0
	if (Status == VL53L0X_ERROR_NONE)
 8014d62:	d000      	beq.n	8014d66 <VL53L0X_perform_ref_spad_management+0xa0>
 8014d64:	e0ec      	b.n	8014f40 <VL53L0X_perform_ref_spad_management+0x27a>
		Status = VL53L0X_WrByte(Dev,
 8014d66:	2200      	movs	r2, #0
 8014d68:	2180      	movs	r1, #128	; 0x80
 8014d6a:	0028      	movs	r0, r5
 8014d6c:	f001 fafc 	bl	8016368 <VL53L0X_WrByte>
 8014d70:	1e04      	subs	r4, r0, #0
	if (Status == VL53L0X_ERROR_NONE)
 8014d72:	d000      	beq.n	8014d76 <VL53L0X_perform_ref_spad_management+0xb0>
 8014d74:	e0e4      	b.n	8014f40 <VL53L0X_perform_ref_spad_management+0x27a>
		Status = VL53L0X_perform_ref_calibration(Dev, &VhvSettings,
 8014d76:	2300      	movs	r3, #0
 8014d78:	aa0f      	add	r2, sp, #60	; 0x3c
 8014d7a:	211d      	movs	r1, #29
 8014d7c:	a808      	add	r0, sp, #32
 8014d7e:	4684      	mov	ip, r0
 8014d80:	4461      	add	r1, ip
 8014d82:	0028      	movs	r0, r5
 8014d84:	f7ff ff7e 	bl	8014c84 <VL53L0X_perform_ref_calibration>
 8014d88:	1e04      	subs	r4, r0, #0
	if (Status == VL53L0X_ERROR_NONE) {
 8014d8a:	d000      	beq.n	8014d8e <VL53L0X_perform_ref_spad_management+0xc8>
 8014d8c:	e0d8      	b.n	8014f40 <VL53L0X_perform_ref_spad_management+0x27a>
		lastSpadIndex = currentSpadIndex;
 8014d8e:	2300      	movs	r3, #0
 8014d90:	9311      	str	r3, [sp, #68]	; 0x44
					Dev->Data.SpadData.RefGoodSpadMap,
 8014d92:	2295      	movs	r2, #149	; 0x95
 8014d94:	0052      	lsls	r2, r2, #1
 8014d96:	4690      	mov	r8, r2
 8014d98:	44a8      	add	r8, r5
					Dev->Data.SpadData.RefSpadEnables,
 8014d9a:	3a06      	subs	r2, #6
 8014d9c:	4691      	mov	r9, r2
 8014d9e:	44a9      	add	r9, r5
		Status = enable_ref_spads(Dev,
 8014da0:	aa11      	add	r2, sp, #68	; 0x44
 8014da2:	9204      	str	r2, [sp, #16]
 8014da4:	2203      	movs	r2, #3
 8014da6:	9203      	str	r2, [sp, #12]
 8014da8:	9302      	str	r3, [sp, #8]
 8014daa:	33b4      	adds	r3, #180	; 0xb4
 8014dac:	9301      	str	r3, [sp, #4]
 8014dae:	3bae      	subs	r3, #174	; 0xae
 8014db0:	9300      	str	r3, [sp, #0]
 8014db2:	464b      	mov	r3, r9
 8014db4:	4642      	mov	r2, r8
 8014db6:	2100      	movs	r1, #0
 8014db8:	0028      	movs	r0, r5
 8014dba:	f7ff fd6a 	bl	8014892 <enable_ref_spads>
 8014dbe:	1e04      	subs	r4, r0, #0
	if (Status == VL53L0X_ERROR_NONE) {
 8014dc0:	d000      	beq.n	8014dc4 <VL53L0X_perform_ref_spad_management+0xfe>
 8014dc2:	e0bd      	b.n	8014f40 <VL53L0X_perform_ref_spad_management+0x27a>
		currentSpadIndex = lastSpadIndex;
 8014dc4:	9e11      	ldr	r6, [sp, #68]	; 0x44
		Status = perform_ref_signal_measurement(Dev,
 8014dc6:	211e      	movs	r1, #30
 8014dc8:	ab08      	add	r3, sp, #32
 8014dca:	469c      	mov	ip, r3
 8014dcc:	4461      	add	r1, ip
 8014dce:	0028      	movs	r0, r5
 8014dd0:	f7ff fdb2 	bl	8014938 <perform_ref_signal_measurement>
 8014dd4:	0003      	movs	r3, r0
 8014dd6:	900d      	str	r0, [sp, #52]	; 0x34
 8014dd8:	1e04      	subs	r4, r0, #0
		if ((Status == VL53L0X_ERROR_NONE) &&
 8014dda:	d000      	beq.n	8014dde <VL53L0X_perform_ref_spad_management+0x118>
 8014ddc:	e0b0      	b.n	8014f40 <VL53L0X_perform_ref_spad_management+0x27a>
			(peakSignalRateRef > targetRefRate)) {
 8014dde:	331e      	adds	r3, #30
 8014de0:	aa08      	add	r2, sp, #32
 8014de2:	4694      	mov	ip, r2
 8014de4:	4463      	add	r3, ip
		if ((Status == VL53L0X_ERROR_NONE) &&
 8014de6:	881b      	ldrh	r3, [r3, #0]
 8014de8:	455b      	cmp	r3, fp
 8014dea:	d800      	bhi.n	8014dee <VL53L0X_perform_ref_spad_management+0x128>
 8014dec:	e0b6      	b.n	8014f5c <VL53L0X_perform_ref_spad_management+0x296>
				Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8014dee:	2300      	movs	r3, #0
 8014df0:	2292      	movs	r2, #146	; 0x92
 8014df2:	0052      	lsls	r2, r2, #1
 8014df4:	54ab      	strb	r3, [r5, r2]
 8014df6:	2226      	movs	r2, #38	; 0x26
 8014df8:	32ff      	adds	r2, #255	; 0xff
 8014dfa:	54ab      	strb	r3, [r5, r2]
 8014dfc:	3201      	adds	r2, #1
 8014dfe:	54ab      	strb	r3, [r5, r2]
 8014e00:	2228      	movs	r2, #40	; 0x28
 8014e02:	32ff      	adds	r2, #255	; 0xff
 8014e04:	54ab      	strb	r3, [r5, r2]
 8014e06:	3201      	adds	r2, #1
 8014e08:	54ab      	strb	r3, [r5, r2]
 8014e0a:	222a      	movs	r2, #42	; 0x2a
 8014e0c:	32ff      	adds	r2, #255	; 0xff
 8014e0e:	54ab      	strb	r3, [r5, r2]
			for (index = 0; index < spadArraySize; index++)
 8014e10:	e000      	b.n	8014e14 <VL53L0X_perform_ref_spad_management+0x14e>
				currentSpadIndex++;
 8014e12:	3601      	adds	r6, #1
			while ((is_aperture(startSelect + currentSpadIndex)
 8014e14:	0030      	movs	r0, r6
 8014e16:	30b4      	adds	r0, #180	; 0xb4
 8014e18:	f7ff fd12 	bl	8014840 <is_aperture>
 8014e1c:	2800      	cmp	r0, #0
 8014e1e:	d101      	bne.n	8014e24 <VL53L0X_perform_ref_spad_management+0x15e>
				== 0) && (currentSpadIndex < maxSpadCount)) {
 8014e20:	2e2b      	cmp	r6, #43	; 0x2b
 8014e22:	d9f6      	bls.n	8014e12 <VL53L0X_perform_ref_spad_management+0x14c>
			Status = enable_ref_spads(Dev,
 8014e24:	ab11      	add	r3, sp, #68	; 0x44
 8014e26:	9304      	str	r3, [sp, #16]
 8014e28:	2303      	movs	r3, #3
 8014e2a:	9303      	str	r3, [sp, #12]
 8014e2c:	9602      	str	r6, [sp, #8]
 8014e2e:	33b1      	adds	r3, #177	; 0xb1
 8014e30:	9301      	str	r3, [sp, #4]
 8014e32:	3bae      	subs	r3, #174	; 0xae
 8014e34:	9300      	str	r3, [sp, #0]
 8014e36:	464b      	mov	r3, r9
 8014e38:	4642      	mov	r2, r8
 8014e3a:	2101      	movs	r1, #1
 8014e3c:	0028      	movs	r0, r5
 8014e3e:	f7ff fd28 	bl	8014892 <enable_ref_spads>
 8014e42:	1e04      	subs	r4, r0, #0
			if (Status == VL53L0X_ERROR_NONE) {
 8014e44:	d17c      	bne.n	8014f40 <VL53L0X_perform_ref_spad_management+0x27a>
				currentSpadIndex = lastSpadIndex;
 8014e46:	9e11      	ldr	r6, [sp, #68]	; 0x44
				Status = perform_ref_signal_measurement(Dev,
 8014e48:	211e      	movs	r1, #30
 8014e4a:	ab08      	add	r3, sp, #32
 8014e4c:	469c      	mov	ip, r3
 8014e4e:	4461      	add	r1, ip
 8014e50:	0028      	movs	r0, r5
 8014e52:	f7ff fd71 	bl	8014938 <perform_ref_signal_measurement>
 8014e56:	1e04      	subs	r4, r0, #0
				if ((Status == VL53L0X_ERROR_NONE) &&
 8014e58:	d172      	bne.n	8014f40 <VL53L0X_perform_ref_spad_management+0x27a>
					(peakSignalRateRef > targetRefRate)) {
 8014e5a:	231e      	movs	r3, #30
 8014e5c:	aa08      	add	r2, sp, #32
 8014e5e:	4694      	mov	ip, r2
 8014e60:	4463      	add	r3, ip
				if ((Status == VL53L0X_ERROR_NONE) &&
 8014e62:	881b      	ldrh	r3, [r3, #0]
 8014e64:	455b      	cmp	r3, fp
 8014e66:	d800      	bhi.n	8014e6a <VL53L0X_perform_ref_spad_management+0x1a4>
 8014e68:	e09d      	b.n	8014fa6 <VL53L0X_perform_ref_spad_management+0x2e0>
					isApertureSpads_int = 1;
 8014e6a:	2301      	movs	r3, #1
 8014e6c:	930c      	str	r3, [sp, #48]	; 0x30
					refSpadCount_int = minimumSpadCount;
 8014e6e:	3302      	adds	r3, #2
 8014e70:	9306      	str	r3, [sp, #24]
			needAptSpads = 1;
 8014e72:	3b02      	subs	r3, #2
 8014e74:	9309      	str	r3, [sp, #36]	; 0x24
 8014e76:	e075      	b.n	8014f64 <VL53L0X_perform_ref_spad_management+0x29e>
				currentSpadIndex++;
 8014e78:	3601      	adds	r6, #1
				Status = set_ref_spad_map(Dev,
 8014e7a:	4649      	mov	r1, r9
 8014e7c:	0028      	movs	r0, r5
 8014e7e:	f7ff fcfa 	bl	8014876 <set_ref_spad_map>
			if (Status != VL53L0X_ERROR_NONE)
 8014e82:	2800      	cmp	r0, #0
 8014e84:	d000      	beq.n	8014e88 <VL53L0X_perform_ref_spad_management+0x1c2>
 8014e86:	e094      	b.n	8014fb2 <VL53L0X_perform_ref_spad_management+0x2ec>
			Status = perform_ref_signal_measurement(Dev,
 8014e88:	0039      	movs	r1, r7
 8014e8a:	0028      	movs	r0, r5
 8014e8c:	f7ff fd54 	bl	8014938 <perform_ref_signal_measurement>
			if (Status != VL53L0X_ERROR_NONE)
 8014e90:	2800      	cmp	r0, #0
 8014e92:	d000      	beq.n	8014e96 <VL53L0X_perform_ref_spad_management+0x1d0>
 8014e94:	e08f      	b.n	8014fb6 <VL53L0X_perform_ref_spad_management+0x2f0>
			signalRateDiff = abs(peakSignalRateRef - targetRefRate);
 8014e96:	883b      	ldrh	r3, [r7, #0]
 8014e98:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014e9a:	1a9c      	subs	r4, r3, r2
 8014e9c:	17e2      	asrs	r2, r4, #31
 8014e9e:	18a4      	adds	r4, r4, r2
 8014ea0:	4054      	eors	r4, r2
			if (peakSignalRateRef > targetRefRate) {
 8014ea2:	455b      	cmp	r3, fp
 8014ea4:	d927      	bls.n	8014ef6 <VL53L0X_perform_ref_spad_management+0x230>
				if (signalRateDiff > lastSignalRateDiff) {
 8014ea6:	9b08      	ldr	r3, [sp, #32]
 8014ea8:	429c      	cmp	r4, r3
 8014eaa:	d813      	bhi.n	8014ed4 <VL53L0X_perform_ref_spad_management+0x20e>
		*refSpadCount = refSpadCount_int;
 8014eac:	4653      	mov	r3, sl
 8014eae:	9a06      	ldr	r2, [sp, #24]
 8014eb0:	601a      	str	r2, [r3, #0]
		*isApertureSpads = isApertureSpads_int;
 8014eb2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014eb4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014eb6:	700b      	strb	r3, [r1, #0]
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 8014eb8:	2316      	movs	r3, #22
 8014eba:	33ff      	adds	r3, #255	; 0xff
 8014ebc:	2201      	movs	r2, #1
 8014ebe:	54ea      	strb	r2, [r5, r3]
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8014ec0:	4653      	mov	r3, sl
 8014ec2:	681a      	ldr	r2, [r3, #0]
 8014ec4:	2314      	movs	r3, #20
 8014ec6:	33ff      	adds	r3, #255	; 0xff
 8014ec8:	54ea      	strb	r2, [r5, r3]
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8014eca:	780a      	ldrb	r2, [r1, #0]
 8014ecc:	3301      	adds	r3, #1
 8014ece:	54ea      	strb	r2, [r5, r3]
 8014ed0:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8014ed2:	e035      	b.n	8014f40 <VL53L0X_perform_ref_spad_management+0x27a>
					Status = set_ref_spad_map(Dev,
 8014ed4:	a912      	add	r1, sp, #72	; 0x48
 8014ed6:	0028      	movs	r0, r5
 8014ed8:	f7ff fccd 	bl	8014876 <set_ref_spad_map>
 8014edc:	0004      	movs	r4, r0
					memcpy(
 8014ede:	0028      	movs	r0, r5
 8014ee0:	3025      	adds	r0, #37	; 0x25
 8014ee2:	30ff      	adds	r0, #255	; 0xff
 8014ee4:	2206      	movs	r2, #6
 8014ee6:	a912      	add	r1, sp, #72	; 0x48
 8014ee8:	f001 fb24 	bl	8016534 <memcpy>
	if (Status == VL53L0X_ERROR_NONE) {
 8014eec:	9b07      	ldr	r3, [sp, #28]
 8014eee:	9306      	str	r3, [sp, #24]
 8014ef0:	2c00      	cmp	r4, #0
 8014ef2:	d0db      	beq.n	8014eac <VL53L0X_perform_ref_spad_management+0x1e6>
 8014ef4:	e024      	b.n	8014f40 <VL53L0X_perform_ref_spad_management+0x27a>
				memcpy(lastSpadArray,
 8014ef6:	0029      	movs	r1, r5
 8014ef8:	3125      	adds	r1, #37	; 0x25
 8014efa:	31ff      	adds	r1, #255	; 0xff
 8014efc:	2206      	movs	r2, #6
 8014efe:	a812      	add	r0, sp, #72	; 0x48
 8014f00:	f001 fb18 	bl	8016534 <memcpy>
			(refSpadCount_int)++;
 8014f04:	9b06      	ldr	r3, [sp, #24]
 8014f06:	9307      	str	r3, [sp, #28]
			signalRateDiff = abs(peakSignalRateRef - targetRefRate);
 8014f08:	9408      	str	r4, [sp, #32]
			get_next_good_spad(
 8014f0a:	ab10      	add	r3, sp, #64	; 0x40
 8014f0c:	0032      	movs	r2, r6
 8014f0e:	2106      	movs	r1, #6
 8014f10:	4640      	mov	r0, r8
 8014f12:	f7ff fc71 	bl	80147f8 <get_next_good_spad>
			if (nextGoodSpad == -1) {
 8014f16:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8014f18:	1c73      	adds	r3, r6, #1
 8014f1a:	d01c      	beq.n	8014f56 <VL53L0X_perform_ref_spad_management+0x290>
			if (is_aperture((uint32_t)startSelect + nextGoodSpad) !=
 8014f1c:	0030      	movs	r0, r6
 8014f1e:	30b4      	adds	r0, #180	; 0xb4
 8014f20:	f7ff fc8e 	bl	8014840 <is_aperture>
 8014f24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014f26:	4298      	cmp	r0, r3
 8014f28:	d112      	bne.n	8014f50 <VL53L0X_perform_ref_spad_management+0x28a>
			(refSpadCount_int)++;
 8014f2a:	9b07      	ldr	r3, [sp, #28]
 8014f2c:	3301      	adds	r3, #1
 8014f2e:	9306      	str	r3, [sp, #24]
			Status = enable_spad_bit(
 8014f30:	0032      	movs	r2, r6
 8014f32:	2106      	movs	r1, #6
 8014f34:	4648      	mov	r0, r9
 8014f36:	f7ff fc8d 	bl	8014854 <enable_spad_bit>
			if (Status == VL53L0X_ERROR_NONE) {
 8014f3a:	2800      	cmp	r0, #0
 8014f3c:	d09c      	beq.n	8014e78 <VL53L0X_perform_ref_spad_management+0x1b2>
 8014f3e:	0004      	movs	r4, r0
}
 8014f40:	0020      	movs	r0, r4
 8014f42:	b015      	add	sp, #84	; 0x54
 8014f44:	bcf0      	pop	{r4, r5, r6, r7}
 8014f46:	46bb      	mov	fp, r7
 8014f48:	46b2      	mov	sl, r6
 8014f4a:	46a9      	mov	r9, r5
 8014f4c:	46a0      	mov	r8, r4
 8014f4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014f50:	9b07      	ldr	r3, [sp, #28]
 8014f52:	9306      	str	r3, [sp, #24]
 8014f54:	e7aa      	b.n	8014eac <VL53L0X_perform_ref_spad_management+0x1e6>
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
 8014f56:	2432      	movs	r4, #50	; 0x32
 8014f58:	4264      	negs	r4, r4
	if (Status == VL53L0X_ERROR_NONE) {
 8014f5a:	e7f1      	b.n	8014f40 <VL53L0X_perform_ref_spad_management+0x27a>
	uint8_t	 isApertureSpads_int = 0;
 8014f5c:	2300      	movs	r3, #0
 8014f5e:	930c      	str	r3, [sp, #48]	; 0x30
	uint32_t refSpadCount_int = 0;
 8014f60:	9306      	str	r3, [sp, #24]
			needAptSpads = 0;
 8014f62:	9309      	str	r3, [sp, #36]	; 0x24
		(peakSignalRateRef < targetRefRate)) {
 8014f64:	231e      	movs	r3, #30
 8014f66:	aa08      	add	r2, sp, #32
 8014f68:	4694      	mov	ip, r2
 8014f6a:	4463      	add	r3, ip
 8014f6c:	881c      	ldrh	r4, [r3, #0]
	if ((Status == VL53L0X_ERROR_NONE) &&
 8014f6e:	455c      	cmp	r4, fp
 8014f70:	d29c      	bcs.n	8014eac <VL53L0X_perform_ref_spad_management+0x1e6>
		isApertureSpads_int = needAptSpads;
 8014f72:	466b      	mov	r3, sp
 8014f74:	2224      	movs	r2, #36	; 0x24
 8014f76:	189b      	adds	r3, r3, r2
 8014f78:	781b      	ldrb	r3, [r3, #0]
 8014f7a:	930c      	str	r3, [sp, #48]	; 0x30
		memcpy(lastSpadArray, Dev->Data.SpadData.RefSpadEnables,
 8014f7c:	0029      	movs	r1, r5
 8014f7e:	3125      	adds	r1, #37	; 0x25
 8014f80:	31ff      	adds	r1, #255	; 0xff
 8014f82:	3a1e      	subs	r2, #30
 8014f84:	a812      	add	r0, sp, #72	; 0x48
 8014f86:	f001 fad5 	bl	8016534 <memcpy>
		lastSignalRateDiff = abs(peakSignalRateRef -
 8014f8a:	465b      	mov	r3, fp
 8014f8c:	930a      	str	r3, [sp, #40]	; 0x28
 8014f8e:	1ae4      	subs	r4, r4, r3
 8014f90:	17e2      	asrs	r2, r4, #31
 8014f92:	18a3      	adds	r3, r4, r2
 8014f94:	4053      	eors	r3, r2
 8014f96:	9308      	str	r3, [sp, #32]
		refSpadCount_int	= minimumSpadCount;
 8014f98:	2303      	movs	r3, #3
 8014f9a:	9307      	str	r3, [sp, #28]
			Status = perform_ref_signal_measurement(Dev,
 8014f9c:	271e      	movs	r7, #30
 8014f9e:	ab08      	add	r3, sp, #32
 8014fa0:	469c      	mov	ip, r3
 8014fa2:	4467      	add	r7, ip
 8014fa4:	e7b1      	b.n	8014f0a <VL53L0X_perform_ref_spad_management+0x244>
	uint8_t	 isApertureSpads_int = 0;
 8014fa6:	2300      	movs	r3, #0
 8014fa8:	930c      	str	r3, [sp, #48]	; 0x30
	uint32_t refSpadCount_int = 0;
 8014faa:	9306      	str	r3, [sp, #24]
			needAptSpads = 1;
 8014fac:	3301      	adds	r3, #1
 8014fae:	9309      	str	r3, [sp, #36]	; 0x24
 8014fb0:	e7d8      	b.n	8014f64 <VL53L0X_perform_ref_spad_management+0x29e>
 8014fb2:	0004      	movs	r4, r0
 8014fb4:	e7c4      	b.n	8014f40 <VL53L0X_perform_ref_spad_management+0x27a>
 8014fb6:	0004      	movs	r4, r0
 8014fb8:	e7c2      	b.n	8014f40 <VL53L0X_perform_ref_spad_management+0x27a>

08014fba <VL53L0X_measurement_poll_for_completion>:
	}
	return Status;
}

VL53L0X_Error VL53L0X_measurement_poll_for_completion(VL53L0X_DEV Dev)
{
 8014fba:	b570      	push	{r4, r5, r6, lr}
 8014fbc:	b082      	sub	sp, #8
 8014fbe:	0006      	movs	r6, r0
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint8_t NewDataReady = 0;
 8014fc0:	466b      	mov	r3, sp
 8014fc2:	2200      	movs	r2, #0
 8014fc4:	71da      	strb	r2, [r3, #7]
 8014fc6:	24fa      	movs	r4, #250	; 0xfa
 8014fc8:	00e4      	lsls	r4, r4, #3
	LOG_FUNCTION_START("");

	LoopNb = 0;

	do {
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 8014fca:	466b      	mov	r3, sp
 8014fcc:	1ddd      	adds	r5, r3, #7
 8014fce:	0029      	movs	r1, r5
 8014fd0:	0030      	movs	r0, r6
 8014fd2:	f7ff fbc8 	bl	8014766 <VL53L0X_GetMeasurementDataReady>
		if (Status != 0)
 8014fd6:	2800      	cmp	r0, #0
 8014fd8:	d10b      	bne.n	8014ff2 <VL53L0X_measurement_poll_for_completion+0x38>
			break; /* the error is set */

		if (NewDataReady == 1)
 8014fda:	782b      	ldrb	r3, [r5, #0]
 8014fdc:	2b01      	cmp	r3, #1
 8014fde:	d008      	beq.n	8014ff2 <VL53L0X_measurement_poll_for_completion+0x38>
			break; /* done note that status == 0 */

		LoopNb++;
		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP) {
 8014fe0:	3c01      	subs	r4, #1
 8014fe2:	2c00      	cmp	r4, #0
 8014fe4:	d003      	beq.n	8014fee <VL53L0X_measurement_poll_for_completion+0x34>
			Status = VL53L0X_ERROR_TIME_OUT;
			break;
		}

		VL53L0X_PollingDelay(Dev);
 8014fe6:	0030      	movs	r0, r6
 8014fe8:	f001 fa2f 	bl	801644a <VL53L0X_PollingDelay>
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 8014fec:	e7ef      	b.n	8014fce <VL53L0X_measurement_poll_for_completion+0x14>
			Status = VL53L0X_ERROR_TIME_OUT;
 8014fee:	2007      	movs	r0, #7
 8014ff0:	4240      	negs	r0, r0
	} while (1);

	LOG_FUNCTION_END(Status);

	return Status;
}
 8014ff2:	b002      	add	sp, #8
 8014ff4:	bd70      	pop	{r4, r5, r6, pc}

08014ff6 <VL53L0X_isqrt>:
	return vcsel_period_reg;
}


uint32_t VL53L0X_isqrt(uint32_t num)
{
 8014ff6:	0002      	movs	r2, r0
	uint32_t  bit = 1 << 30;
	/* The second-to-top bit is set:
	 *	1 << 14 for 16-bits, 1 << 30 for 32 bits */

	 /* "bit" starts at the highest power of four <= the argument. */
	while (bit > num)
 8014ff8:	2380      	movs	r3, #128	; 0x80
 8014ffa:	05db      	lsls	r3, r3, #23
 8014ffc:	4298      	cmp	r0, r3
 8014ffe:	d206      	bcs.n	801500e <VL53L0X_isqrt+0x18>
		bit >>= 2;
 8015000:	089b      	lsrs	r3, r3, #2
	while (bit > num)
 8015002:	429a      	cmp	r2, r3
 8015004:	d3fc      	bcc.n	8015000 <VL53L0X_isqrt+0xa>


	while (bit != 0) {
 8015006:	2b00      	cmp	r3, #0
 8015008:	d00e      	beq.n	8015028 <VL53L0X_isqrt+0x32>
	uint32_t  bit = 1 << 30;
 801500a:	2000      	movs	r0, #0
 801500c:	e005      	b.n	801501a <VL53L0X_isqrt+0x24>
 801500e:	2380      	movs	r3, #128	; 0x80
 8015010:	05db      	lsls	r3, r3, #23
 8015012:	e7fa      	b.n	801500a <VL53L0X_isqrt+0x14>
		if (num >= res + bit) {
			num -= res + bit;
			res = (res >> 1) + bit;
		} else
			res >>= 1;
 8015014:	0840      	lsrs	r0, r0, #1

		bit >>= 2;
 8015016:	089b      	lsrs	r3, r3, #2
	while (bit != 0) {
 8015018:	d007      	beq.n	801502a <VL53L0X_isqrt+0x34>
		if (num >= res + bit) {
 801501a:	18c1      	adds	r1, r0, r3
 801501c:	4291      	cmp	r1, r2
 801501e:	d8f9      	bhi.n	8015014 <VL53L0X_isqrt+0x1e>
			num -= res + bit;
 8015020:	1a52      	subs	r2, r2, r1
			res = (res >> 1) + bit;
 8015022:	0840      	lsrs	r0, r0, #1
 8015024:	18c0      	adds	r0, r0, r3
 8015026:	e7f6      	b.n	8015016 <VL53L0X_isqrt+0x20>
	uint32_t  res = 0;
 8015028:	0018      	movs	r0, r3
	}

	return res;
}
 801502a:	4770      	bx	lr

0801502c <VL53L0X_device_read_strobe>:
	return res;
}


VL53L0X_Error VL53L0X_device_read_strobe(VL53L0X_DEV Dev)
{
 801502c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801502e:	b085      	sub	sp, #20
 8015030:	0007      	movs	r7, r0
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint8_t strobe;
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x00);
 8015032:	2200      	movs	r2, #0
 8015034:	2183      	movs	r1, #131	; 0x83
 8015036:	f001 f997 	bl	8016368 <VL53L0X_WrByte>
 801503a:	9001      	str	r0, [sp, #4]

	/* polling
	 * use timeout to avoid deadlock*/
	if (Status == VL53L0X_ERROR_NONE) {
 801503c:	2800      	cmp	r0, #0
 801503e:	d119      	bne.n	8015074 <VL53L0X_device_read_strobe+0x48>
		LoopNb = 0;
 8015040:	2600      	movs	r6, #0
		do {
			Status = VL53L0X_RdByte(Dev, 0x83, &strobe);
 8015042:	ab02      	add	r3, sp, #8
 8015044:	1ddd      	adds	r5, r3, #7
			if ((strobe != 0x00) || Status != VL53L0X_ERROR_NONE)
					break;

			LoopNb = LoopNb + 1;
		} while (LoopNb < VL53L0X_DEFAULT_MAX_LOOP);
 8015046:	24fa      	movs	r4, #250	; 0xfa
 8015048:	00e4      	lsls	r4, r4, #3
			Status = VL53L0X_RdByte(Dev, 0x83, &strobe);
 801504a:	002a      	movs	r2, r5
 801504c:	2183      	movs	r1, #131	; 0x83
 801504e:	0038      	movs	r0, r7
 8015050:	f001 f9d4 	bl	80163fc <VL53L0X_RdByte>
 8015054:	9001      	str	r0, [sp, #4]
			if ((strobe != 0x00) || Status != VL53L0X_ERROR_NONE)
 8015056:	782b      	ldrb	r3, [r5, #0]
 8015058:	4303      	orrs	r3, r0
 801505a:	b2db      	uxtb	r3, r3
 801505c:	2b00      	cmp	r3, #0
 801505e:	d105      	bne.n	801506c <VL53L0X_device_read_strobe+0x40>
			LoopNb = LoopNb + 1;
 8015060:	3601      	adds	r6, #1
		} while (LoopNb < VL53L0X_DEFAULT_MAX_LOOP);
 8015062:	42a6      	cmp	r6, r4
 8015064:	d1f1      	bne.n	801504a <VL53L0X_device_read_strobe+0x1e>

		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
			Status = VL53L0X_ERROR_TIME_OUT;
 8015066:	3b07      	subs	r3, #7
 8015068:	9301      	str	r3, [sp, #4]
 801506a:	e003      	b.n	8015074 <VL53L0X_device_read_strobe+0x48>
		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 801506c:	23fa      	movs	r3, #250	; 0xfa
 801506e:	00db      	lsls	r3, r3, #3
 8015070:	429e      	cmp	r6, r3
 8015072:	d209      	bcs.n	8015088 <VL53L0X_device_read_strobe+0x5c>

	}

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x01);
 8015074:	2201      	movs	r2, #1
 8015076:	2183      	movs	r1, #131	; 0x83
 8015078:	0038      	movs	r0, r7
 801507a:	f001 f975 	bl	8016368 <VL53L0X_WrByte>
 801507e:	9b01      	ldr	r3, [sp, #4]
 8015080:	4303      	orrs	r3, r0

	LOG_FUNCTION_END(Status);
	return Status;
 8015082:	b258      	sxtb	r0, r3

}
 8015084:	b005      	add	sp, #20
 8015086:	bdf0      	pop	{r4, r5, r6, r7, pc}
			Status = VL53L0X_ERROR_TIME_OUT;
 8015088:	2307      	movs	r3, #7
 801508a:	425b      	negs	r3, r3
 801508c:	9301      	str	r3, [sp, #4]
 801508e:	e7f1      	b.n	8015074 <VL53L0X_device_read_strobe+0x48>

08015090 <VL53L0X_get_info_from_device>:

VL53L0X_Error VL53L0X_get_info_from_device(VL53L0X_DEV Dev, uint8_t option)
{
 8015090:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015092:	46de      	mov	lr, fp
 8015094:	4657      	mov	r7, sl
 8015096:	464e      	mov	r6, r9
 8015098:	4645      	mov	r5, r8
 801509a:	b5e0      	push	{r5, r6, r7, lr}
 801509c:	b091      	sub	sp, #68	; 0x44
 801509e:	0005      	movs	r5, r0
 80150a0:	000f      	movs	r7, r1
	uint32_t TmpDWord;
	uint8_t ModuleId;
	uint8_t Revision;
	uint8_t ReferenceSpadCount = 0;
	uint8_t ReferenceSpadType = 0;
	uint32_t PartUIDUpper = 0;
 80150a2:	2300      	movs	r3, #0
 80150a4:	930c      	str	r3, [sp, #48]	; 0x30
	uint32_t PartUIDLower = 0;
 80150a6:	930b      	str	r3, [sp, #44]	; 0x2c
	int i;


	LOG_FUNCTION_START("");

	ReadDataFromDeviceDone = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 80150a8:	33f0      	adds	r3, #240	; 0xf0
 80150aa:	5cc3      	ldrb	r3, [r0, r3]
 80150ac:	4699      	mov	r9, r3
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80150ae:	2400      	movs	r4, #0
			ReadDataFromDeviceDone);

	/* This access is done only once after that a GetDeviceInfo or
	 * datainit is done*/
	if (ReadDataFromDeviceDone != 7) {
 80150b0:	2b07      	cmp	r3, #7
 80150b2:	d107      	bne.n	80150c4 <VL53L0X_get_info_from_device+0x34>
				byte);
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
 80150b4:	0020      	movs	r0, r4
 80150b6:	b011      	add	sp, #68	; 0x44
 80150b8:	bcf0      	pop	{r4, r5, r6, r7}
 80150ba:	46bb      	mov	fp, r7
 80150bc:	46b2      	mov	sl, r6
 80150be:	46a9      	mov	r9, r5
 80150c0:	46a0      	mov	r8, r4
 80150c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 80150c4:	2201      	movs	r2, #1
 80150c6:	2180      	movs	r1, #128	; 0x80
 80150c8:	f001 f94e 	bl	8016368 <VL53L0X_WrByte>
 80150cc:	0004      	movs	r4, r0
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80150ce:	2201      	movs	r2, #1
 80150d0:	21ff      	movs	r1, #255	; 0xff
 80150d2:	0028      	movs	r0, r5
 80150d4:	f001 f948 	bl	8016368 <VL53L0X_WrByte>
 80150d8:	4304      	orrs	r4, r0
 80150da:	b264      	sxtb	r4, r4
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 80150dc:	2200      	movs	r2, #0
 80150de:	2100      	movs	r1, #0
 80150e0:	0028      	movs	r0, r5
 80150e2:	f001 f941 	bl	8016368 <VL53L0X_WrByte>
 80150e6:	4304      	orrs	r4, r0
 80150e8:	b264      	sxtb	r4, r4
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 80150ea:	2206      	movs	r2, #6
 80150ec:	21ff      	movs	r1, #255	; 0xff
 80150ee:	0028      	movs	r0, r5
 80150f0:	f001 f93a 	bl	8016368 <VL53L0X_WrByte>
 80150f4:	4304      	orrs	r4, r0
 80150f6:	b264      	sxtb	r4, r4
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 80150f8:	262f      	movs	r6, #47	; 0x2f
 80150fa:	ab04      	add	r3, sp, #16
 80150fc:	469c      	mov	ip, r3
 80150fe:	4466      	add	r6, ip
 8015100:	0032      	movs	r2, r6
 8015102:	2183      	movs	r1, #131	; 0x83
 8015104:	0028      	movs	r0, r5
 8015106:	f001 f979 	bl	80163fc <VL53L0X_RdByte>
 801510a:	4304      	orrs	r4, r0
 801510c:	b264      	sxtb	r4, r4
		Status |= VL53L0X_WrByte(Dev, 0x83, byte|4);
 801510e:	7832      	ldrb	r2, [r6, #0]
 8015110:	2304      	movs	r3, #4
 8015112:	431a      	orrs	r2, r3
 8015114:	2183      	movs	r1, #131	; 0x83
 8015116:	0028      	movs	r0, r5
 8015118:	f001 f926 	bl	8016368 <VL53L0X_WrByte>
 801511c:	4304      	orrs	r4, r0
 801511e:	b264      	sxtb	r4, r4
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x07);
 8015120:	2207      	movs	r2, #7
 8015122:	21ff      	movs	r1, #255	; 0xff
 8015124:	0028      	movs	r0, r5
 8015126:	f001 f91f 	bl	8016368 <VL53L0X_WrByte>
 801512a:	4304      	orrs	r4, r0
 801512c:	b264      	sxtb	r4, r4
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x01);
 801512e:	2201      	movs	r2, #1
 8015130:	2181      	movs	r1, #129	; 0x81
 8015132:	0028      	movs	r0, r5
 8015134:	f001 f918 	bl	8016368 <VL53L0X_WrByte>
 8015138:	4304      	orrs	r4, r0
 801513a:	b264      	sxtb	r4, r4
		Status |= VL53L0X_PollingDelay(Dev);
 801513c:	0028      	movs	r0, r5
 801513e:	f001 f984 	bl	801644a <VL53L0X_PollingDelay>
 8015142:	4304      	orrs	r4, r0
 8015144:	b264      	sxtb	r4, r4
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8015146:	2201      	movs	r2, #1
 8015148:	2180      	movs	r1, #128	; 0x80
 801514a:	0028      	movs	r0, r5
 801514c:	f001 f90c 	bl	8016368 <VL53L0X_WrByte>
 8015150:	4304      	orrs	r4, r0
 8015152:	b264      	sxtb	r4, r4
		if (((option & 1) == 1) &&
 8015154:	2301      	movs	r3, #1
 8015156:	001a      	movs	r2, r3
 8015158:	403a      	ands	r2, r7
 801515a:	9200      	str	r2, [sp, #0]
 801515c:	423b      	tst	r3, r7
 801515e:	d056      	beq.n	801520e <VL53L0X_get_info_from_device+0x17e>
 8015160:	464b      	mov	r3, r9
 8015162:	07db      	lsls	r3, r3, #31
 8015164:	d503      	bpl.n	801516e <VL53L0X_get_info_from_device+0xde>
	uint8_t ReferenceSpadType = 0;
 8015166:	2300      	movs	r3, #0
 8015168:	9302      	str	r3, [sp, #8]
	uint8_t ReferenceSpadCount = 0;
 801516a:	9301      	str	r3, [sp, #4]
 801516c:	e052      	b.n	8015214 <VL53L0X_get_info_from_device+0x184>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x6b);
 801516e:	226b      	movs	r2, #107	; 0x6b
 8015170:	2194      	movs	r1, #148	; 0x94
 8015172:	0028      	movs	r0, r5
 8015174:	f001 f8f8 	bl	8016368 <VL53L0X_WrByte>
 8015178:	0006      	movs	r6, r0
			Status |= VL53L0X_device_read_strobe(Dev);
 801517a:	0028      	movs	r0, r5
 801517c:	f7ff ff56 	bl	801502c <VL53L0X_device_read_strobe>
 8015180:	4306      	orrs	r6, r0
 8015182:	4334      	orrs	r4, r6
 8015184:	b264      	sxtb	r4, r4
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8015186:	aa0e      	add	r2, sp, #56	; 0x38
 8015188:	2190      	movs	r1, #144	; 0x90
 801518a:	0028      	movs	r0, r5
 801518c:	f001 f950 	bl	8016430 <VL53L0X_RdDWord>
 8015190:	4304      	orrs	r4, r0
 8015192:	b264      	sxtb	r4, r4
			ReferenceSpadCount = (uint8_t)((TmpDWord >> 8) & 0x07f);
 8015194:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015196:	045a      	lsls	r2, r3, #17
 8015198:	0e52      	lsrs	r2, r2, #25
 801519a:	9201      	str	r2, [sp, #4]
			ReferenceSpadType  = (uint8_t)((TmpDWord >> 15) & 0x01);
 801519c:	041b      	lsls	r3, r3, #16
 801519e:	0fdb      	lsrs	r3, r3, #31
 80151a0:	9302      	str	r3, [sp, #8]
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
 80151a2:	2224      	movs	r2, #36	; 0x24
 80151a4:	2194      	movs	r1, #148	; 0x94
 80151a6:	0028      	movs	r0, r5
 80151a8:	f001 f8de 	bl	8016368 <VL53L0X_WrByte>
 80151ac:	4304      	orrs	r4, r0
 80151ae:	b264      	sxtb	r4, r4
			Status |= VL53L0X_device_read_strobe(Dev);
 80151b0:	0028      	movs	r0, r5
 80151b2:	f7ff ff3b 	bl	801502c <VL53L0X_device_read_strobe>
 80151b6:	4304      	orrs	r4, r0
 80151b8:	b264      	sxtb	r4, r4
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80151ba:	aa0e      	add	r2, sp, #56	; 0x38
 80151bc:	2190      	movs	r1, #144	; 0x90
 80151be:	0028      	movs	r0, r5
 80151c0:	f001 f936 	bl	8016430 <VL53L0X_RdDWord>
 80151c4:	4304      	orrs	r4, r0
 80151c6:	b264      	sxtb	r4, r4
			NvmRefGoodSpadMap[0] = (uint8_t)((TmpDWord >> 24)
 80151c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80151ca:	0e1a      	lsrs	r2, r3, #24
 80151cc:	a904      	add	r1, sp, #16
 80151ce:	700a      	strb	r2, [r1, #0]
			NvmRefGoodSpadMap[1] = (uint8_t)((TmpDWord >> 16)
 80151d0:	0c1a      	lsrs	r2, r3, #16
 80151d2:	704a      	strb	r2, [r1, #1]
			NvmRefGoodSpadMap[2] = (uint8_t)((TmpDWord >> 8)
 80151d4:	0a1a      	lsrs	r2, r3, #8
 80151d6:	708a      	strb	r2, [r1, #2]
			NvmRefGoodSpadMap[3] = (uint8_t)(TmpDWord & 0xff);
 80151d8:	70cb      	strb	r3, [r1, #3]
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
 80151da:	2225      	movs	r2, #37	; 0x25
 80151dc:	2194      	movs	r1, #148	; 0x94
 80151de:	0028      	movs	r0, r5
 80151e0:	f001 f8c2 	bl	8016368 <VL53L0X_WrByte>
 80151e4:	4304      	orrs	r4, r0
 80151e6:	b264      	sxtb	r4, r4
			Status |= VL53L0X_device_read_strobe(Dev);
 80151e8:	0028      	movs	r0, r5
 80151ea:	f7ff ff1f 	bl	801502c <VL53L0X_device_read_strobe>
 80151ee:	4304      	orrs	r4, r0
 80151f0:	b264      	sxtb	r4, r4
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80151f2:	aa0e      	add	r2, sp, #56	; 0x38
 80151f4:	2190      	movs	r1, #144	; 0x90
 80151f6:	0028      	movs	r0, r5
 80151f8:	f001 f91a 	bl	8016430 <VL53L0X_RdDWord>
 80151fc:	4304      	orrs	r4, r0
 80151fe:	b264      	sxtb	r4, r4
			NvmRefGoodSpadMap[4] = (uint8_t)((TmpDWord >> 24)
 8015200:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015202:	0e1a      	lsrs	r2, r3, #24
 8015204:	a904      	add	r1, sp, #16
 8015206:	710a      	strb	r2, [r1, #4]
			NvmRefGoodSpadMap[5] = (uint8_t)((TmpDWord >> 16)
 8015208:	0c1b      	lsrs	r3, r3, #16
 801520a:	714b      	strb	r3, [r1, #5]
 801520c:	e002      	b.n	8015214 <VL53L0X_get_info_from_device+0x184>
	uint8_t ReferenceSpadType = 0;
 801520e:	9b00      	ldr	r3, [sp, #0]
 8015210:	9302      	str	r3, [sp, #8]
	uint8_t ReferenceSpadCount = 0;
 8015212:	9301      	str	r3, [sp, #4]
		if (((option & 2) == 2) &&
 8015214:	2302      	movs	r3, #2
 8015216:	001a      	movs	r2, r3
 8015218:	403a      	ands	r2, r7
 801521a:	4692      	mov	sl, r2
 801521c:	423b      	tst	r3, r7
 801521e:	d002      	beq.n	8015226 <VL53L0X_get_info_from_device+0x196>
 8015220:	464b      	mov	r3, r9
 8015222:	079b      	lsls	r3, r3, #30
 8015224:	d50e      	bpl.n	8015244 <VL53L0X_get_info_from_device+0x1b4>
		if (((option & 4) == 4) &&
 8015226:	2304      	movs	r3, #4
 8015228:	001a      	movs	r2, r3
 801522a:	403a      	ands	r2, r7
 801522c:	4690      	mov	r8, r2
 801522e:	423b      	tst	r3, r7
 8015230:	d100      	bne.n	8015234 <VL53L0X_get_info_from_device+0x1a4>
 8015232:	e161      	b.n	80154f8 <VL53L0X_get_info_from_device+0x468>
 8015234:	464b      	mov	r3, r9
 8015236:	075b      	lsls	r3, r3, #29
 8015238:	d400      	bmi.n	801523c <VL53L0X_get_info_from_device+0x1ac>
 801523a:	e0dc      	b.n	80153f6 <VL53L0X_get_info_from_device+0x366>
	uint32_t SignalRateMeasFixed1104_400_mm = 0;
 801523c:	2300      	movs	r3, #0
 801523e:	469b      	mov	fp, r3
	uint32_t DistMeasFixed1104_400_mm = 0;
 8015240:	9303      	str	r3, [sp, #12]
 8015242:	e15c      	b.n	80154fe <VL53L0X_get_info_from_device+0x46e>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x02);
 8015244:	2202      	movs	r2, #2
 8015246:	2194      	movs	r1, #148	; 0x94
 8015248:	0028      	movs	r0, r5
 801524a:	f001 f88d 	bl	8016368 <VL53L0X_WrByte>
 801524e:	0006      	movs	r6, r0
			Status |= VL53L0X_device_read_strobe(Dev);
 8015250:	0028      	movs	r0, r5
 8015252:	f7ff feeb 	bl	801502c <VL53L0X_device_read_strobe>
 8015256:	4306      	orrs	r6, r0
 8015258:	4334      	orrs	r4, r6
 801525a:	b264      	sxtb	r4, r4
			Status |= VL53L0X_RdByte(Dev, 0x90, &ModuleId);
 801525c:	2227      	movs	r2, #39	; 0x27
 801525e:	ab04      	add	r3, sp, #16
 8015260:	469c      	mov	ip, r3
 8015262:	4462      	add	r2, ip
 8015264:	2190      	movs	r1, #144	; 0x90
 8015266:	0028      	movs	r0, r5
 8015268:	f001 f8c8 	bl	80163fc <VL53L0X_RdByte>
 801526c:	4304      	orrs	r4, r0
 801526e:	b264      	sxtb	r4, r4
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 8015270:	227b      	movs	r2, #123	; 0x7b
 8015272:	2194      	movs	r1, #148	; 0x94
 8015274:	0028      	movs	r0, r5
 8015276:	f001 f877 	bl	8016368 <VL53L0X_WrByte>
 801527a:	4304      	orrs	r4, r0
 801527c:	b264      	sxtb	r4, r4
			Status |= VL53L0X_device_read_strobe(Dev);
 801527e:	0028      	movs	r0, r5
 8015280:	f7ff fed4 	bl	801502c <VL53L0X_device_read_strobe>
 8015284:	4304      	orrs	r4, r0
 8015286:	b264      	sxtb	r4, r4
			Status |= VL53L0X_RdByte(Dev, 0x90, &Revision);
 8015288:	2226      	movs	r2, #38	; 0x26
 801528a:	ab04      	add	r3, sp, #16
 801528c:	469c      	mov	ip, r3
 801528e:	4462      	add	r2, ip
 8015290:	2190      	movs	r1, #144	; 0x90
 8015292:	0028      	movs	r0, r5
 8015294:	f001 f8b2 	bl	80163fc <VL53L0X_RdByte>
 8015298:	4304      	orrs	r4, r0
 801529a:	b264      	sxtb	r4, r4
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
 801529c:	2277      	movs	r2, #119	; 0x77
 801529e:	2194      	movs	r1, #148	; 0x94
 80152a0:	0028      	movs	r0, r5
 80152a2:	f001 f861 	bl	8016368 <VL53L0X_WrByte>
 80152a6:	4304      	orrs	r4, r0
 80152a8:	b264      	sxtb	r4, r4
			Status |= VL53L0X_device_read_strobe(Dev);
 80152aa:	0028      	movs	r0, r5
 80152ac:	f7ff febe 	bl	801502c <VL53L0X_device_read_strobe>
 80152b0:	4304      	orrs	r4, r0
 80152b2:	b264      	sxtb	r4, r4
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80152b4:	aa0e      	add	r2, sp, #56	; 0x38
 80152b6:	2190      	movs	r1, #144	; 0x90
 80152b8:	0028      	movs	r0, r5
 80152ba:	f001 f8b9 	bl	8016430 <VL53L0X_RdDWord>
 80152be:	4304      	orrs	r4, r0
 80152c0:	b264      	sxtb	r4, r4
			ProductId[0] = (char)((TmpDWord >> 25) & 0x07f);
 80152c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80152c4:	ae06      	add	r6, sp, #24
 80152c6:	0e5a      	lsrs	r2, r3, #25
 80152c8:	7032      	strb	r2, [r6, #0]
			ProductId[1] = (char)((TmpDWord >> 18) & 0x07f);
 80152ca:	0c9a      	lsrs	r2, r3, #18
 80152cc:	217f      	movs	r1, #127	; 0x7f
 80152ce:	468b      	mov	fp, r1
 80152d0:	400a      	ands	r2, r1
 80152d2:	7072      	strb	r2, [r6, #1]
			ProductId[2] = (char)((TmpDWord >> 11) & 0x07f);
 80152d4:	0ada      	lsrs	r2, r3, #11
 80152d6:	400a      	ands	r2, r1
 80152d8:	70b2      	strb	r2, [r6, #2]
			ProductId[3] = (char)((TmpDWord >> 4) & 0x07f);
 80152da:	091a      	lsrs	r2, r3, #4
 80152dc:	400a      	ands	r2, r1
 80152de:	70f2      	strb	r2, [r6, #3]
			byte = (uint8_t)((TmpDWord & 0x00f) << 3);
 80152e0:	00db      	lsls	r3, r3, #3
 80152e2:	2278      	movs	r2, #120	; 0x78
 80152e4:	4013      	ands	r3, r2
 80152e6:	aa04      	add	r2, sp, #16
 80152e8:	202f      	movs	r0, #47	; 0x2f
 80152ea:	1812      	adds	r2, r2, r0
 80152ec:	7013      	strb	r3, [r2, #0]
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 80152ee:	2278      	movs	r2, #120	; 0x78
 80152f0:	3115      	adds	r1, #21
 80152f2:	0028      	movs	r0, r5
 80152f4:	f001 f838 	bl	8016368 <VL53L0X_WrByte>
 80152f8:	4304      	orrs	r4, r0
 80152fa:	b264      	sxtb	r4, r4
			Status |= VL53L0X_device_read_strobe(Dev);
 80152fc:	0028      	movs	r0, r5
 80152fe:	f7ff fe95 	bl	801502c <VL53L0X_device_read_strobe>
 8015302:	4304      	orrs	r4, r0
 8015304:	b264      	sxtb	r4, r4
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8015306:	aa0e      	add	r2, sp, #56	; 0x38
 8015308:	2190      	movs	r1, #144	; 0x90
 801530a:	0028      	movs	r0, r5
 801530c:	f001 f890 	bl	8016430 <VL53L0X_RdDWord>
 8015310:	4304      	orrs	r4, r0
 8015312:	b264      	sxtb	r4, r4
					((TmpDWord >> 29) & 0x07f));
 8015314:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015316:	0f5a      	lsrs	r2, r3, #29
			ProductId[4] = (char)(byte +
 8015318:	a904      	add	r1, sp, #16
 801531a:	202f      	movs	r0, #47	; 0x2f
 801531c:	1809      	adds	r1, r1, r0
 801531e:	7809      	ldrb	r1, [r1, #0]
 8015320:	1852      	adds	r2, r2, r1
 8015322:	7132      	strb	r2, [r6, #4]
			ProductId[5] = (char)((TmpDWord >> 22) & 0x07f);
 8015324:	0d9a      	lsrs	r2, r3, #22
 8015326:	4659      	mov	r1, fp
 8015328:	400a      	ands	r2, r1
 801532a:	7172      	strb	r2, [r6, #5]
			ProductId[6] = (char)((TmpDWord >> 15) & 0x07f);
 801532c:	0bda      	lsrs	r2, r3, #15
 801532e:	400a      	ands	r2, r1
 8015330:	71b2      	strb	r2, [r6, #6]
			ProductId[7] = (char)((TmpDWord >> 8) & 0x07f);
 8015332:	0a1a      	lsrs	r2, r3, #8
 8015334:	400a      	ands	r2, r1
 8015336:	71f2      	strb	r2, [r6, #7]
			ProductId[8] = (char)((TmpDWord >> 1) & 0x07f);
 8015338:	085a      	lsrs	r2, r3, #1
 801533a:	400a      	ands	r2, r1
 801533c:	7232      	strb	r2, [r6, #8]
			byte = (uint8_t)((TmpDWord & 0x001) << 6);
 801533e:	019b      	lsls	r3, r3, #6
 8015340:	2240      	movs	r2, #64	; 0x40
 8015342:	4013      	ands	r3, r2
 8015344:	aa04      	add	r2, sp, #16
 8015346:	1812      	adds	r2, r2, r0
 8015348:	7013      	strb	r3, [r2, #0]
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 801534a:	2279      	movs	r2, #121	; 0x79
 801534c:	3115      	adds	r1, #21
 801534e:	0028      	movs	r0, r5
 8015350:	f001 f80a 	bl	8016368 <VL53L0X_WrByte>
 8015354:	4304      	orrs	r4, r0
 8015356:	b264      	sxtb	r4, r4
			Status |= VL53L0X_device_read_strobe(Dev);
 8015358:	0028      	movs	r0, r5
 801535a:	f7ff fe67 	bl	801502c <VL53L0X_device_read_strobe>
 801535e:	4304      	orrs	r4, r0
 8015360:	b264      	sxtb	r4, r4
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8015362:	aa0e      	add	r2, sp, #56	; 0x38
 8015364:	2190      	movs	r1, #144	; 0x90
 8015366:	0028      	movs	r0, r5
 8015368:	f001 f862 	bl	8016430 <VL53L0X_RdDWord>
 801536c:	4304      	orrs	r4, r0
 801536e:	b264      	sxtb	r4, r4
					((TmpDWord >> 26) & 0x07f));
 8015370:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015372:	0e9a      	lsrs	r2, r3, #26
			ProductId[9] = (char)(byte +
 8015374:	a904      	add	r1, sp, #16
 8015376:	202f      	movs	r0, #47	; 0x2f
 8015378:	1809      	adds	r1, r1, r0
 801537a:	7809      	ldrb	r1, [r1, #0]
 801537c:	1852      	adds	r2, r2, r1
 801537e:	7272      	strb	r2, [r6, #9]
			ProductId[10] = (char)((TmpDWord >> 19) & 0x07f);
 8015380:	0cda      	lsrs	r2, r3, #19
 8015382:	4659      	mov	r1, fp
 8015384:	400a      	ands	r2, r1
 8015386:	72b2      	strb	r2, [r6, #10]
			ProductId[11] = (char)((TmpDWord >> 12) & 0x07f);
 8015388:	0b1a      	lsrs	r2, r3, #12
 801538a:	400a      	ands	r2, r1
 801538c:	72f2      	strb	r2, [r6, #11]
			ProductId[12] = (char)((TmpDWord >> 5) & 0x07f);
 801538e:	095a      	lsrs	r2, r3, #5
 8015390:	400a      	ands	r2, r1
 8015392:	7332      	strb	r2, [r6, #12]
			byte = (uint8_t)((TmpDWord & 0x01f) << 2);
 8015394:	009b      	lsls	r3, r3, #2
 8015396:	227c      	movs	r2, #124	; 0x7c
 8015398:	4013      	ands	r3, r2
 801539a:	aa04      	add	r2, sp, #16
 801539c:	1812      	adds	r2, r2, r0
 801539e:	7013      	strb	r3, [r2, #0]
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 80153a0:	227a      	movs	r2, #122	; 0x7a
 80153a2:	3115      	adds	r1, #21
 80153a4:	0028      	movs	r0, r5
 80153a6:	f000 ffdf 	bl	8016368 <VL53L0X_WrByte>
 80153aa:	4304      	orrs	r4, r0
 80153ac:	b264      	sxtb	r4, r4
			Status |= VL53L0X_device_read_strobe(Dev);
 80153ae:	0028      	movs	r0, r5
 80153b0:	f7ff fe3c 	bl	801502c <VL53L0X_device_read_strobe>
 80153b4:	4304      	orrs	r4, r0
 80153b6:	b264      	sxtb	r4, r4
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80153b8:	aa0e      	add	r2, sp, #56	; 0x38
 80153ba:	2190      	movs	r1, #144	; 0x90
 80153bc:	0028      	movs	r0, r5
 80153be:	f001 f837 	bl	8016430 <VL53L0X_RdDWord>
 80153c2:	4304      	orrs	r4, r0
 80153c4:	b264      	sxtb	r4, r4
					((TmpDWord >> 30) & 0x07f));
 80153c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80153c8:	0f9a      	lsrs	r2, r3, #30
			ProductId[13] = (char)(byte +
 80153ca:	a904      	add	r1, sp, #16
 80153cc:	202f      	movs	r0, #47	; 0x2f
 80153ce:	1809      	adds	r1, r1, r0
 80153d0:	7809      	ldrb	r1, [r1, #0]
 80153d2:	1852      	adds	r2, r2, r1
 80153d4:	7372      	strb	r2, [r6, #13]
			ProductId[14] = (char)((TmpDWord >> 23) & 0x07f);
 80153d6:	0dda      	lsrs	r2, r3, #23
 80153d8:	4659      	mov	r1, fp
 80153da:	400a      	ands	r2, r1
 80153dc:	73b2      	strb	r2, [r6, #14]
			ProductId[15] = (char)((TmpDWord >> 16) & 0x07f);
 80153de:	0c1a      	lsrs	r2, r3, #16
 80153e0:	400a      	ands	r2, r1
 80153e2:	73f2      	strb	r2, [r6, #15]
			ProductId[16] = (char)((TmpDWord >> 9) & 0x07f);
 80153e4:	0a5a      	lsrs	r2, r3, #9
 80153e6:	400a      	ands	r2, r1
 80153e8:	7432      	strb	r2, [r6, #16]
			ProductId[17] = (char)((TmpDWord >> 2) & 0x07f);
 80153ea:	089b      	lsrs	r3, r3, #2
 80153ec:	400b      	ands	r3, r1
 80153ee:	7473      	strb	r3, [r6, #17]
			ProductId[18] = '\0';
 80153f0:	2300      	movs	r3, #0
 80153f2:	74b3      	strb	r3, [r6, #18]
 80153f4:	e717      	b.n	8015226 <VL53L0X_get_info_from_device+0x196>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 80153f6:	227b      	movs	r2, #123	; 0x7b
 80153f8:	2194      	movs	r1, #148	; 0x94
 80153fa:	0028      	movs	r0, r5
 80153fc:	f000 ffb4 	bl	8016368 <VL53L0X_WrByte>
 8015400:	0006      	movs	r6, r0
			Status |= VL53L0X_device_read_strobe(Dev);
 8015402:	0028      	movs	r0, r5
 8015404:	f7ff fe12 	bl	801502c <VL53L0X_device_read_strobe>
 8015408:	4306      	orrs	r6, r0
 801540a:	4334      	orrs	r4, r6
 801540c:	b264      	sxtb	r4, r4
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDUpper);
 801540e:	aa0c      	add	r2, sp, #48	; 0x30
 8015410:	2190      	movs	r1, #144	; 0x90
 8015412:	0028      	movs	r0, r5
 8015414:	f001 f80c 	bl	8016430 <VL53L0X_RdDWord>
 8015418:	4304      	orrs	r4, r0
 801541a:	b264      	sxtb	r4, r4
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7C);
 801541c:	227c      	movs	r2, #124	; 0x7c
 801541e:	2194      	movs	r1, #148	; 0x94
 8015420:	0028      	movs	r0, r5
 8015422:	f000 ffa1 	bl	8016368 <VL53L0X_WrByte>
 8015426:	4304      	orrs	r4, r0
 8015428:	b264      	sxtb	r4, r4
			Status |= VL53L0X_device_read_strobe(Dev);
 801542a:	0028      	movs	r0, r5
 801542c:	f7ff fdfe 	bl	801502c <VL53L0X_device_read_strobe>
 8015430:	4304      	orrs	r4, r0
 8015432:	b264      	sxtb	r4, r4
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDLower);
 8015434:	aa0b      	add	r2, sp, #44	; 0x2c
 8015436:	2190      	movs	r1, #144	; 0x90
 8015438:	0028      	movs	r0, r5
 801543a:	f000 fff9 	bl	8016430 <VL53L0X_RdDWord>
 801543e:	4304      	orrs	r4, r0
 8015440:	b264      	sxtb	r4, r4
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x73);
 8015442:	2273      	movs	r2, #115	; 0x73
 8015444:	2194      	movs	r1, #148	; 0x94
 8015446:	0028      	movs	r0, r5
 8015448:	f000 ff8e 	bl	8016368 <VL53L0X_WrByte>
 801544c:	4304      	orrs	r4, r0
 801544e:	b264      	sxtb	r4, r4
			Status |= VL53L0X_device_read_strobe(Dev);
 8015450:	0028      	movs	r0, r5
 8015452:	f7ff fdeb 	bl	801502c <VL53L0X_device_read_strobe>
 8015456:	4304      	orrs	r4, r0
 8015458:	b264      	sxtb	r4, r4
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 801545a:	aa0e      	add	r2, sp, #56	; 0x38
 801545c:	2190      	movs	r1, #144	; 0x90
 801545e:	0028      	movs	r0, r5
 8015460:	f000 ffe6 	bl	8016430 <VL53L0X_RdDWord>
 8015464:	4304      	orrs	r4, r0
 8015466:	b264      	sxtb	r4, r4
			SignalRateMeasFixed1104_400_mm = (TmpDWord &
 8015468:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801546a:	061e      	lsls	r6, r3, #24
 801546c:	0c36      	lsrs	r6, r6, #16
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 801546e:	2274      	movs	r2, #116	; 0x74
 8015470:	2194      	movs	r1, #148	; 0x94
 8015472:	0028      	movs	r0, r5
 8015474:	f000 ff78 	bl	8016368 <VL53L0X_WrByte>
 8015478:	4304      	orrs	r4, r0
 801547a:	b264      	sxtb	r4, r4
			Status |= VL53L0X_device_read_strobe(Dev);
 801547c:	0028      	movs	r0, r5
 801547e:	f7ff fdd5 	bl	801502c <VL53L0X_device_read_strobe>
 8015482:	4304      	orrs	r4, r0
 8015484:	b264      	sxtb	r4, r4
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8015486:	aa0e      	add	r2, sp, #56	; 0x38
 8015488:	2190      	movs	r1, #144	; 0x90
 801548a:	0028      	movs	r0, r5
 801548c:	f000 ffd0 	bl	8016430 <VL53L0X_RdDWord>
 8015490:	4304      	orrs	r4, r0
 8015492:	b264      	sxtb	r4, r4
				0xff000000) >> 24);
 8015494:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015496:	0e1b      	lsrs	r3, r3, #24
			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
 8015498:	4333      	orrs	r3, r6
 801549a:	469b      	mov	fp, r3
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 801549c:	2275      	movs	r2, #117	; 0x75
 801549e:	2194      	movs	r1, #148	; 0x94
 80154a0:	0028      	movs	r0, r5
 80154a2:	f000 ff61 	bl	8016368 <VL53L0X_WrByte>
 80154a6:	4304      	orrs	r4, r0
 80154a8:	b264      	sxtb	r4, r4
			Status |= VL53L0X_device_read_strobe(Dev);
 80154aa:	0028      	movs	r0, r5
 80154ac:	f7ff fdbe 	bl	801502c <VL53L0X_device_read_strobe>
 80154b0:	4304      	orrs	r4, r0
 80154b2:	b264      	sxtb	r4, r4
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80154b4:	aa0e      	add	r2, sp, #56	; 0x38
 80154b6:	2190      	movs	r1, #144	; 0x90
 80154b8:	0028      	movs	r0, r5
 80154ba:	f000 ffb9 	bl	8016430 <VL53L0X_RdDWord>
 80154be:	4304      	orrs	r4, r0
 80154c0:	b264      	sxtb	r4, r4
			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
 80154c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80154c4:	061e      	lsls	r6, r3, #24
 80154c6:	0c36      	lsrs	r6, r6, #16
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 80154c8:	2276      	movs	r2, #118	; 0x76
 80154ca:	2194      	movs	r1, #148	; 0x94
 80154cc:	0028      	movs	r0, r5
 80154ce:	f000 ff4b 	bl	8016368 <VL53L0X_WrByte>
 80154d2:	4304      	orrs	r4, r0
 80154d4:	b264      	sxtb	r4, r4
			Status |= VL53L0X_device_read_strobe(Dev);
 80154d6:	0028      	movs	r0, r5
 80154d8:	f7ff fda8 	bl	801502c <VL53L0X_device_read_strobe>
 80154dc:	4304      	orrs	r4, r0
 80154de:	b264      	sxtb	r4, r4
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80154e0:	aa0e      	add	r2, sp, #56	; 0x38
 80154e2:	2190      	movs	r1, #144	; 0x90
 80154e4:	0028      	movs	r0, r5
 80154e6:	f000 ffa3 	bl	8016430 <VL53L0X_RdDWord>
 80154ea:	4304      	orrs	r4, r0
 80154ec:	b264      	sxtb	r4, r4
							>> 24);
 80154ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80154f0:	0e1b      	lsrs	r3, r3, #24
			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
 80154f2:	4333      	orrs	r3, r6
 80154f4:	9303      	str	r3, [sp, #12]
 80154f6:	e002      	b.n	80154fe <VL53L0X_get_info_from_device+0x46e>
	uint32_t SignalRateMeasFixed1104_400_mm = 0;
 80154f8:	2300      	movs	r3, #0
 80154fa:	469b      	mov	fp, r3
	uint32_t DistMeasFixed1104_400_mm = 0;
 80154fc:	9303      	str	r3, [sp, #12]
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x00);
 80154fe:	2200      	movs	r2, #0
 8015500:	2181      	movs	r1, #129	; 0x81
 8015502:	0028      	movs	r0, r5
 8015504:	f000 ff30 	bl	8016368 <VL53L0X_WrByte>
 8015508:	4304      	orrs	r4, r0
 801550a:	b264      	sxtb	r4, r4
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 801550c:	2206      	movs	r2, #6
 801550e:	21ff      	movs	r1, #255	; 0xff
 8015510:	0028      	movs	r0, r5
 8015512:	f000 ff29 	bl	8016368 <VL53L0X_WrByte>
 8015516:	4304      	orrs	r4, r0
 8015518:	b264      	sxtb	r4, r4
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 801551a:	262f      	movs	r6, #47	; 0x2f
 801551c:	ab04      	add	r3, sp, #16
 801551e:	469c      	mov	ip, r3
 8015520:	4466      	add	r6, ip
 8015522:	0032      	movs	r2, r6
 8015524:	2183      	movs	r1, #131	; 0x83
 8015526:	0028      	movs	r0, r5
 8015528:	f000 ff68 	bl	80163fc <VL53L0X_RdByte>
 801552c:	4304      	orrs	r4, r0
 801552e:	b264      	sxtb	r4, r4
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
 8015530:	7832      	ldrb	r2, [r6, #0]
 8015532:	2304      	movs	r3, #4
 8015534:	439a      	bics	r2, r3
 8015536:	2183      	movs	r1, #131	; 0x83
 8015538:	0028      	movs	r0, r5
 801553a:	f000 ff15 	bl	8016368 <VL53L0X_WrByte>
 801553e:	4304      	orrs	r4, r0
 8015540:	b264      	sxtb	r4, r4
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8015542:	2201      	movs	r2, #1
 8015544:	21ff      	movs	r1, #255	; 0xff
 8015546:	0028      	movs	r0, r5
 8015548:	f000 ff0e 	bl	8016368 <VL53L0X_WrByte>
 801554c:	4304      	orrs	r4, r0
 801554e:	b264      	sxtb	r4, r4
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8015550:	2201      	movs	r2, #1
 8015552:	2100      	movs	r1, #0
 8015554:	0028      	movs	r0, r5
 8015556:	f000 ff07 	bl	8016368 <VL53L0X_WrByte>
 801555a:	4304      	orrs	r4, r0
 801555c:	b264      	sxtb	r4, r4
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 801555e:	2200      	movs	r2, #0
 8015560:	21ff      	movs	r1, #255	; 0xff
 8015562:	0028      	movs	r0, r5
 8015564:	f000 ff00 	bl	8016368 <VL53L0X_WrByte>
 8015568:	4304      	orrs	r4, r0
 801556a:	b264      	sxtb	r4, r4
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 801556c:	2200      	movs	r2, #0
 801556e:	2180      	movs	r1, #128	; 0x80
 8015570:	0028      	movs	r0, r5
 8015572:	f000 fef9 	bl	8016368 <VL53L0X_WrByte>
 8015576:	4304      	orrs	r4, r0
 8015578:	b264      	sxtb	r4, r4
	if ((Status == VL53L0X_ERROR_NONE) &&
 801557a:	2c00      	cmp	r4, #0
 801557c:	d000      	beq.n	8015580 <VL53L0X_get_info_from_device+0x4f0>
 801557e:	e599      	b.n	80150b4 <VL53L0X_get_info_from_device+0x24>
		if (((option & 1) == 1) &&
 8015580:	9b00      	ldr	r3, [sp, #0]
 8015582:	2b00      	cmp	r3, #0
 8015584:	d015      	beq.n	80155b2 <VL53L0X_get_info_from_device+0x522>
 8015586:	464b      	mov	r3, r9
 8015588:	07db      	lsls	r3, r3, #31
 801558a:	d412      	bmi.n	80155b2 <VL53L0X_get_info_from_device+0x522>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 801558c:	2314      	movs	r3, #20
 801558e:	33ff      	adds	r3, #255	; 0xff
 8015590:	9a01      	ldr	r2, [sp, #4]
 8015592:	54ea      	strb	r2, [r5, r3]
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8015594:	3301      	adds	r3, #1
 8015596:	9a02      	ldr	r2, [sp, #8]
 8015598:	54ea      	strb	r2, [r5, r3]
 801559a:	3b14      	subs	r3, #20
 801559c:	3bff      	subs	r3, #255	; 0xff
				Dev->Data.SpadData.RefGoodSpadMap[i] =
 801559e:	0028      	movs	r0, r5
 80155a0:	302a      	adds	r0, #42	; 0x2a
 80155a2:	30ff      	adds	r0, #255	; 0xff
					NvmRefGoodSpadMap[i];
 80155a4:	aa04      	add	r2, sp, #16
 80155a6:	1e51      	subs	r1, r2, #1
				Dev->Data.SpadData.RefGoodSpadMap[i] =
 80155a8:	5cca      	ldrb	r2, [r1, r3]
 80155aa:	54c2      	strb	r2, [r0, r3]
			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 80155ac:	3301      	adds	r3, #1
 80155ae:	2b07      	cmp	r3, #7
 80155b0:	d1fa      	bne.n	80155a8 <VL53L0X_get_info_from_device+0x518>
		if (((option & 2) == 2) &&
 80155b2:	4653      	mov	r3, sl
 80155b4:	2b00      	cmp	r3, #0
 80155b6:	d002      	beq.n	80155be <VL53L0X_get_info_from_device+0x52e>
 80155b8:	464b      	mov	r3, r9
 80155ba:	079b      	lsls	r3, r3, #30
 80155bc:	d526      	bpl.n	801560c <VL53L0X_get_info_from_device+0x57c>
		if (((option & 4) == 4) &&
 80155be:	4643      	mov	r3, r8
 80155c0:	2b00      	cmp	r3, #0
 80155c2:	d01e      	beq.n	8015602 <VL53L0X_get_info_from_device+0x572>
 80155c4:	464b      	mov	r3, r9
 80155c6:	075b      	lsls	r3, r3, #29
 80155c8:	d41b      	bmi.n	8015602 <VL53L0X_get_info_from_device+0x572>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80155ca:	238c      	movs	r3, #140	; 0x8c
 80155cc:	005b      	lsls	r3, r3, #1
 80155ce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80155d0:	50ea      	str	r2, [r5, r3]
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80155d2:	3304      	adds	r3, #4
 80155d4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80155d6:	50ea      	str	r2, [r5, r3]
			SignalRateMeasFixed400mmFix =
 80155d8:	465b      	mov	r3, fp
 80155da:	025b      	lsls	r3, r3, #9
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80155dc:	2290      	movs	r2, #144	; 0x90
 80155de:	0052      	lsls	r2, r2, #1
 80155e0:	50ab      	str	r3, [r5, r2]
			OffsetMicroMeters = 0;
 80155e2:	2300      	movs	r3, #0
			if (DistMeasFixed1104_400_mm != 0) {
 80155e4:	9a03      	ldr	r2, [sp, #12]
 80155e6:	2a00      	cmp	r2, #0
 80155e8:	d00a      	beq.n	8015600 <VL53L0X_get_info_from_device+0x570>
					OffsetFixed1104_mm =
 80155ea:	4b11      	ldr	r3, [pc, #68]	; (8015630 <VL53L0X_get_info_from_device+0x5a0>)
 80155ec:	469c      	mov	ip, r3
 80155ee:	4462      	add	r2, ip
						* 1000) >> 4;
 80155f0:	0153      	lsls	r3, r2, #5
 80155f2:	1a9b      	subs	r3, r3, r2
 80155f4:	009b      	lsls	r3, r3, #2
 80155f6:	189b      	adds	r3, r3, r2
 80155f8:	00db      	lsls	r3, r3, #3
 80155fa:	091b      	lsrs	r3, r3, #4
					OffsetMicroMeters *= -1;
 80155fc:	425b      	negs	r3, r3
 80155fe:	b21b      	sxth	r3, r3
			PALDevDataSet(Dev,
 8015600:	60eb      	str	r3, [r5, #12]
		byte = (uint8_t)(ReadDataFromDeviceDone|option);
 8015602:	4649      	mov	r1, r9
 8015604:	4339      	orrs	r1, r7
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone,
 8015606:	23f0      	movs	r3, #240	; 0xf0
 8015608:	54e9      	strb	r1, [r5, r3]
 801560a:	e553      	b.n	80150b4 <VL53L0X_get_info_from_device+0x24>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 801560c:	2327      	movs	r3, #39	; 0x27
 801560e:	aa04      	add	r2, sp, #16
 8015610:	4694      	mov	ip, r2
 8015612:	4463      	add	r3, ip
 8015614:	781a      	ldrb	r2, [r3, #0]
 8015616:	23f1      	movs	r3, #241	; 0xf1
 8015618:	54ea      	strb	r2, [r5, r3]
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 801561a:	3bcb      	subs	r3, #203	; 0xcb
 801561c:	4463      	add	r3, ip
 801561e:	781a      	ldrb	r2, [r3, #0]
 8015620:	23f2      	movs	r3, #242	; 0xf2
 8015622:	54ea      	strb	r2, [r5, r3]
			VL53L0X_COPYSTRING(ProductId_tmp, ProductId);
 8015624:	a906      	add	r1, sp, #24
 8015626:	0028      	movs	r0, r5
 8015628:	30f3      	adds	r0, #243	; 0xf3
 801562a:	f001 f8d2 	bl	80167d2 <strcpy>
 801562e:	e7c6      	b.n	80155be <VL53L0X_get_info_from_device+0x52e>
 8015630:	ffffe700 	.word	0xffffe700

08015634 <VL53L0X_encode_timeout>:
	LOG_FUNCTION_END("");
	return macro_period_ps;
}

uint16_t VL53L0X_encode_timeout(uint32_t timeout_macro_clks)
{
 8015634:	0003      	movs	r3, r0
	/*!
	 * Encode timeout in macro periods in (LSByte * 2^MSByte) + 1 format
	 */

	uint16_t encoded_timeout = 0;
 8015636:	2000      	movs	r0, #0
	uint32_t ls_byte = 0;
	uint16_t ms_byte = 0;

	if (timeout_macro_clks > 0) {
 8015638:	2b00      	cmp	r3, #0
 801563a:	d011      	beq.n	8015660 <VL53L0X_encode_timeout+0x2c>
		ls_byte = timeout_macro_clks - 1;
 801563c:	1e58      	subs	r0, r3, #1

		while ((ls_byte & 0xFFFFFF00) > 0) {
 801563e:	23ff      	movs	r3, #255	; 0xff
 8015640:	0002      	movs	r2, r0
 8015642:	439a      	bics	r2, r3
 8015644:	d00d      	beq.n	8015662 <VL53L0X_encode_timeout+0x2e>
	uint16_t ms_byte = 0;
 8015646:	2300      	movs	r3, #0
		while ((ls_byte & 0xFFFFFF00) > 0) {
 8015648:	21ff      	movs	r1, #255	; 0xff
			ls_byte = ls_byte >> 1;
 801564a:	0840      	lsrs	r0, r0, #1
			ms_byte++;
 801564c:	3301      	adds	r3, #1
 801564e:	b29b      	uxth	r3, r3
		while ((ls_byte & 0xFFFFFF00) > 0) {
 8015650:	0002      	movs	r2, r0
 8015652:	438a      	bics	r2, r1
 8015654:	d1f9      	bne.n	801564a <VL53L0X_encode_timeout+0x16>
		}

		encoded_timeout = (ms_byte << 8)
 8015656:	021b      	lsls	r3, r3, #8
				+ (uint16_t) (ls_byte & 0x000000FF);
 8015658:	22ff      	movs	r2, #255	; 0xff
 801565a:	4010      	ands	r0, r2
		encoded_timeout = (ms_byte << 8)
 801565c:	1818      	adds	r0, r3, r0
 801565e:	b280      	uxth	r0, r0
	}

	return encoded_timeout;

}
 8015660:	4770      	bx	lr
	uint16_t ms_byte = 0;
 8015662:	2300      	movs	r3, #0
 8015664:	e7f7      	b.n	8015656 <VL53L0X_encode_timeout+0x22>

08015666 <VL53L0X_decode_timeout>:

uint32_t VL53L0X_decode_timeout(uint16_t encoded_timeout)
{
 8015666:	0003      	movs	r3, r0
	 * Decode 16-bit timeout register value - format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 8015668:	20ff      	movs	r0, #255	; 0xff
 801566a:	4018      	ands	r0, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 801566c:	0a1b      	lsrs	r3, r3, #8
 801566e:	4098      	lsls	r0, r3
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 8015670:	3001      	adds	r0, #1

	return timeout_macro_clks;
}
 8015672:	4770      	bx	lr

08015674 <VL53L0X_calc_timeout_mclks>:

/* To convert ms into register value */
uint32_t VL53L0X_calc_timeout_mclks(VL53L0X_DEV Dev,
		uint32_t timeout_period_us,
		uint8_t vcsel_period_pclks)
{
 8015674:	b570      	push	{r4, r5, r6, lr}
 8015676:	0015      	movs	r5, r2
	macro_period_ps = (uint32_t)(macro_period_vclks
 8015678:	0152      	lsls	r2, r2, #5
 801567a:	1b52      	subs	r2, r2, r5
 801567c:	0152      	lsls	r2, r2, #5
 801567e:	1952      	adds	r2, r2, r5
 8015680:	0115      	lsls	r5, r2, #4
 8015682:	1aaa      	subs	r2, r5, r2
 8015684:	0212      	lsls	r2, r2, #8
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t timeout_period_mclks = 0;

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
	macro_period_ns = (macro_period_ps + 500) / 1000;
 8015686:	32f5      	adds	r2, #245	; 0xf5
 8015688:	32ff      	adds	r2, #255	; 0xff
 801568a:	0015      	movs	r5, r2

	timeout_period_mclks =
		(uint32_t) (((timeout_period_us * 1000)
 801568c:	014c      	lsls	r4, r1, #5
 801568e:	1a64      	subs	r4, r4, r1
 8015690:	00a4      	lsls	r4, r4, #2
 8015692:	1864      	adds	r4, r4, r1
 8015694:	00e4      	lsls	r4, r4, #3
		+ (macro_period_ns / 2)) / macro_period_ns);
 8015696:	21fa      	movs	r1, #250	; 0xfa
 8015698:	00c9      	lsls	r1, r1, #3
 801569a:	0010      	movs	r0, r2
 801569c:	f7ea fd58 	bl	8000150 <__udivsi3>
 80156a0:	1824      	adds	r4, r4, r0
	macro_period_ns = (macro_period_ps + 500) / 1000;
 80156a2:	21fa      	movs	r1, #250	; 0xfa
 80156a4:	0089      	lsls	r1, r1, #2
 80156a6:	0028      	movs	r0, r5
 80156a8:	f7ea fd52 	bl	8000150 <__udivsi3>
 80156ac:	0001      	movs	r1, r0
	timeout_period_mclks =
 80156ae:	0020      	movs	r0, r4
 80156b0:	f7ea fd4e 	bl	8000150 <__udivsi3>

    return timeout_period_mclks;
}
 80156b4:	bd70      	pop	{r4, r5, r6, pc}

080156b6 <VL53L0X_calc_timeout_us>:

/* To convert register value into us */
uint32_t VL53L0X_calc_timeout_us(VL53L0X_DEV Dev,
		uint16_t timeout_period_mclks,
		uint8_t vcsel_period_pclks)
{
 80156b6:	b510      	push	{r4, lr}
 80156b8:	000c      	movs	r4, r1
 80156ba:	0010      	movs	r0, r2
	macro_period_ps = (uint32_t)(macro_period_vclks
 80156bc:	0152      	lsls	r2, r2, #5
 80156be:	1a12      	subs	r2, r2, r0
 80156c0:	0152      	lsls	r2, r2, #5
 80156c2:	1812      	adds	r2, r2, r0
 80156c4:	0110      	lsls	r0, r2, #4
 80156c6:	1a80      	subs	r0, r0, r2
 80156c8:	0200      	lsls	r0, r0, #8
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t actual_timeout_period_us = 0;

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
	macro_period_ns = (macro_period_ps + 500) / 1000;
 80156ca:	30f5      	adds	r0, #245	; 0xf5
 80156cc:	30ff      	adds	r0, #255	; 0xff
 80156ce:	21fa      	movs	r1, #250	; 0xfa
 80156d0:	0089      	lsls	r1, r1, #2
 80156d2:	f7ea fd3d 	bl	8000150 <__udivsi3>

	actual_timeout_period_us =
		((timeout_period_mclks * macro_period_ns) + 500) / 1000;
 80156d6:	4360      	muls	r0, r4
 80156d8:	30f5      	adds	r0, #245	; 0xf5
 80156da:	30ff      	adds	r0, #255	; 0xff
	actual_timeout_period_us =
 80156dc:	21fa      	movs	r1, #250	; 0xfa
 80156de:	0089      	lsls	r1, r1, #2
 80156e0:	f7ea fd36 	bl	8000150 <__udivsi3>

	return actual_timeout_period_us;
}
 80156e4:	bd10      	pop	{r4, pc}

080156e6 <get_sequence_step_timeout>:


VL53L0X_Error get_sequence_step_timeout(VL53L0X_DEV Dev,
				VL53L0X_SequenceStepId SequenceStepId,
				uint32_t *pTimeOutMicroSecs)
{
 80156e6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80156e8:	46c6      	mov	lr, r8
 80156ea:	b500      	push	{lr}
 80156ec:	b084      	sub	sp, #16
 80156ee:	0005      	movs	r5, r0
 80156f0:	0016      	movs	r6, r2
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint8_t CurrentVCSELPulsePeriodPClk;
	uint8_t EncodedTimeOutByte = 0;
 80156f2:	2300      	movs	r3, #0
 80156f4:	220e      	movs	r2, #14
 80156f6:	446a      	add	r2, sp
 80156f8:	7013      	strb	r3, [r2, #0]
	uint32_t TimeoutMicroSeconds = 0;
	uint16_t PreRangeEncodedTimeOut = 0;
 80156fa:	aa03      	add	r2, sp, #12
 80156fc:	8013      	strh	r3, [r2, #0]
	uint16_t PreRangeTimeOutMClks;
	uint16_t FinalRangeTimeOutMClks = 0;
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 80156fe:	2902      	cmp	r1, #2
 8015700:	d90b      	bls.n	801571a <get_sequence_step_timeout+0x34>
		MsrcTimeOutMClks = VL53L0X_decode_timeout(EncodedTimeOutByte);

		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
						MsrcTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 8015702:	2903      	cmp	r1, #3
 8015704:	d025      	beq.n	8015752 <get_sequence_step_timeout+0x6c>

			TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
					PreRangeTimeOutMClks,
					CurrentVCSELPulsePeriodPClk);
		}
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 8015706:	2904      	cmp	r1, #4
 8015708:	d047      	beq.n	801579a <get_sequence_step_timeout+0xb4>
	uint32_t TimeoutMicroSeconds = 0;
 801570a:	2000      	movs	r0, #0
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 801570c:	2400      	movs	r4, #0
		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
						FinalRangeTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	}

	*pTimeOutMicroSecs = TimeoutMicroSeconds;
 801570e:	6030      	str	r0, [r6, #0]

	return Status;
}
 8015710:	0020      	movs	r0, r4
 8015712:	b004      	add	sp, #16
 8015714:	bc80      	pop	{r7}
 8015716:	46b8      	mov	r8, r7
 8015718:	bdf0      	pop	{r4, r5, r6, r7, pc}
		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 801571a:	220f      	movs	r2, #15
 801571c:	446a      	add	r2, sp
 801571e:	2100      	movs	r1, #0
 8015720:	f7fe f8db 	bl	80138da <VL53L0X_GetVcselPulsePeriod>
 8015724:	1e04      	subs	r4, r0, #0
		if (Status == VL53L0X_ERROR_NONE) {
 8015726:	d00c      	beq.n	8015742 <get_sequence_step_timeout+0x5c>
		MsrcTimeOutMClks = VL53L0X_decode_timeout(EncodedTimeOutByte);
 8015728:	230e      	movs	r3, #14
 801572a:	446b      	add	r3, sp
 801572c:	7818      	ldrb	r0, [r3, #0]
 801572e:	f7ff ff9a 	bl	8015666 <VL53L0X_decode_timeout>
		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8015732:	230f      	movs	r3, #15
 8015734:	446b      	add	r3, sp
 8015736:	781a      	ldrb	r2, [r3, #0]
 8015738:	b281      	uxth	r1, r0
 801573a:	0028      	movs	r0, r5
 801573c:	f7ff ffbb 	bl	80156b6 <VL53L0X_calc_timeout_us>
 8015740:	e7e5      	b.n	801570e <get_sequence_step_timeout+0x28>
			Status = VL53L0X_RdByte(Dev,
 8015742:	220e      	movs	r2, #14
 8015744:	446a      	add	r2, sp
 8015746:	2146      	movs	r1, #70	; 0x46
 8015748:	0028      	movs	r0, r5
 801574a:	f000 fe57 	bl	80163fc <VL53L0X_RdByte>
 801574e:	0004      	movs	r4, r0
 8015750:	e7ea      	b.n	8015728 <get_sequence_step_timeout+0x42>
		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8015752:	220f      	movs	r2, #15
 8015754:	446a      	add	r2, sp
 8015756:	2100      	movs	r1, #0
 8015758:	f7fe f8bf 	bl	80138da <VL53L0X_GetVcselPulsePeriod>
 801575c:	0004      	movs	r4, r0
	uint32_t TimeoutMicroSeconds = 0;
 801575e:	2000      	movs	r0, #0
		if (Status == VL53L0X_ERROR_NONE) {
 8015760:	2c00      	cmp	r4, #0
 8015762:	d1d4      	bne.n	801570e <get_sequence_step_timeout+0x28>
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8015764:	220f      	movs	r2, #15
 8015766:	446a      	add	r2, sp
 8015768:	2100      	movs	r1, #0
 801576a:	0028      	movs	r0, r5
 801576c:	f7fe f8b5 	bl	80138da <VL53L0X_GetVcselPulsePeriod>
 8015770:	1e04      	subs	r4, r0, #0
			if (Status == VL53L0X_ERROR_NONE) {
 8015772:	d00b      	beq.n	801578c <get_sequence_step_timeout+0xa6>
			PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 8015774:	ab03      	add	r3, sp, #12
 8015776:	8818      	ldrh	r0, [r3, #0]
 8015778:	f7ff ff75 	bl	8015666 <VL53L0X_decode_timeout>
			TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 801577c:	230f      	movs	r3, #15
 801577e:	446b      	add	r3, sp
 8015780:	781a      	ldrb	r2, [r3, #0]
 8015782:	b281      	uxth	r1, r0
 8015784:	0028      	movs	r0, r5
 8015786:	f7ff ff96 	bl	80156b6 <VL53L0X_calc_timeout_us>
 801578a:	e7c0      	b.n	801570e <get_sequence_step_timeout+0x28>
				Status = VL53L0X_RdWord(Dev,
 801578c:	aa03      	add	r2, sp, #12
 801578e:	2151      	movs	r1, #81	; 0x51
 8015790:	0028      	movs	r0, r5
 8015792:	f000 fe40 	bl	8016416 <VL53L0X_RdWord>
 8015796:	0004      	movs	r4, r0
 8015798:	e7ec      	b.n	8015774 <get_sequence_step_timeout+0x8e>
		VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 801579a:	ac01      	add	r4, sp, #4
 801579c:	0021      	movs	r1, r4
 801579e:	f7fe f923 	bl	80139e8 <VL53L0X_GetSequenceStepEnables>
		if (SchedulerSequenceSteps.PreRangeOn) {
 80157a2:	78e3      	ldrb	r3, [r4, #3]
 80157a4:	2b00      	cmp	r3, #0
 80157a6:	d019      	beq.n	80157dc <get_sequence_step_timeout+0xf6>
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80157a8:	220f      	movs	r2, #15
 80157aa:	446a      	add	r2, sp
 80157ac:	2100      	movs	r1, #0
 80157ae:	0028      	movs	r0, r5
 80157b0:	f7fe f893 	bl	80138da <VL53L0X_GetVcselPulsePeriod>
 80157b4:	0004      	movs	r4, r0
		PreRangeTimeOutMClks = 0;
 80157b6:	2700      	movs	r7, #0
			if (Status == VL53L0X_ERROR_NONE) {
 80157b8:	2800      	cmp	r0, #0
 80157ba:	d001      	beq.n	80157c0 <get_sequence_step_timeout+0xda>
	uint16_t FinalRangeTimeOutMClks = 0;
 80157bc:	2000      	movs	r0, #0
 80157be:	e018      	b.n	80157f2 <get_sequence_step_timeout+0x10c>
				Status = VL53L0X_RdWord(Dev,
 80157c0:	af03      	add	r7, sp, #12
 80157c2:	003a      	movs	r2, r7
 80157c4:	2151      	movs	r1, #81	; 0x51
 80157c6:	0028      	movs	r0, r5
 80157c8:	f000 fe25 	bl	8016416 <VL53L0X_RdWord>
 80157cc:	0004      	movs	r4, r0
				PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 80157ce:	8838      	ldrh	r0, [r7, #0]
 80157d0:	f7ff ff49 	bl	8015666 <VL53L0X_decode_timeout>
 80157d4:	b287      	uxth	r7, r0
		if (Status == VL53L0X_ERROR_NONE) {
 80157d6:	2c00      	cmp	r4, #0
 80157d8:	d001      	beq.n	80157de <get_sequence_step_timeout+0xf8>
 80157da:	e7ef      	b.n	80157bc <get_sequence_step_timeout+0xd6>
		PreRangeTimeOutMClks = 0;
 80157dc:	2700      	movs	r7, #0
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80157de:	220f      	movs	r2, #15
 80157e0:	446a      	add	r2, sp
 80157e2:	2101      	movs	r1, #1
 80157e4:	0028      	movs	r0, r5
 80157e6:	f7fe f878 	bl	80138da <VL53L0X_GetVcselPulsePeriod>
 80157ea:	0004      	movs	r4, r0
	uint16_t FinalRangeTimeOutMClks = 0;
 80157ec:	2000      	movs	r0, #0
		if (Status == VL53L0X_ERROR_NONE) {
 80157ee:	2c00      	cmp	r4, #0
 80157f0:	d008      	beq.n	8015804 <get_sequence_step_timeout+0x11e>
		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 80157f2:	230f      	movs	r3, #15
 80157f4:	446b      	add	r3, sp
 80157f6:	781a      	ldrb	r2, [r3, #0]
		FinalRangeTimeOutMClks -= PreRangeTimeOutMClks;
 80157f8:	1bc0      	subs	r0, r0, r7
		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 80157fa:	b281      	uxth	r1, r0
 80157fc:	0028      	movs	r0, r5
 80157fe:	f7ff ff5a 	bl	80156b6 <VL53L0X_calc_timeout_us>
 8015802:	e784      	b.n	801570e <get_sequence_step_timeout+0x28>
			Status = VL53L0X_RdWord(Dev,
 8015804:	230a      	movs	r3, #10
 8015806:	446b      	add	r3, sp
 8015808:	4698      	mov	r8, r3
 801580a:	001a      	movs	r2, r3
 801580c:	2171      	movs	r1, #113	; 0x71
 801580e:	0028      	movs	r0, r5
 8015810:	f000 fe01 	bl	8016416 <VL53L0X_RdWord>
 8015814:	0004      	movs	r4, r0
			FinalRangeTimeOutMClks = VL53L0X_decode_timeout(
 8015816:	4643      	mov	r3, r8
 8015818:	8818      	ldrh	r0, [r3, #0]
 801581a:	f7ff ff24 	bl	8015666 <VL53L0X_decode_timeout>
 801581e:	b280      	uxth	r0, r0
 8015820:	e7e7      	b.n	80157f2 <get_sequence_step_timeout+0x10c>

08015822 <set_sequence_step_timeout>:


VL53L0X_Error set_sequence_step_timeout(VL53L0X_DEV Dev,
					VL53L0X_SequenceStepId SequenceStepId,
					uint32_t TimeOutMicroSecs)
{
 8015822:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015824:	b085      	sub	sp, #20
 8015826:	0005      	movs	r5, r0
 8015828:	0016      	movs	r6, r2
	uint16_t MsrcRangeTimeOutMClks;
	uint32_t FinalRangeTimeOutMClks;
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 801582a:	2902      	cmp	r1, #2
 801582c:	d921      	bls.n	8015872 <set_sequence_step_timeout+0x50>
				VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
				MsrcEncodedTimeOut);
		}
	} else {

		if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 801582e:	2903      	cmp	r1, #3
 8015830:	d03d      	beq.n	80158ae <set_sequence_step_timeout+0x8c>
				VL53L0X_SETDEVICESPECIFICPARAMETER(
					Dev,
					PreRangeTimeoutMicroSecs,
					TimeOutMicroSecs);
			}
		} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 8015832:	2904      	cmp	r1, #4
 8015834:	d000      	beq.n	8015838 <set_sequence_step_timeout+0x16>
 8015836:	e07a      	b.n	801592e <set_sequence_step_timeout+0x10c>
			 * must be added. To do this both final and pre-range
			 * timeouts must be expressed in macro periods MClks
			 * because they have different vcsel periods.
			 */

			VL53L0X_GetSequenceStepEnables(Dev,
 8015838:	ac01      	add	r4, sp, #4
 801583a:	0021      	movs	r1, r4
 801583c:	f7fe f8d4 	bl	80139e8 <VL53L0X_GetSequenceStepEnables>
					&SchedulerSequenceSteps);
			PreRangeTimeOutMClks = 0;
			if (SchedulerSequenceSteps.PreRangeOn) {
 8015840:	78e3      	ldrb	r3, [r4, #3]
 8015842:	2b00      	cmp	r3, #0
 8015844:	d053      	beq.n	80158ee <set_sequence_step_timeout+0xcc>

				/* Retrieve PRE-RANGE VCSEL Period */
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8015846:	220f      	movs	r2, #15
 8015848:	446a      	add	r2, sp
 801584a:	2100      	movs	r1, #0
 801584c:	0028      	movs	r0, r5
 801584e:	f7fe f844 	bl	80138da <VL53L0X_GetVcselPulsePeriod>
 8015852:	1e04      	subs	r4, r0, #0
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

				/* Retrieve PRE-RANGE Timeout in Macro periods
				 * (MCLKS) */
				if (Status == VL53L0X_ERROR_NONE) {
 8015854:	d154      	bne.n	8015900 <set_sequence_step_timeout+0xde>
					Status = VL53L0X_RdWord(Dev, 0x51,
 8015856:	af03      	add	r7, sp, #12
 8015858:	003a      	movs	r2, r7
 801585a:	2151      	movs	r1, #81	; 0x51
 801585c:	0028      	movs	r0, r5
 801585e:	f000 fdda 	bl	8016416 <VL53L0X_RdWord>
 8015862:	0004      	movs	r4, r0
						&PreRangeEncodedTimeOut);
					PreRangeTimeOutMClks =
						VL53L0X_decode_timeout(
 8015864:	8838      	ldrh	r0, [r7, #0]
 8015866:	f7ff fefe 	bl	8015666 <VL53L0X_decode_timeout>
					PreRangeTimeOutMClks =
 801586a:	b287      	uxth	r7, r0
			}

			/* Calculate FINAL RANGE Timeout in Macro Periods
			 * (MCLKS) and add PRE-RANGE value
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 801586c:	2c00      	cmp	r4, #0
 801586e:	d03f      	beq.n	80158f0 <set_sequence_step_timeout+0xce>
 8015870:	e046      	b.n	8015900 <set_sequence_step_timeout+0xde>
		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8015872:	220f      	movs	r2, #15
 8015874:	446a      	add	r2, sp
 8015876:	2100      	movs	r1, #0
 8015878:	f7fe f82f 	bl	80138da <VL53L0X_GetVcselPulsePeriod>
 801587c:	1e04      	subs	r4, r0, #0
		if (Status == VL53L0X_ERROR_NONE) {
 801587e:	d13f      	bne.n	8015900 <set_sequence_step_timeout+0xde>
			MsrcRangeTimeOutMClks = VL53L0X_calc_timeout_mclks(Dev,
 8015880:	230f      	movs	r3, #15
 8015882:	446b      	add	r3, sp
 8015884:	781a      	ldrb	r2, [r3, #0]
 8015886:	0031      	movs	r1, r6
 8015888:	0028      	movs	r0, r5
 801588a:	f7ff fef3 	bl	8015674 <VL53L0X_calc_timeout_mclks>
			if (MsrcRangeTimeOutMClks > 256)
 801588e:	2380      	movs	r3, #128	; 0x80
 8015890:	005b      	lsls	r3, r3, #1
 8015892:	b281      	uxth	r1, r0
				MsrcEncodedTimeOut = 255;
 8015894:	22ff      	movs	r2, #255	; 0xff
			if (MsrcRangeTimeOutMClks > 256)
 8015896:	4299      	cmp	r1, r3
 8015898:	d801      	bhi.n	801589e <set_sequence_step_timeout+0x7c>
				MsrcEncodedTimeOut =
 801589a:	3801      	subs	r0, #1
 801589c:	b2c2      	uxtb	r2, r0
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 801589e:	23d8      	movs	r3, #216	; 0xd8
 80158a0:	52ea      	strh	r2, [r5, r3]
			Status = VL53L0X_WrByte(Dev,
 80158a2:	2146      	movs	r1, #70	; 0x46
 80158a4:	0028      	movs	r0, r5
 80158a6:	f000 fd5f 	bl	8016368 <VL53L0X_WrByte>
 80158aa:	0004      	movs	r4, r0
 80158ac:	e028      	b.n	8015900 <set_sequence_step_timeout+0xde>
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80158ae:	270f      	movs	r7, #15
 80158b0:	446f      	add	r7, sp
 80158b2:	003a      	movs	r2, r7
 80158b4:	2100      	movs	r1, #0
 80158b6:	f7fe f810 	bl	80138da <VL53L0X_GetVcselPulsePeriod>
 80158ba:	0004      	movs	r4, r0
					VL53L0X_calc_timeout_mclks(Dev,
 80158bc:	783a      	ldrb	r2, [r7, #0]
 80158be:	0031      	movs	r1, r6
 80158c0:	0028      	movs	r0, r5
 80158c2:	f7ff fed7 	bl	8015674 <VL53L0X_calc_timeout_mclks>
				PreRangeEncodedTimeOut = VL53L0X_encode_timeout(
 80158c6:	0400      	lsls	r0, r0, #16
 80158c8:	0c00      	lsrs	r0, r0, #16
 80158ca:	f7ff feb3 	bl	8015634 <VL53L0X_encode_timeout>
 80158ce:	0002      	movs	r2, r0
 80158d0:	ab03      	add	r3, sp, #12
 80158d2:	8018      	strh	r0, [r3, #0]
				VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80158d4:	23d8      	movs	r3, #216	; 0xd8
 80158d6:	52e8      	strh	r0, [r5, r3]
			if (Status == VL53L0X_ERROR_NONE) {
 80158d8:	2c00      	cmp	r4, #0
 80158da:	d111      	bne.n	8015900 <set_sequence_step_timeout+0xde>
				Status = VL53L0X_WrWord(Dev,
 80158dc:	2151      	movs	r1, #81	; 0x51
 80158de:	0028      	movs	r0, r5
 80158e0:	f000 fd4f 	bl	8016382 <VL53L0X_WrWord>
 80158e4:	1e04      	subs	r4, r0, #0
			if (Status == VL53L0X_ERROR_NONE) {
 80158e6:	d10b      	bne.n	8015900 <set_sequence_step_timeout+0xde>
				VL53L0X_SETDEVICESPECIFICPARAMETER(
 80158e8:	23e4      	movs	r3, #228	; 0xe4
 80158ea:	50ee      	str	r6, [r5, r3]
 80158ec:	e008      	b.n	8015900 <set_sequence_step_timeout+0xde>
			PreRangeTimeOutMClks = 0;
 80158ee:	2700      	movs	r7, #0

				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80158f0:	220f      	movs	r2, #15
 80158f2:	446a      	add	r2, sp
 80158f4:	2101      	movs	r1, #1
 80158f6:	0028      	movs	r0, r5
 80158f8:	f7fd ffef 	bl	80138da <VL53L0X_GetVcselPulsePeriod>
 80158fc:	1e04      	subs	r4, r0, #0
						VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
						&CurrentVCSELPulsePeriodPClk);
			}
			if (Status == VL53L0X_ERROR_NONE) {
 80158fe:	d002      	beq.n	8015906 <set_sequence_step_timeout+0xe4>
		} else
			Status = VL53L0X_ERROR_INVALID_PARAMS;

	}
	return Status;
}
 8015900:	0020      	movs	r0, r4
 8015902:	b005      	add	sp, #20
 8015904:	bdf0      	pop	{r4, r5, r6, r7, pc}
					VL53L0X_calc_timeout_mclks(Dev,
 8015906:	230f      	movs	r3, #15
 8015908:	446b      	add	r3, sp
 801590a:	781a      	ldrb	r2, [r3, #0]
 801590c:	0031      	movs	r1, r6
 801590e:	0028      	movs	r0, r5
 8015910:	f7ff feb0 	bl	8015674 <VL53L0X_calc_timeout_mclks>
				FinalRangeTimeOutMClks += PreRangeTimeOutMClks;
 8015914:	1838      	adds	r0, r7, r0
				VL53L0X_encode_timeout(FinalRangeTimeOutMClks);
 8015916:	f7ff fe8d 	bl	8015634 <VL53L0X_encode_timeout>
 801591a:	0002      	movs	r2, r0
					Status = VL53L0X_WrWord(Dev, 0x71,
 801591c:	2171      	movs	r1, #113	; 0x71
 801591e:	0028      	movs	r0, r5
 8015920:	f000 fd2f 	bl	8016382 <VL53L0X_WrWord>
 8015924:	1e04      	subs	r4, r0, #0
				if (Status == VL53L0X_ERROR_NONE) {
 8015926:	d1eb      	bne.n	8015900 <set_sequence_step_timeout+0xde>
					VL53L0X_SETDEVICESPECIFICPARAMETER(
 8015928:	23dc      	movs	r3, #220	; 0xdc
 801592a:	50ee      	str	r6, [r5, r3]
 801592c:	e7e8      	b.n	8015900 <set_sequence_step_timeout+0xde>
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 801592e:	2404      	movs	r4, #4
 8015930:	4264      	negs	r4, r4
 8015932:	e7e5      	b.n	8015900 <set_sequence_step_timeout+0xde>

08015934 <VL53L0X_get_vcsel_pulse_period>:
	return Status;
}

VL53L0X_Error VL53L0X_get_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 8015934:	b510      	push	{r4, lr}
 8015936:	b082      	sub	sp, #8
 8015938:	0014      	movs	r4, r2
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint8_t vcsel_period_reg;

	switch (VcselPeriodType) {
 801593a:	2900      	cmp	r1, #0
 801593c:	d005      	beq.n	801594a <VL53L0X_get_vcsel_pulse_period+0x16>
 801593e:	2901      	cmp	r1, #1
 8015940:	d011      	beq.n	8015966 <VL53L0X_get_vcsel_pulse_period+0x32>
 8015942:	2004      	movs	r0, #4
 8015944:	4240      	negs	r0, r0
	if (Status == VL53L0X_ERROR_NONE)
		*pVCSELPulsePeriodPCLK =
			VL53L0X_decode_vcsel_period(vcsel_period_reg);

	return Status;
}
 8015946:	b002      	add	sp, #8
 8015948:	bd10      	pop	{r4, pc}
		Status = VL53L0X_RdByte(Dev,
 801594a:	466b      	mov	r3, sp
 801594c:	1dda      	adds	r2, r3, #7
 801594e:	2150      	movs	r1, #80	; 0x50
 8015950:	f000 fd54 	bl	80163fc <VL53L0X_RdByte>
	if (Status == VL53L0X_ERROR_NONE)
 8015954:	2800      	cmp	r0, #0
 8015956:	d1f6      	bne.n	8015946 <VL53L0X_get_vcsel_pulse_period+0x12>
			VL53L0X_decode_vcsel_period(vcsel_period_reg);
 8015958:	466b      	mov	r3, sp
 801595a:	3307      	adds	r3, #7
	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 801595c:	781b      	ldrb	r3, [r3, #0]
 801595e:	3301      	adds	r3, #1
 8015960:	005b      	lsls	r3, r3, #1
		*pVCSELPulsePeriodPCLK =
 8015962:	7023      	strb	r3, [r4, #0]
 8015964:	e7ef      	b.n	8015946 <VL53L0X_get_vcsel_pulse_period+0x12>
		Status = VL53L0X_RdByte(Dev,
 8015966:	466b      	mov	r3, sp
 8015968:	1dda      	adds	r2, r3, #7
 801596a:	2170      	movs	r1, #112	; 0x70
 801596c:	f000 fd46 	bl	80163fc <VL53L0X_RdByte>
	break;
 8015970:	e7f0      	b.n	8015954 <VL53L0X_get_vcsel_pulse_period+0x20>
	...

08015974 <VL53L0X_set_measurement_timing_budget_micro_seconds>:



VL53L0X_Error VL53L0X_set_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t MeasurementTimingBudgetMicroSeconds)
{
 8015974:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015976:	b085      	sub	sp, #20
 8015978:	0005      	movs	r5, r0
 801597a:	000e      	movs	r6, r1
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint32_t FinalRangeTimingBudgetMicroSeconds;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 801597c:	23fa      	movs	r3, #250	; 0xfa
 801597e:	00db      	lsls	r3, r3, #3
 8015980:	9301      	str	r3, [sp, #4]
	uint32_t MsrcOverheadMicroSeconds		= 660;
	uint32_t TccOverheadMicroSeconds		= 590;
	uint32_t DssOverheadMicroSeconds		= 690;
	uint32_t PreRangeOverheadMicroSeconds	= 660;
	uint32_t FinalRangeOverheadMicroSeconds = 550;
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 8015982:	2300      	movs	r3, #0
 8015984:	9300      	str	r3, [sp, #0]
	uint32_t cMinTimingBudgetMicroSeconds	= 20000;
	uint32_t SubTimeout = 0;

	LOG_FUNCTION_START("");

	if (MeasurementTimingBudgetMicroSeconds
 8015986:	4b39      	ldr	r3, [pc, #228]	; (8015a6c <VL53L0X_set_measurement_timing_budget_micro_seconds+0xf8>)
 8015988:	4299      	cmp	r1, r3
 801598a:	d95d      	bls.n	8015a48 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xd4>

	FinalRangeTimingBudgetMicroSeconds =
		MeasurementTimingBudgetMicroSeconds -
		(StartOverheadMicroSeconds + EndOverheadMicroSeconds);

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 801598c:	a902      	add	r1, sp, #8
 801598e:	f7fe f82b 	bl	80139e8 <VL53L0X_GetSequenceStepEnables>
 8015992:	1e04      	subs	r4, r0, #0

	if (Status == VL53L0X_ERROR_NONE &&
 8015994:	d153      	bne.n	8015a3e <VL53L0X_set_measurement_timing_budget_micro_seconds+0xca>
	FinalRangeTimingBudgetMicroSeconds =
 8015996:	4b36      	ldr	r3, [pc, #216]	; (8015a70 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xfc>)
 8015998:	18f7      	adds	r7, r6, r3
		(SchedulerSequenceSteps.TccOn  ||
 801599a:	a902      	add	r1, sp, #8
		SchedulerSequenceSteps.MsrcOn ||
 801599c:	780b      	ldrb	r3, [r1, #0]
 801599e:	784a      	ldrb	r2, [r1, #1]
 80159a0:	4313      	orrs	r3, r2
 80159a2:	788a      	ldrb	r2, [r1, #2]
 80159a4:	4313      	orrs	r3, r2
 80159a6:	d01d      	beq.n	80159e4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x70>
		SchedulerSequenceSteps.DssOn)) {

		/* TCC, MSRC and DSS all share the same timeout */
		Status = get_sequence_step_timeout(Dev,
 80159a8:	aa01      	add	r2, sp, #4
 80159aa:	2102      	movs	r1, #2
 80159ac:	0028      	movs	r0, r5
 80159ae:	f7ff fe9a 	bl	80156e6 <get_sequence_step_timeout>
					&MsrcDccTccTimeoutMicroSeconds);

		/* Subtract the TCC, MSRC and DSS timeouts if they are
		 * enabled. */

		if (Status != VL53L0X_ERROR_NONE)
 80159b2:	2800      	cmp	r0, #0
 80159b4:	d14b      	bne.n	8015a4e <VL53L0X_set_measurement_timing_budget_micro_seconds+0xda>
			return Status;

		/* TCC */
		if (SchedulerSequenceSteps.TccOn) {
 80159b6:	ab02      	add	r3, sp, #8
 80159b8:	781b      	ldrb	r3, [r3, #0]
 80159ba:	2b00      	cmp	r3, #0
 80159bc:	d006      	beq.n	80159cc <VL53L0X_set_measurement_timing_budget_micro_seconds+0x58>

			SubTimeout = MsrcDccTccTimeoutMicroSeconds
 80159be:	9b01      	ldr	r3, [sp, #4]
 80159c0:	4a2c      	ldr	r2, [pc, #176]	; (8015a74 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x100>)
 80159c2:	4694      	mov	ip, r2
 80159c4:	4463      	add	r3, ip
				+ TccOverheadMicroSeconds;

			if (SubTimeout <
 80159c6:	429f      	cmp	r7, r3
 80159c8:	d943      	bls.n	8015a52 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xde>
				FinalRangeTimingBudgetMicroSeconds) {
				FinalRangeTimingBudgetMicroSeconds -=
 80159ca:	1aff      	subs	r7, r7, r3
			LOG_FUNCTION_END(Status);
			return Status;
		}

		/* DSS */
		if (SchedulerSequenceSteps.DssOn) {
 80159cc:	ab02      	add	r3, sp, #8
 80159ce:	789b      	ldrb	r3, [r3, #2]
 80159d0:	2b00      	cmp	r3, #0
 80159d2:	d018      	beq.n	8015a06 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x92>

			SubTimeout = 2 * (MsrcDccTccTimeoutMicroSeconds +
 80159d4:	9b01      	ldr	r3, [sp, #4]
 80159d6:	4a28      	ldr	r2, [pc, #160]	; (8015a78 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x104>)
 80159d8:	4694      	mov	ip, r2
 80159da:	4463      	add	r3, ip
 80159dc:	005b      	lsls	r3, r3, #1
				DssOverheadMicroSeconds);

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 80159de:	429f      	cmp	r7, r3
 80159e0:	d93a      	bls.n	8015a58 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe4>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 80159e2:	1aff      	subs	r7, r7, r3
	if (Status != VL53L0X_ERROR_NONE) {
		LOG_FUNCTION_END(Status);
		return Status;
	}

	if (SchedulerSequenceSteps.PreRangeOn) {
 80159e4:	ab02      	add	r3, sp, #8
 80159e6:	78db      	ldrb	r3, [r3, #3]
 80159e8:	2b00      	cmp	r3, #0
 80159ea:	d119      	bne.n	8015a20 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xac>
		}
	}


	if (Status == VL53L0X_ERROR_NONE &&
		SchedulerSequenceSteps.FinalRangeOn) {
 80159ec:	ab02      	add	r3, sp, #8
	if (Status == VL53L0X_ERROR_NONE &&
 80159ee:	791b      	ldrb	r3, [r3, #4]
 80159f0:	2b00      	cmp	r3, #0
 80159f2:	d024      	beq.n	8015a3e <VL53L0X_set_measurement_timing_budget_micro_seconds+0xca>

		FinalRangeTimingBudgetMicroSeconds -=
 80159f4:	4b21      	ldr	r3, [pc, #132]	; (8015a7c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x108>)
 80159f6:	18fa      	adds	r2, r7, r3
		 * budget and the sum of all other timeouts within the sequence.
		 * If there is no room for the final range timeout, then an error
		 * will be set. Otherwise the remaining time will be applied to
		 * the final range.
		 */
		Status = set_sequence_step_timeout(Dev,
 80159f8:	2104      	movs	r1, #4
 80159fa:	0028      	movs	r0, r5
 80159fc:	f7ff ff11 	bl	8015822 <set_sequence_step_timeout>
 8015a00:	0004      	movs	r4, r0
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			FinalRangeTimingBudgetMicroSeconds);

		VL53L0X_SETPARAMETERFIELD(Dev,
 8015a02:	616e      	str	r6, [r5, #20]
 8015a04:	e01b      	b.n	8015a3e <VL53L0X_set_measurement_timing_budget_micro_seconds+0xca>
		} else if (SchedulerSequenceSteps.MsrcOn) {
 8015a06:	ab02      	add	r3, sp, #8
 8015a08:	785b      	ldrb	r3, [r3, #1]
 8015a0a:	2b00      	cmp	r3, #0
 8015a0c:	d0ea      	beq.n	80159e4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x70>
			SubTimeout = MsrcDccTccTimeoutMicroSeconds +
 8015a0e:	9b01      	ldr	r3, [sp, #4]
 8015a10:	22a5      	movs	r2, #165	; 0xa5
 8015a12:	0092      	lsls	r2, r2, #2
 8015a14:	4694      	mov	ip, r2
 8015a16:	4463      	add	r3, ip
			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 8015a18:	429f      	cmp	r7, r3
 8015a1a:	d920      	bls.n	8015a5e <VL53L0X_set_measurement_timing_budget_micro_seconds+0xea>
							-= SubTimeout;
 8015a1c:	1aff      	subs	r7, r7, r3
 8015a1e:	e7e1      	b.n	80159e4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x70>
		Status = get_sequence_step_timeout(Dev,
 8015a20:	466a      	mov	r2, sp
 8015a22:	2103      	movs	r1, #3
 8015a24:	0028      	movs	r0, r5
 8015a26:	f7ff fe5e 	bl	80156e6 <get_sequence_step_timeout>
		SubTimeout = PreRangeTimeoutMicroSeconds +
 8015a2a:	9b00      	ldr	r3, [sp, #0]
 8015a2c:	21a5      	movs	r1, #165	; 0xa5
 8015a2e:	0089      	lsls	r1, r1, #2
 8015a30:	468c      	mov	ip, r1
 8015a32:	4463      	add	r3, ip
		if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 8015a34:	42bb      	cmp	r3, r7
 8015a36:	d215      	bcs.n	8015a64 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xf0>
	if (Status == VL53L0X_ERROR_NONE &&
 8015a38:	2800      	cmp	r0, #0
 8015a3a:	d003      	beq.n	8015a44 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xd0>
		Status = get_sequence_step_timeout(Dev,
 8015a3c:	0004      	movs	r4, r0
	}

	LOG_FUNCTION_END(Status);

	return Status;
}
 8015a3e:	0020      	movs	r0, r4
 8015a40:	b005      	add	sp, #20
 8015a42:	bdf0      	pop	{r4, r5, r6, r7, pc}
			FinalRangeTimingBudgetMicroSeconds -= SubTimeout;
 8015a44:	1aff      	subs	r7, r7, r3
 8015a46:	e7d1      	b.n	80159ec <VL53L0X_set_measurement_timing_budget_micro_seconds+0x78>
		return Status;
 8015a48:	2404      	movs	r4, #4
 8015a4a:	4264      	negs	r4, r4
 8015a4c:	e7f7      	b.n	8015a3e <VL53L0X_set_measurement_timing_budget_micro_seconds+0xca>
			return Status;
 8015a4e:	0004      	movs	r4, r0
 8015a50:	e7f5      	b.n	8015a3e <VL53L0X_set_measurement_timing_budget_micro_seconds+0xca>
 8015a52:	2404      	movs	r4, #4
 8015a54:	4264      	negs	r4, r4
 8015a56:	e7f2      	b.n	8015a3e <VL53L0X_set_measurement_timing_budget_micro_seconds+0xca>
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8015a58:	2404      	movs	r4, #4
 8015a5a:	4264      	negs	r4, r4
 8015a5c:	e7ef      	b.n	8015a3e <VL53L0X_set_measurement_timing_budget_micro_seconds+0xca>
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8015a5e:	2404      	movs	r4, #4
 8015a60:	4264      	negs	r4, r4
 8015a62:	e7ec      	b.n	8015a3e <VL53L0X_set_measurement_timing_budget_micro_seconds+0xca>
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8015a64:	2404      	movs	r4, #4
 8015a66:	4264      	negs	r4, r4
 8015a68:	e7e9      	b.n	8015a3e <VL53L0X_set_measurement_timing_budget_micro_seconds+0xca>
 8015a6a:	46c0      	nop			; (mov r8, r8)
 8015a6c:	00004e1f 	.word	0x00004e1f
 8015a70:	fffff4ca 	.word	0xfffff4ca
 8015a74:	0000024e 	.word	0x0000024e
 8015a78:	000002b2 	.word	0x000002b2
 8015a7c:	fffffdda 	.word	0xfffffdda

08015a80 <VL53L0X_get_measurement_timing_budget_micro_seconds>:

VL53L0X_Error VL53L0X_get_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 8015a80:	b570      	push	{r4, r5, r6, lr}
 8015a82:	b086      	sub	sp, #24
 8015a84:	0006      	movs	r6, r0
 8015a86:	000c      	movs	r4, r1
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 8015a88:	23fa      	movs	r3, #250	; 0xfa
 8015a8a:	00db      	lsls	r3, r3, #3
 8015a8c:	9302      	str	r3, [sp, #8]
	uint32_t MsrcOverheadMicroSeconds		= 660;
	uint32_t TccOverheadMicroSeconds		= 590;
	uint32_t DssOverheadMicroSeconds		= 690;
	uint32_t PreRangeOverheadMicroSeconds	= 660;
	uint32_t FinalRangeOverheadMicroSeconds = 550;
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 8015a8e:	2300      	movs	r3, #0
 8015a90:	9301      	str	r3, [sp, #4]

	LOG_FUNCTION_START("");

	/* Start and end overhead times always present */
	*pMeasurementTimingBudgetMicroSeconds
		= StartOverheadMicroSeconds + EndOverheadMicroSeconds;
 8015a92:	4b36      	ldr	r3, [pc, #216]	; (8015b6c <VL53L0X_get_measurement_timing_budget_micro_seconds+0xec>)
 8015a94:	600b      	str	r3, [r1, #0]

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8015a96:	a904      	add	r1, sp, #16
 8015a98:	f7fd ffa6 	bl	80139e8 <VL53L0X_GetSequenceStepEnables>
 8015a9c:	1e05      	subs	r5, r0, #0

	if (Status != VL53L0X_ERROR_NONE) {
 8015a9e:	d150      	bne.n	8015b42 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xc2>
		LOG_FUNCTION_END(Status);
		return Status;
	}


	if (SchedulerSequenceSteps.TccOn  ||
 8015aa0:	aa04      	add	r2, sp, #16
		SchedulerSequenceSteps.MsrcOn ||
 8015aa2:	7813      	ldrb	r3, [r2, #0]
 8015aa4:	7851      	ldrb	r1, [r2, #1]
 8015aa6:	430b      	orrs	r3, r1
 8015aa8:	7892      	ldrb	r2, [r2, #2]
 8015aaa:	4313      	orrs	r3, r2
 8015aac:	d01f      	beq.n	8015aee <VL53L0X_get_measurement_timing_budget_micro_seconds+0x6e>
		SchedulerSequenceSteps.DssOn) {

		Status = get_sequence_step_timeout(Dev,
 8015aae:	aa02      	add	r2, sp, #8
 8015ab0:	2102      	movs	r1, #2
 8015ab2:	0030      	movs	r0, r6
 8015ab4:	f7ff fe17 	bl	80156e6 <get_sequence_step_timeout>
				VL53L0X_SEQUENCESTEP_MSRC,
				&MsrcDccTccTimeoutMicroSeconds);

		if (Status == VL53L0X_ERROR_NONE) {
 8015ab8:	2800      	cmp	r0, #0
 8015aba:	d141      	bne.n	8015b40 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xc0>
			if (SchedulerSequenceSteps.TccOn) {
 8015abc:	ab04      	add	r3, sp, #16
 8015abe:	781b      	ldrb	r3, [r3, #0]
 8015ac0:	2b00      	cmp	r3, #0
 8015ac2:	d007      	beq.n	8015ad4 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x54>
				*pMeasurementTimingBudgetMicroSeconds +=
					MsrcDccTccTimeoutMicroSeconds +
 8015ac4:	9b02      	ldr	r3, [sp, #8]
 8015ac6:	4a2a      	ldr	r2, [pc, #168]	; (8015b70 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xf0>)
 8015ac8:	4694      	mov	ip, r2
 8015aca:	4463      	add	r3, ip
				*pMeasurementTimingBudgetMicroSeconds +=
 8015acc:	6822      	ldr	r2, [r4, #0]
 8015ace:	4694      	mov	ip, r2
 8015ad0:	4463      	add	r3, ip
 8015ad2:	6023      	str	r3, [r4, #0]
					TccOverheadMicroSeconds;
			}

			if (SchedulerSequenceSteps.DssOn) {
 8015ad4:	ab04      	add	r3, sp, #16
 8015ad6:	789b      	ldrb	r3, [r3, #2]
 8015ad8:	2b00      	cmp	r3, #0
 8015ada:	d013      	beq.n	8015b04 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x84>
				*pMeasurementTimingBudgetMicroSeconds +=
				2 * (MsrcDccTccTimeoutMicroSeconds +
 8015adc:	9b02      	ldr	r3, [sp, #8]
 8015ade:	4a25      	ldr	r2, [pc, #148]	; (8015b74 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xf4>)
 8015ae0:	4694      	mov	ip, r2
 8015ae2:	4463      	add	r3, ip
 8015ae4:	005b      	lsls	r3, r3, #1
				*pMeasurementTimingBudgetMicroSeconds +=
 8015ae6:	6822      	ldr	r2, [r4, #0]
 8015ae8:	4694      	mov	ip, r2
 8015aea:	4463      	add	r3, ip
 8015aec:	6023      	str	r3, [r4, #0]
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
		if (SchedulerSequenceSteps.PreRangeOn) {
 8015aee:	ab04      	add	r3, sp, #16
 8015af0:	78db      	ldrb	r3, [r3, #3]
 8015af2:	2b00      	cmp	r3, #0
 8015af4:	d114      	bne.n	8015b20 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xa0>
				PreRangeOverheadMicroSeconds;
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
		if (SchedulerSequenceSteps.FinalRangeOn) {
 8015af6:	ab04      	add	r3, sp, #16
 8015af8:	791b      	ldrb	r3, [r3, #4]
 8015afa:	2b00      	cmp	r3, #0
 8015afc:	d124      	bne.n	8015b48 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xc8>
				FinalRangeOverheadMicroSeconds);
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
		VL53L0X_SETPARAMETERFIELD(Dev,
 8015afe:	6823      	ldr	r3, [r4, #0]
 8015b00:	6173      	str	r3, [r6, #20]
 8015b02:	e01e      	b.n	8015b42 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xc2>
			} else if (SchedulerSequenceSteps.MsrcOn) {
 8015b04:	ab04      	add	r3, sp, #16
 8015b06:	785b      	ldrb	r3, [r3, #1]
 8015b08:	2b00      	cmp	r3, #0
 8015b0a:	d0f0      	beq.n	8015aee <VL53L0X_get_measurement_timing_budget_micro_seconds+0x6e>
					MsrcDccTccTimeoutMicroSeconds +
 8015b0c:	9b02      	ldr	r3, [sp, #8]
 8015b0e:	22a5      	movs	r2, #165	; 0xa5
 8015b10:	0092      	lsls	r2, r2, #2
 8015b12:	4694      	mov	ip, r2
 8015b14:	4463      	add	r3, ip
				*pMeasurementTimingBudgetMicroSeconds +=
 8015b16:	6822      	ldr	r2, [r4, #0]
 8015b18:	4694      	mov	ip, r2
 8015b1a:	4463      	add	r3, ip
 8015b1c:	6023      	str	r3, [r4, #0]
 8015b1e:	e7e6      	b.n	8015aee <VL53L0X_get_measurement_timing_budget_micro_seconds+0x6e>
			Status = get_sequence_step_timeout(Dev,
 8015b20:	aa01      	add	r2, sp, #4
 8015b22:	2103      	movs	r1, #3
 8015b24:	0030      	movs	r0, r6
 8015b26:	f7ff fdde 	bl	80156e6 <get_sequence_step_timeout>
				PreRangeTimeoutMicroSeconds +
 8015b2a:	9b01      	ldr	r3, [sp, #4]
 8015b2c:	22a5      	movs	r2, #165	; 0xa5
 8015b2e:	0092      	lsls	r2, r2, #2
 8015b30:	4694      	mov	ip, r2
 8015b32:	4463      	add	r3, ip
			*pMeasurementTimingBudgetMicroSeconds +=
 8015b34:	6822      	ldr	r2, [r4, #0]
 8015b36:	4694      	mov	ip, r2
 8015b38:	4463      	add	r3, ip
 8015b3a:	6023      	str	r3, [r4, #0]
	if (Status == VL53L0X_ERROR_NONE) {
 8015b3c:	2800      	cmp	r0, #0
 8015b3e:	d0da      	beq.n	8015af6 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x76>
{
 8015b40:	0005      	movs	r5, r0
			*pMeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
 8015b42:	0028      	movs	r0, r5
 8015b44:	b006      	add	sp, #24
 8015b46:	bd70      	pop	{r4, r5, r6, pc}
			Status = get_sequence_step_timeout(Dev,
 8015b48:	aa03      	add	r2, sp, #12
 8015b4a:	2104      	movs	r1, #4
 8015b4c:	0030      	movs	r0, r6
 8015b4e:	f7ff fdca 	bl	80156e6 <get_sequence_step_timeout>
				(FinalRangeTimeoutMicroSeconds +
 8015b52:	9b03      	ldr	r3, [sp, #12]
 8015b54:	4a08      	ldr	r2, [pc, #32]	; (8015b78 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xf8>)
 8015b56:	4694      	mov	ip, r2
 8015b58:	4463      	add	r3, ip
			*pMeasurementTimingBudgetMicroSeconds +=
 8015b5a:	6822      	ldr	r2, [r4, #0]
 8015b5c:	4694      	mov	ip, r2
 8015b5e:	4463      	add	r3, ip
 8015b60:	6023      	str	r3, [r4, #0]
	if (Status == VL53L0X_ERROR_NONE) {
 8015b62:	2800      	cmp	r0, #0
 8015b64:	d0cb      	beq.n	8015afe <VL53L0X_get_measurement_timing_budget_micro_seconds+0x7e>
			Status = get_sequence_step_timeout(Dev,
 8015b66:	0005      	movs	r5, r0
 8015b68:	e7eb      	b.n	8015b42 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xc2>
 8015b6a:	46c0      	nop			; (mov r8, r8)
 8015b6c:	00000b36 	.word	0x00000b36
 8015b70:	0000024e 	.word	0x0000024e
 8015b74:	000002b2 	.word	0x000002b2
 8015b78:	00000226 	.word	0x00000226

08015b7c <VL53L0X_load_tuning_settings>:



VL53L0X_Error VL53L0X_load_tuning_settings(VL53L0X_DEV Dev,
		uint8_t *pTuningSettingBuffer)
{
 8015b7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015b7e:	46de      	mov	lr, fp
 8015b80:	4657      	mov	r7, sl
 8015b82:	464e      	mov	r6, r9
 8015b84:	4645      	mov	r5, r8
 8015b86:	b5e0      	push	{r5, r6, r7, lr}
 8015b88:	b083      	sub	sp, #12
 8015b8a:	4683      	mov	fp, r0
 8015b8c:	000e      	movs	r6, r1

	LOG_FUNCTION_START("");

	Index = 0;

	while ((*(pTuningSettingBuffer + Index) != 0) &&
 8015b8e:	780b      	ldrb	r3, [r1, #0]
 8015b90:	2b00      	cmp	r3, #0
 8015b92:	d067      	beq.n	8015c64 <VL53L0X_load_tuning_settings+0xe8>
	Index = 0;
 8015b94:	2400      	movs	r4, #0
				msb = *(pTuningSettingBuffer + Index);
				Index++;
				lsb = *(pTuningSettingBuffer + Index);
				Index++;
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
				PALDevDataSet(Dev, SigmaEstEffAmbWidth, Temp16);
 8015b96:	229c      	movs	r2, #156	; 0x9c
 8015b98:	0052      	lsls	r2, r2, #1
 8015b9a:	4691      	mov	r9, r2
				msb = *(pTuningSettingBuffer + Index);
				Index++;
				lsb = *(pTuningSettingBuffer + Index);
				Index++;
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
				PALDevDataSet(Dev, targetRefRate, Temp16);
 8015b9c:	3204      	adds	r2, #4
 8015b9e:	4690      	mov	r8, r2
 8015ba0:	e050      	b.n	8015c44 <VL53L0X_load_tuning_settings+0xc8>
			SelectParam = *(pTuningSettingBuffer + Index);
 8015ba2:	5cb3      	ldrb	r3, [r6, r2]
			Index++;
 8015ba4:	1ca2      	adds	r2, r4, #2
			switch (SelectParam) {
 8015ba6:	2b02      	cmp	r3, #2
 8015ba8:	d028      	beq.n	8015bfc <VL53L0X_load_tuning_settings+0x80>
 8015baa:	d80c      	bhi.n	8015bc6 <VL53L0X_load_tuning_settings+0x4a>
 8015bac:	2b00      	cmp	r3, #0
 8015bae:	d016      	beq.n	8015bde <VL53L0X_load_tuning_settings+0x62>
				lsb = *(pTuningSettingBuffer + Index);
 8015bb0:	1933      	adds	r3, r6, r4
 8015bb2:	78d9      	ldrb	r1, [r3, #3]
				Index++;
 8015bb4:	3404      	adds	r4, #4
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8015bb6:	5cb3      	ldrb	r3, [r6, r2]
 8015bb8:	021b      	lsls	r3, r3, #8
 8015bba:	185b      	adds	r3, r3, r1
				PALDevDataSet(Dev, SigmaEstEffPulseWidth,
 8015bbc:	229b      	movs	r2, #155	; 0x9b
 8015bbe:	0052      	lsls	r2, r2, #1
 8015bc0:	4659      	mov	r1, fp
 8015bc2:	528b      	strh	r3, [r1, r2]
				break;
 8015bc4:	e015      	b.n	8015bf2 <VL53L0X_load_tuning_settings+0x76>
			switch (SelectParam) {
 8015bc6:	2b03      	cmp	r3, #3
 8015bc8:	d14e      	bne.n	8015c68 <VL53L0X_load_tuning_settings+0xec>
				lsb = *(pTuningSettingBuffer + Index);
 8015bca:	1933      	adds	r3, r6, r4
 8015bcc:	78d9      	ldrb	r1, [r3, #3]
				Index++;
 8015bce:	3404      	adds	r4, #4
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8015bd0:	5cb3      	ldrb	r3, [r6, r2]
 8015bd2:	021b      	lsls	r3, r3, #8
 8015bd4:	185b      	adds	r3, r3, r1
				PALDevDataSet(Dev, targetRefRate, Temp16);
 8015bd6:	465a      	mov	r2, fp
 8015bd8:	4641      	mov	r1, r8
 8015bda:	5253      	strh	r3, [r2, r1]
				break;
 8015bdc:	e009      	b.n	8015bf2 <VL53L0X_load_tuning_settings+0x76>
				lsb = *(pTuningSettingBuffer + Index);
 8015bde:	1933      	adds	r3, r6, r4
 8015be0:	78d9      	ldrb	r1, [r3, #3]
				Index++;
 8015be2:	3404      	adds	r4, #4
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8015be4:	5cb3      	ldrb	r3, [r6, r2]
 8015be6:	021b      	lsls	r3, r3, #8
 8015be8:	185b      	adds	r3, r3, r1
				PALDevDataSet(Dev, SigmaEstRefArray, Temp16);
 8015bea:	229a      	movs	r2, #154	; 0x9a
 8015bec:	0052      	lsls	r2, r2, #1
 8015bee:	4659      	mov	r1, fp
 8015bf0:	528b      	strh	r3, [r1, r2]
	while ((*(pTuningSettingBuffer + Index) != 0) &&
 8015bf2:	5d33      	ldrb	r3, [r6, r4]
 8015bf4:	2b00      	cmp	r3, #0
 8015bf6:	d125      	bne.n	8015c44 <VL53L0X_load_tuning_settings+0xc8>
 8015bf8:	2000      	movs	r0, #0
			Status = VL53L0X_ERROR_INVALID_PARAMS;
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8015bfa:	e02a      	b.n	8015c52 <VL53L0X_load_tuning_settings+0xd6>
				lsb = *(pTuningSettingBuffer + Index);
 8015bfc:	1933      	adds	r3, r6, r4
 8015bfe:	78d9      	ldrb	r1, [r3, #3]
				Index++;
 8015c00:	3404      	adds	r4, #4
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8015c02:	5cb3      	ldrb	r3, [r6, r2]
 8015c04:	021b      	lsls	r3, r3, #8
 8015c06:	185b      	adds	r3, r3, r1
				PALDevDataSet(Dev, SigmaEstEffAmbWidth, Temp16);
 8015c08:	465a      	mov	r2, fp
 8015c0a:	4649      	mov	r1, r9
 8015c0c:	5253      	strh	r3, [r2, r1]
				break;
 8015c0e:	e7f0      	b.n	8015bf2 <VL53L0X_load_tuning_settings+0x76>
			Address = *(pTuningSettingBuffer + Index);
 8015c10:	5cb1      	ldrb	r1, [r6, r2]
			Index++;
 8015c12:	1ca2      	adds	r2, r4, #2
 8015c14:	4692      	mov	sl, r2
			for (i = 0; i < NumberOfWrites; i++) {
 8015c16:	1e1f      	subs	r7, r3, #0
 8015c18:	dd22      	ble.n	8015c60 <VL53L0X_load_tuning_settings+0xe4>
 8015c1a:	ad01      	add	r5, sp, #4
 8015c1c:	2200      	movs	r2, #0
				localBuffer[i] = *(pTuningSettingBuffer +
 8015c1e:	4654      	mov	r4, sl
 8015c20:	1934      	adds	r4, r6, r4
 8015c22:	5ca0      	ldrb	r0, [r4, r2]
 8015c24:	7028      	strb	r0, [r5, #0]
			for (i = 0; i < NumberOfWrites; i++) {
 8015c26:	3201      	adds	r2, #1
 8015c28:	3501      	adds	r5, #1
 8015c2a:	42ba      	cmp	r2, r7
 8015c2c:	dbf9      	blt.n	8015c22 <VL53L0X_load_tuning_settings+0xa6>
 8015c2e:	4652      	mov	r2, sl
 8015c30:	189c      	adds	r4, r3, r2
			Status = VL53L0X_WriteMulti(Dev, Address, localBuffer,
 8015c32:	aa01      	add	r2, sp, #4
 8015c34:	4658      	mov	r0, fp
 8015c36:	f000 fb75 	bl	8016324 <VL53L0X_WriteMulti>
	while ((*(pTuningSettingBuffer + Index) != 0) &&
 8015c3a:	5d33      	ldrb	r3, [r6, r4]
 8015c3c:	2b00      	cmp	r3, #0
 8015c3e:	d008      	beq.n	8015c52 <VL53L0X_load_tuning_settings+0xd6>
 8015c40:	2800      	cmp	r0, #0
 8015c42:	d106      	bne.n	8015c52 <VL53L0X_load_tuning_settings+0xd6>
		Index++;
 8015c44:	1c62      	adds	r2, r4, #1
		if (NumberOfWrites == 0xFF) {
 8015c46:	2bff      	cmp	r3, #255	; 0xff
 8015c48:	d0ab      	beq.n	8015ba2 <VL53L0X_load_tuning_settings+0x26>
		} else if (NumberOfWrites <= 4) {
 8015c4a:	2b04      	cmp	r3, #4
 8015c4c:	d9e0      	bls.n	8015c10 <VL53L0X_load_tuning_settings+0x94>
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8015c4e:	2004      	movs	r0, #4
 8015c50:	4240      	negs	r0, r0
}
 8015c52:	b003      	add	sp, #12
 8015c54:	bcf0      	pop	{r4, r5, r6, r7}
 8015c56:	46bb      	mov	fp, r7
 8015c58:	46b2      	mov	sl, r6
 8015c5a:	46a9      	mov	r9, r5
 8015c5c:	46a0      	mov	r8, r4
 8015c5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			Index++;
 8015c60:	0014      	movs	r4, r2
 8015c62:	e7e6      	b.n	8015c32 <VL53L0X_load_tuning_settings+0xb6>
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8015c64:	2000      	movs	r0, #0
 8015c66:	e7f4      	b.n	8015c52 <VL53L0X_load_tuning_settings+0xd6>
	while ((*(pTuningSettingBuffer + Index) != 0) &&
 8015c68:	2004      	movs	r0, #4
 8015c6a:	4240      	negs	r0, r0
 8015c6c:	e7f1      	b.n	8015c52 <VL53L0X_load_tuning_settings+0xd6>

08015c6e <VL53L0X_get_total_xtalk_rate>:

VL53L0X_Error VL53L0X_get_total_xtalk_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_xtalk_rate_mcps)
{
 8015c6e:	b570      	push	{r4, r5, r6, lr}
 8015c70:	b082      	sub	sp, #8
 8015c72:	0006      	movs	r6, r0
 8015c74:	000d      	movs	r5, r1
 8015c76:	0014      	movs	r4, r2

	uint8_t xtalkCompEnable;
	FixPoint1616_t totalXtalkMegaCps;
	FixPoint1616_t xtalkPerSpadMegaCps;

	*ptotal_xtalk_rate_mcps = 0;
 8015c78:	2300      	movs	r3, #0
 8015c7a:	6013      	str	r3, [r2, #0]

	Status = VL53L0X_GetXTalkCompensationEnable(Dev, &xtalkCompEnable);
 8015c7c:	466b      	mov	r3, sp
 8015c7e:	1dd9      	adds	r1, r3, #7
 8015c80:	f7fd ff2d 	bl	8013ade <VL53L0X_GetXTalkCompensationEnable>
	if (Status == VL53L0X_ERROR_NONE) {
 8015c84:	2800      	cmp	r0, #0
 8015c86:	d10a      	bne.n	8015c9e <VL53L0X_get_total_xtalk_rate+0x30>

		if (xtalkCompEnable) {
 8015c88:	466b      	mov	r3, sp
 8015c8a:	3307      	adds	r3, #7
 8015c8c:	781b      	ldrb	r3, [r3, #0]
 8015c8e:	2b00      	cmp	r3, #0
 8015c90:	d005      	beq.n	8015c9e <VL53L0X_get_total_xtalk_rate+0x30>
				XTalkCompensationRateMegaCps,
				xtalkPerSpadMegaCps);

			/* FixPoint1616 * FixPoint 8:8 = FixPoint0824 */
			totalXtalkMegaCps =
				pRangingMeasurementData->EffectiveSpadRtnCount *
 8015c92:	8aaa      	ldrh	r2, [r5, #20]
			totalXtalkMegaCps =
 8015c94:	6a33      	ldr	r3, [r6, #32]
 8015c96:	4353      	muls	r3, r2
				xtalkPerSpadMegaCps;

			/* FixPoint0824 >> 8 = FixPoint1616 */
			*ptotal_xtalk_rate_mcps =
				(totalXtalkMegaCps + 0x80) >> 8;
 8015c98:	3380      	adds	r3, #128	; 0x80
 8015c9a:	0a1b      	lsrs	r3, r3, #8
			*ptotal_xtalk_rate_mcps =
 8015c9c:	6023      	str	r3, [r4, #0]
		}
	}

	return Status;
}
 8015c9e:	b002      	add	sp, #8
 8015ca0:	bd70      	pop	{r4, r5, r6, pc}

08015ca2 <VL53L0X_get_total_signal_rate>:

VL53L0X_Error VL53L0X_get_total_signal_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_signal_rate_mcps)
{
 8015ca2:	b510      	push	{r4, lr}
 8015ca4:	b082      	sub	sp, #8
 8015ca6:	0014      	movs	r4, r2
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	FixPoint1616_t totalXtalkMegaCps;

	LOG_FUNCTION_START("");

	*ptotal_signal_rate_mcps =
 8015ca8:	68cb      	ldr	r3, [r1, #12]
 8015caa:	6013      	str	r3, [r2, #0]
		pRangingMeasurementData->SignalRateRtnMegaCps;

	Status = VL53L0X_get_total_xtalk_rate(
 8015cac:	aa01      	add	r2, sp, #4
 8015cae:	f7ff ffde 	bl	8015c6e <VL53L0X_get_total_xtalk_rate>
		Dev, pRangingMeasurementData, &totalXtalkMegaCps);

	if (Status == VL53L0X_ERROR_NONE)
 8015cb2:	2800      	cmp	r0, #0
 8015cb4:	d104      	bne.n	8015cc0 <VL53L0X_get_total_signal_rate+0x1e>
		*ptotal_signal_rate_mcps += totalXtalkMegaCps;
 8015cb6:	6823      	ldr	r3, [r4, #0]
 8015cb8:	9a01      	ldr	r2, [sp, #4]
 8015cba:	4694      	mov	ip, r2
 8015cbc:	4463      	add	r3, ip
 8015cbe:	6023      	str	r3, [r4, #0]

	return Status;
}
 8015cc0:	b002      	add	sp, #8
 8015cc2:	bd10      	pop	{r4, pc}

08015cc4 <VL53L0X_calc_dmax>:
	FixPoint1616_t pwMult,
	uint32_t sigmaEstimateP1,
	FixPoint1616_t sigmaEstimateP2,
	uint32_t peakVcselDuration_us,
	uint32_t *pdmax_mm)
{
 8015cc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015cc6:	0014      	movs	r4, r2
 8015cc8:	001d      	movs	r5, r3
 8015cca:	9f09      	ldr	r7, [sp, #36]	; 0x24
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;

	LOG_FUNCTION_START("");

	dmaxCalRange_mm =
		PALDevDataGet(Dev, DmaxCalRangeMilliMeter);
 8015ccc:	23aa      	movs	r3, #170	; 0xaa
 8015cce:	005b      	lsls	r3, r3, #1
	dmaxCalRange_mm =
 8015cd0:	5ac3      	ldrh	r3, [r0, r3]

	dmaxCalSignalRateRtn_mcps =
 8015cd2:	22ac      	movs	r2, #172	; 0xac
 8015cd4:	0052      	lsls	r2, r2, #1
		PALDevDataGet(Dev, DmaxCalSignalRateRtnMegaCps);

	/* uint32 * FixPoint1616 = FixPoint1616 */
	SignalAt0mm = dmaxCalRange_mm * dmaxCalSignalRateRtn_mcps;
 8015cd6:	5886      	ldr	r6, [r0, r2]
 8015cd8:	435e      	muls	r6, r3

	/* FixPoint1616 >> 8 = FixPoint2408 */
	SignalAt0mm = (SignalAt0mm + 0x80) >> 8;
 8015cda:	3680      	adds	r6, #128	; 0x80
 8015cdc:	0a36      	lsrs	r6, r6, #8
	SignalAt0mm *= dmaxCalRange_mm;
 8015cde:	435e      	muls	r6, r3

	minSignalNeeded_p1 = 0;
	if (totalCorrSignalRate_mcps > 0) {
 8015ce0:	2c00      	cmp	r4, #0
 8015ce2:	d00c      	beq.n	8015cfe <VL53L0X_calc_dmax+0x3a>
		 * division */
		signalRateTemp_mcps = totalSignalRate_mcps << 10;

		/* Add rounding value prior to division */
		minSignalNeeded_p1 = signalRateTemp_mcps +
			(totalCorrSignalRate_mcps/2);
 8015ce4:	0860      	lsrs	r0, r4, #1
		signalRateTemp_mcps = totalSignalRate_mcps << 10;
 8015ce6:	0289      	lsls	r1, r1, #10
		minSignalNeeded_p1 = signalRateTemp_mcps +
 8015ce8:	1840      	adds	r0, r0, r1

		/* FixPoint0626/FixPoint1616 = FixPoint2210 */
		minSignalNeeded_p1 /= totalCorrSignalRate_mcps;
 8015cea:	0021      	movs	r1, r4
 8015cec:	f7ea fa30 	bl	8000150 <__udivsi3>

		/* Apply a factored version of the speed of light.
		 Correction to be applied at the end */
		minSignalNeeded_p1 *= 3;
 8015cf0:	0044      	lsls	r4, r0, #1
 8015cf2:	1820      	adds	r0, r4, r0

		/* FixPoint2210 * FixPoint2210 = FixPoint1220 */
		minSignalNeeded_p1 *= minSignalNeeded_p1;
 8015cf4:	4340      	muls	r0, r0

		/* FixPoint1220 >> 16 = FixPoint2804 */
		minSignalNeeded_p1 = (minSignalNeeded_p1 + 0x8000) >> 16;
 8015cf6:	2380      	movs	r3, #128	; 0x80
 8015cf8:	021b      	lsls	r3, r3, #8
 8015cfa:	18c4      	adds	r4, r0, r3
 8015cfc:	0c24      	lsrs	r4, r4, #16
	}

	minSignalNeeded_p2 = pwMult * sigmaEstimateP1;
 8015cfe:	9b06      	ldr	r3, [sp, #24]
 8015d00:	436b      	muls	r3, r5

	/* FixPoint1616 >> 16 =	 uint32 */
	minSignalNeeded_p2 = (minSignalNeeded_p2 + 0x8000) >> 16;
 8015d02:	2280      	movs	r2, #128	; 0x80
 8015d04:	0212      	lsls	r2, r2, #8
 8015d06:	4694      	mov	ip, r2
 8015d08:	4463      	add	r3, ip
 8015d0a:	0c1d      	lsrs	r5, r3, #16

	/* uint32 * uint32	=  uint32 */
	minSignalNeeded_p2 *= minSignalNeeded_p2;
 8015d0c:	436d      	muls	r5, r5
	/* Check sigmaEstimateP2
	 * If this value is too high there is not enough signal rate
	 * to calculate dmax value so set a suitable value to ensure
	 * a very small dmax.
	 */
	sigmaEstP2Tmp = (sigmaEstimateP2 + 0x8000) >> 16;
 8015d0e:	9b07      	ldr	r3, [sp, #28]
 8015d10:	4463      	add	r3, ip
 8015d12:	0c18      	lsrs	r0, r3, #16
	sigmaEstP2Tmp = (sigmaEstP2Tmp + cAmbEffWidthSigmaEst_ns/2)/
 8015d14:	3003      	adds	r0, #3
 8015d16:	2106      	movs	r1, #6
 8015d18:	f7ea fa1a 	bl	8000150 <__udivsi3>
		cAmbEffWidthSigmaEst_ns;
	sigmaEstP2Tmp *= cAmbEffWidthDMax_ns;
 8015d1c:	00c3      	lsls	r3, r0, #3
 8015d1e:	1a1b      	subs	r3, r3, r0

	if (sigmaEstP2Tmp > 0xffff) {
 8015d20:	2280      	movs	r2, #128	; 0x80
 8015d22:	0252      	lsls	r2, r2, #9
 8015d24:	4293      	cmp	r3, r2
 8015d26:	d246      	bcs.n	8015db6 <VL53L0X_calc_dmax+0xf2>

		/* DMAX uses a different ambient width from sigma, so apply
		 * correction.
		 * Perform division before multiplication to prevent overflow.
		 */
		sigmaEstimateP2 = (sigmaEstimateP2 + cAmbEffWidthSigmaEst_ns/2)/
 8015d28:	9b07      	ldr	r3, [sp, #28]
 8015d2a:	1cd8      	adds	r0, r3, #3
 8015d2c:	2106      	movs	r1, #6
 8015d2e:	f7ea fa0f 	bl	8000150 <__udivsi3>
			cAmbEffWidthSigmaEst_ns;
		sigmaEstimateP2 *= cAmbEffWidthDMax_ns;
 8015d32:	00c3      	lsls	r3, r0, #3
 8015d34:	1a18      	subs	r0, r3, r0

		/* FixPoint1616 >> 16 = uint32 */
		minSignalNeeded_p3 = (sigmaEstimateP2 + 0x8000) >> 16;
 8015d36:	2380      	movs	r3, #128	; 0x80
 8015d38:	021b      	lsls	r3, r3, #8
 8015d3a:	469c      	mov	ip, r3
 8015d3c:	4460      	add	r0, ip
 8015d3e:	0c00      	lsrs	r0, r0, #16

		minSignalNeeded_p3 *= minSignalNeeded_p3;
 8015d40:	4340      	muls	r0, r0

	/* uint32 + uint32 = uint32 */
	minSignalNeeded = (minSignalNeeded_p2 + minSignalNeeded_p3);

	/* uint32 / uint32 = uint32 */
	minSignalNeeded += (peakVcselDuration_us/2);
 8015d42:	9b08      	ldr	r3, [sp, #32]
 8015d44:	085b      	lsrs	r3, r3, #1
 8015d46:	195b      	adds	r3, r3, r5
 8015d48:	1818      	adds	r0, r3, r0
	minSignalNeeded /= peakVcselDuration_us;
 8015d4a:	9908      	ldr	r1, [sp, #32]
 8015d4c:	f7ea fa00 	bl	8000150 <__udivsi3>

	/* uint32 << 14 = FixPoint1814 */
	minSignalNeeded <<= 14;
 8015d50:	0380      	lsls	r0, r0, #14

	/* FixPoint1814 / FixPoint1814 = uint32 */
	minSignalNeeded += (minSignalNeeded_p4/2);
 8015d52:	307f      	adds	r0, #127	; 0x7f
	minSignalNeeded /= minSignalNeeded_p4;
 8015d54:	21fe      	movs	r1, #254	; 0xfe
 8015d56:	f7ea f9fb 	bl	8000150 <__udivsi3>

	/* FixPoint3200 * FixPoint2804 := FixPoint2804*/
	minSignalNeeded *= minSignalNeeded_p1;
 8015d5a:	4360      	muls	r0, r4
	 * and 10E-22 on the denominator.
	 * We do this because 32bit fix point calculation can't
	 * handle the larger and smaller elements of this equation,
	 * i.e. speed of light and pulse widths.
	 */
	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 8015d5c:	30f5      	adds	r0, #245	; 0xf5
 8015d5e:	30ff      	adds	r0, #255	; 0xff
 8015d60:	21fa      	movs	r1, #250	; 0xfa
 8015d62:	0089      	lsls	r1, r1, #2
 8015d64:	f7ea f9f4 	bl	8000150 <__udivsi3>
	minSignalNeeded <<= 4;
 8015d68:	0100      	lsls	r0, r0, #4

	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 8015d6a:	30f5      	adds	r0, #245	; 0xf5
 8015d6c:	30ff      	adds	r0, #255	; 0xff
 8015d6e:	0004      	movs	r4, r0
	/* FixPoint1616 >> 8 = FixPoint2408 */
	signalLimitTmp = (cSignalLimit + 0x80) >> 8;

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (signalLimitTmp != 0)
		dmaxDarkTmp = (SignalAt0mm + (signalLimitTmp / 2))
 8015d70:	0030      	movs	r0, r6
 8015d72:	3020      	adds	r0, #32
 8015d74:	0980      	lsrs	r0, r0, #6
			/ signalLimitTmp;
	else
		dmaxDarkTmp = 0;

	dmaxDark = VL53L0X_isqrt(dmaxDarkTmp);
 8015d76:	f7ff f93e 	bl	8014ff6 <VL53L0X_isqrt>
 8015d7a:	0005      	movs	r5, r0

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (minSignalNeeded != 0)
 8015d7c:	23fa      	movs	r3, #250	; 0xfa
 8015d7e:	009b      	lsls	r3, r3, #2
		dmaxAmbient = (SignalAt0mm + minSignalNeeded/2)
			/ minSignalNeeded;
	else
		dmaxAmbient = 0;
 8015d80:	2000      	movs	r0, #0
	if (minSignalNeeded != 0)
 8015d82:	429c      	cmp	r4, r3
 8015d84:	d30e      	bcc.n	8015da4 <VL53L0X_calc_dmax+0xe0>
		dmaxAmbient = (SignalAt0mm + minSignalNeeded/2)
 8015d86:	21fa      	movs	r1, #250	; 0xfa
 8015d88:	00c9      	lsls	r1, r1, #3
 8015d8a:	0020      	movs	r0, r4
 8015d8c:	f7ea f9e0 	bl	8000150 <__udivsi3>
 8015d90:	1986      	adds	r6, r0, r6
	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 8015d92:	21fa      	movs	r1, #250	; 0xfa
 8015d94:	0089      	lsls	r1, r1, #2
 8015d96:	0020      	movs	r0, r4
 8015d98:	f7ea f9da 	bl	8000150 <__udivsi3>
 8015d9c:	0001      	movs	r1, r0
		dmaxAmbient = (SignalAt0mm + minSignalNeeded/2)
 8015d9e:	0030      	movs	r0, r6
 8015da0:	f7ea f9d6 	bl	8000150 <__udivsi3>

	dmaxAmbient = VL53L0X_isqrt(dmaxAmbient);
 8015da4:	f7ff f927 	bl	8014ff6 <VL53L0X_isqrt>

	*pdmax_mm = dmaxDark;
 8015da8:	603d      	str	r5, [r7, #0]
	if (dmaxDark > dmaxAmbient)
 8015daa:	4285      	cmp	r5, r0
 8015dac:	d800      	bhi.n	8015db0 <VL53L0X_calc_dmax+0xec>
		*pdmax_mm = dmaxAmbient;
 8015dae:	0028      	movs	r0, r5
 8015db0:	6038      	str	r0, [r7, #0]

	LOG_FUNCTION_END(Status);

	return Status;
}
 8015db2:	2000      	movs	r0, #0
 8015db4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		minSignalNeeded_p3 = 0xfff00000;
 8015db6:	4801      	ldr	r0, [pc, #4]	; (8015dbc <VL53L0X_calc_dmax+0xf8>)
 8015db8:	e7c3      	b.n	8015d42 <VL53L0X_calc_dmax+0x7e>
 8015dba:	46c0      	nop			; (mov r8, r8)
 8015dbc:	fff00000 	.word	0xfff00000

08015dc0 <VL53L0X_calc_sigma_estimate>:

VL53L0X_Error VL53L0X_calc_sigma_estimate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *pSigmaEstimate,
	uint32_t *pDmax_mm)
{
 8015dc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015dc2:	46de      	mov	lr, fp
 8015dc4:	4657      	mov	r7, sl
 8015dc6:	464e      	mov	r6, r9
 8015dc8:	4645      	mov	r5, r8
 8015dca:	b5e0      	push	{r5, r6, r7, lr}
 8015dcc:	b08f      	sub	sp, #60	; 0x3c
 8015dce:	0004      	movs	r4, r0
 8015dd0:	000d      	movs	r5, r1
 8015dd2:	4693      	mov	fp, r2
 8015dd4:	9304      	str	r3, [sp, #16]
	 * Estimates the range sigma
	 */

	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps,
 8015dd6:	6a02      	ldr	r2, [r0, #32]
 8015dd8:	920d      	str	r2, [sp, #52]	; 0x34
	 * We work in kcps rather than mcps as this helps keep within the
	 * confines of the 32 Fix1616 type.
	 */

	ambientRate_kcps =
		(pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;
 8015dda:	690a      	ldr	r2, [r1, #16]
 8015ddc:	4690      	mov	r8, r2

	correctedSignalRate_mcps =
 8015dde:	68ca      	ldr	r2, [r1, #12]
 8015de0:	9205      	str	r2, [sp, #20]
		pRangingMeasurementData->SignalRateRtnMegaCps;


	Status = VL53L0X_get_total_signal_rate(
 8015de2:	aa0c      	add	r2, sp, #48	; 0x30
 8015de4:	f7ff ff5d 	bl	8015ca2 <VL53L0X_get_total_signal_rate>
		Dev, pRangingMeasurementData, &totalSignalRate_mcps);
	Status = VL53L0X_get_total_xtalk_rate(
 8015de8:	aa0d      	add	r2, sp, #52	; 0x34
 8015dea:	0029      	movs	r1, r5
 8015dec:	0020      	movs	r0, r4
 8015dee:	f7ff ff3e 	bl	8015c6e <VL53L0X_get_total_xtalk_rate>
	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;

	if (xTalkCompRate_kcps > cMaxXTalk_kcps)
		xTalkCompRate_kcps = cMaxXTalk_kcps;

	if (Status == VL53L0X_ERROR_NONE) {
 8015df2:	2800      	cmp	r0, #0
 8015df4:	d132      	bne.n	8015e5c <VL53L0X_calc_sigma_estimate+0x9c>

		/* Calculate final range macro periods */
		finalRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8015df6:	23dc      	movs	r3, #220	; 0xdc
 8015df8:	58e2      	ldr	r2, [r4, r3]
 8015dfa:	9206      	str	r2, [sp, #24]
			Dev, FinalRangeTimeoutMicroSecs);

		finalRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8015dfc:	3304      	adds	r3, #4
 8015dfe:	5ce2      	ldrb	r2, [r4, r3]
 8015e00:	4692      	mov	sl, r2

		finalRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
			Dev, finalRangeTimeoutMicroSecs, finalRangeVcselPCLKS);

		/* Calculate pre-range macro periods */
		preRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8015e02:	3304      	adds	r3, #4
 8015e04:	58e2      	ldr	r2, [r4, r3]
 8015e06:	9207      	str	r2, [sp, #28]
			Dev, PreRangeTimeoutMicroSecs);

		preRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8015e08:	3304      	adds	r3, #4
 8015e0a:	5ce2      	ldrb	r2, [r4, r3]
		preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
			Dev, preRangeTimeoutMicroSecs, preRangeVcselPCLKS);

		vcselWidth = 3;
		if (finalRangeVcselPCLKS == 8)
			vcselWidth = 2;
 8015e0c:	4657      	mov	r7, sl
 8015e0e:	3f08      	subs	r7, #8
 8015e10:	1e7b      	subs	r3, r7, #1
 8015e12:	419f      	sbcs	r7, r3
 8015e14:	3702      	adds	r7, #2
	peakSignalRate_kcps = (totalSignalRate_mcps * 1000);
 8015e16:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8015e18:	0173      	lsls	r3, r6, #5
 8015e1a:	1b9b      	subs	r3, r3, r6
 8015e1c:	009b      	lsls	r3, r3, #2
 8015e1e:	199b      	adds	r3, r3, r6
 8015e20:	00db      	lsls	r3, r3, #3
	peakSignalRate_kcps = (peakSignalRate_kcps + 0x8000) >> 16;
 8015e22:	4699      	mov	r9, r3
 8015e24:	2180      	movs	r1, #128	; 0x80
 8015e26:	0209      	lsls	r1, r1, #8
 8015e28:	468c      	mov	ip, r1
 8015e2a:	44e1      	add	r9, ip
 8015e2c:	4649      	mov	r1, r9
 8015e2e:	9109      	str	r1, [sp, #36]	; 0x24
 8015e30:	0c09      	lsrs	r1, r1, #16
 8015e32:	4689      	mov	r9, r1
	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;
 8015e34:	990d      	ldr	r1, [sp, #52]	; 0x34
 8015e36:	910a      	str	r1, [sp, #40]	; 0x28
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
		peakVcselDuration_us *= cPllPeriod_ps;
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;

		/* Fix1616 >> 8 = Fix2408 */
		totalSignalRate_mcps = (totalSignalRate_mcps + 0x80) >> 8;
 8015e38:	3680      	adds	r6, #128	; 0x80

		/* Fix2408 >> 8 = uint32 */
		vcselTotalEventsRtn = (vcselTotalEventsRtn + 0x80) >> 8;

		/* Fix2408 << 8 = Fix1616 = */
		totalSignalRate_mcps <<= 8;
 8015e3a:	23ff      	movs	r3, #255	; 0xff
 8015e3c:	0031      	movs	r1, r6
 8015e3e:	4399      	bics	r1, r3
 8015e40:	9108      	str	r1, [sp, #32]
 8015e42:	910c      	str	r1, [sp, #48]	; 0x30
	if (Status != VL53L0X_ERROR_NONE) {
		LOG_FUNCTION_END(Status);
		return Status;
	}

	if (peakSignalRate_kcps == 0) {
 8015e44:	4649      	mov	r1, r9
 8015e46:	2900      	cmp	r1, #0
 8015e48:	d10f      	bne.n	8015e6a <VL53L0X_calc_sigma_estimate+0xaa>
		*pSigmaEstimate = cSigmaEstMax;
 8015e4a:	4b81      	ldr	r3, [pc, #516]	; (8016050 <VL53L0X_calc_sigma_estimate+0x290>)
 8015e4c:	465a      	mov	r2, fp
 8015e4e:	6013      	str	r3, [r2, #0]
		PALDevDataSet(Dev, SigmaEstimate, cSigmaEstMax);
 8015e50:	22a0      	movs	r2, #160	; 0xa0
 8015e52:	0052      	lsls	r2, r2, #1
 8015e54:	50a3      	str	r3, [r4, r2]
		*pDmax_mm = 0;
 8015e56:	2300      	movs	r3, #0
 8015e58:	9a04      	ldr	r2, [sp, #16]
 8015e5a:	6013      	str	r3, [r2, #0]
			pDmax_mm);
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
 8015e5c:	b00f      	add	sp, #60	; 0x3c
 8015e5e:	bcf0      	pop	{r4, r5, r6, r7}
 8015e60:	46bb      	mov	fp, r7
 8015e62:	46b2      	mov	sl, r6
 8015e64:	46a9      	mov	r9, r5
 8015e66:	46a0      	mov	r8, r4
 8015e68:	bdf0      	pop	{r4, r5, r6, r7, pc}
		preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 8015e6a:	9907      	ldr	r1, [sp, #28]
 8015e6c:	0020      	movs	r0, r4
 8015e6e:	f7ff fc01 	bl	8015674 <VL53L0X_calc_timeout_mclks>
 8015e72:	900b      	str	r0, [sp, #44]	; 0x2c
		finalRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 8015e74:	4652      	mov	r2, sl
 8015e76:	9906      	ldr	r1, [sp, #24]
 8015e78:	0020      	movs	r0, r4
 8015e7a:	f7ff fbfb 	bl	8015674 <VL53L0X_calc_timeout_mclks>
			(preRangeMacroPCLKS + finalRangeMacroPCLKS);
 8015e7e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015e80:	469c      	mov	ip, r3
 8015e82:	4460      	add	r0, ip
		peakVcselDuration_us = vcselWidth * 2048 *
 8015e84:	4347      	muls	r7, r0
 8015e86:	02ff      	lsls	r7, r7, #11
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 8015e88:	0038      	movs	r0, r7
 8015e8a:	30f5      	adds	r0, #245	; 0xf5
 8015e8c:	30ff      	adds	r0, #255	; 0xff
 8015e8e:	21fa      	movs	r1, #250	; 0xfa
 8015e90:	0089      	lsls	r1, r1, #2
 8015e92:	f7ea f95d 	bl	8000150 <__udivsi3>
		peakVcselDuration_us *= cPllPeriod_ps;
 8015e96:	4b6f      	ldr	r3, [pc, #444]	; (8016054 <VL53L0X_calc_sigma_estimate+0x294>)
 8015e98:	4358      	muls	r0, r3
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 8015e9a:	30f5      	adds	r0, #245	; 0xf5
 8015e9c:	30ff      	adds	r0, #255	; 0xff
 8015e9e:	21fa      	movs	r1, #250	; 0xfa
 8015ea0:	0089      	lsls	r1, r1, #2
 8015ea2:	f7ea f955 	bl	8000150 <__udivsi3>
 8015ea6:	4682      	mov	sl, r0
		totalSignalRate_mcps = (totalSignalRate_mcps + 0x80) >> 8;
 8015ea8:	0a36      	lsrs	r6, r6, #8
		vcselTotalEventsRtn = totalSignalRate_mcps *
 8015eaa:	4346      	muls	r6, r0
		vcselTotalEventsRtn = (vcselTotalEventsRtn + 0x80) >> 8;
 8015eac:	3680      	adds	r6, #128	; 0x80
 8015eae:	0a36      	lsrs	r6, r6, #8
		(pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;
 8015eb0:	4643      	mov	r3, r8
 8015eb2:	0158      	lsls	r0, r3, #5
 8015eb4:	1ac0      	subs	r0, r0, r3
 8015eb6:	0080      	lsls	r0, r0, #2
 8015eb8:	4440      	add	r0, r8
 8015eba:	00c0      	lsls	r0, r0, #3
		sigmaEstimateP2 = (ambientRate_kcps << 16)/peakSignalRate_kcps;
 8015ebc:	0c00      	lsrs	r0, r0, #16
 8015ebe:	0400      	lsls	r0, r0, #16
 8015ec0:	4649      	mov	r1, r9
 8015ec2:	f7ea f945 	bl	8000150 <__udivsi3>
		if (sigmaEstimateP2 > cAmbToSignalRatioMax) {
 8015ec6:	4b64      	ldr	r3, [pc, #400]	; (8016058 <VL53L0X_calc_sigma_estimate+0x298>)
 8015ec8:	4298      	cmp	r0, r3
 8015eca:	d900      	bls.n	8015ece <VL53L0X_calc_sigma_estimate+0x10e>
 8015ecc:	0018      	movs	r0, r3
		sigmaEstimateP2 *= cAmbientEffectiveWidth_centi_ns;
 8015ece:	0083      	lsls	r3, r0, #2
 8015ed0:	1818      	adds	r0, r3, r0
 8015ed2:	0103      	lsls	r3, r0, #4
 8015ed4:	1a18      	subs	r0, r3, r0
 8015ed6:	00c3      	lsls	r3, r0, #3
 8015ed8:	4698      	mov	r8, r3
		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 8015eda:	2e00      	cmp	r6, #0
 8015edc:	d100      	bne.n	8015ee0 <VL53L0X_calc_sigma_estimate+0x120>
 8015ede:	3601      	adds	r6, #1
 8015ee0:	0070      	lsls	r0, r6, #1
 8015ee2:	1980      	adds	r0, r0, r6
 8015ee4:	0080      	lsls	r0, r0, #2
 8015ee6:	f7ff f886 	bl	8014ff6 <VL53L0X_isqrt>
 8015eea:	0046      	lsls	r6, r0, #1
		deltaT_ps = pRangingMeasurementData->RangeMilliMeter *
 8015eec:	892a      	ldrh	r2, [r5, #8]
		if(pRangingMeasurementData->RangeStatus != 0){
 8015eee:	7e2b      	ldrb	r3, [r5, #24]
 8015ef0:	2b00      	cmp	r3, #0
 8015ef2:	d13d      	bne.n	8015f70 <VL53L0X_calc_sigma_estimate+0x1b0>
		deltaT_ps = pRangingMeasurementData->RangeMilliMeter *
 8015ef4:	4859      	ldr	r0, [pc, #356]	; (801605c <VL53L0X_calc_sigma_estimate+0x29c>)
 8015ef6:	4350      	muls	r0, r2
			pwMult = deltaT_ps/cVcselPulseWidth_ps; /* smaller than 1.0f */
 8015ef8:	4959      	ldr	r1, [pc, #356]	; (8016060 <VL53L0X_calc_sigma_estimate+0x2a0>)
 8015efa:	f7ea f929 	bl	8000150 <__udivsi3>
 8015efe:	4681      	mov	r9, r0
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 8015f00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015f02:	0c1d      	lsrs	r5, r3, #16
 8015f04:	042d      	lsls	r5, r5, #16
 8015f06:	35f5      	adds	r5, #245	; 0xf5
 8015f08:	35ff      	adds	r5, #255	; 0xff
	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;
 8015f0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015f0c:	0158      	lsls	r0, r3, #5
 8015f0e:	1ac0      	subs	r0, r0, r3
 8015f10:	0080      	lsls	r0, r0, #2
 8015f12:	469c      	mov	ip, r3
 8015f14:	4460      	add	r0, ip
			2 * xTalkCompRate_kcps) + 500)/1000;
 8015f16:	00c0      	lsls	r0, r0, #3
 8015f18:	23c8      	movs	r3, #200	; 0xc8
 8015f1a:	039b      	lsls	r3, r3, #14
 8015f1c:	4298      	cmp	r0, r3
 8015f1e:	d900      	bls.n	8015f22 <VL53L0X_calc_sigma_estimate+0x162>
 8015f20:	0018      	movs	r0, r3
 8015f22:	0040      	lsls	r0, r0, #1
 8015f24:	1a28      	subs	r0, r5, r0
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 8015f26:	21fa      	movs	r1, #250	; 0xfa
 8015f28:	0089      	lsls	r1, r1, #2
 8015f2a:	f7ea f911 	bl	8000150 <__udivsi3>
		diff1_mcps <<= 8;
 8015f2e:	0207      	lsls	r7, r0, #8
		diff2_mcps = ((peakSignalRate_kcps << 16) + 500)/1000;
 8015f30:	21fa      	movs	r1, #250	; 0xfa
 8015f32:	0089      	lsls	r1, r1, #2
 8015f34:	0028      	movs	r0, r5
 8015f36:	f7ea f90b 	bl	8000150 <__udivsi3>
 8015f3a:	0001      	movs	r1, r0
		xTalkCorrection	 = abs(diff1_mcps/diff2_mcps);
 8015f3c:	0038      	movs	r0, r7
 8015f3e:	f7ea f907 	bl	8000150 <__udivsi3>
 8015f42:	17c3      	asrs	r3, r0, #31
 8015f44:	18c0      	adds	r0, r0, r3
 8015f46:	4058      	eors	r0, r3
		xTalkCorrection <<= 8;
 8015f48:	0200      	lsls	r0, r0, #8
			pwMult *= ((1 << 16) - xTalkCorrection);
 8015f4a:	2580      	movs	r5, #128	; 0x80
 8015f4c:	026d      	lsls	r5, r5, #9
 8015f4e:	1a2d      	subs	r5, r5, r0
 8015f50:	464b      	mov	r3, r9
 8015f52:	436b      	muls	r3, r5
 8015f54:	001d      	movs	r5, r3
			pwMult =  (pwMult + c16BitRoundingParam) >> 16;
 8015f56:	2380      	movs	r3, #128	; 0x80
 8015f58:	021b      	lsls	r3, r3, #8
 8015f5a:	469c      	mov	ip, r3
 8015f5c:	4465      	add	r5, ip
 8015f5e:	0c2d      	lsrs	r5, r5, #16
			pwMult += (1 << 16);
 8015f60:	2380      	movs	r3, #128	; 0x80
 8015f62:	025b      	lsls	r3, r3, #9
 8015f64:	469c      	mov	ip, r3
 8015f66:	4465      	add	r5, ip
			pwMult >>= 1;
 8015f68:	086d      	lsrs	r5, r5, #1
			pwMult = pwMult * pwMult;
 8015f6a:	436d      	muls	r5, r5
			pwMult >>= 14;
 8015f6c:	0bad      	lsrs	r5, r5, #14
 8015f6e:	e001      	b.n	8015f74 <VL53L0X_calc_sigma_estimate+0x1b4>
			pwMult = 1 << 16;
 8015f70:	2580      	movs	r5, #128	; 0x80
 8015f72:	026d      	lsls	r5, r5, #9
		sqr1 = pwMult * sigmaEstimateP1;
 8015f74:	00a8      	lsls	r0, r5, #2
 8015f76:	1940      	adds	r0, r0, r5
 8015f78:	0083      	lsls	r3, r0, #2
 8015f7a:	18c0      	adds	r0, r0, r3
 8015f7c:	0140      	lsls	r0, r0, #5
		sqr1 = (sqr1 + 0x8000) >> 16;
 8015f7e:	2380      	movs	r3, #128	; 0x80
 8015f80:	021b      	lsls	r3, r3, #8
 8015f82:	469c      	mov	ip, r3
 8015f84:	4460      	add	r0, ip
 8015f86:	0c00      	lsrs	r0, r0, #16
		sqr2 = (sqr2 + 0x8000) >> 16;
 8015f88:	4443      	add	r3, r8
 8015f8a:	0c1b      	lsrs	r3, r3, #16
		sqr1 *= sqr1;
 8015f8c:	4340      	muls	r0, r0
		sqr2 *= sqr2;
 8015f8e:	435b      	muls	r3, r3
		sqrSum = sqr1 + sqr2;
 8015f90:	18c0      	adds	r0, r0, r3
		sqrtResult_centi_ns = VL53L0X_isqrt(sqrSum);
 8015f92:	f7ff f830 	bl	8014ff6 <VL53L0X_isqrt>
		sqrtResult_centi_ns <<= 16;
 8015f96:	0400      	lsls	r0, r0, #16
		sigmaEstRtn = (((sqrtResult_centi_ns+50)/100) /
 8015f98:	3032      	adds	r0, #50	; 0x32
 8015f9a:	2164      	movs	r1, #100	; 0x64
 8015f9c:	f7ea f8d8 	bl	8000150 <__udivsi3>
 8015fa0:	0031      	movs	r1, r6
 8015fa2:	f7ea f8d5 	bl	8000150 <__udivsi3>
		sigmaEstRtn		 *= VL53L0X_SPEED_OF_LIGHT_IN_AIR;
 8015fa6:	4b2f      	ldr	r3, [pc, #188]	; (8016064 <VL53L0X_calc_sigma_estimate+0x2a4>)
 8015fa8:	4358      	muls	r0, r3
		sigmaEstRtn		 += 5000;
 8015faa:	4b2f      	ldr	r3, [pc, #188]	; (8016068 <VL53L0X_calc_sigma_estimate+0x2a8>)
 8015fac:	469c      	mov	ip, r3
 8015fae:	4460      	add	r0, ip
		if (sigmaEstRtn > cSigmaEstRtnMax) {
 8015fb0:	4b2e      	ldr	r3, [pc, #184]	; (801606c <VL53L0X_calc_sigma_estimate+0x2ac>)
 8015fb2:	4298      	cmp	r0, r3
 8015fb4:	d849      	bhi.n	801604a <VL53L0X_calc_sigma_estimate+0x28a>
		sigmaEstRtn		 /= 10000;
 8015fb6:	492e      	ldr	r1, [pc, #184]	; (8016070 <VL53L0X_calc_sigma_estimate+0x2b0>)
 8015fb8:	f7ea f8ca 	bl	8000150 <__udivsi3>
 8015fbc:	0007      	movs	r7, r0
			(finalRangeTimeoutMicroSecs + preRangeTimeoutMicroSecs + 500)/1000;
 8015fbe:	9b06      	ldr	r3, [sp, #24]
 8015fc0:	9a07      	ldr	r2, [sp, #28]
 8015fc2:	4694      	mov	ip, r2
 8015fc4:	4463      	add	r3, ip
 8015fc6:	001e      	movs	r6, r3
 8015fc8:	36f5      	adds	r6, #245	; 0xf5
 8015fca:	36ff      	adds	r6, #255	; 0xff
				finalRangeIntegrationTimeMilliSecs/2)/
 8015fcc:	21fa      	movs	r1, #250	; 0xfa
 8015fce:	00c9      	lsls	r1, r1, #3
 8015fd0:	0030      	movs	r0, r6
 8015fd2:	f7ea f8bd 	bl	8000150 <__udivsi3>
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
 8015fd6:	23c8      	movs	r3, #200	; 0xc8
 8015fd8:	035b      	lsls	r3, r3, #13
 8015fda:	4699      	mov	r9, r3
 8015fdc:	4481      	add	r9, r0
		finalRangeIntegrationTimeMilliSecs =
 8015fde:	21fa      	movs	r1, #250	; 0xfa
 8015fe0:	0089      	lsls	r1, r1, #2
 8015fe2:	0030      	movs	r0, r6
 8015fe4:	f7ea f8b4 	bl	8000150 <__udivsi3>
 8015fe8:	0001      	movs	r1, r0
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
 8015fea:	4648      	mov	r0, r9
 8015fec:	f7ea f8b0 	bl	8000150 <__udivsi3>
 8015ff0:	f7ff f801 	bl	8014ff6 <VL53L0X_isqrt>
		sigmaEstRef <<= 8;
 8015ff4:	0200      	lsls	r0, r0, #8
		sigmaEstRef = (sigmaEstRef + 500)/1000;
 8015ff6:	30f5      	adds	r0, #245	; 0xf5
 8015ff8:	30ff      	adds	r0, #255	; 0xff
 8015ffa:	21fa      	movs	r1, #250	; 0xfa
 8015ffc:	0089      	lsls	r1, r1, #2
 8015ffe:	f7ea f8a7 	bl	8000150 <__udivsi3>
		sqr1 = sigmaEstRtn * sigmaEstRtn;
 8016002:	437f      	muls	r7, r7
		sqr2 = sigmaEstRef * sigmaEstRef;
 8016004:	4340      	muls	r0, r0
		sqrtResult = VL53L0X_isqrt((sqr1 + sqr2));
 8016006:	1838      	adds	r0, r7, r0
 8016008:	f7fe fff5 	bl	8014ff6 <VL53L0X_isqrt>
 801600c:	0002      	movs	r2, r0
		sigmaEstimate	 = 1000 * sqrtResult;
 801600e:	0140      	lsls	r0, r0, #5
 8016010:	1a80      	subs	r0, r0, r2
 8016012:	0080      	lsls	r0, r0, #2
 8016014:	1880      	adds	r0, r0, r2
		if ((peakSignalRate_kcps < 1) || (vcselTotalEventsRtn < 1) ||
 8016016:	00c0      	lsls	r0, r0, #3
 8016018:	4b0d      	ldr	r3, [pc, #52]	; (8016050 <VL53L0X_calc_sigma_estimate+0x290>)
 801601a:	4298      	cmp	r0, r3
 801601c:	d900      	bls.n	8016020 <VL53L0X_calc_sigma_estimate+0x260>
 801601e:	0018      	movs	r0, r3
		*pSigmaEstimate = (uint32_t)(sigmaEstimate);
 8016020:	465b      	mov	r3, fp
 8016022:	6018      	str	r0, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, *pSigmaEstimate);
 8016024:	23a0      	movs	r3, #160	; 0xa0
 8016026:	005b      	lsls	r3, r3, #1
 8016028:	50e0      	str	r0, [r4, r3]
		Status = VL53L0X_calc_dmax(
 801602a:	9b04      	ldr	r3, [sp, #16]
 801602c:	9303      	str	r3, [sp, #12]
 801602e:	4653      	mov	r3, sl
 8016030:	9302      	str	r3, [sp, #8]
 8016032:	4643      	mov	r3, r8
 8016034:	9301      	str	r3, [sp, #4]
 8016036:	23c8      	movs	r3, #200	; 0xc8
 8016038:	009b      	lsls	r3, r3, #2
 801603a:	9300      	str	r3, [sp, #0]
 801603c:	002b      	movs	r3, r5
 801603e:	9a05      	ldr	r2, [sp, #20]
 8016040:	9908      	ldr	r1, [sp, #32]
 8016042:	0020      	movs	r0, r4
 8016044:	f7ff fe3e 	bl	8015cc4 <VL53L0X_calc_dmax>
 8016048:	e708      	b.n	8015e5c <VL53L0X_calc_sigma_estimate+0x9c>
			sigmaEstRtn = cSigmaEstRtnMax;
 801604a:	27f0      	movs	r7, #240	; 0xf0
 801604c:	023f      	lsls	r7, r7, #8
 801604e:	e7b6      	b.n	8015fbe <VL53L0X_calc_sigma_estimate+0x1fe>
 8016050:	028f87ae 	.word	0x028f87ae
 8016054:	00000677 	.word	0x00000677
 8016058:	00666666 	.word	0x00666666
 801605c:	0006999a 	.word	0x0006999a
 8016060:	0000125c 	.word	0x0000125c
 8016064:	00000bb5 	.word	0x00000bb5
 8016068:	00001388 	.word	0x00001388
 801606c:	249f270f 	.word	0x249f270f
 8016070:	00002710 	.word	0x00002710

08016074 <VL53L0X_get_pal_range_status>:
		uint8_t DeviceRangeStatus,
		FixPoint1616_t SignalRate,
		uint16_t EffectiveSpadRtnCount,
		VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
		uint8_t *pPalRangeStatus)
{
 8016074:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016076:	46de      	mov	lr, fp
 8016078:	4657      	mov	r7, sl
 801607a:	464e      	mov	r6, r9
 801607c:	4645      	mov	r5, r8
 801607e:	b5e0      	push	{r5, r6, r7, lr}
 8016080:	b08b      	sub	sp, #44	; 0x2c
 8016082:	0004      	movs	r4, r0
 8016084:	9201      	str	r2, [sp, #4]
 8016086:	9300      	str	r3, [sp, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint8_t NoneFlag;
	uint8_t SigmaLimitflag = 0;
	uint8_t SignalRefClipflag = 0;
	uint8_t RangeIgnoreThresholdflag = 0;
	uint8_t SigmaLimitCheckEnable = 0;
 8016088:	2300      	movs	r3, #0
 801608a:	aa02      	add	r2, sp, #8
 801608c:	77d3      	strb	r3, [r2, #31]
	uint8_t SignalRateFinalRangeLimitCheckEnable = 0;
 801608e:	221e      	movs	r2, #30
 8016090:	a802      	add	r0, sp, #8
 8016092:	4684      	mov	ip, r0
 8016094:	4462      	add	r2, ip
 8016096:	7013      	strb	r3, [r2, #0]
	uint8_t SignalRefClipLimitCheckEnable = 0;
 8016098:	221d      	movs	r2, #29
 801609a:	4462      	add	r2, ip
 801609c:	7013      	strb	r3, [r2, #0]
	uint8_t RangeIgnoreThresholdLimitCheckEnable = 0;
 801609e:	aa09      	add	r2, sp, #36	; 0x24
 80160a0:	7013      	strb	r3, [r2, #0]
	FixPoint1616_t SigmaLimitValue;
	FixPoint1616_t SignalRefClipValue;
	FixPoint1616_t RangeIgnoreThresholdValue;
	FixPoint1616_t SignalRatePerSpad;
	uint8_t DeviceRangeStatusInternal = 0;
	uint16_t tmpWord = 0;
 80160a2:	220a      	movs	r2, #10
 80160a4:	4462      	add	r2, ip
 80160a6:	8013      	strh	r3, [r2, #0]
	uint8_t Temp8;
	uint32_t Dmax_mm = 0;
 80160a8:	9303      	str	r3, [sp, #12]
	 * the value 11 in the DeviceRangeStatus.
	 * In addition, the SigmaEstimator is not included in the VL53L0X
	 * DeviceRangeStatus, this will be added in the PalRangeStatus.
	 */

	DeviceRangeStatusInternal = ((DeviceRangeStatus & 0x78) >> 3);
 80160aa:	08ce      	lsrs	r6, r1, #3
 80160ac:	250f      	movs	r5, #15
 80160ae:	4035      	ands	r5, r6

	if (DeviceRangeStatusInternal == 0 ||
 80160b0:	4b9b      	ldr	r3, [pc, #620]	; (8016320 <VL53L0X_get_pal_range_status+0x2ac>)
 80160b2:	40eb      	lsrs	r3, r5
 80160b4:	2201      	movs	r2, #1
 80160b6:	401a      	ands	r2, r3
 80160b8:	4690      	mov	r8, r2
	/*
	 * Check if Sigma limit is enabled, if yes then do comparison with limit
	 * value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 80160ba:	231f      	movs	r3, #31
 80160bc:	4463      	add	r3, ip
 80160be:	001a      	movs	r2, r3
 80160c0:	2100      	movs	r1, #0
 80160c2:	0020      	movs	r0, r4
 80160c4:	f7fd fd7a 	bl	8013bbc <VL53L0X_GetLimitCheckEnable>
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
			&SigmaLimitCheckEnable);

	if ((SigmaLimitCheckEnable != 0) && (Status == VL53L0X_ERROR_NONE)) {
 80160c8:	ab02      	add	r3, sp, #8
 80160ca:	7fdb      	ldrb	r3, [r3, #31]
 80160cc:	469b      	mov	fp, r3
 80160ce:	2b00      	cmp	r3, #0
 80160d0:	d100      	bne.n	80160d4 <VL53L0X_get_pal_range_status+0x60>
 80160d2:	e07f      	b.n	80161d4 <VL53L0X_get_pal_range_status+0x160>
 80160d4:	2800      	cmp	r0, #0
 80160d6:	d063      	beq.n	80161a0 <VL53L0X_get_pal_range_status+0x12c>
	uint8_t SigmaLimitflag = 0;
 80160d8:	2300      	movs	r3, #0
 80160da:	469b      	mov	fp, r3
	if (Status == VL53L0X_ERROR_NONE)
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipLimitCheckEnable);

	if ((SignalRefClipLimitCheckEnable != 0) &&
 80160dc:	231d      	movs	r3, #29
 80160de:	aa02      	add	r2, sp, #8
 80160e0:	4694      	mov	ip, r2
 80160e2:	4463      	add	r3, ip
 80160e4:	781f      	ldrb	r7, [r3, #0]
 80160e6:	2f00      	cmp	r7, #0
 80160e8:	d100      	bne.n	80160ec <VL53L0X_get_pal_range_status+0x78>
 80160ea:	e096      	b.n	801621a <VL53L0X_get_pal_range_status+0x1a6>
 80160ec:	2800      	cmp	r0, #0
 80160ee:	d100      	bne.n	80160f2 <VL53L0X_get_pal_range_status+0x7e>
 80160f0:	e07c      	b.n	80161ec <VL53L0X_get_pal_range_status+0x178>
	if (Status == VL53L0X_ERROR_NONE)
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdLimitCheckEnable);

	if ((RangeIgnoreThresholdLimitCheckEnable != 0) &&
 80160f2:	ab09      	add	r3, sp, #36	; 0x24
 80160f4:	781b      	ldrb	r3, [r3, #0]
 80160f6:	4699      	mov	r9, r3
	uint8_t SignalRefClipflag = 0;
 80160f8:	1e1f      	subs	r7, r3, #0
	if ((RangeIgnoreThresholdLimitCheckEnable != 0) &&
 80160fa:	d100      	bne.n	80160fe <VL53L0X_get_pal_range_status+0x8a>
 80160fc:	e0d3      	b.n	80162a6 <VL53L0X_get_pal_range_status+0x232>
	uint8_t SignalRefClipflag = 0;
 80160fe:	2700      	movs	r7, #0
	uint8_t RangeIgnoreThresholdflag = 0;
 8016100:	2300      	movs	r3, #0
 8016102:	4699      	mov	r9, r3
			*pPalRangeStatus = 0; /* Range Valid */
		}
	}

	/* DMAX only relevant during range error */
	if (*pPalRangeStatus == 0)
 8016104:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016106:	781b      	ldrb	r3, [r3, #0]
 8016108:	2b00      	cmp	r3, #0
 801610a:	d102      	bne.n	8016112 <VL53L0X_get_pal_range_status+0x9e>
		pRangingMeasurementData->RangeDMaxMilliMeter = 0;
 801610c:	2300      	movs	r3, #0
 801610e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8016110:	8153      	strh	r3, [r2, #10]

	/* fill the Limit Check Status */

	Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8016112:	221e      	movs	r2, #30
 8016114:	ab02      	add	r3, sp, #8
 8016116:	469c      	mov	ip, r3
 8016118:	4462      	add	r2, ip
 801611a:	2101      	movs	r1, #1
 801611c:	0020      	movs	r0, r4
 801611e:	f7fd fd4d 	bl	8013bbc <VL53L0X_GetLimitCheckEnable>
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&SignalRateFinalRangeLimitCheckEnable);

	if (Status == VL53L0X_ERROR_NONE) {
 8016122:	2800      	cmp	r0, #0
 8016124:	d135      	bne.n	8016192 <VL53L0X_get_pal_range_status+0x11e>
		if ((SigmaLimitCheckEnable == 0) || (SigmaLimitflag == 1))
 8016126:	231f      	movs	r3, #31
 8016128:	aa02      	add	r2, sp, #8
 801612a:	4694      	mov	ip, r2
 801612c:	4463      	add	r3, ip
 801612e:	781a      	ldrb	r2, [r3, #0]
			Temp8 = 1;
 8016130:	2301      	movs	r3, #1
		if ((SigmaLimitCheckEnable == 0) || (SigmaLimitflag == 1))
 8016132:	2a00      	cmp	r2, #0
 8016134:	d004      	beq.n	8016140 <VL53L0X_get_pal_range_status+0xcc>
 8016136:	465b      	mov	r3, fp
 8016138:	3b01      	subs	r3, #1
 801613a:	425a      	negs	r2, r3
 801613c:	4153      	adcs	r3, r2
			Temp8 = 1;
 801613e:	b2db      	uxtb	r3, r3
		else
			Temp8 = 0;
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8016140:	222e      	movs	r2, #46	; 0x2e
 8016142:	54a3      	strb	r3, [r4, r2]
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

		if ((DeviceRangeStatusInternal == 4) ||
 8016144:	2d04      	cmp	r5, #4
 8016146:	d100      	bne.n	801614a <VL53L0X_get_pal_range_status+0xd6>
 8016148:	e0e7      	b.n	801631a <VL53L0X_get_pal_range_status+0x2a6>
				(SignalRateFinalRangeLimitCheckEnable == 0))
 801614a:	231e      	movs	r3, #30
 801614c:	aa02      	add	r2, sp, #8
 801614e:	4694      	mov	ip, r2
 8016150:	4463      	add	r3, ip
		if ((DeviceRangeStatusInternal == 4) ||
 8016152:	781b      	ldrb	r3, [r3, #0]
 8016154:	425a      	negs	r2, r3
 8016156:	4153      	adcs	r3, r2
			Temp8 = 1;
 8016158:	b2db      	uxtb	r3, r3
		else
			Temp8 = 0;
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 801615a:	222f      	movs	r2, #47	; 0x2f
 801615c:	54a3      	strb	r3, [r4, r2]
				VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				Temp8);

		if ((SignalRefClipLimitCheckEnable == 0) ||
 801615e:	231d      	movs	r3, #29
 8016160:	aa02      	add	r2, sp, #8
 8016162:	4694      	mov	ip, r2
 8016164:	4463      	add	r3, ip
 8016166:	781a      	ldrb	r2, [r3, #0]
					(SignalRefClipflag == 1))
			Temp8 = 1;
 8016168:	2301      	movs	r3, #1
		if ((SignalRefClipLimitCheckEnable == 0) ||
 801616a:	2a00      	cmp	r2, #0
 801616c:	d003      	beq.n	8016176 <VL53L0X_get_pal_range_status+0x102>
 801616e:	3f01      	subs	r7, #1
 8016170:	427b      	negs	r3, r7
 8016172:	417b      	adcs	r3, r7
			Temp8 = 1;
 8016174:	b2db      	uxtb	r3, r3
		else
			Temp8 = 0;

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8016176:	2230      	movs	r2, #48	; 0x30
 8016178:	54a3      	strb	r3, [r4, r2]
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, Temp8);

		if ((RangeIgnoreThresholdLimitCheckEnable == 0) ||
 801617a:	ab09      	add	r3, sp, #36	; 0x24
 801617c:	781a      	ldrb	r2, [r3, #0]
				(RangeIgnoreThresholdflag == 1))
			Temp8 = 1;
 801617e:	2301      	movs	r3, #1
		if ((RangeIgnoreThresholdLimitCheckEnable == 0) ||
 8016180:	2a00      	cmp	r2, #0
 8016182:	d004      	beq.n	801618e <VL53L0X_get_pal_range_status+0x11a>
 8016184:	464b      	mov	r3, r9
 8016186:	3b01      	subs	r3, #1
 8016188:	425a      	negs	r2, r3
 801618a:	4153      	adcs	r3, r2
			Temp8 = 1;
 801618c:	b2db      	uxtb	r3, r3
		else
			Temp8 = 0;

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 801618e:	2231      	movs	r2, #49	; 0x31
 8016190:	54a3      	strb	r3, [r4, r2]
	}

	LOG_FUNCTION_END(Status);
	return Status;

}
 8016192:	b00b      	add	sp, #44	; 0x2c
 8016194:	bcf0      	pop	{r4, r5, r6, r7}
 8016196:	46bb      	mov	fp, r7
 8016198:	46b2      	mov	sl, r6
 801619a:	46a9      	mov	r9, r5
 801619c:	46a0      	mov	r8, r4
 801619e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		Status = VL53L0X_calc_sigma_estimate(
 80161a0:	ab03      	add	r3, sp, #12
 80161a2:	aa08      	add	r2, sp, #32
 80161a4:	9914      	ldr	r1, [sp, #80]	; 0x50
 80161a6:	0020      	movs	r0, r4
 80161a8:	f7ff fe0a 	bl	8015dc0 <VL53L0X_calc_sigma_estimate>
		if (Status == VL53L0X_ERROR_NONE)
 80161ac:	2800      	cmp	r0, #0
 80161ae:	d193      	bne.n	80160d8 <VL53L0X_get_pal_range_status+0x64>
			pRangingMeasurementData->RangeDMaxMilliMeter = Dmax_mm;
 80161b0:	9b03      	ldr	r3, [sp, #12]
 80161b2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80161b4:	8153      	strh	r3, [r2, #10]
			Status = VL53L0X_GetLimitCheckValue(Dev,
 80161b6:	aa07      	add	r2, sp, #28
 80161b8:	2100      	movs	r1, #0
 80161ba:	0020      	movs	r0, r4
 80161bc:	f7fd fd3e 	bl	8013c3c <VL53L0X_GetLimitCheckValue>
			if ((SigmaLimitValue > 0) &&
 80161c0:	9b07      	ldr	r3, [sp, #28]
	uint8_t SigmaLimitflag = 0;
 80161c2:	2200      	movs	r2, #0
 80161c4:	4693      	mov	fp, r2
			if ((SigmaLimitValue > 0) &&
 80161c6:	2b00      	cmp	r3, #0
 80161c8:	d004      	beq.n	80161d4 <VL53L0X_get_pal_range_status+0x160>
	uint8_t SigmaLimitflag = 0;
 80161ca:	9a08      	ldr	r2, [sp, #32]
 80161cc:	4293      	cmp	r3, r2
 80161ce:	419b      	sbcs	r3, r3
 80161d0:	425b      	negs	r3, r3
 80161d2:	469b      	mov	fp, r3
	if (Status == VL53L0X_ERROR_NONE)
 80161d4:	2800      	cmp	r0, #0
 80161d6:	d000      	beq.n	80161da <VL53L0X_get_pal_range_status+0x166>
 80161d8:	e780      	b.n	80160dc <VL53L0X_get_pal_range_status+0x68>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 80161da:	221d      	movs	r2, #29
 80161dc:	ab02      	add	r3, sp, #8
 80161de:	469c      	mov	ip, r3
 80161e0:	4462      	add	r2, ip
 80161e2:	2102      	movs	r1, #2
 80161e4:	0020      	movs	r0, r4
 80161e6:	f7fd fce9 	bl	8013bbc <VL53L0X_GetLimitCheckEnable>
 80161ea:	e777      	b.n	80160dc <VL53L0X_get_pal_range_status+0x68>
		Status = VL53L0X_GetLimitCheckValue(Dev,
 80161ec:	aa06      	add	r2, sp, #24
 80161ee:	2102      	movs	r1, #2
 80161f0:	0020      	movs	r0, r4
 80161f2:	f7fd fd23 	bl	8013c3c <VL53L0X_GetLimitCheckValue>
		if (Status == VL53L0X_ERROR_NONE)
 80161f6:	2800      	cmp	r0, #0
 80161f8:	d032      	beq.n	8016260 <VL53L0X_get_pal_range_status+0x1ec>
		LastSignalRefMcps = VL53L0X_FIXPOINT97TOFIXPOINT1616(tmpWord);
 80161fa:	230a      	movs	r3, #10
 80161fc:	aa02      	add	r2, sp, #8
 80161fe:	4694      	mov	ip, r2
 8016200:	4463      	add	r3, ip
 8016202:	881b      	ldrh	r3, [r3, #0]
 8016204:	025b      	lsls	r3, r3, #9
		PALDevDataSet(Dev, LastSignalRefMcps, LastSignalRefMcps);
 8016206:	22a4      	movs	r2, #164	; 0xa4
 8016208:	0052      	lsls	r2, r2, #1
 801620a:	50a3      	str	r3, [r4, r2]
		if ((SignalRefClipValue > 0) &&
 801620c:	9a06      	ldr	r2, [sp, #24]
	uint8_t SignalRefClipflag = 0;
 801620e:	2700      	movs	r7, #0
		if ((SignalRefClipValue > 0) &&
 8016210:	2a00      	cmp	r2, #0
 8016212:	d002      	beq.n	801621a <VL53L0X_get_pal_range_status+0x1a6>
	uint8_t SignalRefClipflag = 0;
 8016214:	429a      	cmp	r2, r3
 8016216:	419b      	sbcs	r3, r3
 8016218:	425f      	negs	r7, r3
	if (Status == VL53L0X_ERROR_NONE)
 801621a:	2800      	cmp	r0, #0
 801621c:	d037      	beq.n	801628e <VL53L0X_get_pal_range_status+0x21a>
	if ((RangeIgnoreThresholdLimitCheckEnable != 0) &&
 801621e:	ab09      	add	r3, sp, #36	; 0x24
 8016220:	781b      	ldrb	r3, [r3, #0]
 8016222:	4699      	mov	r9, r3
 8016224:	2b00      	cmp	r3, #0
 8016226:	d100      	bne.n	801622a <VL53L0X_get_pal_range_status+0x1b6>
 8016228:	e76c      	b.n	8016104 <VL53L0X_get_pal_range_status+0x90>
 801622a:	2800      	cmp	r0, #0
 801622c:	d172      	bne.n	8016314 <VL53L0X_get_pal_range_status+0x2a0>
			SignalRatePerSpad = 0;
 801622e:	2300      	movs	r3, #0
 8016230:	469a      	mov	sl, r3
		if (EffectiveSpadRtnCount == 0) {
 8016232:	9900      	ldr	r1, [sp, #0]
 8016234:	2900      	cmp	r1, #0
 8016236:	d004      	beq.n	8016242 <VL53L0X_get_pal_range_status+0x1ce>
			SignalRatePerSpad = (FixPoint1616_t)((256 * SignalRate)
 8016238:	9b01      	ldr	r3, [sp, #4]
 801623a:	0218      	lsls	r0, r3, #8
 801623c:	f7e9 ff88 	bl	8000150 <__udivsi3>
 8016240:	4682      	mov	sl, r0
		Status = VL53L0X_GetLimitCheckValue(Dev,
 8016242:	aa05      	add	r2, sp, #20
 8016244:	2103      	movs	r1, #3
 8016246:	0020      	movs	r0, r4
 8016248:	f7fd fcf8 	bl	8013c3c <VL53L0X_GetLimitCheckValue>
		if ((RangeIgnoreThresholdValue > 0) &&
 801624c:	9b05      	ldr	r3, [sp, #20]
	uint8_t RangeIgnoreThresholdflag = 0;
 801624e:	2200      	movs	r2, #0
 8016250:	4691      	mov	r9, r2
		if ((RangeIgnoreThresholdValue > 0) &&
 8016252:	2b00      	cmp	r3, #0
 8016254:	d027      	beq.n	80162a6 <VL53L0X_get_pal_range_status+0x232>
	uint8_t RangeIgnoreThresholdflag = 0;
 8016256:	459a      	cmp	sl, r3
 8016258:	419b      	sbcs	r3, r3
 801625a:	425b      	negs	r3, r3
 801625c:	4699      	mov	r9, r3
 801625e:	e022      	b.n	80162a6 <VL53L0X_get_pal_range_status+0x232>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8016260:	2201      	movs	r2, #1
 8016262:	21ff      	movs	r1, #255	; 0xff
 8016264:	0020      	movs	r0, r4
 8016266:	f000 f87f 	bl	8016368 <VL53L0X_WrByte>
		if (Status == VL53L0X_ERROR_NONE)
 801626a:	2800      	cmp	r0, #0
 801626c:	d1c5      	bne.n	80161fa <VL53L0X_get_pal_range_status+0x186>
			Status = VL53L0X_RdWord(Dev,
 801626e:	220a      	movs	r2, #10
 8016270:	ab02      	add	r3, sp, #8
 8016272:	469c      	mov	ip, r3
 8016274:	4462      	add	r2, ip
 8016276:	21b6      	movs	r1, #182	; 0xb6
 8016278:	0020      	movs	r0, r4
 801627a:	f000 f8cc 	bl	8016416 <VL53L0X_RdWord>
		if (Status == VL53L0X_ERROR_NONE)
 801627e:	2800      	cmp	r0, #0
 8016280:	d1bb      	bne.n	80161fa <VL53L0X_get_pal_range_status+0x186>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8016282:	2200      	movs	r2, #0
 8016284:	21ff      	movs	r1, #255	; 0xff
 8016286:	0020      	movs	r0, r4
 8016288:	f000 f86e 	bl	8016368 <VL53L0X_WrByte>
 801628c:	e7b5      	b.n	80161fa <VL53L0X_get_pal_range_status+0x186>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 801628e:	ab09      	add	r3, sp, #36	; 0x24
 8016290:	4699      	mov	r9, r3
 8016292:	001a      	movs	r2, r3
 8016294:	2103      	movs	r1, #3
 8016296:	0020      	movs	r0, r4
 8016298:	f7fd fc90 	bl	8013bbc <VL53L0X_GetLimitCheckEnable>
	if ((RangeIgnoreThresholdLimitCheckEnable != 0) &&
 801629c:	464b      	mov	r3, r9
 801629e:	781b      	ldrb	r3, [r3, #0]
 80162a0:	4699      	mov	r9, r3
 80162a2:	2b00      	cmp	r3, #0
 80162a4:	d1c1      	bne.n	801622a <VL53L0X_get_pal_range_status+0x1b6>
	if (Status == VL53L0X_ERROR_NONE) {
 80162a6:	2800      	cmp	r0, #0
 80162a8:	d000      	beq.n	80162ac <VL53L0X_get_pal_range_status+0x238>
 80162aa:	e72b      	b.n	8016104 <VL53L0X_get_pal_range_status+0x90>
		if (NoneFlag == 1) {
 80162ac:	4643      	mov	r3, r8
 80162ae:	2b01      	cmp	r3, #1
 80162b0:	d006      	beq.n	80162c0 <VL53L0X_get_pal_range_status+0x24c>
		} else if (DeviceRangeStatusInternal == 1 ||
 80162b2:	1e6b      	subs	r3, r5, #1
 80162b4:	2b02      	cmp	r3, #2
 80162b6:	d807      	bhi.n	80162c8 <VL53L0X_get_pal_range_status+0x254>
			*pPalRangeStatus = 5; /* HW fail */
 80162b8:	2305      	movs	r3, #5
 80162ba:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80162bc:	7013      	strb	r3, [r2, #0]
 80162be:	e728      	b.n	8016112 <VL53L0X_get_pal_range_status+0x9e>
			*pPalRangeStatus = 255;	 /* NONE */
 80162c0:	33fe      	adds	r3, #254	; 0xfe
 80162c2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80162c4:	7013      	strb	r3, [r2, #0]
 80162c6:	e724      	b.n	8016112 <VL53L0X_get_pal_range_status+0x9e>
		} else if (DeviceRangeStatusInternal == 6 ||
 80162c8:	2d06      	cmp	r5, #6
 80162ca:	d014      	beq.n	80162f6 <VL53L0X_get_pal_range_status+0x282>
 80162cc:	2d09      	cmp	r5, #9
 80162ce:	d012      	beq.n	80162f6 <VL53L0X_get_pal_range_status+0x282>
		} else if (DeviceRangeStatusInternal == 8 ||
 80162d0:	210d      	movs	r1, #13
 80162d2:	400e      	ands	r6, r1
 80162d4:	2e08      	cmp	r6, #8
 80162d6:	d012      	beq.n	80162fe <VL53L0X_get_pal_range_status+0x28a>
					DeviceRangeStatusInternal == 10 ||
 80162d8:	2f01      	cmp	r7, #1
 80162da:	d010      	beq.n	80162fe <VL53L0X_get_pal_range_status+0x28a>
		} else if (DeviceRangeStatusInternal == 4 ||
 80162dc:	2d04      	cmp	r5, #4
 80162de:	d012      	beq.n	8016306 <VL53L0X_get_pal_range_status+0x292>
 80162e0:	464b      	mov	r3, r9
 80162e2:	2b01      	cmp	r3, #1
 80162e4:	d00f      	beq.n	8016306 <VL53L0X_get_pal_range_status+0x292>
		} else if (SigmaLimitflag == 1) {
 80162e6:	465b      	mov	r3, fp
 80162e8:	2b01      	cmp	r3, #1
 80162ea:	d010      	beq.n	801630e <VL53L0X_get_pal_range_status+0x29a>
			*pPalRangeStatus = 0; /* Range Valid */
 80162ec:	2300      	movs	r3, #0
 80162ee:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80162f0:	7013      	strb	r3, [r2, #0]
 80162f2:	46d9      	mov	r9, fp
 80162f4:	e70a      	b.n	801610c <VL53L0X_get_pal_range_status+0x98>
			*pPalRangeStatus = 4;  /* Phase fail */
 80162f6:	2304      	movs	r3, #4
 80162f8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80162fa:	7013      	strb	r3, [r2, #0]
 80162fc:	e709      	b.n	8016112 <VL53L0X_get_pal_range_status+0x9e>
			*pPalRangeStatus = 3;  /* Min range */
 80162fe:	2303      	movs	r3, #3
 8016300:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8016302:	7013      	strb	r3, [r2, #0]
 8016304:	e705      	b.n	8016112 <VL53L0X_get_pal_range_status+0x9e>
			*pPalRangeStatus = 2;  /* Signal Fail */
 8016306:	2302      	movs	r3, #2
 8016308:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801630a:	7013      	strb	r3, [r2, #0]
 801630c:	e701      	b.n	8016112 <VL53L0X_get_pal_range_status+0x9e>
			*pPalRangeStatus = 1;  /* Sigma	 Fail */
 801630e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8016310:	7013      	strb	r3, [r2, #0]
 8016312:	e6fe      	b.n	8016112 <VL53L0X_get_pal_range_status+0x9e>
	uint8_t RangeIgnoreThresholdflag = 0;
 8016314:	2300      	movs	r3, #0
 8016316:	4699      	mov	r9, r3
 8016318:	e6f4      	b.n	8016104 <VL53L0X_get_pal_range_status+0x90>
			Temp8 = 1;
 801631a:	2301      	movs	r3, #1
 801631c:	e71d      	b.n	801615a <VL53L0X_get_pal_range_status+0xe6>
 801631e:	46c0      	nop			; (mov r8, r8)
 8016320:	0000f0a1 	.word	0x0000f0a1

08016324 <VL53L0X_WriteMulti>:

    return Status;
}

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_WriteMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count){
 8016324:	b570      	push	{r4, r5, r6, lr}

    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8016326:	2400      	movs	r4, #0
    int32_t status_int = 0;
	uint8_t deviceAddress;

    if (count>=VL53L0X_MAX_I2C_XFER_SIZE){
 8016328:	2b3f      	cmp	r3, #63	; 0x3f
 801632a:	d900      	bls.n	801632e <VL53L0X_WriteMulti+0xa>
        Status = VL53L0X_ERROR_INVALID_PARAMS;
 801632c:	3c04      	subs	r4, #4
    }

	deviceAddress = Dev->I2cDevAddr;
 801632e:	25ae      	movs	r5, #174	; 0xae
 8016330:	006d      	lsls	r5, r5, #1

	status_int = VL53L0X_write_multi(deviceAddress, index, pdata, count);
 8016332:	5d40      	ldrb	r0, [r0, r5]
 8016334:	f7f6 ff24 	bl	800d180 <VL53L0X_write_multi>

	if (status_int != 0)
 8016338:	2800      	cmp	r0, #0
 801633a:	d101      	bne.n	8016340 <VL53L0X_WriteMulti+0x1c>
		Status = VL53L0X_ERROR_CONTROL_INTERFACE;

    return Status;
}
 801633c:	0020      	movs	r0, r4
 801633e:	bd70      	pop	{r4, r5, r6, pc}
		Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8016340:	2414      	movs	r4, #20
 8016342:	4264      	negs	r4, r4
 8016344:	e7fa      	b.n	801633c <VL53L0X_WriteMulti+0x18>

08016346 <VL53L0X_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_ReadMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count){
 8016346:	b570      	push	{r4, r5, r6, lr}
    VL53L0X_I2C_USER_VAR
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8016348:	2400      	movs	r4, #0
    int32_t status_int;
	uint8_t deviceAddress;

    if (count>=VL53L0X_MAX_I2C_XFER_SIZE){
 801634a:	2b3f      	cmp	r3, #63	; 0x3f
 801634c:	d900      	bls.n	8016350 <VL53L0X_ReadMulti+0xa>
        Status = VL53L0X_ERROR_INVALID_PARAMS;
 801634e:	3c04      	subs	r4, #4
    }

    deviceAddress = Dev->I2cDevAddr;
 8016350:	25ae      	movs	r5, #174	; 0xae
 8016352:	006d      	lsls	r5, r5, #1

	status_int = VL53L0X_read_multi(deviceAddress, index, pdata, count);
 8016354:	5d40      	ldrb	r0, [r0, r5]
 8016356:	f7f6 ff3b 	bl	800d1d0 <VL53L0X_read_multi>

	if (status_int != 0)
 801635a:	2800      	cmp	r0, #0
 801635c:	d101      	bne.n	8016362 <VL53L0X_ReadMulti+0x1c>
		Status = VL53L0X_ERROR_CONTROL_INTERFACE;

    return Status;
}
 801635e:	0020      	movs	r0, r4
 8016360:	bd70      	pop	{r4, r5, r6, pc}
		Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8016362:	2414      	movs	r4, #20
 8016364:	4264      	negs	r4, r4
 8016366:	e7fa      	b.n	801635e <VL53L0X_ReadMulti+0x18>

08016368 <VL53L0X_WrByte>:


VL53L0X_Error VL53L0X_WrByte(VL53L0X_DEV Dev, uint8_t index, uint8_t data){
 8016368:	b510      	push	{r4, lr}
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
    int32_t status_int;
	uint8_t deviceAddress;

    deviceAddress = Dev->I2cDevAddr;
 801636a:	23ae      	movs	r3, #174	; 0xae
 801636c:	005b      	lsls	r3, r3, #1

	status_int = VL53L0X_write_byte(deviceAddress, index, data);
 801636e:	5cc0      	ldrb	r0, [r0, r3]
 8016370:	f7f6 ff54 	bl	800d21c <VL53L0X_write_byte>

	if (status_int != 0)
		Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8016374:	4243      	negs	r3, r0
 8016376:	4158      	adcs	r0, r3
 8016378:	4243      	negs	r3, r0
 801637a:	2014      	movs	r0, #20
 801637c:	4018      	ands	r0, r3
 801637e:	3814      	subs	r0, #20

    return Status;
}
 8016380:	bd10      	pop	{r4, pc}

08016382 <VL53L0X_WrWord>:

VL53L0X_Error VL53L0X_WrWord(VL53L0X_DEV Dev, uint8_t index, uint16_t data){
 8016382:	b510      	push	{r4, lr}
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
    int32_t status_int;
	uint8_t deviceAddress;

    deviceAddress = Dev->I2cDevAddr;
 8016384:	23ae      	movs	r3, #174	; 0xae
 8016386:	005b      	lsls	r3, r3, #1

	status_int = VL53L0X_write_word(deviceAddress, index, data);
 8016388:	5cc0      	ldrb	r0, [r0, r3]
 801638a:	f7f6 ff5b 	bl	800d244 <VL53L0X_write_word>

	if (status_int != 0)
		Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 801638e:	4243      	negs	r3, r0
 8016390:	4158      	adcs	r0, r3
 8016392:	4243      	negs	r3, r0
 8016394:	2014      	movs	r0, #20
 8016396:	4018      	ands	r0, r3
 8016398:	3814      	subs	r0, #20

    return Status;
}
 801639a:	bd10      	pop	{r4, pc}

0801639c <VL53L0X_WrDWord>:

VL53L0X_Error VL53L0X_WrDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t data){
 801639c:	b510      	push	{r4, lr}
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
    int32_t status_int;
	uint8_t deviceAddress;

    deviceAddress = Dev->I2cDevAddr;
 801639e:	23ae      	movs	r3, #174	; 0xae
 80163a0:	005b      	lsls	r3, r3, #1

	status_int = VL53L0X_write_dword(deviceAddress, index, data);
 80163a2:	5cc0      	ldrb	r0, [r0, r3]
 80163a4:	f7f6 ff64 	bl	800d270 <VL53L0X_write_dword>

	if (status_int != 0)
		Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 80163a8:	4243      	negs	r3, r0
 80163aa:	4158      	adcs	r0, r3
 80163ac:	4243      	negs	r3, r0
 80163ae:	2014      	movs	r0, #20
 80163b0:	4018      	ands	r0, r3
 80163b2:	3814      	subs	r0, #20

    return Status;
}
 80163b4:	bd10      	pop	{r4, pc}

080163b6 <VL53L0X_UpdateByte>:

VL53L0X_Error VL53L0X_UpdateByte(VL53L0X_DEV Dev, uint8_t index, uint8_t AndData, uint8_t OrData){
 80163b6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80163b8:	b083      	sub	sp, #12
 80163ba:	000d      	movs	r5, r1
 80163bc:	0016      	movs	r6, r2
 80163be:	001c      	movs	r4, r3
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
    int32_t status_int;
    uint8_t deviceAddress;
    uint8_t data;

    deviceAddress = Dev->I2cDevAddr;
 80163c0:	23ae      	movs	r3, #174	; 0xae
 80163c2:	005b      	lsls	r3, r3, #1
 80163c4:	5cc7      	ldrb	r7, [r0, r3]

    status_int = VL53L0X_read_byte(deviceAddress, index, &data);
 80163c6:	466b      	mov	r3, sp
 80163c8:	1dda      	adds	r2, r3, #7
 80163ca:	0038      	movs	r0, r7
 80163cc:	f7f6 ff6a 	bl	800d2a4 <VL53L0X_read_byte>

    if (status_int != 0)
 80163d0:	2800      	cmp	r0, #0
 80163d2:	d110      	bne.n	80163f6 <VL53L0X_UpdateByte+0x40>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;

    if (Status == VL53L0X_ERROR_NONE) {
        data = (data & AndData) | OrData;
 80163d4:	466b      	mov	r3, sp
 80163d6:	79da      	ldrb	r2, [r3, #7]
 80163d8:	4032      	ands	r2, r6
 80163da:	4322      	orrs	r2, r4
 80163dc:	71da      	strb	r2, [r3, #7]
        status_int = VL53L0X_write_byte(deviceAddress, index, data);
 80163de:	0029      	movs	r1, r5
 80163e0:	0038      	movs	r0, r7
 80163e2:	f7f6 ff1b 	bl	800d21c <VL53L0X_write_byte>

        if (status_int != 0)
            Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 80163e6:	4243      	negs	r3, r0
 80163e8:	4158      	adcs	r0, r3
 80163ea:	4243      	negs	r3, r0
 80163ec:	2014      	movs	r0, #20
 80163ee:	4018      	ands	r0, r3
 80163f0:	3814      	subs	r0, #20
    }

    return Status;
}
 80163f2:	b003      	add	sp, #12
 80163f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 80163f6:	2014      	movs	r0, #20
 80163f8:	4240      	negs	r0, r0
 80163fa:	e7fa      	b.n	80163f2 <VL53L0X_UpdateByte+0x3c>

080163fc <VL53L0X_RdByte>:

VL53L0X_Error VL53L0X_RdByte(VL53L0X_DEV Dev, uint8_t index, uint8_t *data){
 80163fc:	b510      	push	{r4, lr}
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
    int32_t status_int;
    uint8_t deviceAddress;

    deviceAddress = Dev->I2cDevAddr;
 80163fe:	23ae      	movs	r3, #174	; 0xae
 8016400:	005b      	lsls	r3, r3, #1

    status_int = VL53L0X_read_byte(deviceAddress, index, data);
 8016402:	5cc0      	ldrb	r0, [r0, r3]
 8016404:	f7f6 ff4e 	bl	800d2a4 <VL53L0X_read_byte>

    if (status_int != 0)
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8016408:	4243      	negs	r3, r0
 801640a:	4158      	adcs	r0, r3
 801640c:	4243      	negs	r3, r0
 801640e:	2014      	movs	r0, #20
 8016410:	4018      	ands	r0, r3
 8016412:	3814      	subs	r0, #20

    return Status;
}
 8016414:	bd10      	pop	{r4, pc}

08016416 <VL53L0X_RdWord>:

VL53L0X_Error VL53L0X_RdWord(VL53L0X_DEV Dev, uint8_t index, uint16_t *data){
 8016416:	b510      	push	{r4, lr}
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
    int32_t status_int;
    uint8_t deviceAddress;

    deviceAddress = Dev->I2cDevAddr;
 8016418:	23ae      	movs	r3, #174	; 0xae
 801641a:	005b      	lsls	r3, r3, #1

    status_int = VL53L0X_read_word(deviceAddress, index, data);
 801641c:	5cc0      	ldrb	r0, [r0, r3]
 801641e:	f7f6 ff65 	bl	800d2ec <VL53L0X_read_word>

    if (status_int != 0)
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8016422:	4243      	negs	r3, r0
 8016424:	4158      	adcs	r0, r3
 8016426:	4243      	negs	r3, r0
 8016428:	2014      	movs	r0, #20
 801642a:	4018      	ands	r0, r3
 801642c:	3814      	subs	r0, #20

    return Status;
}
 801642e:	bd10      	pop	{r4, pc}

08016430 <VL53L0X_RdDWord>:

VL53L0X_Error  VL53L0X_RdDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t *data){
 8016430:	b510      	push	{r4, lr}
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
    int32_t status_int;
    uint8_t deviceAddress;

    deviceAddress = Dev->I2cDevAddr;
 8016432:	23ae      	movs	r3, #174	; 0xae
 8016434:	005b      	lsls	r3, r3, #1

    status_int = VL53L0X_read_dword(deviceAddress, index, data);
 8016436:	5cc0      	ldrb	r0, [r0, r3]
 8016438:	f7f6 ff84 	bl	800d344 <VL53L0X_read_dword>

    if (status_int != 0)
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 801643c:	4243      	negs	r3, r0
 801643e:	4158      	adcs	r0, r3
 8016440:	4243      	negs	r3, r0
 8016442:	2014      	movs	r0, #20
 8016444:	4018      	ands	r0, r3
 8016446:	3814      	subs	r0, #20

    return Status;
}
 8016448:	bd10      	pop	{r4, pc}

0801644a <VL53L0X_PollingDelay>:

#define VL53L0X_POLLINGDELAY_LOOPNB  250
VL53L0X_Error VL53L0X_PollingDelay(VL53L0X_DEV Dev){
 801644a:	b082      	sub	sp, #8
    VL53L0X_Error status = VL53L0X_ERROR_NONE;
    volatile uint32_t i;
    LOG_FUNCTION_START("");

    for (i = 0; i < VL53L0X_POLLINGDELAY_LOOPNB; i++)
 801644c:	2300      	movs	r3, #0
 801644e:	9301      	str	r3, [sp, #4]
 8016450:	9b01      	ldr	r3, [sp, #4]
 8016452:	2bf9      	cmp	r3, #249	; 0xf9
 8016454:	d806      	bhi.n	8016464 <VL53L0X_PollingDelay+0x1a>
    {
      __asm("nop");
 8016456:	46c0      	nop			; (mov r8, r8)
    for (i = 0; i < VL53L0X_POLLINGDELAY_LOOPNB; i++)
 8016458:	9b01      	ldr	r3, [sp, #4]
 801645a:	3301      	adds	r3, #1
 801645c:	9301      	str	r3, [sp, #4]
 801645e:	9b01      	ldr	r3, [sp, #4]
 8016460:	2bf9      	cmp	r3, #249	; 0xf9
 8016462:	d9f8      	bls.n	8016456 <VL53L0X_PollingDelay+0xc>
    }

    LOG_FUNCTION_END(status);
    return status;
}
 8016464:	2000      	movs	r0, #0
 8016466:	b002      	add	sp, #8
 8016468:	4770      	bx	lr

0801646a <main>:


/* Main functions ------------------------------------------------------------*/

int main(void)
{
 801646a:	b510      	push	{r4, lr}


  /* MCU Configuration----------------------------------------------------------*/

  /* Reset all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 801646c:	f7f9 fdc8 	bl	8010000 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 8016470:	f7f4 fe62 	bl	800b138 <SystemClock_Config>

  /* Initialize all user peripherals */

  /* Initialize BitzOS */
  BOS_Init();
 8016474:	f7ed ff6c 	bl	8004350 <BOS_Init>

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8016478:	f7f1 fb6e 	bl	8007b58 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 801647c:	f7f7 fd5a 	bl	800df34 <osKernelStart>
  
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  while (1)
 8016480:	e7fe      	b.n	8016480 <main+0x16>

08016482 <UserTask>:
/*-----------------------------------------------------------*/

/* User Task */
void UserTask(void * argument)
{
  for(;;)
 8016482:	e7fe      	b.n	8016482 <UserTask>

08016484 <atof>:
 8016484:	b510      	push	{r4, lr}
 8016486:	2100      	movs	r1, #0
 8016488:	f001 f80c 	bl	80174a4 <strtod>
 801648c:	bd10      	pop	{r4, pc}

0801648e <atoi>:
 801648e:	b510      	push	{r4, lr}
 8016490:	220a      	movs	r2, #10
 8016492:	2100      	movs	r1, #0
 8016494:	f001 f906 	bl	80176a4 <strtol>
 8016498:	bd10      	pop	{r4, pc}

0801649a <atol>:
 801649a:	b510      	push	{r4, lr}
 801649c:	220a      	movs	r2, #10
 801649e:	2100      	movs	r1, #0
 80164a0:	f001 f900 	bl	80176a4 <strtol>
 80164a4:	bd10      	pop	{r4, pc}
	...

080164a8 <__libc_init_array>:
 80164a8:	b570      	push	{r4, r5, r6, lr}
 80164aa:	2600      	movs	r6, #0
 80164ac:	4d0c      	ldr	r5, [pc, #48]	; (80164e0 <__libc_init_array+0x38>)
 80164ae:	4c0d      	ldr	r4, [pc, #52]	; (80164e4 <__libc_init_array+0x3c>)
 80164b0:	1b64      	subs	r4, r4, r5
 80164b2:	10a4      	asrs	r4, r4, #2
 80164b4:	42a6      	cmp	r6, r4
 80164b6:	d109      	bne.n	80164cc <__libc_init_array+0x24>
 80164b8:	2600      	movs	r6, #0
 80164ba:	f003 fab3 	bl	8019a24 <_init>
 80164be:	4d0a      	ldr	r5, [pc, #40]	; (80164e8 <__libc_init_array+0x40>)
 80164c0:	4c0a      	ldr	r4, [pc, #40]	; (80164ec <__libc_init_array+0x44>)
 80164c2:	1b64      	subs	r4, r4, r5
 80164c4:	10a4      	asrs	r4, r4, #2
 80164c6:	42a6      	cmp	r6, r4
 80164c8:	d105      	bne.n	80164d6 <__libc_init_array+0x2e>
 80164ca:	bd70      	pop	{r4, r5, r6, pc}
 80164cc:	00b3      	lsls	r3, r6, #2
 80164ce:	58eb      	ldr	r3, [r5, r3]
 80164d0:	4798      	blx	r3
 80164d2:	3601      	adds	r6, #1
 80164d4:	e7ee      	b.n	80164b4 <__libc_init_array+0xc>
 80164d6:	00b3      	lsls	r3, r6, #2
 80164d8:	58eb      	ldr	r3, [r5, r3]
 80164da:	4798      	blx	r3
 80164dc:	3601      	adds	r6, #1
 80164de:	e7f2      	b.n	80164c6 <__libc_init_array+0x1e>
 80164e0:	0801d1d0 	.word	0x0801d1d0
 80164e4:	0801d1d0 	.word	0x0801d1d0
 80164e8:	0801d1d0 	.word	0x0801d1d0
 80164ec:	0801d1d4 	.word	0x0801d1d4

080164f0 <malloc>:
 80164f0:	b510      	push	{r4, lr}
 80164f2:	4b03      	ldr	r3, [pc, #12]	; (8016500 <malloc+0x10>)
 80164f4:	0001      	movs	r1, r0
 80164f6:	6818      	ldr	r0, [r3, #0]
 80164f8:	f000 f878 	bl	80165ec <_malloc_r>
 80164fc:	bd10      	pop	{r4, pc}
 80164fe:	46c0      	nop			; (mov r8, r8)
 8016500:	20000368 	.word	0x20000368

08016504 <free>:
 8016504:	b510      	push	{r4, lr}
 8016506:	4b03      	ldr	r3, [pc, #12]	; (8016514 <free+0x10>)
 8016508:	0001      	movs	r1, r0
 801650a:	6818      	ldr	r0, [r3, #0]
 801650c:	f000 f824 	bl	8016558 <_free_r>
 8016510:	bd10      	pop	{r4, pc}
 8016512:	46c0      	nop			; (mov r8, r8)
 8016514:	20000368 	.word	0x20000368

08016518 <memcmp>:
 8016518:	b530      	push	{r4, r5, lr}
 801651a:	2400      	movs	r4, #0
 801651c:	3901      	subs	r1, #1
 801651e:	42a2      	cmp	r2, r4
 8016520:	d101      	bne.n	8016526 <memcmp+0xe>
 8016522:	2000      	movs	r0, #0
 8016524:	e005      	b.n	8016532 <memcmp+0x1a>
 8016526:	5d03      	ldrb	r3, [r0, r4]
 8016528:	3401      	adds	r4, #1
 801652a:	5d0d      	ldrb	r5, [r1, r4]
 801652c:	42ab      	cmp	r3, r5
 801652e:	d0f6      	beq.n	801651e <memcmp+0x6>
 8016530:	1b58      	subs	r0, r3, r5
 8016532:	bd30      	pop	{r4, r5, pc}

08016534 <memcpy>:
 8016534:	2300      	movs	r3, #0
 8016536:	b510      	push	{r4, lr}
 8016538:	429a      	cmp	r2, r3
 801653a:	d100      	bne.n	801653e <memcpy+0xa>
 801653c:	bd10      	pop	{r4, pc}
 801653e:	5ccc      	ldrb	r4, [r1, r3]
 8016540:	54c4      	strb	r4, [r0, r3]
 8016542:	3301      	adds	r3, #1
 8016544:	e7f8      	b.n	8016538 <memcpy+0x4>

08016546 <memset>:
 8016546:	0003      	movs	r3, r0
 8016548:	1882      	adds	r2, r0, r2
 801654a:	4293      	cmp	r3, r2
 801654c:	d100      	bne.n	8016550 <memset+0xa>
 801654e:	4770      	bx	lr
 8016550:	7019      	strb	r1, [r3, #0]
 8016552:	3301      	adds	r3, #1
 8016554:	e7f9      	b.n	801654a <memset+0x4>
	...

08016558 <_free_r>:
 8016558:	b570      	push	{r4, r5, r6, lr}
 801655a:	0005      	movs	r5, r0
 801655c:	2900      	cmp	r1, #0
 801655e:	d010      	beq.n	8016582 <_free_r+0x2a>
 8016560:	1f0c      	subs	r4, r1, #4
 8016562:	6823      	ldr	r3, [r4, #0]
 8016564:	2b00      	cmp	r3, #0
 8016566:	da00      	bge.n	801656a <_free_r+0x12>
 8016568:	18e4      	adds	r4, r4, r3
 801656a:	0028      	movs	r0, r5
 801656c:	f001 fc5e 	bl	8017e2c <__malloc_lock>
 8016570:	4a1d      	ldr	r2, [pc, #116]	; (80165e8 <_free_r+0x90>)
 8016572:	6813      	ldr	r3, [r2, #0]
 8016574:	2b00      	cmp	r3, #0
 8016576:	d105      	bne.n	8016584 <_free_r+0x2c>
 8016578:	6063      	str	r3, [r4, #4]
 801657a:	6014      	str	r4, [r2, #0]
 801657c:	0028      	movs	r0, r5
 801657e:	f001 fc5d 	bl	8017e3c <__malloc_unlock>
 8016582:	bd70      	pop	{r4, r5, r6, pc}
 8016584:	42a3      	cmp	r3, r4
 8016586:	d908      	bls.n	801659a <_free_r+0x42>
 8016588:	6821      	ldr	r1, [r4, #0]
 801658a:	1860      	adds	r0, r4, r1
 801658c:	4283      	cmp	r3, r0
 801658e:	d1f3      	bne.n	8016578 <_free_r+0x20>
 8016590:	6818      	ldr	r0, [r3, #0]
 8016592:	685b      	ldr	r3, [r3, #4]
 8016594:	1841      	adds	r1, r0, r1
 8016596:	6021      	str	r1, [r4, #0]
 8016598:	e7ee      	b.n	8016578 <_free_r+0x20>
 801659a:	001a      	movs	r2, r3
 801659c:	685b      	ldr	r3, [r3, #4]
 801659e:	2b00      	cmp	r3, #0
 80165a0:	d001      	beq.n	80165a6 <_free_r+0x4e>
 80165a2:	42a3      	cmp	r3, r4
 80165a4:	d9f9      	bls.n	801659a <_free_r+0x42>
 80165a6:	6811      	ldr	r1, [r2, #0]
 80165a8:	1850      	adds	r0, r2, r1
 80165aa:	42a0      	cmp	r0, r4
 80165ac:	d10b      	bne.n	80165c6 <_free_r+0x6e>
 80165ae:	6820      	ldr	r0, [r4, #0]
 80165b0:	1809      	adds	r1, r1, r0
 80165b2:	1850      	adds	r0, r2, r1
 80165b4:	6011      	str	r1, [r2, #0]
 80165b6:	4283      	cmp	r3, r0
 80165b8:	d1e0      	bne.n	801657c <_free_r+0x24>
 80165ba:	6818      	ldr	r0, [r3, #0]
 80165bc:	685b      	ldr	r3, [r3, #4]
 80165be:	1841      	adds	r1, r0, r1
 80165c0:	6011      	str	r1, [r2, #0]
 80165c2:	6053      	str	r3, [r2, #4]
 80165c4:	e7da      	b.n	801657c <_free_r+0x24>
 80165c6:	42a0      	cmp	r0, r4
 80165c8:	d902      	bls.n	80165d0 <_free_r+0x78>
 80165ca:	230c      	movs	r3, #12
 80165cc:	602b      	str	r3, [r5, #0]
 80165ce:	e7d5      	b.n	801657c <_free_r+0x24>
 80165d0:	6821      	ldr	r1, [r4, #0]
 80165d2:	1860      	adds	r0, r4, r1
 80165d4:	4283      	cmp	r3, r0
 80165d6:	d103      	bne.n	80165e0 <_free_r+0x88>
 80165d8:	6818      	ldr	r0, [r3, #0]
 80165da:	685b      	ldr	r3, [r3, #4]
 80165dc:	1841      	adds	r1, r0, r1
 80165de:	6021      	str	r1, [r4, #0]
 80165e0:	6063      	str	r3, [r4, #4]
 80165e2:	6054      	str	r4, [r2, #4]
 80165e4:	e7ca      	b.n	801657c <_free_r+0x24>
 80165e6:	46c0      	nop			; (mov r8, r8)
 80165e8:	200062e0 	.word	0x200062e0

080165ec <_malloc_r>:
 80165ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80165ee:	2303      	movs	r3, #3
 80165f0:	1ccd      	adds	r5, r1, #3
 80165f2:	439d      	bics	r5, r3
 80165f4:	3508      	adds	r5, #8
 80165f6:	0006      	movs	r6, r0
 80165f8:	2d0c      	cmp	r5, #12
 80165fa:	d21f      	bcs.n	801663c <_malloc_r+0x50>
 80165fc:	250c      	movs	r5, #12
 80165fe:	42a9      	cmp	r1, r5
 8016600:	d81e      	bhi.n	8016640 <_malloc_r+0x54>
 8016602:	0030      	movs	r0, r6
 8016604:	f001 fc12 	bl	8017e2c <__malloc_lock>
 8016608:	4925      	ldr	r1, [pc, #148]	; (80166a0 <_malloc_r+0xb4>)
 801660a:	680a      	ldr	r2, [r1, #0]
 801660c:	0014      	movs	r4, r2
 801660e:	2c00      	cmp	r4, #0
 8016610:	d11a      	bne.n	8016648 <_malloc_r+0x5c>
 8016612:	4f24      	ldr	r7, [pc, #144]	; (80166a4 <_malloc_r+0xb8>)
 8016614:	683b      	ldr	r3, [r7, #0]
 8016616:	2b00      	cmp	r3, #0
 8016618:	d104      	bne.n	8016624 <_malloc_r+0x38>
 801661a:	0021      	movs	r1, r4
 801661c:	0030      	movs	r0, r6
 801661e:	f000 f88b 	bl	8016738 <_sbrk_r>
 8016622:	6038      	str	r0, [r7, #0]
 8016624:	0029      	movs	r1, r5
 8016626:	0030      	movs	r0, r6
 8016628:	f000 f886 	bl	8016738 <_sbrk_r>
 801662c:	1c43      	adds	r3, r0, #1
 801662e:	d12b      	bne.n	8016688 <_malloc_r+0x9c>
 8016630:	230c      	movs	r3, #12
 8016632:	0030      	movs	r0, r6
 8016634:	6033      	str	r3, [r6, #0]
 8016636:	f001 fc01 	bl	8017e3c <__malloc_unlock>
 801663a:	e003      	b.n	8016644 <_malloc_r+0x58>
 801663c:	2d00      	cmp	r5, #0
 801663e:	dade      	bge.n	80165fe <_malloc_r+0x12>
 8016640:	230c      	movs	r3, #12
 8016642:	6033      	str	r3, [r6, #0]
 8016644:	2000      	movs	r0, #0
 8016646:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016648:	6823      	ldr	r3, [r4, #0]
 801664a:	1b5b      	subs	r3, r3, r5
 801664c:	d419      	bmi.n	8016682 <_malloc_r+0x96>
 801664e:	2b0b      	cmp	r3, #11
 8016650:	d903      	bls.n	801665a <_malloc_r+0x6e>
 8016652:	6023      	str	r3, [r4, #0]
 8016654:	18e4      	adds	r4, r4, r3
 8016656:	6025      	str	r5, [r4, #0]
 8016658:	e003      	b.n	8016662 <_malloc_r+0x76>
 801665a:	6863      	ldr	r3, [r4, #4]
 801665c:	42a2      	cmp	r2, r4
 801665e:	d10e      	bne.n	801667e <_malloc_r+0x92>
 8016660:	600b      	str	r3, [r1, #0]
 8016662:	0030      	movs	r0, r6
 8016664:	f001 fbea 	bl	8017e3c <__malloc_unlock>
 8016668:	0020      	movs	r0, r4
 801666a:	2207      	movs	r2, #7
 801666c:	300b      	adds	r0, #11
 801666e:	1d23      	adds	r3, r4, #4
 8016670:	4390      	bics	r0, r2
 8016672:	1ac2      	subs	r2, r0, r3
 8016674:	4298      	cmp	r0, r3
 8016676:	d0e6      	beq.n	8016646 <_malloc_r+0x5a>
 8016678:	1a1b      	subs	r3, r3, r0
 801667a:	50a3      	str	r3, [r4, r2]
 801667c:	e7e3      	b.n	8016646 <_malloc_r+0x5a>
 801667e:	6053      	str	r3, [r2, #4]
 8016680:	e7ef      	b.n	8016662 <_malloc_r+0x76>
 8016682:	0022      	movs	r2, r4
 8016684:	6864      	ldr	r4, [r4, #4]
 8016686:	e7c2      	b.n	801660e <_malloc_r+0x22>
 8016688:	2303      	movs	r3, #3
 801668a:	1cc4      	adds	r4, r0, #3
 801668c:	439c      	bics	r4, r3
 801668e:	42a0      	cmp	r0, r4
 8016690:	d0e1      	beq.n	8016656 <_malloc_r+0x6a>
 8016692:	1a21      	subs	r1, r4, r0
 8016694:	0030      	movs	r0, r6
 8016696:	f000 f84f 	bl	8016738 <_sbrk_r>
 801669a:	1c43      	adds	r3, r0, #1
 801669c:	d1db      	bne.n	8016656 <_malloc_r+0x6a>
 801669e:	e7c7      	b.n	8016630 <_malloc_r+0x44>
 80166a0:	200062e0 	.word	0x200062e0
 80166a4:	200062e4 	.word	0x200062e4

080166a8 <rand>:
 80166a8:	4b16      	ldr	r3, [pc, #88]	; (8016704 <rand+0x5c>)
 80166aa:	b510      	push	{r4, lr}
 80166ac:	681c      	ldr	r4, [r3, #0]
 80166ae:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80166b0:	2b00      	cmp	r3, #0
 80166b2:	d116      	bne.n	80166e2 <rand+0x3a>
 80166b4:	2018      	movs	r0, #24
 80166b6:	f7ff ff1b 	bl	80164f0 <malloc>
 80166ba:	1e02      	subs	r2, r0, #0
 80166bc:	63a0      	str	r0, [r4, #56]	; 0x38
 80166be:	d104      	bne.n	80166ca <rand+0x22>
 80166c0:	214e      	movs	r1, #78	; 0x4e
 80166c2:	4b11      	ldr	r3, [pc, #68]	; (8016708 <rand+0x60>)
 80166c4:	4811      	ldr	r0, [pc, #68]	; (801670c <rand+0x64>)
 80166c6:	f000 fff9 	bl	80176bc <__assert_func>
 80166ca:	4b11      	ldr	r3, [pc, #68]	; (8016710 <rand+0x68>)
 80166cc:	2100      	movs	r1, #0
 80166ce:	6003      	str	r3, [r0, #0]
 80166d0:	4b10      	ldr	r3, [pc, #64]	; (8016714 <rand+0x6c>)
 80166d2:	6043      	str	r3, [r0, #4]
 80166d4:	4b10      	ldr	r3, [pc, #64]	; (8016718 <rand+0x70>)
 80166d6:	6083      	str	r3, [r0, #8]
 80166d8:	230b      	movs	r3, #11
 80166da:	8183      	strh	r3, [r0, #12]
 80166dc:	2001      	movs	r0, #1
 80166de:	6110      	str	r0, [r2, #16]
 80166e0:	6151      	str	r1, [r2, #20]
 80166e2:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 80166e4:	4a0d      	ldr	r2, [pc, #52]	; (801671c <rand+0x74>)
 80166e6:	6920      	ldr	r0, [r4, #16]
 80166e8:	6961      	ldr	r1, [r4, #20]
 80166ea:	4b0d      	ldr	r3, [pc, #52]	; (8016720 <rand+0x78>)
 80166ec:	f7e9 ff1e 	bl	800052c <__aeabi_lmul>
 80166f0:	2201      	movs	r2, #1
 80166f2:	2300      	movs	r3, #0
 80166f4:	1880      	adds	r0, r0, r2
 80166f6:	4159      	adcs	r1, r3
 80166f8:	6120      	str	r0, [r4, #16]
 80166fa:	6161      	str	r1, [r4, #20]
 80166fc:	0048      	lsls	r0, r1, #1
 80166fe:	0840      	lsrs	r0, r0, #1
 8016700:	bd10      	pop	{r4, pc}
 8016702:	46c0      	nop			; (mov r8, r8)
 8016704:	20000368 	.word	0x20000368
 8016708:	0801cdd8 	.word	0x0801cdd8
 801670c:	0801cdef 	.word	0x0801cdef
 8016710:	abcd330e 	.word	0xabcd330e
 8016714:	e66d1234 	.word	0xe66d1234
 8016718:	0005deec 	.word	0x0005deec
 801671c:	4c957f2d 	.word	0x4c957f2d
 8016720:	5851f42d 	.word	0x5851f42d

08016724 <realloc>:
 8016724:	b510      	push	{r4, lr}
 8016726:	4b03      	ldr	r3, [pc, #12]	; (8016734 <realloc+0x10>)
 8016728:	000a      	movs	r2, r1
 801672a:	0001      	movs	r1, r0
 801672c:	6818      	ldr	r0, [r3, #0]
 801672e:	f002 f865 	bl	80187fc <_realloc_r>
 8016732:	bd10      	pop	{r4, pc}
 8016734:	20000368 	.word	0x20000368

08016738 <_sbrk_r>:
 8016738:	2300      	movs	r3, #0
 801673a:	b570      	push	{r4, r5, r6, lr}
 801673c:	4d06      	ldr	r5, [pc, #24]	; (8016758 <_sbrk_r+0x20>)
 801673e:	0004      	movs	r4, r0
 8016740:	0008      	movs	r0, r1
 8016742:	602b      	str	r3, [r5, #0]
 8016744:	f003 f954 	bl	80199f0 <_sbrk>
 8016748:	1c43      	adds	r3, r0, #1
 801674a:	d103      	bne.n	8016754 <_sbrk_r+0x1c>
 801674c:	682b      	ldr	r3, [r5, #0]
 801674e:	2b00      	cmp	r3, #0
 8016750:	d000      	beq.n	8016754 <_sbrk_r+0x1c>
 8016752:	6023      	str	r3, [r4, #0]
 8016754:	bd70      	pop	{r4, r5, r6, pc}
 8016756:	46c0      	nop			; (mov r8, r8)
 8016758:	20006978 	.word	0x20006978

0801675c <siprintf>:
 801675c:	b40e      	push	{r1, r2, r3}
 801675e:	b500      	push	{lr}
 8016760:	490b      	ldr	r1, [pc, #44]	; (8016790 <siprintf+0x34>)
 8016762:	b09c      	sub	sp, #112	; 0x70
 8016764:	ab1d      	add	r3, sp, #116	; 0x74
 8016766:	9002      	str	r0, [sp, #8]
 8016768:	9006      	str	r0, [sp, #24]
 801676a:	9107      	str	r1, [sp, #28]
 801676c:	9104      	str	r1, [sp, #16]
 801676e:	4809      	ldr	r0, [pc, #36]	; (8016794 <siprintf+0x38>)
 8016770:	4909      	ldr	r1, [pc, #36]	; (8016798 <siprintf+0x3c>)
 8016772:	cb04      	ldmia	r3!, {r2}
 8016774:	9105      	str	r1, [sp, #20]
 8016776:	6800      	ldr	r0, [r0, #0]
 8016778:	a902      	add	r1, sp, #8
 801677a:	9301      	str	r3, [sp, #4]
 801677c:	f002 f8c6 	bl	801890c <_svfiprintf_r>
 8016780:	2300      	movs	r3, #0
 8016782:	9a02      	ldr	r2, [sp, #8]
 8016784:	7013      	strb	r3, [r2, #0]
 8016786:	b01c      	add	sp, #112	; 0x70
 8016788:	bc08      	pop	{r3}
 801678a:	b003      	add	sp, #12
 801678c:	4718      	bx	r3
 801678e:	46c0      	nop			; (mov r8, r8)
 8016790:	7fffffff 	.word	0x7fffffff
 8016794:	20000368 	.word	0x20000368
 8016798:	ffff0208 	.word	0xffff0208

0801679c <strcat>:
 801679c:	0002      	movs	r2, r0
 801679e:	b510      	push	{r4, lr}
 80167a0:	7813      	ldrb	r3, [r2, #0]
 80167a2:	0014      	movs	r4, r2
 80167a4:	3201      	adds	r2, #1
 80167a6:	2b00      	cmp	r3, #0
 80167a8:	d1fa      	bne.n	80167a0 <strcat+0x4>
 80167aa:	5cca      	ldrb	r2, [r1, r3]
 80167ac:	54e2      	strb	r2, [r4, r3]
 80167ae:	3301      	adds	r3, #1
 80167b0:	2a00      	cmp	r2, #0
 80167b2:	d1fa      	bne.n	80167aa <strcat+0xe>
 80167b4:	bd10      	pop	{r4, pc}

080167b6 <strchr>:
 80167b6:	b2c9      	uxtb	r1, r1
 80167b8:	7803      	ldrb	r3, [r0, #0]
 80167ba:	2b00      	cmp	r3, #0
 80167bc:	d004      	beq.n	80167c8 <strchr+0x12>
 80167be:	428b      	cmp	r3, r1
 80167c0:	d100      	bne.n	80167c4 <strchr+0xe>
 80167c2:	4770      	bx	lr
 80167c4:	3001      	adds	r0, #1
 80167c6:	e7f7      	b.n	80167b8 <strchr+0x2>
 80167c8:	424b      	negs	r3, r1
 80167ca:	4159      	adcs	r1, r3
 80167cc:	4249      	negs	r1, r1
 80167ce:	4008      	ands	r0, r1
 80167d0:	e7f7      	b.n	80167c2 <strchr+0xc>

080167d2 <strcpy>:
 80167d2:	0003      	movs	r3, r0
 80167d4:	780a      	ldrb	r2, [r1, #0]
 80167d6:	3101      	adds	r1, #1
 80167d8:	701a      	strb	r2, [r3, #0]
 80167da:	3301      	adds	r3, #1
 80167dc:	2a00      	cmp	r2, #0
 80167de:	d1f9      	bne.n	80167d4 <strcpy+0x2>
 80167e0:	4770      	bx	lr

080167e2 <strncmp>:
 80167e2:	b530      	push	{r4, r5, lr}
 80167e4:	0005      	movs	r5, r0
 80167e6:	1e10      	subs	r0, r2, #0
 80167e8:	d00b      	beq.n	8016802 <strncmp+0x20>
 80167ea:	2400      	movs	r4, #0
 80167ec:	3a01      	subs	r2, #1
 80167ee:	5d2b      	ldrb	r3, [r5, r4]
 80167f0:	5d08      	ldrb	r0, [r1, r4]
 80167f2:	4283      	cmp	r3, r0
 80167f4:	d104      	bne.n	8016800 <strncmp+0x1e>
 80167f6:	4294      	cmp	r4, r2
 80167f8:	d002      	beq.n	8016800 <strncmp+0x1e>
 80167fa:	3401      	adds	r4, #1
 80167fc:	2b00      	cmp	r3, #0
 80167fe:	d1f6      	bne.n	80167ee <strncmp+0xc>
 8016800:	1a18      	subs	r0, r3, r0
 8016802:	bd30      	pop	{r4, r5, pc}

08016804 <strncpy>:
 8016804:	0003      	movs	r3, r0
 8016806:	b530      	push	{r4, r5, lr}
 8016808:	001d      	movs	r5, r3
 801680a:	2a00      	cmp	r2, #0
 801680c:	d006      	beq.n	801681c <strncpy+0x18>
 801680e:	780c      	ldrb	r4, [r1, #0]
 8016810:	3a01      	subs	r2, #1
 8016812:	3301      	adds	r3, #1
 8016814:	702c      	strb	r4, [r5, #0]
 8016816:	3101      	adds	r1, #1
 8016818:	2c00      	cmp	r4, #0
 801681a:	d1f5      	bne.n	8016808 <strncpy+0x4>
 801681c:	2100      	movs	r1, #0
 801681e:	189a      	adds	r2, r3, r2
 8016820:	4293      	cmp	r3, r2
 8016822:	d100      	bne.n	8016826 <strncpy+0x22>
 8016824:	bd30      	pop	{r4, r5, pc}
 8016826:	7019      	strb	r1, [r3, #0]
 8016828:	3301      	adds	r3, #1
 801682a:	e7f9      	b.n	8016820 <strncpy+0x1c>

0801682c <sulp>:
 801682c:	b570      	push	{r4, r5, r6, lr}
 801682e:	0016      	movs	r6, r2
 8016830:	000d      	movs	r5, r1
 8016832:	f001 fe91 	bl	8018558 <__ulp>
 8016836:	2e00      	cmp	r6, #0
 8016838:	d00d      	beq.n	8016856 <sulp+0x2a>
 801683a:	236b      	movs	r3, #107	; 0x6b
 801683c:	006a      	lsls	r2, r5, #1
 801683e:	0d52      	lsrs	r2, r2, #21
 8016840:	1a9b      	subs	r3, r3, r2
 8016842:	2b00      	cmp	r3, #0
 8016844:	dd07      	ble.n	8016856 <sulp+0x2a>
 8016846:	2400      	movs	r4, #0
 8016848:	4a03      	ldr	r2, [pc, #12]	; (8016858 <sulp+0x2c>)
 801684a:	051b      	lsls	r3, r3, #20
 801684c:	189d      	adds	r5, r3, r2
 801684e:	002b      	movs	r3, r5
 8016850:	0022      	movs	r2, r4
 8016852:	f7eb fa15 	bl	8001c80 <__aeabi_dmul>
 8016856:	bd70      	pop	{r4, r5, r6, pc}
 8016858:	3ff00000 	.word	0x3ff00000

0801685c <_strtod_l>:
 801685c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801685e:	001d      	movs	r5, r3
 8016860:	2300      	movs	r3, #0
 8016862:	b0a7      	sub	sp, #156	; 0x9c
 8016864:	9322      	str	r3, [sp, #136]	; 0x88
 8016866:	4bae      	ldr	r3, [pc, #696]	; (8016b20 <_strtod_l+0x2c4>)
 8016868:	9005      	str	r0, [sp, #20]
 801686a:	681b      	ldr	r3, [r3, #0]
 801686c:	9108      	str	r1, [sp, #32]
 801686e:	0018      	movs	r0, r3
 8016870:	9307      	str	r3, [sp, #28]
 8016872:	921d      	str	r2, [sp, #116]	; 0x74
 8016874:	f7e9 fc50 	bl	8000118 <strlen>
 8016878:	2600      	movs	r6, #0
 801687a:	0004      	movs	r4, r0
 801687c:	2700      	movs	r7, #0
 801687e:	9b08      	ldr	r3, [sp, #32]
 8016880:	9321      	str	r3, [sp, #132]	; 0x84
 8016882:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8016884:	7813      	ldrb	r3, [r2, #0]
 8016886:	2b2b      	cmp	r3, #43	; 0x2b
 8016888:	d058      	beq.n	801693c <_strtod_l+0xe0>
 801688a:	d844      	bhi.n	8016916 <_strtod_l+0xba>
 801688c:	2b0d      	cmp	r3, #13
 801688e:	d83d      	bhi.n	801690c <_strtod_l+0xb0>
 8016890:	2b08      	cmp	r3, #8
 8016892:	d83d      	bhi.n	8016910 <_strtod_l+0xb4>
 8016894:	2b00      	cmp	r3, #0
 8016896:	d047      	beq.n	8016928 <_strtod_l+0xcc>
 8016898:	2300      	movs	r3, #0
 801689a:	9310      	str	r3, [sp, #64]	; 0x40
 801689c:	2200      	movs	r2, #0
 801689e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80168a0:	920a      	str	r2, [sp, #40]	; 0x28
 80168a2:	9306      	str	r3, [sp, #24]
 80168a4:	781b      	ldrb	r3, [r3, #0]
 80168a6:	2b30      	cmp	r3, #48	; 0x30
 80168a8:	d000      	beq.n	80168ac <_strtod_l+0x50>
 80168aa:	e083      	b.n	80169b4 <_strtod_l+0x158>
 80168ac:	9b06      	ldr	r3, [sp, #24]
 80168ae:	3220      	adds	r2, #32
 80168b0:	785b      	ldrb	r3, [r3, #1]
 80168b2:	4393      	bics	r3, r2
 80168b4:	2b58      	cmp	r3, #88	; 0x58
 80168b6:	d000      	beq.n	80168ba <_strtod_l+0x5e>
 80168b8:	e072      	b.n	80169a0 <_strtod_l+0x144>
 80168ba:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80168bc:	9502      	str	r5, [sp, #8]
 80168be:	9301      	str	r3, [sp, #4]
 80168c0:	ab22      	add	r3, sp, #136	; 0x88
 80168c2:	9300      	str	r3, [sp, #0]
 80168c4:	4a97      	ldr	r2, [pc, #604]	; (8016b24 <_strtod_l+0x2c8>)
 80168c6:	ab23      	add	r3, sp, #140	; 0x8c
 80168c8:	9805      	ldr	r0, [sp, #20]
 80168ca:	a921      	add	r1, sp, #132	; 0x84
 80168cc:	f000 ff94 	bl	80177f8 <__gethex>
 80168d0:	2307      	movs	r3, #7
 80168d2:	0005      	movs	r5, r0
 80168d4:	0004      	movs	r4, r0
 80168d6:	401d      	ands	r5, r3
 80168d8:	4218      	tst	r0, r3
 80168da:	d006      	beq.n	80168ea <_strtod_l+0x8e>
 80168dc:	2d06      	cmp	r5, #6
 80168de:	d12f      	bne.n	8016940 <_strtod_l+0xe4>
 80168e0:	9b06      	ldr	r3, [sp, #24]
 80168e2:	3301      	adds	r3, #1
 80168e4:	9321      	str	r3, [sp, #132]	; 0x84
 80168e6:	2300      	movs	r3, #0
 80168e8:	9310      	str	r3, [sp, #64]	; 0x40
 80168ea:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80168ec:	2b00      	cmp	r3, #0
 80168ee:	d002      	beq.n	80168f6 <_strtod_l+0x9a>
 80168f0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80168f2:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80168f4:	601a      	str	r2, [r3, #0]
 80168f6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80168f8:	2b00      	cmp	r3, #0
 80168fa:	d01c      	beq.n	8016936 <_strtod_l+0xda>
 80168fc:	2380      	movs	r3, #128	; 0x80
 80168fe:	0032      	movs	r2, r6
 8016900:	061b      	lsls	r3, r3, #24
 8016902:	18fb      	adds	r3, r7, r3
 8016904:	0010      	movs	r0, r2
 8016906:	0019      	movs	r1, r3
 8016908:	b027      	add	sp, #156	; 0x9c
 801690a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801690c:	2b20      	cmp	r3, #32
 801690e:	d1c3      	bne.n	8016898 <_strtod_l+0x3c>
 8016910:	3201      	adds	r2, #1
 8016912:	9221      	str	r2, [sp, #132]	; 0x84
 8016914:	e7b5      	b.n	8016882 <_strtod_l+0x26>
 8016916:	2b2d      	cmp	r3, #45	; 0x2d
 8016918:	d1be      	bne.n	8016898 <_strtod_l+0x3c>
 801691a:	3b2c      	subs	r3, #44	; 0x2c
 801691c:	9310      	str	r3, [sp, #64]	; 0x40
 801691e:	1c53      	adds	r3, r2, #1
 8016920:	9321      	str	r3, [sp, #132]	; 0x84
 8016922:	7853      	ldrb	r3, [r2, #1]
 8016924:	2b00      	cmp	r3, #0
 8016926:	d1b9      	bne.n	801689c <_strtod_l+0x40>
 8016928:	9b08      	ldr	r3, [sp, #32]
 801692a:	9321      	str	r3, [sp, #132]	; 0x84
 801692c:	2300      	movs	r3, #0
 801692e:	9310      	str	r3, [sp, #64]	; 0x40
 8016930:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8016932:	2b00      	cmp	r3, #0
 8016934:	d1dc      	bne.n	80168f0 <_strtod_l+0x94>
 8016936:	0032      	movs	r2, r6
 8016938:	003b      	movs	r3, r7
 801693a:	e7e3      	b.n	8016904 <_strtod_l+0xa8>
 801693c:	2300      	movs	r3, #0
 801693e:	e7ed      	b.n	801691c <_strtod_l+0xc0>
 8016940:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8016942:	2a00      	cmp	r2, #0
 8016944:	d007      	beq.n	8016956 <_strtod_l+0xfa>
 8016946:	2135      	movs	r1, #53	; 0x35
 8016948:	a824      	add	r0, sp, #144	; 0x90
 801694a:	f001 ff04 	bl	8018756 <__copybits>
 801694e:	9922      	ldr	r1, [sp, #136]	; 0x88
 8016950:	9805      	ldr	r0, [sp, #20]
 8016952:	f001 fabf 	bl	8017ed4 <_Bfree>
 8016956:	1e68      	subs	r0, r5, #1
 8016958:	2805      	cmp	r0, #5
 801695a:	d806      	bhi.n	801696a <_strtod_l+0x10e>
 801695c:	f7e9 fbe4 	bl	8000128 <__gnu_thumb1_case_uqi>
 8016960:	1c190b0e 	.word	0x1c190b0e
 8016964:	030e      	.short	0x030e
 8016966:	2700      	movs	r7, #0
 8016968:	003e      	movs	r6, r7
 801696a:	0723      	lsls	r3, r4, #28
 801696c:	d5bd      	bpl.n	80168ea <_strtod_l+0x8e>
 801696e:	2380      	movs	r3, #128	; 0x80
 8016970:	061b      	lsls	r3, r3, #24
 8016972:	431f      	orrs	r7, r3
 8016974:	e7b9      	b.n	80168ea <_strtod_l+0x8e>
 8016976:	9e24      	ldr	r6, [sp, #144]	; 0x90
 8016978:	9f25      	ldr	r7, [sp, #148]	; 0x94
 801697a:	e7f6      	b.n	801696a <_strtod_l+0x10e>
 801697c:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801697e:	4a6a      	ldr	r2, [pc, #424]	; (8016b28 <_strtod_l+0x2cc>)
 8016980:	496a      	ldr	r1, [pc, #424]	; (8016b2c <_strtod_l+0x2d0>)
 8016982:	401a      	ands	r2, r3
 8016984:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8016986:	9e24      	ldr	r6, [sp, #144]	; 0x90
 8016988:	185b      	adds	r3, r3, r1
 801698a:	051b      	lsls	r3, r3, #20
 801698c:	431a      	orrs	r2, r3
 801698e:	0017      	movs	r7, r2
 8016990:	e7eb      	b.n	801696a <_strtod_l+0x10e>
 8016992:	2600      	movs	r6, #0
 8016994:	4f66      	ldr	r7, [pc, #408]	; (8016b30 <_strtod_l+0x2d4>)
 8016996:	e7e8      	b.n	801696a <_strtod_l+0x10e>
 8016998:	2601      	movs	r6, #1
 801699a:	4f66      	ldr	r7, [pc, #408]	; (8016b34 <_strtod_l+0x2d8>)
 801699c:	4276      	negs	r6, r6
 801699e:	e7e4      	b.n	801696a <_strtod_l+0x10e>
 80169a0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80169a2:	1c5a      	adds	r2, r3, #1
 80169a4:	9221      	str	r2, [sp, #132]	; 0x84
 80169a6:	785b      	ldrb	r3, [r3, #1]
 80169a8:	2b30      	cmp	r3, #48	; 0x30
 80169aa:	d0f9      	beq.n	80169a0 <_strtod_l+0x144>
 80169ac:	2b00      	cmp	r3, #0
 80169ae:	d09c      	beq.n	80168ea <_strtod_l+0x8e>
 80169b0:	2301      	movs	r3, #1
 80169b2:	930a      	str	r3, [sp, #40]	; 0x28
 80169b4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80169b6:	220a      	movs	r2, #10
 80169b8:	9311      	str	r3, [sp, #68]	; 0x44
 80169ba:	2300      	movs	r3, #0
 80169bc:	930e      	str	r3, [sp, #56]	; 0x38
 80169be:	930b      	str	r3, [sp, #44]	; 0x2c
 80169c0:	9309      	str	r3, [sp, #36]	; 0x24
 80169c2:	9821      	ldr	r0, [sp, #132]	; 0x84
 80169c4:	7805      	ldrb	r5, [r0, #0]
 80169c6:	002b      	movs	r3, r5
 80169c8:	3b30      	subs	r3, #48	; 0x30
 80169ca:	b2d9      	uxtb	r1, r3
 80169cc:	2909      	cmp	r1, #9
 80169ce:	d927      	bls.n	8016a20 <_strtod_l+0x1c4>
 80169d0:	0022      	movs	r2, r4
 80169d2:	9907      	ldr	r1, [sp, #28]
 80169d4:	f7ff ff05 	bl	80167e2 <strncmp>
 80169d8:	2800      	cmp	r0, #0
 80169da:	d033      	beq.n	8016a44 <_strtod_l+0x1e8>
 80169dc:	2000      	movs	r0, #0
 80169de:	002b      	movs	r3, r5
 80169e0:	4684      	mov	ip, r0
 80169e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80169e4:	900c      	str	r0, [sp, #48]	; 0x30
 80169e6:	9206      	str	r2, [sp, #24]
 80169e8:	2220      	movs	r2, #32
 80169ea:	0019      	movs	r1, r3
 80169ec:	4391      	bics	r1, r2
 80169ee:	000a      	movs	r2, r1
 80169f0:	2100      	movs	r1, #0
 80169f2:	9107      	str	r1, [sp, #28]
 80169f4:	2a45      	cmp	r2, #69	; 0x45
 80169f6:	d000      	beq.n	80169fa <_strtod_l+0x19e>
 80169f8:	e0c5      	b.n	8016b86 <_strtod_l+0x32a>
 80169fa:	9b06      	ldr	r3, [sp, #24]
 80169fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80169fe:	4303      	orrs	r3, r0
 8016a00:	4313      	orrs	r3, r2
 8016a02:	428b      	cmp	r3, r1
 8016a04:	d090      	beq.n	8016928 <_strtod_l+0xcc>
 8016a06:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016a08:	9308      	str	r3, [sp, #32]
 8016a0a:	3301      	adds	r3, #1
 8016a0c:	9321      	str	r3, [sp, #132]	; 0x84
 8016a0e:	9b08      	ldr	r3, [sp, #32]
 8016a10:	785b      	ldrb	r3, [r3, #1]
 8016a12:	2b2b      	cmp	r3, #43	; 0x2b
 8016a14:	d075      	beq.n	8016b02 <_strtod_l+0x2a6>
 8016a16:	000c      	movs	r4, r1
 8016a18:	2b2d      	cmp	r3, #45	; 0x2d
 8016a1a:	d178      	bne.n	8016b0e <_strtod_l+0x2b2>
 8016a1c:	2401      	movs	r4, #1
 8016a1e:	e071      	b.n	8016b04 <_strtod_l+0x2a8>
 8016a20:	9909      	ldr	r1, [sp, #36]	; 0x24
 8016a22:	2908      	cmp	r1, #8
 8016a24:	dc09      	bgt.n	8016a3a <_strtod_l+0x1de>
 8016a26:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016a28:	4351      	muls	r1, r2
 8016a2a:	185b      	adds	r3, r3, r1
 8016a2c:	930b      	str	r3, [sp, #44]	; 0x2c
 8016a2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016a30:	3001      	adds	r0, #1
 8016a32:	3301      	adds	r3, #1
 8016a34:	9309      	str	r3, [sp, #36]	; 0x24
 8016a36:	9021      	str	r0, [sp, #132]	; 0x84
 8016a38:	e7c3      	b.n	80169c2 <_strtod_l+0x166>
 8016a3a:	990e      	ldr	r1, [sp, #56]	; 0x38
 8016a3c:	4351      	muls	r1, r2
 8016a3e:	185b      	adds	r3, r3, r1
 8016a40:	930e      	str	r3, [sp, #56]	; 0x38
 8016a42:	e7f4      	b.n	8016a2e <_strtod_l+0x1d2>
 8016a44:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016a46:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016a48:	191c      	adds	r4, r3, r4
 8016a4a:	9421      	str	r4, [sp, #132]	; 0x84
 8016a4c:	7823      	ldrb	r3, [r4, #0]
 8016a4e:	2a00      	cmp	r2, #0
 8016a50:	d039      	beq.n	8016ac6 <_strtod_l+0x26a>
 8016a52:	900c      	str	r0, [sp, #48]	; 0x30
 8016a54:	9206      	str	r2, [sp, #24]
 8016a56:	001a      	movs	r2, r3
 8016a58:	3a30      	subs	r2, #48	; 0x30
 8016a5a:	2a09      	cmp	r2, #9
 8016a5c:	d912      	bls.n	8016a84 <_strtod_l+0x228>
 8016a5e:	2201      	movs	r2, #1
 8016a60:	4694      	mov	ip, r2
 8016a62:	e7c1      	b.n	80169e8 <_strtod_l+0x18c>
 8016a64:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016a66:	3001      	adds	r0, #1
 8016a68:	1c5a      	adds	r2, r3, #1
 8016a6a:	9221      	str	r2, [sp, #132]	; 0x84
 8016a6c:	785b      	ldrb	r3, [r3, #1]
 8016a6e:	2b30      	cmp	r3, #48	; 0x30
 8016a70:	d0f8      	beq.n	8016a64 <_strtod_l+0x208>
 8016a72:	001a      	movs	r2, r3
 8016a74:	3a31      	subs	r2, #49	; 0x31
 8016a76:	2a08      	cmp	r2, #8
 8016a78:	d83e      	bhi.n	8016af8 <_strtod_l+0x29c>
 8016a7a:	900c      	str	r0, [sp, #48]	; 0x30
 8016a7c:	2000      	movs	r0, #0
 8016a7e:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8016a80:	9006      	str	r0, [sp, #24]
 8016a82:	9211      	str	r2, [sp, #68]	; 0x44
 8016a84:	001a      	movs	r2, r3
 8016a86:	9906      	ldr	r1, [sp, #24]
 8016a88:	1c44      	adds	r4, r0, #1
 8016a8a:	3a30      	subs	r2, #48	; 0x30
 8016a8c:	2b30      	cmp	r3, #48	; 0x30
 8016a8e:	d013      	beq.n	8016ab8 <_strtod_l+0x25c>
 8016a90:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016a92:	191b      	adds	r3, r3, r4
 8016a94:	930c      	str	r3, [sp, #48]	; 0x30
 8016a96:	1844      	adds	r4, r0, r1
 8016a98:	000b      	movs	r3, r1
 8016a9a:	210a      	movs	r1, #10
 8016a9c:	429c      	cmp	r4, r3
 8016a9e:	d114      	bne.n	8016aca <_strtod_l+0x26e>
 8016aa0:	9b06      	ldr	r3, [sp, #24]
 8016aa2:	1c59      	adds	r1, r3, #1
 8016aa4:	1809      	adds	r1, r1, r0
 8016aa6:	1818      	adds	r0, r3, r0
 8016aa8:	2808      	cmp	r0, #8
 8016aaa:	dc1c      	bgt.n	8016ae6 <_strtod_l+0x28a>
 8016aac:	230a      	movs	r3, #10
 8016aae:	2400      	movs	r4, #0
 8016ab0:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8016ab2:	4343      	muls	r3, r0
 8016ab4:	18d3      	adds	r3, r2, r3
 8016ab6:	930b      	str	r3, [sp, #44]	; 0x2c
 8016ab8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016aba:	0020      	movs	r0, r4
 8016abc:	1c5a      	adds	r2, r3, #1
 8016abe:	9221      	str	r2, [sp, #132]	; 0x84
 8016ac0:	785b      	ldrb	r3, [r3, #1]
 8016ac2:	9106      	str	r1, [sp, #24]
 8016ac4:	e7c7      	b.n	8016a56 <_strtod_l+0x1fa>
 8016ac6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016ac8:	e7d1      	b.n	8016a6e <_strtod_l+0x212>
 8016aca:	2b08      	cmp	r3, #8
 8016acc:	dc04      	bgt.n	8016ad8 <_strtod_l+0x27c>
 8016ace:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8016ad0:	434d      	muls	r5, r1
 8016ad2:	950b      	str	r5, [sp, #44]	; 0x2c
 8016ad4:	3301      	adds	r3, #1
 8016ad6:	e7e1      	b.n	8016a9c <_strtod_l+0x240>
 8016ad8:	1c5d      	adds	r5, r3, #1
 8016ada:	2d10      	cmp	r5, #16
 8016adc:	dcfa      	bgt.n	8016ad4 <_strtod_l+0x278>
 8016ade:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8016ae0:	434d      	muls	r5, r1
 8016ae2:	950e      	str	r5, [sp, #56]	; 0x38
 8016ae4:	e7f6      	b.n	8016ad4 <_strtod_l+0x278>
 8016ae6:	2400      	movs	r4, #0
 8016ae8:	2910      	cmp	r1, #16
 8016aea:	dce5      	bgt.n	8016ab8 <_strtod_l+0x25c>
 8016aec:	230a      	movs	r3, #10
 8016aee:	980e      	ldr	r0, [sp, #56]	; 0x38
 8016af0:	4343      	muls	r3, r0
 8016af2:	18d3      	adds	r3, r2, r3
 8016af4:	930e      	str	r3, [sp, #56]	; 0x38
 8016af6:	e7df      	b.n	8016ab8 <_strtod_l+0x25c>
 8016af8:	2200      	movs	r2, #0
 8016afa:	920c      	str	r2, [sp, #48]	; 0x30
 8016afc:	9206      	str	r2, [sp, #24]
 8016afe:	3201      	adds	r2, #1
 8016b00:	e7ae      	b.n	8016a60 <_strtod_l+0x204>
 8016b02:	2400      	movs	r4, #0
 8016b04:	9b08      	ldr	r3, [sp, #32]
 8016b06:	3302      	adds	r3, #2
 8016b08:	9321      	str	r3, [sp, #132]	; 0x84
 8016b0a:	9b08      	ldr	r3, [sp, #32]
 8016b0c:	789b      	ldrb	r3, [r3, #2]
 8016b0e:	001a      	movs	r2, r3
 8016b10:	3a30      	subs	r2, #48	; 0x30
 8016b12:	2a09      	cmp	r2, #9
 8016b14:	d914      	bls.n	8016b40 <_strtod_l+0x2e4>
 8016b16:	9a08      	ldr	r2, [sp, #32]
 8016b18:	9221      	str	r2, [sp, #132]	; 0x84
 8016b1a:	2200      	movs	r2, #0
 8016b1c:	e032      	b.n	8016b84 <_strtod_l+0x328>
 8016b1e:	46c0      	nop			; (mov r8, r8)
 8016b20:	0801cfc8 	.word	0x0801cfc8
 8016b24:	0801ce5c 	.word	0x0801ce5c
 8016b28:	ffefffff 	.word	0xffefffff
 8016b2c:	00000433 	.word	0x00000433
 8016b30:	7ff00000 	.word	0x7ff00000
 8016b34:	7fffffff 	.word	0x7fffffff
 8016b38:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016b3a:	1c5a      	adds	r2, r3, #1
 8016b3c:	9221      	str	r2, [sp, #132]	; 0x84
 8016b3e:	785b      	ldrb	r3, [r3, #1]
 8016b40:	2b30      	cmp	r3, #48	; 0x30
 8016b42:	d0f9      	beq.n	8016b38 <_strtod_l+0x2dc>
 8016b44:	2200      	movs	r2, #0
 8016b46:	9207      	str	r2, [sp, #28]
 8016b48:	001a      	movs	r2, r3
 8016b4a:	3a31      	subs	r2, #49	; 0x31
 8016b4c:	2a08      	cmp	r2, #8
 8016b4e:	d81a      	bhi.n	8016b86 <_strtod_l+0x32a>
 8016b50:	3b30      	subs	r3, #48	; 0x30
 8016b52:	001a      	movs	r2, r3
 8016b54:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016b56:	9307      	str	r3, [sp, #28]
 8016b58:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016b5a:	1c59      	adds	r1, r3, #1
 8016b5c:	9121      	str	r1, [sp, #132]	; 0x84
 8016b5e:	785b      	ldrb	r3, [r3, #1]
 8016b60:	001d      	movs	r5, r3
 8016b62:	3d30      	subs	r5, #48	; 0x30
 8016b64:	2d09      	cmp	r5, #9
 8016b66:	d939      	bls.n	8016bdc <_strtod_l+0x380>
 8016b68:	9d07      	ldr	r5, [sp, #28]
 8016b6a:	1b49      	subs	r1, r1, r5
 8016b6c:	4daf      	ldr	r5, [pc, #700]	; (8016e2c <_strtod_l+0x5d0>)
 8016b6e:	9507      	str	r5, [sp, #28]
 8016b70:	2908      	cmp	r1, #8
 8016b72:	dc03      	bgt.n	8016b7c <_strtod_l+0x320>
 8016b74:	9207      	str	r2, [sp, #28]
 8016b76:	42aa      	cmp	r2, r5
 8016b78:	dd00      	ble.n	8016b7c <_strtod_l+0x320>
 8016b7a:	9507      	str	r5, [sp, #28]
 8016b7c:	2c00      	cmp	r4, #0
 8016b7e:	d002      	beq.n	8016b86 <_strtod_l+0x32a>
 8016b80:	9a07      	ldr	r2, [sp, #28]
 8016b82:	4252      	negs	r2, r2
 8016b84:	9207      	str	r2, [sp, #28]
 8016b86:	9a06      	ldr	r2, [sp, #24]
 8016b88:	2a00      	cmp	r2, #0
 8016b8a:	d14b      	bne.n	8016c24 <_strtod_l+0x3c8>
 8016b8c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016b8e:	4310      	orrs	r0, r2
 8016b90:	d000      	beq.n	8016b94 <_strtod_l+0x338>
 8016b92:	e6aa      	b.n	80168ea <_strtod_l+0x8e>
 8016b94:	4662      	mov	r2, ip
 8016b96:	2a00      	cmp	r2, #0
 8016b98:	d000      	beq.n	8016b9c <_strtod_l+0x340>
 8016b9a:	e6c5      	b.n	8016928 <_strtod_l+0xcc>
 8016b9c:	2b69      	cmp	r3, #105	; 0x69
 8016b9e:	d025      	beq.n	8016bec <_strtod_l+0x390>
 8016ba0:	dc21      	bgt.n	8016be6 <_strtod_l+0x38a>
 8016ba2:	2b49      	cmp	r3, #73	; 0x49
 8016ba4:	d022      	beq.n	8016bec <_strtod_l+0x390>
 8016ba6:	2b4e      	cmp	r3, #78	; 0x4e
 8016ba8:	d000      	beq.n	8016bac <_strtod_l+0x350>
 8016baa:	e6bd      	b.n	8016928 <_strtod_l+0xcc>
 8016bac:	49a0      	ldr	r1, [pc, #640]	; (8016e30 <_strtod_l+0x5d4>)
 8016bae:	a821      	add	r0, sp, #132	; 0x84
 8016bb0:	f001 f870 	bl	8017c94 <__match>
 8016bb4:	2800      	cmp	r0, #0
 8016bb6:	d100      	bne.n	8016bba <_strtod_l+0x35e>
 8016bb8:	e6b6      	b.n	8016928 <_strtod_l+0xcc>
 8016bba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016bbc:	781b      	ldrb	r3, [r3, #0]
 8016bbe:	2b28      	cmp	r3, #40	; 0x28
 8016bc0:	d12a      	bne.n	8016c18 <_strtod_l+0x3bc>
 8016bc2:	499c      	ldr	r1, [pc, #624]	; (8016e34 <_strtod_l+0x5d8>)
 8016bc4:	aa24      	add	r2, sp, #144	; 0x90
 8016bc6:	a821      	add	r0, sp, #132	; 0x84
 8016bc8:	f001 f878 	bl	8017cbc <__hexnan>
 8016bcc:	2805      	cmp	r0, #5
 8016bce:	d123      	bne.n	8016c18 <_strtod_l+0x3bc>
 8016bd0:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8016bd2:	4a99      	ldr	r2, [pc, #612]	; (8016e38 <_strtod_l+0x5dc>)
 8016bd4:	9e24      	ldr	r6, [sp, #144]	; 0x90
 8016bd6:	431a      	orrs	r2, r3
 8016bd8:	0017      	movs	r7, r2
 8016bda:	e686      	b.n	80168ea <_strtod_l+0x8e>
 8016bdc:	210a      	movs	r1, #10
 8016bde:	434a      	muls	r2, r1
 8016be0:	18d2      	adds	r2, r2, r3
 8016be2:	3a30      	subs	r2, #48	; 0x30
 8016be4:	e7b8      	b.n	8016b58 <_strtod_l+0x2fc>
 8016be6:	2b6e      	cmp	r3, #110	; 0x6e
 8016be8:	d0e0      	beq.n	8016bac <_strtod_l+0x350>
 8016bea:	e69d      	b.n	8016928 <_strtod_l+0xcc>
 8016bec:	4993      	ldr	r1, [pc, #588]	; (8016e3c <_strtod_l+0x5e0>)
 8016bee:	a821      	add	r0, sp, #132	; 0x84
 8016bf0:	f001 f850 	bl	8017c94 <__match>
 8016bf4:	2800      	cmp	r0, #0
 8016bf6:	d100      	bne.n	8016bfa <_strtod_l+0x39e>
 8016bf8:	e696      	b.n	8016928 <_strtod_l+0xcc>
 8016bfa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016bfc:	4990      	ldr	r1, [pc, #576]	; (8016e40 <_strtod_l+0x5e4>)
 8016bfe:	3b01      	subs	r3, #1
 8016c00:	a821      	add	r0, sp, #132	; 0x84
 8016c02:	9321      	str	r3, [sp, #132]	; 0x84
 8016c04:	f001 f846 	bl	8017c94 <__match>
 8016c08:	2800      	cmp	r0, #0
 8016c0a:	d102      	bne.n	8016c12 <_strtod_l+0x3b6>
 8016c0c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016c0e:	3301      	adds	r3, #1
 8016c10:	9321      	str	r3, [sp, #132]	; 0x84
 8016c12:	2600      	movs	r6, #0
 8016c14:	4f88      	ldr	r7, [pc, #544]	; (8016e38 <_strtod_l+0x5dc>)
 8016c16:	e668      	b.n	80168ea <_strtod_l+0x8e>
 8016c18:	488a      	ldr	r0, [pc, #552]	; (8016e44 <_strtod_l+0x5e8>)
 8016c1a:	f002 fa5b 	bl	80190d4 <nan>
 8016c1e:	0006      	movs	r6, r0
 8016c20:	000f      	movs	r7, r1
 8016c22:	e662      	b.n	80168ea <_strtod_l+0x8e>
 8016c24:	9b07      	ldr	r3, [sp, #28]
 8016c26:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8016c28:	1a9b      	subs	r3, r3, r2
 8016c2a:	930a      	str	r3, [sp, #40]	; 0x28
 8016c2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016c2e:	2b00      	cmp	r3, #0
 8016c30:	d101      	bne.n	8016c36 <_strtod_l+0x3da>
 8016c32:	9b06      	ldr	r3, [sp, #24]
 8016c34:	9309      	str	r3, [sp, #36]	; 0x24
 8016c36:	9c06      	ldr	r4, [sp, #24]
 8016c38:	2c10      	cmp	r4, #16
 8016c3a:	dd00      	ble.n	8016c3e <_strtod_l+0x3e2>
 8016c3c:	2410      	movs	r4, #16
 8016c3e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8016c40:	f7eb fe82 	bl	8002948 <__aeabi_ui2d>
 8016c44:	9b06      	ldr	r3, [sp, #24]
 8016c46:	0006      	movs	r6, r0
 8016c48:	000f      	movs	r7, r1
 8016c4a:	2b09      	cmp	r3, #9
 8016c4c:	dd15      	ble.n	8016c7a <_strtod_l+0x41e>
 8016c4e:	0022      	movs	r2, r4
 8016c50:	4b7d      	ldr	r3, [pc, #500]	; (8016e48 <_strtod_l+0x5ec>)
 8016c52:	3a09      	subs	r2, #9
 8016c54:	00d2      	lsls	r2, r2, #3
 8016c56:	189b      	adds	r3, r3, r2
 8016c58:	681a      	ldr	r2, [r3, #0]
 8016c5a:	685b      	ldr	r3, [r3, #4]
 8016c5c:	f7eb f810 	bl	8001c80 <__aeabi_dmul>
 8016c60:	0006      	movs	r6, r0
 8016c62:	980e      	ldr	r0, [sp, #56]	; 0x38
 8016c64:	000f      	movs	r7, r1
 8016c66:	f7eb fe6f 	bl	8002948 <__aeabi_ui2d>
 8016c6a:	0002      	movs	r2, r0
 8016c6c:	000b      	movs	r3, r1
 8016c6e:	0030      	movs	r0, r6
 8016c70:	0039      	movs	r1, r7
 8016c72:	f7ea f895 	bl	8000da0 <__aeabi_dadd>
 8016c76:	0006      	movs	r6, r0
 8016c78:	000f      	movs	r7, r1
 8016c7a:	9b06      	ldr	r3, [sp, #24]
 8016c7c:	2b0f      	cmp	r3, #15
 8016c7e:	dc39      	bgt.n	8016cf4 <_strtod_l+0x498>
 8016c80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016c82:	2b00      	cmp	r3, #0
 8016c84:	d100      	bne.n	8016c88 <_strtod_l+0x42c>
 8016c86:	e630      	b.n	80168ea <_strtod_l+0x8e>
 8016c88:	dd24      	ble.n	8016cd4 <_strtod_l+0x478>
 8016c8a:	2b16      	cmp	r3, #22
 8016c8c:	dc09      	bgt.n	8016ca2 <_strtod_l+0x446>
 8016c8e:	00dd      	lsls	r5, r3, #3
 8016c90:	0032      	movs	r2, r6
 8016c92:	003b      	movs	r3, r7
 8016c94:	4c6c      	ldr	r4, [pc, #432]	; (8016e48 <_strtod_l+0x5ec>)
 8016c96:	1964      	adds	r4, r4, r5
 8016c98:	6820      	ldr	r0, [r4, #0]
 8016c9a:	6861      	ldr	r1, [r4, #4]
 8016c9c:	f7ea fff0 	bl	8001c80 <__aeabi_dmul>
 8016ca0:	e7bd      	b.n	8016c1e <_strtod_l+0x3c2>
 8016ca2:	2325      	movs	r3, #37	; 0x25
 8016ca4:	9a06      	ldr	r2, [sp, #24]
 8016ca6:	1a9b      	subs	r3, r3, r2
 8016ca8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016caa:	4293      	cmp	r3, r2
 8016cac:	db22      	blt.n	8016cf4 <_strtod_l+0x498>
 8016cae:	240f      	movs	r4, #15
 8016cb0:	9b06      	ldr	r3, [sp, #24]
 8016cb2:	4d65      	ldr	r5, [pc, #404]	; (8016e48 <_strtod_l+0x5ec>)
 8016cb4:	1ae4      	subs	r4, r4, r3
 8016cb6:	00e1      	lsls	r1, r4, #3
 8016cb8:	1869      	adds	r1, r5, r1
 8016cba:	0032      	movs	r2, r6
 8016cbc:	6808      	ldr	r0, [r1, #0]
 8016cbe:	6849      	ldr	r1, [r1, #4]
 8016cc0:	003b      	movs	r3, r7
 8016cc2:	f7ea ffdd 	bl	8001c80 <__aeabi_dmul>
 8016cc6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016cc8:	1b1c      	subs	r4, r3, r4
 8016cca:	00e4      	lsls	r4, r4, #3
 8016ccc:	192c      	adds	r4, r5, r4
 8016cce:	6822      	ldr	r2, [r4, #0]
 8016cd0:	6863      	ldr	r3, [r4, #4]
 8016cd2:	e7e3      	b.n	8016c9c <_strtod_l+0x440>
 8016cd4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016cd6:	3316      	adds	r3, #22
 8016cd8:	db0c      	blt.n	8016cf4 <_strtod_l+0x498>
 8016cda:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016cdc:	9a07      	ldr	r2, [sp, #28]
 8016cde:	0030      	movs	r0, r6
 8016ce0:	1a9a      	subs	r2, r3, r2
 8016ce2:	4b59      	ldr	r3, [pc, #356]	; (8016e48 <_strtod_l+0x5ec>)
 8016ce4:	00d2      	lsls	r2, r2, #3
 8016ce6:	189b      	adds	r3, r3, r2
 8016ce8:	0039      	movs	r1, r7
 8016cea:	681a      	ldr	r2, [r3, #0]
 8016cec:	685b      	ldr	r3, [r3, #4]
 8016cee:	f7ea fbc1 	bl	8001474 <__aeabi_ddiv>
 8016cf2:	e794      	b.n	8016c1e <_strtod_l+0x3c2>
 8016cf4:	9b06      	ldr	r3, [sp, #24]
 8016cf6:	1b1c      	subs	r4, r3, r4
 8016cf8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016cfa:	18e4      	adds	r4, r4, r3
 8016cfc:	2c00      	cmp	r4, #0
 8016cfe:	dd70      	ble.n	8016de2 <_strtod_l+0x586>
 8016d00:	230f      	movs	r3, #15
 8016d02:	0021      	movs	r1, r4
 8016d04:	4019      	ands	r1, r3
 8016d06:	421c      	tst	r4, r3
 8016d08:	d00a      	beq.n	8016d20 <_strtod_l+0x4c4>
 8016d0a:	00cb      	lsls	r3, r1, #3
 8016d0c:	494e      	ldr	r1, [pc, #312]	; (8016e48 <_strtod_l+0x5ec>)
 8016d0e:	0032      	movs	r2, r6
 8016d10:	18c9      	adds	r1, r1, r3
 8016d12:	6808      	ldr	r0, [r1, #0]
 8016d14:	6849      	ldr	r1, [r1, #4]
 8016d16:	003b      	movs	r3, r7
 8016d18:	f7ea ffb2 	bl	8001c80 <__aeabi_dmul>
 8016d1c:	0006      	movs	r6, r0
 8016d1e:	000f      	movs	r7, r1
 8016d20:	230f      	movs	r3, #15
 8016d22:	439c      	bics	r4, r3
 8016d24:	d048      	beq.n	8016db8 <_strtod_l+0x55c>
 8016d26:	3326      	adds	r3, #38	; 0x26
 8016d28:	33ff      	adds	r3, #255	; 0xff
 8016d2a:	429c      	cmp	r4, r3
 8016d2c:	dd22      	ble.n	8016d74 <_strtod_l+0x518>
 8016d2e:	2300      	movs	r3, #0
 8016d30:	9306      	str	r3, [sp, #24]
 8016d32:	9307      	str	r3, [sp, #28]
 8016d34:	930b      	str	r3, [sp, #44]	; 0x2c
 8016d36:	9309      	str	r3, [sp, #36]	; 0x24
 8016d38:	2322      	movs	r3, #34	; 0x22
 8016d3a:	2600      	movs	r6, #0
 8016d3c:	9a05      	ldr	r2, [sp, #20]
 8016d3e:	4f3e      	ldr	r7, [pc, #248]	; (8016e38 <_strtod_l+0x5dc>)
 8016d40:	6013      	str	r3, [r2, #0]
 8016d42:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016d44:	42b3      	cmp	r3, r6
 8016d46:	d100      	bne.n	8016d4a <_strtod_l+0x4ee>
 8016d48:	e5cf      	b.n	80168ea <_strtod_l+0x8e>
 8016d4a:	9922      	ldr	r1, [sp, #136]	; 0x88
 8016d4c:	9805      	ldr	r0, [sp, #20]
 8016d4e:	f001 f8c1 	bl	8017ed4 <_Bfree>
 8016d52:	9909      	ldr	r1, [sp, #36]	; 0x24
 8016d54:	9805      	ldr	r0, [sp, #20]
 8016d56:	f001 f8bd 	bl	8017ed4 <_Bfree>
 8016d5a:	9907      	ldr	r1, [sp, #28]
 8016d5c:	9805      	ldr	r0, [sp, #20]
 8016d5e:	f001 f8b9 	bl	8017ed4 <_Bfree>
 8016d62:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016d64:	9805      	ldr	r0, [sp, #20]
 8016d66:	f001 f8b5 	bl	8017ed4 <_Bfree>
 8016d6a:	9906      	ldr	r1, [sp, #24]
 8016d6c:	9805      	ldr	r0, [sp, #20]
 8016d6e:	f001 f8b1 	bl	8017ed4 <_Bfree>
 8016d72:	e5ba      	b.n	80168ea <_strtod_l+0x8e>
 8016d74:	2300      	movs	r3, #0
 8016d76:	0030      	movs	r0, r6
 8016d78:	0039      	movs	r1, r7
 8016d7a:	001d      	movs	r5, r3
 8016d7c:	1124      	asrs	r4, r4, #4
 8016d7e:	2c01      	cmp	r4, #1
 8016d80:	dc1d      	bgt.n	8016dbe <_strtod_l+0x562>
 8016d82:	2b00      	cmp	r3, #0
 8016d84:	d001      	beq.n	8016d8a <_strtod_l+0x52e>
 8016d86:	0006      	movs	r6, r0
 8016d88:	000f      	movs	r7, r1
 8016d8a:	4b30      	ldr	r3, [pc, #192]	; (8016e4c <_strtod_l+0x5f0>)
 8016d8c:	00ed      	lsls	r5, r5, #3
 8016d8e:	18ff      	adds	r7, r7, r3
 8016d90:	4b2f      	ldr	r3, [pc, #188]	; (8016e50 <_strtod_l+0x5f4>)
 8016d92:	0032      	movs	r2, r6
 8016d94:	195d      	adds	r5, r3, r5
 8016d96:	6828      	ldr	r0, [r5, #0]
 8016d98:	6869      	ldr	r1, [r5, #4]
 8016d9a:	003b      	movs	r3, r7
 8016d9c:	f7ea ff70 	bl	8001c80 <__aeabi_dmul>
 8016da0:	4b25      	ldr	r3, [pc, #148]	; (8016e38 <_strtod_l+0x5dc>)
 8016da2:	4a2c      	ldr	r2, [pc, #176]	; (8016e54 <_strtod_l+0x5f8>)
 8016da4:	0006      	movs	r6, r0
 8016da6:	400b      	ands	r3, r1
 8016da8:	4293      	cmp	r3, r2
 8016daa:	d8c0      	bhi.n	8016d2e <_strtod_l+0x4d2>
 8016dac:	4a2a      	ldr	r2, [pc, #168]	; (8016e58 <_strtod_l+0x5fc>)
 8016dae:	4293      	cmp	r3, r2
 8016db0:	d913      	bls.n	8016dda <_strtod_l+0x57e>
 8016db2:	2601      	movs	r6, #1
 8016db4:	4f29      	ldr	r7, [pc, #164]	; (8016e5c <_strtod_l+0x600>)
 8016db6:	4276      	negs	r6, r6
 8016db8:	2300      	movs	r3, #0
 8016dba:	9308      	str	r3, [sp, #32]
 8016dbc:	e087      	b.n	8016ece <_strtod_l+0x672>
 8016dbe:	2201      	movs	r2, #1
 8016dc0:	4214      	tst	r4, r2
 8016dc2:	d007      	beq.n	8016dd4 <_strtod_l+0x578>
 8016dc4:	4a22      	ldr	r2, [pc, #136]	; (8016e50 <_strtod_l+0x5f4>)
 8016dc6:	00eb      	lsls	r3, r5, #3
 8016dc8:	189b      	adds	r3, r3, r2
 8016dca:	681a      	ldr	r2, [r3, #0]
 8016dcc:	685b      	ldr	r3, [r3, #4]
 8016dce:	f7ea ff57 	bl	8001c80 <__aeabi_dmul>
 8016dd2:	2301      	movs	r3, #1
 8016dd4:	3501      	adds	r5, #1
 8016dd6:	1064      	asrs	r4, r4, #1
 8016dd8:	e7d1      	b.n	8016d7e <_strtod_l+0x522>
 8016dda:	23d4      	movs	r3, #212	; 0xd4
 8016ddc:	049b      	lsls	r3, r3, #18
 8016dde:	18cf      	adds	r7, r1, r3
 8016de0:	e7ea      	b.n	8016db8 <_strtod_l+0x55c>
 8016de2:	2c00      	cmp	r4, #0
 8016de4:	d0e8      	beq.n	8016db8 <_strtod_l+0x55c>
 8016de6:	4264      	negs	r4, r4
 8016de8:	220f      	movs	r2, #15
 8016dea:	0023      	movs	r3, r4
 8016dec:	4013      	ands	r3, r2
 8016dee:	4214      	tst	r4, r2
 8016df0:	d00a      	beq.n	8016e08 <_strtod_l+0x5ac>
 8016df2:	00da      	lsls	r2, r3, #3
 8016df4:	4b14      	ldr	r3, [pc, #80]	; (8016e48 <_strtod_l+0x5ec>)
 8016df6:	0030      	movs	r0, r6
 8016df8:	189b      	adds	r3, r3, r2
 8016dfa:	0039      	movs	r1, r7
 8016dfc:	681a      	ldr	r2, [r3, #0]
 8016dfe:	685b      	ldr	r3, [r3, #4]
 8016e00:	f7ea fb38 	bl	8001474 <__aeabi_ddiv>
 8016e04:	0006      	movs	r6, r0
 8016e06:	000f      	movs	r7, r1
 8016e08:	1124      	asrs	r4, r4, #4
 8016e0a:	d0d5      	beq.n	8016db8 <_strtod_l+0x55c>
 8016e0c:	2c1f      	cmp	r4, #31
 8016e0e:	dd27      	ble.n	8016e60 <_strtod_l+0x604>
 8016e10:	2300      	movs	r3, #0
 8016e12:	9306      	str	r3, [sp, #24]
 8016e14:	9307      	str	r3, [sp, #28]
 8016e16:	930b      	str	r3, [sp, #44]	; 0x2c
 8016e18:	9309      	str	r3, [sp, #36]	; 0x24
 8016e1a:	2322      	movs	r3, #34	; 0x22
 8016e1c:	9a05      	ldr	r2, [sp, #20]
 8016e1e:	2600      	movs	r6, #0
 8016e20:	6013      	str	r3, [r2, #0]
 8016e22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016e24:	2700      	movs	r7, #0
 8016e26:	2b00      	cmp	r3, #0
 8016e28:	d18f      	bne.n	8016d4a <_strtod_l+0x4ee>
 8016e2a:	e55e      	b.n	80168ea <_strtod_l+0x8e>
 8016e2c:	00004e1f 	.word	0x00004e1f
 8016e30:	0801ce57 	.word	0x0801ce57
 8016e34:	0801ce70 	.word	0x0801ce70
 8016e38:	7ff00000 	.word	0x7ff00000
 8016e3c:	0801ce4e 	.word	0x0801ce4e
 8016e40:	0801ce51 	.word	0x0801ce51
 8016e44:	0801cf4c 	.word	0x0801cf4c
 8016e48:	0801d068 	.word	0x0801d068
 8016e4c:	fcb00000 	.word	0xfcb00000
 8016e50:	0801d040 	.word	0x0801d040
 8016e54:	7ca00000 	.word	0x7ca00000
 8016e58:	7c900000 	.word	0x7c900000
 8016e5c:	7fefffff 	.word	0x7fefffff
 8016e60:	2310      	movs	r3, #16
 8016e62:	0022      	movs	r2, r4
 8016e64:	401a      	ands	r2, r3
 8016e66:	9208      	str	r2, [sp, #32]
 8016e68:	421c      	tst	r4, r3
 8016e6a:	d001      	beq.n	8016e70 <_strtod_l+0x614>
 8016e6c:	335a      	adds	r3, #90	; 0x5a
 8016e6e:	9308      	str	r3, [sp, #32]
 8016e70:	0030      	movs	r0, r6
 8016e72:	0039      	movs	r1, r7
 8016e74:	2300      	movs	r3, #0
 8016e76:	4dca      	ldr	r5, [pc, #808]	; (80171a0 <_strtod_l+0x944>)
 8016e78:	2201      	movs	r2, #1
 8016e7a:	4214      	tst	r4, r2
 8016e7c:	d004      	beq.n	8016e88 <_strtod_l+0x62c>
 8016e7e:	682a      	ldr	r2, [r5, #0]
 8016e80:	686b      	ldr	r3, [r5, #4]
 8016e82:	f7ea fefd 	bl	8001c80 <__aeabi_dmul>
 8016e86:	2301      	movs	r3, #1
 8016e88:	1064      	asrs	r4, r4, #1
 8016e8a:	3508      	adds	r5, #8
 8016e8c:	2c00      	cmp	r4, #0
 8016e8e:	d1f3      	bne.n	8016e78 <_strtod_l+0x61c>
 8016e90:	2b00      	cmp	r3, #0
 8016e92:	d001      	beq.n	8016e98 <_strtod_l+0x63c>
 8016e94:	0006      	movs	r6, r0
 8016e96:	000f      	movs	r7, r1
 8016e98:	9b08      	ldr	r3, [sp, #32]
 8016e9a:	2b00      	cmp	r3, #0
 8016e9c:	d00f      	beq.n	8016ebe <_strtod_l+0x662>
 8016e9e:	236b      	movs	r3, #107	; 0x6b
 8016ea0:	0079      	lsls	r1, r7, #1
 8016ea2:	0d49      	lsrs	r1, r1, #21
 8016ea4:	003a      	movs	r2, r7
 8016ea6:	1a5b      	subs	r3, r3, r1
 8016ea8:	2b00      	cmp	r3, #0
 8016eaa:	dd08      	ble.n	8016ebe <_strtod_l+0x662>
 8016eac:	2b1f      	cmp	r3, #31
 8016eae:	dc00      	bgt.n	8016eb2 <_strtod_l+0x656>
 8016eb0:	e126      	b.n	8017100 <_strtod_l+0x8a4>
 8016eb2:	2600      	movs	r6, #0
 8016eb4:	2b34      	cmp	r3, #52	; 0x34
 8016eb6:	dc00      	bgt.n	8016eba <_strtod_l+0x65e>
 8016eb8:	e11b      	b.n	80170f2 <_strtod_l+0x896>
 8016eba:	27dc      	movs	r7, #220	; 0xdc
 8016ebc:	04bf      	lsls	r7, r7, #18
 8016ebe:	2200      	movs	r2, #0
 8016ec0:	2300      	movs	r3, #0
 8016ec2:	0030      	movs	r0, r6
 8016ec4:	0039      	movs	r1, r7
 8016ec6:	f7e9 fac9 	bl	800045c <__aeabi_dcmpeq>
 8016eca:	2800      	cmp	r0, #0
 8016ecc:	d1a0      	bne.n	8016e10 <_strtod_l+0x5b4>
 8016ece:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016ed0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016ed2:	9300      	str	r3, [sp, #0]
 8016ed4:	9911      	ldr	r1, [sp, #68]	; 0x44
 8016ed6:	9b06      	ldr	r3, [sp, #24]
 8016ed8:	9805      	ldr	r0, [sp, #20]
 8016eda:	f001 f863 	bl	8017fa4 <__s2b>
 8016ede:	900b      	str	r0, [sp, #44]	; 0x2c
 8016ee0:	2800      	cmp	r0, #0
 8016ee2:	d100      	bne.n	8016ee6 <_strtod_l+0x68a>
 8016ee4:	e723      	b.n	8016d2e <_strtod_l+0x4d2>
 8016ee6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016ee8:	9907      	ldr	r1, [sp, #28]
 8016eea:	17da      	asrs	r2, r3, #31
 8016eec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016eee:	1a5b      	subs	r3, r3, r1
 8016ef0:	401a      	ands	r2, r3
 8016ef2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016ef4:	9215      	str	r2, [sp, #84]	; 0x54
 8016ef6:	43db      	mvns	r3, r3
 8016ef8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016efa:	17db      	asrs	r3, r3, #31
 8016efc:	401a      	ands	r2, r3
 8016efe:	2300      	movs	r3, #0
 8016f00:	921c      	str	r2, [sp, #112]	; 0x70
 8016f02:	9306      	str	r3, [sp, #24]
 8016f04:	9307      	str	r3, [sp, #28]
 8016f06:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016f08:	9805      	ldr	r0, [sp, #20]
 8016f0a:	6859      	ldr	r1, [r3, #4]
 8016f0c:	f000 ff9e 	bl	8017e4c <_Balloc>
 8016f10:	9009      	str	r0, [sp, #36]	; 0x24
 8016f12:	2800      	cmp	r0, #0
 8016f14:	d100      	bne.n	8016f18 <_strtod_l+0x6bc>
 8016f16:	e70f      	b.n	8016d38 <_strtod_l+0x4dc>
 8016f18:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016f1a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016f1c:	691b      	ldr	r3, [r3, #16]
 8016f1e:	310c      	adds	r1, #12
 8016f20:	1c9a      	adds	r2, r3, #2
 8016f22:	0092      	lsls	r2, r2, #2
 8016f24:	300c      	adds	r0, #12
 8016f26:	930c      	str	r3, [sp, #48]	; 0x30
 8016f28:	f7ff fb04 	bl	8016534 <memcpy>
 8016f2c:	ab24      	add	r3, sp, #144	; 0x90
 8016f2e:	9301      	str	r3, [sp, #4]
 8016f30:	ab23      	add	r3, sp, #140	; 0x8c
 8016f32:	9300      	str	r3, [sp, #0]
 8016f34:	0032      	movs	r2, r6
 8016f36:	003b      	movs	r3, r7
 8016f38:	9805      	ldr	r0, [sp, #20]
 8016f3a:	960e      	str	r6, [sp, #56]	; 0x38
 8016f3c:	970f      	str	r7, [sp, #60]	; 0x3c
 8016f3e:	f001 fb7f 	bl	8018640 <__d2b>
 8016f42:	9022      	str	r0, [sp, #136]	; 0x88
 8016f44:	2800      	cmp	r0, #0
 8016f46:	d100      	bne.n	8016f4a <_strtod_l+0x6ee>
 8016f48:	e6f6      	b.n	8016d38 <_strtod_l+0x4dc>
 8016f4a:	2101      	movs	r1, #1
 8016f4c:	9805      	ldr	r0, [sp, #20]
 8016f4e:	f001 f8bd 	bl	80180cc <__i2b>
 8016f52:	9007      	str	r0, [sp, #28]
 8016f54:	2800      	cmp	r0, #0
 8016f56:	d100      	bne.n	8016f5a <_strtod_l+0x6fe>
 8016f58:	e6ee      	b.n	8016d38 <_strtod_l+0x4dc>
 8016f5a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8016f5c:	2b00      	cmp	r3, #0
 8016f5e:	da00      	bge.n	8016f62 <_strtod_l+0x706>
 8016f60:	e0d3      	b.n	801710a <_strtod_l+0x8ae>
 8016f62:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8016f64:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8016f66:	189d      	adds	r5, r3, r2
 8016f68:	9908      	ldr	r1, [sp, #32]
 8016f6a:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8016f6c:	1a5b      	subs	r3, r3, r1
 8016f6e:	2136      	movs	r1, #54	; 0x36
 8016f70:	189b      	adds	r3, r3, r2
 8016f72:	1a8a      	subs	r2, r1, r2
 8016f74:	498b      	ldr	r1, [pc, #556]	; (80171a4 <_strtod_l+0x948>)
 8016f76:	3b01      	subs	r3, #1
 8016f78:	2001      	movs	r0, #1
 8016f7a:	428b      	cmp	r3, r1
 8016f7c:	db00      	blt.n	8016f80 <_strtod_l+0x724>
 8016f7e:	e0cf      	b.n	8017120 <_strtod_l+0x8c4>
 8016f80:	1ac9      	subs	r1, r1, r3
 8016f82:	1a52      	subs	r2, r2, r1
 8016f84:	291f      	cmp	r1, #31
 8016f86:	dd00      	ble.n	8016f8a <_strtod_l+0x72e>
 8016f88:	e0c3      	b.n	8017112 <_strtod_l+0x8b6>
 8016f8a:	4088      	lsls	r0, r1
 8016f8c:	2300      	movs	r3, #0
 8016f8e:	9014      	str	r0, [sp, #80]	; 0x50
 8016f90:	9312      	str	r3, [sp, #72]	; 0x48
 8016f92:	18ab      	adds	r3, r5, r2
 8016f94:	930c      	str	r3, [sp, #48]	; 0x30
 8016f96:	18a4      	adds	r4, r4, r2
 8016f98:	9b08      	ldr	r3, [sp, #32]
 8016f9a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8016f9c:	191c      	adds	r4, r3, r4
 8016f9e:	002b      	movs	r3, r5
 8016fa0:	4295      	cmp	r5, r2
 8016fa2:	dd00      	ble.n	8016fa6 <_strtod_l+0x74a>
 8016fa4:	0013      	movs	r3, r2
 8016fa6:	42a3      	cmp	r3, r4
 8016fa8:	dd00      	ble.n	8016fac <_strtod_l+0x750>
 8016faa:	0023      	movs	r3, r4
 8016fac:	2b00      	cmp	r3, #0
 8016fae:	dd04      	ble.n	8016fba <_strtod_l+0x75e>
 8016fb0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8016fb2:	1ae4      	subs	r4, r4, r3
 8016fb4:	1ad2      	subs	r2, r2, r3
 8016fb6:	920c      	str	r2, [sp, #48]	; 0x30
 8016fb8:	1aed      	subs	r5, r5, r3
 8016fba:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016fbc:	2b00      	cmp	r3, #0
 8016fbe:	dd17      	ble.n	8016ff0 <_strtod_l+0x794>
 8016fc0:	001a      	movs	r2, r3
 8016fc2:	9907      	ldr	r1, [sp, #28]
 8016fc4:	9805      	ldr	r0, [sp, #20]
 8016fc6:	f001 f947 	bl	8018258 <__pow5mult>
 8016fca:	9007      	str	r0, [sp, #28]
 8016fcc:	2800      	cmp	r0, #0
 8016fce:	d100      	bne.n	8016fd2 <_strtod_l+0x776>
 8016fd0:	e6b2      	b.n	8016d38 <_strtod_l+0x4dc>
 8016fd2:	0001      	movs	r1, r0
 8016fd4:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8016fd6:	9805      	ldr	r0, [sp, #20]
 8016fd8:	f001 f88e 	bl	80180f8 <__multiply>
 8016fdc:	9011      	str	r0, [sp, #68]	; 0x44
 8016fde:	2800      	cmp	r0, #0
 8016fe0:	d100      	bne.n	8016fe4 <_strtod_l+0x788>
 8016fe2:	e6a9      	b.n	8016d38 <_strtod_l+0x4dc>
 8016fe4:	9922      	ldr	r1, [sp, #136]	; 0x88
 8016fe6:	9805      	ldr	r0, [sp, #20]
 8016fe8:	f000 ff74 	bl	8017ed4 <_Bfree>
 8016fec:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8016fee:	9322      	str	r3, [sp, #136]	; 0x88
 8016ff0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016ff2:	2b00      	cmp	r3, #0
 8016ff4:	dd00      	ble.n	8016ff8 <_strtod_l+0x79c>
 8016ff6:	e096      	b.n	8017126 <_strtod_l+0x8ca>
 8016ff8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016ffa:	2b00      	cmp	r3, #0
 8016ffc:	dd08      	ble.n	8017010 <_strtod_l+0x7b4>
 8016ffe:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8017000:	9909      	ldr	r1, [sp, #36]	; 0x24
 8017002:	9805      	ldr	r0, [sp, #20]
 8017004:	f001 f928 	bl	8018258 <__pow5mult>
 8017008:	9009      	str	r0, [sp, #36]	; 0x24
 801700a:	2800      	cmp	r0, #0
 801700c:	d100      	bne.n	8017010 <_strtod_l+0x7b4>
 801700e:	e693      	b.n	8016d38 <_strtod_l+0x4dc>
 8017010:	2c00      	cmp	r4, #0
 8017012:	dd08      	ble.n	8017026 <_strtod_l+0x7ca>
 8017014:	0022      	movs	r2, r4
 8017016:	9909      	ldr	r1, [sp, #36]	; 0x24
 8017018:	9805      	ldr	r0, [sp, #20]
 801701a:	f001 f979 	bl	8018310 <__lshift>
 801701e:	9009      	str	r0, [sp, #36]	; 0x24
 8017020:	2800      	cmp	r0, #0
 8017022:	d100      	bne.n	8017026 <_strtod_l+0x7ca>
 8017024:	e688      	b.n	8016d38 <_strtod_l+0x4dc>
 8017026:	2d00      	cmp	r5, #0
 8017028:	dd08      	ble.n	801703c <_strtod_l+0x7e0>
 801702a:	002a      	movs	r2, r5
 801702c:	9907      	ldr	r1, [sp, #28]
 801702e:	9805      	ldr	r0, [sp, #20]
 8017030:	f001 f96e 	bl	8018310 <__lshift>
 8017034:	9007      	str	r0, [sp, #28]
 8017036:	2800      	cmp	r0, #0
 8017038:	d100      	bne.n	801703c <_strtod_l+0x7e0>
 801703a:	e67d      	b.n	8016d38 <_strtod_l+0x4dc>
 801703c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801703e:	9922      	ldr	r1, [sp, #136]	; 0x88
 8017040:	9805      	ldr	r0, [sp, #20]
 8017042:	f001 f9f1 	bl	8018428 <__mdiff>
 8017046:	9006      	str	r0, [sp, #24]
 8017048:	2800      	cmp	r0, #0
 801704a:	d100      	bne.n	801704e <_strtod_l+0x7f2>
 801704c:	e674      	b.n	8016d38 <_strtod_l+0x4dc>
 801704e:	2200      	movs	r2, #0
 8017050:	68c3      	ldr	r3, [r0, #12]
 8017052:	9907      	ldr	r1, [sp, #28]
 8017054:	60c2      	str	r2, [r0, #12]
 8017056:	9311      	str	r3, [sp, #68]	; 0x44
 8017058:	f001 f9ca 	bl	80183f0 <__mcmp>
 801705c:	2800      	cmp	r0, #0
 801705e:	da6c      	bge.n	801713a <_strtod_l+0x8de>
 8017060:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8017062:	4333      	orrs	r3, r6
 8017064:	d000      	beq.n	8017068 <_strtod_l+0x80c>
 8017066:	e097      	b.n	8017198 <_strtod_l+0x93c>
 8017068:	033b      	lsls	r3, r7, #12
 801706a:	d000      	beq.n	801706e <_strtod_l+0x812>
 801706c:	e094      	b.n	8017198 <_strtod_l+0x93c>
 801706e:	22d6      	movs	r2, #214	; 0xd6
 8017070:	4b4d      	ldr	r3, [pc, #308]	; (80171a8 <_strtod_l+0x94c>)
 8017072:	04d2      	lsls	r2, r2, #19
 8017074:	403b      	ands	r3, r7
 8017076:	4293      	cmp	r3, r2
 8017078:	d800      	bhi.n	801707c <_strtod_l+0x820>
 801707a:	e08d      	b.n	8017198 <_strtod_l+0x93c>
 801707c:	9b06      	ldr	r3, [sp, #24]
 801707e:	695b      	ldr	r3, [r3, #20]
 8017080:	930a      	str	r3, [sp, #40]	; 0x28
 8017082:	2b00      	cmp	r3, #0
 8017084:	d105      	bne.n	8017092 <_strtod_l+0x836>
 8017086:	9b06      	ldr	r3, [sp, #24]
 8017088:	691b      	ldr	r3, [r3, #16]
 801708a:	930a      	str	r3, [sp, #40]	; 0x28
 801708c:	2b01      	cmp	r3, #1
 801708e:	dc00      	bgt.n	8017092 <_strtod_l+0x836>
 8017090:	e082      	b.n	8017198 <_strtod_l+0x93c>
 8017092:	9906      	ldr	r1, [sp, #24]
 8017094:	2201      	movs	r2, #1
 8017096:	9805      	ldr	r0, [sp, #20]
 8017098:	f001 f93a 	bl	8018310 <__lshift>
 801709c:	9907      	ldr	r1, [sp, #28]
 801709e:	9006      	str	r0, [sp, #24]
 80170a0:	f001 f9a6 	bl	80183f0 <__mcmp>
 80170a4:	2800      	cmp	r0, #0
 80170a6:	dd77      	ble.n	8017198 <_strtod_l+0x93c>
 80170a8:	9908      	ldr	r1, [sp, #32]
 80170aa:	003b      	movs	r3, r7
 80170ac:	4a3e      	ldr	r2, [pc, #248]	; (80171a8 <_strtod_l+0x94c>)
 80170ae:	2900      	cmp	r1, #0
 80170b0:	d100      	bne.n	80170b4 <_strtod_l+0x858>
 80170b2:	e09e      	b.n	80171f2 <_strtod_l+0x996>
 80170b4:	0011      	movs	r1, r2
 80170b6:	20d6      	movs	r0, #214	; 0xd6
 80170b8:	4039      	ands	r1, r7
 80170ba:	04c0      	lsls	r0, r0, #19
 80170bc:	4281      	cmp	r1, r0
 80170be:	dd00      	ble.n	80170c2 <_strtod_l+0x866>
 80170c0:	e097      	b.n	80171f2 <_strtod_l+0x996>
 80170c2:	23dc      	movs	r3, #220	; 0xdc
 80170c4:	049b      	lsls	r3, r3, #18
 80170c6:	4299      	cmp	r1, r3
 80170c8:	dc00      	bgt.n	80170cc <_strtod_l+0x870>
 80170ca:	e6a6      	b.n	8016e1a <_strtod_l+0x5be>
 80170cc:	4b37      	ldr	r3, [pc, #220]	; (80171ac <_strtod_l+0x950>)
 80170ce:	0030      	movs	r0, r6
 80170d0:	931b      	str	r3, [sp, #108]	; 0x6c
 80170d2:	2300      	movs	r3, #0
 80170d4:	931a      	str	r3, [sp, #104]	; 0x68
 80170d6:	0039      	movs	r1, r7
 80170d8:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80170da:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80170dc:	f7ea fdd0 	bl	8001c80 <__aeabi_dmul>
 80170e0:	0006      	movs	r6, r0
 80170e2:	000f      	movs	r7, r1
 80170e4:	4308      	orrs	r0, r1
 80170e6:	d000      	beq.n	80170ea <_strtod_l+0x88e>
 80170e8:	e62f      	b.n	8016d4a <_strtod_l+0x4ee>
 80170ea:	2322      	movs	r3, #34	; 0x22
 80170ec:	9a05      	ldr	r2, [sp, #20]
 80170ee:	6013      	str	r3, [r2, #0]
 80170f0:	e62b      	b.n	8016d4a <_strtod_l+0x4ee>
 80170f2:	2101      	movs	r1, #1
 80170f4:	3b20      	subs	r3, #32
 80170f6:	4249      	negs	r1, r1
 80170f8:	4099      	lsls	r1, r3
 80170fa:	400a      	ands	r2, r1
 80170fc:	0017      	movs	r7, r2
 80170fe:	e6de      	b.n	8016ebe <_strtod_l+0x662>
 8017100:	2201      	movs	r2, #1
 8017102:	4252      	negs	r2, r2
 8017104:	409a      	lsls	r2, r3
 8017106:	4016      	ands	r6, r2
 8017108:	e6d9      	b.n	8016ebe <_strtod_l+0x662>
 801710a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801710c:	9d15      	ldr	r5, [sp, #84]	; 0x54
 801710e:	1ad4      	subs	r4, r2, r3
 8017110:	e72a      	b.n	8016f68 <_strtod_l+0x70c>
 8017112:	4927      	ldr	r1, [pc, #156]	; (80171b0 <_strtod_l+0x954>)
 8017114:	1acb      	subs	r3, r1, r3
 8017116:	0001      	movs	r1, r0
 8017118:	4099      	lsls	r1, r3
 801711a:	9112      	str	r1, [sp, #72]	; 0x48
 801711c:	9014      	str	r0, [sp, #80]	; 0x50
 801711e:	e738      	b.n	8016f92 <_strtod_l+0x736>
 8017120:	2300      	movs	r3, #0
 8017122:	9312      	str	r3, [sp, #72]	; 0x48
 8017124:	e7fa      	b.n	801711c <_strtod_l+0x8c0>
 8017126:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8017128:	9922      	ldr	r1, [sp, #136]	; 0x88
 801712a:	9805      	ldr	r0, [sp, #20]
 801712c:	f001 f8f0 	bl	8018310 <__lshift>
 8017130:	9022      	str	r0, [sp, #136]	; 0x88
 8017132:	2800      	cmp	r0, #0
 8017134:	d000      	beq.n	8017138 <_strtod_l+0x8dc>
 8017136:	e75f      	b.n	8016ff8 <_strtod_l+0x79c>
 8017138:	e5fe      	b.n	8016d38 <_strtod_l+0x4dc>
 801713a:	970c      	str	r7, [sp, #48]	; 0x30
 801713c:	2800      	cmp	r0, #0
 801713e:	d176      	bne.n	801722e <_strtod_l+0x9d2>
 8017140:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8017142:	033b      	lsls	r3, r7, #12
 8017144:	0b1b      	lsrs	r3, r3, #12
 8017146:	2a00      	cmp	r2, #0
 8017148:	d038      	beq.n	80171bc <_strtod_l+0x960>
 801714a:	4a1a      	ldr	r2, [pc, #104]	; (80171b4 <_strtod_l+0x958>)
 801714c:	4293      	cmp	r3, r2
 801714e:	d138      	bne.n	80171c2 <_strtod_l+0x966>
 8017150:	2201      	movs	r2, #1
 8017152:	9b08      	ldr	r3, [sp, #32]
 8017154:	4252      	negs	r2, r2
 8017156:	0031      	movs	r1, r6
 8017158:	0010      	movs	r0, r2
 801715a:	2b00      	cmp	r3, #0
 801715c:	d00b      	beq.n	8017176 <_strtod_l+0x91a>
 801715e:	24d4      	movs	r4, #212	; 0xd4
 8017160:	4b11      	ldr	r3, [pc, #68]	; (80171a8 <_strtod_l+0x94c>)
 8017162:	0010      	movs	r0, r2
 8017164:	403b      	ands	r3, r7
 8017166:	04e4      	lsls	r4, r4, #19
 8017168:	42a3      	cmp	r3, r4
 801716a:	d804      	bhi.n	8017176 <_strtod_l+0x91a>
 801716c:	306c      	adds	r0, #108	; 0x6c
 801716e:	0d1b      	lsrs	r3, r3, #20
 8017170:	1ac3      	subs	r3, r0, r3
 8017172:	409a      	lsls	r2, r3
 8017174:	0010      	movs	r0, r2
 8017176:	4281      	cmp	r1, r0
 8017178:	d123      	bne.n	80171c2 <_strtod_l+0x966>
 801717a:	4b0f      	ldr	r3, [pc, #60]	; (80171b8 <_strtod_l+0x95c>)
 801717c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801717e:	429a      	cmp	r2, r3
 8017180:	d102      	bne.n	8017188 <_strtod_l+0x92c>
 8017182:	1c4b      	adds	r3, r1, #1
 8017184:	d100      	bne.n	8017188 <_strtod_l+0x92c>
 8017186:	e5d7      	b.n	8016d38 <_strtod_l+0x4dc>
 8017188:	4b07      	ldr	r3, [pc, #28]	; (80171a8 <_strtod_l+0x94c>)
 801718a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801718c:	2600      	movs	r6, #0
 801718e:	401a      	ands	r2, r3
 8017190:	0013      	movs	r3, r2
 8017192:	2280      	movs	r2, #128	; 0x80
 8017194:	0352      	lsls	r2, r2, #13
 8017196:	189f      	adds	r7, r3, r2
 8017198:	9b08      	ldr	r3, [sp, #32]
 801719a:	2b00      	cmp	r3, #0
 801719c:	d196      	bne.n	80170cc <_strtod_l+0x870>
 801719e:	e5d4      	b.n	8016d4a <_strtod_l+0x4ee>
 80171a0:	0801ce88 	.word	0x0801ce88
 80171a4:	fffffc02 	.word	0xfffffc02
 80171a8:	7ff00000 	.word	0x7ff00000
 80171ac:	39500000 	.word	0x39500000
 80171b0:	fffffbe2 	.word	0xfffffbe2
 80171b4:	000fffff 	.word	0x000fffff
 80171b8:	7fefffff 	.word	0x7fefffff
 80171bc:	4333      	orrs	r3, r6
 80171be:	d100      	bne.n	80171c2 <_strtod_l+0x966>
 80171c0:	e772      	b.n	80170a8 <_strtod_l+0x84c>
 80171c2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80171c4:	2b00      	cmp	r3, #0
 80171c6:	d01d      	beq.n	8017204 <_strtod_l+0x9a8>
 80171c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80171ca:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80171cc:	4213      	tst	r3, r2
 80171ce:	d0e3      	beq.n	8017198 <_strtod_l+0x93c>
 80171d0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80171d2:	0030      	movs	r0, r6
 80171d4:	0039      	movs	r1, r7
 80171d6:	9a08      	ldr	r2, [sp, #32]
 80171d8:	2b00      	cmp	r3, #0
 80171da:	d017      	beq.n	801720c <_strtod_l+0x9b0>
 80171dc:	f7ff fb26 	bl	801682c <sulp>
 80171e0:	0002      	movs	r2, r0
 80171e2:	000b      	movs	r3, r1
 80171e4:	980e      	ldr	r0, [sp, #56]	; 0x38
 80171e6:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80171e8:	f7e9 fdda 	bl	8000da0 <__aeabi_dadd>
 80171ec:	0006      	movs	r6, r0
 80171ee:	000f      	movs	r7, r1
 80171f0:	e7d2      	b.n	8017198 <_strtod_l+0x93c>
 80171f2:	2601      	movs	r6, #1
 80171f4:	4013      	ands	r3, r2
 80171f6:	4a9b      	ldr	r2, [pc, #620]	; (8017464 <_strtod_l+0xc08>)
 80171f8:	4276      	negs	r6, r6
 80171fa:	189b      	adds	r3, r3, r2
 80171fc:	4a9a      	ldr	r2, [pc, #616]	; (8017468 <_strtod_l+0xc0c>)
 80171fe:	431a      	orrs	r2, r3
 8017200:	0017      	movs	r7, r2
 8017202:	e7c9      	b.n	8017198 <_strtod_l+0x93c>
 8017204:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8017206:	4233      	tst	r3, r6
 8017208:	d0c6      	beq.n	8017198 <_strtod_l+0x93c>
 801720a:	e7e1      	b.n	80171d0 <_strtod_l+0x974>
 801720c:	f7ff fb0e 	bl	801682c <sulp>
 8017210:	0002      	movs	r2, r0
 8017212:	000b      	movs	r3, r1
 8017214:	980e      	ldr	r0, [sp, #56]	; 0x38
 8017216:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8017218:	f7ea ff9e 	bl	8002158 <__aeabi_dsub>
 801721c:	2200      	movs	r2, #0
 801721e:	2300      	movs	r3, #0
 8017220:	0006      	movs	r6, r0
 8017222:	000f      	movs	r7, r1
 8017224:	f7e9 f91a 	bl	800045c <__aeabi_dcmpeq>
 8017228:	2800      	cmp	r0, #0
 801722a:	d0b5      	beq.n	8017198 <_strtod_l+0x93c>
 801722c:	e5f5      	b.n	8016e1a <_strtod_l+0x5be>
 801722e:	9907      	ldr	r1, [sp, #28]
 8017230:	9806      	ldr	r0, [sp, #24]
 8017232:	f001 fa69 	bl	8018708 <__ratio>
 8017236:	2380      	movs	r3, #128	; 0x80
 8017238:	2200      	movs	r2, #0
 801723a:	05db      	lsls	r3, r3, #23
 801723c:	0004      	movs	r4, r0
 801723e:	000d      	movs	r5, r1
 8017240:	f7e9 f91c 	bl	800047c <__aeabi_dcmple>
 8017244:	2800      	cmp	r0, #0
 8017246:	d079      	beq.n	801733c <_strtod_l+0xae0>
 8017248:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801724a:	2b00      	cmp	r3, #0
 801724c:	d04b      	beq.n	80172e6 <_strtod_l+0xa8a>
 801724e:	2300      	movs	r3, #0
 8017250:	4c86      	ldr	r4, [pc, #536]	; (801746c <_strtod_l+0xc10>)
 8017252:	2500      	movs	r5, #0
 8017254:	9312      	str	r3, [sp, #72]	; 0x48
 8017256:	9413      	str	r4, [sp, #76]	; 0x4c
 8017258:	4c84      	ldr	r4, [pc, #528]	; (801746c <_strtod_l+0xc10>)
 801725a:	4a85      	ldr	r2, [pc, #532]	; (8017470 <_strtod_l+0xc14>)
 801725c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801725e:	4013      	ands	r3, r2
 8017260:	9314      	str	r3, [sp, #80]	; 0x50
 8017262:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8017264:	4b83      	ldr	r3, [pc, #524]	; (8017474 <_strtod_l+0xc18>)
 8017266:	429a      	cmp	r2, r3
 8017268:	d000      	beq.n	801726c <_strtod_l+0xa10>
 801726a:	e0b0      	b.n	80173ce <_strtod_l+0xb72>
 801726c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801726e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017270:	921a      	str	r2, [sp, #104]	; 0x68
 8017272:	931b      	str	r3, [sp, #108]	; 0x6c
 8017274:	4a80      	ldr	r2, [pc, #512]	; (8017478 <_strtod_l+0xc1c>)
 8017276:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017278:	4694      	mov	ip, r2
 801727a:	4463      	add	r3, ip
 801727c:	001f      	movs	r7, r3
 801727e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8017280:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8017282:	0030      	movs	r0, r6
 8017284:	0039      	movs	r1, r7
 8017286:	920c      	str	r2, [sp, #48]	; 0x30
 8017288:	930d      	str	r3, [sp, #52]	; 0x34
 801728a:	f001 f965 	bl	8018558 <__ulp>
 801728e:	0002      	movs	r2, r0
 8017290:	000b      	movs	r3, r1
 8017292:	980c      	ldr	r0, [sp, #48]	; 0x30
 8017294:	990d      	ldr	r1, [sp, #52]	; 0x34
 8017296:	f7ea fcf3 	bl	8001c80 <__aeabi_dmul>
 801729a:	0032      	movs	r2, r6
 801729c:	003b      	movs	r3, r7
 801729e:	f7e9 fd7f 	bl	8000da0 <__aeabi_dadd>
 80172a2:	4a73      	ldr	r2, [pc, #460]	; (8017470 <_strtod_l+0xc14>)
 80172a4:	4b75      	ldr	r3, [pc, #468]	; (801747c <_strtod_l+0xc20>)
 80172a6:	0006      	movs	r6, r0
 80172a8:	400a      	ands	r2, r1
 80172aa:	429a      	cmp	r2, r3
 80172ac:	d95e      	bls.n	801736c <_strtod_l+0xb10>
 80172ae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80172b0:	4a73      	ldr	r2, [pc, #460]	; (8017480 <_strtod_l+0xc24>)
 80172b2:	4293      	cmp	r3, r2
 80172b4:	d103      	bne.n	80172be <_strtod_l+0xa62>
 80172b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80172b8:	3301      	adds	r3, #1
 80172ba:	d100      	bne.n	80172be <_strtod_l+0xa62>
 80172bc:	e53c      	b.n	8016d38 <_strtod_l+0x4dc>
 80172be:	2601      	movs	r6, #1
 80172c0:	4f6f      	ldr	r7, [pc, #444]	; (8017480 <_strtod_l+0xc24>)
 80172c2:	4276      	negs	r6, r6
 80172c4:	9922      	ldr	r1, [sp, #136]	; 0x88
 80172c6:	9805      	ldr	r0, [sp, #20]
 80172c8:	f000 fe04 	bl	8017ed4 <_Bfree>
 80172cc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80172ce:	9805      	ldr	r0, [sp, #20]
 80172d0:	f000 fe00 	bl	8017ed4 <_Bfree>
 80172d4:	9907      	ldr	r1, [sp, #28]
 80172d6:	9805      	ldr	r0, [sp, #20]
 80172d8:	f000 fdfc 	bl	8017ed4 <_Bfree>
 80172dc:	9906      	ldr	r1, [sp, #24]
 80172de:	9805      	ldr	r0, [sp, #20]
 80172e0:	f000 fdf8 	bl	8017ed4 <_Bfree>
 80172e4:	e60f      	b.n	8016f06 <_strtod_l+0x6aa>
 80172e6:	2e00      	cmp	r6, #0
 80172e8:	d11c      	bne.n	8017324 <_strtod_l+0xac8>
 80172ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80172ec:	031b      	lsls	r3, r3, #12
 80172ee:	d11f      	bne.n	8017330 <_strtod_l+0xad4>
 80172f0:	2200      	movs	r2, #0
 80172f2:	0020      	movs	r0, r4
 80172f4:	0029      	movs	r1, r5
 80172f6:	4b5d      	ldr	r3, [pc, #372]	; (801746c <_strtod_l+0xc10>)
 80172f8:	f7e9 f8b6 	bl	8000468 <__aeabi_dcmplt>
 80172fc:	2800      	cmp	r0, #0
 80172fe:	d11a      	bne.n	8017336 <_strtod_l+0xada>
 8017300:	0020      	movs	r0, r4
 8017302:	0029      	movs	r1, r5
 8017304:	2200      	movs	r2, #0
 8017306:	4b5f      	ldr	r3, [pc, #380]	; (8017484 <_strtod_l+0xc28>)
 8017308:	f7ea fcba 	bl	8001c80 <__aeabi_dmul>
 801730c:	0005      	movs	r5, r0
 801730e:	000c      	movs	r4, r1
 8017310:	2380      	movs	r3, #128	; 0x80
 8017312:	061b      	lsls	r3, r3, #24
 8017314:	18e3      	adds	r3, r4, r3
 8017316:	951e      	str	r5, [sp, #120]	; 0x78
 8017318:	931f      	str	r3, [sp, #124]	; 0x7c
 801731a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801731c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801731e:	9212      	str	r2, [sp, #72]	; 0x48
 8017320:	9313      	str	r3, [sp, #76]	; 0x4c
 8017322:	e79a      	b.n	801725a <_strtod_l+0x9fe>
 8017324:	2e01      	cmp	r6, #1
 8017326:	d103      	bne.n	8017330 <_strtod_l+0xad4>
 8017328:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801732a:	2b00      	cmp	r3, #0
 801732c:	d100      	bne.n	8017330 <_strtod_l+0xad4>
 801732e:	e574      	b.n	8016e1a <_strtod_l+0x5be>
 8017330:	2300      	movs	r3, #0
 8017332:	4c55      	ldr	r4, [pc, #340]	; (8017488 <_strtod_l+0xc2c>)
 8017334:	e78d      	b.n	8017252 <_strtod_l+0x9f6>
 8017336:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8017338:	4c52      	ldr	r4, [pc, #328]	; (8017484 <_strtod_l+0xc28>)
 801733a:	e7e9      	b.n	8017310 <_strtod_l+0xab4>
 801733c:	2200      	movs	r2, #0
 801733e:	0020      	movs	r0, r4
 8017340:	0029      	movs	r1, r5
 8017342:	4b50      	ldr	r3, [pc, #320]	; (8017484 <_strtod_l+0xc28>)
 8017344:	f7ea fc9c 	bl	8001c80 <__aeabi_dmul>
 8017348:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801734a:	0005      	movs	r5, r0
 801734c:	000b      	movs	r3, r1
 801734e:	000c      	movs	r4, r1
 8017350:	2a00      	cmp	r2, #0
 8017352:	d107      	bne.n	8017364 <_strtod_l+0xb08>
 8017354:	2280      	movs	r2, #128	; 0x80
 8017356:	0612      	lsls	r2, r2, #24
 8017358:	188b      	adds	r3, r1, r2
 801735a:	9016      	str	r0, [sp, #88]	; 0x58
 801735c:	9317      	str	r3, [sp, #92]	; 0x5c
 801735e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8017360:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8017362:	e7dc      	b.n	801731e <_strtod_l+0xac2>
 8017364:	0002      	movs	r2, r0
 8017366:	9216      	str	r2, [sp, #88]	; 0x58
 8017368:	9317      	str	r3, [sp, #92]	; 0x5c
 801736a:	e7f8      	b.n	801735e <_strtod_l+0xb02>
 801736c:	23d4      	movs	r3, #212	; 0xd4
 801736e:	049b      	lsls	r3, r3, #18
 8017370:	18cf      	adds	r7, r1, r3
 8017372:	9b08      	ldr	r3, [sp, #32]
 8017374:	2b00      	cmp	r3, #0
 8017376:	d1a5      	bne.n	80172c4 <_strtod_l+0xa68>
 8017378:	4b3d      	ldr	r3, [pc, #244]	; (8017470 <_strtod_l+0xc14>)
 801737a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801737c:	403b      	ands	r3, r7
 801737e:	429a      	cmp	r2, r3
 8017380:	d1a0      	bne.n	80172c4 <_strtod_l+0xa68>
 8017382:	0028      	movs	r0, r5
 8017384:	0021      	movs	r1, r4
 8017386:	f7e9 f917 	bl	80005b8 <__aeabi_d2lz>
 801738a:	f7e9 f951 	bl	8000630 <__aeabi_l2d>
 801738e:	0002      	movs	r2, r0
 8017390:	000b      	movs	r3, r1
 8017392:	0028      	movs	r0, r5
 8017394:	0021      	movs	r1, r4
 8017396:	f7ea fedf 	bl	8002158 <__aeabi_dsub>
 801739a:	033b      	lsls	r3, r7, #12
 801739c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801739e:	0b1b      	lsrs	r3, r3, #12
 80173a0:	4333      	orrs	r3, r6
 80173a2:	4313      	orrs	r3, r2
 80173a4:	0004      	movs	r4, r0
 80173a6:	000d      	movs	r5, r1
 80173a8:	4a38      	ldr	r2, [pc, #224]	; (801748c <_strtod_l+0xc30>)
 80173aa:	2b00      	cmp	r3, #0
 80173ac:	d055      	beq.n	801745a <_strtod_l+0xbfe>
 80173ae:	4b38      	ldr	r3, [pc, #224]	; (8017490 <_strtod_l+0xc34>)
 80173b0:	f7e9 f85a 	bl	8000468 <__aeabi_dcmplt>
 80173b4:	2800      	cmp	r0, #0
 80173b6:	d000      	beq.n	80173ba <_strtod_l+0xb5e>
 80173b8:	e4c7      	b.n	8016d4a <_strtod_l+0x4ee>
 80173ba:	0020      	movs	r0, r4
 80173bc:	0029      	movs	r1, r5
 80173be:	4a35      	ldr	r2, [pc, #212]	; (8017494 <_strtod_l+0xc38>)
 80173c0:	4b30      	ldr	r3, [pc, #192]	; (8017484 <_strtod_l+0xc28>)
 80173c2:	f7e9 f865 	bl	8000490 <__aeabi_dcmpgt>
 80173c6:	2800      	cmp	r0, #0
 80173c8:	d100      	bne.n	80173cc <_strtod_l+0xb70>
 80173ca:	e77b      	b.n	80172c4 <_strtod_l+0xa68>
 80173cc:	e4bd      	b.n	8016d4a <_strtod_l+0x4ee>
 80173ce:	9b08      	ldr	r3, [sp, #32]
 80173d0:	2b00      	cmp	r3, #0
 80173d2:	d02b      	beq.n	801742c <_strtod_l+0xbd0>
 80173d4:	23d4      	movs	r3, #212	; 0xd4
 80173d6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80173d8:	04db      	lsls	r3, r3, #19
 80173da:	429a      	cmp	r2, r3
 80173dc:	d826      	bhi.n	801742c <_strtod_l+0xbd0>
 80173de:	0028      	movs	r0, r5
 80173e0:	0021      	movs	r1, r4
 80173e2:	4a2d      	ldr	r2, [pc, #180]	; (8017498 <_strtod_l+0xc3c>)
 80173e4:	4b2d      	ldr	r3, [pc, #180]	; (801749c <_strtod_l+0xc40>)
 80173e6:	f7e9 f849 	bl	800047c <__aeabi_dcmple>
 80173ea:	2800      	cmp	r0, #0
 80173ec:	d017      	beq.n	801741e <_strtod_l+0xbc2>
 80173ee:	0028      	movs	r0, r5
 80173f0:	0021      	movs	r1, r4
 80173f2:	f7e9 f8c3 	bl	800057c <__aeabi_d2uiz>
 80173f6:	2800      	cmp	r0, #0
 80173f8:	d100      	bne.n	80173fc <_strtod_l+0xba0>
 80173fa:	3001      	adds	r0, #1
 80173fc:	f7eb faa4 	bl	8002948 <__aeabi_ui2d>
 8017400:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8017402:	0005      	movs	r5, r0
 8017404:	000b      	movs	r3, r1
 8017406:	000c      	movs	r4, r1
 8017408:	2a00      	cmp	r2, #0
 801740a:	d122      	bne.n	8017452 <_strtod_l+0xbf6>
 801740c:	2280      	movs	r2, #128	; 0x80
 801740e:	0612      	lsls	r2, r2, #24
 8017410:	188b      	adds	r3, r1, r2
 8017412:	9018      	str	r0, [sp, #96]	; 0x60
 8017414:	9319      	str	r3, [sp, #100]	; 0x64
 8017416:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8017418:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801741a:	9212      	str	r2, [sp, #72]	; 0x48
 801741c:	9313      	str	r3, [sp, #76]	; 0x4c
 801741e:	22d6      	movs	r2, #214	; 0xd6
 8017420:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8017422:	04d2      	lsls	r2, r2, #19
 8017424:	189b      	adds	r3, r3, r2
 8017426:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8017428:	1a9b      	subs	r3, r3, r2
 801742a:	9313      	str	r3, [sp, #76]	; 0x4c
 801742c:	980e      	ldr	r0, [sp, #56]	; 0x38
 801742e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8017430:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8017432:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 8017434:	f001 f890 	bl	8018558 <__ulp>
 8017438:	0002      	movs	r2, r0
 801743a:	000b      	movs	r3, r1
 801743c:	0030      	movs	r0, r6
 801743e:	0039      	movs	r1, r7
 8017440:	f7ea fc1e 	bl	8001c80 <__aeabi_dmul>
 8017444:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8017446:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017448:	f7e9 fcaa 	bl	8000da0 <__aeabi_dadd>
 801744c:	0006      	movs	r6, r0
 801744e:	000f      	movs	r7, r1
 8017450:	e78f      	b.n	8017372 <_strtod_l+0xb16>
 8017452:	0002      	movs	r2, r0
 8017454:	9218      	str	r2, [sp, #96]	; 0x60
 8017456:	9319      	str	r3, [sp, #100]	; 0x64
 8017458:	e7dd      	b.n	8017416 <_strtod_l+0xbba>
 801745a:	4b11      	ldr	r3, [pc, #68]	; (80174a0 <_strtod_l+0xc44>)
 801745c:	f7e9 f804 	bl	8000468 <__aeabi_dcmplt>
 8017460:	e7b1      	b.n	80173c6 <_strtod_l+0xb6a>
 8017462:	46c0      	nop			; (mov r8, r8)
 8017464:	fff00000 	.word	0xfff00000
 8017468:	000fffff 	.word	0x000fffff
 801746c:	3ff00000 	.word	0x3ff00000
 8017470:	7ff00000 	.word	0x7ff00000
 8017474:	7fe00000 	.word	0x7fe00000
 8017478:	fcb00000 	.word	0xfcb00000
 801747c:	7c9fffff 	.word	0x7c9fffff
 8017480:	7fefffff 	.word	0x7fefffff
 8017484:	3fe00000 	.word	0x3fe00000
 8017488:	bff00000 	.word	0xbff00000
 801748c:	94a03595 	.word	0x94a03595
 8017490:	3fdfffff 	.word	0x3fdfffff
 8017494:	35afe535 	.word	0x35afe535
 8017498:	ffc00000 	.word	0xffc00000
 801749c:	41dfffff 	.word	0x41dfffff
 80174a0:	3fcfffff 	.word	0x3fcfffff

080174a4 <strtod>:
 80174a4:	b510      	push	{r4, lr}
 80174a6:	000a      	movs	r2, r1
 80174a8:	0001      	movs	r1, r0
 80174aa:	4803      	ldr	r0, [pc, #12]	; (80174b8 <strtod+0x14>)
 80174ac:	4b03      	ldr	r3, [pc, #12]	; (80174bc <strtod+0x18>)
 80174ae:	6800      	ldr	r0, [r0, #0]
 80174b0:	f7ff f9d4 	bl	801685c <_strtod_l>
 80174b4:	bd10      	pop	{r4, pc}
 80174b6:	46c0      	nop			; (mov r8, r8)
 80174b8:	20000368 	.word	0x20000368
 80174bc:	200003d0 	.word	0x200003d0

080174c0 <strtok>:
 80174c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80174c2:	4b16      	ldr	r3, [pc, #88]	; (801751c <strtok+0x5c>)
 80174c4:	0005      	movs	r5, r0
 80174c6:	681f      	ldr	r7, [r3, #0]
 80174c8:	000e      	movs	r6, r1
 80174ca:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 80174cc:	2c00      	cmp	r4, #0
 80174ce:	d11d      	bne.n	801750c <strtok+0x4c>
 80174d0:	2050      	movs	r0, #80	; 0x50
 80174d2:	f7ff f80d 	bl	80164f0 <malloc>
 80174d6:	1e02      	subs	r2, r0, #0
 80174d8:	65b8      	str	r0, [r7, #88]	; 0x58
 80174da:	d104      	bne.n	80174e6 <strtok+0x26>
 80174dc:	2157      	movs	r1, #87	; 0x57
 80174de:	4b10      	ldr	r3, [pc, #64]	; (8017520 <strtok+0x60>)
 80174e0:	4810      	ldr	r0, [pc, #64]	; (8017524 <strtok+0x64>)
 80174e2:	f000 f8eb 	bl	80176bc <__assert_func>
 80174e6:	6004      	str	r4, [r0, #0]
 80174e8:	6044      	str	r4, [r0, #4]
 80174ea:	6084      	str	r4, [r0, #8]
 80174ec:	60c4      	str	r4, [r0, #12]
 80174ee:	6104      	str	r4, [r0, #16]
 80174f0:	6144      	str	r4, [r0, #20]
 80174f2:	6184      	str	r4, [r0, #24]
 80174f4:	6284      	str	r4, [r0, #40]	; 0x28
 80174f6:	62c4      	str	r4, [r0, #44]	; 0x2c
 80174f8:	6304      	str	r4, [r0, #48]	; 0x30
 80174fa:	6344      	str	r4, [r0, #52]	; 0x34
 80174fc:	6384      	str	r4, [r0, #56]	; 0x38
 80174fe:	63c4      	str	r4, [r0, #60]	; 0x3c
 8017500:	6404      	str	r4, [r0, #64]	; 0x40
 8017502:	6444      	str	r4, [r0, #68]	; 0x44
 8017504:	6484      	str	r4, [r0, #72]	; 0x48
 8017506:	64c4      	str	r4, [r0, #76]	; 0x4c
 8017508:	7704      	strb	r4, [r0, #28]
 801750a:	6244      	str	r4, [r0, #36]	; 0x24
 801750c:	0031      	movs	r1, r6
 801750e:	0028      	movs	r0, r5
 8017510:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8017512:	2301      	movs	r3, #1
 8017514:	f000 f808 	bl	8017528 <__strtok_r>
 8017518:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801751a:	46c0      	nop			; (mov r8, r8)
 801751c:	20000368 	.word	0x20000368
 8017520:	0801cdd8 	.word	0x0801cdd8
 8017524:	0801ceb0 	.word	0x0801ceb0

08017528 <__strtok_r>:
 8017528:	b5f0      	push	{r4, r5, r6, r7, lr}
 801752a:	2800      	cmp	r0, #0
 801752c:	d102      	bne.n	8017534 <__strtok_r+0xc>
 801752e:	6810      	ldr	r0, [r2, #0]
 8017530:	2800      	cmp	r0, #0
 8017532:	d013      	beq.n	801755c <__strtok_r+0x34>
 8017534:	0004      	movs	r4, r0
 8017536:	0020      	movs	r0, r4
 8017538:	000e      	movs	r6, r1
 801753a:	7805      	ldrb	r5, [r0, #0]
 801753c:	3401      	adds	r4, #1
 801753e:	7837      	ldrb	r7, [r6, #0]
 8017540:	2f00      	cmp	r7, #0
 8017542:	d104      	bne.n	801754e <__strtok_r+0x26>
 8017544:	2d00      	cmp	r5, #0
 8017546:	d10f      	bne.n	8017568 <__strtok_r+0x40>
 8017548:	0028      	movs	r0, r5
 801754a:	6015      	str	r5, [r2, #0]
 801754c:	e006      	b.n	801755c <__strtok_r+0x34>
 801754e:	3601      	adds	r6, #1
 8017550:	42bd      	cmp	r5, r7
 8017552:	d1f4      	bne.n	801753e <__strtok_r+0x16>
 8017554:	2b00      	cmp	r3, #0
 8017556:	d1ee      	bne.n	8017536 <__strtok_r+0xe>
 8017558:	6014      	str	r4, [r2, #0]
 801755a:	7003      	strb	r3, [r0, #0]
 801755c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801755e:	002f      	movs	r7, r5
 8017560:	e00f      	b.n	8017582 <__strtok_r+0x5a>
 8017562:	3301      	adds	r3, #1
 8017564:	2e00      	cmp	r6, #0
 8017566:	d104      	bne.n	8017572 <__strtok_r+0x4a>
 8017568:	0023      	movs	r3, r4
 801756a:	3401      	adds	r4, #1
 801756c:	781d      	ldrb	r5, [r3, #0]
 801756e:	0027      	movs	r7, r4
 8017570:	000b      	movs	r3, r1
 8017572:	781e      	ldrb	r6, [r3, #0]
 8017574:	42b5      	cmp	r5, r6
 8017576:	d1f4      	bne.n	8017562 <__strtok_r+0x3a>
 8017578:	2d00      	cmp	r5, #0
 801757a:	d0f0      	beq.n	801755e <__strtok_r+0x36>
 801757c:	2300      	movs	r3, #0
 801757e:	3c01      	subs	r4, #1
 8017580:	7023      	strb	r3, [r4, #0]
 8017582:	6017      	str	r7, [r2, #0]
 8017584:	e7ea      	b.n	801755c <__strtok_r+0x34>
	...

08017588 <_strtol_l.isra.0>:
 8017588:	b5f0      	push	{r4, r5, r6, r7, lr}
 801758a:	b087      	sub	sp, #28
 801758c:	001e      	movs	r6, r3
 801758e:	9005      	str	r0, [sp, #20]
 8017590:	9101      	str	r1, [sp, #4]
 8017592:	9202      	str	r2, [sp, #8]
 8017594:	2b01      	cmp	r3, #1
 8017596:	d045      	beq.n	8017624 <_strtol_l.isra.0+0x9c>
 8017598:	0008      	movs	r0, r1
 801759a:	2b24      	cmp	r3, #36	; 0x24
 801759c:	d842      	bhi.n	8017624 <_strtol_l.isra.0+0x9c>
 801759e:	4b3f      	ldr	r3, [pc, #252]	; (801769c <_strtol_l.isra.0+0x114>)
 80175a0:	2208      	movs	r2, #8
 80175a2:	469c      	mov	ip, r3
 80175a4:	0003      	movs	r3, r0
 80175a6:	4661      	mov	r1, ip
 80175a8:	781c      	ldrb	r4, [r3, #0]
 80175aa:	1c45      	adds	r5, r0, #1
 80175ac:	5d09      	ldrb	r1, [r1, r4]
 80175ae:	0028      	movs	r0, r5
 80175b0:	000f      	movs	r7, r1
 80175b2:	4017      	ands	r7, r2
 80175b4:	4211      	tst	r1, r2
 80175b6:	d1f5      	bne.n	80175a4 <_strtol_l.isra.0+0x1c>
 80175b8:	2c2d      	cmp	r4, #45	; 0x2d
 80175ba:	d13a      	bne.n	8017632 <_strtol_l.isra.0+0xaa>
 80175bc:	2701      	movs	r7, #1
 80175be:	782c      	ldrb	r4, [r5, #0]
 80175c0:	1c9d      	adds	r5, r3, #2
 80175c2:	2e00      	cmp	r6, #0
 80175c4:	d065      	beq.n	8017692 <_strtol_l.isra.0+0x10a>
 80175c6:	2e10      	cmp	r6, #16
 80175c8:	d109      	bne.n	80175de <_strtol_l.isra.0+0x56>
 80175ca:	2c30      	cmp	r4, #48	; 0x30
 80175cc:	d107      	bne.n	80175de <_strtol_l.isra.0+0x56>
 80175ce:	2220      	movs	r2, #32
 80175d0:	782b      	ldrb	r3, [r5, #0]
 80175d2:	4393      	bics	r3, r2
 80175d4:	2b58      	cmp	r3, #88	; 0x58
 80175d6:	d157      	bne.n	8017688 <_strtol_l.isra.0+0x100>
 80175d8:	2610      	movs	r6, #16
 80175da:	786c      	ldrb	r4, [r5, #1]
 80175dc:	3502      	adds	r5, #2
 80175de:	4b30      	ldr	r3, [pc, #192]	; (80176a0 <_strtol_l.isra.0+0x118>)
 80175e0:	0031      	movs	r1, r6
 80175e2:	18fb      	adds	r3, r7, r3
 80175e4:	0018      	movs	r0, r3
 80175e6:	9303      	str	r3, [sp, #12]
 80175e8:	f7e8 fe38 	bl	800025c <__aeabi_uidivmod>
 80175ec:	2300      	movs	r3, #0
 80175ee:	2201      	movs	r2, #1
 80175f0:	4684      	mov	ip, r0
 80175f2:	0018      	movs	r0, r3
 80175f4:	9104      	str	r1, [sp, #16]
 80175f6:	4252      	negs	r2, r2
 80175f8:	0021      	movs	r1, r4
 80175fa:	3930      	subs	r1, #48	; 0x30
 80175fc:	2909      	cmp	r1, #9
 80175fe:	d81d      	bhi.n	801763c <_strtol_l.isra.0+0xb4>
 8017600:	000c      	movs	r4, r1
 8017602:	42a6      	cmp	r6, r4
 8017604:	dd28      	ble.n	8017658 <_strtol_l.isra.0+0xd0>
 8017606:	2b00      	cmp	r3, #0
 8017608:	db24      	blt.n	8017654 <_strtol_l.isra.0+0xcc>
 801760a:	0013      	movs	r3, r2
 801760c:	4584      	cmp	ip, r0
 801760e:	d306      	bcc.n	801761e <_strtol_l.isra.0+0x96>
 8017610:	d102      	bne.n	8017618 <_strtol_l.isra.0+0x90>
 8017612:	9904      	ldr	r1, [sp, #16]
 8017614:	42a1      	cmp	r1, r4
 8017616:	db02      	blt.n	801761e <_strtol_l.isra.0+0x96>
 8017618:	2301      	movs	r3, #1
 801761a:	4370      	muls	r0, r6
 801761c:	1820      	adds	r0, r4, r0
 801761e:	782c      	ldrb	r4, [r5, #0]
 8017620:	3501      	adds	r5, #1
 8017622:	e7e9      	b.n	80175f8 <_strtol_l.isra.0+0x70>
 8017624:	f000 f868 	bl	80176f8 <__errno>
 8017628:	2316      	movs	r3, #22
 801762a:	6003      	str	r3, [r0, #0]
 801762c:	2000      	movs	r0, #0
 801762e:	b007      	add	sp, #28
 8017630:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017632:	2c2b      	cmp	r4, #43	; 0x2b
 8017634:	d1c5      	bne.n	80175c2 <_strtol_l.isra.0+0x3a>
 8017636:	782c      	ldrb	r4, [r5, #0]
 8017638:	1c9d      	adds	r5, r3, #2
 801763a:	e7c2      	b.n	80175c2 <_strtol_l.isra.0+0x3a>
 801763c:	0021      	movs	r1, r4
 801763e:	3941      	subs	r1, #65	; 0x41
 8017640:	2919      	cmp	r1, #25
 8017642:	d801      	bhi.n	8017648 <_strtol_l.isra.0+0xc0>
 8017644:	3c37      	subs	r4, #55	; 0x37
 8017646:	e7dc      	b.n	8017602 <_strtol_l.isra.0+0x7a>
 8017648:	0021      	movs	r1, r4
 801764a:	3961      	subs	r1, #97	; 0x61
 801764c:	2919      	cmp	r1, #25
 801764e:	d803      	bhi.n	8017658 <_strtol_l.isra.0+0xd0>
 8017650:	3c57      	subs	r4, #87	; 0x57
 8017652:	e7d6      	b.n	8017602 <_strtol_l.isra.0+0x7a>
 8017654:	0013      	movs	r3, r2
 8017656:	e7e2      	b.n	801761e <_strtol_l.isra.0+0x96>
 8017658:	2b00      	cmp	r3, #0
 801765a:	da09      	bge.n	8017670 <_strtol_l.isra.0+0xe8>
 801765c:	2322      	movs	r3, #34	; 0x22
 801765e:	9a05      	ldr	r2, [sp, #20]
 8017660:	9803      	ldr	r0, [sp, #12]
 8017662:	6013      	str	r3, [r2, #0]
 8017664:	9b02      	ldr	r3, [sp, #8]
 8017666:	2b00      	cmp	r3, #0
 8017668:	d0e1      	beq.n	801762e <_strtol_l.isra.0+0xa6>
 801766a:	1e6b      	subs	r3, r5, #1
 801766c:	9301      	str	r3, [sp, #4]
 801766e:	e007      	b.n	8017680 <_strtol_l.isra.0+0xf8>
 8017670:	2f00      	cmp	r7, #0
 8017672:	d000      	beq.n	8017676 <_strtol_l.isra.0+0xee>
 8017674:	4240      	negs	r0, r0
 8017676:	9a02      	ldr	r2, [sp, #8]
 8017678:	2a00      	cmp	r2, #0
 801767a:	d0d8      	beq.n	801762e <_strtol_l.isra.0+0xa6>
 801767c:	2b00      	cmp	r3, #0
 801767e:	d1f4      	bne.n	801766a <_strtol_l.isra.0+0xe2>
 8017680:	9b02      	ldr	r3, [sp, #8]
 8017682:	9a01      	ldr	r2, [sp, #4]
 8017684:	601a      	str	r2, [r3, #0]
 8017686:	e7d2      	b.n	801762e <_strtol_l.isra.0+0xa6>
 8017688:	2430      	movs	r4, #48	; 0x30
 801768a:	2e00      	cmp	r6, #0
 801768c:	d1a7      	bne.n	80175de <_strtol_l.isra.0+0x56>
 801768e:	3608      	adds	r6, #8
 8017690:	e7a5      	b.n	80175de <_strtol_l.isra.0+0x56>
 8017692:	2c30      	cmp	r4, #48	; 0x30
 8017694:	d09b      	beq.n	80175ce <_strtol_l.isra.0+0x46>
 8017696:	260a      	movs	r6, #10
 8017698:	e7a1      	b.n	80175de <_strtol_l.isra.0+0x56>
 801769a:	46c0      	nop			; (mov r8, r8)
 801769c:	0801ccd1 	.word	0x0801ccd1
 80176a0:	7fffffff 	.word	0x7fffffff

080176a4 <strtol>:
 80176a4:	b510      	push	{r4, lr}
 80176a6:	0013      	movs	r3, r2
 80176a8:	000a      	movs	r2, r1
 80176aa:	0001      	movs	r1, r0
 80176ac:	4802      	ldr	r0, [pc, #8]	; (80176b8 <strtol+0x14>)
 80176ae:	6800      	ldr	r0, [r0, #0]
 80176b0:	f7ff ff6a 	bl	8017588 <_strtol_l.isra.0>
 80176b4:	bd10      	pop	{r4, pc}
 80176b6:	46c0      	nop			; (mov r8, r8)
 80176b8:	20000368 	.word	0x20000368

080176bc <__assert_func>:
 80176bc:	b530      	push	{r4, r5, lr}
 80176be:	0014      	movs	r4, r2
 80176c0:	001a      	movs	r2, r3
 80176c2:	4b09      	ldr	r3, [pc, #36]	; (80176e8 <__assert_func+0x2c>)
 80176c4:	0005      	movs	r5, r0
 80176c6:	681b      	ldr	r3, [r3, #0]
 80176c8:	b085      	sub	sp, #20
 80176ca:	68d8      	ldr	r0, [r3, #12]
 80176cc:	4b07      	ldr	r3, [pc, #28]	; (80176ec <__assert_func+0x30>)
 80176ce:	2c00      	cmp	r4, #0
 80176d0:	d101      	bne.n	80176d6 <__assert_func+0x1a>
 80176d2:	4b07      	ldr	r3, [pc, #28]	; (80176f0 <__assert_func+0x34>)
 80176d4:	001c      	movs	r4, r3
 80176d6:	9301      	str	r3, [sp, #4]
 80176d8:	9100      	str	r1, [sp, #0]
 80176da:	002b      	movs	r3, r5
 80176dc:	4905      	ldr	r1, [pc, #20]	; (80176f4 <__assert_func+0x38>)
 80176de:	9402      	str	r4, [sp, #8]
 80176e0:	f000 f810 	bl	8017704 <fiprintf>
 80176e4:	f001 fdd8 	bl	8019298 <abort>
 80176e8:	20000368 	.word	0x20000368
 80176ec:	0801cf11 	.word	0x0801cf11
 80176f0:	0801cf4c 	.word	0x0801cf4c
 80176f4:	0801cf1e 	.word	0x0801cf1e

080176f8 <__errno>:
 80176f8:	4b01      	ldr	r3, [pc, #4]	; (8017700 <__errno+0x8>)
 80176fa:	6818      	ldr	r0, [r3, #0]
 80176fc:	4770      	bx	lr
 80176fe:	46c0      	nop			; (mov r8, r8)
 8017700:	20000368 	.word	0x20000368

08017704 <fiprintf>:
 8017704:	b40e      	push	{r1, r2, r3}
 8017706:	b503      	push	{r0, r1, lr}
 8017708:	0001      	movs	r1, r0
 801770a:	ab03      	add	r3, sp, #12
 801770c:	4804      	ldr	r0, [pc, #16]	; (8017720 <fiprintf+0x1c>)
 801770e:	cb04      	ldmia	r3!, {r2}
 8017710:	6800      	ldr	r0, [r0, #0]
 8017712:	9301      	str	r3, [sp, #4]
 8017714:	f001 fa22 	bl	8018b5c <_vfiprintf_r>
 8017718:	b002      	add	sp, #8
 801771a:	bc08      	pop	{r3}
 801771c:	b003      	add	sp, #12
 801771e:	4718      	bx	r3
 8017720:	20000368 	.word	0x20000368

08017724 <rshift>:
 8017724:	0002      	movs	r2, r0
 8017726:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017728:	6907      	ldr	r7, [r0, #16]
 801772a:	3214      	adds	r2, #20
 801772c:	0013      	movs	r3, r2
 801772e:	b085      	sub	sp, #20
 8017730:	114e      	asrs	r6, r1, #5
 8017732:	42b7      	cmp	r7, r6
 8017734:	dd31      	ble.n	801779a <rshift+0x76>
 8017736:	00b3      	lsls	r3, r6, #2
 8017738:	18d3      	adds	r3, r2, r3
 801773a:	251f      	movs	r5, #31
 801773c:	9301      	str	r3, [sp, #4]
 801773e:	000b      	movs	r3, r1
 8017740:	00bc      	lsls	r4, r7, #2
 8017742:	402b      	ands	r3, r5
 8017744:	1914      	adds	r4, r2, r4
 8017746:	9302      	str	r3, [sp, #8]
 8017748:	4229      	tst	r1, r5
 801774a:	d10c      	bne.n	8017766 <rshift+0x42>
 801774c:	0015      	movs	r5, r2
 801774e:	9901      	ldr	r1, [sp, #4]
 8017750:	428c      	cmp	r4, r1
 8017752:	d838      	bhi.n	80177c6 <rshift+0xa2>
 8017754:	9901      	ldr	r1, [sp, #4]
 8017756:	2300      	movs	r3, #0
 8017758:	3903      	subs	r1, #3
 801775a:	428c      	cmp	r4, r1
 801775c:	d301      	bcc.n	8017762 <rshift+0x3e>
 801775e:	1bbb      	subs	r3, r7, r6
 8017760:	009b      	lsls	r3, r3, #2
 8017762:	18d3      	adds	r3, r2, r3
 8017764:	e019      	b.n	801779a <rshift+0x76>
 8017766:	2120      	movs	r1, #32
 8017768:	9b02      	ldr	r3, [sp, #8]
 801776a:	9d01      	ldr	r5, [sp, #4]
 801776c:	1acb      	subs	r3, r1, r3
 801776e:	9303      	str	r3, [sp, #12]
 8017770:	cd02      	ldmia	r5!, {r1}
 8017772:	9b02      	ldr	r3, [sp, #8]
 8017774:	4694      	mov	ip, r2
 8017776:	40d9      	lsrs	r1, r3
 8017778:	9100      	str	r1, [sp, #0]
 801777a:	42ac      	cmp	r4, r5
 801777c:	d816      	bhi.n	80177ac <rshift+0x88>
 801777e:	9d01      	ldr	r5, [sp, #4]
 8017780:	2300      	movs	r3, #0
 8017782:	3501      	adds	r5, #1
 8017784:	42ac      	cmp	r4, r5
 8017786:	d302      	bcc.n	801778e <rshift+0x6a>
 8017788:	1bbb      	subs	r3, r7, r6
 801778a:	009b      	lsls	r3, r3, #2
 801778c:	3b04      	subs	r3, #4
 801778e:	9900      	ldr	r1, [sp, #0]
 8017790:	18d3      	adds	r3, r2, r3
 8017792:	6019      	str	r1, [r3, #0]
 8017794:	2900      	cmp	r1, #0
 8017796:	d000      	beq.n	801779a <rshift+0x76>
 8017798:	3304      	adds	r3, #4
 801779a:	1a99      	subs	r1, r3, r2
 801779c:	1089      	asrs	r1, r1, #2
 801779e:	6101      	str	r1, [r0, #16]
 80177a0:	4293      	cmp	r3, r2
 80177a2:	d101      	bne.n	80177a8 <rshift+0x84>
 80177a4:	2300      	movs	r3, #0
 80177a6:	6143      	str	r3, [r0, #20]
 80177a8:	b005      	add	sp, #20
 80177aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80177ac:	682b      	ldr	r3, [r5, #0]
 80177ae:	9903      	ldr	r1, [sp, #12]
 80177b0:	408b      	lsls	r3, r1
 80177b2:	9900      	ldr	r1, [sp, #0]
 80177b4:	4319      	orrs	r1, r3
 80177b6:	4663      	mov	r3, ip
 80177b8:	c302      	stmia	r3!, {r1}
 80177ba:	469c      	mov	ip, r3
 80177bc:	cd02      	ldmia	r5!, {r1}
 80177be:	9b02      	ldr	r3, [sp, #8]
 80177c0:	40d9      	lsrs	r1, r3
 80177c2:	9100      	str	r1, [sp, #0]
 80177c4:	e7d9      	b.n	801777a <rshift+0x56>
 80177c6:	c908      	ldmia	r1!, {r3}
 80177c8:	c508      	stmia	r5!, {r3}
 80177ca:	e7c1      	b.n	8017750 <rshift+0x2c>

080177cc <__hexdig_fun>:
 80177cc:	0002      	movs	r2, r0
 80177ce:	3a30      	subs	r2, #48	; 0x30
 80177d0:	0003      	movs	r3, r0
 80177d2:	2a09      	cmp	r2, #9
 80177d4:	d802      	bhi.n	80177dc <__hexdig_fun+0x10>
 80177d6:	3b20      	subs	r3, #32
 80177d8:	b2d8      	uxtb	r0, r3
 80177da:	4770      	bx	lr
 80177dc:	0002      	movs	r2, r0
 80177de:	3a61      	subs	r2, #97	; 0x61
 80177e0:	2a05      	cmp	r2, #5
 80177e2:	d801      	bhi.n	80177e8 <__hexdig_fun+0x1c>
 80177e4:	3b47      	subs	r3, #71	; 0x47
 80177e6:	e7f7      	b.n	80177d8 <__hexdig_fun+0xc>
 80177e8:	001a      	movs	r2, r3
 80177ea:	3a41      	subs	r2, #65	; 0x41
 80177ec:	2000      	movs	r0, #0
 80177ee:	2a05      	cmp	r2, #5
 80177f0:	d8f3      	bhi.n	80177da <__hexdig_fun+0xe>
 80177f2:	3b27      	subs	r3, #39	; 0x27
 80177f4:	e7f0      	b.n	80177d8 <__hexdig_fun+0xc>
	...

080177f8 <__gethex>:
 80177f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80177fa:	b08d      	sub	sp, #52	; 0x34
 80177fc:	930a      	str	r3, [sp, #40]	; 0x28
 80177fe:	4bbd      	ldr	r3, [pc, #756]	; (8017af4 <__gethex+0x2fc>)
 8017800:	9005      	str	r0, [sp, #20]
 8017802:	681b      	ldr	r3, [r3, #0]
 8017804:	9109      	str	r1, [sp, #36]	; 0x24
 8017806:	0018      	movs	r0, r3
 8017808:	9202      	str	r2, [sp, #8]
 801780a:	9307      	str	r3, [sp, #28]
 801780c:	f7e8 fc84 	bl	8000118 <strlen>
 8017810:	2202      	movs	r2, #2
 8017812:	9b07      	ldr	r3, [sp, #28]
 8017814:	4252      	negs	r2, r2
 8017816:	181b      	adds	r3, r3, r0
 8017818:	3b01      	subs	r3, #1
 801781a:	781b      	ldrb	r3, [r3, #0]
 801781c:	9003      	str	r0, [sp, #12]
 801781e:	930b      	str	r3, [sp, #44]	; 0x2c
 8017820:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017822:	6819      	ldr	r1, [r3, #0]
 8017824:	1c8b      	adds	r3, r1, #2
 8017826:	1a52      	subs	r2, r2, r1
 8017828:	18d1      	adds	r1, r2, r3
 801782a:	9301      	str	r3, [sp, #4]
 801782c:	9108      	str	r1, [sp, #32]
 801782e:	9901      	ldr	r1, [sp, #4]
 8017830:	3301      	adds	r3, #1
 8017832:	7808      	ldrb	r0, [r1, #0]
 8017834:	2830      	cmp	r0, #48	; 0x30
 8017836:	d0f7      	beq.n	8017828 <__gethex+0x30>
 8017838:	f7ff ffc8 	bl	80177cc <__hexdig_fun>
 801783c:	1e04      	subs	r4, r0, #0
 801783e:	d13e      	bne.n	80178be <__gethex+0xc6>
 8017840:	9a03      	ldr	r2, [sp, #12]
 8017842:	9907      	ldr	r1, [sp, #28]
 8017844:	9801      	ldr	r0, [sp, #4]
 8017846:	f7fe ffcc 	bl	80167e2 <strncmp>
 801784a:	1e07      	subs	r7, r0, #0
 801784c:	d000      	beq.n	8017850 <__gethex+0x58>
 801784e:	e06f      	b.n	8017930 <__gethex+0x138>
 8017850:	9b01      	ldr	r3, [sp, #4]
 8017852:	9a03      	ldr	r2, [sp, #12]
 8017854:	5c98      	ldrb	r0, [r3, r2]
 8017856:	189d      	adds	r5, r3, r2
 8017858:	f7ff ffb8 	bl	80177cc <__hexdig_fun>
 801785c:	2301      	movs	r3, #1
 801785e:	9304      	str	r3, [sp, #16]
 8017860:	2800      	cmp	r0, #0
 8017862:	d034      	beq.n	80178ce <__gethex+0xd6>
 8017864:	9501      	str	r5, [sp, #4]
 8017866:	9b01      	ldr	r3, [sp, #4]
 8017868:	7818      	ldrb	r0, [r3, #0]
 801786a:	2830      	cmp	r0, #48	; 0x30
 801786c:	d009      	beq.n	8017882 <__gethex+0x8a>
 801786e:	f7ff ffad 	bl	80177cc <__hexdig_fun>
 8017872:	4243      	negs	r3, r0
 8017874:	4143      	adcs	r3, r0
 8017876:	9304      	str	r3, [sp, #16]
 8017878:	2301      	movs	r3, #1
 801787a:	002c      	movs	r4, r5
 801787c:	9308      	str	r3, [sp, #32]
 801787e:	9d01      	ldr	r5, [sp, #4]
 8017880:	e004      	b.n	801788c <__gethex+0x94>
 8017882:	9b01      	ldr	r3, [sp, #4]
 8017884:	3301      	adds	r3, #1
 8017886:	9301      	str	r3, [sp, #4]
 8017888:	e7ed      	b.n	8017866 <__gethex+0x6e>
 801788a:	3501      	adds	r5, #1
 801788c:	7828      	ldrb	r0, [r5, #0]
 801788e:	f7ff ff9d 	bl	80177cc <__hexdig_fun>
 8017892:	1e07      	subs	r7, r0, #0
 8017894:	d1f9      	bne.n	801788a <__gethex+0x92>
 8017896:	0028      	movs	r0, r5
 8017898:	9a03      	ldr	r2, [sp, #12]
 801789a:	9907      	ldr	r1, [sp, #28]
 801789c:	f7fe ffa1 	bl	80167e2 <strncmp>
 80178a0:	2800      	cmp	r0, #0
 80178a2:	d112      	bne.n	80178ca <__gethex+0xd2>
 80178a4:	2c00      	cmp	r4, #0
 80178a6:	d107      	bne.n	80178b8 <__gethex+0xc0>
 80178a8:	9b03      	ldr	r3, [sp, #12]
 80178aa:	18ed      	adds	r5, r5, r3
 80178ac:	002c      	movs	r4, r5
 80178ae:	7828      	ldrb	r0, [r5, #0]
 80178b0:	f7ff ff8c 	bl	80177cc <__hexdig_fun>
 80178b4:	2800      	cmp	r0, #0
 80178b6:	d106      	bne.n	80178c6 <__gethex+0xce>
 80178b8:	1b67      	subs	r7, r4, r5
 80178ba:	00bf      	lsls	r7, r7, #2
 80178bc:	e007      	b.n	80178ce <__gethex+0xd6>
 80178be:	2300      	movs	r3, #0
 80178c0:	001c      	movs	r4, r3
 80178c2:	9304      	str	r3, [sp, #16]
 80178c4:	e7db      	b.n	801787e <__gethex+0x86>
 80178c6:	3501      	adds	r5, #1
 80178c8:	e7f1      	b.n	80178ae <__gethex+0xb6>
 80178ca:	2c00      	cmp	r4, #0
 80178cc:	d1f4      	bne.n	80178b8 <__gethex+0xc0>
 80178ce:	2220      	movs	r2, #32
 80178d0:	782b      	ldrb	r3, [r5, #0]
 80178d2:	002e      	movs	r6, r5
 80178d4:	4393      	bics	r3, r2
 80178d6:	2b50      	cmp	r3, #80	; 0x50
 80178d8:	d11d      	bne.n	8017916 <__gethex+0x11e>
 80178da:	786b      	ldrb	r3, [r5, #1]
 80178dc:	2b2b      	cmp	r3, #43	; 0x2b
 80178de:	d02c      	beq.n	801793a <__gethex+0x142>
 80178e0:	2b2d      	cmp	r3, #45	; 0x2d
 80178e2:	d02e      	beq.n	8017942 <__gethex+0x14a>
 80178e4:	2300      	movs	r3, #0
 80178e6:	1c6e      	adds	r6, r5, #1
 80178e8:	9306      	str	r3, [sp, #24]
 80178ea:	7830      	ldrb	r0, [r6, #0]
 80178ec:	f7ff ff6e 	bl	80177cc <__hexdig_fun>
 80178f0:	1e43      	subs	r3, r0, #1
 80178f2:	b2db      	uxtb	r3, r3
 80178f4:	2b18      	cmp	r3, #24
 80178f6:	d82b      	bhi.n	8017950 <__gethex+0x158>
 80178f8:	3810      	subs	r0, #16
 80178fa:	0004      	movs	r4, r0
 80178fc:	7870      	ldrb	r0, [r6, #1]
 80178fe:	f7ff ff65 	bl	80177cc <__hexdig_fun>
 8017902:	1e43      	subs	r3, r0, #1
 8017904:	b2db      	uxtb	r3, r3
 8017906:	3601      	adds	r6, #1
 8017908:	2b18      	cmp	r3, #24
 801790a:	d91c      	bls.n	8017946 <__gethex+0x14e>
 801790c:	9b06      	ldr	r3, [sp, #24]
 801790e:	2b00      	cmp	r3, #0
 8017910:	d000      	beq.n	8017914 <__gethex+0x11c>
 8017912:	4264      	negs	r4, r4
 8017914:	193f      	adds	r7, r7, r4
 8017916:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017918:	601e      	str	r6, [r3, #0]
 801791a:	9b04      	ldr	r3, [sp, #16]
 801791c:	2b00      	cmp	r3, #0
 801791e:	d019      	beq.n	8017954 <__gethex+0x15c>
 8017920:	2600      	movs	r6, #0
 8017922:	9b08      	ldr	r3, [sp, #32]
 8017924:	42b3      	cmp	r3, r6
 8017926:	d100      	bne.n	801792a <__gethex+0x132>
 8017928:	3606      	adds	r6, #6
 801792a:	0030      	movs	r0, r6
 801792c:	b00d      	add	sp, #52	; 0x34
 801792e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017930:	2301      	movs	r3, #1
 8017932:	0027      	movs	r7, r4
 8017934:	9d01      	ldr	r5, [sp, #4]
 8017936:	9304      	str	r3, [sp, #16]
 8017938:	e7c9      	b.n	80178ce <__gethex+0xd6>
 801793a:	2300      	movs	r3, #0
 801793c:	9306      	str	r3, [sp, #24]
 801793e:	1cae      	adds	r6, r5, #2
 8017940:	e7d3      	b.n	80178ea <__gethex+0xf2>
 8017942:	2301      	movs	r3, #1
 8017944:	e7fa      	b.n	801793c <__gethex+0x144>
 8017946:	230a      	movs	r3, #10
 8017948:	435c      	muls	r4, r3
 801794a:	1824      	adds	r4, r4, r0
 801794c:	3c10      	subs	r4, #16
 801794e:	e7d5      	b.n	80178fc <__gethex+0x104>
 8017950:	002e      	movs	r6, r5
 8017952:	e7e0      	b.n	8017916 <__gethex+0x11e>
 8017954:	9b01      	ldr	r3, [sp, #4]
 8017956:	9904      	ldr	r1, [sp, #16]
 8017958:	1aeb      	subs	r3, r5, r3
 801795a:	3b01      	subs	r3, #1
 801795c:	2b07      	cmp	r3, #7
 801795e:	dc0a      	bgt.n	8017976 <__gethex+0x17e>
 8017960:	9805      	ldr	r0, [sp, #20]
 8017962:	f000 fa73 	bl	8017e4c <_Balloc>
 8017966:	1e04      	subs	r4, r0, #0
 8017968:	d108      	bne.n	801797c <__gethex+0x184>
 801796a:	0002      	movs	r2, r0
 801796c:	21de      	movs	r1, #222	; 0xde
 801796e:	4b62      	ldr	r3, [pc, #392]	; (8017af8 <__gethex+0x300>)
 8017970:	4862      	ldr	r0, [pc, #392]	; (8017afc <__gethex+0x304>)
 8017972:	f7ff fea3 	bl	80176bc <__assert_func>
 8017976:	3101      	adds	r1, #1
 8017978:	105b      	asrs	r3, r3, #1
 801797a:	e7ef      	b.n	801795c <__gethex+0x164>
 801797c:	0003      	movs	r3, r0
 801797e:	3314      	adds	r3, #20
 8017980:	9304      	str	r3, [sp, #16]
 8017982:	9309      	str	r3, [sp, #36]	; 0x24
 8017984:	2300      	movs	r3, #0
 8017986:	001e      	movs	r6, r3
 8017988:	9306      	str	r3, [sp, #24]
 801798a:	9b01      	ldr	r3, [sp, #4]
 801798c:	42ab      	cmp	r3, r5
 801798e:	d340      	bcc.n	8017a12 <__gethex+0x21a>
 8017990:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8017992:	9b04      	ldr	r3, [sp, #16]
 8017994:	c540      	stmia	r5!, {r6}
 8017996:	1aed      	subs	r5, r5, r3
 8017998:	10ad      	asrs	r5, r5, #2
 801799a:	0030      	movs	r0, r6
 801799c:	6125      	str	r5, [r4, #16]
 801799e:	f000 fb4d 	bl	801803c <__hi0bits>
 80179a2:	9b02      	ldr	r3, [sp, #8]
 80179a4:	016d      	lsls	r5, r5, #5
 80179a6:	681b      	ldr	r3, [r3, #0]
 80179a8:	1a2e      	subs	r6, r5, r0
 80179aa:	9301      	str	r3, [sp, #4]
 80179ac:	429e      	cmp	r6, r3
 80179ae:	dd5a      	ble.n	8017a66 <__gethex+0x26e>
 80179b0:	1af6      	subs	r6, r6, r3
 80179b2:	0031      	movs	r1, r6
 80179b4:	0020      	movs	r0, r4
 80179b6:	f000 fef0 	bl	801879a <__any_on>
 80179ba:	1e05      	subs	r5, r0, #0
 80179bc:	d016      	beq.n	80179ec <__gethex+0x1f4>
 80179be:	2501      	movs	r5, #1
 80179c0:	211f      	movs	r1, #31
 80179c2:	0028      	movs	r0, r5
 80179c4:	1e73      	subs	r3, r6, #1
 80179c6:	4019      	ands	r1, r3
 80179c8:	4088      	lsls	r0, r1
 80179ca:	0001      	movs	r1, r0
 80179cc:	115a      	asrs	r2, r3, #5
 80179ce:	9804      	ldr	r0, [sp, #16]
 80179d0:	0092      	lsls	r2, r2, #2
 80179d2:	5812      	ldr	r2, [r2, r0]
 80179d4:	420a      	tst	r2, r1
 80179d6:	d009      	beq.n	80179ec <__gethex+0x1f4>
 80179d8:	42ab      	cmp	r3, r5
 80179da:	dd06      	ble.n	80179ea <__gethex+0x1f2>
 80179dc:	0020      	movs	r0, r4
 80179de:	1eb1      	subs	r1, r6, #2
 80179e0:	f000 fedb 	bl	801879a <__any_on>
 80179e4:	3502      	adds	r5, #2
 80179e6:	2800      	cmp	r0, #0
 80179e8:	d100      	bne.n	80179ec <__gethex+0x1f4>
 80179ea:	2502      	movs	r5, #2
 80179ec:	0031      	movs	r1, r6
 80179ee:	0020      	movs	r0, r4
 80179f0:	f7ff fe98 	bl	8017724 <rshift>
 80179f4:	19bf      	adds	r7, r7, r6
 80179f6:	9b02      	ldr	r3, [sp, #8]
 80179f8:	689b      	ldr	r3, [r3, #8]
 80179fa:	9303      	str	r3, [sp, #12]
 80179fc:	42bb      	cmp	r3, r7
 80179fe:	da42      	bge.n	8017a86 <__gethex+0x28e>
 8017a00:	0021      	movs	r1, r4
 8017a02:	9805      	ldr	r0, [sp, #20]
 8017a04:	f000 fa66 	bl	8017ed4 <_Bfree>
 8017a08:	2300      	movs	r3, #0
 8017a0a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8017a0c:	26a3      	movs	r6, #163	; 0xa3
 8017a0e:	6013      	str	r3, [r2, #0]
 8017a10:	e78b      	b.n	801792a <__gethex+0x132>
 8017a12:	1e6b      	subs	r3, r5, #1
 8017a14:	9308      	str	r3, [sp, #32]
 8017a16:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8017a18:	781b      	ldrb	r3, [r3, #0]
 8017a1a:	4293      	cmp	r3, r2
 8017a1c:	d014      	beq.n	8017a48 <__gethex+0x250>
 8017a1e:	9b06      	ldr	r3, [sp, #24]
 8017a20:	2b20      	cmp	r3, #32
 8017a22:	d104      	bne.n	8017a2e <__gethex+0x236>
 8017a24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017a26:	c340      	stmia	r3!, {r6}
 8017a28:	2600      	movs	r6, #0
 8017a2a:	9309      	str	r3, [sp, #36]	; 0x24
 8017a2c:	9606      	str	r6, [sp, #24]
 8017a2e:	9b08      	ldr	r3, [sp, #32]
 8017a30:	7818      	ldrb	r0, [r3, #0]
 8017a32:	f7ff fecb 	bl	80177cc <__hexdig_fun>
 8017a36:	230f      	movs	r3, #15
 8017a38:	4018      	ands	r0, r3
 8017a3a:	9b06      	ldr	r3, [sp, #24]
 8017a3c:	9d08      	ldr	r5, [sp, #32]
 8017a3e:	4098      	lsls	r0, r3
 8017a40:	3304      	adds	r3, #4
 8017a42:	4306      	orrs	r6, r0
 8017a44:	9306      	str	r3, [sp, #24]
 8017a46:	e7a0      	b.n	801798a <__gethex+0x192>
 8017a48:	2301      	movs	r3, #1
 8017a4a:	9a03      	ldr	r2, [sp, #12]
 8017a4c:	1a9d      	subs	r5, r3, r2
 8017a4e:	9b08      	ldr	r3, [sp, #32]
 8017a50:	195d      	adds	r5, r3, r5
 8017a52:	9b01      	ldr	r3, [sp, #4]
 8017a54:	429d      	cmp	r5, r3
 8017a56:	d3e2      	bcc.n	8017a1e <__gethex+0x226>
 8017a58:	0028      	movs	r0, r5
 8017a5a:	9907      	ldr	r1, [sp, #28]
 8017a5c:	f7fe fec1 	bl	80167e2 <strncmp>
 8017a60:	2800      	cmp	r0, #0
 8017a62:	d1dc      	bne.n	8017a1e <__gethex+0x226>
 8017a64:	e791      	b.n	801798a <__gethex+0x192>
 8017a66:	9b01      	ldr	r3, [sp, #4]
 8017a68:	2500      	movs	r5, #0
 8017a6a:	429e      	cmp	r6, r3
 8017a6c:	dac3      	bge.n	80179f6 <__gethex+0x1fe>
 8017a6e:	1b9e      	subs	r6, r3, r6
 8017a70:	0021      	movs	r1, r4
 8017a72:	0032      	movs	r2, r6
 8017a74:	9805      	ldr	r0, [sp, #20]
 8017a76:	f000 fc4b 	bl	8018310 <__lshift>
 8017a7a:	0003      	movs	r3, r0
 8017a7c:	3314      	adds	r3, #20
 8017a7e:	0004      	movs	r4, r0
 8017a80:	1bbf      	subs	r7, r7, r6
 8017a82:	9304      	str	r3, [sp, #16]
 8017a84:	e7b7      	b.n	80179f6 <__gethex+0x1fe>
 8017a86:	9b02      	ldr	r3, [sp, #8]
 8017a88:	685e      	ldr	r6, [r3, #4]
 8017a8a:	42be      	cmp	r6, r7
 8017a8c:	dd71      	ble.n	8017b72 <__gethex+0x37a>
 8017a8e:	9b01      	ldr	r3, [sp, #4]
 8017a90:	1bf6      	subs	r6, r6, r7
 8017a92:	42b3      	cmp	r3, r6
 8017a94:	dc38      	bgt.n	8017b08 <__gethex+0x310>
 8017a96:	9b02      	ldr	r3, [sp, #8]
 8017a98:	68db      	ldr	r3, [r3, #12]
 8017a9a:	2b02      	cmp	r3, #2
 8017a9c:	d026      	beq.n	8017aec <__gethex+0x2f4>
 8017a9e:	2b03      	cmp	r3, #3
 8017aa0:	d02e      	beq.n	8017b00 <__gethex+0x308>
 8017aa2:	2b01      	cmp	r3, #1
 8017aa4:	d119      	bne.n	8017ada <__gethex+0x2e2>
 8017aa6:	9b01      	ldr	r3, [sp, #4]
 8017aa8:	42b3      	cmp	r3, r6
 8017aaa:	d116      	bne.n	8017ada <__gethex+0x2e2>
 8017aac:	2b01      	cmp	r3, #1
 8017aae:	d10d      	bne.n	8017acc <__gethex+0x2d4>
 8017ab0:	9b02      	ldr	r3, [sp, #8]
 8017ab2:	2662      	movs	r6, #98	; 0x62
 8017ab4:	685b      	ldr	r3, [r3, #4]
 8017ab6:	9301      	str	r3, [sp, #4]
 8017ab8:	9a01      	ldr	r2, [sp, #4]
 8017aba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017abc:	601a      	str	r2, [r3, #0]
 8017abe:	2301      	movs	r3, #1
 8017ac0:	9a04      	ldr	r2, [sp, #16]
 8017ac2:	6123      	str	r3, [r4, #16]
 8017ac4:	6013      	str	r3, [r2, #0]
 8017ac6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8017ac8:	601c      	str	r4, [r3, #0]
 8017aca:	e72e      	b.n	801792a <__gethex+0x132>
 8017acc:	9901      	ldr	r1, [sp, #4]
 8017ace:	0020      	movs	r0, r4
 8017ad0:	3901      	subs	r1, #1
 8017ad2:	f000 fe62 	bl	801879a <__any_on>
 8017ad6:	2800      	cmp	r0, #0
 8017ad8:	d1ea      	bne.n	8017ab0 <__gethex+0x2b8>
 8017ada:	0021      	movs	r1, r4
 8017adc:	9805      	ldr	r0, [sp, #20]
 8017ade:	f000 f9f9 	bl	8017ed4 <_Bfree>
 8017ae2:	2300      	movs	r3, #0
 8017ae4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8017ae6:	2650      	movs	r6, #80	; 0x50
 8017ae8:	6013      	str	r3, [r2, #0]
 8017aea:	e71e      	b.n	801792a <__gethex+0x132>
 8017aec:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8017aee:	2b00      	cmp	r3, #0
 8017af0:	d1f3      	bne.n	8017ada <__gethex+0x2e2>
 8017af2:	e7dd      	b.n	8017ab0 <__gethex+0x2b8>
 8017af4:	0801cfc8 	.word	0x0801cfc8
 8017af8:	0801cf4d 	.word	0x0801cf4d
 8017afc:	0801cf5e 	.word	0x0801cf5e
 8017b00:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8017b02:	2b00      	cmp	r3, #0
 8017b04:	d1d4      	bne.n	8017ab0 <__gethex+0x2b8>
 8017b06:	e7e8      	b.n	8017ada <__gethex+0x2e2>
 8017b08:	1e77      	subs	r7, r6, #1
 8017b0a:	2d00      	cmp	r5, #0
 8017b0c:	d12f      	bne.n	8017b6e <__gethex+0x376>
 8017b0e:	2f00      	cmp	r7, #0
 8017b10:	d004      	beq.n	8017b1c <__gethex+0x324>
 8017b12:	0039      	movs	r1, r7
 8017b14:	0020      	movs	r0, r4
 8017b16:	f000 fe40 	bl	801879a <__any_on>
 8017b1a:	0005      	movs	r5, r0
 8017b1c:	231f      	movs	r3, #31
 8017b1e:	117a      	asrs	r2, r7, #5
 8017b20:	401f      	ands	r7, r3
 8017b22:	3b1e      	subs	r3, #30
 8017b24:	40bb      	lsls	r3, r7
 8017b26:	9904      	ldr	r1, [sp, #16]
 8017b28:	0092      	lsls	r2, r2, #2
 8017b2a:	5852      	ldr	r2, [r2, r1]
 8017b2c:	421a      	tst	r2, r3
 8017b2e:	d001      	beq.n	8017b34 <__gethex+0x33c>
 8017b30:	2302      	movs	r3, #2
 8017b32:	431d      	orrs	r5, r3
 8017b34:	9b01      	ldr	r3, [sp, #4]
 8017b36:	0031      	movs	r1, r6
 8017b38:	1b9b      	subs	r3, r3, r6
 8017b3a:	2602      	movs	r6, #2
 8017b3c:	0020      	movs	r0, r4
 8017b3e:	9301      	str	r3, [sp, #4]
 8017b40:	f7ff fdf0 	bl	8017724 <rshift>
 8017b44:	9b02      	ldr	r3, [sp, #8]
 8017b46:	685f      	ldr	r7, [r3, #4]
 8017b48:	2d00      	cmp	r5, #0
 8017b4a:	d041      	beq.n	8017bd0 <__gethex+0x3d8>
 8017b4c:	9b02      	ldr	r3, [sp, #8]
 8017b4e:	68db      	ldr	r3, [r3, #12]
 8017b50:	2b02      	cmp	r3, #2
 8017b52:	d010      	beq.n	8017b76 <__gethex+0x37e>
 8017b54:	2b03      	cmp	r3, #3
 8017b56:	d012      	beq.n	8017b7e <__gethex+0x386>
 8017b58:	2b01      	cmp	r3, #1
 8017b5a:	d106      	bne.n	8017b6a <__gethex+0x372>
 8017b5c:	07aa      	lsls	r2, r5, #30
 8017b5e:	d504      	bpl.n	8017b6a <__gethex+0x372>
 8017b60:	9a04      	ldr	r2, [sp, #16]
 8017b62:	6810      	ldr	r0, [r2, #0]
 8017b64:	4305      	orrs	r5, r0
 8017b66:	421d      	tst	r5, r3
 8017b68:	d10c      	bne.n	8017b84 <__gethex+0x38c>
 8017b6a:	2310      	movs	r3, #16
 8017b6c:	e02f      	b.n	8017bce <__gethex+0x3d6>
 8017b6e:	2501      	movs	r5, #1
 8017b70:	e7d4      	b.n	8017b1c <__gethex+0x324>
 8017b72:	2601      	movs	r6, #1
 8017b74:	e7e8      	b.n	8017b48 <__gethex+0x350>
 8017b76:	2301      	movs	r3, #1
 8017b78:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8017b7a:	1a9b      	subs	r3, r3, r2
 8017b7c:	9313      	str	r3, [sp, #76]	; 0x4c
 8017b7e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8017b80:	2b00      	cmp	r3, #0
 8017b82:	d0f2      	beq.n	8017b6a <__gethex+0x372>
 8017b84:	6923      	ldr	r3, [r4, #16]
 8017b86:	2000      	movs	r0, #0
 8017b88:	9303      	str	r3, [sp, #12]
 8017b8a:	009b      	lsls	r3, r3, #2
 8017b8c:	9304      	str	r3, [sp, #16]
 8017b8e:	0023      	movs	r3, r4
 8017b90:	9a04      	ldr	r2, [sp, #16]
 8017b92:	3314      	adds	r3, #20
 8017b94:	1899      	adds	r1, r3, r2
 8017b96:	681a      	ldr	r2, [r3, #0]
 8017b98:	1c55      	adds	r5, r2, #1
 8017b9a:	d01e      	beq.n	8017bda <__gethex+0x3e2>
 8017b9c:	3201      	adds	r2, #1
 8017b9e:	601a      	str	r2, [r3, #0]
 8017ba0:	0023      	movs	r3, r4
 8017ba2:	3314      	adds	r3, #20
 8017ba4:	2e02      	cmp	r6, #2
 8017ba6:	d140      	bne.n	8017c2a <__gethex+0x432>
 8017ba8:	9a02      	ldr	r2, [sp, #8]
 8017baa:	9901      	ldr	r1, [sp, #4]
 8017bac:	6812      	ldr	r2, [r2, #0]
 8017bae:	3a01      	subs	r2, #1
 8017bb0:	428a      	cmp	r2, r1
 8017bb2:	d10b      	bne.n	8017bcc <__gethex+0x3d4>
 8017bb4:	114a      	asrs	r2, r1, #5
 8017bb6:	211f      	movs	r1, #31
 8017bb8:	9801      	ldr	r0, [sp, #4]
 8017bba:	0092      	lsls	r2, r2, #2
 8017bbc:	4001      	ands	r1, r0
 8017bbe:	2001      	movs	r0, #1
 8017bc0:	0005      	movs	r5, r0
 8017bc2:	408d      	lsls	r5, r1
 8017bc4:	58d3      	ldr	r3, [r2, r3]
 8017bc6:	422b      	tst	r3, r5
 8017bc8:	d000      	beq.n	8017bcc <__gethex+0x3d4>
 8017bca:	2601      	movs	r6, #1
 8017bcc:	2320      	movs	r3, #32
 8017bce:	431e      	orrs	r6, r3
 8017bd0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8017bd2:	601c      	str	r4, [r3, #0]
 8017bd4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017bd6:	601f      	str	r7, [r3, #0]
 8017bd8:	e6a7      	b.n	801792a <__gethex+0x132>
 8017bda:	c301      	stmia	r3!, {r0}
 8017bdc:	4299      	cmp	r1, r3
 8017bde:	d8da      	bhi.n	8017b96 <__gethex+0x39e>
 8017be0:	9b03      	ldr	r3, [sp, #12]
 8017be2:	68a2      	ldr	r2, [r4, #8]
 8017be4:	4293      	cmp	r3, r2
 8017be6:	db17      	blt.n	8017c18 <__gethex+0x420>
 8017be8:	6863      	ldr	r3, [r4, #4]
 8017bea:	9805      	ldr	r0, [sp, #20]
 8017bec:	1c59      	adds	r1, r3, #1
 8017bee:	f000 f92d 	bl	8017e4c <_Balloc>
 8017bf2:	1e05      	subs	r5, r0, #0
 8017bf4:	d103      	bne.n	8017bfe <__gethex+0x406>
 8017bf6:	0002      	movs	r2, r0
 8017bf8:	2184      	movs	r1, #132	; 0x84
 8017bfa:	4b1c      	ldr	r3, [pc, #112]	; (8017c6c <__gethex+0x474>)
 8017bfc:	e6b8      	b.n	8017970 <__gethex+0x178>
 8017bfe:	0021      	movs	r1, r4
 8017c00:	6923      	ldr	r3, [r4, #16]
 8017c02:	310c      	adds	r1, #12
 8017c04:	1c9a      	adds	r2, r3, #2
 8017c06:	0092      	lsls	r2, r2, #2
 8017c08:	300c      	adds	r0, #12
 8017c0a:	f7fe fc93 	bl	8016534 <memcpy>
 8017c0e:	0021      	movs	r1, r4
 8017c10:	9805      	ldr	r0, [sp, #20]
 8017c12:	f000 f95f 	bl	8017ed4 <_Bfree>
 8017c16:	002c      	movs	r4, r5
 8017c18:	6923      	ldr	r3, [r4, #16]
 8017c1a:	1c5a      	adds	r2, r3, #1
 8017c1c:	6122      	str	r2, [r4, #16]
 8017c1e:	2201      	movs	r2, #1
 8017c20:	3304      	adds	r3, #4
 8017c22:	009b      	lsls	r3, r3, #2
 8017c24:	18e3      	adds	r3, r4, r3
 8017c26:	605a      	str	r2, [r3, #4]
 8017c28:	e7ba      	b.n	8017ba0 <__gethex+0x3a8>
 8017c2a:	6922      	ldr	r2, [r4, #16]
 8017c2c:	9903      	ldr	r1, [sp, #12]
 8017c2e:	428a      	cmp	r2, r1
 8017c30:	dd09      	ble.n	8017c46 <__gethex+0x44e>
 8017c32:	2101      	movs	r1, #1
 8017c34:	0020      	movs	r0, r4
 8017c36:	f7ff fd75 	bl	8017724 <rshift>
 8017c3a:	9b02      	ldr	r3, [sp, #8]
 8017c3c:	3701      	adds	r7, #1
 8017c3e:	689b      	ldr	r3, [r3, #8]
 8017c40:	42bb      	cmp	r3, r7
 8017c42:	dac2      	bge.n	8017bca <__gethex+0x3d2>
 8017c44:	e6dc      	b.n	8017a00 <__gethex+0x208>
 8017c46:	221f      	movs	r2, #31
 8017c48:	9d01      	ldr	r5, [sp, #4]
 8017c4a:	9901      	ldr	r1, [sp, #4]
 8017c4c:	2601      	movs	r6, #1
 8017c4e:	4015      	ands	r5, r2
 8017c50:	4211      	tst	r1, r2
 8017c52:	d0bb      	beq.n	8017bcc <__gethex+0x3d4>
 8017c54:	9a04      	ldr	r2, [sp, #16]
 8017c56:	189b      	adds	r3, r3, r2
 8017c58:	3b04      	subs	r3, #4
 8017c5a:	6818      	ldr	r0, [r3, #0]
 8017c5c:	f000 f9ee 	bl	801803c <__hi0bits>
 8017c60:	2320      	movs	r3, #32
 8017c62:	1b5d      	subs	r5, r3, r5
 8017c64:	42a8      	cmp	r0, r5
 8017c66:	dbe4      	blt.n	8017c32 <__gethex+0x43a>
 8017c68:	e7b0      	b.n	8017bcc <__gethex+0x3d4>
 8017c6a:	46c0      	nop			; (mov r8, r8)
 8017c6c:	0801cf4d 	.word	0x0801cf4d

08017c70 <L_shift>:
 8017c70:	2308      	movs	r3, #8
 8017c72:	b570      	push	{r4, r5, r6, lr}
 8017c74:	2520      	movs	r5, #32
 8017c76:	1a9a      	subs	r2, r3, r2
 8017c78:	0092      	lsls	r2, r2, #2
 8017c7a:	1aad      	subs	r5, r5, r2
 8017c7c:	6843      	ldr	r3, [r0, #4]
 8017c7e:	6806      	ldr	r6, [r0, #0]
 8017c80:	001c      	movs	r4, r3
 8017c82:	40ac      	lsls	r4, r5
 8017c84:	40d3      	lsrs	r3, r2
 8017c86:	4334      	orrs	r4, r6
 8017c88:	6004      	str	r4, [r0, #0]
 8017c8a:	6043      	str	r3, [r0, #4]
 8017c8c:	3004      	adds	r0, #4
 8017c8e:	4288      	cmp	r0, r1
 8017c90:	d3f4      	bcc.n	8017c7c <L_shift+0xc>
 8017c92:	bd70      	pop	{r4, r5, r6, pc}

08017c94 <__match>:
 8017c94:	b530      	push	{r4, r5, lr}
 8017c96:	6803      	ldr	r3, [r0, #0]
 8017c98:	780c      	ldrb	r4, [r1, #0]
 8017c9a:	3301      	adds	r3, #1
 8017c9c:	2c00      	cmp	r4, #0
 8017c9e:	d102      	bne.n	8017ca6 <__match+0x12>
 8017ca0:	6003      	str	r3, [r0, #0]
 8017ca2:	2001      	movs	r0, #1
 8017ca4:	bd30      	pop	{r4, r5, pc}
 8017ca6:	781a      	ldrb	r2, [r3, #0]
 8017ca8:	0015      	movs	r5, r2
 8017caa:	3d41      	subs	r5, #65	; 0x41
 8017cac:	2d19      	cmp	r5, #25
 8017cae:	d800      	bhi.n	8017cb2 <__match+0x1e>
 8017cb0:	3220      	adds	r2, #32
 8017cb2:	3101      	adds	r1, #1
 8017cb4:	42a2      	cmp	r2, r4
 8017cb6:	d0ef      	beq.n	8017c98 <__match+0x4>
 8017cb8:	2000      	movs	r0, #0
 8017cba:	e7f3      	b.n	8017ca4 <__match+0x10>

08017cbc <__hexnan>:
 8017cbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017cbe:	680b      	ldr	r3, [r1, #0]
 8017cc0:	b08b      	sub	sp, #44	; 0x2c
 8017cc2:	115c      	asrs	r4, r3, #5
 8017cc4:	00a4      	lsls	r4, r4, #2
 8017cc6:	9201      	str	r2, [sp, #4]
 8017cc8:	1912      	adds	r2, r2, r4
 8017cca:	0019      	movs	r1, r3
 8017ccc:	9202      	str	r2, [sp, #8]
 8017cce:	221f      	movs	r2, #31
 8017cd0:	4011      	ands	r1, r2
 8017cd2:	9008      	str	r0, [sp, #32]
 8017cd4:	9106      	str	r1, [sp, #24]
 8017cd6:	4213      	tst	r3, r2
 8017cd8:	d002      	beq.n	8017ce0 <__hexnan+0x24>
 8017cda:	9b02      	ldr	r3, [sp, #8]
 8017cdc:	3304      	adds	r3, #4
 8017cde:	9302      	str	r3, [sp, #8]
 8017ce0:	9b02      	ldr	r3, [sp, #8]
 8017ce2:	2500      	movs	r5, #0
 8017ce4:	1f1e      	subs	r6, r3, #4
 8017ce6:	0037      	movs	r7, r6
 8017ce8:	0034      	movs	r4, r6
 8017cea:	9b08      	ldr	r3, [sp, #32]
 8017cec:	6035      	str	r5, [r6, #0]
 8017cee:	681b      	ldr	r3, [r3, #0]
 8017cf0:	9507      	str	r5, [sp, #28]
 8017cf2:	9305      	str	r3, [sp, #20]
 8017cf4:	9503      	str	r5, [sp, #12]
 8017cf6:	9b05      	ldr	r3, [sp, #20]
 8017cf8:	3301      	adds	r3, #1
 8017cfa:	9309      	str	r3, [sp, #36]	; 0x24
 8017cfc:	9b05      	ldr	r3, [sp, #20]
 8017cfe:	785b      	ldrb	r3, [r3, #1]
 8017d00:	9304      	str	r3, [sp, #16]
 8017d02:	2b00      	cmp	r3, #0
 8017d04:	d028      	beq.n	8017d58 <__hexnan+0x9c>
 8017d06:	9804      	ldr	r0, [sp, #16]
 8017d08:	f7ff fd60 	bl	80177cc <__hexdig_fun>
 8017d0c:	2800      	cmp	r0, #0
 8017d0e:	d154      	bne.n	8017dba <__hexnan+0xfe>
 8017d10:	9b04      	ldr	r3, [sp, #16]
 8017d12:	2b20      	cmp	r3, #32
 8017d14:	d819      	bhi.n	8017d4a <__hexnan+0x8e>
 8017d16:	9b03      	ldr	r3, [sp, #12]
 8017d18:	9a07      	ldr	r2, [sp, #28]
 8017d1a:	4293      	cmp	r3, r2
 8017d1c:	dd12      	ble.n	8017d44 <__hexnan+0x88>
 8017d1e:	42bc      	cmp	r4, r7
 8017d20:	d206      	bcs.n	8017d30 <__hexnan+0x74>
 8017d22:	2d07      	cmp	r5, #7
 8017d24:	dc04      	bgt.n	8017d30 <__hexnan+0x74>
 8017d26:	002a      	movs	r2, r5
 8017d28:	0039      	movs	r1, r7
 8017d2a:	0020      	movs	r0, r4
 8017d2c:	f7ff ffa0 	bl	8017c70 <L_shift>
 8017d30:	9b01      	ldr	r3, [sp, #4]
 8017d32:	2508      	movs	r5, #8
 8017d34:	429c      	cmp	r4, r3
 8017d36:	d905      	bls.n	8017d44 <__hexnan+0x88>
 8017d38:	1f27      	subs	r7, r4, #4
 8017d3a:	2500      	movs	r5, #0
 8017d3c:	003c      	movs	r4, r7
 8017d3e:	9b03      	ldr	r3, [sp, #12]
 8017d40:	603d      	str	r5, [r7, #0]
 8017d42:	9307      	str	r3, [sp, #28]
 8017d44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017d46:	9305      	str	r3, [sp, #20]
 8017d48:	e7d5      	b.n	8017cf6 <__hexnan+0x3a>
 8017d4a:	9b04      	ldr	r3, [sp, #16]
 8017d4c:	2b29      	cmp	r3, #41	; 0x29
 8017d4e:	d158      	bne.n	8017e02 <__hexnan+0x146>
 8017d50:	9b05      	ldr	r3, [sp, #20]
 8017d52:	9a08      	ldr	r2, [sp, #32]
 8017d54:	3302      	adds	r3, #2
 8017d56:	6013      	str	r3, [r2, #0]
 8017d58:	9b03      	ldr	r3, [sp, #12]
 8017d5a:	2b00      	cmp	r3, #0
 8017d5c:	d051      	beq.n	8017e02 <__hexnan+0x146>
 8017d5e:	42bc      	cmp	r4, r7
 8017d60:	d206      	bcs.n	8017d70 <__hexnan+0xb4>
 8017d62:	2d07      	cmp	r5, #7
 8017d64:	dc04      	bgt.n	8017d70 <__hexnan+0xb4>
 8017d66:	002a      	movs	r2, r5
 8017d68:	0039      	movs	r1, r7
 8017d6a:	0020      	movs	r0, r4
 8017d6c:	f7ff ff80 	bl	8017c70 <L_shift>
 8017d70:	9b01      	ldr	r3, [sp, #4]
 8017d72:	429c      	cmp	r4, r3
 8017d74:	d935      	bls.n	8017de2 <__hexnan+0x126>
 8017d76:	001a      	movs	r2, r3
 8017d78:	0023      	movs	r3, r4
 8017d7a:	cb02      	ldmia	r3!, {r1}
 8017d7c:	c202      	stmia	r2!, {r1}
 8017d7e:	429e      	cmp	r6, r3
 8017d80:	d2fb      	bcs.n	8017d7a <__hexnan+0xbe>
 8017d82:	9b02      	ldr	r3, [sp, #8]
 8017d84:	1c61      	adds	r1, r4, #1
 8017d86:	1eda      	subs	r2, r3, #3
 8017d88:	2304      	movs	r3, #4
 8017d8a:	4291      	cmp	r1, r2
 8017d8c:	d805      	bhi.n	8017d9a <__hexnan+0xde>
 8017d8e:	9b02      	ldr	r3, [sp, #8]
 8017d90:	3b04      	subs	r3, #4
 8017d92:	1b1c      	subs	r4, r3, r4
 8017d94:	08a4      	lsrs	r4, r4, #2
 8017d96:	3401      	adds	r4, #1
 8017d98:	00a3      	lsls	r3, r4, #2
 8017d9a:	9a01      	ldr	r2, [sp, #4]
 8017d9c:	18d4      	adds	r4, r2, r3
 8017d9e:	2300      	movs	r3, #0
 8017da0:	c408      	stmia	r4!, {r3}
 8017da2:	42a6      	cmp	r6, r4
 8017da4:	d2fc      	bcs.n	8017da0 <__hexnan+0xe4>
 8017da6:	6833      	ldr	r3, [r6, #0]
 8017da8:	2b00      	cmp	r3, #0
 8017daa:	d104      	bne.n	8017db6 <__hexnan+0xfa>
 8017dac:	9b01      	ldr	r3, [sp, #4]
 8017dae:	429e      	cmp	r6, r3
 8017db0:	d125      	bne.n	8017dfe <__hexnan+0x142>
 8017db2:	2301      	movs	r3, #1
 8017db4:	6033      	str	r3, [r6, #0]
 8017db6:	2005      	movs	r0, #5
 8017db8:	e024      	b.n	8017e04 <__hexnan+0x148>
 8017dba:	9b03      	ldr	r3, [sp, #12]
 8017dbc:	3501      	adds	r5, #1
 8017dbe:	3301      	adds	r3, #1
 8017dc0:	9303      	str	r3, [sp, #12]
 8017dc2:	2d08      	cmp	r5, #8
 8017dc4:	dd06      	ble.n	8017dd4 <__hexnan+0x118>
 8017dc6:	9b01      	ldr	r3, [sp, #4]
 8017dc8:	429c      	cmp	r4, r3
 8017dca:	d9bb      	bls.n	8017d44 <__hexnan+0x88>
 8017dcc:	2300      	movs	r3, #0
 8017dce:	2501      	movs	r5, #1
 8017dd0:	3c04      	subs	r4, #4
 8017dd2:	6023      	str	r3, [r4, #0]
 8017dd4:	220f      	movs	r2, #15
 8017dd6:	6823      	ldr	r3, [r4, #0]
 8017dd8:	4010      	ands	r0, r2
 8017dda:	011b      	lsls	r3, r3, #4
 8017ddc:	4318      	orrs	r0, r3
 8017dde:	6020      	str	r0, [r4, #0]
 8017de0:	e7b0      	b.n	8017d44 <__hexnan+0x88>
 8017de2:	9b06      	ldr	r3, [sp, #24]
 8017de4:	2b00      	cmp	r3, #0
 8017de6:	d0de      	beq.n	8017da6 <__hexnan+0xea>
 8017de8:	2220      	movs	r2, #32
 8017dea:	1ad2      	subs	r2, r2, r3
 8017dec:	2301      	movs	r3, #1
 8017dee:	425b      	negs	r3, r3
 8017df0:	40d3      	lsrs	r3, r2
 8017df2:	9c02      	ldr	r4, [sp, #8]
 8017df4:	3c04      	subs	r4, #4
 8017df6:	6822      	ldr	r2, [r4, #0]
 8017df8:	4013      	ands	r3, r2
 8017dfa:	6023      	str	r3, [r4, #0]
 8017dfc:	e7d3      	b.n	8017da6 <__hexnan+0xea>
 8017dfe:	3e04      	subs	r6, #4
 8017e00:	e7d1      	b.n	8017da6 <__hexnan+0xea>
 8017e02:	2004      	movs	r0, #4
 8017e04:	b00b      	add	sp, #44	; 0x2c
 8017e06:	bdf0      	pop	{r4, r5, r6, r7, pc}

08017e08 <__ascii_mbtowc>:
 8017e08:	b082      	sub	sp, #8
 8017e0a:	2900      	cmp	r1, #0
 8017e0c:	d100      	bne.n	8017e10 <__ascii_mbtowc+0x8>
 8017e0e:	a901      	add	r1, sp, #4
 8017e10:	1e10      	subs	r0, r2, #0
 8017e12:	d006      	beq.n	8017e22 <__ascii_mbtowc+0x1a>
 8017e14:	2b00      	cmp	r3, #0
 8017e16:	d006      	beq.n	8017e26 <__ascii_mbtowc+0x1e>
 8017e18:	7813      	ldrb	r3, [r2, #0]
 8017e1a:	600b      	str	r3, [r1, #0]
 8017e1c:	7810      	ldrb	r0, [r2, #0]
 8017e1e:	1e43      	subs	r3, r0, #1
 8017e20:	4198      	sbcs	r0, r3
 8017e22:	b002      	add	sp, #8
 8017e24:	4770      	bx	lr
 8017e26:	2002      	movs	r0, #2
 8017e28:	4240      	negs	r0, r0
 8017e2a:	e7fa      	b.n	8017e22 <__ascii_mbtowc+0x1a>

08017e2c <__malloc_lock>:
 8017e2c:	b510      	push	{r4, lr}
 8017e2e:	4802      	ldr	r0, [pc, #8]	; (8017e38 <__malloc_lock+0xc>)
 8017e30:	f001 fc09 	bl	8019646 <__retarget_lock_acquire_recursive>
 8017e34:	bd10      	pop	{r4, pc}
 8017e36:	46c0      	nop			; (mov r8, r8)
 8017e38:	20006980 	.word	0x20006980

08017e3c <__malloc_unlock>:
 8017e3c:	b510      	push	{r4, lr}
 8017e3e:	4802      	ldr	r0, [pc, #8]	; (8017e48 <__malloc_unlock+0xc>)
 8017e40:	f001 fc02 	bl	8019648 <__retarget_lock_release_recursive>
 8017e44:	bd10      	pop	{r4, pc}
 8017e46:	46c0      	nop			; (mov r8, r8)
 8017e48:	20006980 	.word	0x20006980

08017e4c <_Balloc>:
 8017e4c:	b570      	push	{r4, r5, r6, lr}
 8017e4e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8017e50:	0006      	movs	r6, r0
 8017e52:	000c      	movs	r4, r1
 8017e54:	2d00      	cmp	r5, #0
 8017e56:	d10e      	bne.n	8017e76 <_Balloc+0x2a>
 8017e58:	2010      	movs	r0, #16
 8017e5a:	f7fe fb49 	bl	80164f0 <malloc>
 8017e5e:	1e02      	subs	r2, r0, #0
 8017e60:	6270      	str	r0, [r6, #36]	; 0x24
 8017e62:	d104      	bne.n	8017e6e <_Balloc+0x22>
 8017e64:	2166      	movs	r1, #102	; 0x66
 8017e66:	4b19      	ldr	r3, [pc, #100]	; (8017ecc <_Balloc+0x80>)
 8017e68:	4819      	ldr	r0, [pc, #100]	; (8017ed0 <_Balloc+0x84>)
 8017e6a:	f7ff fc27 	bl	80176bc <__assert_func>
 8017e6e:	6045      	str	r5, [r0, #4]
 8017e70:	6085      	str	r5, [r0, #8]
 8017e72:	6005      	str	r5, [r0, #0]
 8017e74:	60c5      	str	r5, [r0, #12]
 8017e76:	6a75      	ldr	r5, [r6, #36]	; 0x24
 8017e78:	68eb      	ldr	r3, [r5, #12]
 8017e7a:	2b00      	cmp	r3, #0
 8017e7c:	d013      	beq.n	8017ea6 <_Balloc+0x5a>
 8017e7e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8017e80:	00a2      	lsls	r2, r4, #2
 8017e82:	68db      	ldr	r3, [r3, #12]
 8017e84:	189b      	adds	r3, r3, r2
 8017e86:	6818      	ldr	r0, [r3, #0]
 8017e88:	2800      	cmp	r0, #0
 8017e8a:	d118      	bne.n	8017ebe <_Balloc+0x72>
 8017e8c:	2101      	movs	r1, #1
 8017e8e:	000d      	movs	r5, r1
 8017e90:	40a5      	lsls	r5, r4
 8017e92:	1d6a      	adds	r2, r5, #5
 8017e94:	0030      	movs	r0, r6
 8017e96:	0092      	lsls	r2, r2, #2
 8017e98:	f000 fca2 	bl	80187e0 <_calloc_r>
 8017e9c:	2800      	cmp	r0, #0
 8017e9e:	d00c      	beq.n	8017eba <_Balloc+0x6e>
 8017ea0:	6044      	str	r4, [r0, #4]
 8017ea2:	6085      	str	r5, [r0, #8]
 8017ea4:	e00d      	b.n	8017ec2 <_Balloc+0x76>
 8017ea6:	2221      	movs	r2, #33	; 0x21
 8017ea8:	2104      	movs	r1, #4
 8017eaa:	0030      	movs	r0, r6
 8017eac:	f000 fc98 	bl	80187e0 <_calloc_r>
 8017eb0:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8017eb2:	60e8      	str	r0, [r5, #12]
 8017eb4:	68db      	ldr	r3, [r3, #12]
 8017eb6:	2b00      	cmp	r3, #0
 8017eb8:	d1e1      	bne.n	8017e7e <_Balloc+0x32>
 8017eba:	2000      	movs	r0, #0
 8017ebc:	bd70      	pop	{r4, r5, r6, pc}
 8017ebe:	6802      	ldr	r2, [r0, #0]
 8017ec0:	601a      	str	r2, [r3, #0]
 8017ec2:	2300      	movs	r3, #0
 8017ec4:	6103      	str	r3, [r0, #16]
 8017ec6:	60c3      	str	r3, [r0, #12]
 8017ec8:	e7f8      	b.n	8017ebc <_Balloc+0x70>
 8017eca:	46c0      	nop			; (mov r8, r8)
 8017ecc:	0801cdd8 	.word	0x0801cdd8
 8017ed0:	0801cfdc 	.word	0x0801cfdc

08017ed4 <_Bfree>:
 8017ed4:	b570      	push	{r4, r5, r6, lr}
 8017ed6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8017ed8:	0005      	movs	r5, r0
 8017eda:	000c      	movs	r4, r1
 8017edc:	2e00      	cmp	r6, #0
 8017ede:	d10e      	bne.n	8017efe <_Bfree+0x2a>
 8017ee0:	2010      	movs	r0, #16
 8017ee2:	f7fe fb05 	bl	80164f0 <malloc>
 8017ee6:	1e02      	subs	r2, r0, #0
 8017ee8:	6268      	str	r0, [r5, #36]	; 0x24
 8017eea:	d104      	bne.n	8017ef6 <_Bfree+0x22>
 8017eec:	218a      	movs	r1, #138	; 0x8a
 8017eee:	4b09      	ldr	r3, [pc, #36]	; (8017f14 <_Bfree+0x40>)
 8017ef0:	4809      	ldr	r0, [pc, #36]	; (8017f18 <_Bfree+0x44>)
 8017ef2:	f7ff fbe3 	bl	80176bc <__assert_func>
 8017ef6:	6046      	str	r6, [r0, #4]
 8017ef8:	6086      	str	r6, [r0, #8]
 8017efa:	6006      	str	r6, [r0, #0]
 8017efc:	60c6      	str	r6, [r0, #12]
 8017efe:	2c00      	cmp	r4, #0
 8017f00:	d007      	beq.n	8017f12 <_Bfree+0x3e>
 8017f02:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8017f04:	6862      	ldr	r2, [r4, #4]
 8017f06:	68db      	ldr	r3, [r3, #12]
 8017f08:	0092      	lsls	r2, r2, #2
 8017f0a:	189b      	adds	r3, r3, r2
 8017f0c:	681a      	ldr	r2, [r3, #0]
 8017f0e:	6022      	str	r2, [r4, #0]
 8017f10:	601c      	str	r4, [r3, #0]
 8017f12:	bd70      	pop	{r4, r5, r6, pc}
 8017f14:	0801cdd8 	.word	0x0801cdd8
 8017f18:	0801cfdc 	.word	0x0801cfdc

08017f1c <__multadd>:
 8017f1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017f1e:	000e      	movs	r6, r1
 8017f20:	9001      	str	r0, [sp, #4]
 8017f22:	000c      	movs	r4, r1
 8017f24:	001d      	movs	r5, r3
 8017f26:	2000      	movs	r0, #0
 8017f28:	690f      	ldr	r7, [r1, #16]
 8017f2a:	3614      	adds	r6, #20
 8017f2c:	6833      	ldr	r3, [r6, #0]
 8017f2e:	3001      	adds	r0, #1
 8017f30:	b299      	uxth	r1, r3
 8017f32:	4351      	muls	r1, r2
 8017f34:	0c1b      	lsrs	r3, r3, #16
 8017f36:	4353      	muls	r3, r2
 8017f38:	1949      	adds	r1, r1, r5
 8017f3a:	0c0d      	lsrs	r5, r1, #16
 8017f3c:	195b      	adds	r3, r3, r5
 8017f3e:	0c1d      	lsrs	r5, r3, #16
 8017f40:	b289      	uxth	r1, r1
 8017f42:	041b      	lsls	r3, r3, #16
 8017f44:	185b      	adds	r3, r3, r1
 8017f46:	c608      	stmia	r6!, {r3}
 8017f48:	4287      	cmp	r7, r0
 8017f4a:	dcef      	bgt.n	8017f2c <__multadd+0x10>
 8017f4c:	2d00      	cmp	r5, #0
 8017f4e:	d022      	beq.n	8017f96 <__multadd+0x7a>
 8017f50:	68a3      	ldr	r3, [r4, #8]
 8017f52:	42bb      	cmp	r3, r7
 8017f54:	dc19      	bgt.n	8017f8a <__multadd+0x6e>
 8017f56:	6863      	ldr	r3, [r4, #4]
 8017f58:	9801      	ldr	r0, [sp, #4]
 8017f5a:	1c59      	adds	r1, r3, #1
 8017f5c:	f7ff ff76 	bl	8017e4c <_Balloc>
 8017f60:	1e06      	subs	r6, r0, #0
 8017f62:	d105      	bne.n	8017f70 <__multadd+0x54>
 8017f64:	0002      	movs	r2, r0
 8017f66:	21b5      	movs	r1, #181	; 0xb5
 8017f68:	4b0c      	ldr	r3, [pc, #48]	; (8017f9c <__multadd+0x80>)
 8017f6a:	480d      	ldr	r0, [pc, #52]	; (8017fa0 <__multadd+0x84>)
 8017f6c:	f7ff fba6 	bl	80176bc <__assert_func>
 8017f70:	0021      	movs	r1, r4
 8017f72:	6923      	ldr	r3, [r4, #16]
 8017f74:	310c      	adds	r1, #12
 8017f76:	1c9a      	adds	r2, r3, #2
 8017f78:	0092      	lsls	r2, r2, #2
 8017f7a:	300c      	adds	r0, #12
 8017f7c:	f7fe fada 	bl	8016534 <memcpy>
 8017f80:	0021      	movs	r1, r4
 8017f82:	9801      	ldr	r0, [sp, #4]
 8017f84:	f7ff ffa6 	bl	8017ed4 <_Bfree>
 8017f88:	0034      	movs	r4, r6
 8017f8a:	1d3b      	adds	r3, r7, #4
 8017f8c:	009b      	lsls	r3, r3, #2
 8017f8e:	18e3      	adds	r3, r4, r3
 8017f90:	605d      	str	r5, [r3, #4]
 8017f92:	1c7b      	adds	r3, r7, #1
 8017f94:	6123      	str	r3, [r4, #16]
 8017f96:	0020      	movs	r0, r4
 8017f98:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8017f9a:	46c0      	nop			; (mov r8, r8)
 8017f9c:	0801cf4d 	.word	0x0801cf4d
 8017fa0:	0801cfdc 	.word	0x0801cfdc

08017fa4 <__s2b>:
 8017fa4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017fa6:	0006      	movs	r6, r0
 8017fa8:	0018      	movs	r0, r3
 8017faa:	000c      	movs	r4, r1
 8017fac:	3008      	adds	r0, #8
 8017fae:	2109      	movs	r1, #9
 8017fb0:	9301      	str	r3, [sp, #4]
 8017fb2:	0015      	movs	r5, r2
 8017fb4:	f7e8 f956 	bl	8000264 <__divsi3>
 8017fb8:	2301      	movs	r3, #1
 8017fba:	2100      	movs	r1, #0
 8017fbc:	4283      	cmp	r3, r0
 8017fbe:	db0a      	blt.n	8017fd6 <__s2b+0x32>
 8017fc0:	0030      	movs	r0, r6
 8017fc2:	f7ff ff43 	bl	8017e4c <_Balloc>
 8017fc6:	1e01      	subs	r1, r0, #0
 8017fc8:	d108      	bne.n	8017fdc <__s2b+0x38>
 8017fca:	0002      	movs	r2, r0
 8017fcc:	4b19      	ldr	r3, [pc, #100]	; (8018034 <__s2b+0x90>)
 8017fce:	481a      	ldr	r0, [pc, #104]	; (8018038 <__s2b+0x94>)
 8017fd0:	31ce      	adds	r1, #206	; 0xce
 8017fd2:	f7ff fb73 	bl	80176bc <__assert_func>
 8017fd6:	005b      	lsls	r3, r3, #1
 8017fd8:	3101      	adds	r1, #1
 8017fda:	e7ef      	b.n	8017fbc <__s2b+0x18>
 8017fdc:	9b08      	ldr	r3, [sp, #32]
 8017fde:	6143      	str	r3, [r0, #20]
 8017fe0:	2301      	movs	r3, #1
 8017fe2:	6103      	str	r3, [r0, #16]
 8017fe4:	2d09      	cmp	r5, #9
 8017fe6:	dd18      	ble.n	801801a <__s2b+0x76>
 8017fe8:	0023      	movs	r3, r4
 8017fea:	3309      	adds	r3, #9
 8017fec:	001f      	movs	r7, r3
 8017fee:	9300      	str	r3, [sp, #0]
 8017ff0:	1964      	adds	r4, r4, r5
 8017ff2:	783b      	ldrb	r3, [r7, #0]
 8017ff4:	220a      	movs	r2, #10
 8017ff6:	0030      	movs	r0, r6
 8017ff8:	3b30      	subs	r3, #48	; 0x30
 8017ffa:	f7ff ff8f 	bl	8017f1c <__multadd>
 8017ffe:	3701      	adds	r7, #1
 8018000:	0001      	movs	r1, r0
 8018002:	42a7      	cmp	r7, r4
 8018004:	d1f5      	bne.n	8017ff2 <__s2b+0x4e>
 8018006:	002c      	movs	r4, r5
 8018008:	9b00      	ldr	r3, [sp, #0]
 801800a:	3c08      	subs	r4, #8
 801800c:	191c      	adds	r4, r3, r4
 801800e:	002f      	movs	r7, r5
 8018010:	9b01      	ldr	r3, [sp, #4]
 8018012:	429f      	cmp	r7, r3
 8018014:	db04      	blt.n	8018020 <__s2b+0x7c>
 8018016:	0008      	movs	r0, r1
 8018018:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801801a:	2509      	movs	r5, #9
 801801c:	340a      	adds	r4, #10
 801801e:	e7f6      	b.n	801800e <__s2b+0x6a>
 8018020:	1b63      	subs	r3, r4, r5
 8018022:	5ddb      	ldrb	r3, [r3, r7]
 8018024:	220a      	movs	r2, #10
 8018026:	0030      	movs	r0, r6
 8018028:	3b30      	subs	r3, #48	; 0x30
 801802a:	f7ff ff77 	bl	8017f1c <__multadd>
 801802e:	3701      	adds	r7, #1
 8018030:	0001      	movs	r1, r0
 8018032:	e7ed      	b.n	8018010 <__s2b+0x6c>
 8018034:	0801cf4d 	.word	0x0801cf4d
 8018038:	0801cfdc 	.word	0x0801cfdc

0801803c <__hi0bits>:
 801803c:	0003      	movs	r3, r0
 801803e:	0c02      	lsrs	r2, r0, #16
 8018040:	2000      	movs	r0, #0
 8018042:	4282      	cmp	r2, r0
 8018044:	d101      	bne.n	801804a <__hi0bits+0xe>
 8018046:	041b      	lsls	r3, r3, #16
 8018048:	3010      	adds	r0, #16
 801804a:	0e1a      	lsrs	r2, r3, #24
 801804c:	d101      	bne.n	8018052 <__hi0bits+0x16>
 801804e:	3008      	adds	r0, #8
 8018050:	021b      	lsls	r3, r3, #8
 8018052:	0f1a      	lsrs	r2, r3, #28
 8018054:	d101      	bne.n	801805a <__hi0bits+0x1e>
 8018056:	3004      	adds	r0, #4
 8018058:	011b      	lsls	r3, r3, #4
 801805a:	0f9a      	lsrs	r2, r3, #30
 801805c:	d101      	bne.n	8018062 <__hi0bits+0x26>
 801805e:	3002      	adds	r0, #2
 8018060:	009b      	lsls	r3, r3, #2
 8018062:	2b00      	cmp	r3, #0
 8018064:	db03      	blt.n	801806e <__hi0bits+0x32>
 8018066:	3001      	adds	r0, #1
 8018068:	005b      	lsls	r3, r3, #1
 801806a:	d400      	bmi.n	801806e <__hi0bits+0x32>
 801806c:	2020      	movs	r0, #32
 801806e:	4770      	bx	lr

08018070 <__lo0bits>:
 8018070:	6803      	ldr	r3, [r0, #0]
 8018072:	0002      	movs	r2, r0
 8018074:	2107      	movs	r1, #7
 8018076:	0018      	movs	r0, r3
 8018078:	4008      	ands	r0, r1
 801807a:	420b      	tst	r3, r1
 801807c:	d00d      	beq.n	801809a <__lo0bits+0x2a>
 801807e:	3906      	subs	r1, #6
 8018080:	2000      	movs	r0, #0
 8018082:	420b      	tst	r3, r1
 8018084:	d105      	bne.n	8018092 <__lo0bits+0x22>
 8018086:	3002      	adds	r0, #2
 8018088:	4203      	tst	r3, r0
 801808a:	d003      	beq.n	8018094 <__lo0bits+0x24>
 801808c:	40cb      	lsrs	r3, r1
 801808e:	0008      	movs	r0, r1
 8018090:	6013      	str	r3, [r2, #0]
 8018092:	4770      	bx	lr
 8018094:	089b      	lsrs	r3, r3, #2
 8018096:	6013      	str	r3, [r2, #0]
 8018098:	e7fb      	b.n	8018092 <__lo0bits+0x22>
 801809a:	b299      	uxth	r1, r3
 801809c:	2900      	cmp	r1, #0
 801809e:	d101      	bne.n	80180a4 <__lo0bits+0x34>
 80180a0:	2010      	movs	r0, #16
 80180a2:	0c1b      	lsrs	r3, r3, #16
 80180a4:	b2d9      	uxtb	r1, r3
 80180a6:	2900      	cmp	r1, #0
 80180a8:	d101      	bne.n	80180ae <__lo0bits+0x3e>
 80180aa:	3008      	adds	r0, #8
 80180ac:	0a1b      	lsrs	r3, r3, #8
 80180ae:	0719      	lsls	r1, r3, #28
 80180b0:	d101      	bne.n	80180b6 <__lo0bits+0x46>
 80180b2:	3004      	adds	r0, #4
 80180b4:	091b      	lsrs	r3, r3, #4
 80180b6:	0799      	lsls	r1, r3, #30
 80180b8:	d101      	bne.n	80180be <__lo0bits+0x4e>
 80180ba:	3002      	adds	r0, #2
 80180bc:	089b      	lsrs	r3, r3, #2
 80180be:	07d9      	lsls	r1, r3, #31
 80180c0:	d4e9      	bmi.n	8018096 <__lo0bits+0x26>
 80180c2:	3001      	adds	r0, #1
 80180c4:	085b      	lsrs	r3, r3, #1
 80180c6:	d1e6      	bne.n	8018096 <__lo0bits+0x26>
 80180c8:	2020      	movs	r0, #32
 80180ca:	e7e2      	b.n	8018092 <__lo0bits+0x22>

080180cc <__i2b>:
 80180cc:	b510      	push	{r4, lr}
 80180ce:	000c      	movs	r4, r1
 80180d0:	2101      	movs	r1, #1
 80180d2:	f7ff febb 	bl	8017e4c <_Balloc>
 80180d6:	2800      	cmp	r0, #0
 80180d8:	d106      	bne.n	80180e8 <__i2b+0x1c>
 80180da:	21a0      	movs	r1, #160	; 0xa0
 80180dc:	0002      	movs	r2, r0
 80180de:	4b04      	ldr	r3, [pc, #16]	; (80180f0 <__i2b+0x24>)
 80180e0:	4804      	ldr	r0, [pc, #16]	; (80180f4 <__i2b+0x28>)
 80180e2:	0049      	lsls	r1, r1, #1
 80180e4:	f7ff faea 	bl	80176bc <__assert_func>
 80180e8:	2301      	movs	r3, #1
 80180ea:	6144      	str	r4, [r0, #20]
 80180ec:	6103      	str	r3, [r0, #16]
 80180ee:	bd10      	pop	{r4, pc}
 80180f0:	0801cf4d 	.word	0x0801cf4d
 80180f4:	0801cfdc 	.word	0x0801cfdc

080180f8 <__multiply>:
 80180f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80180fa:	690b      	ldr	r3, [r1, #16]
 80180fc:	0014      	movs	r4, r2
 80180fe:	6912      	ldr	r2, [r2, #16]
 8018100:	000d      	movs	r5, r1
 8018102:	b089      	sub	sp, #36	; 0x24
 8018104:	4293      	cmp	r3, r2
 8018106:	da01      	bge.n	801810c <__multiply+0x14>
 8018108:	0025      	movs	r5, r4
 801810a:	000c      	movs	r4, r1
 801810c:	692f      	ldr	r7, [r5, #16]
 801810e:	6926      	ldr	r6, [r4, #16]
 8018110:	6869      	ldr	r1, [r5, #4]
 8018112:	19bb      	adds	r3, r7, r6
 8018114:	9302      	str	r3, [sp, #8]
 8018116:	68ab      	ldr	r3, [r5, #8]
 8018118:	19ba      	adds	r2, r7, r6
 801811a:	4293      	cmp	r3, r2
 801811c:	da00      	bge.n	8018120 <__multiply+0x28>
 801811e:	3101      	adds	r1, #1
 8018120:	f7ff fe94 	bl	8017e4c <_Balloc>
 8018124:	9001      	str	r0, [sp, #4]
 8018126:	2800      	cmp	r0, #0
 8018128:	d106      	bne.n	8018138 <__multiply+0x40>
 801812a:	215e      	movs	r1, #94	; 0x5e
 801812c:	0002      	movs	r2, r0
 801812e:	4b48      	ldr	r3, [pc, #288]	; (8018250 <__multiply+0x158>)
 8018130:	4848      	ldr	r0, [pc, #288]	; (8018254 <__multiply+0x15c>)
 8018132:	31ff      	adds	r1, #255	; 0xff
 8018134:	f7ff fac2 	bl	80176bc <__assert_func>
 8018138:	9b01      	ldr	r3, [sp, #4]
 801813a:	2200      	movs	r2, #0
 801813c:	3314      	adds	r3, #20
 801813e:	469c      	mov	ip, r3
 8018140:	19bb      	adds	r3, r7, r6
 8018142:	009b      	lsls	r3, r3, #2
 8018144:	4463      	add	r3, ip
 8018146:	9303      	str	r3, [sp, #12]
 8018148:	4663      	mov	r3, ip
 801814a:	9903      	ldr	r1, [sp, #12]
 801814c:	428b      	cmp	r3, r1
 801814e:	d32c      	bcc.n	80181aa <__multiply+0xb2>
 8018150:	002b      	movs	r3, r5
 8018152:	0022      	movs	r2, r4
 8018154:	3314      	adds	r3, #20
 8018156:	00bf      	lsls	r7, r7, #2
 8018158:	3214      	adds	r2, #20
 801815a:	9306      	str	r3, [sp, #24]
 801815c:	00b6      	lsls	r6, r6, #2
 801815e:	19db      	adds	r3, r3, r7
 8018160:	9304      	str	r3, [sp, #16]
 8018162:	1993      	adds	r3, r2, r6
 8018164:	9307      	str	r3, [sp, #28]
 8018166:	2304      	movs	r3, #4
 8018168:	9305      	str	r3, [sp, #20]
 801816a:	002b      	movs	r3, r5
 801816c:	9904      	ldr	r1, [sp, #16]
 801816e:	3315      	adds	r3, #21
 8018170:	9200      	str	r2, [sp, #0]
 8018172:	4299      	cmp	r1, r3
 8018174:	d305      	bcc.n	8018182 <__multiply+0x8a>
 8018176:	1b4b      	subs	r3, r1, r5
 8018178:	3b15      	subs	r3, #21
 801817a:	089b      	lsrs	r3, r3, #2
 801817c:	3301      	adds	r3, #1
 801817e:	009b      	lsls	r3, r3, #2
 8018180:	9305      	str	r3, [sp, #20]
 8018182:	9b07      	ldr	r3, [sp, #28]
 8018184:	9a00      	ldr	r2, [sp, #0]
 8018186:	429a      	cmp	r2, r3
 8018188:	d311      	bcc.n	80181ae <__multiply+0xb6>
 801818a:	9b02      	ldr	r3, [sp, #8]
 801818c:	2b00      	cmp	r3, #0
 801818e:	dd06      	ble.n	801819e <__multiply+0xa6>
 8018190:	9b03      	ldr	r3, [sp, #12]
 8018192:	3b04      	subs	r3, #4
 8018194:	9303      	str	r3, [sp, #12]
 8018196:	681b      	ldr	r3, [r3, #0]
 8018198:	9300      	str	r3, [sp, #0]
 801819a:	2b00      	cmp	r3, #0
 801819c:	d054      	beq.n	8018248 <__multiply+0x150>
 801819e:	9b01      	ldr	r3, [sp, #4]
 80181a0:	9a02      	ldr	r2, [sp, #8]
 80181a2:	0018      	movs	r0, r3
 80181a4:	611a      	str	r2, [r3, #16]
 80181a6:	b009      	add	sp, #36	; 0x24
 80181a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80181aa:	c304      	stmia	r3!, {r2}
 80181ac:	e7cd      	b.n	801814a <__multiply+0x52>
 80181ae:	9b00      	ldr	r3, [sp, #0]
 80181b0:	681b      	ldr	r3, [r3, #0]
 80181b2:	b298      	uxth	r0, r3
 80181b4:	2800      	cmp	r0, #0
 80181b6:	d01c      	beq.n	80181f2 <__multiply+0xfa>
 80181b8:	4667      	mov	r7, ip
 80181ba:	2400      	movs	r4, #0
 80181bc:	9e06      	ldr	r6, [sp, #24]
 80181be:	ce02      	ldmia	r6!, {r1}
 80181c0:	683a      	ldr	r2, [r7, #0]
 80181c2:	b28b      	uxth	r3, r1
 80181c4:	4343      	muls	r3, r0
 80181c6:	0c09      	lsrs	r1, r1, #16
 80181c8:	4341      	muls	r1, r0
 80181ca:	b292      	uxth	r2, r2
 80181cc:	189b      	adds	r3, r3, r2
 80181ce:	191b      	adds	r3, r3, r4
 80181d0:	000c      	movs	r4, r1
 80181d2:	683a      	ldr	r2, [r7, #0]
 80181d4:	0c11      	lsrs	r1, r2, #16
 80181d6:	1861      	adds	r1, r4, r1
 80181d8:	0c1c      	lsrs	r4, r3, #16
 80181da:	1909      	adds	r1, r1, r4
 80181dc:	0c0c      	lsrs	r4, r1, #16
 80181de:	b29b      	uxth	r3, r3
 80181e0:	0409      	lsls	r1, r1, #16
 80181e2:	430b      	orrs	r3, r1
 80181e4:	c708      	stmia	r7!, {r3}
 80181e6:	9b04      	ldr	r3, [sp, #16]
 80181e8:	42b3      	cmp	r3, r6
 80181ea:	d8e8      	bhi.n	80181be <__multiply+0xc6>
 80181ec:	4663      	mov	r3, ip
 80181ee:	9a05      	ldr	r2, [sp, #20]
 80181f0:	509c      	str	r4, [r3, r2]
 80181f2:	9b00      	ldr	r3, [sp, #0]
 80181f4:	681b      	ldr	r3, [r3, #0]
 80181f6:	0c1e      	lsrs	r6, r3, #16
 80181f8:	d020      	beq.n	801823c <__multiply+0x144>
 80181fa:	4663      	mov	r3, ip
 80181fc:	002c      	movs	r4, r5
 80181fe:	4660      	mov	r0, ip
 8018200:	2700      	movs	r7, #0
 8018202:	681b      	ldr	r3, [r3, #0]
 8018204:	3414      	adds	r4, #20
 8018206:	6822      	ldr	r2, [r4, #0]
 8018208:	b29b      	uxth	r3, r3
 801820a:	b291      	uxth	r1, r2
 801820c:	4371      	muls	r1, r6
 801820e:	6802      	ldr	r2, [r0, #0]
 8018210:	0c12      	lsrs	r2, r2, #16
 8018212:	1889      	adds	r1, r1, r2
 8018214:	19cf      	adds	r7, r1, r7
 8018216:	0439      	lsls	r1, r7, #16
 8018218:	430b      	orrs	r3, r1
 801821a:	6003      	str	r3, [r0, #0]
 801821c:	cc02      	ldmia	r4!, {r1}
 801821e:	6843      	ldr	r3, [r0, #4]
 8018220:	0c09      	lsrs	r1, r1, #16
 8018222:	4371      	muls	r1, r6
 8018224:	b29b      	uxth	r3, r3
 8018226:	0c3f      	lsrs	r7, r7, #16
 8018228:	18cb      	adds	r3, r1, r3
 801822a:	9a04      	ldr	r2, [sp, #16]
 801822c:	19db      	adds	r3, r3, r7
 801822e:	0c1f      	lsrs	r7, r3, #16
 8018230:	3004      	adds	r0, #4
 8018232:	42a2      	cmp	r2, r4
 8018234:	d8e7      	bhi.n	8018206 <__multiply+0x10e>
 8018236:	4662      	mov	r2, ip
 8018238:	9905      	ldr	r1, [sp, #20]
 801823a:	5053      	str	r3, [r2, r1]
 801823c:	9b00      	ldr	r3, [sp, #0]
 801823e:	3304      	adds	r3, #4
 8018240:	9300      	str	r3, [sp, #0]
 8018242:	2304      	movs	r3, #4
 8018244:	449c      	add	ip, r3
 8018246:	e79c      	b.n	8018182 <__multiply+0x8a>
 8018248:	9b02      	ldr	r3, [sp, #8]
 801824a:	3b01      	subs	r3, #1
 801824c:	9302      	str	r3, [sp, #8]
 801824e:	e79c      	b.n	801818a <__multiply+0x92>
 8018250:	0801cf4d 	.word	0x0801cf4d
 8018254:	0801cfdc 	.word	0x0801cfdc

08018258 <__pow5mult>:
 8018258:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801825a:	2303      	movs	r3, #3
 801825c:	0015      	movs	r5, r2
 801825e:	0007      	movs	r7, r0
 8018260:	000e      	movs	r6, r1
 8018262:	401a      	ands	r2, r3
 8018264:	421d      	tst	r5, r3
 8018266:	d008      	beq.n	801827a <__pow5mult+0x22>
 8018268:	4925      	ldr	r1, [pc, #148]	; (8018300 <__pow5mult+0xa8>)
 801826a:	3a01      	subs	r2, #1
 801826c:	0092      	lsls	r2, r2, #2
 801826e:	5852      	ldr	r2, [r2, r1]
 8018270:	2300      	movs	r3, #0
 8018272:	0031      	movs	r1, r6
 8018274:	f7ff fe52 	bl	8017f1c <__multadd>
 8018278:	0006      	movs	r6, r0
 801827a:	10ad      	asrs	r5, r5, #2
 801827c:	d03d      	beq.n	80182fa <__pow5mult+0xa2>
 801827e:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8018280:	2c00      	cmp	r4, #0
 8018282:	d10f      	bne.n	80182a4 <__pow5mult+0x4c>
 8018284:	2010      	movs	r0, #16
 8018286:	f7fe f933 	bl	80164f0 <malloc>
 801828a:	1e02      	subs	r2, r0, #0
 801828c:	6278      	str	r0, [r7, #36]	; 0x24
 801828e:	d105      	bne.n	801829c <__pow5mult+0x44>
 8018290:	21d7      	movs	r1, #215	; 0xd7
 8018292:	4b1c      	ldr	r3, [pc, #112]	; (8018304 <__pow5mult+0xac>)
 8018294:	481c      	ldr	r0, [pc, #112]	; (8018308 <__pow5mult+0xb0>)
 8018296:	0049      	lsls	r1, r1, #1
 8018298:	f7ff fa10 	bl	80176bc <__assert_func>
 801829c:	6044      	str	r4, [r0, #4]
 801829e:	6084      	str	r4, [r0, #8]
 80182a0:	6004      	str	r4, [r0, #0]
 80182a2:	60c4      	str	r4, [r0, #12]
 80182a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80182a6:	689c      	ldr	r4, [r3, #8]
 80182a8:	9301      	str	r3, [sp, #4]
 80182aa:	2c00      	cmp	r4, #0
 80182ac:	d108      	bne.n	80182c0 <__pow5mult+0x68>
 80182ae:	0038      	movs	r0, r7
 80182b0:	4916      	ldr	r1, [pc, #88]	; (801830c <__pow5mult+0xb4>)
 80182b2:	f7ff ff0b 	bl	80180cc <__i2b>
 80182b6:	9b01      	ldr	r3, [sp, #4]
 80182b8:	0004      	movs	r4, r0
 80182ba:	6098      	str	r0, [r3, #8]
 80182bc:	2300      	movs	r3, #0
 80182be:	6003      	str	r3, [r0, #0]
 80182c0:	2301      	movs	r3, #1
 80182c2:	421d      	tst	r5, r3
 80182c4:	d00a      	beq.n	80182dc <__pow5mult+0x84>
 80182c6:	0031      	movs	r1, r6
 80182c8:	0022      	movs	r2, r4
 80182ca:	0038      	movs	r0, r7
 80182cc:	f7ff ff14 	bl	80180f8 <__multiply>
 80182d0:	0031      	movs	r1, r6
 80182d2:	9001      	str	r0, [sp, #4]
 80182d4:	0038      	movs	r0, r7
 80182d6:	f7ff fdfd 	bl	8017ed4 <_Bfree>
 80182da:	9e01      	ldr	r6, [sp, #4]
 80182dc:	106d      	asrs	r5, r5, #1
 80182de:	d00c      	beq.n	80182fa <__pow5mult+0xa2>
 80182e0:	6820      	ldr	r0, [r4, #0]
 80182e2:	2800      	cmp	r0, #0
 80182e4:	d107      	bne.n	80182f6 <__pow5mult+0x9e>
 80182e6:	0022      	movs	r2, r4
 80182e8:	0021      	movs	r1, r4
 80182ea:	0038      	movs	r0, r7
 80182ec:	f7ff ff04 	bl	80180f8 <__multiply>
 80182f0:	2300      	movs	r3, #0
 80182f2:	6020      	str	r0, [r4, #0]
 80182f4:	6003      	str	r3, [r0, #0]
 80182f6:	0004      	movs	r4, r0
 80182f8:	e7e2      	b.n	80182c0 <__pow5mult+0x68>
 80182fa:	0030      	movs	r0, r6
 80182fc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80182fe:	46c0      	nop			; (mov r8, r8)
 8018300:	0801d130 	.word	0x0801d130
 8018304:	0801cdd8 	.word	0x0801cdd8
 8018308:	0801cfdc 	.word	0x0801cfdc
 801830c:	00000271 	.word	0x00000271

08018310 <__lshift>:
 8018310:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018312:	000c      	movs	r4, r1
 8018314:	0017      	movs	r7, r2
 8018316:	6923      	ldr	r3, [r4, #16]
 8018318:	1155      	asrs	r5, r2, #5
 801831a:	b087      	sub	sp, #28
 801831c:	18eb      	adds	r3, r5, r3
 801831e:	9302      	str	r3, [sp, #8]
 8018320:	3301      	adds	r3, #1
 8018322:	9301      	str	r3, [sp, #4]
 8018324:	6849      	ldr	r1, [r1, #4]
 8018326:	68a3      	ldr	r3, [r4, #8]
 8018328:	9004      	str	r0, [sp, #16]
 801832a:	9a01      	ldr	r2, [sp, #4]
 801832c:	4293      	cmp	r3, r2
 801832e:	db11      	blt.n	8018354 <__lshift+0x44>
 8018330:	9804      	ldr	r0, [sp, #16]
 8018332:	f7ff fd8b 	bl	8017e4c <_Balloc>
 8018336:	0002      	movs	r2, r0
 8018338:	2300      	movs	r3, #0
 801833a:	3214      	adds	r2, #20
 801833c:	0006      	movs	r6, r0
 801833e:	0011      	movs	r1, r2
 8018340:	9203      	str	r2, [sp, #12]
 8018342:	4298      	cmp	r0, r3
 8018344:	d10d      	bne.n	8018362 <__lshift+0x52>
 8018346:	21da      	movs	r1, #218	; 0xda
 8018348:	0002      	movs	r2, r0
 801834a:	4b27      	ldr	r3, [pc, #156]	; (80183e8 <__lshift+0xd8>)
 801834c:	4827      	ldr	r0, [pc, #156]	; (80183ec <__lshift+0xdc>)
 801834e:	31ff      	adds	r1, #255	; 0xff
 8018350:	f7ff f9b4 	bl	80176bc <__assert_func>
 8018354:	3101      	adds	r1, #1
 8018356:	005b      	lsls	r3, r3, #1
 8018358:	e7e7      	b.n	801832a <__lshift+0x1a>
 801835a:	2200      	movs	r2, #0
 801835c:	0098      	lsls	r0, r3, #2
 801835e:	500a      	str	r2, [r1, r0]
 8018360:	3301      	adds	r3, #1
 8018362:	42ab      	cmp	r3, r5
 8018364:	dbf9      	blt.n	801835a <__lshift+0x4a>
 8018366:	43eb      	mvns	r3, r5
 8018368:	17db      	asrs	r3, r3, #31
 801836a:	401d      	ands	r5, r3
 801836c:	9b03      	ldr	r3, [sp, #12]
 801836e:	00ad      	lsls	r5, r5, #2
 8018370:	211f      	movs	r1, #31
 8018372:	0038      	movs	r0, r7
 8018374:	195d      	adds	r5, r3, r5
 8018376:	0023      	movs	r3, r4
 8018378:	6922      	ldr	r2, [r4, #16]
 801837a:	3314      	adds	r3, #20
 801837c:	0092      	lsls	r2, r2, #2
 801837e:	4008      	ands	r0, r1
 8018380:	4684      	mov	ip, r0
 8018382:	189a      	adds	r2, r3, r2
 8018384:	420f      	tst	r7, r1
 8018386:	d02a      	beq.n	80183de <__lshift+0xce>
 8018388:	3101      	adds	r1, #1
 801838a:	1a09      	subs	r1, r1, r0
 801838c:	9105      	str	r1, [sp, #20]
 801838e:	2100      	movs	r1, #0
 8018390:	9503      	str	r5, [sp, #12]
 8018392:	4667      	mov	r7, ip
 8018394:	6818      	ldr	r0, [r3, #0]
 8018396:	40b8      	lsls	r0, r7
 8018398:	4301      	orrs	r1, r0
 801839a:	9803      	ldr	r0, [sp, #12]
 801839c:	c002      	stmia	r0!, {r1}
 801839e:	cb02      	ldmia	r3!, {r1}
 80183a0:	9003      	str	r0, [sp, #12]
 80183a2:	9805      	ldr	r0, [sp, #20]
 80183a4:	40c1      	lsrs	r1, r0
 80183a6:	429a      	cmp	r2, r3
 80183a8:	d8f3      	bhi.n	8018392 <__lshift+0x82>
 80183aa:	0020      	movs	r0, r4
 80183ac:	3015      	adds	r0, #21
 80183ae:	2304      	movs	r3, #4
 80183b0:	4282      	cmp	r2, r0
 80183b2:	d304      	bcc.n	80183be <__lshift+0xae>
 80183b4:	1b13      	subs	r3, r2, r4
 80183b6:	3b15      	subs	r3, #21
 80183b8:	089b      	lsrs	r3, r3, #2
 80183ba:	3301      	adds	r3, #1
 80183bc:	009b      	lsls	r3, r3, #2
 80183be:	50e9      	str	r1, [r5, r3]
 80183c0:	2900      	cmp	r1, #0
 80183c2:	d002      	beq.n	80183ca <__lshift+0xba>
 80183c4:	9b02      	ldr	r3, [sp, #8]
 80183c6:	3302      	adds	r3, #2
 80183c8:	9301      	str	r3, [sp, #4]
 80183ca:	9b01      	ldr	r3, [sp, #4]
 80183cc:	9804      	ldr	r0, [sp, #16]
 80183ce:	3b01      	subs	r3, #1
 80183d0:	0021      	movs	r1, r4
 80183d2:	6133      	str	r3, [r6, #16]
 80183d4:	f7ff fd7e 	bl	8017ed4 <_Bfree>
 80183d8:	0030      	movs	r0, r6
 80183da:	b007      	add	sp, #28
 80183dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80183de:	cb02      	ldmia	r3!, {r1}
 80183e0:	c502      	stmia	r5!, {r1}
 80183e2:	429a      	cmp	r2, r3
 80183e4:	d8fb      	bhi.n	80183de <__lshift+0xce>
 80183e6:	e7f0      	b.n	80183ca <__lshift+0xba>
 80183e8:	0801cf4d 	.word	0x0801cf4d
 80183ec:	0801cfdc 	.word	0x0801cfdc

080183f0 <__mcmp>:
 80183f0:	6902      	ldr	r2, [r0, #16]
 80183f2:	690b      	ldr	r3, [r1, #16]
 80183f4:	b530      	push	{r4, r5, lr}
 80183f6:	0004      	movs	r4, r0
 80183f8:	1ad0      	subs	r0, r2, r3
 80183fa:	429a      	cmp	r2, r3
 80183fc:	d10d      	bne.n	801841a <__mcmp+0x2a>
 80183fe:	009b      	lsls	r3, r3, #2
 8018400:	3414      	adds	r4, #20
 8018402:	3114      	adds	r1, #20
 8018404:	18e2      	adds	r2, r4, r3
 8018406:	18c9      	adds	r1, r1, r3
 8018408:	3a04      	subs	r2, #4
 801840a:	3904      	subs	r1, #4
 801840c:	6815      	ldr	r5, [r2, #0]
 801840e:	680b      	ldr	r3, [r1, #0]
 8018410:	429d      	cmp	r5, r3
 8018412:	d003      	beq.n	801841c <__mcmp+0x2c>
 8018414:	2001      	movs	r0, #1
 8018416:	429d      	cmp	r5, r3
 8018418:	d303      	bcc.n	8018422 <__mcmp+0x32>
 801841a:	bd30      	pop	{r4, r5, pc}
 801841c:	4294      	cmp	r4, r2
 801841e:	d3f3      	bcc.n	8018408 <__mcmp+0x18>
 8018420:	e7fb      	b.n	801841a <__mcmp+0x2a>
 8018422:	4240      	negs	r0, r0
 8018424:	e7f9      	b.n	801841a <__mcmp+0x2a>
	...

08018428 <__mdiff>:
 8018428:	b5f0      	push	{r4, r5, r6, r7, lr}
 801842a:	000e      	movs	r6, r1
 801842c:	0007      	movs	r7, r0
 801842e:	0011      	movs	r1, r2
 8018430:	0030      	movs	r0, r6
 8018432:	b087      	sub	sp, #28
 8018434:	0014      	movs	r4, r2
 8018436:	f7ff ffdb 	bl	80183f0 <__mcmp>
 801843a:	1e05      	subs	r5, r0, #0
 801843c:	d110      	bne.n	8018460 <__mdiff+0x38>
 801843e:	0001      	movs	r1, r0
 8018440:	0038      	movs	r0, r7
 8018442:	f7ff fd03 	bl	8017e4c <_Balloc>
 8018446:	1e02      	subs	r2, r0, #0
 8018448:	d104      	bne.n	8018454 <__mdiff+0x2c>
 801844a:	4b40      	ldr	r3, [pc, #256]	; (801854c <__mdiff+0x124>)
 801844c:	4940      	ldr	r1, [pc, #256]	; (8018550 <__mdiff+0x128>)
 801844e:	4841      	ldr	r0, [pc, #260]	; (8018554 <__mdiff+0x12c>)
 8018450:	f7ff f934 	bl	80176bc <__assert_func>
 8018454:	2301      	movs	r3, #1
 8018456:	6145      	str	r5, [r0, #20]
 8018458:	6103      	str	r3, [r0, #16]
 801845a:	0010      	movs	r0, r2
 801845c:	b007      	add	sp, #28
 801845e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018460:	2301      	movs	r3, #1
 8018462:	9301      	str	r3, [sp, #4]
 8018464:	2800      	cmp	r0, #0
 8018466:	db04      	blt.n	8018472 <__mdiff+0x4a>
 8018468:	0023      	movs	r3, r4
 801846a:	0034      	movs	r4, r6
 801846c:	001e      	movs	r6, r3
 801846e:	2300      	movs	r3, #0
 8018470:	9301      	str	r3, [sp, #4]
 8018472:	0038      	movs	r0, r7
 8018474:	6861      	ldr	r1, [r4, #4]
 8018476:	f7ff fce9 	bl	8017e4c <_Balloc>
 801847a:	1e02      	subs	r2, r0, #0
 801847c:	d103      	bne.n	8018486 <__mdiff+0x5e>
 801847e:	2190      	movs	r1, #144	; 0x90
 8018480:	4b32      	ldr	r3, [pc, #200]	; (801854c <__mdiff+0x124>)
 8018482:	0089      	lsls	r1, r1, #2
 8018484:	e7e3      	b.n	801844e <__mdiff+0x26>
 8018486:	9b01      	ldr	r3, [sp, #4]
 8018488:	2700      	movs	r7, #0
 801848a:	60c3      	str	r3, [r0, #12]
 801848c:	6920      	ldr	r0, [r4, #16]
 801848e:	3414      	adds	r4, #20
 8018490:	9401      	str	r4, [sp, #4]
 8018492:	9b01      	ldr	r3, [sp, #4]
 8018494:	0084      	lsls	r4, r0, #2
 8018496:	191b      	adds	r3, r3, r4
 8018498:	0034      	movs	r4, r6
 801849a:	9302      	str	r3, [sp, #8]
 801849c:	6933      	ldr	r3, [r6, #16]
 801849e:	3414      	adds	r4, #20
 80184a0:	0099      	lsls	r1, r3, #2
 80184a2:	1863      	adds	r3, r4, r1
 80184a4:	9303      	str	r3, [sp, #12]
 80184a6:	0013      	movs	r3, r2
 80184a8:	3314      	adds	r3, #20
 80184aa:	469c      	mov	ip, r3
 80184ac:	9305      	str	r3, [sp, #20]
 80184ae:	9b01      	ldr	r3, [sp, #4]
 80184b0:	9304      	str	r3, [sp, #16]
 80184b2:	9b04      	ldr	r3, [sp, #16]
 80184b4:	cc02      	ldmia	r4!, {r1}
 80184b6:	cb20      	ldmia	r3!, {r5}
 80184b8:	9304      	str	r3, [sp, #16]
 80184ba:	b2ab      	uxth	r3, r5
 80184bc:	19df      	adds	r7, r3, r7
 80184be:	b28b      	uxth	r3, r1
 80184c0:	1afb      	subs	r3, r7, r3
 80184c2:	0c2d      	lsrs	r5, r5, #16
 80184c4:	0c09      	lsrs	r1, r1, #16
 80184c6:	1a69      	subs	r1, r5, r1
 80184c8:	141d      	asrs	r5, r3, #16
 80184ca:	1949      	adds	r1, r1, r5
 80184cc:	140f      	asrs	r7, r1, #16
 80184ce:	b29b      	uxth	r3, r3
 80184d0:	0409      	lsls	r1, r1, #16
 80184d2:	430b      	orrs	r3, r1
 80184d4:	4661      	mov	r1, ip
 80184d6:	c108      	stmia	r1!, {r3}
 80184d8:	9b03      	ldr	r3, [sp, #12]
 80184da:	468c      	mov	ip, r1
 80184dc:	42a3      	cmp	r3, r4
 80184de:	d8e8      	bhi.n	80184b2 <__mdiff+0x8a>
 80184e0:	0031      	movs	r1, r6
 80184e2:	9c03      	ldr	r4, [sp, #12]
 80184e4:	3115      	adds	r1, #21
 80184e6:	2304      	movs	r3, #4
 80184e8:	428c      	cmp	r4, r1
 80184ea:	d304      	bcc.n	80184f6 <__mdiff+0xce>
 80184ec:	1ba3      	subs	r3, r4, r6
 80184ee:	3b15      	subs	r3, #21
 80184f0:	089b      	lsrs	r3, r3, #2
 80184f2:	3301      	adds	r3, #1
 80184f4:	009b      	lsls	r3, r3, #2
 80184f6:	9901      	ldr	r1, [sp, #4]
 80184f8:	18cc      	adds	r4, r1, r3
 80184fa:	9905      	ldr	r1, [sp, #20]
 80184fc:	0026      	movs	r6, r4
 80184fe:	18cb      	adds	r3, r1, r3
 8018500:	469c      	mov	ip, r3
 8018502:	9902      	ldr	r1, [sp, #8]
 8018504:	428e      	cmp	r6, r1
 8018506:	d310      	bcc.n	801852a <__mdiff+0x102>
 8018508:	9e02      	ldr	r6, [sp, #8]
 801850a:	1ee5      	subs	r5, r4, #3
 801850c:	2100      	movs	r1, #0
 801850e:	42ae      	cmp	r6, r5
 8018510:	d304      	bcc.n	801851c <__mdiff+0xf4>
 8018512:	0031      	movs	r1, r6
 8018514:	3103      	adds	r1, #3
 8018516:	1b09      	subs	r1, r1, r4
 8018518:	0889      	lsrs	r1, r1, #2
 801851a:	0089      	lsls	r1, r1, #2
 801851c:	185b      	adds	r3, r3, r1
 801851e:	3b04      	subs	r3, #4
 8018520:	6819      	ldr	r1, [r3, #0]
 8018522:	2900      	cmp	r1, #0
 8018524:	d00f      	beq.n	8018546 <__mdiff+0x11e>
 8018526:	6110      	str	r0, [r2, #16]
 8018528:	e797      	b.n	801845a <__mdiff+0x32>
 801852a:	ce02      	ldmia	r6!, {r1}
 801852c:	b28d      	uxth	r5, r1
 801852e:	19ed      	adds	r5, r5, r7
 8018530:	0c0f      	lsrs	r7, r1, #16
 8018532:	1429      	asrs	r1, r5, #16
 8018534:	1879      	adds	r1, r7, r1
 8018536:	140f      	asrs	r7, r1, #16
 8018538:	b2ad      	uxth	r5, r5
 801853a:	0409      	lsls	r1, r1, #16
 801853c:	430d      	orrs	r5, r1
 801853e:	4661      	mov	r1, ip
 8018540:	c120      	stmia	r1!, {r5}
 8018542:	468c      	mov	ip, r1
 8018544:	e7dd      	b.n	8018502 <__mdiff+0xda>
 8018546:	3801      	subs	r0, #1
 8018548:	e7e9      	b.n	801851e <__mdiff+0xf6>
 801854a:	46c0      	nop			; (mov r8, r8)
 801854c:	0801cf4d 	.word	0x0801cf4d
 8018550:	00000232 	.word	0x00000232
 8018554:	0801cfdc 	.word	0x0801cfdc

08018558 <__ulp>:
 8018558:	4b0f      	ldr	r3, [pc, #60]	; (8018598 <__ulp+0x40>)
 801855a:	4019      	ands	r1, r3
 801855c:	4b0f      	ldr	r3, [pc, #60]	; (801859c <__ulp+0x44>)
 801855e:	18c9      	adds	r1, r1, r3
 8018560:	2900      	cmp	r1, #0
 8018562:	dd04      	ble.n	801856e <__ulp+0x16>
 8018564:	2200      	movs	r2, #0
 8018566:	000b      	movs	r3, r1
 8018568:	0010      	movs	r0, r2
 801856a:	0019      	movs	r1, r3
 801856c:	4770      	bx	lr
 801856e:	4249      	negs	r1, r1
 8018570:	2200      	movs	r2, #0
 8018572:	2300      	movs	r3, #0
 8018574:	1509      	asrs	r1, r1, #20
 8018576:	2913      	cmp	r1, #19
 8018578:	dc04      	bgt.n	8018584 <__ulp+0x2c>
 801857a:	2080      	movs	r0, #128	; 0x80
 801857c:	0300      	lsls	r0, r0, #12
 801857e:	4108      	asrs	r0, r1
 8018580:	0003      	movs	r3, r0
 8018582:	e7f1      	b.n	8018568 <__ulp+0x10>
 8018584:	3914      	subs	r1, #20
 8018586:	2001      	movs	r0, #1
 8018588:	291e      	cmp	r1, #30
 801858a:	dc02      	bgt.n	8018592 <__ulp+0x3a>
 801858c:	2080      	movs	r0, #128	; 0x80
 801858e:	0600      	lsls	r0, r0, #24
 8018590:	40c8      	lsrs	r0, r1
 8018592:	0002      	movs	r2, r0
 8018594:	e7e8      	b.n	8018568 <__ulp+0x10>
 8018596:	46c0      	nop			; (mov r8, r8)
 8018598:	7ff00000 	.word	0x7ff00000
 801859c:	fcc00000 	.word	0xfcc00000

080185a0 <__b2d>:
 80185a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80185a2:	0006      	movs	r6, r0
 80185a4:	6903      	ldr	r3, [r0, #16]
 80185a6:	3614      	adds	r6, #20
 80185a8:	009b      	lsls	r3, r3, #2
 80185aa:	18f3      	adds	r3, r6, r3
 80185ac:	1f1d      	subs	r5, r3, #4
 80185ae:	682c      	ldr	r4, [r5, #0]
 80185b0:	000f      	movs	r7, r1
 80185b2:	0020      	movs	r0, r4
 80185b4:	9301      	str	r3, [sp, #4]
 80185b6:	f7ff fd41 	bl	801803c <__hi0bits>
 80185ba:	2320      	movs	r3, #32
 80185bc:	1a1b      	subs	r3, r3, r0
 80185be:	491f      	ldr	r1, [pc, #124]	; (801863c <__b2d+0x9c>)
 80185c0:	603b      	str	r3, [r7, #0]
 80185c2:	280a      	cmp	r0, #10
 80185c4:	dc16      	bgt.n	80185f4 <__b2d+0x54>
 80185c6:	230b      	movs	r3, #11
 80185c8:	0027      	movs	r7, r4
 80185ca:	1a1b      	subs	r3, r3, r0
 80185cc:	40df      	lsrs	r7, r3
 80185ce:	4339      	orrs	r1, r7
 80185d0:	469c      	mov	ip, r3
 80185d2:	000b      	movs	r3, r1
 80185d4:	2100      	movs	r1, #0
 80185d6:	42ae      	cmp	r6, r5
 80185d8:	d202      	bcs.n	80185e0 <__b2d+0x40>
 80185da:	9901      	ldr	r1, [sp, #4]
 80185dc:	3908      	subs	r1, #8
 80185de:	6809      	ldr	r1, [r1, #0]
 80185e0:	3015      	adds	r0, #21
 80185e2:	4084      	lsls	r4, r0
 80185e4:	4660      	mov	r0, ip
 80185e6:	40c1      	lsrs	r1, r0
 80185e8:	430c      	orrs	r4, r1
 80185ea:	0022      	movs	r2, r4
 80185ec:	0010      	movs	r0, r2
 80185ee:	0019      	movs	r1, r3
 80185f0:	b003      	add	sp, #12
 80185f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80185f4:	2700      	movs	r7, #0
 80185f6:	42ae      	cmp	r6, r5
 80185f8:	d202      	bcs.n	8018600 <__b2d+0x60>
 80185fa:	9d01      	ldr	r5, [sp, #4]
 80185fc:	3d08      	subs	r5, #8
 80185fe:	682f      	ldr	r7, [r5, #0]
 8018600:	230b      	movs	r3, #11
 8018602:	425b      	negs	r3, r3
 8018604:	469c      	mov	ip, r3
 8018606:	4484      	add	ip, r0
 8018608:	280b      	cmp	r0, #11
 801860a:	d013      	beq.n	8018634 <__b2d+0x94>
 801860c:	4663      	mov	r3, ip
 801860e:	2020      	movs	r0, #32
 8018610:	409c      	lsls	r4, r3
 8018612:	1ac0      	subs	r0, r0, r3
 8018614:	003b      	movs	r3, r7
 8018616:	40c3      	lsrs	r3, r0
 8018618:	431c      	orrs	r4, r3
 801861a:	4321      	orrs	r1, r4
 801861c:	000b      	movs	r3, r1
 801861e:	2100      	movs	r1, #0
 8018620:	42b5      	cmp	r5, r6
 8018622:	d901      	bls.n	8018628 <__b2d+0x88>
 8018624:	3d04      	subs	r5, #4
 8018626:	6829      	ldr	r1, [r5, #0]
 8018628:	4664      	mov	r4, ip
 801862a:	40c1      	lsrs	r1, r0
 801862c:	40a7      	lsls	r7, r4
 801862e:	430f      	orrs	r7, r1
 8018630:	003a      	movs	r2, r7
 8018632:	e7db      	b.n	80185ec <__b2d+0x4c>
 8018634:	4321      	orrs	r1, r4
 8018636:	000b      	movs	r3, r1
 8018638:	e7fa      	b.n	8018630 <__b2d+0x90>
 801863a:	46c0      	nop			; (mov r8, r8)
 801863c:	3ff00000 	.word	0x3ff00000

08018640 <__d2b>:
 8018640:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8018642:	2101      	movs	r1, #1
 8018644:	0014      	movs	r4, r2
 8018646:	001e      	movs	r6, r3
 8018648:	9f08      	ldr	r7, [sp, #32]
 801864a:	f7ff fbff 	bl	8017e4c <_Balloc>
 801864e:	1e05      	subs	r5, r0, #0
 8018650:	d105      	bne.n	801865e <__d2b+0x1e>
 8018652:	0002      	movs	r2, r0
 8018654:	4b26      	ldr	r3, [pc, #152]	; (80186f0 <__d2b+0xb0>)
 8018656:	4927      	ldr	r1, [pc, #156]	; (80186f4 <__d2b+0xb4>)
 8018658:	4827      	ldr	r0, [pc, #156]	; (80186f8 <__d2b+0xb8>)
 801865a:	f7ff f82f 	bl	80176bc <__assert_func>
 801865e:	0333      	lsls	r3, r6, #12
 8018660:	0076      	lsls	r6, r6, #1
 8018662:	0b1b      	lsrs	r3, r3, #12
 8018664:	0d76      	lsrs	r6, r6, #21
 8018666:	d124      	bne.n	80186b2 <__d2b+0x72>
 8018668:	9301      	str	r3, [sp, #4]
 801866a:	2c00      	cmp	r4, #0
 801866c:	d027      	beq.n	80186be <__d2b+0x7e>
 801866e:	4668      	mov	r0, sp
 8018670:	9400      	str	r4, [sp, #0]
 8018672:	f7ff fcfd 	bl	8018070 <__lo0bits>
 8018676:	9c00      	ldr	r4, [sp, #0]
 8018678:	2800      	cmp	r0, #0
 801867a:	d01e      	beq.n	80186ba <__d2b+0x7a>
 801867c:	9b01      	ldr	r3, [sp, #4]
 801867e:	2120      	movs	r1, #32
 8018680:	001a      	movs	r2, r3
 8018682:	1a09      	subs	r1, r1, r0
 8018684:	408a      	lsls	r2, r1
 8018686:	40c3      	lsrs	r3, r0
 8018688:	4322      	orrs	r2, r4
 801868a:	616a      	str	r2, [r5, #20]
 801868c:	9301      	str	r3, [sp, #4]
 801868e:	9c01      	ldr	r4, [sp, #4]
 8018690:	61ac      	str	r4, [r5, #24]
 8018692:	1e63      	subs	r3, r4, #1
 8018694:	419c      	sbcs	r4, r3
 8018696:	3401      	adds	r4, #1
 8018698:	612c      	str	r4, [r5, #16]
 801869a:	2e00      	cmp	r6, #0
 801869c:	d018      	beq.n	80186d0 <__d2b+0x90>
 801869e:	4b17      	ldr	r3, [pc, #92]	; (80186fc <__d2b+0xbc>)
 80186a0:	18f6      	adds	r6, r6, r3
 80186a2:	2335      	movs	r3, #53	; 0x35
 80186a4:	1836      	adds	r6, r6, r0
 80186a6:	1a18      	subs	r0, r3, r0
 80186a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80186aa:	603e      	str	r6, [r7, #0]
 80186ac:	6018      	str	r0, [r3, #0]
 80186ae:	0028      	movs	r0, r5
 80186b0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80186b2:	2280      	movs	r2, #128	; 0x80
 80186b4:	0352      	lsls	r2, r2, #13
 80186b6:	4313      	orrs	r3, r2
 80186b8:	e7d6      	b.n	8018668 <__d2b+0x28>
 80186ba:	616c      	str	r4, [r5, #20]
 80186bc:	e7e7      	b.n	801868e <__d2b+0x4e>
 80186be:	a801      	add	r0, sp, #4
 80186c0:	f7ff fcd6 	bl	8018070 <__lo0bits>
 80186c4:	2401      	movs	r4, #1
 80186c6:	9b01      	ldr	r3, [sp, #4]
 80186c8:	612c      	str	r4, [r5, #16]
 80186ca:	616b      	str	r3, [r5, #20]
 80186cc:	3020      	adds	r0, #32
 80186ce:	e7e4      	b.n	801869a <__d2b+0x5a>
 80186d0:	4b0b      	ldr	r3, [pc, #44]	; (8018700 <__d2b+0xc0>)
 80186d2:	18c0      	adds	r0, r0, r3
 80186d4:	4b0b      	ldr	r3, [pc, #44]	; (8018704 <__d2b+0xc4>)
 80186d6:	6038      	str	r0, [r7, #0]
 80186d8:	18e3      	adds	r3, r4, r3
 80186da:	009b      	lsls	r3, r3, #2
 80186dc:	18eb      	adds	r3, r5, r3
 80186de:	6958      	ldr	r0, [r3, #20]
 80186e0:	f7ff fcac 	bl	801803c <__hi0bits>
 80186e4:	0164      	lsls	r4, r4, #5
 80186e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80186e8:	1a24      	subs	r4, r4, r0
 80186ea:	601c      	str	r4, [r3, #0]
 80186ec:	e7df      	b.n	80186ae <__d2b+0x6e>
 80186ee:	46c0      	nop			; (mov r8, r8)
 80186f0:	0801cf4d 	.word	0x0801cf4d
 80186f4:	0000030a 	.word	0x0000030a
 80186f8:	0801cfdc 	.word	0x0801cfdc
 80186fc:	fffffbcd 	.word	0xfffffbcd
 8018700:	fffffbce 	.word	0xfffffbce
 8018704:	3fffffff 	.word	0x3fffffff

08018708 <__ratio>:
 8018708:	b5f0      	push	{r4, r5, r6, r7, lr}
 801870a:	b085      	sub	sp, #20
 801870c:	000d      	movs	r5, r1
 801870e:	a902      	add	r1, sp, #8
 8018710:	0004      	movs	r4, r0
 8018712:	f7ff ff45 	bl	80185a0 <__b2d>
 8018716:	9000      	str	r0, [sp, #0]
 8018718:	9101      	str	r1, [sp, #4]
 801871a:	9e00      	ldr	r6, [sp, #0]
 801871c:	9f01      	ldr	r7, [sp, #4]
 801871e:	0028      	movs	r0, r5
 8018720:	a903      	add	r1, sp, #12
 8018722:	f7ff ff3d 	bl	80185a0 <__b2d>
 8018726:	6924      	ldr	r4, [r4, #16]
 8018728:	692d      	ldr	r5, [r5, #16]
 801872a:	0002      	movs	r2, r0
 801872c:	1b65      	subs	r5, r4, r5
 801872e:	016c      	lsls	r4, r5, #5
 8018730:	46a4      	mov	ip, r4
 8018732:	9d03      	ldr	r5, [sp, #12]
 8018734:	9c02      	ldr	r4, [sp, #8]
 8018736:	000b      	movs	r3, r1
 8018738:	1b64      	subs	r4, r4, r5
 801873a:	4464      	add	r4, ip
 801873c:	0525      	lsls	r5, r4, #20
 801873e:	2c00      	cmp	r4, #0
 8018740:	dd07      	ble.n	8018752 <__ratio+0x4a>
 8018742:	9901      	ldr	r1, [sp, #4]
 8018744:	186f      	adds	r7, r5, r1
 8018746:	0030      	movs	r0, r6
 8018748:	0039      	movs	r1, r7
 801874a:	f7e8 fe93 	bl	8001474 <__aeabi_ddiv>
 801874e:	b005      	add	sp, #20
 8018750:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018752:	1b4b      	subs	r3, r1, r5
 8018754:	e7f7      	b.n	8018746 <__ratio+0x3e>

08018756 <__copybits>:
 8018756:	b570      	push	{r4, r5, r6, lr}
 8018758:	0015      	movs	r5, r2
 801875a:	6913      	ldr	r3, [r2, #16]
 801875c:	3514      	adds	r5, #20
 801875e:	009c      	lsls	r4, r3, #2
 8018760:	0006      	movs	r6, r0
 8018762:	002b      	movs	r3, r5
 8018764:	3901      	subs	r1, #1
 8018766:	1149      	asrs	r1, r1, #5
 8018768:	3101      	adds	r1, #1
 801876a:	0089      	lsls	r1, r1, #2
 801876c:	1841      	adds	r1, r0, r1
 801876e:	192c      	adds	r4, r5, r4
 8018770:	429c      	cmp	r4, r3
 8018772:	d80d      	bhi.n	8018790 <__copybits+0x3a>
 8018774:	0015      	movs	r5, r2
 8018776:	3511      	adds	r5, #17
 8018778:	2300      	movs	r3, #0
 801877a:	42a5      	cmp	r5, r4
 801877c:	d803      	bhi.n	8018786 <__copybits+0x30>
 801877e:	1aa3      	subs	r3, r4, r2
 8018780:	3b11      	subs	r3, #17
 8018782:	089b      	lsrs	r3, r3, #2
 8018784:	009b      	lsls	r3, r3, #2
 8018786:	18c0      	adds	r0, r0, r3
 8018788:	2300      	movs	r3, #0
 801878a:	4281      	cmp	r1, r0
 801878c:	d803      	bhi.n	8018796 <__copybits+0x40>
 801878e:	bd70      	pop	{r4, r5, r6, pc}
 8018790:	cb20      	ldmia	r3!, {r5}
 8018792:	c620      	stmia	r6!, {r5}
 8018794:	e7ec      	b.n	8018770 <__copybits+0x1a>
 8018796:	c008      	stmia	r0!, {r3}
 8018798:	e7f7      	b.n	801878a <__copybits+0x34>

0801879a <__any_on>:
 801879a:	0002      	movs	r2, r0
 801879c:	6900      	ldr	r0, [r0, #16]
 801879e:	b510      	push	{r4, lr}
 80187a0:	3214      	adds	r2, #20
 80187a2:	114b      	asrs	r3, r1, #5
 80187a4:	4298      	cmp	r0, r3
 80187a6:	db13      	blt.n	80187d0 <__any_on+0x36>
 80187a8:	dd0c      	ble.n	80187c4 <__any_on+0x2a>
 80187aa:	241f      	movs	r4, #31
 80187ac:	0008      	movs	r0, r1
 80187ae:	4020      	ands	r0, r4
 80187b0:	4221      	tst	r1, r4
 80187b2:	d007      	beq.n	80187c4 <__any_on+0x2a>
 80187b4:	0099      	lsls	r1, r3, #2
 80187b6:	588c      	ldr	r4, [r1, r2]
 80187b8:	0021      	movs	r1, r4
 80187ba:	40c1      	lsrs	r1, r0
 80187bc:	4081      	lsls	r1, r0
 80187be:	2001      	movs	r0, #1
 80187c0:	428c      	cmp	r4, r1
 80187c2:	d104      	bne.n	80187ce <__any_on+0x34>
 80187c4:	009b      	lsls	r3, r3, #2
 80187c6:	18d3      	adds	r3, r2, r3
 80187c8:	4293      	cmp	r3, r2
 80187ca:	d803      	bhi.n	80187d4 <__any_on+0x3a>
 80187cc:	2000      	movs	r0, #0
 80187ce:	bd10      	pop	{r4, pc}
 80187d0:	0003      	movs	r3, r0
 80187d2:	e7f7      	b.n	80187c4 <__any_on+0x2a>
 80187d4:	3b04      	subs	r3, #4
 80187d6:	6819      	ldr	r1, [r3, #0]
 80187d8:	2900      	cmp	r1, #0
 80187da:	d0f5      	beq.n	80187c8 <__any_on+0x2e>
 80187dc:	2001      	movs	r0, #1
 80187de:	e7f6      	b.n	80187ce <__any_on+0x34>

080187e0 <_calloc_r>:
 80187e0:	434a      	muls	r2, r1
 80187e2:	b570      	push	{r4, r5, r6, lr}
 80187e4:	0011      	movs	r1, r2
 80187e6:	0015      	movs	r5, r2
 80187e8:	f7fd ff00 	bl	80165ec <_malloc_r>
 80187ec:	1e04      	subs	r4, r0, #0
 80187ee:	d003      	beq.n	80187f8 <_calloc_r+0x18>
 80187f0:	002a      	movs	r2, r5
 80187f2:	2100      	movs	r1, #0
 80187f4:	f7fd fea7 	bl	8016546 <memset>
 80187f8:	0020      	movs	r0, r4
 80187fa:	bd70      	pop	{r4, r5, r6, pc}

080187fc <_realloc_r>:
 80187fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80187fe:	0007      	movs	r7, r0
 8018800:	000d      	movs	r5, r1
 8018802:	0016      	movs	r6, r2
 8018804:	2900      	cmp	r1, #0
 8018806:	d105      	bne.n	8018814 <_realloc_r+0x18>
 8018808:	0011      	movs	r1, r2
 801880a:	f7fd feef 	bl	80165ec <_malloc_r>
 801880e:	0004      	movs	r4, r0
 8018810:	0020      	movs	r0, r4
 8018812:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018814:	2a00      	cmp	r2, #0
 8018816:	d103      	bne.n	8018820 <_realloc_r+0x24>
 8018818:	f7fd fe9e 	bl	8016558 <_free_r>
 801881c:	0034      	movs	r4, r6
 801881e:	e7f7      	b.n	8018810 <_realloc_r+0x14>
 8018820:	f000 ff9e 	bl	8019760 <_malloc_usable_size_r>
 8018824:	002c      	movs	r4, r5
 8018826:	42b0      	cmp	r0, r6
 8018828:	d2f2      	bcs.n	8018810 <_realloc_r+0x14>
 801882a:	0031      	movs	r1, r6
 801882c:	0038      	movs	r0, r7
 801882e:	f7fd fedd 	bl	80165ec <_malloc_r>
 8018832:	1e04      	subs	r4, r0, #0
 8018834:	d0ec      	beq.n	8018810 <_realloc_r+0x14>
 8018836:	0029      	movs	r1, r5
 8018838:	0032      	movs	r2, r6
 801883a:	f7fd fe7b 	bl	8016534 <memcpy>
 801883e:	0029      	movs	r1, r5
 8018840:	0038      	movs	r0, r7
 8018842:	f7fd fe89 	bl	8016558 <_free_r>
 8018846:	e7e3      	b.n	8018810 <_realloc_r+0x14>

08018848 <__ssputs_r>:
 8018848:	b5f0      	push	{r4, r5, r6, r7, lr}
 801884a:	688e      	ldr	r6, [r1, #8]
 801884c:	b085      	sub	sp, #20
 801884e:	0007      	movs	r7, r0
 8018850:	000c      	movs	r4, r1
 8018852:	9203      	str	r2, [sp, #12]
 8018854:	9301      	str	r3, [sp, #4]
 8018856:	429e      	cmp	r6, r3
 8018858:	d83c      	bhi.n	80188d4 <__ssputs_r+0x8c>
 801885a:	2390      	movs	r3, #144	; 0x90
 801885c:	898a      	ldrh	r2, [r1, #12]
 801885e:	00db      	lsls	r3, r3, #3
 8018860:	421a      	tst	r2, r3
 8018862:	d034      	beq.n	80188ce <__ssputs_r+0x86>
 8018864:	2503      	movs	r5, #3
 8018866:	6909      	ldr	r1, [r1, #16]
 8018868:	6823      	ldr	r3, [r4, #0]
 801886a:	1a5b      	subs	r3, r3, r1
 801886c:	9302      	str	r3, [sp, #8]
 801886e:	6963      	ldr	r3, [r4, #20]
 8018870:	9802      	ldr	r0, [sp, #8]
 8018872:	435d      	muls	r5, r3
 8018874:	0feb      	lsrs	r3, r5, #31
 8018876:	195d      	adds	r5, r3, r5
 8018878:	9b01      	ldr	r3, [sp, #4]
 801887a:	106d      	asrs	r5, r5, #1
 801887c:	3301      	adds	r3, #1
 801887e:	181b      	adds	r3, r3, r0
 8018880:	42ab      	cmp	r3, r5
 8018882:	d900      	bls.n	8018886 <__ssputs_r+0x3e>
 8018884:	001d      	movs	r5, r3
 8018886:	0553      	lsls	r3, r2, #21
 8018888:	d532      	bpl.n	80188f0 <__ssputs_r+0xa8>
 801888a:	0029      	movs	r1, r5
 801888c:	0038      	movs	r0, r7
 801888e:	f7fd fead 	bl	80165ec <_malloc_r>
 8018892:	1e06      	subs	r6, r0, #0
 8018894:	d109      	bne.n	80188aa <__ssputs_r+0x62>
 8018896:	230c      	movs	r3, #12
 8018898:	603b      	str	r3, [r7, #0]
 801889a:	2340      	movs	r3, #64	; 0x40
 801889c:	2001      	movs	r0, #1
 801889e:	89a2      	ldrh	r2, [r4, #12]
 80188a0:	4240      	negs	r0, r0
 80188a2:	4313      	orrs	r3, r2
 80188a4:	81a3      	strh	r3, [r4, #12]
 80188a6:	b005      	add	sp, #20
 80188a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80188aa:	9a02      	ldr	r2, [sp, #8]
 80188ac:	6921      	ldr	r1, [r4, #16]
 80188ae:	f7fd fe41 	bl	8016534 <memcpy>
 80188b2:	89a3      	ldrh	r3, [r4, #12]
 80188b4:	4a14      	ldr	r2, [pc, #80]	; (8018908 <__ssputs_r+0xc0>)
 80188b6:	401a      	ands	r2, r3
 80188b8:	2380      	movs	r3, #128	; 0x80
 80188ba:	4313      	orrs	r3, r2
 80188bc:	81a3      	strh	r3, [r4, #12]
 80188be:	9b02      	ldr	r3, [sp, #8]
 80188c0:	6126      	str	r6, [r4, #16]
 80188c2:	18f6      	adds	r6, r6, r3
 80188c4:	6026      	str	r6, [r4, #0]
 80188c6:	6165      	str	r5, [r4, #20]
 80188c8:	9e01      	ldr	r6, [sp, #4]
 80188ca:	1aed      	subs	r5, r5, r3
 80188cc:	60a5      	str	r5, [r4, #8]
 80188ce:	9b01      	ldr	r3, [sp, #4]
 80188d0:	429e      	cmp	r6, r3
 80188d2:	d900      	bls.n	80188d6 <__ssputs_r+0x8e>
 80188d4:	9e01      	ldr	r6, [sp, #4]
 80188d6:	0032      	movs	r2, r6
 80188d8:	9903      	ldr	r1, [sp, #12]
 80188da:	6820      	ldr	r0, [r4, #0]
 80188dc:	f000 ff2d 	bl	801973a <memmove>
 80188e0:	68a3      	ldr	r3, [r4, #8]
 80188e2:	2000      	movs	r0, #0
 80188e4:	1b9b      	subs	r3, r3, r6
 80188e6:	60a3      	str	r3, [r4, #8]
 80188e8:	6823      	ldr	r3, [r4, #0]
 80188ea:	199e      	adds	r6, r3, r6
 80188ec:	6026      	str	r6, [r4, #0]
 80188ee:	e7da      	b.n	80188a6 <__ssputs_r+0x5e>
 80188f0:	002a      	movs	r2, r5
 80188f2:	0038      	movs	r0, r7
 80188f4:	f7ff ff82 	bl	80187fc <_realloc_r>
 80188f8:	1e06      	subs	r6, r0, #0
 80188fa:	d1e0      	bne.n	80188be <__ssputs_r+0x76>
 80188fc:	0038      	movs	r0, r7
 80188fe:	6921      	ldr	r1, [r4, #16]
 8018900:	f7fd fe2a 	bl	8016558 <_free_r>
 8018904:	e7c7      	b.n	8018896 <__ssputs_r+0x4e>
 8018906:	46c0      	nop			; (mov r8, r8)
 8018908:	fffffb7f 	.word	0xfffffb7f

0801890c <_svfiprintf_r>:
 801890c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801890e:	b0a1      	sub	sp, #132	; 0x84
 8018910:	9003      	str	r0, [sp, #12]
 8018912:	001d      	movs	r5, r3
 8018914:	898b      	ldrh	r3, [r1, #12]
 8018916:	000f      	movs	r7, r1
 8018918:	0016      	movs	r6, r2
 801891a:	061b      	lsls	r3, r3, #24
 801891c:	d511      	bpl.n	8018942 <_svfiprintf_r+0x36>
 801891e:	690b      	ldr	r3, [r1, #16]
 8018920:	2b00      	cmp	r3, #0
 8018922:	d10e      	bne.n	8018942 <_svfiprintf_r+0x36>
 8018924:	2140      	movs	r1, #64	; 0x40
 8018926:	f7fd fe61 	bl	80165ec <_malloc_r>
 801892a:	6038      	str	r0, [r7, #0]
 801892c:	6138      	str	r0, [r7, #16]
 801892e:	2800      	cmp	r0, #0
 8018930:	d105      	bne.n	801893e <_svfiprintf_r+0x32>
 8018932:	230c      	movs	r3, #12
 8018934:	9a03      	ldr	r2, [sp, #12]
 8018936:	3801      	subs	r0, #1
 8018938:	6013      	str	r3, [r2, #0]
 801893a:	b021      	add	sp, #132	; 0x84
 801893c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801893e:	2340      	movs	r3, #64	; 0x40
 8018940:	617b      	str	r3, [r7, #20]
 8018942:	2300      	movs	r3, #0
 8018944:	ac08      	add	r4, sp, #32
 8018946:	6163      	str	r3, [r4, #20]
 8018948:	3320      	adds	r3, #32
 801894a:	7663      	strb	r3, [r4, #25]
 801894c:	3310      	adds	r3, #16
 801894e:	76a3      	strb	r3, [r4, #26]
 8018950:	9507      	str	r5, [sp, #28]
 8018952:	0035      	movs	r5, r6
 8018954:	782b      	ldrb	r3, [r5, #0]
 8018956:	2b00      	cmp	r3, #0
 8018958:	d001      	beq.n	801895e <_svfiprintf_r+0x52>
 801895a:	2b25      	cmp	r3, #37	; 0x25
 801895c:	d147      	bne.n	80189ee <_svfiprintf_r+0xe2>
 801895e:	1bab      	subs	r3, r5, r6
 8018960:	9305      	str	r3, [sp, #20]
 8018962:	42b5      	cmp	r5, r6
 8018964:	d00c      	beq.n	8018980 <_svfiprintf_r+0x74>
 8018966:	0032      	movs	r2, r6
 8018968:	0039      	movs	r1, r7
 801896a:	9803      	ldr	r0, [sp, #12]
 801896c:	f7ff ff6c 	bl	8018848 <__ssputs_r>
 8018970:	1c43      	adds	r3, r0, #1
 8018972:	d100      	bne.n	8018976 <_svfiprintf_r+0x6a>
 8018974:	e0ae      	b.n	8018ad4 <_svfiprintf_r+0x1c8>
 8018976:	6962      	ldr	r2, [r4, #20]
 8018978:	9b05      	ldr	r3, [sp, #20]
 801897a:	4694      	mov	ip, r2
 801897c:	4463      	add	r3, ip
 801897e:	6163      	str	r3, [r4, #20]
 8018980:	782b      	ldrb	r3, [r5, #0]
 8018982:	2b00      	cmp	r3, #0
 8018984:	d100      	bne.n	8018988 <_svfiprintf_r+0x7c>
 8018986:	e0a5      	b.n	8018ad4 <_svfiprintf_r+0x1c8>
 8018988:	2201      	movs	r2, #1
 801898a:	2300      	movs	r3, #0
 801898c:	4252      	negs	r2, r2
 801898e:	6062      	str	r2, [r4, #4]
 8018990:	a904      	add	r1, sp, #16
 8018992:	3254      	adds	r2, #84	; 0x54
 8018994:	1852      	adds	r2, r2, r1
 8018996:	1c6e      	adds	r6, r5, #1
 8018998:	6023      	str	r3, [r4, #0]
 801899a:	60e3      	str	r3, [r4, #12]
 801899c:	60a3      	str	r3, [r4, #8]
 801899e:	7013      	strb	r3, [r2, #0]
 80189a0:	65a3      	str	r3, [r4, #88]	; 0x58
 80189a2:	2205      	movs	r2, #5
 80189a4:	7831      	ldrb	r1, [r6, #0]
 80189a6:	4854      	ldr	r0, [pc, #336]	; (8018af8 <_svfiprintf_r+0x1ec>)
 80189a8:	f000 febc 	bl	8019724 <memchr>
 80189ac:	1c75      	adds	r5, r6, #1
 80189ae:	2800      	cmp	r0, #0
 80189b0:	d11f      	bne.n	80189f2 <_svfiprintf_r+0xe6>
 80189b2:	6822      	ldr	r2, [r4, #0]
 80189b4:	06d3      	lsls	r3, r2, #27
 80189b6:	d504      	bpl.n	80189c2 <_svfiprintf_r+0xb6>
 80189b8:	2353      	movs	r3, #83	; 0x53
 80189ba:	a904      	add	r1, sp, #16
 80189bc:	185b      	adds	r3, r3, r1
 80189be:	2120      	movs	r1, #32
 80189c0:	7019      	strb	r1, [r3, #0]
 80189c2:	0713      	lsls	r3, r2, #28
 80189c4:	d504      	bpl.n	80189d0 <_svfiprintf_r+0xc4>
 80189c6:	2353      	movs	r3, #83	; 0x53
 80189c8:	a904      	add	r1, sp, #16
 80189ca:	185b      	adds	r3, r3, r1
 80189cc:	212b      	movs	r1, #43	; 0x2b
 80189ce:	7019      	strb	r1, [r3, #0]
 80189d0:	7833      	ldrb	r3, [r6, #0]
 80189d2:	2b2a      	cmp	r3, #42	; 0x2a
 80189d4:	d016      	beq.n	8018a04 <_svfiprintf_r+0xf8>
 80189d6:	0035      	movs	r5, r6
 80189d8:	2100      	movs	r1, #0
 80189da:	200a      	movs	r0, #10
 80189dc:	68e3      	ldr	r3, [r4, #12]
 80189de:	782a      	ldrb	r2, [r5, #0]
 80189e0:	1c6e      	adds	r6, r5, #1
 80189e2:	3a30      	subs	r2, #48	; 0x30
 80189e4:	2a09      	cmp	r2, #9
 80189e6:	d94e      	bls.n	8018a86 <_svfiprintf_r+0x17a>
 80189e8:	2900      	cmp	r1, #0
 80189ea:	d111      	bne.n	8018a10 <_svfiprintf_r+0x104>
 80189ec:	e017      	b.n	8018a1e <_svfiprintf_r+0x112>
 80189ee:	3501      	adds	r5, #1
 80189f0:	e7b0      	b.n	8018954 <_svfiprintf_r+0x48>
 80189f2:	4b41      	ldr	r3, [pc, #260]	; (8018af8 <_svfiprintf_r+0x1ec>)
 80189f4:	6822      	ldr	r2, [r4, #0]
 80189f6:	1ac0      	subs	r0, r0, r3
 80189f8:	2301      	movs	r3, #1
 80189fa:	4083      	lsls	r3, r0
 80189fc:	4313      	orrs	r3, r2
 80189fe:	002e      	movs	r6, r5
 8018a00:	6023      	str	r3, [r4, #0]
 8018a02:	e7ce      	b.n	80189a2 <_svfiprintf_r+0x96>
 8018a04:	9b07      	ldr	r3, [sp, #28]
 8018a06:	1d19      	adds	r1, r3, #4
 8018a08:	681b      	ldr	r3, [r3, #0]
 8018a0a:	9107      	str	r1, [sp, #28]
 8018a0c:	2b00      	cmp	r3, #0
 8018a0e:	db01      	blt.n	8018a14 <_svfiprintf_r+0x108>
 8018a10:	930b      	str	r3, [sp, #44]	; 0x2c
 8018a12:	e004      	b.n	8018a1e <_svfiprintf_r+0x112>
 8018a14:	425b      	negs	r3, r3
 8018a16:	60e3      	str	r3, [r4, #12]
 8018a18:	2302      	movs	r3, #2
 8018a1a:	4313      	orrs	r3, r2
 8018a1c:	6023      	str	r3, [r4, #0]
 8018a1e:	782b      	ldrb	r3, [r5, #0]
 8018a20:	2b2e      	cmp	r3, #46	; 0x2e
 8018a22:	d10a      	bne.n	8018a3a <_svfiprintf_r+0x12e>
 8018a24:	786b      	ldrb	r3, [r5, #1]
 8018a26:	2b2a      	cmp	r3, #42	; 0x2a
 8018a28:	d135      	bne.n	8018a96 <_svfiprintf_r+0x18a>
 8018a2a:	9b07      	ldr	r3, [sp, #28]
 8018a2c:	3502      	adds	r5, #2
 8018a2e:	1d1a      	adds	r2, r3, #4
 8018a30:	681b      	ldr	r3, [r3, #0]
 8018a32:	9207      	str	r2, [sp, #28]
 8018a34:	2b00      	cmp	r3, #0
 8018a36:	db2b      	blt.n	8018a90 <_svfiprintf_r+0x184>
 8018a38:	9309      	str	r3, [sp, #36]	; 0x24
 8018a3a:	4e30      	ldr	r6, [pc, #192]	; (8018afc <_svfiprintf_r+0x1f0>)
 8018a3c:	2203      	movs	r2, #3
 8018a3e:	0030      	movs	r0, r6
 8018a40:	7829      	ldrb	r1, [r5, #0]
 8018a42:	f000 fe6f 	bl	8019724 <memchr>
 8018a46:	2800      	cmp	r0, #0
 8018a48:	d006      	beq.n	8018a58 <_svfiprintf_r+0x14c>
 8018a4a:	2340      	movs	r3, #64	; 0x40
 8018a4c:	1b80      	subs	r0, r0, r6
 8018a4e:	4083      	lsls	r3, r0
 8018a50:	6822      	ldr	r2, [r4, #0]
 8018a52:	3501      	adds	r5, #1
 8018a54:	4313      	orrs	r3, r2
 8018a56:	6023      	str	r3, [r4, #0]
 8018a58:	7829      	ldrb	r1, [r5, #0]
 8018a5a:	2206      	movs	r2, #6
 8018a5c:	4828      	ldr	r0, [pc, #160]	; (8018b00 <_svfiprintf_r+0x1f4>)
 8018a5e:	1c6e      	adds	r6, r5, #1
 8018a60:	7621      	strb	r1, [r4, #24]
 8018a62:	f000 fe5f 	bl	8019724 <memchr>
 8018a66:	2800      	cmp	r0, #0
 8018a68:	d03c      	beq.n	8018ae4 <_svfiprintf_r+0x1d8>
 8018a6a:	4b26      	ldr	r3, [pc, #152]	; (8018b04 <_svfiprintf_r+0x1f8>)
 8018a6c:	2b00      	cmp	r3, #0
 8018a6e:	d125      	bne.n	8018abc <_svfiprintf_r+0x1b0>
 8018a70:	2207      	movs	r2, #7
 8018a72:	9b07      	ldr	r3, [sp, #28]
 8018a74:	3307      	adds	r3, #7
 8018a76:	4393      	bics	r3, r2
 8018a78:	3308      	adds	r3, #8
 8018a7a:	9307      	str	r3, [sp, #28]
 8018a7c:	6963      	ldr	r3, [r4, #20]
 8018a7e:	9a04      	ldr	r2, [sp, #16]
 8018a80:	189b      	adds	r3, r3, r2
 8018a82:	6163      	str	r3, [r4, #20]
 8018a84:	e765      	b.n	8018952 <_svfiprintf_r+0x46>
 8018a86:	4343      	muls	r3, r0
 8018a88:	0035      	movs	r5, r6
 8018a8a:	2101      	movs	r1, #1
 8018a8c:	189b      	adds	r3, r3, r2
 8018a8e:	e7a6      	b.n	80189de <_svfiprintf_r+0xd2>
 8018a90:	2301      	movs	r3, #1
 8018a92:	425b      	negs	r3, r3
 8018a94:	e7d0      	b.n	8018a38 <_svfiprintf_r+0x12c>
 8018a96:	2300      	movs	r3, #0
 8018a98:	200a      	movs	r0, #10
 8018a9a:	001a      	movs	r2, r3
 8018a9c:	3501      	adds	r5, #1
 8018a9e:	6063      	str	r3, [r4, #4]
 8018aa0:	7829      	ldrb	r1, [r5, #0]
 8018aa2:	1c6e      	adds	r6, r5, #1
 8018aa4:	3930      	subs	r1, #48	; 0x30
 8018aa6:	2909      	cmp	r1, #9
 8018aa8:	d903      	bls.n	8018ab2 <_svfiprintf_r+0x1a6>
 8018aaa:	2b00      	cmp	r3, #0
 8018aac:	d0c5      	beq.n	8018a3a <_svfiprintf_r+0x12e>
 8018aae:	9209      	str	r2, [sp, #36]	; 0x24
 8018ab0:	e7c3      	b.n	8018a3a <_svfiprintf_r+0x12e>
 8018ab2:	4342      	muls	r2, r0
 8018ab4:	0035      	movs	r5, r6
 8018ab6:	2301      	movs	r3, #1
 8018ab8:	1852      	adds	r2, r2, r1
 8018aba:	e7f1      	b.n	8018aa0 <_svfiprintf_r+0x194>
 8018abc:	ab07      	add	r3, sp, #28
 8018abe:	9300      	str	r3, [sp, #0]
 8018ac0:	003a      	movs	r2, r7
 8018ac2:	0021      	movs	r1, r4
 8018ac4:	4b10      	ldr	r3, [pc, #64]	; (8018b08 <_svfiprintf_r+0x1fc>)
 8018ac6:	9803      	ldr	r0, [sp, #12]
 8018ac8:	e000      	b.n	8018acc <_svfiprintf_r+0x1c0>
 8018aca:	bf00      	nop
 8018acc:	9004      	str	r0, [sp, #16]
 8018ace:	9b04      	ldr	r3, [sp, #16]
 8018ad0:	3301      	adds	r3, #1
 8018ad2:	d1d3      	bne.n	8018a7c <_svfiprintf_r+0x170>
 8018ad4:	89bb      	ldrh	r3, [r7, #12]
 8018ad6:	980d      	ldr	r0, [sp, #52]	; 0x34
 8018ad8:	065b      	lsls	r3, r3, #25
 8018ada:	d400      	bmi.n	8018ade <_svfiprintf_r+0x1d2>
 8018adc:	e72d      	b.n	801893a <_svfiprintf_r+0x2e>
 8018ade:	2001      	movs	r0, #1
 8018ae0:	4240      	negs	r0, r0
 8018ae2:	e72a      	b.n	801893a <_svfiprintf_r+0x2e>
 8018ae4:	ab07      	add	r3, sp, #28
 8018ae6:	9300      	str	r3, [sp, #0]
 8018ae8:	003a      	movs	r2, r7
 8018aea:	0021      	movs	r1, r4
 8018aec:	4b06      	ldr	r3, [pc, #24]	; (8018b08 <_svfiprintf_r+0x1fc>)
 8018aee:	9803      	ldr	r0, [sp, #12]
 8018af0:	f000 f9de 	bl	8018eb0 <_printf_i>
 8018af4:	e7ea      	b.n	8018acc <_svfiprintf_r+0x1c0>
 8018af6:	46c0      	nop			; (mov r8, r8)
 8018af8:	0801d13c 	.word	0x0801d13c
 8018afc:	0801d142 	.word	0x0801d142
 8018b00:	0801d146 	.word	0x0801d146
 8018b04:	00000000 	.word	0x00000000
 8018b08:	08018849 	.word	0x08018849

08018b0c <__sfputc_r>:
 8018b0c:	6893      	ldr	r3, [r2, #8]
 8018b0e:	b510      	push	{r4, lr}
 8018b10:	3b01      	subs	r3, #1
 8018b12:	6093      	str	r3, [r2, #8]
 8018b14:	2b00      	cmp	r3, #0
 8018b16:	da04      	bge.n	8018b22 <__sfputc_r+0x16>
 8018b18:	6994      	ldr	r4, [r2, #24]
 8018b1a:	42a3      	cmp	r3, r4
 8018b1c:	db07      	blt.n	8018b2e <__sfputc_r+0x22>
 8018b1e:	290a      	cmp	r1, #10
 8018b20:	d005      	beq.n	8018b2e <__sfputc_r+0x22>
 8018b22:	6813      	ldr	r3, [r2, #0]
 8018b24:	1c58      	adds	r0, r3, #1
 8018b26:	6010      	str	r0, [r2, #0]
 8018b28:	7019      	strb	r1, [r3, #0]
 8018b2a:	0008      	movs	r0, r1
 8018b2c:	bd10      	pop	{r4, pc}
 8018b2e:	f000 fad7 	bl	80190e0 <__swbuf_r>
 8018b32:	0001      	movs	r1, r0
 8018b34:	e7f9      	b.n	8018b2a <__sfputc_r+0x1e>

08018b36 <__sfputs_r>:
 8018b36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018b38:	0006      	movs	r6, r0
 8018b3a:	000f      	movs	r7, r1
 8018b3c:	0014      	movs	r4, r2
 8018b3e:	18d5      	adds	r5, r2, r3
 8018b40:	42ac      	cmp	r4, r5
 8018b42:	d101      	bne.n	8018b48 <__sfputs_r+0x12>
 8018b44:	2000      	movs	r0, #0
 8018b46:	e007      	b.n	8018b58 <__sfputs_r+0x22>
 8018b48:	7821      	ldrb	r1, [r4, #0]
 8018b4a:	003a      	movs	r2, r7
 8018b4c:	0030      	movs	r0, r6
 8018b4e:	f7ff ffdd 	bl	8018b0c <__sfputc_r>
 8018b52:	3401      	adds	r4, #1
 8018b54:	1c43      	adds	r3, r0, #1
 8018b56:	d1f3      	bne.n	8018b40 <__sfputs_r+0xa>
 8018b58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08018b5c <_vfiprintf_r>:
 8018b5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018b5e:	b0a1      	sub	sp, #132	; 0x84
 8018b60:	0006      	movs	r6, r0
 8018b62:	000c      	movs	r4, r1
 8018b64:	001f      	movs	r7, r3
 8018b66:	9203      	str	r2, [sp, #12]
 8018b68:	2800      	cmp	r0, #0
 8018b6a:	d004      	beq.n	8018b76 <_vfiprintf_r+0x1a>
 8018b6c:	6983      	ldr	r3, [r0, #24]
 8018b6e:	2b00      	cmp	r3, #0
 8018b70:	d101      	bne.n	8018b76 <_vfiprintf_r+0x1a>
 8018b72:	f000 fcc7 	bl	8019504 <__sinit>
 8018b76:	4b8e      	ldr	r3, [pc, #568]	; (8018db0 <_vfiprintf_r+0x254>)
 8018b78:	429c      	cmp	r4, r3
 8018b7a:	d11c      	bne.n	8018bb6 <_vfiprintf_r+0x5a>
 8018b7c:	6874      	ldr	r4, [r6, #4]
 8018b7e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8018b80:	07db      	lsls	r3, r3, #31
 8018b82:	d405      	bmi.n	8018b90 <_vfiprintf_r+0x34>
 8018b84:	89a3      	ldrh	r3, [r4, #12]
 8018b86:	059b      	lsls	r3, r3, #22
 8018b88:	d402      	bmi.n	8018b90 <_vfiprintf_r+0x34>
 8018b8a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8018b8c:	f000 fd5b 	bl	8019646 <__retarget_lock_acquire_recursive>
 8018b90:	89a3      	ldrh	r3, [r4, #12]
 8018b92:	071b      	lsls	r3, r3, #28
 8018b94:	d502      	bpl.n	8018b9c <_vfiprintf_r+0x40>
 8018b96:	6923      	ldr	r3, [r4, #16]
 8018b98:	2b00      	cmp	r3, #0
 8018b9a:	d11d      	bne.n	8018bd8 <_vfiprintf_r+0x7c>
 8018b9c:	0021      	movs	r1, r4
 8018b9e:	0030      	movs	r0, r6
 8018ba0:	f000 fb02 	bl	80191a8 <__swsetup_r>
 8018ba4:	2800      	cmp	r0, #0
 8018ba6:	d017      	beq.n	8018bd8 <_vfiprintf_r+0x7c>
 8018ba8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8018baa:	07db      	lsls	r3, r3, #31
 8018bac:	d50d      	bpl.n	8018bca <_vfiprintf_r+0x6e>
 8018bae:	2001      	movs	r0, #1
 8018bb0:	4240      	negs	r0, r0
 8018bb2:	b021      	add	sp, #132	; 0x84
 8018bb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018bb6:	4b7f      	ldr	r3, [pc, #508]	; (8018db4 <_vfiprintf_r+0x258>)
 8018bb8:	429c      	cmp	r4, r3
 8018bba:	d101      	bne.n	8018bc0 <_vfiprintf_r+0x64>
 8018bbc:	68b4      	ldr	r4, [r6, #8]
 8018bbe:	e7de      	b.n	8018b7e <_vfiprintf_r+0x22>
 8018bc0:	4b7d      	ldr	r3, [pc, #500]	; (8018db8 <_vfiprintf_r+0x25c>)
 8018bc2:	429c      	cmp	r4, r3
 8018bc4:	d1db      	bne.n	8018b7e <_vfiprintf_r+0x22>
 8018bc6:	68f4      	ldr	r4, [r6, #12]
 8018bc8:	e7d9      	b.n	8018b7e <_vfiprintf_r+0x22>
 8018bca:	89a3      	ldrh	r3, [r4, #12]
 8018bcc:	059b      	lsls	r3, r3, #22
 8018bce:	d4ee      	bmi.n	8018bae <_vfiprintf_r+0x52>
 8018bd0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8018bd2:	f000 fd39 	bl	8019648 <__retarget_lock_release_recursive>
 8018bd6:	e7ea      	b.n	8018bae <_vfiprintf_r+0x52>
 8018bd8:	2300      	movs	r3, #0
 8018bda:	ad08      	add	r5, sp, #32
 8018bdc:	616b      	str	r3, [r5, #20]
 8018bde:	3320      	adds	r3, #32
 8018be0:	766b      	strb	r3, [r5, #25]
 8018be2:	3310      	adds	r3, #16
 8018be4:	76ab      	strb	r3, [r5, #26]
 8018be6:	9707      	str	r7, [sp, #28]
 8018be8:	9f03      	ldr	r7, [sp, #12]
 8018bea:	783b      	ldrb	r3, [r7, #0]
 8018bec:	2b00      	cmp	r3, #0
 8018bee:	d001      	beq.n	8018bf4 <_vfiprintf_r+0x98>
 8018bf0:	2b25      	cmp	r3, #37	; 0x25
 8018bf2:	d14e      	bne.n	8018c92 <_vfiprintf_r+0x136>
 8018bf4:	9b03      	ldr	r3, [sp, #12]
 8018bf6:	1afb      	subs	r3, r7, r3
 8018bf8:	9305      	str	r3, [sp, #20]
 8018bfa:	9b03      	ldr	r3, [sp, #12]
 8018bfc:	429f      	cmp	r7, r3
 8018bfe:	d00d      	beq.n	8018c1c <_vfiprintf_r+0xc0>
 8018c00:	9b05      	ldr	r3, [sp, #20]
 8018c02:	0021      	movs	r1, r4
 8018c04:	0030      	movs	r0, r6
 8018c06:	9a03      	ldr	r2, [sp, #12]
 8018c08:	f7ff ff95 	bl	8018b36 <__sfputs_r>
 8018c0c:	1c43      	adds	r3, r0, #1
 8018c0e:	d100      	bne.n	8018c12 <_vfiprintf_r+0xb6>
 8018c10:	e0b5      	b.n	8018d7e <_vfiprintf_r+0x222>
 8018c12:	696a      	ldr	r2, [r5, #20]
 8018c14:	9b05      	ldr	r3, [sp, #20]
 8018c16:	4694      	mov	ip, r2
 8018c18:	4463      	add	r3, ip
 8018c1a:	616b      	str	r3, [r5, #20]
 8018c1c:	783b      	ldrb	r3, [r7, #0]
 8018c1e:	2b00      	cmp	r3, #0
 8018c20:	d100      	bne.n	8018c24 <_vfiprintf_r+0xc8>
 8018c22:	e0ac      	b.n	8018d7e <_vfiprintf_r+0x222>
 8018c24:	2201      	movs	r2, #1
 8018c26:	1c7b      	adds	r3, r7, #1
 8018c28:	9303      	str	r3, [sp, #12]
 8018c2a:	2300      	movs	r3, #0
 8018c2c:	4252      	negs	r2, r2
 8018c2e:	606a      	str	r2, [r5, #4]
 8018c30:	a904      	add	r1, sp, #16
 8018c32:	3254      	adds	r2, #84	; 0x54
 8018c34:	1852      	adds	r2, r2, r1
 8018c36:	602b      	str	r3, [r5, #0]
 8018c38:	60eb      	str	r3, [r5, #12]
 8018c3a:	60ab      	str	r3, [r5, #8]
 8018c3c:	7013      	strb	r3, [r2, #0]
 8018c3e:	65ab      	str	r3, [r5, #88]	; 0x58
 8018c40:	9b03      	ldr	r3, [sp, #12]
 8018c42:	2205      	movs	r2, #5
 8018c44:	7819      	ldrb	r1, [r3, #0]
 8018c46:	485d      	ldr	r0, [pc, #372]	; (8018dbc <_vfiprintf_r+0x260>)
 8018c48:	f000 fd6c 	bl	8019724 <memchr>
 8018c4c:	9b03      	ldr	r3, [sp, #12]
 8018c4e:	1c5f      	adds	r7, r3, #1
 8018c50:	2800      	cmp	r0, #0
 8018c52:	d120      	bne.n	8018c96 <_vfiprintf_r+0x13a>
 8018c54:	682a      	ldr	r2, [r5, #0]
 8018c56:	06d3      	lsls	r3, r2, #27
 8018c58:	d504      	bpl.n	8018c64 <_vfiprintf_r+0x108>
 8018c5a:	2353      	movs	r3, #83	; 0x53
 8018c5c:	a904      	add	r1, sp, #16
 8018c5e:	185b      	adds	r3, r3, r1
 8018c60:	2120      	movs	r1, #32
 8018c62:	7019      	strb	r1, [r3, #0]
 8018c64:	0713      	lsls	r3, r2, #28
 8018c66:	d504      	bpl.n	8018c72 <_vfiprintf_r+0x116>
 8018c68:	2353      	movs	r3, #83	; 0x53
 8018c6a:	a904      	add	r1, sp, #16
 8018c6c:	185b      	adds	r3, r3, r1
 8018c6e:	212b      	movs	r1, #43	; 0x2b
 8018c70:	7019      	strb	r1, [r3, #0]
 8018c72:	9b03      	ldr	r3, [sp, #12]
 8018c74:	781b      	ldrb	r3, [r3, #0]
 8018c76:	2b2a      	cmp	r3, #42	; 0x2a
 8018c78:	d016      	beq.n	8018ca8 <_vfiprintf_r+0x14c>
 8018c7a:	2100      	movs	r1, #0
 8018c7c:	68eb      	ldr	r3, [r5, #12]
 8018c7e:	9f03      	ldr	r7, [sp, #12]
 8018c80:	783a      	ldrb	r2, [r7, #0]
 8018c82:	1c78      	adds	r0, r7, #1
 8018c84:	3a30      	subs	r2, #48	; 0x30
 8018c86:	4684      	mov	ip, r0
 8018c88:	2a09      	cmp	r2, #9
 8018c8a:	d94f      	bls.n	8018d2c <_vfiprintf_r+0x1d0>
 8018c8c:	2900      	cmp	r1, #0
 8018c8e:	d111      	bne.n	8018cb4 <_vfiprintf_r+0x158>
 8018c90:	e017      	b.n	8018cc2 <_vfiprintf_r+0x166>
 8018c92:	3701      	adds	r7, #1
 8018c94:	e7a9      	b.n	8018bea <_vfiprintf_r+0x8e>
 8018c96:	4b49      	ldr	r3, [pc, #292]	; (8018dbc <_vfiprintf_r+0x260>)
 8018c98:	682a      	ldr	r2, [r5, #0]
 8018c9a:	1ac0      	subs	r0, r0, r3
 8018c9c:	2301      	movs	r3, #1
 8018c9e:	4083      	lsls	r3, r0
 8018ca0:	4313      	orrs	r3, r2
 8018ca2:	602b      	str	r3, [r5, #0]
 8018ca4:	9703      	str	r7, [sp, #12]
 8018ca6:	e7cb      	b.n	8018c40 <_vfiprintf_r+0xe4>
 8018ca8:	9b07      	ldr	r3, [sp, #28]
 8018caa:	1d19      	adds	r1, r3, #4
 8018cac:	681b      	ldr	r3, [r3, #0]
 8018cae:	9107      	str	r1, [sp, #28]
 8018cb0:	2b00      	cmp	r3, #0
 8018cb2:	db01      	blt.n	8018cb8 <_vfiprintf_r+0x15c>
 8018cb4:	930b      	str	r3, [sp, #44]	; 0x2c
 8018cb6:	e004      	b.n	8018cc2 <_vfiprintf_r+0x166>
 8018cb8:	425b      	negs	r3, r3
 8018cba:	60eb      	str	r3, [r5, #12]
 8018cbc:	2302      	movs	r3, #2
 8018cbe:	4313      	orrs	r3, r2
 8018cc0:	602b      	str	r3, [r5, #0]
 8018cc2:	783b      	ldrb	r3, [r7, #0]
 8018cc4:	2b2e      	cmp	r3, #46	; 0x2e
 8018cc6:	d10a      	bne.n	8018cde <_vfiprintf_r+0x182>
 8018cc8:	787b      	ldrb	r3, [r7, #1]
 8018cca:	2b2a      	cmp	r3, #42	; 0x2a
 8018ccc:	d137      	bne.n	8018d3e <_vfiprintf_r+0x1e2>
 8018cce:	9b07      	ldr	r3, [sp, #28]
 8018cd0:	3702      	adds	r7, #2
 8018cd2:	1d1a      	adds	r2, r3, #4
 8018cd4:	681b      	ldr	r3, [r3, #0]
 8018cd6:	9207      	str	r2, [sp, #28]
 8018cd8:	2b00      	cmp	r3, #0
 8018cda:	db2d      	blt.n	8018d38 <_vfiprintf_r+0x1dc>
 8018cdc:	9309      	str	r3, [sp, #36]	; 0x24
 8018cde:	2203      	movs	r2, #3
 8018ce0:	7839      	ldrb	r1, [r7, #0]
 8018ce2:	4837      	ldr	r0, [pc, #220]	; (8018dc0 <_vfiprintf_r+0x264>)
 8018ce4:	f000 fd1e 	bl	8019724 <memchr>
 8018ce8:	2800      	cmp	r0, #0
 8018cea:	d007      	beq.n	8018cfc <_vfiprintf_r+0x1a0>
 8018cec:	4b34      	ldr	r3, [pc, #208]	; (8018dc0 <_vfiprintf_r+0x264>)
 8018cee:	682a      	ldr	r2, [r5, #0]
 8018cf0:	1ac0      	subs	r0, r0, r3
 8018cf2:	2340      	movs	r3, #64	; 0x40
 8018cf4:	4083      	lsls	r3, r0
 8018cf6:	4313      	orrs	r3, r2
 8018cf8:	3701      	adds	r7, #1
 8018cfa:	602b      	str	r3, [r5, #0]
 8018cfc:	7839      	ldrb	r1, [r7, #0]
 8018cfe:	1c7b      	adds	r3, r7, #1
 8018d00:	2206      	movs	r2, #6
 8018d02:	4830      	ldr	r0, [pc, #192]	; (8018dc4 <_vfiprintf_r+0x268>)
 8018d04:	9303      	str	r3, [sp, #12]
 8018d06:	7629      	strb	r1, [r5, #24]
 8018d08:	f000 fd0c 	bl	8019724 <memchr>
 8018d0c:	2800      	cmp	r0, #0
 8018d0e:	d045      	beq.n	8018d9c <_vfiprintf_r+0x240>
 8018d10:	4b2d      	ldr	r3, [pc, #180]	; (8018dc8 <_vfiprintf_r+0x26c>)
 8018d12:	2b00      	cmp	r3, #0
 8018d14:	d127      	bne.n	8018d66 <_vfiprintf_r+0x20a>
 8018d16:	2207      	movs	r2, #7
 8018d18:	9b07      	ldr	r3, [sp, #28]
 8018d1a:	3307      	adds	r3, #7
 8018d1c:	4393      	bics	r3, r2
 8018d1e:	3308      	adds	r3, #8
 8018d20:	9307      	str	r3, [sp, #28]
 8018d22:	696b      	ldr	r3, [r5, #20]
 8018d24:	9a04      	ldr	r2, [sp, #16]
 8018d26:	189b      	adds	r3, r3, r2
 8018d28:	616b      	str	r3, [r5, #20]
 8018d2a:	e75d      	b.n	8018be8 <_vfiprintf_r+0x8c>
 8018d2c:	210a      	movs	r1, #10
 8018d2e:	434b      	muls	r3, r1
 8018d30:	4667      	mov	r7, ip
 8018d32:	189b      	adds	r3, r3, r2
 8018d34:	3909      	subs	r1, #9
 8018d36:	e7a3      	b.n	8018c80 <_vfiprintf_r+0x124>
 8018d38:	2301      	movs	r3, #1
 8018d3a:	425b      	negs	r3, r3
 8018d3c:	e7ce      	b.n	8018cdc <_vfiprintf_r+0x180>
 8018d3e:	2300      	movs	r3, #0
 8018d40:	001a      	movs	r2, r3
 8018d42:	3701      	adds	r7, #1
 8018d44:	606b      	str	r3, [r5, #4]
 8018d46:	7839      	ldrb	r1, [r7, #0]
 8018d48:	1c78      	adds	r0, r7, #1
 8018d4a:	3930      	subs	r1, #48	; 0x30
 8018d4c:	4684      	mov	ip, r0
 8018d4e:	2909      	cmp	r1, #9
 8018d50:	d903      	bls.n	8018d5a <_vfiprintf_r+0x1fe>
 8018d52:	2b00      	cmp	r3, #0
 8018d54:	d0c3      	beq.n	8018cde <_vfiprintf_r+0x182>
 8018d56:	9209      	str	r2, [sp, #36]	; 0x24
 8018d58:	e7c1      	b.n	8018cde <_vfiprintf_r+0x182>
 8018d5a:	230a      	movs	r3, #10
 8018d5c:	435a      	muls	r2, r3
 8018d5e:	4667      	mov	r7, ip
 8018d60:	1852      	adds	r2, r2, r1
 8018d62:	3b09      	subs	r3, #9
 8018d64:	e7ef      	b.n	8018d46 <_vfiprintf_r+0x1ea>
 8018d66:	ab07      	add	r3, sp, #28
 8018d68:	9300      	str	r3, [sp, #0]
 8018d6a:	0022      	movs	r2, r4
 8018d6c:	0029      	movs	r1, r5
 8018d6e:	0030      	movs	r0, r6
 8018d70:	4b16      	ldr	r3, [pc, #88]	; (8018dcc <_vfiprintf_r+0x270>)
 8018d72:	e000      	b.n	8018d76 <_vfiprintf_r+0x21a>
 8018d74:	bf00      	nop
 8018d76:	9004      	str	r0, [sp, #16]
 8018d78:	9b04      	ldr	r3, [sp, #16]
 8018d7a:	3301      	adds	r3, #1
 8018d7c:	d1d1      	bne.n	8018d22 <_vfiprintf_r+0x1c6>
 8018d7e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8018d80:	07db      	lsls	r3, r3, #31
 8018d82:	d405      	bmi.n	8018d90 <_vfiprintf_r+0x234>
 8018d84:	89a3      	ldrh	r3, [r4, #12]
 8018d86:	059b      	lsls	r3, r3, #22
 8018d88:	d402      	bmi.n	8018d90 <_vfiprintf_r+0x234>
 8018d8a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8018d8c:	f000 fc5c 	bl	8019648 <__retarget_lock_release_recursive>
 8018d90:	89a3      	ldrh	r3, [r4, #12]
 8018d92:	065b      	lsls	r3, r3, #25
 8018d94:	d500      	bpl.n	8018d98 <_vfiprintf_r+0x23c>
 8018d96:	e70a      	b.n	8018bae <_vfiprintf_r+0x52>
 8018d98:	980d      	ldr	r0, [sp, #52]	; 0x34
 8018d9a:	e70a      	b.n	8018bb2 <_vfiprintf_r+0x56>
 8018d9c:	ab07      	add	r3, sp, #28
 8018d9e:	9300      	str	r3, [sp, #0]
 8018da0:	0022      	movs	r2, r4
 8018da2:	0029      	movs	r1, r5
 8018da4:	0030      	movs	r0, r6
 8018da6:	4b09      	ldr	r3, [pc, #36]	; (8018dcc <_vfiprintf_r+0x270>)
 8018da8:	f000 f882 	bl	8018eb0 <_printf_i>
 8018dac:	e7e3      	b.n	8018d76 <_vfiprintf_r+0x21a>
 8018dae:	46c0      	nop			; (mov r8, r8)
 8018db0:	0801d190 	.word	0x0801d190
 8018db4:	0801d1b0 	.word	0x0801d1b0
 8018db8:	0801d170 	.word	0x0801d170
 8018dbc:	0801d13c 	.word	0x0801d13c
 8018dc0:	0801d142 	.word	0x0801d142
 8018dc4:	0801d146 	.word	0x0801d146
 8018dc8:	00000000 	.word	0x00000000
 8018dcc:	08018b37 	.word	0x08018b37

08018dd0 <_printf_common>:
 8018dd0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8018dd2:	0015      	movs	r5, r2
 8018dd4:	9301      	str	r3, [sp, #4]
 8018dd6:	688a      	ldr	r2, [r1, #8]
 8018dd8:	690b      	ldr	r3, [r1, #16]
 8018dda:	000c      	movs	r4, r1
 8018ddc:	9000      	str	r0, [sp, #0]
 8018dde:	4293      	cmp	r3, r2
 8018de0:	da00      	bge.n	8018de4 <_printf_common+0x14>
 8018de2:	0013      	movs	r3, r2
 8018de4:	0022      	movs	r2, r4
 8018de6:	602b      	str	r3, [r5, #0]
 8018de8:	3243      	adds	r2, #67	; 0x43
 8018dea:	7812      	ldrb	r2, [r2, #0]
 8018dec:	2a00      	cmp	r2, #0
 8018dee:	d001      	beq.n	8018df4 <_printf_common+0x24>
 8018df0:	3301      	adds	r3, #1
 8018df2:	602b      	str	r3, [r5, #0]
 8018df4:	6823      	ldr	r3, [r4, #0]
 8018df6:	069b      	lsls	r3, r3, #26
 8018df8:	d502      	bpl.n	8018e00 <_printf_common+0x30>
 8018dfa:	682b      	ldr	r3, [r5, #0]
 8018dfc:	3302      	adds	r3, #2
 8018dfe:	602b      	str	r3, [r5, #0]
 8018e00:	6822      	ldr	r2, [r4, #0]
 8018e02:	2306      	movs	r3, #6
 8018e04:	0017      	movs	r7, r2
 8018e06:	401f      	ands	r7, r3
 8018e08:	421a      	tst	r2, r3
 8018e0a:	d027      	beq.n	8018e5c <_printf_common+0x8c>
 8018e0c:	0023      	movs	r3, r4
 8018e0e:	3343      	adds	r3, #67	; 0x43
 8018e10:	781b      	ldrb	r3, [r3, #0]
 8018e12:	1e5a      	subs	r2, r3, #1
 8018e14:	4193      	sbcs	r3, r2
 8018e16:	6822      	ldr	r2, [r4, #0]
 8018e18:	0692      	lsls	r2, r2, #26
 8018e1a:	d430      	bmi.n	8018e7e <_printf_common+0xae>
 8018e1c:	0022      	movs	r2, r4
 8018e1e:	9901      	ldr	r1, [sp, #4]
 8018e20:	9800      	ldr	r0, [sp, #0]
 8018e22:	9e08      	ldr	r6, [sp, #32]
 8018e24:	3243      	adds	r2, #67	; 0x43
 8018e26:	47b0      	blx	r6
 8018e28:	1c43      	adds	r3, r0, #1
 8018e2a:	d025      	beq.n	8018e78 <_printf_common+0xa8>
 8018e2c:	2306      	movs	r3, #6
 8018e2e:	6820      	ldr	r0, [r4, #0]
 8018e30:	682a      	ldr	r2, [r5, #0]
 8018e32:	68e1      	ldr	r1, [r4, #12]
 8018e34:	2500      	movs	r5, #0
 8018e36:	4003      	ands	r3, r0
 8018e38:	2b04      	cmp	r3, #4
 8018e3a:	d103      	bne.n	8018e44 <_printf_common+0x74>
 8018e3c:	1a8d      	subs	r5, r1, r2
 8018e3e:	43eb      	mvns	r3, r5
 8018e40:	17db      	asrs	r3, r3, #31
 8018e42:	401d      	ands	r5, r3
 8018e44:	68a3      	ldr	r3, [r4, #8]
 8018e46:	6922      	ldr	r2, [r4, #16]
 8018e48:	4293      	cmp	r3, r2
 8018e4a:	dd01      	ble.n	8018e50 <_printf_common+0x80>
 8018e4c:	1a9b      	subs	r3, r3, r2
 8018e4e:	18ed      	adds	r5, r5, r3
 8018e50:	2700      	movs	r7, #0
 8018e52:	42bd      	cmp	r5, r7
 8018e54:	d120      	bne.n	8018e98 <_printf_common+0xc8>
 8018e56:	2000      	movs	r0, #0
 8018e58:	e010      	b.n	8018e7c <_printf_common+0xac>
 8018e5a:	3701      	adds	r7, #1
 8018e5c:	68e3      	ldr	r3, [r4, #12]
 8018e5e:	682a      	ldr	r2, [r5, #0]
 8018e60:	1a9b      	subs	r3, r3, r2
 8018e62:	42bb      	cmp	r3, r7
 8018e64:	ddd2      	ble.n	8018e0c <_printf_common+0x3c>
 8018e66:	0022      	movs	r2, r4
 8018e68:	2301      	movs	r3, #1
 8018e6a:	9901      	ldr	r1, [sp, #4]
 8018e6c:	9800      	ldr	r0, [sp, #0]
 8018e6e:	9e08      	ldr	r6, [sp, #32]
 8018e70:	3219      	adds	r2, #25
 8018e72:	47b0      	blx	r6
 8018e74:	1c43      	adds	r3, r0, #1
 8018e76:	d1f0      	bne.n	8018e5a <_printf_common+0x8a>
 8018e78:	2001      	movs	r0, #1
 8018e7a:	4240      	negs	r0, r0
 8018e7c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8018e7e:	2030      	movs	r0, #48	; 0x30
 8018e80:	18e1      	adds	r1, r4, r3
 8018e82:	3143      	adds	r1, #67	; 0x43
 8018e84:	7008      	strb	r0, [r1, #0]
 8018e86:	0021      	movs	r1, r4
 8018e88:	1c5a      	adds	r2, r3, #1
 8018e8a:	3145      	adds	r1, #69	; 0x45
 8018e8c:	7809      	ldrb	r1, [r1, #0]
 8018e8e:	18a2      	adds	r2, r4, r2
 8018e90:	3243      	adds	r2, #67	; 0x43
 8018e92:	3302      	adds	r3, #2
 8018e94:	7011      	strb	r1, [r2, #0]
 8018e96:	e7c1      	b.n	8018e1c <_printf_common+0x4c>
 8018e98:	0022      	movs	r2, r4
 8018e9a:	2301      	movs	r3, #1
 8018e9c:	9901      	ldr	r1, [sp, #4]
 8018e9e:	9800      	ldr	r0, [sp, #0]
 8018ea0:	9e08      	ldr	r6, [sp, #32]
 8018ea2:	321a      	adds	r2, #26
 8018ea4:	47b0      	blx	r6
 8018ea6:	1c43      	adds	r3, r0, #1
 8018ea8:	d0e6      	beq.n	8018e78 <_printf_common+0xa8>
 8018eaa:	3701      	adds	r7, #1
 8018eac:	e7d1      	b.n	8018e52 <_printf_common+0x82>
	...

08018eb0 <_printf_i>:
 8018eb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018eb2:	b08b      	sub	sp, #44	; 0x2c
 8018eb4:	9206      	str	r2, [sp, #24]
 8018eb6:	000a      	movs	r2, r1
 8018eb8:	3243      	adds	r2, #67	; 0x43
 8018eba:	9307      	str	r3, [sp, #28]
 8018ebc:	9005      	str	r0, [sp, #20]
 8018ebe:	9204      	str	r2, [sp, #16]
 8018ec0:	7e0a      	ldrb	r2, [r1, #24]
 8018ec2:	000c      	movs	r4, r1
 8018ec4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8018ec6:	2a78      	cmp	r2, #120	; 0x78
 8018ec8:	d806      	bhi.n	8018ed8 <_printf_i+0x28>
 8018eca:	2a62      	cmp	r2, #98	; 0x62
 8018ecc:	d808      	bhi.n	8018ee0 <_printf_i+0x30>
 8018ece:	2a00      	cmp	r2, #0
 8018ed0:	d100      	bne.n	8018ed4 <_printf_i+0x24>
 8018ed2:	e0c0      	b.n	8019056 <_printf_i+0x1a6>
 8018ed4:	2a58      	cmp	r2, #88	; 0x58
 8018ed6:	d052      	beq.n	8018f7e <_printf_i+0xce>
 8018ed8:	0026      	movs	r6, r4
 8018eda:	3642      	adds	r6, #66	; 0x42
 8018edc:	7032      	strb	r2, [r6, #0]
 8018ede:	e022      	b.n	8018f26 <_printf_i+0x76>
 8018ee0:	0010      	movs	r0, r2
 8018ee2:	3863      	subs	r0, #99	; 0x63
 8018ee4:	2815      	cmp	r0, #21
 8018ee6:	d8f7      	bhi.n	8018ed8 <_printf_i+0x28>
 8018ee8:	f7e7 f928 	bl	800013c <__gnu_thumb1_case_shi>
 8018eec:	001f0016 	.word	0x001f0016
 8018ef0:	fff6fff6 	.word	0xfff6fff6
 8018ef4:	fff6fff6 	.word	0xfff6fff6
 8018ef8:	fff6001f 	.word	0xfff6001f
 8018efc:	fff6fff6 	.word	0xfff6fff6
 8018f00:	00a8fff6 	.word	0x00a8fff6
 8018f04:	009a0036 	.word	0x009a0036
 8018f08:	fff6fff6 	.word	0xfff6fff6
 8018f0c:	fff600b9 	.word	0xfff600b9
 8018f10:	fff60036 	.word	0xfff60036
 8018f14:	009efff6 	.word	0x009efff6
 8018f18:	0026      	movs	r6, r4
 8018f1a:	681a      	ldr	r2, [r3, #0]
 8018f1c:	3642      	adds	r6, #66	; 0x42
 8018f1e:	1d11      	adds	r1, r2, #4
 8018f20:	6019      	str	r1, [r3, #0]
 8018f22:	6813      	ldr	r3, [r2, #0]
 8018f24:	7033      	strb	r3, [r6, #0]
 8018f26:	2301      	movs	r3, #1
 8018f28:	e0a7      	b.n	801907a <_printf_i+0x1ca>
 8018f2a:	6808      	ldr	r0, [r1, #0]
 8018f2c:	6819      	ldr	r1, [r3, #0]
 8018f2e:	1d0a      	adds	r2, r1, #4
 8018f30:	0605      	lsls	r5, r0, #24
 8018f32:	d50b      	bpl.n	8018f4c <_printf_i+0x9c>
 8018f34:	680d      	ldr	r5, [r1, #0]
 8018f36:	601a      	str	r2, [r3, #0]
 8018f38:	2d00      	cmp	r5, #0
 8018f3a:	da03      	bge.n	8018f44 <_printf_i+0x94>
 8018f3c:	232d      	movs	r3, #45	; 0x2d
 8018f3e:	9a04      	ldr	r2, [sp, #16]
 8018f40:	426d      	negs	r5, r5
 8018f42:	7013      	strb	r3, [r2, #0]
 8018f44:	4b61      	ldr	r3, [pc, #388]	; (80190cc <_printf_i+0x21c>)
 8018f46:	270a      	movs	r7, #10
 8018f48:	9303      	str	r3, [sp, #12]
 8018f4a:	e032      	b.n	8018fb2 <_printf_i+0x102>
 8018f4c:	680d      	ldr	r5, [r1, #0]
 8018f4e:	601a      	str	r2, [r3, #0]
 8018f50:	0641      	lsls	r1, r0, #25
 8018f52:	d5f1      	bpl.n	8018f38 <_printf_i+0x88>
 8018f54:	b22d      	sxth	r5, r5
 8018f56:	e7ef      	b.n	8018f38 <_printf_i+0x88>
 8018f58:	680d      	ldr	r5, [r1, #0]
 8018f5a:	6819      	ldr	r1, [r3, #0]
 8018f5c:	1d08      	adds	r0, r1, #4
 8018f5e:	6018      	str	r0, [r3, #0]
 8018f60:	062e      	lsls	r6, r5, #24
 8018f62:	d501      	bpl.n	8018f68 <_printf_i+0xb8>
 8018f64:	680d      	ldr	r5, [r1, #0]
 8018f66:	e003      	b.n	8018f70 <_printf_i+0xc0>
 8018f68:	066d      	lsls	r5, r5, #25
 8018f6a:	d5fb      	bpl.n	8018f64 <_printf_i+0xb4>
 8018f6c:	680d      	ldr	r5, [r1, #0]
 8018f6e:	b2ad      	uxth	r5, r5
 8018f70:	4b56      	ldr	r3, [pc, #344]	; (80190cc <_printf_i+0x21c>)
 8018f72:	270a      	movs	r7, #10
 8018f74:	9303      	str	r3, [sp, #12]
 8018f76:	2a6f      	cmp	r2, #111	; 0x6f
 8018f78:	d117      	bne.n	8018faa <_printf_i+0xfa>
 8018f7a:	2708      	movs	r7, #8
 8018f7c:	e015      	b.n	8018faa <_printf_i+0xfa>
 8018f7e:	3145      	adds	r1, #69	; 0x45
 8018f80:	700a      	strb	r2, [r1, #0]
 8018f82:	4a52      	ldr	r2, [pc, #328]	; (80190cc <_printf_i+0x21c>)
 8018f84:	9203      	str	r2, [sp, #12]
 8018f86:	681a      	ldr	r2, [r3, #0]
 8018f88:	6821      	ldr	r1, [r4, #0]
 8018f8a:	ca20      	ldmia	r2!, {r5}
 8018f8c:	601a      	str	r2, [r3, #0]
 8018f8e:	0608      	lsls	r0, r1, #24
 8018f90:	d550      	bpl.n	8019034 <_printf_i+0x184>
 8018f92:	07cb      	lsls	r3, r1, #31
 8018f94:	d502      	bpl.n	8018f9c <_printf_i+0xec>
 8018f96:	2320      	movs	r3, #32
 8018f98:	4319      	orrs	r1, r3
 8018f9a:	6021      	str	r1, [r4, #0]
 8018f9c:	2710      	movs	r7, #16
 8018f9e:	2d00      	cmp	r5, #0
 8018fa0:	d103      	bne.n	8018faa <_printf_i+0xfa>
 8018fa2:	2320      	movs	r3, #32
 8018fa4:	6822      	ldr	r2, [r4, #0]
 8018fa6:	439a      	bics	r2, r3
 8018fa8:	6022      	str	r2, [r4, #0]
 8018faa:	0023      	movs	r3, r4
 8018fac:	2200      	movs	r2, #0
 8018fae:	3343      	adds	r3, #67	; 0x43
 8018fb0:	701a      	strb	r2, [r3, #0]
 8018fb2:	6863      	ldr	r3, [r4, #4]
 8018fb4:	60a3      	str	r3, [r4, #8]
 8018fb6:	2b00      	cmp	r3, #0
 8018fb8:	db03      	blt.n	8018fc2 <_printf_i+0x112>
 8018fba:	2204      	movs	r2, #4
 8018fbc:	6821      	ldr	r1, [r4, #0]
 8018fbe:	4391      	bics	r1, r2
 8018fc0:	6021      	str	r1, [r4, #0]
 8018fc2:	2d00      	cmp	r5, #0
 8018fc4:	d102      	bne.n	8018fcc <_printf_i+0x11c>
 8018fc6:	9e04      	ldr	r6, [sp, #16]
 8018fc8:	2b00      	cmp	r3, #0
 8018fca:	d00c      	beq.n	8018fe6 <_printf_i+0x136>
 8018fcc:	9e04      	ldr	r6, [sp, #16]
 8018fce:	0028      	movs	r0, r5
 8018fd0:	0039      	movs	r1, r7
 8018fd2:	f7e7 f943 	bl	800025c <__aeabi_uidivmod>
 8018fd6:	9b03      	ldr	r3, [sp, #12]
 8018fd8:	3e01      	subs	r6, #1
 8018fda:	5c5b      	ldrb	r3, [r3, r1]
 8018fdc:	7033      	strb	r3, [r6, #0]
 8018fde:	002b      	movs	r3, r5
 8018fe0:	0005      	movs	r5, r0
 8018fe2:	429f      	cmp	r7, r3
 8018fe4:	d9f3      	bls.n	8018fce <_printf_i+0x11e>
 8018fe6:	2f08      	cmp	r7, #8
 8018fe8:	d109      	bne.n	8018ffe <_printf_i+0x14e>
 8018fea:	6823      	ldr	r3, [r4, #0]
 8018fec:	07db      	lsls	r3, r3, #31
 8018fee:	d506      	bpl.n	8018ffe <_printf_i+0x14e>
 8018ff0:	6863      	ldr	r3, [r4, #4]
 8018ff2:	6922      	ldr	r2, [r4, #16]
 8018ff4:	4293      	cmp	r3, r2
 8018ff6:	dc02      	bgt.n	8018ffe <_printf_i+0x14e>
 8018ff8:	2330      	movs	r3, #48	; 0x30
 8018ffa:	3e01      	subs	r6, #1
 8018ffc:	7033      	strb	r3, [r6, #0]
 8018ffe:	9b04      	ldr	r3, [sp, #16]
 8019000:	1b9b      	subs	r3, r3, r6
 8019002:	6123      	str	r3, [r4, #16]
 8019004:	9b07      	ldr	r3, [sp, #28]
 8019006:	0021      	movs	r1, r4
 8019008:	9300      	str	r3, [sp, #0]
 801900a:	9805      	ldr	r0, [sp, #20]
 801900c:	9b06      	ldr	r3, [sp, #24]
 801900e:	aa09      	add	r2, sp, #36	; 0x24
 8019010:	f7ff fede 	bl	8018dd0 <_printf_common>
 8019014:	1c43      	adds	r3, r0, #1
 8019016:	d135      	bne.n	8019084 <_printf_i+0x1d4>
 8019018:	2001      	movs	r0, #1
 801901a:	4240      	negs	r0, r0
 801901c:	b00b      	add	sp, #44	; 0x2c
 801901e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019020:	2220      	movs	r2, #32
 8019022:	6809      	ldr	r1, [r1, #0]
 8019024:	430a      	orrs	r2, r1
 8019026:	6022      	str	r2, [r4, #0]
 8019028:	0022      	movs	r2, r4
 801902a:	2178      	movs	r1, #120	; 0x78
 801902c:	3245      	adds	r2, #69	; 0x45
 801902e:	7011      	strb	r1, [r2, #0]
 8019030:	4a27      	ldr	r2, [pc, #156]	; (80190d0 <_printf_i+0x220>)
 8019032:	e7a7      	b.n	8018f84 <_printf_i+0xd4>
 8019034:	0648      	lsls	r0, r1, #25
 8019036:	d5ac      	bpl.n	8018f92 <_printf_i+0xe2>
 8019038:	b2ad      	uxth	r5, r5
 801903a:	e7aa      	b.n	8018f92 <_printf_i+0xe2>
 801903c:	681a      	ldr	r2, [r3, #0]
 801903e:	680d      	ldr	r5, [r1, #0]
 8019040:	1d10      	adds	r0, r2, #4
 8019042:	6949      	ldr	r1, [r1, #20]
 8019044:	6018      	str	r0, [r3, #0]
 8019046:	6813      	ldr	r3, [r2, #0]
 8019048:	062e      	lsls	r6, r5, #24
 801904a:	d501      	bpl.n	8019050 <_printf_i+0x1a0>
 801904c:	6019      	str	r1, [r3, #0]
 801904e:	e002      	b.n	8019056 <_printf_i+0x1a6>
 8019050:	066d      	lsls	r5, r5, #25
 8019052:	d5fb      	bpl.n	801904c <_printf_i+0x19c>
 8019054:	8019      	strh	r1, [r3, #0]
 8019056:	2300      	movs	r3, #0
 8019058:	9e04      	ldr	r6, [sp, #16]
 801905a:	6123      	str	r3, [r4, #16]
 801905c:	e7d2      	b.n	8019004 <_printf_i+0x154>
 801905e:	681a      	ldr	r2, [r3, #0]
 8019060:	1d11      	adds	r1, r2, #4
 8019062:	6019      	str	r1, [r3, #0]
 8019064:	6816      	ldr	r6, [r2, #0]
 8019066:	2100      	movs	r1, #0
 8019068:	0030      	movs	r0, r6
 801906a:	6862      	ldr	r2, [r4, #4]
 801906c:	f000 fb5a 	bl	8019724 <memchr>
 8019070:	2800      	cmp	r0, #0
 8019072:	d001      	beq.n	8019078 <_printf_i+0x1c8>
 8019074:	1b80      	subs	r0, r0, r6
 8019076:	6060      	str	r0, [r4, #4]
 8019078:	6863      	ldr	r3, [r4, #4]
 801907a:	6123      	str	r3, [r4, #16]
 801907c:	2300      	movs	r3, #0
 801907e:	9a04      	ldr	r2, [sp, #16]
 8019080:	7013      	strb	r3, [r2, #0]
 8019082:	e7bf      	b.n	8019004 <_printf_i+0x154>
 8019084:	6923      	ldr	r3, [r4, #16]
 8019086:	0032      	movs	r2, r6
 8019088:	9906      	ldr	r1, [sp, #24]
 801908a:	9805      	ldr	r0, [sp, #20]
 801908c:	9d07      	ldr	r5, [sp, #28]
 801908e:	47a8      	blx	r5
 8019090:	1c43      	adds	r3, r0, #1
 8019092:	d0c1      	beq.n	8019018 <_printf_i+0x168>
 8019094:	6823      	ldr	r3, [r4, #0]
 8019096:	079b      	lsls	r3, r3, #30
 8019098:	d415      	bmi.n	80190c6 <_printf_i+0x216>
 801909a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801909c:	68e0      	ldr	r0, [r4, #12]
 801909e:	4298      	cmp	r0, r3
 80190a0:	dabc      	bge.n	801901c <_printf_i+0x16c>
 80190a2:	0018      	movs	r0, r3
 80190a4:	e7ba      	b.n	801901c <_printf_i+0x16c>
 80190a6:	0022      	movs	r2, r4
 80190a8:	2301      	movs	r3, #1
 80190aa:	9906      	ldr	r1, [sp, #24]
 80190ac:	9805      	ldr	r0, [sp, #20]
 80190ae:	9e07      	ldr	r6, [sp, #28]
 80190b0:	3219      	adds	r2, #25
 80190b2:	47b0      	blx	r6
 80190b4:	1c43      	adds	r3, r0, #1
 80190b6:	d0af      	beq.n	8019018 <_printf_i+0x168>
 80190b8:	3501      	adds	r5, #1
 80190ba:	68e3      	ldr	r3, [r4, #12]
 80190bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80190be:	1a9b      	subs	r3, r3, r2
 80190c0:	42ab      	cmp	r3, r5
 80190c2:	dcf0      	bgt.n	80190a6 <_printf_i+0x1f6>
 80190c4:	e7e9      	b.n	801909a <_printf_i+0x1ea>
 80190c6:	2500      	movs	r5, #0
 80190c8:	e7f7      	b.n	80190ba <_printf_i+0x20a>
 80190ca:	46c0      	nop			; (mov r8, r8)
 80190cc:	0801d14d 	.word	0x0801d14d
 80190d0:	0801d15e 	.word	0x0801d15e

080190d4 <nan>:
 80190d4:	2000      	movs	r0, #0
 80190d6:	4901      	ldr	r1, [pc, #4]	; (80190dc <nan+0x8>)
 80190d8:	4770      	bx	lr
 80190da:	46c0      	nop			; (mov r8, r8)
 80190dc:	7ff80000 	.word	0x7ff80000

080190e0 <__swbuf_r>:
 80190e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80190e2:	0005      	movs	r5, r0
 80190e4:	000e      	movs	r6, r1
 80190e6:	0014      	movs	r4, r2
 80190e8:	2800      	cmp	r0, #0
 80190ea:	d004      	beq.n	80190f6 <__swbuf_r+0x16>
 80190ec:	6983      	ldr	r3, [r0, #24]
 80190ee:	2b00      	cmp	r3, #0
 80190f0:	d101      	bne.n	80190f6 <__swbuf_r+0x16>
 80190f2:	f000 fa07 	bl	8019504 <__sinit>
 80190f6:	4b22      	ldr	r3, [pc, #136]	; (8019180 <__swbuf_r+0xa0>)
 80190f8:	429c      	cmp	r4, r3
 80190fa:	d12e      	bne.n	801915a <__swbuf_r+0x7a>
 80190fc:	686c      	ldr	r4, [r5, #4]
 80190fe:	69a3      	ldr	r3, [r4, #24]
 8019100:	60a3      	str	r3, [r4, #8]
 8019102:	89a3      	ldrh	r3, [r4, #12]
 8019104:	071b      	lsls	r3, r3, #28
 8019106:	d532      	bpl.n	801916e <__swbuf_r+0x8e>
 8019108:	6923      	ldr	r3, [r4, #16]
 801910a:	2b00      	cmp	r3, #0
 801910c:	d02f      	beq.n	801916e <__swbuf_r+0x8e>
 801910e:	6823      	ldr	r3, [r4, #0]
 8019110:	6922      	ldr	r2, [r4, #16]
 8019112:	b2f7      	uxtb	r7, r6
 8019114:	1a98      	subs	r0, r3, r2
 8019116:	6963      	ldr	r3, [r4, #20]
 8019118:	b2f6      	uxtb	r6, r6
 801911a:	4283      	cmp	r3, r0
 801911c:	dc05      	bgt.n	801912a <__swbuf_r+0x4a>
 801911e:	0021      	movs	r1, r4
 8019120:	0028      	movs	r0, r5
 8019122:	f000 f94d 	bl	80193c0 <_fflush_r>
 8019126:	2800      	cmp	r0, #0
 8019128:	d127      	bne.n	801917a <__swbuf_r+0x9a>
 801912a:	68a3      	ldr	r3, [r4, #8]
 801912c:	3001      	adds	r0, #1
 801912e:	3b01      	subs	r3, #1
 8019130:	60a3      	str	r3, [r4, #8]
 8019132:	6823      	ldr	r3, [r4, #0]
 8019134:	1c5a      	adds	r2, r3, #1
 8019136:	6022      	str	r2, [r4, #0]
 8019138:	701f      	strb	r7, [r3, #0]
 801913a:	6963      	ldr	r3, [r4, #20]
 801913c:	4283      	cmp	r3, r0
 801913e:	d004      	beq.n	801914a <__swbuf_r+0x6a>
 8019140:	89a3      	ldrh	r3, [r4, #12]
 8019142:	07db      	lsls	r3, r3, #31
 8019144:	d507      	bpl.n	8019156 <__swbuf_r+0x76>
 8019146:	2e0a      	cmp	r6, #10
 8019148:	d105      	bne.n	8019156 <__swbuf_r+0x76>
 801914a:	0021      	movs	r1, r4
 801914c:	0028      	movs	r0, r5
 801914e:	f000 f937 	bl	80193c0 <_fflush_r>
 8019152:	2800      	cmp	r0, #0
 8019154:	d111      	bne.n	801917a <__swbuf_r+0x9a>
 8019156:	0030      	movs	r0, r6
 8019158:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801915a:	4b0a      	ldr	r3, [pc, #40]	; (8019184 <__swbuf_r+0xa4>)
 801915c:	429c      	cmp	r4, r3
 801915e:	d101      	bne.n	8019164 <__swbuf_r+0x84>
 8019160:	68ac      	ldr	r4, [r5, #8]
 8019162:	e7cc      	b.n	80190fe <__swbuf_r+0x1e>
 8019164:	4b08      	ldr	r3, [pc, #32]	; (8019188 <__swbuf_r+0xa8>)
 8019166:	429c      	cmp	r4, r3
 8019168:	d1c9      	bne.n	80190fe <__swbuf_r+0x1e>
 801916a:	68ec      	ldr	r4, [r5, #12]
 801916c:	e7c7      	b.n	80190fe <__swbuf_r+0x1e>
 801916e:	0021      	movs	r1, r4
 8019170:	0028      	movs	r0, r5
 8019172:	f000 f819 	bl	80191a8 <__swsetup_r>
 8019176:	2800      	cmp	r0, #0
 8019178:	d0c9      	beq.n	801910e <__swbuf_r+0x2e>
 801917a:	2601      	movs	r6, #1
 801917c:	4276      	negs	r6, r6
 801917e:	e7ea      	b.n	8019156 <__swbuf_r+0x76>
 8019180:	0801d190 	.word	0x0801d190
 8019184:	0801d1b0 	.word	0x0801d1b0
 8019188:	0801d170 	.word	0x0801d170

0801918c <__ascii_wctomb>:
 801918c:	0003      	movs	r3, r0
 801918e:	1e08      	subs	r0, r1, #0
 8019190:	d005      	beq.n	801919e <__ascii_wctomb+0x12>
 8019192:	2aff      	cmp	r2, #255	; 0xff
 8019194:	d904      	bls.n	80191a0 <__ascii_wctomb+0x14>
 8019196:	228a      	movs	r2, #138	; 0x8a
 8019198:	2001      	movs	r0, #1
 801919a:	601a      	str	r2, [r3, #0]
 801919c:	4240      	negs	r0, r0
 801919e:	4770      	bx	lr
 80191a0:	2001      	movs	r0, #1
 80191a2:	700a      	strb	r2, [r1, #0]
 80191a4:	e7fb      	b.n	801919e <__ascii_wctomb+0x12>
	...

080191a8 <__swsetup_r>:
 80191a8:	4b37      	ldr	r3, [pc, #220]	; (8019288 <__swsetup_r+0xe0>)
 80191aa:	b570      	push	{r4, r5, r6, lr}
 80191ac:	681d      	ldr	r5, [r3, #0]
 80191ae:	0006      	movs	r6, r0
 80191b0:	000c      	movs	r4, r1
 80191b2:	2d00      	cmp	r5, #0
 80191b4:	d005      	beq.n	80191c2 <__swsetup_r+0x1a>
 80191b6:	69ab      	ldr	r3, [r5, #24]
 80191b8:	2b00      	cmp	r3, #0
 80191ba:	d102      	bne.n	80191c2 <__swsetup_r+0x1a>
 80191bc:	0028      	movs	r0, r5
 80191be:	f000 f9a1 	bl	8019504 <__sinit>
 80191c2:	4b32      	ldr	r3, [pc, #200]	; (801928c <__swsetup_r+0xe4>)
 80191c4:	429c      	cmp	r4, r3
 80191c6:	d10f      	bne.n	80191e8 <__swsetup_r+0x40>
 80191c8:	686c      	ldr	r4, [r5, #4]
 80191ca:	230c      	movs	r3, #12
 80191cc:	5ee2      	ldrsh	r2, [r4, r3]
 80191ce:	b293      	uxth	r3, r2
 80191d0:	0711      	lsls	r1, r2, #28
 80191d2:	d42d      	bmi.n	8019230 <__swsetup_r+0x88>
 80191d4:	06d9      	lsls	r1, r3, #27
 80191d6:	d411      	bmi.n	80191fc <__swsetup_r+0x54>
 80191d8:	2309      	movs	r3, #9
 80191da:	2001      	movs	r0, #1
 80191dc:	6033      	str	r3, [r6, #0]
 80191de:	3337      	adds	r3, #55	; 0x37
 80191e0:	4313      	orrs	r3, r2
 80191e2:	81a3      	strh	r3, [r4, #12]
 80191e4:	4240      	negs	r0, r0
 80191e6:	bd70      	pop	{r4, r5, r6, pc}
 80191e8:	4b29      	ldr	r3, [pc, #164]	; (8019290 <__swsetup_r+0xe8>)
 80191ea:	429c      	cmp	r4, r3
 80191ec:	d101      	bne.n	80191f2 <__swsetup_r+0x4a>
 80191ee:	68ac      	ldr	r4, [r5, #8]
 80191f0:	e7eb      	b.n	80191ca <__swsetup_r+0x22>
 80191f2:	4b28      	ldr	r3, [pc, #160]	; (8019294 <__swsetup_r+0xec>)
 80191f4:	429c      	cmp	r4, r3
 80191f6:	d1e8      	bne.n	80191ca <__swsetup_r+0x22>
 80191f8:	68ec      	ldr	r4, [r5, #12]
 80191fa:	e7e6      	b.n	80191ca <__swsetup_r+0x22>
 80191fc:	075b      	lsls	r3, r3, #29
 80191fe:	d513      	bpl.n	8019228 <__swsetup_r+0x80>
 8019200:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8019202:	2900      	cmp	r1, #0
 8019204:	d008      	beq.n	8019218 <__swsetup_r+0x70>
 8019206:	0023      	movs	r3, r4
 8019208:	3344      	adds	r3, #68	; 0x44
 801920a:	4299      	cmp	r1, r3
 801920c:	d002      	beq.n	8019214 <__swsetup_r+0x6c>
 801920e:	0030      	movs	r0, r6
 8019210:	f7fd f9a2 	bl	8016558 <_free_r>
 8019214:	2300      	movs	r3, #0
 8019216:	6363      	str	r3, [r4, #52]	; 0x34
 8019218:	2224      	movs	r2, #36	; 0x24
 801921a:	89a3      	ldrh	r3, [r4, #12]
 801921c:	4393      	bics	r3, r2
 801921e:	81a3      	strh	r3, [r4, #12]
 8019220:	2300      	movs	r3, #0
 8019222:	6063      	str	r3, [r4, #4]
 8019224:	6923      	ldr	r3, [r4, #16]
 8019226:	6023      	str	r3, [r4, #0]
 8019228:	2308      	movs	r3, #8
 801922a:	89a2      	ldrh	r2, [r4, #12]
 801922c:	4313      	orrs	r3, r2
 801922e:	81a3      	strh	r3, [r4, #12]
 8019230:	6923      	ldr	r3, [r4, #16]
 8019232:	2b00      	cmp	r3, #0
 8019234:	d10b      	bne.n	801924e <__swsetup_r+0xa6>
 8019236:	21a0      	movs	r1, #160	; 0xa0
 8019238:	2280      	movs	r2, #128	; 0x80
 801923a:	89a3      	ldrh	r3, [r4, #12]
 801923c:	0089      	lsls	r1, r1, #2
 801923e:	0092      	lsls	r2, r2, #2
 8019240:	400b      	ands	r3, r1
 8019242:	4293      	cmp	r3, r2
 8019244:	d003      	beq.n	801924e <__swsetup_r+0xa6>
 8019246:	0021      	movs	r1, r4
 8019248:	0030      	movs	r0, r6
 801924a:	f000 fa27 	bl	801969c <__smakebuf_r>
 801924e:	220c      	movs	r2, #12
 8019250:	5ea3      	ldrsh	r3, [r4, r2]
 8019252:	2001      	movs	r0, #1
 8019254:	001a      	movs	r2, r3
 8019256:	b299      	uxth	r1, r3
 8019258:	4002      	ands	r2, r0
 801925a:	4203      	tst	r3, r0
 801925c:	d00f      	beq.n	801927e <__swsetup_r+0xd6>
 801925e:	2200      	movs	r2, #0
 8019260:	60a2      	str	r2, [r4, #8]
 8019262:	6962      	ldr	r2, [r4, #20]
 8019264:	4252      	negs	r2, r2
 8019266:	61a2      	str	r2, [r4, #24]
 8019268:	2000      	movs	r0, #0
 801926a:	6922      	ldr	r2, [r4, #16]
 801926c:	4282      	cmp	r2, r0
 801926e:	d1ba      	bne.n	80191e6 <__swsetup_r+0x3e>
 8019270:	060a      	lsls	r2, r1, #24
 8019272:	d5b8      	bpl.n	80191e6 <__swsetup_r+0x3e>
 8019274:	2240      	movs	r2, #64	; 0x40
 8019276:	4313      	orrs	r3, r2
 8019278:	81a3      	strh	r3, [r4, #12]
 801927a:	3801      	subs	r0, #1
 801927c:	e7b3      	b.n	80191e6 <__swsetup_r+0x3e>
 801927e:	0788      	lsls	r0, r1, #30
 8019280:	d400      	bmi.n	8019284 <__swsetup_r+0xdc>
 8019282:	6962      	ldr	r2, [r4, #20]
 8019284:	60a2      	str	r2, [r4, #8]
 8019286:	e7ef      	b.n	8019268 <__swsetup_r+0xc0>
 8019288:	20000368 	.word	0x20000368
 801928c:	0801d190 	.word	0x0801d190
 8019290:	0801d1b0 	.word	0x0801d1b0
 8019294:	0801d170 	.word	0x0801d170

08019298 <abort>:
 8019298:	2006      	movs	r0, #6
 801929a:	b510      	push	{r4, lr}
 801929c:	f000 fa92 	bl	80197c4 <raise>
 80192a0:	2001      	movs	r0, #1
 80192a2:	f000 fbbd 	bl	8019a20 <_exit>
	...

080192a8 <__sflush_r>:
 80192a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80192aa:	898b      	ldrh	r3, [r1, #12]
 80192ac:	0005      	movs	r5, r0
 80192ae:	000c      	movs	r4, r1
 80192b0:	071a      	lsls	r2, r3, #28
 80192b2:	d45f      	bmi.n	8019374 <__sflush_r+0xcc>
 80192b4:	684a      	ldr	r2, [r1, #4]
 80192b6:	2a00      	cmp	r2, #0
 80192b8:	dc04      	bgt.n	80192c4 <__sflush_r+0x1c>
 80192ba:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 80192bc:	2a00      	cmp	r2, #0
 80192be:	dc01      	bgt.n	80192c4 <__sflush_r+0x1c>
 80192c0:	2000      	movs	r0, #0
 80192c2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80192c4:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80192c6:	2f00      	cmp	r7, #0
 80192c8:	d0fa      	beq.n	80192c0 <__sflush_r+0x18>
 80192ca:	2200      	movs	r2, #0
 80192cc:	2180      	movs	r1, #128	; 0x80
 80192ce:	682e      	ldr	r6, [r5, #0]
 80192d0:	602a      	str	r2, [r5, #0]
 80192d2:	001a      	movs	r2, r3
 80192d4:	0149      	lsls	r1, r1, #5
 80192d6:	400a      	ands	r2, r1
 80192d8:	420b      	tst	r3, r1
 80192da:	d034      	beq.n	8019346 <__sflush_r+0x9e>
 80192dc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80192de:	89a3      	ldrh	r3, [r4, #12]
 80192e0:	075b      	lsls	r3, r3, #29
 80192e2:	d506      	bpl.n	80192f2 <__sflush_r+0x4a>
 80192e4:	6863      	ldr	r3, [r4, #4]
 80192e6:	1ac0      	subs	r0, r0, r3
 80192e8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80192ea:	2b00      	cmp	r3, #0
 80192ec:	d001      	beq.n	80192f2 <__sflush_r+0x4a>
 80192ee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80192f0:	1ac0      	subs	r0, r0, r3
 80192f2:	0002      	movs	r2, r0
 80192f4:	6a21      	ldr	r1, [r4, #32]
 80192f6:	2300      	movs	r3, #0
 80192f8:	0028      	movs	r0, r5
 80192fa:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80192fc:	47b8      	blx	r7
 80192fe:	89a1      	ldrh	r1, [r4, #12]
 8019300:	1c43      	adds	r3, r0, #1
 8019302:	d106      	bne.n	8019312 <__sflush_r+0x6a>
 8019304:	682b      	ldr	r3, [r5, #0]
 8019306:	2b1d      	cmp	r3, #29
 8019308:	d831      	bhi.n	801936e <__sflush_r+0xc6>
 801930a:	4a2c      	ldr	r2, [pc, #176]	; (80193bc <__sflush_r+0x114>)
 801930c:	40da      	lsrs	r2, r3
 801930e:	07d3      	lsls	r3, r2, #31
 8019310:	d52d      	bpl.n	801936e <__sflush_r+0xc6>
 8019312:	2300      	movs	r3, #0
 8019314:	6063      	str	r3, [r4, #4]
 8019316:	6923      	ldr	r3, [r4, #16]
 8019318:	6023      	str	r3, [r4, #0]
 801931a:	04cb      	lsls	r3, r1, #19
 801931c:	d505      	bpl.n	801932a <__sflush_r+0x82>
 801931e:	1c43      	adds	r3, r0, #1
 8019320:	d102      	bne.n	8019328 <__sflush_r+0x80>
 8019322:	682b      	ldr	r3, [r5, #0]
 8019324:	2b00      	cmp	r3, #0
 8019326:	d100      	bne.n	801932a <__sflush_r+0x82>
 8019328:	6560      	str	r0, [r4, #84]	; 0x54
 801932a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801932c:	602e      	str	r6, [r5, #0]
 801932e:	2900      	cmp	r1, #0
 8019330:	d0c6      	beq.n	80192c0 <__sflush_r+0x18>
 8019332:	0023      	movs	r3, r4
 8019334:	3344      	adds	r3, #68	; 0x44
 8019336:	4299      	cmp	r1, r3
 8019338:	d002      	beq.n	8019340 <__sflush_r+0x98>
 801933a:	0028      	movs	r0, r5
 801933c:	f7fd f90c 	bl	8016558 <_free_r>
 8019340:	2000      	movs	r0, #0
 8019342:	6360      	str	r0, [r4, #52]	; 0x34
 8019344:	e7bd      	b.n	80192c2 <__sflush_r+0x1a>
 8019346:	2301      	movs	r3, #1
 8019348:	0028      	movs	r0, r5
 801934a:	6a21      	ldr	r1, [r4, #32]
 801934c:	47b8      	blx	r7
 801934e:	1c43      	adds	r3, r0, #1
 8019350:	d1c5      	bne.n	80192de <__sflush_r+0x36>
 8019352:	682b      	ldr	r3, [r5, #0]
 8019354:	2b00      	cmp	r3, #0
 8019356:	d0c2      	beq.n	80192de <__sflush_r+0x36>
 8019358:	2b1d      	cmp	r3, #29
 801935a:	d001      	beq.n	8019360 <__sflush_r+0xb8>
 801935c:	2b16      	cmp	r3, #22
 801935e:	d101      	bne.n	8019364 <__sflush_r+0xbc>
 8019360:	602e      	str	r6, [r5, #0]
 8019362:	e7ad      	b.n	80192c0 <__sflush_r+0x18>
 8019364:	2340      	movs	r3, #64	; 0x40
 8019366:	89a2      	ldrh	r2, [r4, #12]
 8019368:	4313      	orrs	r3, r2
 801936a:	81a3      	strh	r3, [r4, #12]
 801936c:	e7a9      	b.n	80192c2 <__sflush_r+0x1a>
 801936e:	2340      	movs	r3, #64	; 0x40
 8019370:	430b      	orrs	r3, r1
 8019372:	e7fa      	b.n	801936a <__sflush_r+0xc2>
 8019374:	690f      	ldr	r7, [r1, #16]
 8019376:	2f00      	cmp	r7, #0
 8019378:	d0a2      	beq.n	80192c0 <__sflush_r+0x18>
 801937a:	680a      	ldr	r2, [r1, #0]
 801937c:	600f      	str	r7, [r1, #0]
 801937e:	1bd2      	subs	r2, r2, r7
 8019380:	9201      	str	r2, [sp, #4]
 8019382:	2200      	movs	r2, #0
 8019384:	079b      	lsls	r3, r3, #30
 8019386:	d100      	bne.n	801938a <__sflush_r+0xe2>
 8019388:	694a      	ldr	r2, [r1, #20]
 801938a:	60a2      	str	r2, [r4, #8]
 801938c:	9b01      	ldr	r3, [sp, #4]
 801938e:	2b00      	cmp	r3, #0
 8019390:	dc00      	bgt.n	8019394 <__sflush_r+0xec>
 8019392:	e795      	b.n	80192c0 <__sflush_r+0x18>
 8019394:	003a      	movs	r2, r7
 8019396:	0028      	movs	r0, r5
 8019398:	9b01      	ldr	r3, [sp, #4]
 801939a:	6a21      	ldr	r1, [r4, #32]
 801939c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801939e:	47b0      	blx	r6
 80193a0:	2800      	cmp	r0, #0
 80193a2:	dc06      	bgt.n	80193b2 <__sflush_r+0x10a>
 80193a4:	2340      	movs	r3, #64	; 0x40
 80193a6:	2001      	movs	r0, #1
 80193a8:	89a2      	ldrh	r2, [r4, #12]
 80193aa:	4240      	negs	r0, r0
 80193ac:	4313      	orrs	r3, r2
 80193ae:	81a3      	strh	r3, [r4, #12]
 80193b0:	e787      	b.n	80192c2 <__sflush_r+0x1a>
 80193b2:	9b01      	ldr	r3, [sp, #4]
 80193b4:	183f      	adds	r7, r7, r0
 80193b6:	1a1b      	subs	r3, r3, r0
 80193b8:	9301      	str	r3, [sp, #4]
 80193ba:	e7e7      	b.n	801938c <__sflush_r+0xe4>
 80193bc:	20400001 	.word	0x20400001

080193c0 <_fflush_r>:
 80193c0:	690b      	ldr	r3, [r1, #16]
 80193c2:	b570      	push	{r4, r5, r6, lr}
 80193c4:	0005      	movs	r5, r0
 80193c6:	000c      	movs	r4, r1
 80193c8:	2b00      	cmp	r3, #0
 80193ca:	d102      	bne.n	80193d2 <_fflush_r+0x12>
 80193cc:	2500      	movs	r5, #0
 80193ce:	0028      	movs	r0, r5
 80193d0:	bd70      	pop	{r4, r5, r6, pc}
 80193d2:	2800      	cmp	r0, #0
 80193d4:	d004      	beq.n	80193e0 <_fflush_r+0x20>
 80193d6:	6983      	ldr	r3, [r0, #24]
 80193d8:	2b00      	cmp	r3, #0
 80193da:	d101      	bne.n	80193e0 <_fflush_r+0x20>
 80193dc:	f000 f892 	bl	8019504 <__sinit>
 80193e0:	4b14      	ldr	r3, [pc, #80]	; (8019434 <_fflush_r+0x74>)
 80193e2:	429c      	cmp	r4, r3
 80193e4:	d11b      	bne.n	801941e <_fflush_r+0x5e>
 80193e6:	686c      	ldr	r4, [r5, #4]
 80193e8:	220c      	movs	r2, #12
 80193ea:	5ea3      	ldrsh	r3, [r4, r2]
 80193ec:	2b00      	cmp	r3, #0
 80193ee:	d0ed      	beq.n	80193cc <_fflush_r+0xc>
 80193f0:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80193f2:	07d2      	lsls	r2, r2, #31
 80193f4:	d404      	bmi.n	8019400 <_fflush_r+0x40>
 80193f6:	059b      	lsls	r3, r3, #22
 80193f8:	d402      	bmi.n	8019400 <_fflush_r+0x40>
 80193fa:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80193fc:	f000 f923 	bl	8019646 <__retarget_lock_acquire_recursive>
 8019400:	0028      	movs	r0, r5
 8019402:	0021      	movs	r1, r4
 8019404:	f7ff ff50 	bl	80192a8 <__sflush_r>
 8019408:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801940a:	0005      	movs	r5, r0
 801940c:	07db      	lsls	r3, r3, #31
 801940e:	d4de      	bmi.n	80193ce <_fflush_r+0xe>
 8019410:	89a3      	ldrh	r3, [r4, #12]
 8019412:	059b      	lsls	r3, r3, #22
 8019414:	d4db      	bmi.n	80193ce <_fflush_r+0xe>
 8019416:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019418:	f000 f916 	bl	8019648 <__retarget_lock_release_recursive>
 801941c:	e7d7      	b.n	80193ce <_fflush_r+0xe>
 801941e:	4b06      	ldr	r3, [pc, #24]	; (8019438 <_fflush_r+0x78>)
 8019420:	429c      	cmp	r4, r3
 8019422:	d101      	bne.n	8019428 <_fflush_r+0x68>
 8019424:	68ac      	ldr	r4, [r5, #8]
 8019426:	e7df      	b.n	80193e8 <_fflush_r+0x28>
 8019428:	4b04      	ldr	r3, [pc, #16]	; (801943c <_fflush_r+0x7c>)
 801942a:	429c      	cmp	r4, r3
 801942c:	d1dc      	bne.n	80193e8 <_fflush_r+0x28>
 801942e:	68ec      	ldr	r4, [r5, #12]
 8019430:	e7da      	b.n	80193e8 <_fflush_r+0x28>
 8019432:	46c0      	nop			; (mov r8, r8)
 8019434:	0801d190 	.word	0x0801d190
 8019438:	0801d1b0 	.word	0x0801d1b0
 801943c:	0801d170 	.word	0x0801d170

08019440 <std>:
 8019440:	2300      	movs	r3, #0
 8019442:	b510      	push	{r4, lr}
 8019444:	0004      	movs	r4, r0
 8019446:	6003      	str	r3, [r0, #0]
 8019448:	6043      	str	r3, [r0, #4]
 801944a:	6083      	str	r3, [r0, #8]
 801944c:	8181      	strh	r1, [r0, #12]
 801944e:	6643      	str	r3, [r0, #100]	; 0x64
 8019450:	0019      	movs	r1, r3
 8019452:	81c2      	strh	r2, [r0, #14]
 8019454:	6103      	str	r3, [r0, #16]
 8019456:	6143      	str	r3, [r0, #20]
 8019458:	6183      	str	r3, [r0, #24]
 801945a:	2208      	movs	r2, #8
 801945c:	305c      	adds	r0, #92	; 0x5c
 801945e:	f7fd f872 	bl	8016546 <memset>
 8019462:	4b05      	ldr	r3, [pc, #20]	; (8019478 <std+0x38>)
 8019464:	6263      	str	r3, [r4, #36]	; 0x24
 8019466:	4b05      	ldr	r3, [pc, #20]	; (801947c <std+0x3c>)
 8019468:	6224      	str	r4, [r4, #32]
 801946a:	62a3      	str	r3, [r4, #40]	; 0x28
 801946c:	4b04      	ldr	r3, [pc, #16]	; (8019480 <std+0x40>)
 801946e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8019470:	4b04      	ldr	r3, [pc, #16]	; (8019484 <std+0x44>)
 8019472:	6323      	str	r3, [r4, #48]	; 0x30
 8019474:	bd10      	pop	{r4, pc}
 8019476:	46c0      	nop			; (mov r8, r8)
 8019478:	08019805 	.word	0x08019805
 801947c:	0801982d 	.word	0x0801982d
 8019480:	08019865 	.word	0x08019865
 8019484:	08019891 	.word	0x08019891

08019488 <_cleanup_r>:
 8019488:	b510      	push	{r4, lr}
 801948a:	4902      	ldr	r1, [pc, #8]	; (8019494 <_cleanup_r+0xc>)
 801948c:	f000 f8ba 	bl	8019604 <_fwalk_reent>
 8019490:	bd10      	pop	{r4, pc}
 8019492:	46c0      	nop			; (mov r8, r8)
 8019494:	080193c1 	.word	0x080193c1

08019498 <__sfmoreglue>:
 8019498:	b570      	push	{r4, r5, r6, lr}
 801949a:	2568      	movs	r5, #104	; 0x68
 801949c:	1e4a      	subs	r2, r1, #1
 801949e:	4355      	muls	r5, r2
 80194a0:	000e      	movs	r6, r1
 80194a2:	0029      	movs	r1, r5
 80194a4:	3174      	adds	r1, #116	; 0x74
 80194a6:	f7fd f8a1 	bl	80165ec <_malloc_r>
 80194aa:	1e04      	subs	r4, r0, #0
 80194ac:	d008      	beq.n	80194c0 <__sfmoreglue+0x28>
 80194ae:	2100      	movs	r1, #0
 80194b0:	002a      	movs	r2, r5
 80194b2:	6001      	str	r1, [r0, #0]
 80194b4:	6046      	str	r6, [r0, #4]
 80194b6:	300c      	adds	r0, #12
 80194b8:	60a0      	str	r0, [r4, #8]
 80194ba:	3268      	adds	r2, #104	; 0x68
 80194bc:	f7fd f843 	bl	8016546 <memset>
 80194c0:	0020      	movs	r0, r4
 80194c2:	bd70      	pop	{r4, r5, r6, pc}

080194c4 <__sfp_lock_acquire>:
 80194c4:	b510      	push	{r4, lr}
 80194c6:	4802      	ldr	r0, [pc, #8]	; (80194d0 <__sfp_lock_acquire+0xc>)
 80194c8:	f000 f8bd 	bl	8019646 <__retarget_lock_acquire_recursive>
 80194cc:	bd10      	pop	{r4, pc}
 80194ce:	46c0      	nop			; (mov r8, r8)
 80194d0:	20006984 	.word	0x20006984

080194d4 <__sfp_lock_release>:
 80194d4:	b510      	push	{r4, lr}
 80194d6:	4802      	ldr	r0, [pc, #8]	; (80194e0 <__sfp_lock_release+0xc>)
 80194d8:	f000 f8b6 	bl	8019648 <__retarget_lock_release_recursive>
 80194dc:	bd10      	pop	{r4, pc}
 80194de:	46c0      	nop			; (mov r8, r8)
 80194e0:	20006984 	.word	0x20006984

080194e4 <__sinit_lock_acquire>:
 80194e4:	b510      	push	{r4, lr}
 80194e6:	4802      	ldr	r0, [pc, #8]	; (80194f0 <__sinit_lock_acquire+0xc>)
 80194e8:	f000 f8ad 	bl	8019646 <__retarget_lock_acquire_recursive>
 80194ec:	bd10      	pop	{r4, pc}
 80194ee:	46c0      	nop			; (mov r8, r8)
 80194f0:	2000697f 	.word	0x2000697f

080194f4 <__sinit_lock_release>:
 80194f4:	b510      	push	{r4, lr}
 80194f6:	4802      	ldr	r0, [pc, #8]	; (8019500 <__sinit_lock_release+0xc>)
 80194f8:	f000 f8a6 	bl	8019648 <__retarget_lock_release_recursive>
 80194fc:	bd10      	pop	{r4, pc}
 80194fe:	46c0      	nop			; (mov r8, r8)
 8019500:	2000697f 	.word	0x2000697f

08019504 <__sinit>:
 8019504:	b513      	push	{r0, r1, r4, lr}
 8019506:	0004      	movs	r4, r0
 8019508:	f7ff ffec 	bl	80194e4 <__sinit_lock_acquire>
 801950c:	69a3      	ldr	r3, [r4, #24]
 801950e:	2b00      	cmp	r3, #0
 8019510:	d002      	beq.n	8019518 <__sinit+0x14>
 8019512:	f7ff ffef 	bl	80194f4 <__sinit_lock_release>
 8019516:	bd13      	pop	{r0, r1, r4, pc}
 8019518:	64a3      	str	r3, [r4, #72]	; 0x48
 801951a:	64e3      	str	r3, [r4, #76]	; 0x4c
 801951c:	6523      	str	r3, [r4, #80]	; 0x50
 801951e:	4b13      	ldr	r3, [pc, #76]	; (801956c <__sinit+0x68>)
 8019520:	4a13      	ldr	r2, [pc, #76]	; (8019570 <__sinit+0x6c>)
 8019522:	681b      	ldr	r3, [r3, #0]
 8019524:	62a2      	str	r2, [r4, #40]	; 0x28
 8019526:	9301      	str	r3, [sp, #4]
 8019528:	42a3      	cmp	r3, r4
 801952a:	d101      	bne.n	8019530 <__sinit+0x2c>
 801952c:	2301      	movs	r3, #1
 801952e:	61a3      	str	r3, [r4, #24]
 8019530:	0020      	movs	r0, r4
 8019532:	f000 f81f 	bl	8019574 <__sfp>
 8019536:	6060      	str	r0, [r4, #4]
 8019538:	0020      	movs	r0, r4
 801953a:	f000 f81b 	bl	8019574 <__sfp>
 801953e:	60a0      	str	r0, [r4, #8]
 8019540:	0020      	movs	r0, r4
 8019542:	f000 f817 	bl	8019574 <__sfp>
 8019546:	2200      	movs	r2, #0
 8019548:	2104      	movs	r1, #4
 801954a:	60e0      	str	r0, [r4, #12]
 801954c:	6860      	ldr	r0, [r4, #4]
 801954e:	f7ff ff77 	bl	8019440 <std>
 8019552:	2201      	movs	r2, #1
 8019554:	2109      	movs	r1, #9
 8019556:	68a0      	ldr	r0, [r4, #8]
 8019558:	f7ff ff72 	bl	8019440 <std>
 801955c:	2202      	movs	r2, #2
 801955e:	2112      	movs	r1, #18
 8019560:	68e0      	ldr	r0, [r4, #12]
 8019562:	f7ff ff6d 	bl	8019440 <std>
 8019566:	2301      	movs	r3, #1
 8019568:	61a3      	str	r3, [r4, #24]
 801956a:	e7d2      	b.n	8019512 <__sinit+0xe>
 801956c:	0801cdd4 	.word	0x0801cdd4
 8019570:	08019489 	.word	0x08019489

08019574 <__sfp>:
 8019574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019576:	0007      	movs	r7, r0
 8019578:	f7ff ffa4 	bl	80194c4 <__sfp_lock_acquire>
 801957c:	4b1f      	ldr	r3, [pc, #124]	; (80195fc <__sfp+0x88>)
 801957e:	681e      	ldr	r6, [r3, #0]
 8019580:	69b3      	ldr	r3, [r6, #24]
 8019582:	2b00      	cmp	r3, #0
 8019584:	d102      	bne.n	801958c <__sfp+0x18>
 8019586:	0030      	movs	r0, r6
 8019588:	f7ff ffbc 	bl	8019504 <__sinit>
 801958c:	3648      	adds	r6, #72	; 0x48
 801958e:	68b4      	ldr	r4, [r6, #8]
 8019590:	6873      	ldr	r3, [r6, #4]
 8019592:	3b01      	subs	r3, #1
 8019594:	d504      	bpl.n	80195a0 <__sfp+0x2c>
 8019596:	6833      	ldr	r3, [r6, #0]
 8019598:	2b00      	cmp	r3, #0
 801959a:	d022      	beq.n	80195e2 <__sfp+0x6e>
 801959c:	6836      	ldr	r6, [r6, #0]
 801959e:	e7f6      	b.n	801958e <__sfp+0x1a>
 80195a0:	220c      	movs	r2, #12
 80195a2:	5ea5      	ldrsh	r5, [r4, r2]
 80195a4:	2d00      	cmp	r5, #0
 80195a6:	d11a      	bne.n	80195de <__sfp+0x6a>
 80195a8:	0020      	movs	r0, r4
 80195aa:	4b15      	ldr	r3, [pc, #84]	; (8019600 <__sfp+0x8c>)
 80195ac:	3058      	adds	r0, #88	; 0x58
 80195ae:	60e3      	str	r3, [r4, #12]
 80195b0:	6665      	str	r5, [r4, #100]	; 0x64
 80195b2:	f000 f847 	bl	8019644 <__retarget_lock_init_recursive>
 80195b6:	f7ff ff8d 	bl	80194d4 <__sfp_lock_release>
 80195ba:	0020      	movs	r0, r4
 80195bc:	2208      	movs	r2, #8
 80195be:	0029      	movs	r1, r5
 80195c0:	6025      	str	r5, [r4, #0]
 80195c2:	60a5      	str	r5, [r4, #8]
 80195c4:	6065      	str	r5, [r4, #4]
 80195c6:	6125      	str	r5, [r4, #16]
 80195c8:	6165      	str	r5, [r4, #20]
 80195ca:	61a5      	str	r5, [r4, #24]
 80195cc:	305c      	adds	r0, #92	; 0x5c
 80195ce:	f7fc ffba 	bl	8016546 <memset>
 80195d2:	6365      	str	r5, [r4, #52]	; 0x34
 80195d4:	63a5      	str	r5, [r4, #56]	; 0x38
 80195d6:	64a5      	str	r5, [r4, #72]	; 0x48
 80195d8:	64e5      	str	r5, [r4, #76]	; 0x4c
 80195da:	0020      	movs	r0, r4
 80195dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80195de:	3468      	adds	r4, #104	; 0x68
 80195e0:	e7d7      	b.n	8019592 <__sfp+0x1e>
 80195e2:	2104      	movs	r1, #4
 80195e4:	0038      	movs	r0, r7
 80195e6:	f7ff ff57 	bl	8019498 <__sfmoreglue>
 80195ea:	1e04      	subs	r4, r0, #0
 80195ec:	6030      	str	r0, [r6, #0]
 80195ee:	d1d5      	bne.n	801959c <__sfp+0x28>
 80195f0:	f7ff ff70 	bl	80194d4 <__sfp_lock_release>
 80195f4:	230c      	movs	r3, #12
 80195f6:	603b      	str	r3, [r7, #0]
 80195f8:	e7ef      	b.n	80195da <__sfp+0x66>
 80195fa:	46c0      	nop			; (mov r8, r8)
 80195fc:	0801cdd4 	.word	0x0801cdd4
 8019600:	ffff0001 	.word	0xffff0001

08019604 <_fwalk_reent>:
 8019604:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8019606:	0004      	movs	r4, r0
 8019608:	0006      	movs	r6, r0
 801960a:	2700      	movs	r7, #0
 801960c:	9101      	str	r1, [sp, #4]
 801960e:	3448      	adds	r4, #72	; 0x48
 8019610:	6863      	ldr	r3, [r4, #4]
 8019612:	68a5      	ldr	r5, [r4, #8]
 8019614:	9300      	str	r3, [sp, #0]
 8019616:	9b00      	ldr	r3, [sp, #0]
 8019618:	3b01      	subs	r3, #1
 801961a:	9300      	str	r3, [sp, #0]
 801961c:	d504      	bpl.n	8019628 <_fwalk_reent+0x24>
 801961e:	6824      	ldr	r4, [r4, #0]
 8019620:	2c00      	cmp	r4, #0
 8019622:	d1f5      	bne.n	8019610 <_fwalk_reent+0xc>
 8019624:	0038      	movs	r0, r7
 8019626:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8019628:	89ab      	ldrh	r3, [r5, #12]
 801962a:	2b01      	cmp	r3, #1
 801962c:	d908      	bls.n	8019640 <_fwalk_reent+0x3c>
 801962e:	220e      	movs	r2, #14
 8019630:	5eab      	ldrsh	r3, [r5, r2]
 8019632:	3301      	adds	r3, #1
 8019634:	d004      	beq.n	8019640 <_fwalk_reent+0x3c>
 8019636:	0029      	movs	r1, r5
 8019638:	0030      	movs	r0, r6
 801963a:	9b01      	ldr	r3, [sp, #4]
 801963c:	4798      	blx	r3
 801963e:	4307      	orrs	r7, r0
 8019640:	3568      	adds	r5, #104	; 0x68
 8019642:	e7e8      	b.n	8019616 <_fwalk_reent+0x12>

08019644 <__retarget_lock_init_recursive>:
 8019644:	4770      	bx	lr

08019646 <__retarget_lock_acquire_recursive>:
 8019646:	4770      	bx	lr

08019648 <__retarget_lock_release_recursive>:
 8019648:	4770      	bx	lr
	...

0801964c <__swhatbuf_r>:
 801964c:	b570      	push	{r4, r5, r6, lr}
 801964e:	000e      	movs	r6, r1
 8019650:	001d      	movs	r5, r3
 8019652:	230e      	movs	r3, #14
 8019654:	5ec9      	ldrsh	r1, [r1, r3]
 8019656:	0014      	movs	r4, r2
 8019658:	b096      	sub	sp, #88	; 0x58
 801965a:	2900      	cmp	r1, #0
 801965c:	da07      	bge.n	801966e <__swhatbuf_r+0x22>
 801965e:	2300      	movs	r3, #0
 8019660:	602b      	str	r3, [r5, #0]
 8019662:	89b3      	ldrh	r3, [r6, #12]
 8019664:	061b      	lsls	r3, r3, #24
 8019666:	d411      	bmi.n	801968c <__swhatbuf_r+0x40>
 8019668:	2380      	movs	r3, #128	; 0x80
 801966a:	00db      	lsls	r3, r3, #3
 801966c:	e00f      	b.n	801968e <__swhatbuf_r+0x42>
 801966e:	466a      	mov	r2, sp
 8019670:	f000 f93a 	bl	80198e8 <_fstat_r>
 8019674:	2800      	cmp	r0, #0
 8019676:	dbf2      	blt.n	801965e <__swhatbuf_r+0x12>
 8019678:	23f0      	movs	r3, #240	; 0xf0
 801967a:	9901      	ldr	r1, [sp, #4]
 801967c:	021b      	lsls	r3, r3, #8
 801967e:	4019      	ands	r1, r3
 8019680:	4b05      	ldr	r3, [pc, #20]	; (8019698 <__swhatbuf_r+0x4c>)
 8019682:	18c9      	adds	r1, r1, r3
 8019684:	424b      	negs	r3, r1
 8019686:	4159      	adcs	r1, r3
 8019688:	6029      	str	r1, [r5, #0]
 801968a:	e7ed      	b.n	8019668 <__swhatbuf_r+0x1c>
 801968c:	2340      	movs	r3, #64	; 0x40
 801968e:	2000      	movs	r0, #0
 8019690:	6023      	str	r3, [r4, #0]
 8019692:	b016      	add	sp, #88	; 0x58
 8019694:	bd70      	pop	{r4, r5, r6, pc}
 8019696:	46c0      	nop			; (mov r8, r8)
 8019698:	ffffe000 	.word	0xffffe000

0801969c <__smakebuf_r>:
 801969c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801969e:	2602      	movs	r6, #2
 80196a0:	898b      	ldrh	r3, [r1, #12]
 80196a2:	0005      	movs	r5, r0
 80196a4:	000c      	movs	r4, r1
 80196a6:	4233      	tst	r3, r6
 80196a8:	d006      	beq.n	80196b8 <__smakebuf_r+0x1c>
 80196aa:	0023      	movs	r3, r4
 80196ac:	3347      	adds	r3, #71	; 0x47
 80196ae:	6023      	str	r3, [r4, #0]
 80196b0:	6123      	str	r3, [r4, #16]
 80196b2:	2301      	movs	r3, #1
 80196b4:	6163      	str	r3, [r4, #20]
 80196b6:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 80196b8:	466a      	mov	r2, sp
 80196ba:	ab01      	add	r3, sp, #4
 80196bc:	f7ff ffc6 	bl	801964c <__swhatbuf_r>
 80196c0:	9900      	ldr	r1, [sp, #0]
 80196c2:	0007      	movs	r7, r0
 80196c4:	0028      	movs	r0, r5
 80196c6:	f7fc ff91 	bl	80165ec <_malloc_r>
 80196ca:	2800      	cmp	r0, #0
 80196cc:	d108      	bne.n	80196e0 <__smakebuf_r+0x44>
 80196ce:	220c      	movs	r2, #12
 80196d0:	5ea3      	ldrsh	r3, [r4, r2]
 80196d2:	059a      	lsls	r2, r3, #22
 80196d4:	d4ef      	bmi.n	80196b6 <__smakebuf_r+0x1a>
 80196d6:	2203      	movs	r2, #3
 80196d8:	4393      	bics	r3, r2
 80196da:	431e      	orrs	r6, r3
 80196dc:	81a6      	strh	r6, [r4, #12]
 80196de:	e7e4      	b.n	80196aa <__smakebuf_r+0xe>
 80196e0:	4b0f      	ldr	r3, [pc, #60]	; (8019720 <__smakebuf_r+0x84>)
 80196e2:	62ab      	str	r3, [r5, #40]	; 0x28
 80196e4:	2380      	movs	r3, #128	; 0x80
 80196e6:	89a2      	ldrh	r2, [r4, #12]
 80196e8:	6020      	str	r0, [r4, #0]
 80196ea:	4313      	orrs	r3, r2
 80196ec:	81a3      	strh	r3, [r4, #12]
 80196ee:	9b00      	ldr	r3, [sp, #0]
 80196f0:	6120      	str	r0, [r4, #16]
 80196f2:	6163      	str	r3, [r4, #20]
 80196f4:	9b01      	ldr	r3, [sp, #4]
 80196f6:	2b00      	cmp	r3, #0
 80196f8:	d00d      	beq.n	8019716 <__smakebuf_r+0x7a>
 80196fa:	0028      	movs	r0, r5
 80196fc:	230e      	movs	r3, #14
 80196fe:	5ee1      	ldrsh	r1, [r4, r3]
 8019700:	f000 f904 	bl	801990c <_isatty_r>
 8019704:	2800      	cmp	r0, #0
 8019706:	d006      	beq.n	8019716 <__smakebuf_r+0x7a>
 8019708:	2203      	movs	r2, #3
 801970a:	89a3      	ldrh	r3, [r4, #12]
 801970c:	4393      	bics	r3, r2
 801970e:	001a      	movs	r2, r3
 8019710:	2301      	movs	r3, #1
 8019712:	4313      	orrs	r3, r2
 8019714:	81a3      	strh	r3, [r4, #12]
 8019716:	89a0      	ldrh	r0, [r4, #12]
 8019718:	4307      	orrs	r7, r0
 801971a:	81a7      	strh	r7, [r4, #12]
 801971c:	e7cb      	b.n	80196b6 <__smakebuf_r+0x1a>
 801971e:	46c0      	nop			; (mov r8, r8)
 8019720:	08019489 	.word	0x08019489

08019724 <memchr>:
 8019724:	b2c9      	uxtb	r1, r1
 8019726:	1882      	adds	r2, r0, r2
 8019728:	4290      	cmp	r0, r2
 801972a:	d101      	bne.n	8019730 <memchr+0xc>
 801972c:	2000      	movs	r0, #0
 801972e:	4770      	bx	lr
 8019730:	7803      	ldrb	r3, [r0, #0]
 8019732:	428b      	cmp	r3, r1
 8019734:	d0fb      	beq.n	801972e <memchr+0xa>
 8019736:	3001      	adds	r0, #1
 8019738:	e7f6      	b.n	8019728 <memchr+0x4>

0801973a <memmove>:
 801973a:	b510      	push	{r4, lr}
 801973c:	4288      	cmp	r0, r1
 801973e:	d902      	bls.n	8019746 <memmove+0xc>
 8019740:	188b      	adds	r3, r1, r2
 8019742:	4298      	cmp	r0, r3
 8019744:	d303      	bcc.n	801974e <memmove+0x14>
 8019746:	2300      	movs	r3, #0
 8019748:	e007      	b.n	801975a <memmove+0x20>
 801974a:	5c8b      	ldrb	r3, [r1, r2]
 801974c:	5483      	strb	r3, [r0, r2]
 801974e:	3a01      	subs	r2, #1
 8019750:	d2fb      	bcs.n	801974a <memmove+0x10>
 8019752:	bd10      	pop	{r4, pc}
 8019754:	5ccc      	ldrb	r4, [r1, r3]
 8019756:	54c4      	strb	r4, [r0, r3]
 8019758:	3301      	adds	r3, #1
 801975a:	429a      	cmp	r2, r3
 801975c:	d1fa      	bne.n	8019754 <memmove+0x1a>
 801975e:	e7f8      	b.n	8019752 <memmove+0x18>

08019760 <_malloc_usable_size_r>:
 8019760:	1f0b      	subs	r3, r1, #4
 8019762:	681b      	ldr	r3, [r3, #0]
 8019764:	1f18      	subs	r0, r3, #4
 8019766:	2b00      	cmp	r3, #0
 8019768:	da01      	bge.n	801976e <_malloc_usable_size_r+0xe>
 801976a:	580b      	ldr	r3, [r1, r0]
 801976c:	18c0      	adds	r0, r0, r3
 801976e:	4770      	bx	lr

08019770 <_raise_r>:
 8019770:	b570      	push	{r4, r5, r6, lr}
 8019772:	0004      	movs	r4, r0
 8019774:	000d      	movs	r5, r1
 8019776:	291f      	cmp	r1, #31
 8019778:	d904      	bls.n	8019784 <_raise_r+0x14>
 801977a:	2316      	movs	r3, #22
 801977c:	6003      	str	r3, [r0, #0]
 801977e:	2001      	movs	r0, #1
 8019780:	4240      	negs	r0, r0
 8019782:	bd70      	pop	{r4, r5, r6, pc}
 8019784:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8019786:	2b00      	cmp	r3, #0
 8019788:	d004      	beq.n	8019794 <_raise_r+0x24>
 801978a:	008a      	lsls	r2, r1, #2
 801978c:	189b      	adds	r3, r3, r2
 801978e:	681a      	ldr	r2, [r3, #0]
 8019790:	2a00      	cmp	r2, #0
 8019792:	d108      	bne.n	80197a6 <_raise_r+0x36>
 8019794:	0020      	movs	r0, r4
 8019796:	f000 f831 	bl	80197fc <_getpid_r>
 801979a:	002a      	movs	r2, r5
 801979c:	0001      	movs	r1, r0
 801979e:	0020      	movs	r0, r4
 80197a0:	f000 f81a 	bl	80197d8 <_kill_r>
 80197a4:	e7ed      	b.n	8019782 <_raise_r+0x12>
 80197a6:	2000      	movs	r0, #0
 80197a8:	2a01      	cmp	r2, #1
 80197aa:	d0ea      	beq.n	8019782 <_raise_r+0x12>
 80197ac:	1c51      	adds	r1, r2, #1
 80197ae:	d103      	bne.n	80197b8 <_raise_r+0x48>
 80197b0:	2316      	movs	r3, #22
 80197b2:	3001      	adds	r0, #1
 80197b4:	6023      	str	r3, [r4, #0]
 80197b6:	e7e4      	b.n	8019782 <_raise_r+0x12>
 80197b8:	2400      	movs	r4, #0
 80197ba:	0028      	movs	r0, r5
 80197bc:	601c      	str	r4, [r3, #0]
 80197be:	4790      	blx	r2
 80197c0:	0020      	movs	r0, r4
 80197c2:	e7de      	b.n	8019782 <_raise_r+0x12>

080197c4 <raise>:
 80197c4:	b510      	push	{r4, lr}
 80197c6:	4b03      	ldr	r3, [pc, #12]	; (80197d4 <raise+0x10>)
 80197c8:	0001      	movs	r1, r0
 80197ca:	6818      	ldr	r0, [r3, #0]
 80197cc:	f7ff ffd0 	bl	8019770 <_raise_r>
 80197d0:	bd10      	pop	{r4, pc}
 80197d2:	46c0      	nop			; (mov r8, r8)
 80197d4:	20000368 	.word	0x20000368

080197d8 <_kill_r>:
 80197d8:	2300      	movs	r3, #0
 80197da:	b570      	push	{r4, r5, r6, lr}
 80197dc:	4d06      	ldr	r5, [pc, #24]	; (80197f8 <_kill_r+0x20>)
 80197de:	0004      	movs	r4, r0
 80197e0:	0008      	movs	r0, r1
 80197e2:	0011      	movs	r1, r2
 80197e4:	602b      	str	r3, [r5, #0]
 80197e6:	f000 f8eb 	bl	80199c0 <_kill>
 80197ea:	1c43      	adds	r3, r0, #1
 80197ec:	d103      	bne.n	80197f6 <_kill_r+0x1e>
 80197ee:	682b      	ldr	r3, [r5, #0]
 80197f0:	2b00      	cmp	r3, #0
 80197f2:	d000      	beq.n	80197f6 <_kill_r+0x1e>
 80197f4:	6023      	str	r3, [r4, #0]
 80197f6:	bd70      	pop	{r4, r5, r6, pc}
 80197f8:	20006978 	.word	0x20006978

080197fc <_getpid_r>:
 80197fc:	b510      	push	{r4, lr}
 80197fe:	f000 f8cf 	bl	80199a0 <_getpid>
 8019802:	bd10      	pop	{r4, pc}

08019804 <__sread>:
 8019804:	b570      	push	{r4, r5, r6, lr}
 8019806:	000c      	movs	r4, r1
 8019808:	250e      	movs	r5, #14
 801980a:	5f49      	ldrsh	r1, [r1, r5]
 801980c:	f000 f8a4 	bl	8019958 <_read_r>
 8019810:	2800      	cmp	r0, #0
 8019812:	db03      	blt.n	801981c <__sread+0x18>
 8019814:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8019816:	181b      	adds	r3, r3, r0
 8019818:	6563      	str	r3, [r4, #84]	; 0x54
 801981a:	bd70      	pop	{r4, r5, r6, pc}
 801981c:	89a3      	ldrh	r3, [r4, #12]
 801981e:	4a02      	ldr	r2, [pc, #8]	; (8019828 <__sread+0x24>)
 8019820:	4013      	ands	r3, r2
 8019822:	81a3      	strh	r3, [r4, #12]
 8019824:	e7f9      	b.n	801981a <__sread+0x16>
 8019826:	46c0      	nop			; (mov r8, r8)
 8019828:	ffffefff 	.word	0xffffefff

0801982c <__swrite>:
 801982c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801982e:	001f      	movs	r7, r3
 8019830:	898b      	ldrh	r3, [r1, #12]
 8019832:	0005      	movs	r5, r0
 8019834:	000c      	movs	r4, r1
 8019836:	0016      	movs	r6, r2
 8019838:	05db      	lsls	r3, r3, #23
 801983a:	d505      	bpl.n	8019848 <__swrite+0x1c>
 801983c:	230e      	movs	r3, #14
 801983e:	5ec9      	ldrsh	r1, [r1, r3]
 8019840:	2200      	movs	r2, #0
 8019842:	2302      	movs	r3, #2
 8019844:	f000 f874 	bl	8019930 <_lseek_r>
 8019848:	89a3      	ldrh	r3, [r4, #12]
 801984a:	4a05      	ldr	r2, [pc, #20]	; (8019860 <__swrite+0x34>)
 801984c:	0028      	movs	r0, r5
 801984e:	4013      	ands	r3, r2
 8019850:	81a3      	strh	r3, [r4, #12]
 8019852:	0032      	movs	r2, r6
 8019854:	230e      	movs	r3, #14
 8019856:	5ee1      	ldrsh	r1, [r4, r3]
 8019858:	003b      	movs	r3, r7
 801985a:	f000 f81f 	bl	801989c <_write_r>
 801985e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019860:	ffffefff 	.word	0xffffefff

08019864 <__sseek>:
 8019864:	b570      	push	{r4, r5, r6, lr}
 8019866:	000c      	movs	r4, r1
 8019868:	250e      	movs	r5, #14
 801986a:	5f49      	ldrsh	r1, [r1, r5]
 801986c:	f000 f860 	bl	8019930 <_lseek_r>
 8019870:	89a3      	ldrh	r3, [r4, #12]
 8019872:	1c42      	adds	r2, r0, #1
 8019874:	d103      	bne.n	801987e <__sseek+0x1a>
 8019876:	4a05      	ldr	r2, [pc, #20]	; (801988c <__sseek+0x28>)
 8019878:	4013      	ands	r3, r2
 801987a:	81a3      	strh	r3, [r4, #12]
 801987c:	bd70      	pop	{r4, r5, r6, pc}
 801987e:	2280      	movs	r2, #128	; 0x80
 8019880:	0152      	lsls	r2, r2, #5
 8019882:	4313      	orrs	r3, r2
 8019884:	81a3      	strh	r3, [r4, #12]
 8019886:	6560      	str	r0, [r4, #84]	; 0x54
 8019888:	e7f8      	b.n	801987c <__sseek+0x18>
 801988a:	46c0      	nop			; (mov r8, r8)
 801988c:	ffffefff 	.word	0xffffefff

08019890 <__sclose>:
 8019890:	b510      	push	{r4, lr}
 8019892:	230e      	movs	r3, #14
 8019894:	5ec9      	ldrsh	r1, [r1, r3]
 8019896:	f000 f815 	bl	80198c4 <_close_r>
 801989a:	bd10      	pop	{r4, pc}

0801989c <_write_r>:
 801989c:	b570      	push	{r4, r5, r6, lr}
 801989e:	0004      	movs	r4, r0
 80198a0:	0008      	movs	r0, r1
 80198a2:	0011      	movs	r1, r2
 80198a4:	001a      	movs	r2, r3
 80198a6:	2300      	movs	r3, #0
 80198a8:	4d05      	ldr	r5, [pc, #20]	; (80198c0 <_write_r+0x24>)
 80198aa:	602b      	str	r3, [r5, #0]
 80198ac:	f000 f8b0 	bl	8019a10 <_write>
 80198b0:	1c43      	adds	r3, r0, #1
 80198b2:	d103      	bne.n	80198bc <_write_r+0x20>
 80198b4:	682b      	ldr	r3, [r5, #0]
 80198b6:	2b00      	cmp	r3, #0
 80198b8:	d000      	beq.n	80198bc <_write_r+0x20>
 80198ba:	6023      	str	r3, [r4, #0]
 80198bc:	bd70      	pop	{r4, r5, r6, pc}
 80198be:	46c0      	nop			; (mov r8, r8)
 80198c0:	20006978 	.word	0x20006978

080198c4 <_close_r>:
 80198c4:	2300      	movs	r3, #0
 80198c6:	b570      	push	{r4, r5, r6, lr}
 80198c8:	4d06      	ldr	r5, [pc, #24]	; (80198e4 <_close_r+0x20>)
 80198ca:	0004      	movs	r4, r0
 80198cc:	0008      	movs	r0, r1
 80198ce:	602b      	str	r3, [r5, #0]
 80198d0:	f000 f856 	bl	8019980 <_close>
 80198d4:	1c43      	adds	r3, r0, #1
 80198d6:	d103      	bne.n	80198e0 <_close_r+0x1c>
 80198d8:	682b      	ldr	r3, [r5, #0]
 80198da:	2b00      	cmp	r3, #0
 80198dc:	d000      	beq.n	80198e0 <_close_r+0x1c>
 80198de:	6023      	str	r3, [r4, #0]
 80198e0:	bd70      	pop	{r4, r5, r6, pc}
 80198e2:	46c0      	nop			; (mov r8, r8)
 80198e4:	20006978 	.word	0x20006978

080198e8 <_fstat_r>:
 80198e8:	2300      	movs	r3, #0
 80198ea:	b570      	push	{r4, r5, r6, lr}
 80198ec:	4d06      	ldr	r5, [pc, #24]	; (8019908 <_fstat_r+0x20>)
 80198ee:	0004      	movs	r4, r0
 80198f0:	0008      	movs	r0, r1
 80198f2:	0011      	movs	r1, r2
 80198f4:	602b      	str	r3, [r5, #0]
 80198f6:	f000 f84b 	bl	8019990 <_fstat>
 80198fa:	1c43      	adds	r3, r0, #1
 80198fc:	d103      	bne.n	8019906 <_fstat_r+0x1e>
 80198fe:	682b      	ldr	r3, [r5, #0]
 8019900:	2b00      	cmp	r3, #0
 8019902:	d000      	beq.n	8019906 <_fstat_r+0x1e>
 8019904:	6023      	str	r3, [r4, #0]
 8019906:	bd70      	pop	{r4, r5, r6, pc}
 8019908:	20006978 	.word	0x20006978

0801990c <_isatty_r>:
 801990c:	2300      	movs	r3, #0
 801990e:	b570      	push	{r4, r5, r6, lr}
 8019910:	4d06      	ldr	r5, [pc, #24]	; (801992c <_isatty_r+0x20>)
 8019912:	0004      	movs	r4, r0
 8019914:	0008      	movs	r0, r1
 8019916:	602b      	str	r3, [r5, #0]
 8019918:	f000 f84a 	bl	80199b0 <_isatty>
 801991c:	1c43      	adds	r3, r0, #1
 801991e:	d103      	bne.n	8019928 <_isatty_r+0x1c>
 8019920:	682b      	ldr	r3, [r5, #0]
 8019922:	2b00      	cmp	r3, #0
 8019924:	d000      	beq.n	8019928 <_isatty_r+0x1c>
 8019926:	6023      	str	r3, [r4, #0]
 8019928:	bd70      	pop	{r4, r5, r6, pc}
 801992a:	46c0      	nop			; (mov r8, r8)
 801992c:	20006978 	.word	0x20006978

08019930 <_lseek_r>:
 8019930:	b570      	push	{r4, r5, r6, lr}
 8019932:	0004      	movs	r4, r0
 8019934:	0008      	movs	r0, r1
 8019936:	0011      	movs	r1, r2
 8019938:	001a      	movs	r2, r3
 801993a:	2300      	movs	r3, #0
 801993c:	4d05      	ldr	r5, [pc, #20]	; (8019954 <_lseek_r+0x24>)
 801993e:	602b      	str	r3, [r5, #0]
 8019940:	f000 f846 	bl	80199d0 <_lseek>
 8019944:	1c43      	adds	r3, r0, #1
 8019946:	d103      	bne.n	8019950 <_lseek_r+0x20>
 8019948:	682b      	ldr	r3, [r5, #0]
 801994a:	2b00      	cmp	r3, #0
 801994c:	d000      	beq.n	8019950 <_lseek_r+0x20>
 801994e:	6023      	str	r3, [r4, #0]
 8019950:	bd70      	pop	{r4, r5, r6, pc}
 8019952:	46c0      	nop			; (mov r8, r8)
 8019954:	20006978 	.word	0x20006978

08019958 <_read_r>:
 8019958:	b570      	push	{r4, r5, r6, lr}
 801995a:	0004      	movs	r4, r0
 801995c:	0008      	movs	r0, r1
 801995e:	0011      	movs	r1, r2
 8019960:	001a      	movs	r2, r3
 8019962:	2300      	movs	r3, #0
 8019964:	4d05      	ldr	r5, [pc, #20]	; (801997c <_read_r+0x24>)
 8019966:	602b      	str	r3, [r5, #0]
 8019968:	f000 f83a 	bl	80199e0 <_read>
 801996c:	1c43      	adds	r3, r0, #1
 801996e:	d103      	bne.n	8019978 <_read_r+0x20>
 8019970:	682b      	ldr	r3, [r5, #0]
 8019972:	2b00      	cmp	r3, #0
 8019974:	d000      	beq.n	8019978 <_read_r+0x20>
 8019976:	6023      	str	r3, [r4, #0]
 8019978:	bd70      	pop	{r4, r5, r6, pc}
 801997a:	46c0      	nop			; (mov r8, r8)
 801997c:	20006978 	.word	0x20006978

08019980 <_close>:
 8019980:	2258      	movs	r2, #88	; 0x58
 8019982:	2001      	movs	r0, #1
 8019984:	4b01      	ldr	r3, [pc, #4]	; (801998c <_close+0xc>)
 8019986:	4240      	negs	r0, r0
 8019988:	601a      	str	r2, [r3, #0]
 801998a:	4770      	bx	lr
 801998c:	20006978 	.word	0x20006978

08019990 <_fstat>:
 8019990:	2258      	movs	r2, #88	; 0x58
 8019992:	2001      	movs	r0, #1
 8019994:	4b01      	ldr	r3, [pc, #4]	; (801999c <_fstat+0xc>)
 8019996:	4240      	negs	r0, r0
 8019998:	601a      	str	r2, [r3, #0]
 801999a:	4770      	bx	lr
 801999c:	20006978 	.word	0x20006978

080199a0 <_getpid>:
 80199a0:	2258      	movs	r2, #88	; 0x58
 80199a2:	2001      	movs	r0, #1
 80199a4:	4b01      	ldr	r3, [pc, #4]	; (80199ac <_getpid+0xc>)
 80199a6:	4240      	negs	r0, r0
 80199a8:	601a      	str	r2, [r3, #0]
 80199aa:	4770      	bx	lr
 80199ac:	20006978 	.word	0x20006978

080199b0 <_isatty>:
 80199b0:	2258      	movs	r2, #88	; 0x58
 80199b2:	4b02      	ldr	r3, [pc, #8]	; (80199bc <_isatty+0xc>)
 80199b4:	2000      	movs	r0, #0
 80199b6:	601a      	str	r2, [r3, #0]
 80199b8:	4770      	bx	lr
 80199ba:	46c0      	nop			; (mov r8, r8)
 80199bc:	20006978 	.word	0x20006978

080199c0 <_kill>:
 80199c0:	2258      	movs	r2, #88	; 0x58
 80199c2:	2001      	movs	r0, #1
 80199c4:	4b01      	ldr	r3, [pc, #4]	; (80199cc <_kill+0xc>)
 80199c6:	4240      	negs	r0, r0
 80199c8:	601a      	str	r2, [r3, #0]
 80199ca:	4770      	bx	lr
 80199cc:	20006978 	.word	0x20006978

080199d0 <_lseek>:
 80199d0:	2258      	movs	r2, #88	; 0x58
 80199d2:	2001      	movs	r0, #1
 80199d4:	4b01      	ldr	r3, [pc, #4]	; (80199dc <_lseek+0xc>)
 80199d6:	4240      	negs	r0, r0
 80199d8:	601a      	str	r2, [r3, #0]
 80199da:	4770      	bx	lr
 80199dc:	20006978 	.word	0x20006978

080199e0 <_read>:
 80199e0:	2258      	movs	r2, #88	; 0x58
 80199e2:	2001      	movs	r0, #1
 80199e4:	4b01      	ldr	r3, [pc, #4]	; (80199ec <_read+0xc>)
 80199e6:	4240      	negs	r0, r0
 80199e8:	601a      	str	r2, [r3, #0]
 80199ea:	4770      	bx	lr
 80199ec:	20006978 	.word	0x20006978

080199f0 <_sbrk>:
 80199f0:	4a05      	ldr	r2, [pc, #20]	; (8019a08 <_sbrk+0x18>)
 80199f2:	0003      	movs	r3, r0
 80199f4:	6811      	ldr	r1, [r2, #0]
 80199f6:	2900      	cmp	r1, #0
 80199f8:	d101      	bne.n	80199fe <_sbrk+0xe>
 80199fa:	4904      	ldr	r1, [pc, #16]	; (8019a0c <_sbrk+0x1c>)
 80199fc:	6011      	str	r1, [r2, #0]
 80199fe:	6810      	ldr	r0, [r2, #0]
 8019a00:	18c3      	adds	r3, r0, r3
 8019a02:	6013      	str	r3, [r2, #0]
 8019a04:	4770      	bx	lr
 8019a06:	46c0      	nop			; (mov r8, r8)
 8019a08:	200062e8 	.word	0x200062e8
 8019a0c:	20006988 	.word	0x20006988

08019a10 <_write>:
 8019a10:	2258      	movs	r2, #88	; 0x58
 8019a12:	2001      	movs	r0, #1
 8019a14:	4b01      	ldr	r3, [pc, #4]	; (8019a1c <_write+0xc>)
 8019a16:	4240      	negs	r0, r0
 8019a18:	601a      	str	r2, [r3, #0]
 8019a1a:	4770      	bx	lr
 8019a1c:	20006978 	.word	0x20006978

08019a20 <_exit>:
 8019a20:	e7fe      	b.n	8019a20 <_exit>
	...

08019a24 <_init>:
 8019a24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019a26:	46c0      	nop			; (mov r8, r8)
 8019a28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019a2a:	bc08      	pop	{r3}
 8019a2c:	469e      	mov	lr, r3
 8019a2e:	4770      	bx	lr

08019a30 <_fini>:
 8019a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019a32:	46c0      	nop			; (mov r8, r8)
 8019a34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019a36:	bc08      	pop	{r3}
 8019a38:	469e      	mov	lr, r3
 8019a3a:	4770      	bx	lr
